# coding: utf-8

"""
    python-circular-reference API

    A simple API based for testing python-circular-reference.

    The version of the OpenAPI document: 1.0.0
    Contact: support@example.com
    Created by: http://example.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from python_circular_reference import schemas  # noqa: F401


class TestInfiniteLoop(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "required",
        }
        
        class properties:
        
            @staticmethod
            def required() -> typing.Type['TestFetchResponse']:
                return TestFetchResponse
        
            @staticmethod
            def value() -> typing.Type['TestFetchResponse']:
                return TestFetchResponse
            __annotations__ = {
                "required": required,
                "value": value,
            }
    
    required: 'TestFetchResponse'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required"]) -> 'TestFetchResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> 'TestFetchResponse': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["required", "value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required"]) -> 'TestFetchResponse': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union['TestFetchResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["required", "value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        required: 'TestFetchResponse',
        value: typing.Union['TestFetchResponse', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TestInfiniteLoop':
        return super().__new__(
            cls,
            *args,
            required=required,
            value=value,
            _configuration=_configuration,
            **kwargs,
        )

from python_circular_reference.model.test_fetch_response import TestFetchResponse
