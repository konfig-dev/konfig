/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// OptionChainInnerChainPerRootInnerChainPerStrikePriceInner
    /// </summary>
    [DataContract(Name = "OptionChain_inner_chainPerRoot_inner_chainPerStrikePrice_inner")]
    public partial class OptionChainInnerChainPerRootInnerChainPerStrikePriceInner : IEquatable<OptionChainInnerChainPerRootInnerChainPerStrikePriceInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionChainInnerChainPerRootInnerChainPerStrikePriceInner" /> class.
        /// </summary>
        /// <param name="strikePrice">strikePrice.</param>
        /// <param name="callSymbolId">callSymbolId.</param>
        /// <param name="putSymbolId">putSymbolId.</param>
        public OptionChainInnerChainPerRootInnerChainPerStrikePriceInner(int? strikePrice = default(int?), int? callSymbolId = default(int?), int? putSymbolId = default(int?)) : base()
        {
            this.StrikePrice = strikePrice;
            this.CallSymbolId = callSymbolId;
            this.PutSymbolId = putSymbolId;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets StrikePrice
        /// </summary>
        [DataMember(Name = "strikePrice", EmitDefaultValue = true)]
        public int? StrikePrice { get; set; }

        /// <summary>
        /// Gets or Sets CallSymbolId
        /// </summary>
        [DataMember(Name = "callSymbolId", EmitDefaultValue = true)]
        public int? CallSymbolId { get; set; }

        /// <summary>
        /// Gets or Sets PutSymbolId
        /// </summary>
        [DataMember(Name = "putSymbolId", EmitDefaultValue = true)]
        public int? PutSymbolId { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptionChainInnerChainPerRootInnerChainPerStrikePriceInner {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  StrikePrice: ").Append(StrikePrice).Append("\n");
            sb.Append("  CallSymbolId: ").Append(CallSymbolId).Append("\n");
            sb.Append("  PutSymbolId: ").Append(PutSymbolId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptionChainInnerChainPerRootInnerChainPerStrikePriceInner);
        }

        /// <summary>
        /// Returns true if OptionChainInnerChainPerRootInnerChainPerStrikePriceInner instances are equal
        /// </summary>
        /// <param name="input">Instance of OptionChainInnerChainPerRootInnerChainPerStrikePriceInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptionChainInnerChainPerRootInnerChainPerStrikePriceInner input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.StrikePrice == input.StrikePrice ||
                    (this.StrikePrice != null &&
                    this.StrikePrice.Equals(input.StrikePrice))
                ) && base.Equals(input) && 
                (
                    this.CallSymbolId == input.CallSymbolId ||
                    (this.CallSymbolId != null &&
                    this.CallSymbolId.Equals(input.CallSymbolId))
                ) && base.Equals(input) && 
                (
                    this.PutSymbolId == input.PutSymbolId ||
                    (this.PutSymbolId != null &&
                    this.PutSymbolId.Equals(input.PutSymbolId))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.StrikePrice != null)
                {
                    hashCode = (hashCode * 59) + this.StrikePrice.GetHashCode();
                }
                if (this.CallSymbolId != null)
                {
                    hashCode = (hashCode * 59) + this.CallSymbolId.GetHashCode();
                }
                if (this.PutSymbolId != null)
                {
                    hashCode = (hashCode * 59) + this.PutSymbolId.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
