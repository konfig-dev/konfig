/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// PortfolioGroupSettings
    /// </summary>
    [DataContract(Name = "PortfolioGroupSettings")]
    public partial class PortfolioGroupSettings : IEquatable<PortfolioGroupSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioGroupSettings" /> class.
        /// </summary>
        /// <param name="buyOnly">buyOnly.</param>
        /// <param name="cashOptimizer">cashOptimizer.</param>
        /// <param name="notifyFrequency">notifyFrequency.</param>
        /// <param name="driftThreshold">driftThreshold.</param>
        /// <param name="preferredCurrency">preferredCurrency.</param>
        public PortfolioGroupSettings(bool buyOnly = default(bool), bool cashOptimizer = default(bool), string notifyFrequency = default(string), double driftThreshold = default(double), Currency preferredCurrency = default(Currency)) : base()
        {
            this.BuyOnly = buyOnly;
            this.CashOptimizer = cashOptimizer;
            this.NotifyFrequency = notifyFrequency;
            this.DriftThreshold = driftThreshold;
            this.PreferredCurrency = preferredCurrency;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets BuyOnly
        /// </summary>
        [DataMember(Name = "buyOnly", EmitDefaultValue = true)]
        public bool BuyOnly { get; set; }

        /// <summary>
        /// Gets or Sets CashOptimizer
        /// </summary>
        [DataMember(Name = "cash_optimizer", EmitDefaultValue = true)]
        public bool CashOptimizer { get; set; }

        /// <summary>
        /// Gets or Sets NotifyFrequency
        /// </summary>
        [DataMember(Name = "notifyFrequency", EmitDefaultValue = false)]
        public string NotifyFrequency { get; set; }

        /// <summary>
        /// Gets or Sets DriftThreshold
        /// </summary>
        [DataMember(Name = "driftThreshold", EmitDefaultValue = false)]
        public double DriftThreshold { get; set; }

        /// <summary>
        /// Gets or Sets PreferredCurrency
        /// </summary>
        [DataMember(Name = "preferred_currency", EmitDefaultValue = false)]
        public Currency PreferredCurrency { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PortfolioGroupSettings {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BuyOnly: ").Append(BuyOnly).Append("\n");
            sb.Append("  CashOptimizer: ").Append(CashOptimizer).Append("\n");
            sb.Append("  NotifyFrequency: ").Append(NotifyFrequency).Append("\n");
            sb.Append("  DriftThreshold: ").Append(DriftThreshold).Append("\n");
            sb.Append("  PreferredCurrency: ").Append(PreferredCurrency).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PortfolioGroupSettings);
        }

        /// <summary>
        /// Returns true if PortfolioGroupSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of PortfolioGroupSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PortfolioGroupSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.BuyOnly == input.BuyOnly ||
                    this.BuyOnly.Equals(input.BuyOnly)
                ) && base.Equals(input) && 
                (
                    this.CashOptimizer == input.CashOptimizer ||
                    this.CashOptimizer.Equals(input.CashOptimizer)
                ) && base.Equals(input) && 
                (
                    this.NotifyFrequency == input.NotifyFrequency ||
                    (this.NotifyFrequency != null &&
                    this.NotifyFrequency.Equals(input.NotifyFrequency))
                ) && base.Equals(input) && 
                (
                    this.DriftThreshold == input.DriftThreshold ||
                    this.DriftThreshold.Equals(input.DriftThreshold)
                ) && base.Equals(input) && 
                (
                    this.PreferredCurrency == input.PreferredCurrency ||
                    (this.PreferredCurrency != null &&
                    this.PreferredCurrency.Equals(input.PreferredCurrency))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.BuyOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.CashOptimizer.GetHashCode();
                if (this.NotifyFrequency != null)
                {
                    hashCode = (hashCode * 59) + this.NotifyFrequency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DriftThreshold.GetHashCode();
                if (this.PreferredCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.PreferredCurrency.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // DriftThreshold (double) maximum
            if (this.DriftThreshold > (double)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DriftThreshold, must be a value less than or equal to 100.", new [] { "DriftThreshold" });
            }

            // DriftThreshold (double) minimum
            if (this.DriftThreshold < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DriftThreshold, must be a value greater than or equal to 0.", new [] { "DriftThreshold" });
            }

            yield break;
        }
    }

}
