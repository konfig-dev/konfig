/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// ModelPortfolioDetails
    /// </summary>
    [DataContract(Name = "ModelPortfolioDetails")]
    public partial class ModelPortfolioDetails : IEquatable<ModelPortfolioDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelPortfolioDetails" /> class.
        /// </summary>
        /// <param name="modelPortfolio">modelPortfolio.</param>
        /// <param name="modelPortfolioSecurity">modelPortfolioSecurity.</param>
        /// <param name="modelPortfolioAssetClass">modelPortfolioAssetClass.</param>
        public ModelPortfolioDetails(ModelPortfolio modelPortfolio = default(ModelPortfolio), List<ModelPortfolioSecurity> modelPortfolioSecurity = default(List<ModelPortfolioSecurity>), List<ModelPortfolioAssetClass> modelPortfolioAssetClass = default(List<ModelPortfolioAssetClass>)) : base()
        {
            this.ModelPortfolio = modelPortfolio;
            this.ModelPortfolioSecurity = modelPortfolioSecurity;
            this.ModelPortfolioAssetClass = modelPortfolioAssetClass;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets ModelPortfolio
        /// </summary>
        [DataMember(Name = "model_portfolio", EmitDefaultValue = false)]
        public ModelPortfolio ModelPortfolio { get; set; }

        /// <summary>
        /// Gets or Sets ModelPortfolioSecurity
        /// </summary>
        [DataMember(Name = "model_portfolio_security", EmitDefaultValue = false)]
        public List<ModelPortfolioSecurity> ModelPortfolioSecurity { get; set; }

        /// <summary>
        /// Gets or Sets ModelPortfolioAssetClass
        /// </summary>
        [DataMember(Name = "model_portfolio_asset_class", EmitDefaultValue = false)]
        public List<ModelPortfolioAssetClass> ModelPortfolioAssetClass { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelPortfolioDetails {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ModelPortfolio: ").Append(ModelPortfolio).Append("\n");
            sb.Append("  ModelPortfolioSecurity: ").Append(ModelPortfolioSecurity).Append("\n");
            sb.Append("  ModelPortfolioAssetClass: ").Append(ModelPortfolioAssetClass).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelPortfolioDetails);
        }

        /// <summary>
        /// Returns true if ModelPortfolioDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelPortfolioDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelPortfolioDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.ModelPortfolio == input.ModelPortfolio ||
                    (this.ModelPortfolio != null &&
                    this.ModelPortfolio.Equals(input.ModelPortfolio))
                ) && base.Equals(input) && 
                (
                    this.ModelPortfolioSecurity == input.ModelPortfolioSecurity ||
                    this.ModelPortfolioSecurity != null &&
                    input.ModelPortfolioSecurity != null &&
                    this.ModelPortfolioSecurity.SequenceEqual(input.ModelPortfolioSecurity)
                ) && base.Equals(input) && 
                (
                    this.ModelPortfolioAssetClass == input.ModelPortfolioAssetClass ||
                    this.ModelPortfolioAssetClass != null &&
                    input.ModelPortfolioAssetClass != null &&
                    this.ModelPortfolioAssetClass.SequenceEqual(input.ModelPortfolioAssetClass)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ModelPortfolio != null)
                {
                    hashCode = (hashCode * 59) + this.ModelPortfolio.GetHashCode();
                }
                if (this.ModelPortfolioSecurity != null)
                {
                    hashCode = (hashCode * 59) + this.ModelPortfolioSecurity.GetHashCode();
                }
                if (this.ModelPortfolioAssetClass != null)
                {
                    hashCode = (hashCode * 59) + this.ModelPortfolioAssetClass.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
