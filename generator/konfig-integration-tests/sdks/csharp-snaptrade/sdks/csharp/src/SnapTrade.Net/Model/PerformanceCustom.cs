/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// Performance Custom Response Object
    /// </summary>
    [DataContract(Name = "PerformanceCustom")]
    public partial class PerformanceCustom : IEquatable<PerformanceCustom>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceCustom" /> class.
        /// </summary>
        /// <param name="totalEquityTimeframe">totalEquityTimeframe.</param>
        /// <param name="contributions">contributions.</param>
        /// <param name="contributionTimeframe">contributionTimeframe.</param>
        /// <param name="contributionTimeframeCumulative">contributionTimeframeCumulative.</param>
        /// <param name="withdrawalTimeframe">withdrawalTimeframe.</param>
        /// <param name="contributionStreak">Current streak of cosecutive months where contributions were made.</param>
        /// <param name="contributionMonthsContributed">Number of months in the timeframe with contributions.</param>
        /// <param name="contributionTotalMonths">Total months in timeframe.</param>
        /// <param name="dividends">dividends.</param>
        /// <param name="dividendIncome">Total dividends received over the timeframe.</param>
        /// <param name="monthlyDividends">Average dividends received per month over the timeframe.</param>
        /// <param name="badTickers">list of tickers which may not be supported or may not have accurate price data.</param>
        /// <param name="dividendTimeline">dividendTimeline.</param>
        /// <param name="commissions">commissions incurred during the timeframe.</param>
        /// <param name="forexFees">forex fees incurred during the timeframe.</param>
        /// <param name="fees">other fees incurred during the timeframe.</param>
        /// <param name="rateOfReturn">The return rate over the timeframe. Annualized if timeframe is longer than 1 year.</param>
        /// <param name="returnRateTimeframe">returnRateTimeframe.</param>
        /// <param name="detailedMode">Whether the user has detailed mode enabled (more frequent data points for totalEquity and contribution timeframes).</param>
        public PerformanceCustom(List<PastValue> totalEquityTimeframe = default(List<PastValue>), NetContributions contributions = default(NetContributions), List<PastValue> contributionTimeframe = default(List<PastValue>), List<PastValue> contributionTimeframeCumulative = default(List<PastValue>), List<PastValue> withdrawalTimeframe = default(List<PastValue>), double? contributionStreak = default(double?), double? contributionMonthsContributed = default(double?), double? contributionTotalMonths = default(double?), List<NetDividend> dividends = default(List<NetDividend>), double? dividendIncome = default(double?), double? monthlyDividends = default(double?), List<string> badTickers = default(List<string>), List<MonthlyDividends> dividendTimeline = default(List<MonthlyDividends>), double? commissions = default(double?), double? forexFees = default(double?), double? fees = default(double?), double? rateOfReturn = default(double?), List<SubPeriodReturnRate> returnRateTimeframe = default(List<SubPeriodReturnRate>), bool detailedMode = default(bool)) : base()
        {
            this.TotalEquityTimeframe = totalEquityTimeframe;
            this.Contributions = contributions;
            this.ContributionTimeframe = contributionTimeframe;
            this.ContributionTimeframeCumulative = contributionTimeframeCumulative;
            this.WithdrawalTimeframe = withdrawalTimeframe;
            this.ContributionStreak = contributionStreak;
            this.ContributionMonthsContributed = contributionMonthsContributed;
            this.ContributionTotalMonths = contributionTotalMonths;
            this.Dividends = dividends;
            this.DividendIncome = dividendIncome;
            this.MonthlyDividends = monthlyDividends;
            this.BadTickers = badTickers;
            this.DividendTimeline = dividendTimeline;
            this.Commissions = commissions;
            this.ForexFees = forexFees;
            this.Fees = fees;
            this.RateOfReturn = rateOfReturn;
            this.ReturnRateTimeframe = returnRateTimeframe;
            this.DetailedMode = detailedMode;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets TotalEquityTimeframe
        /// </summary>
        [DataMember(Name = "totalEquityTimeframe", EmitDefaultValue = false)]
        public List<PastValue> TotalEquityTimeframe { get; set; }

        /// <summary>
        /// Gets or Sets Contributions
        /// </summary>
        [DataMember(Name = "contributions", EmitDefaultValue = false)]
        public NetContributions Contributions { get; set; }

        /// <summary>
        /// Gets or Sets ContributionTimeframe
        /// </summary>
        [DataMember(Name = "contributionTimeframe", EmitDefaultValue = false)]
        public List<PastValue> ContributionTimeframe { get; set; }

        /// <summary>
        /// Gets or Sets ContributionTimeframeCumulative
        /// </summary>
        [DataMember(Name = "contributionTimeframeCumulative", EmitDefaultValue = false)]
        public List<PastValue> ContributionTimeframeCumulative { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawalTimeframe
        /// </summary>
        [DataMember(Name = "withdrawalTimeframe", EmitDefaultValue = false)]
        public List<PastValue> WithdrawalTimeframe { get; set; }

        /// <summary>
        /// Current streak of cosecutive months where contributions were made
        /// </summary>
        /// <value>Current streak of cosecutive months where contributions were made</value>
        [DataMember(Name = "contributionStreak", EmitDefaultValue = true)]
        public double? ContributionStreak { get; set; }

        /// <summary>
        /// Number of months in the timeframe with contributions
        /// </summary>
        /// <value>Number of months in the timeframe with contributions</value>
        [DataMember(Name = "contributionMonthsContributed", EmitDefaultValue = true)]
        public double? ContributionMonthsContributed { get; set; }

        /// <summary>
        /// Total months in timeframe
        /// </summary>
        /// <value>Total months in timeframe</value>
        [DataMember(Name = "contributionTotalMonths", EmitDefaultValue = true)]
        public double? ContributionTotalMonths { get; set; }

        /// <summary>
        /// Gets or Sets Dividends
        /// </summary>
        [DataMember(Name = "dividends", EmitDefaultValue = false)]
        public List<NetDividend> Dividends { get; set; }

        /// <summary>
        /// Total dividends received over the timeframe
        /// </summary>
        /// <value>Total dividends received over the timeframe</value>
        [DataMember(Name = "dividendIncome", EmitDefaultValue = true)]
        public double? DividendIncome { get; set; }

        /// <summary>
        /// Average dividends received per month over the timeframe
        /// </summary>
        /// <value>Average dividends received per month over the timeframe</value>
        [DataMember(Name = "monthlyDividends", EmitDefaultValue = true)]
        public double? MonthlyDividends { get; set; }

        /// <summary>
        /// list of tickers which may not be supported or may not have accurate price data
        /// </summary>
        /// <value>list of tickers which may not be supported or may not have accurate price data</value>
        [DataMember(Name = "badTickers", EmitDefaultValue = false)]
        public List<string> BadTickers { get; set; }

        /// <summary>
        /// Gets or Sets DividendTimeline
        /// </summary>
        [DataMember(Name = "dividendTimeline", EmitDefaultValue = false)]
        public List<MonthlyDividends> DividendTimeline { get; set; }

        /// <summary>
        /// commissions incurred during the timeframe
        /// </summary>
        /// <value>commissions incurred during the timeframe</value>
        [DataMember(Name = "commissions", EmitDefaultValue = true)]
        public double? Commissions { get; set; }

        /// <summary>
        /// forex fees incurred during the timeframe
        /// </summary>
        /// <value>forex fees incurred during the timeframe</value>
        [DataMember(Name = "forexFees", EmitDefaultValue = true)]
        public double? ForexFees { get; set; }

        /// <summary>
        /// other fees incurred during the timeframe
        /// </summary>
        /// <value>other fees incurred during the timeframe</value>
        [DataMember(Name = "fees", EmitDefaultValue = true)]
        public double? Fees { get; set; }

        /// <summary>
        /// The return rate over the timeframe. Annualized if timeframe is longer than 1 year
        /// </summary>
        /// <value>The return rate over the timeframe. Annualized if timeframe is longer than 1 year</value>
        [DataMember(Name = "rateOfReturn", EmitDefaultValue = true)]
        public double? RateOfReturn { get; set; }

        /// <summary>
        /// Gets or Sets ReturnRateTimeframe
        /// </summary>
        [DataMember(Name = "returnRateTimeframe", EmitDefaultValue = false)]
        public List<SubPeriodReturnRate> ReturnRateTimeframe { get; set; }

        /// <summary>
        /// Whether the user has detailed mode enabled (more frequent data points for totalEquity and contribution timeframes)
        /// </summary>
        /// <value>Whether the user has detailed mode enabled (more frequent data points for totalEquity and contribution timeframes)</value>
        [DataMember(Name = "detailedMode", EmitDefaultValue = true)]
        public bool DetailedMode { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PerformanceCustom {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  TotalEquityTimeframe: ").Append(TotalEquityTimeframe).Append("\n");
            sb.Append("  Contributions: ").Append(Contributions).Append("\n");
            sb.Append("  ContributionTimeframe: ").Append(ContributionTimeframe).Append("\n");
            sb.Append("  ContributionTimeframeCumulative: ").Append(ContributionTimeframeCumulative).Append("\n");
            sb.Append("  WithdrawalTimeframe: ").Append(WithdrawalTimeframe).Append("\n");
            sb.Append("  ContributionStreak: ").Append(ContributionStreak).Append("\n");
            sb.Append("  ContributionMonthsContributed: ").Append(ContributionMonthsContributed).Append("\n");
            sb.Append("  ContributionTotalMonths: ").Append(ContributionTotalMonths).Append("\n");
            sb.Append("  Dividends: ").Append(Dividends).Append("\n");
            sb.Append("  DividendIncome: ").Append(DividendIncome).Append("\n");
            sb.Append("  MonthlyDividends: ").Append(MonthlyDividends).Append("\n");
            sb.Append("  BadTickers: ").Append(BadTickers).Append("\n");
            sb.Append("  DividendTimeline: ").Append(DividendTimeline).Append("\n");
            sb.Append("  Commissions: ").Append(Commissions).Append("\n");
            sb.Append("  ForexFees: ").Append(ForexFees).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  RateOfReturn: ").Append(RateOfReturn).Append("\n");
            sb.Append("  ReturnRateTimeframe: ").Append(ReturnRateTimeframe).Append("\n");
            sb.Append("  DetailedMode: ").Append(DetailedMode).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PerformanceCustom);
        }

        /// <summary>
        /// Returns true if PerformanceCustom instances are equal
        /// </summary>
        /// <param name="input">Instance of PerformanceCustom to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceCustom input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.TotalEquityTimeframe == input.TotalEquityTimeframe ||
                    this.TotalEquityTimeframe != null &&
                    input.TotalEquityTimeframe != null &&
                    this.TotalEquityTimeframe.SequenceEqual(input.TotalEquityTimeframe)
                ) && base.Equals(input) && 
                (
                    this.Contributions == input.Contributions ||
                    (this.Contributions != null &&
                    this.Contributions.Equals(input.Contributions))
                ) && base.Equals(input) && 
                (
                    this.ContributionTimeframe == input.ContributionTimeframe ||
                    this.ContributionTimeframe != null &&
                    input.ContributionTimeframe != null &&
                    this.ContributionTimeframe.SequenceEqual(input.ContributionTimeframe)
                ) && base.Equals(input) && 
                (
                    this.ContributionTimeframeCumulative == input.ContributionTimeframeCumulative ||
                    this.ContributionTimeframeCumulative != null &&
                    input.ContributionTimeframeCumulative != null &&
                    this.ContributionTimeframeCumulative.SequenceEqual(input.ContributionTimeframeCumulative)
                ) && base.Equals(input) && 
                (
                    this.WithdrawalTimeframe == input.WithdrawalTimeframe ||
                    this.WithdrawalTimeframe != null &&
                    input.WithdrawalTimeframe != null &&
                    this.WithdrawalTimeframe.SequenceEqual(input.WithdrawalTimeframe)
                ) && base.Equals(input) && 
                (
                    this.ContributionStreak == input.ContributionStreak ||
                    (this.ContributionStreak != null &&
                    this.ContributionStreak.Equals(input.ContributionStreak))
                ) && base.Equals(input) && 
                (
                    this.ContributionMonthsContributed == input.ContributionMonthsContributed ||
                    (this.ContributionMonthsContributed != null &&
                    this.ContributionMonthsContributed.Equals(input.ContributionMonthsContributed))
                ) && base.Equals(input) && 
                (
                    this.ContributionTotalMonths == input.ContributionTotalMonths ||
                    (this.ContributionTotalMonths != null &&
                    this.ContributionTotalMonths.Equals(input.ContributionTotalMonths))
                ) && base.Equals(input) && 
                (
                    this.Dividends == input.Dividends ||
                    this.Dividends != null &&
                    input.Dividends != null &&
                    this.Dividends.SequenceEqual(input.Dividends)
                ) && base.Equals(input) && 
                (
                    this.DividendIncome == input.DividendIncome ||
                    (this.DividendIncome != null &&
                    this.DividendIncome.Equals(input.DividendIncome))
                ) && base.Equals(input) && 
                (
                    this.MonthlyDividends == input.MonthlyDividends ||
                    (this.MonthlyDividends != null &&
                    this.MonthlyDividends.Equals(input.MonthlyDividends))
                ) && base.Equals(input) && 
                (
                    this.BadTickers == input.BadTickers ||
                    this.BadTickers != null &&
                    input.BadTickers != null &&
                    this.BadTickers.SequenceEqual(input.BadTickers)
                ) && base.Equals(input) && 
                (
                    this.DividendTimeline == input.DividendTimeline ||
                    this.DividendTimeline != null &&
                    input.DividendTimeline != null &&
                    this.DividendTimeline.SequenceEqual(input.DividendTimeline)
                ) && base.Equals(input) && 
                (
                    this.Commissions == input.Commissions ||
                    (this.Commissions != null &&
                    this.Commissions.Equals(input.Commissions))
                ) && base.Equals(input) && 
                (
                    this.ForexFees == input.ForexFees ||
                    (this.ForexFees != null &&
                    this.ForexFees.Equals(input.ForexFees))
                ) && base.Equals(input) && 
                (
                    this.Fees == input.Fees ||
                    (this.Fees != null &&
                    this.Fees.Equals(input.Fees))
                ) && base.Equals(input) && 
                (
                    this.RateOfReturn == input.RateOfReturn ||
                    (this.RateOfReturn != null &&
                    this.RateOfReturn.Equals(input.RateOfReturn))
                ) && base.Equals(input) && 
                (
                    this.ReturnRateTimeframe == input.ReturnRateTimeframe ||
                    this.ReturnRateTimeframe != null &&
                    input.ReturnRateTimeframe != null &&
                    this.ReturnRateTimeframe.SequenceEqual(input.ReturnRateTimeframe)
                ) && base.Equals(input) && 
                (
                    this.DetailedMode == input.DetailedMode ||
                    this.DetailedMode.Equals(input.DetailedMode)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.TotalEquityTimeframe != null)
                {
                    hashCode = (hashCode * 59) + this.TotalEquityTimeframe.GetHashCode();
                }
                if (this.Contributions != null)
                {
                    hashCode = (hashCode * 59) + this.Contributions.GetHashCode();
                }
                if (this.ContributionTimeframe != null)
                {
                    hashCode = (hashCode * 59) + this.ContributionTimeframe.GetHashCode();
                }
                if (this.ContributionTimeframeCumulative != null)
                {
                    hashCode = (hashCode * 59) + this.ContributionTimeframeCumulative.GetHashCode();
                }
                if (this.WithdrawalTimeframe != null)
                {
                    hashCode = (hashCode * 59) + this.WithdrawalTimeframe.GetHashCode();
                }
                if (this.ContributionStreak != null)
                {
                    hashCode = (hashCode * 59) + this.ContributionStreak.GetHashCode();
                }
                if (this.ContributionMonthsContributed != null)
                {
                    hashCode = (hashCode * 59) + this.ContributionMonthsContributed.GetHashCode();
                }
                if (this.ContributionTotalMonths != null)
                {
                    hashCode = (hashCode * 59) + this.ContributionTotalMonths.GetHashCode();
                }
                if (this.Dividends != null)
                {
                    hashCode = (hashCode * 59) + this.Dividends.GetHashCode();
                }
                if (this.DividendIncome != null)
                {
                    hashCode = (hashCode * 59) + this.DividendIncome.GetHashCode();
                }
                if (this.MonthlyDividends != null)
                {
                    hashCode = (hashCode * 59) + this.MonthlyDividends.GetHashCode();
                }
                if (this.BadTickers != null)
                {
                    hashCode = (hashCode * 59) + this.BadTickers.GetHashCode();
                }
                if (this.DividendTimeline != null)
                {
                    hashCode = (hashCode * 59) + this.DividendTimeline.GetHashCode();
                }
                if (this.Commissions != null)
                {
                    hashCode = (hashCode * 59) + this.Commissions.GetHashCode();
                }
                if (this.ForexFees != null)
                {
                    hashCode = (hashCode * 59) + this.ForexFees.GetHashCode();
                }
                if (this.Fees != null)
                {
                    hashCode = (hashCode * 59) + this.Fees.GetHashCode();
                }
                if (this.RateOfReturn != null)
                {
                    hashCode = (hashCode * 59) + this.RateOfReturn.GetHashCode();
                }
                if (this.ReturnRateTimeframe != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnRateTimeframe.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DetailedMode.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
