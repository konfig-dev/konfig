/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// StrategyOrderPlaceOrdersInner
    /// </summary>
    [DataContract(Name = "StrategyOrderPlace_orders_inner")]
    public partial class StrategyOrderPlaceOrdersInner : IEquatable<StrategyOrderPlaceOrdersInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StrategyOrderPlaceOrdersInner" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="symbol">symbol.</param>
        /// <param name="symbolId">symbolId.</param>
        /// <param name="totalQuantity">totalQuantity.</param>
        /// <param name="openQuantity">openQuantity.</param>
        /// <param name="filledQuantity">filledQuantity.</param>
        /// <param name="canceledQuantity">canceledQuantity.</param>
        /// <param name="side">side.</param>
        /// <param name="orderType">orderType.</param>
        /// <param name="limitPrice">limitPrice.</param>
        /// <param name="stopPrice">stopPrice.</param>
        /// <param name="isAllOrNone">isAllOrNone.</param>
        /// <param name="isAnonymous">isAnonymous.</param>
        /// <param name="icebergQuantity">icebergQuantity.</param>
        /// <param name="minQuantity">minQuantity.</param>
        /// <param name="avgExecPrice">avgExecPrice.</param>
        /// <param name="lastExecPrice">lastExecPrice.</param>
        /// <param name="source">source.</param>
        /// <param name="timeInForce">timeInForce.</param>
        /// <param name="gtdDate">gtdDate.</param>
        /// <param name="state">state.</param>
        /// <param name="rejectionReason">rejectionReason.</param>
        /// <param name="chainId">chainId.</param>
        /// <param name="creationTime">creationTime.</param>
        /// <param name="updateTime">updateTime.</param>
        /// <param name="notes">notes.</param>
        /// <param name="primaryRoute">primaryRoute.</param>
        /// <param name="secondaryRoute">secondaryRoute.</param>
        /// <param name="orderRoute">orderRoute.</param>
        /// <param name="venueHoldingOrder">venueHoldingOrder.</param>
        /// <param name="comissionCharged">comissionCharged.</param>
        /// <param name="exchangeOrderId">exchangeOrderId.</param>
        /// <param name="isSignificantShareHolder">isSignificantShareHolder.</param>
        /// <param name="isInsider">isInsider.</param>
        /// <param name="isLimitOffsetInDollar">isLimitOffsetInDollar.</param>
        /// <param name="userId">userId.</param>
        /// <param name="placementCommission">placementCommission.</param>
        /// <param name="legs">legs.</param>
        /// <param name="strategyType">strategyType.</param>
        /// <param name="triggerStopPrice">triggerStopPrice.</param>
        /// <param name="orderGroupId">orderGroupId.</param>
        /// <param name="orderClass">orderClass.</param>
        /// <param name="isCrossZero">isCrossZero.</param>
        public StrategyOrderPlaceOrdersInner(int id = default(int), string symbol = default(string), int symbolId = default(int), int totalQuantity = default(int), int openQuantity = default(int), int filledQuantity = default(int), int canceledQuantity = default(int), string side = default(string), string orderType = default(string), string limitPrice = default(string), string stopPrice = default(string), bool isAllOrNone = default(bool), bool isAnonymous = default(bool), string icebergQuantity = default(string), string minQuantity = default(string), int avgExecPrice = default(int), string lastExecPrice = default(string), string source = default(string), string timeInForce = default(string), string gtdDate = default(string), string state = default(string), string rejectionReason = default(string), int chainId = default(int), string creationTime = default(string), string updateTime = default(string), string notes = default(string), string primaryRoute = default(string), string secondaryRoute = default(string), string orderRoute = default(string), string venueHoldingOrder = default(string), int comissionCharged = default(int), string exchangeOrderId = default(string), bool isSignificantShareHolder = default(bool), bool isInsider = default(bool), bool isLimitOffsetInDollar = default(bool), int userId = default(int), string placementCommission = default(string), List<StrategyOrderPlaceOrdersInnerLegsInner> legs = default(List<StrategyOrderPlaceOrdersInnerLegsInner>), string strategyType = default(string), string triggerStopPrice = default(string), int orderGroupId = default(int), string orderClass = default(string), bool isCrossZero = default(bool)) : base()
        {
            this.Id = id;
            this.Symbol = symbol;
            this.SymbolId = symbolId;
            this.TotalQuantity = totalQuantity;
            this.OpenQuantity = openQuantity;
            this.FilledQuantity = filledQuantity;
            this.CanceledQuantity = canceledQuantity;
            this.Side = side;
            this.OrderType = orderType;
            this.LimitPrice = limitPrice;
            this.StopPrice = stopPrice;
            this.IsAllOrNone = isAllOrNone;
            this.IsAnonymous = isAnonymous;
            this.IcebergQuantity = icebergQuantity;
            this.MinQuantity = minQuantity;
            this.AvgExecPrice = avgExecPrice;
            this.LastExecPrice = lastExecPrice;
            this.Source = source;
            this.TimeInForce = timeInForce;
            this.GtdDate = gtdDate;
            this.State = state;
            this.RejectionReason = rejectionReason;
            this.ChainId = chainId;
            this.CreationTime = creationTime;
            this.UpdateTime = updateTime;
            this.Notes = notes;
            this.PrimaryRoute = primaryRoute;
            this.SecondaryRoute = secondaryRoute;
            this.OrderRoute = orderRoute;
            this.VenueHoldingOrder = venueHoldingOrder;
            this.ComissionCharged = comissionCharged;
            this.ExchangeOrderId = exchangeOrderId;
            this.IsSignificantShareHolder = isSignificantShareHolder;
            this.IsInsider = isInsider;
            this.IsLimitOffsetInDollar = isLimitOffsetInDollar;
            this.UserId = userId;
            this.PlacementCommission = placementCommission;
            this.Legs = legs;
            this.StrategyType = strategyType;
            this.TriggerStopPrice = triggerStopPrice;
            this.OrderGroupId = orderGroupId;
            this.OrderClass = orderClass;
            this.IsCrossZero = isCrossZero;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets SymbolId
        /// </summary>
        [DataMember(Name = "symbolId", EmitDefaultValue = false)]
        public int SymbolId { get; set; }

        /// <summary>
        /// Gets or Sets TotalQuantity
        /// </summary>
        [DataMember(Name = "totalQuantity", EmitDefaultValue = false)]
        public int TotalQuantity { get; set; }

        /// <summary>
        /// Gets or Sets OpenQuantity
        /// </summary>
        [DataMember(Name = "openQuantity", EmitDefaultValue = false)]
        public int OpenQuantity { get; set; }

        /// <summary>
        /// Gets or Sets FilledQuantity
        /// </summary>
        [DataMember(Name = "filledQuantity", EmitDefaultValue = false)]
        public int FilledQuantity { get; set; }

        /// <summary>
        /// Gets or Sets CanceledQuantity
        /// </summary>
        [DataMember(Name = "canceledQuantity", EmitDefaultValue = false)]
        public int CanceledQuantity { get; set; }

        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [DataMember(Name = "side", EmitDefaultValue = false)]
        public string Side { get; set; }

        /// <summary>
        /// Gets or Sets OrderType
        /// </summary>
        [DataMember(Name = "orderType", EmitDefaultValue = false)]
        public string OrderType { get; set; }

        /// <summary>
        /// Gets or Sets LimitPrice
        /// </summary>
        [DataMember(Name = "limitPrice", EmitDefaultValue = false)]
        public string LimitPrice { get; set; }

        /// <summary>
        /// Gets or Sets StopPrice
        /// </summary>
        [DataMember(Name = "stopPrice", EmitDefaultValue = false)]
        public string StopPrice { get; set; }

        /// <summary>
        /// Gets or Sets IsAllOrNone
        /// </summary>
        [DataMember(Name = "isAllOrNone", EmitDefaultValue = true)]
        public bool IsAllOrNone { get; set; }

        /// <summary>
        /// Gets or Sets IsAnonymous
        /// </summary>
        [DataMember(Name = "isAnonymous", EmitDefaultValue = true)]
        public bool IsAnonymous { get; set; }

        /// <summary>
        /// Gets or Sets IcebergQuantity
        /// </summary>
        [DataMember(Name = "icebergQuantity", EmitDefaultValue = false)]
        public string IcebergQuantity { get; set; }

        /// <summary>
        /// Gets or Sets MinQuantity
        /// </summary>
        [DataMember(Name = "minQuantity", EmitDefaultValue = false)]
        public string MinQuantity { get; set; }

        /// <summary>
        /// Gets or Sets AvgExecPrice
        /// </summary>
        [DataMember(Name = "avgExecPrice", EmitDefaultValue = false)]
        public int AvgExecPrice { get; set; }

        /// <summary>
        /// Gets or Sets LastExecPrice
        /// </summary>
        [DataMember(Name = "lastExecPrice", EmitDefaultValue = false)]
        public string LastExecPrice { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets TimeInForce
        /// </summary>
        [DataMember(Name = "timeInForce", EmitDefaultValue = false)]
        public string TimeInForce { get; set; }

        /// <summary>
        /// Gets or Sets GtdDate
        /// </summary>
        [DataMember(Name = "gtdDate", EmitDefaultValue = false)]
        public string GtdDate { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets RejectionReason
        /// </summary>
        [DataMember(Name = "rejectionReason", EmitDefaultValue = false)]
        public string RejectionReason { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [DataMember(Name = "chainId", EmitDefaultValue = false)]
        public int ChainId { get; set; }

        /// <summary>
        /// Gets or Sets CreationTime
        /// </summary>
        [DataMember(Name = "creationTime", EmitDefaultValue = false)]
        public string CreationTime { get; set; }

        /// <summary>
        /// Gets or Sets UpdateTime
        /// </summary>
        [DataMember(Name = "updateTime", EmitDefaultValue = false)]
        public string UpdateTime { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryRoute
        /// </summary>
        [DataMember(Name = "primaryRoute", EmitDefaultValue = false)]
        public string PrimaryRoute { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryRoute
        /// </summary>
        [DataMember(Name = "secondaryRoute", EmitDefaultValue = false)]
        public string SecondaryRoute { get; set; }

        /// <summary>
        /// Gets or Sets OrderRoute
        /// </summary>
        [DataMember(Name = "orderRoute", EmitDefaultValue = false)]
        public string OrderRoute { get; set; }

        /// <summary>
        /// Gets or Sets VenueHoldingOrder
        /// </summary>
        [DataMember(Name = "venueHoldingOrder", EmitDefaultValue = false)]
        public string VenueHoldingOrder { get; set; }

        /// <summary>
        /// Gets or Sets ComissionCharged
        /// </summary>
        [DataMember(Name = "comissionCharged", EmitDefaultValue = false)]
        public int ComissionCharged { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeOrderId
        /// </summary>
        [DataMember(Name = "exchangeOrderId", EmitDefaultValue = false)]
        public string ExchangeOrderId { get; set; }

        /// <summary>
        /// Gets or Sets IsSignificantShareHolder
        /// </summary>
        [DataMember(Name = "isSignificantShareHolder", EmitDefaultValue = true)]
        public bool IsSignificantShareHolder { get; set; }

        /// <summary>
        /// Gets or Sets IsInsider
        /// </summary>
        [DataMember(Name = "isInsider", EmitDefaultValue = true)]
        public bool IsInsider { get; set; }

        /// <summary>
        /// Gets or Sets IsLimitOffsetInDollar
        /// </summary>
        [DataMember(Name = "isLimitOffsetInDollar", EmitDefaultValue = true)]
        public bool IsLimitOffsetInDollar { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public int UserId { get; set; }

        /// <summary>
        /// Gets or Sets PlacementCommission
        /// </summary>
        [DataMember(Name = "placementCommission", EmitDefaultValue = false)]
        public string PlacementCommission { get; set; }

        /// <summary>
        /// Gets or Sets Legs
        /// </summary>
        [DataMember(Name = "legs", EmitDefaultValue = false)]
        public List<StrategyOrderPlaceOrdersInnerLegsInner> Legs { get; set; }

        /// <summary>
        /// Gets or Sets StrategyType
        /// </summary>
        [DataMember(Name = "strategyType", EmitDefaultValue = false)]
        public string StrategyType { get; set; }

        /// <summary>
        /// Gets or Sets TriggerStopPrice
        /// </summary>
        [DataMember(Name = "triggerStopPrice", EmitDefaultValue = false)]
        public string TriggerStopPrice { get; set; }

        /// <summary>
        /// Gets or Sets OrderGroupId
        /// </summary>
        [DataMember(Name = "orderGroupId", EmitDefaultValue = false)]
        public int OrderGroupId { get; set; }

        /// <summary>
        /// Gets or Sets OrderClass
        /// </summary>
        [DataMember(Name = "orderClass", EmitDefaultValue = false)]
        public string OrderClass { get; set; }

        /// <summary>
        /// Gets or Sets IsCrossZero
        /// </summary>
        [DataMember(Name = "isCrossZero", EmitDefaultValue = true)]
        public bool IsCrossZero { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StrategyOrderPlaceOrdersInner {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  SymbolId: ").Append(SymbolId).Append("\n");
            sb.Append("  TotalQuantity: ").Append(TotalQuantity).Append("\n");
            sb.Append("  OpenQuantity: ").Append(OpenQuantity).Append("\n");
            sb.Append("  FilledQuantity: ").Append(FilledQuantity).Append("\n");
            sb.Append("  CanceledQuantity: ").Append(CanceledQuantity).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  LimitPrice: ").Append(LimitPrice).Append("\n");
            sb.Append("  StopPrice: ").Append(StopPrice).Append("\n");
            sb.Append("  IsAllOrNone: ").Append(IsAllOrNone).Append("\n");
            sb.Append("  IsAnonymous: ").Append(IsAnonymous).Append("\n");
            sb.Append("  IcebergQuantity: ").Append(IcebergQuantity).Append("\n");
            sb.Append("  MinQuantity: ").Append(MinQuantity).Append("\n");
            sb.Append("  AvgExecPrice: ").Append(AvgExecPrice).Append("\n");
            sb.Append("  LastExecPrice: ").Append(LastExecPrice).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  TimeInForce: ").Append(TimeInForce).Append("\n");
            sb.Append("  GtdDate: ").Append(GtdDate).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  RejectionReason: ").Append(RejectionReason).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  PrimaryRoute: ").Append(PrimaryRoute).Append("\n");
            sb.Append("  SecondaryRoute: ").Append(SecondaryRoute).Append("\n");
            sb.Append("  OrderRoute: ").Append(OrderRoute).Append("\n");
            sb.Append("  VenueHoldingOrder: ").Append(VenueHoldingOrder).Append("\n");
            sb.Append("  ComissionCharged: ").Append(ComissionCharged).Append("\n");
            sb.Append("  ExchangeOrderId: ").Append(ExchangeOrderId).Append("\n");
            sb.Append("  IsSignificantShareHolder: ").Append(IsSignificantShareHolder).Append("\n");
            sb.Append("  IsInsider: ").Append(IsInsider).Append("\n");
            sb.Append("  IsLimitOffsetInDollar: ").Append(IsLimitOffsetInDollar).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  PlacementCommission: ").Append(PlacementCommission).Append("\n");
            sb.Append("  Legs: ").Append(Legs).Append("\n");
            sb.Append("  StrategyType: ").Append(StrategyType).Append("\n");
            sb.Append("  TriggerStopPrice: ").Append(TriggerStopPrice).Append("\n");
            sb.Append("  OrderGroupId: ").Append(OrderGroupId).Append("\n");
            sb.Append("  OrderClass: ").Append(OrderClass).Append("\n");
            sb.Append("  IsCrossZero: ").Append(IsCrossZero).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StrategyOrderPlaceOrdersInner);
        }

        /// <summary>
        /// Returns true if StrategyOrderPlaceOrdersInner instances are equal
        /// </summary>
        /// <param name="input">Instance of StrategyOrderPlaceOrdersInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StrategyOrderPlaceOrdersInner input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && base.Equals(input) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && base.Equals(input) && 
                (
                    this.SymbolId == input.SymbolId ||
                    this.SymbolId.Equals(input.SymbolId)
                ) && base.Equals(input) && 
                (
                    this.TotalQuantity == input.TotalQuantity ||
                    this.TotalQuantity.Equals(input.TotalQuantity)
                ) && base.Equals(input) && 
                (
                    this.OpenQuantity == input.OpenQuantity ||
                    this.OpenQuantity.Equals(input.OpenQuantity)
                ) && base.Equals(input) && 
                (
                    this.FilledQuantity == input.FilledQuantity ||
                    this.FilledQuantity.Equals(input.FilledQuantity)
                ) && base.Equals(input) && 
                (
                    this.CanceledQuantity == input.CanceledQuantity ||
                    this.CanceledQuantity.Equals(input.CanceledQuantity)
                ) && base.Equals(input) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && base.Equals(input) && 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && base.Equals(input) && 
                (
                    this.LimitPrice == input.LimitPrice ||
                    (this.LimitPrice != null &&
                    this.LimitPrice.Equals(input.LimitPrice))
                ) && base.Equals(input) && 
                (
                    this.StopPrice == input.StopPrice ||
                    (this.StopPrice != null &&
                    this.StopPrice.Equals(input.StopPrice))
                ) && base.Equals(input) && 
                (
                    this.IsAllOrNone == input.IsAllOrNone ||
                    this.IsAllOrNone.Equals(input.IsAllOrNone)
                ) && base.Equals(input) && 
                (
                    this.IsAnonymous == input.IsAnonymous ||
                    this.IsAnonymous.Equals(input.IsAnonymous)
                ) && base.Equals(input) && 
                (
                    this.IcebergQuantity == input.IcebergQuantity ||
                    (this.IcebergQuantity != null &&
                    this.IcebergQuantity.Equals(input.IcebergQuantity))
                ) && base.Equals(input) && 
                (
                    this.MinQuantity == input.MinQuantity ||
                    (this.MinQuantity != null &&
                    this.MinQuantity.Equals(input.MinQuantity))
                ) && base.Equals(input) && 
                (
                    this.AvgExecPrice == input.AvgExecPrice ||
                    this.AvgExecPrice.Equals(input.AvgExecPrice)
                ) && base.Equals(input) && 
                (
                    this.LastExecPrice == input.LastExecPrice ||
                    (this.LastExecPrice != null &&
                    this.LastExecPrice.Equals(input.LastExecPrice))
                ) && base.Equals(input) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && base.Equals(input) && 
                (
                    this.TimeInForce == input.TimeInForce ||
                    (this.TimeInForce != null &&
                    this.TimeInForce.Equals(input.TimeInForce))
                ) && base.Equals(input) && 
                (
                    this.GtdDate == input.GtdDate ||
                    (this.GtdDate != null &&
                    this.GtdDate.Equals(input.GtdDate))
                ) && base.Equals(input) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && base.Equals(input) && 
                (
                    this.RejectionReason == input.RejectionReason ||
                    (this.RejectionReason != null &&
                    this.RejectionReason.Equals(input.RejectionReason))
                ) && base.Equals(input) && 
                (
                    this.ChainId == input.ChainId ||
                    this.ChainId.Equals(input.ChainId)
                ) && base.Equals(input) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && base.Equals(input) && 
                (
                    this.UpdateTime == input.UpdateTime ||
                    (this.UpdateTime != null &&
                    this.UpdateTime.Equals(input.UpdateTime))
                ) && base.Equals(input) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && base.Equals(input) && 
                (
                    this.PrimaryRoute == input.PrimaryRoute ||
                    (this.PrimaryRoute != null &&
                    this.PrimaryRoute.Equals(input.PrimaryRoute))
                ) && base.Equals(input) && 
                (
                    this.SecondaryRoute == input.SecondaryRoute ||
                    (this.SecondaryRoute != null &&
                    this.SecondaryRoute.Equals(input.SecondaryRoute))
                ) && base.Equals(input) && 
                (
                    this.OrderRoute == input.OrderRoute ||
                    (this.OrderRoute != null &&
                    this.OrderRoute.Equals(input.OrderRoute))
                ) && base.Equals(input) && 
                (
                    this.VenueHoldingOrder == input.VenueHoldingOrder ||
                    (this.VenueHoldingOrder != null &&
                    this.VenueHoldingOrder.Equals(input.VenueHoldingOrder))
                ) && base.Equals(input) && 
                (
                    this.ComissionCharged == input.ComissionCharged ||
                    this.ComissionCharged.Equals(input.ComissionCharged)
                ) && base.Equals(input) && 
                (
                    this.ExchangeOrderId == input.ExchangeOrderId ||
                    (this.ExchangeOrderId != null &&
                    this.ExchangeOrderId.Equals(input.ExchangeOrderId))
                ) && base.Equals(input) && 
                (
                    this.IsSignificantShareHolder == input.IsSignificantShareHolder ||
                    this.IsSignificantShareHolder.Equals(input.IsSignificantShareHolder)
                ) && base.Equals(input) && 
                (
                    this.IsInsider == input.IsInsider ||
                    this.IsInsider.Equals(input.IsInsider)
                ) && base.Equals(input) && 
                (
                    this.IsLimitOffsetInDollar == input.IsLimitOffsetInDollar ||
                    this.IsLimitOffsetInDollar.Equals(input.IsLimitOffsetInDollar)
                ) && base.Equals(input) && 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && base.Equals(input) && 
                (
                    this.PlacementCommission == input.PlacementCommission ||
                    (this.PlacementCommission != null &&
                    this.PlacementCommission.Equals(input.PlacementCommission))
                ) && base.Equals(input) && 
                (
                    this.Legs == input.Legs ||
                    this.Legs != null &&
                    input.Legs != null &&
                    this.Legs.SequenceEqual(input.Legs)
                ) && base.Equals(input) && 
                (
                    this.StrategyType == input.StrategyType ||
                    (this.StrategyType != null &&
                    this.StrategyType.Equals(input.StrategyType))
                ) && base.Equals(input) && 
                (
                    this.TriggerStopPrice == input.TriggerStopPrice ||
                    (this.TriggerStopPrice != null &&
                    this.TriggerStopPrice.Equals(input.TriggerStopPrice))
                ) && base.Equals(input) && 
                (
                    this.OrderGroupId == input.OrderGroupId ||
                    this.OrderGroupId.Equals(input.OrderGroupId)
                ) && base.Equals(input) && 
                (
                    this.OrderClass == input.OrderClass ||
                    (this.OrderClass != null &&
                    this.OrderClass.Equals(input.OrderClass))
                ) && base.Equals(input) && 
                (
                    this.IsCrossZero == input.IsCrossZero ||
                    this.IsCrossZero.Equals(input.IsCrossZero)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SymbolId.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalQuantity.GetHashCode();
                hashCode = (hashCode * 59) + this.OpenQuantity.GetHashCode();
                hashCode = (hashCode * 59) + this.FilledQuantity.GetHashCode();
                hashCode = (hashCode * 59) + this.CanceledQuantity.GetHashCode();
                if (this.Side != null)
                {
                    hashCode = (hashCode * 59) + this.Side.GetHashCode();
                }
                if (this.OrderType != null)
                {
                    hashCode = (hashCode * 59) + this.OrderType.GetHashCode();
                }
                if (this.LimitPrice != null)
                {
                    hashCode = (hashCode * 59) + this.LimitPrice.GetHashCode();
                }
                if (this.StopPrice != null)
                {
                    hashCode = (hashCode * 59) + this.StopPrice.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsAllOrNone.GetHashCode();
                hashCode = (hashCode * 59) + this.IsAnonymous.GetHashCode();
                if (this.IcebergQuantity != null)
                {
                    hashCode = (hashCode * 59) + this.IcebergQuantity.GetHashCode();
                }
                if (this.MinQuantity != null)
                {
                    hashCode = (hashCode * 59) + this.MinQuantity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AvgExecPrice.GetHashCode();
                if (this.LastExecPrice != null)
                {
                    hashCode = (hashCode * 59) + this.LastExecPrice.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.TimeInForce != null)
                {
                    hashCode = (hashCode * 59) + this.TimeInForce.GetHashCode();
                }
                if (this.GtdDate != null)
                {
                    hashCode = (hashCode * 59) + this.GtdDate.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.RejectionReason != null)
                {
                    hashCode = (hashCode * 59) + this.RejectionReason.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChainId.GetHashCode();
                if (this.CreationTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreationTime.GetHashCode();
                }
                if (this.UpdateTime != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateTime.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.PrimaryRoute != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryRoute.GetHashCode();
                }
                if (this.SecondaryRoute != null)
                {
                    hashCode = (hashCode * 59) + this.SecondaryRoute.GetHashCode();
                }
                if (this.OrderRoute != null)
                {
                    hashCode = (hashCode * 59) + this.OrderRoute.GetHashCode();
                }
                if (this.VenueHoldingOrder != null)
                {
                    hashCode = (hashCode * 59) + this.VenueHoldingOrder.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ComissionCharged.GetHashCode();
                if (this.ExchangeOrderId != null)
                {
                    hashCode = (hashCode * 59) + this.ExchangeOrderId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsSignificantShareHolder.GetHashCode();
                hashCode = (hashCode * 59) + this.IsInsider.GetHashCode();
                hashCode = (hashCode * 59) + this.IsLimitOffsetInDollar.GetHashCode();
                hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                if (this.PlacementCommission != null)
                {
                    hashCode = (hashCode * 59) + this.PlacementCommission.GetHashCode();
                }
                if (this.Legs != null)
                {
                    hashCode = (hashCode * 59) + this.Legs.GetHashCode();
                }
                if (this.StrategyType != null)
                {
                    hashCode = (hashCode * 59) + this.StrategyType.GetHashCode();
                }
                if (this.TriggerStopPrice != null)
                {
                    hashCode = (hashCode * 59) + this.TriggerStopPrice.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderGroupId.GetHashCode();
                if (this.OrderClass != null)
                {
                    hashCode = (hashCode * 59) + this.OrderClass.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsCrossZero.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
