/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SnapTrade.Net.Client;
using SnapTrade.Net.Api;
using SnapTrade.Net.Model;

namespace SnapTrade.Net.Test.Api
{
    /// <summary>
    ///  Class for testing OptionsApi
    /// </summary>
    public class OptionsApiTests : IDisposable
    {
        private Snaptrade client;

        public OptionsApiTests()
        {
            client = new Snaptrade();
            client.SetBasePath("http://127.0.0.1:4032");
            // Configure custom BasePath if desired
            // client.SetBasePath("https://api.snaptrade.com/api/v1");
            client.SetClientId("test");
            client.SetConsumerKey("test");

        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test GetOptionStrategy
        /// </summary>
        [Fact]
        public void GetOptionStrategyTest()
        {
            var userId = "userId_example";
            var userSecret = "userSecret_example";
            var accountId = "accountId_example"; // The ID of the account to create the option strategy object in.
            var underlyingSymbolId = "2bcd7cc3-e922-4976-bce1-9858296801c3";
            var legs = new List<OptionLeg>();
            var strategyType = OptionsGetOptionStrategyRequest.StrategyTypeEnum.CUSTOM;
            
            var optionsGetOptionStrategyRequest = new OptionsGetOptionStrategyRequest(
                underlyingSymbolId,
                legs,
                strategyType
            );
            
            try
            {
                // Creates an option strategy object that will be used to place an option strategy order
                StrategyQuotes result = client.Options.GetOptionStrategy(userId, userSecret, accountId, optionsGetOptionStrategyRequest);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling OptionsApi.GetOptionStrategy: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test GetOptionsChain
        /// </summary>
        [Fact]
        public void GetOptionsChainTest()
        {
            var userId = "userId_example";
            var userSecret = "userSecret_example";
            var accountId = "accountId_example"; // The ID of the account to get the options chain from.
            var symbol = "symbol_example"; // Universal symbol ID if symbol
            
            try
            {
                // Get the options chain
                List<OptionChainInner> result = client.Options.GetOptionsChain(userId, userSecret, accountId, symbol);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling OptionsApi.GetOptionsChain: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test GetOptionsStrategyQuote
        /// </summary>
        [Fact]
        public void GetOptionsStrategyQuoteTest()
        {
            var userId = "userId_example";
            var userSecret = "userSecret_example";
            var accountId = "accountId_example"; // The ID of the account the strategy will be placed in.
            var optionStrategyId = "optionStrategyId_example"; // Option strategy id obtained from response when creating option strategy object
            
            try
            {
                // Get latest market data of option strategy
                StrategyQuotes result = client.Options.GetOptionsStrategyQuote(userId, userSecret, accountId, optionStrategyId);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling OptionsApi.GetOptionsStrategyQuote: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test ListOptionHoldings
        /// </summary>
        [Fact]
        public void ListOptionHoldingsTest()
        {
            var userId = "userId_example";
            var userSecret = "userSecret_example";
            var accountId = "accountId_example"; // The ID of the account to fetch options holdings for.
            
            try
            {
                // Get the options holdings in the account
                List<OptionsPosition> result = client.Options.ListOptionHoldings(userId, userSecret, accountId);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling OptionsApi.ListOptionHoldings: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test PlaceOptionStrategy
        /// </summary>
        [Fact]
        public void PlaceOptionStrategyTest()
        {
            var userId = "userId_example";
            var userSecret = "userSecret_example";
            var accountId = "accountId_example"; // The ID of the account to execute the strategy in.
            var optionStrategyId = "optionStrategyId_example"; // Option strategy id obtained from response when creating option strategy object
            var orderType = OrderType.Limit;
            var timeInForce = TimeInForce.Day;
            var price = 31.33; // Trade Price if limit or stop limit order
            
            var optionsPlaceOptionStrategyRequest = new OptionsPlaceOptionStrategyRequest(
                orderType,
                timeInForce,
                price
            );
            
            try
            {
                // Place an option strategy order on the brokerage
                StrategyOrderRecord result = client.Options.PlaceOptionStrategy(userId, userSecret, accountId, optionStrategyId, optionsPlaceOptionStrategyRequest);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling OptionsApi.PlaceOptionStrategy: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }
    }
}
