/* tslint:disable */
/* eslint-disable */
/*
API

A simple API.

The version of the OpenAPI document: 1.0.0
Contact: support@example.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TestRequestBody } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Test that query params are not included in body
         * @summary Test that query params are not included in body
         * @param {string} queryParam1 
         * @param {string} queryParam2 
         * @param {TestRequestBody} [testRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        test: async (queryParam1: string, queryParam2: string, testRequestBody?: TestRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryParam1' is not null or undefined
            assertParamExists('test', 'queryParam1', queryParam1)
            // verify required parameter 'queryParam2' is not null or undefined
            assertParamExists('test', 'queryParam2', queryParam2)
            const localVarPath = `/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-KEY", keyParamName: "apiKey", configuration })
            if (queryParam1 !== undefined) {
                localVarQueryParameter['queryParam1'] = queryParam1;
            }

            if (queryParam2 !== undefined) {
                localVarQueryParameter['queryParam1'] = queryParam2;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: testRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/test',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(testRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestApiAxiosParamCreator(configuration)
    return {
        /**
         * Test that query params are not included in body
         * @summary Test that query params are not included in body
         * @param {TestApiTestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async test(requestParameters: TestApiTestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const testRequestBody: TestRequestBody = {
                bodyParam1: requestParameters.bodyParam1,
                bodyParam2: requestParameters.bodyParam2
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.test(requestParameters.queryParam1, requestParameters.queryParam2, testRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestApiFp(configuration)
    return {
        /**
         * Test that query params are not included in body
         * @summary Test that query params are not included in body
         * @param {TestApiTestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        test(requestParameters: TestApiTestRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.test(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for test operation in TestApi.
 * @export
 * @interface TestApiTestRequest
 */
export type TestApiTestRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TestApiTest
    */
    readonly queryParam1: string
    
    /**
    * 
    * @type {string}
    * @memberof TestApiTest
    */
    readonly queryParam2: string
    
} & TestRequestBody

/**
 * TestApiGenerated - object-oriented interface
 * @export
 * @class TestApiGenerated
 * @extends {BaseAPI}
 */
export class TestApiGenerated extends BaseAPI {
    /**
     * Test that query params are not included in body
     * @summary Test that query params are not included in body
     * @param {TestApiTestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApiGenerated
     */
    public test(requestParameters: TestApiTestRequest, options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).test(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
