/* tslint:disable */
/* eslint-disable */
/*
partner-api

Bellhop's Partner API

The version of the OpenAPI document: 5.0.0
Contact: engineering@bellhop.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FlexibleQuoteResponse } from '../models';
// @ts-ignore
import { FlexibleServiceRequest } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { QuoteServiceGroupsCreateRequest } from '../models';
// @ts-ignore
import { ReplaceServiceGroupRequest } from '../models';
// @ts-ignore
import { ServiceGroupResponse } from '../models';
// @ts-ignore
import { ServiceType } from '../models';
// @ts-ignore
import { ServiceWorkersPropertyInner } from '../models';
// @ts-ignore
import { UpdateServiceGroupRequestV2 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * QuoteServiceGroupsApi - axios parameter creator
 * @export
 */
export const QuoteServiceGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Overwrite the locations on a service group  The locations included in the request are overwritten as the locations on the service group maintaining the sequence in the request. This action triggers a re-estimation of the service group using the new locations.
         * @summary Change Locations On Service Group
         * @param {string} serviceGroupId UUID of the service group
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeLocations: async (serviceGroupId: string, requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceGroupId' is not null or undefined
            assertParamExists('changeLocations', 'serviceGroupId', serviceGroupId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('changeLocations', 'requestBody', requestBody)
            const localVarPath = `/quotes/service_groups/{service_group_id}/locations`
                .replace(`{${"service_group_id"}}`, encodeURIComponent(String(serviceGroupId !== undefined ? serviceGroupId : `-service_group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Auth0HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: requestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new service group  A service group is a collection of services that are performed at the same time and location. The created service group will be created with the provided services, locations, and start date time. The workers, duration, and end date time will be estimated based on the locations and inventory attached to the quote.
         * @summary Create Service Group
         * @param {string} quoteId UUID of the quote
         * @param {QuoteServiceGroupsCreateRequest} quoteServiceGroupsCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (quoteId: string, quoteServiceGroupsCreateRequest: QuoteServiceGroupsCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteId' is not null or undefined
            assertParamExists('create', 'quoteId', quoteId)
            // verify required parameter 'quoteServiceGroupsCreateRequest' is not null or undefined
            assertParamExists('create', 'quoteServiceGroupsCreateRequest', quoteServiceGroupsCreateRequest)
            const localVarPath = `/quotes/{quote_id}/service-groups`
                .replace(`{${"quote_id"}}`, encodeURIComponent(String(quoteId !== undefined ? quoteId : `-quote_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Auth0HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: quoteServiceGroupsCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(quoteServiceGroupsCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates an array of flexible service groups from a service group  Generate an array of flexible service groups. The services and locations will be copied from the source service group. One flexible service group will be created for each day and hour combination in the input.
         * @summary Create Flexible Service Groups
         * @param {string} quoteId UUID of the source quote
         * @param {string} serviceGroupId UUID of the Service Group to use as a template for the flexible service groups
         * @param {FlexibleServiceRequest} flexibleServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFlexible: async (quoteId: string, serviceGroupId: string, flexibleServiceRequest: FlexibleServiceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteId' is not null or undefined
            assertParamExists('createFlexible', 'quoteId', quoteId)
            // verify required parameter 'serviceGroupId' is not null or undefined
            assertParamExists('createFlexible', 'serviceGroupId', serviceGroupId)
            // verify required parameter 'flexibleServiceRequest' is not null or undefined
            assertParamExists('createFlexible', 'flexibleServiceRequest', flexibleServiceRequest)
            const localVarPath = `/quotes/{quote_id}/service_groups/{service_group_id}/flexible`
                .replace(`{${"quote_id"}}`, encodeURIComponent(String(quoteId !== undefined ? quoteId : `-quote_id-`)))
                .replace(`{${"service_group_id"}}`, encodeURIComponent(String(serviceGroupId !== undefined ? serviceGroupId : `-service_group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Auth0HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: flexibleServiceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(flexibleServiceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a service group by quote ID and service group ID
         * @summary Delete Service Group
         * @param {string} quoteId UUID of the quote
         * @param {string} serviceGroupId UUID of the service group to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: async (quoteId: string, serviceGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteId' is not null or undefined
            assertParamExists('delete', 'quoteId', quoteId)
            // verify required parameter 'serviceGroupId' is not null or undefined
            assertParamExists('delete', 'serviceGroupId', serviceGroupId)
            const localVarPath = `/quotes/{quote_id}/service-group/{service_group_id}`
                .replace(`{${"quote_id"}}`, encodeURIComponent(String(quoteId !== undefined ? quoteId : `-quote_id-`)))
                .replace(`{${"service_group_id"}}`, encodeURIComponent(String(serviceGroupId !== undefined ? serviceGroupId : `-service_group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Auth0HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a service group by quote ID and service group ID
         * @summary Get Service Group
         * @param {string} quoteId UUID of the quote
         * @param {string} serviceGroupId UUID of the service group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (quoteId: string, serviceGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteId' is not null or undefined
            assertParamExists('get', 'quoteId', quoteId)
            // verify required parameter 'serviceGroupId' is not null or undefined
            assertParamExists('get', 'serviceGroupId', serviceGroupId)
            const localVarPath = `/quotes/{quote_id}/service-group/{service_group_id}`
                .replace(`{${"quote_id"}}`, encodeURIComponent(String(quoteId !== undefined ? quoteId : `-quote_id-`)))
                .replace(`{${"service_group_id"}}`, encodeURIComponent(String(serviceGroupId !== undefined ? serviceGroupId : `-service_group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Auth0HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces a service group with a flexible service group  Replaces the existing service group with the selected flexible service group.
         * @summary Replace Service Group
         * @param {string} quoteId UUID of the quote
         * @param {string} serviceGroupId UUID of the service group
         * @param {ReplaceServiceGroupRequest} replaceServiceGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replace: async (quoteId: string, serviceGroupId: string, replaceServiceGroupRequest: ReplaceServiceGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteId' is not null or undefined
            assertParamExists('replace', 'quoteId', quoteId)
            // verify required parameter 'serviceGroupId' is not null or undefined
            assertParamExists('replace', 'serviceGroupId', serviceGroupId)
            // verify required parameter 'replaceServiceGroupRequest' is not null or undefined
            assertParamExists('replace', 'replaceServiceGroupRequest', replaceServiceGroupRequest)
            const localVarPath = `/quotes/{quote_id}/service-groups/{service_group_id}`
                .replace(`{${"quote_id"}}`, encodeURIComponent(String(quoteId !== undefined ? quoteId : `-quote_id-`)))
                .replace(`{${"service_group_id"}}`, encodeURIComponent(String(serviceGroupId !== undefined ? serviceGroupId : `-service_group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Auth0HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: replaceServiceGroupRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(replaceServiceGroupRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the service configuration on a service group  Update services, workers and duration on a service group. the service_workers object is a mapping of service code and number of workers.  Only the included service codes will be retained on the service group.  Any excluded services will be removed.
         * @summary Update Service Group Services
         * @param {string} quoteId UUID of the quote
         * @param {string} serviceGroupId UUID of the service group
         * @param {UpdateServiceGroupRequestV2} updateServiceGroupRequestV2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (quoteId: string, serviceGroupId: string, updateServiceGroupRequestV2: UpdateServiceGroupRequestV2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteId' is not null or undefined
            assertParamExists('update', 'quoteId', quoteId)
            // verify required parameter 'serviceGroupId' is not null or undefined
            assertParamExists('update', 'serviceGroupId', serviceGroupId)
            // verify required parameter 'updateServiceGroupRequestV2' is not null or undefined
            assertParamExists('update', 'updateServiceGroupRequestV2', updateServiceGroupRequestV2)
            const localVarPath = `/quotes/{quote_id}/service-groups/{service_group_id}/services`
                .replace(`{${"quote_id"}}`, encodeURIComponent(String(quoteId !== undefined ? quoteId : `-quote_id-`)))
                .replace(`{${"service_group_id"}}`, encodeURIComponent(String(serviceGroupId !== undefined ? serviceGroupId : `-service_group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Auth0HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateServiceGroupRequestV2,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateServiceGroupRequestV2, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuoteServiceGroupsApi - functional programming interface
 * @export
 */
export const QuoteServiceGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuoteServiceGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Overwrite the locations on a service group  The locations included in the request are overwritten as the locations on the service group maintaining the sequence in the request. This action triggers a re-estimation of the service group using the new locations.
         * @summary Change Locations On Service Group
         * @param {QuoteServiceGroupsApiChangeLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeLocations(requestParameters: QuoteServiceGroupsApiChangeLocationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeLocations(requestParameters.serviceGroupId, requestParameters.requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new service group  A service group is a collection of services that are performed at the same time and location. The created service group will be created with the provided services, locations, and start date time. The workers, duration, and end date time will be estimated based on the locations and inventory attached to the quote.
         * @summary Create Service Group
         * @param {QuoteServiceGroupsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: QuoteServiceGroupsApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(requestParameters.quoteId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates an array of flexible service groups from a service group  Generate an array of flexible service groups. The services and locations will be copied from the source service group. One flexible service group will be created for each day and hour combination in the input.
         * @summary Create Flexible Service Groups
         * @param {QuoteServiceGroupsApiCreateFlexibleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFlexible(requestParameters: QuoteServiceGroupsApiCreateFlexibleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FlexibleQuoteResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFlexible(requestParameters.quoteId, requestParameters.serviceGroupId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a service group by quote ID and service group ID
         * @summary Delete Service Group
         * @param {QuoteServiceGroupsApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete(requestParameters: QuoteServiceGroupsApiDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete(requestParameters.quoteId, requestParameters.serviceGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a service group by quote ID and service group ID
         * @summary Get Service Group
         * @param {QuoteServiceGroupsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: QuoteServiceGroupsApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.quoteId, requestParameters.serviceGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces a service group with a flexible service group  Replaces the existing service group with the selected flexible service group.
         * @summary Replace Service Group
         * @param {QuoteServiceGroupsApiReplaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replace(requestParameters: QuoteServiceGroupsApiReplaceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replace(requestParameters.quoteId, requestParameters.serviceGroupId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the service configuration on a service group  Update services, workers and duration on a service group. the service_workers object is a mapping of service code and number of workers.  Only the included service codes will be retained on the service group.  Any excluded services will be removed.
         * @summary Update Service Group Services
         * @param {QuoteServiceGroupsApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(requestParameters: QuoteServiceGroupsApiUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(requestParameters.quoteId, requestParameters.serviceGroupId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QuoteServiceGroupsApi - factory interface
 * @export
 */
export const QuoteServiceGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuoteServiceGroupsApiFp(configuration)
    return {
        /**
         * Overwrite the locations on a service group  The locations included in the request are overwritten as the locations on the service group maintaining the sequence in the request. This action triggers a re-estimation of the service group using the new locations.
         * @summary Change Locations On Service Group
         * @param {QuoteServiceGroupsApiChangeLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeLocations(requestParameters: QuoteServiceGroupsApiChangeLocationsRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceGroupResponse> {
            return localVarFp.changeLocations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new service group  A service group is a collection of services that are performed at the same time and location. The created service group will be created with the provided services, locations, and start date time. The workers, duration, and end date time will be estimated based on the locations and inventory attached to the quote.
         * @summary Create Service Group
         * @param {QuoteServiceGroupsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: QuoteServiceGroupsApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceGroupResponse> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates an array of flexible service groups from a service group  Generate an array of flexible service groups. The services and locations will be copied from the source service group. One flexible service group will be created for each day and hour combination in the input.
         * @summary Create Flexible Service Groups
         * @param {QuoteServiceGroupsApiCreateFlexibleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFlexible(requestParameters: QuoteServiceGroupsApiCreateFlexibleRequest, options?: AxiosRequestConfig): AxiosPromise<Array<FlexibleQuoteResponse>> {
            return localVarFp.createFlexible(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a service group by quote ID and service group ID
         * @summary Delete Service Group
         * @param {QuoteServiceGroupsApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters: QuoteServiceGroupsApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.delete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a service group by quote ID and service group ID
         * @summary Get Service Group
         * @param {QuoteServiceGroupsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: QuoteServiceGroupsApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceGroupResponse> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces a service group with a flexible service group  Replaces the existing service group with the selected flexible service group.
         * @summary Replace Service Group
         * @param {QuoteServiceGroupsApiReplaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replace(requestParameters: QuoteServiceGroupsApiReplaceRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceGroupResponse> {
            return localVarFp.replace(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the service configuration on a service group  Update services, workers and duration on a service group. the service_workers object is a mapping of service code and number of workers.  Only the included service codes will be retained on the service group.  Any excluded services will be removed.
         * @summary Update Service Group Services
         * @param {QuoteServiceGroupsApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: QuoteServiceGroupsApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceGroupResponse> {
            return localVarFp.update(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for changeLocations operation in QuoteServiceGroupsApi.
 * @export
 * @interface QuoteServiceGroupsApiChangeLocationsRequest
 */
export type QuoteServiceGroupsApiChangeLocationsRequest = {
    /**
    * UUID of the service group
    * @type {string}
    * @memberof QuoteServiceGroupsApiChangeLocations
    */
    readonly serviceGroupId: string
    /**
    * 
    * @type {Array<string>}
    * @memberof QuoteServiceGroupsApiChangeLocations
    */
    readonly requestBody: Array<string>
}

/**
 * Request parameters for create operation in QuoteServiceGroupsApi.
 * @export
 * @interface QuoteServiceGroupsApiCreateRequest
 */
export type QuoteServiceGroupsApiCreateRequest = {
    
    /**
    * UUID of the quote
    * @type {string}
    * @memberof QuoteServiceGroupsApiCreate
    */
    readonly quoteId: string
    
} & QuoteServiceGroupsCreateRequest

/**
 * Request parameters for createFlexible operation in QuoteServiceGroupsApi.
 * @export
 * @interface QuoteServiceGroupsApiCreateFlexibleRequest
 */
export type QuoteServiceGroupsApiCreateFlexibleRequest = {
    
    /**
    * UUID of the source quote
    * @type {string}
    * @memberof QuoteServiceGroupsApiCreateFlexible
    */
    readonly quoteId: string
    
    /**
    * UUID of the Service Group to use as a template for the flexible service groups
    * @type {string}
    * @memberof QuoteServiceGroupsApiCreateFlexible
    */
    readonly serviceGroupId: string
    
} & FlexibleServiceRequest

/**
 * Request parameters for delete operation in QuoteServiceGroupsApi.
 * @export
 * @interface QuoteServiceGroupsApiDeleteRequest
 */
export type QuoteServiceGroupsApiDeleteRequest = {
    
    /**
    * UUID of the quote
    * @type {string}
    * @memberof QuoteServiceGroupsApiDelete
    */
    readonly quoteId: string
    
    /**
    * UUID of the service group to be deleted
    * @type {string}
    * @memberof QuoteServiceGroupsApiDelete
    */
    readonly serviceGroupId: string
    
}

/**
 * Request parameters for get operation in QuoteServiceGroupsApi.
 * @export
 * @interface QuoteServiceGroupsApiGetRequest
 */
export type QuoteServiceGroupsApiGetRequest = {
    
    /**
    * UUID of the quote
    * @type {string}
    * @memberof QuoteServiceGroupsApiGet
    */
    readonly quoteId: string
    
    /**
    * UUID of the service group
    * @type {string}
    * @memberof QuoteServiceGroupsApiGet
    */
    readonly serviceGroupId: string
    
}

/**
 * Request parameters for replace operation in QuoteServiceGroupsApi.
 * @export
 * @interface QuoteServiceGroupsApiReplaceRequest
 */
export type QuoteServiceGroupsApiReplaceRequest = {
    
    /**
    * UUID of the quote
    * @type {string}
    * @memberof QuoteServiceGroupsApiReplace
    */
    readonly quoteId: string
    
    /**
    * UUID of the service group
    * @type {string}
    * @memberof QuoteServiceGroupsApiReplace
    */
    readonly serviceGroupId: string
    
} & ReplaceServiceGroupRequest

/**
 * Request parameters for update operation in QuoteServiceGroupsApi.
 * @export
 * @interface QuoteServiceGroupsApiUpdateRequest
 */
export type QuoteServiceGroupsApiUpdateRequest = {
    
    /**
    * UUID of the quote
    * @type {string}
    * @memberof QuoteServiceGroupsApiUpdate
    */
    readonly quoteId: string
    
    /**
    * UUID of the service group
    * @type {string}
    * @memberof QuoteServiceGroupsApiUpdate
    */
    readonly serviceGroupId: string
    
} & UpdateServiceGroupRequestV2

/**
 * QuoteServiceGroupsApiGenerated - object-oriented interface
 * @export
 * @class QuoteServiceGroupsApiGenerated
 * @extends {BaseAPI}
 */
export class QuoteServiceGroupsApiGenerated extends BaseAPI {
    /**
     * Overwrite the locations on a service group  The locations included in the request are overwritten as the locations on the service group maintaining the sequence in the request. This action triggers a re-estimation of the service group using the new locations.
     * @summary Change Locations On Service Group
     * @param {QuoteServiceGroupsApiChangeLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteServiceGroupsApiGenerated
     */
    public changeLocations(requestParameters: QuoteServiceGroupsApiChangeLocationsRequest, options?: AxiosRequestConfig) {
        return QuoteServiceGroupsApiFp(this.configuration).changeLocations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new service group  A service group is a collection of services that are performed at the same time and location. The created service group will be created with the provided services, locations, and start date time. The workers, duration, and end date time will be estimated based on the locations and inventory attached to the quote.
     * @summary Create Service Group
     * @param {QuoteServiceGroupsApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteServiceGroupsApiGenerated
     */
    public create(requestParameters: QuoteServiceGroupsApiCreateRequest, options?: AxiosRequestConfig) {
        return QuoteServiceGroupsApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates an array of flexible service groups from a service group  Generate an array of flexible service groups. The services and locations will be copied from the source service group. One flexible service group will be created for each day and hour combination in the input.
     * @summary Create Flexible Service Groups
     * @param {QuoteServiceGroupsApiCreateFlexibleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteServiceGroupsApiGenerated
     */
    public createFlexible(requestParameters: QuoteServiceGroupsApiCreateFlexibleRequest, options?: AxiosRequestConfig) {
        return QuoteServiceGroupsApiFp(this.configuration).createFlexible(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a service group by quote ID and service group ID
     * @summary Delete Service Group
     * @param {QuoteServiceGroupsApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteServiceGroupsApiGenerated
     */
    public delete(requestParameters: QuoteServiceGroupsApiDeleteRequest, options?: AxiosRequestConfig) {
        return QuoteServiceGroupsApiFp(this.configuration).delete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a service group by quote ID and service group ID
     * @summary Get Service Group
     * @param {QuoteServiceGroupsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteServiceGroupsApiGenerated
     */
    public get(requestParameters: QuoteServiceGroupsApiGetRequest, options?: AxiosRequestConfig) {
        return QuoteServiceGroupsApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces a service group with a flexible service group  Replaces the existing service group with the selected flexible service group.
     * @summary Replace Service Group
     * @param {QuoteServiceGroupsApiReplaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteServiceGroupsApiGenerated
     */
    public replace(requestParameters: QuoteServiceGroupsApiReplaceRequest, options?: AxiosRequestConfig) {
        return QuoteServiceGroupsApiFp(this.configuration).replace(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the service configuration on a service group  Update services, workers and duration on a service group. the service_workers object is a mapping of service code and number of workers.  Only the included service codes will be retained on the service group.  Any excluded services will be removed.
     * @summary Update Service Group Services
     * @param {QuoteServiceGroupsApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteServiceGroupsApiGenerated
     */
    public update(requestParameters: QuoteServiceGroupsApiUpdateRequest, options?: AxiosRequestConfig) {
        return QuoteServiceGroupsApiFp(this.configuration).update(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
