/* tslint:disable */
/* eslint-disable */
/*
NewsCatcher-V3 Production API

<img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>

The version of the OpenAPI document: Beta-3.0.0
Contact: maksym@newscatcherapi.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthorSearchRequest } from '../models';
// @ts-ignore
import { AuthorsGetResponse } from '../models';
// @ts-ignore
import { AuthorsPostResponse } from '../models';
// @ts-ignore
import { From } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { To } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AuthorsApi - axios parameter creator
 * @export
 */
export const AuthorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to search for articles by author. You need to specify the author name. You can also filter by language, country, source, and more.
         * @summary [Get] Search By Author Request
         * @param {string} authorName 
         * @param {string} [sources] 
         * @param {string} [predefinedSources] 
         * @param {string} [notSources] 
         * @param {string} [lang] 
         * @param {string} [notLang] 
         * @param {string} [countries] 
         * @param {string} [notCountries] 
         * @param {From} [from] 
         * @param {To} [to] 
         * @param {string} [publishedDatePrecision] 
         * @param {boolean} [byParseDate] 
         * @param {string} [sortBy] 
         * @param {string} [rankedOnly] 
         * @param {number} [fromRank] 
         * @param {number} [toRank] 
         * @param {boolean} [isHeadline] 
         * @param {boolean} [isPaidContent] 
         * @param {string} [parentUrl] 
         * @param {string} [allLinks] 
         * @param {string} [allDomainLinks] 
         * @param {number} [wordCountMin] 
         * @param {number} [wordCountMax] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeNlpData] 
         * @param {boolean} [hasNlp] 
         * @param {string} [theme] 
         * @param {string} [nerName] 
         * @param {number} [titleSentimentMin] 
         * @param {number} [titleSentimentMax] 
         * @param {number} [contentSentimentMin] 
         * @param {number} [contentSentimentMax] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (authorName: string, sources?: string, predefinedSources?: string, notSources?: string, lang?: string, notLang?: string, countries?: string, notCountries?: string, from?: From, to?: To, publishedDatePrecision?: string, byParseDate?: boolean, sortBy?: string, rankedOnly?: string, fromRank?: number, toRank?: number, isHeadline?: boolean, isPaidContent?: boolean, parentUrl?: string, allLinks?: string, allDomainLinks?: string, wordCountMin?: number, wordCountMax?: number, page?: number, pageSize?: number, includeNlpData?: boolean, hasNlp?: boolean, theme?: string, nerName?: string, titleSentimentMin?: number, titleSentimentMax?: number, contentSentimentMin?: number, contentSentimentMax?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorName' is not null or undefined
            assertParamExists('get', 'authorName', authorName)
            const localVarPath = `/api/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "x-api-token", configuration })
            if (authorName !== undefined) {
                localVarQueryParameter['author_name'] = authorName;
            }

            if (sources !== undefined) {
                localVarQueryParameter['sources'] = sources;
            }

            if (predefinedSources !== undefined) {
                localVarQueryParameter['predefined_sources'] = predefinedSources;
            }

            if (notSources !== undefined) {
                localVarQueryParameter['not_sources'] = notSources;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            if (notLang !== undefined) {
                localVarQueryParameter['not_lang'] = notLang;
            }

            if (countries !== undefined) {
                localVarQueryParameter['countries'] = countries;
            }

            if (notCountries !== undefined) {
                localVarQueryParameter['not_countries'] = notCountries;
            }

            if (from !== undefined) {
                localVarQueryParameter['from_'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to_'] = to;
            }

            if (publishedDatePrecision !== undefined) {
                localVarQueryParameter['published_date_precision'] = publishedDatePrecision;
            }

            if (byParseDate !== undefined) {
                localVarQueryParameter['by_parse_date'] = byParseDate;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (rankedOnly !== undefined) {
                localVarQueryParameter['ranked_only'] = rankedOnly;
            }

            if (fromRank !== undefined) {
                localVarQueryParameter['from_rank'] = fromRank;
            }

            if (toRank !== undefined) {
                localVarQueryParameter['to_rank'] = toRank;
            }

            if (isHeadline !== undefined) {
                localVarQueryParameter['is_headline'] = isHeadline;
            }

            if (isPaidContent !== undefined) {
                localVarQueryParameter['is_paid_content'] = isPaidContent;
            }

            if (parentUrl !== undefined) {
                localVarQueryParameter['parent_url'] = parentUrl;
            }

            if (allLinks !== undefined) {
                localVarQueryParameter['all_links'] = allLinks;
            }

            if (allDomainLinks !== undefined) {
                localVarQueryParameter['all_domain_links'] = allDomainLinks;
            }

            if (wordCountMin !== undefined) {
                localVarQueryParameter['word_count_min'] = wordCountMin;
            }

            if (wordCountMax !== undefined) {
                localVarQueryParameter['word_count_max'] = wordCountMax;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (includeNlpData !== undefined) {
                localVarQueryParameter['include_nlp_data'] = includeNlpData;
            }

            if (hasNlp !== undefined) {
                localVarQueryParameter['has_nlp'] = hasNlp;
            }

            if (theme !== undefined) {
                localVarQueryParameter['theme'] = theme;
            }

            if (nerName !== undefined) {
                localVarQueryParameter['ner_name'] = nerName;
            }

            if (titleSentimentMin !== undefined) {
                localVarQueryParameter['title_sentiment_min'] = titleSentimentMin;
            }

            if (titleSentimentMax !== undefined) {
                localVarQueryParameter['title_sentiment_max'] = titleSentimentMax;
            }

            if (contentSentimentMin !== undefined) {
                localVarQueryParameter['content_sentiment_min'] = contentSentimentMin;
            }

            if (contentSentimentMax !== undefined) {
                localVarQueryParameter['content_sentiment_max'] = contentSentimentMax;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to search for articles by author. You need to specify the author name. You can also filter by language, country, source, and more.
         * @summary [Post] Search By Author Request
         * @param {AuthorSearchRequest} authorSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post: async (authorSearchRequest: AuthorSearchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorSearchRequest' is not null or undefined
            assertParamExists('post', 'authorSearchRequest', authorSearchRequest)
            const localVarPath = `/api/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "x-api-token", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: authorSearchRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(authorSearchRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorsApi - functional programming interface
 * @export
 */
export const AuthorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to search for articles by author. You need to specify the author name. You can also filter by language, country, source, and more.
         * @summary [Get] Search By Author Request
         * @param {AuthorsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: AuthorsApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.authorName, requestParameters.sources, requestParameters.predefinedSources, requestParameters.notSources, requestParameters.lang, requestParameters.notLang, requestParameters.countries, requestParameters.notCountries, requestParameters.from, requestParameters.to, requestParameters.publishedDatePrecision, requestParameters.byParseDate, requestParameters.sortBy, requestParameters.rankedOnly, requestParameters.fromRank, requestParameters.toRank, requestParameters.isHeadline, requestParameters.isPaidContent, requestParameters.parentUrl, requestParameters.allLinks, requestParameters.allDomainLinks, requestParameters.wordCountMin, requestParameters.wordCountMax, requestParameters.page, requestParameters.pageSize, requestParameters.includeNlpData, requestParameters.hasNlp, requestParameters.theme, requestParameters.nerName, requestParameters.titleSentimentMin, requestParameters.titleSentimentMax, requestParameters.contentSentimentMin, requestParameters.contentSentimentMax, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to search for articles by author. You need to specify the author name. You can also filter by language, country, source, and more.
         * @summary [Post] Search By Author Request
         * @param {AuthorsApiPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async post(requestParameters: AuthorsApiPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorsPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.post(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthorsApi - factory interface
 * @export
 */
export const AuthorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorsApiFp(configuration)
    return {
        /**
         * This endpoint allows you to search for articles by author. You need to specify the author name. You can also filter by language, country, source, and more.
         * @summary [Get] Search By Author Request
         * @param {AuthorsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: AuthorsApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<AuthorsGetResponse> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to search for articles by author. You need to specify the author name. You can also filter by language, country, source, and more.
         * @summary [Post] Search By Author Request
         * @param {AuthorsApiPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post(requestParameters: AuthorsApiPostRequest, options?: AxiosRequestConfig): AxiosPromise<AuthorsPostResponse> {
            return localVarFp.post(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get operation in AuthorsApi.
 * @export
 * @interface AuthorsApiGetRequest
 */
export type AuthorsApiGetRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AuthorsApiGet
    */
    readonly authorName: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthorsApiGet
    */
    readonly sources?: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthorsApiGet
    */
    readonly predefinedSources?: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthorsApiGet
    */
    readonly notSources?: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthorsApiGet
    */
    readonly lang?: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthorsApiGet
    */
    readonly notLang?: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthorsApiGet
    */
    readonly countries?: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthorsApiGet
    */
    readonly notCountries?: string
    
    /**
    * 
    * @type {From}
    * @memberof AuthorsApiGet
    */
    readonly from?: From
    
    /**
    * 
    * @type {To}
    * @memberof AuthorsApiGet
    */
    readonly to?: To
    
    /**
    * 
    * @type {string}
    * @memberof AuthorsApiGet
    */
    readonly publishedDatePrecision?: string
    
    /**
    * 
    * @type {boolean}
    * @memberof AuthorsApiGet
    */
    readonly byParseDate?: boolean
    
    /**
    * 
    * @type {string}
    * @memberof AuthorsApiGet
    */
    readonly sortBy?: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthorsApiGet
    */
    readonly rankedOnly?: string
    
    /**
    * 
    * @type {number}
    * @memberof AuthorsApiGet
    */
    readonly fromRank?: number
    
    /**
    * 
    * @type {number}
    * @memberof AuthorsApiGet
    */
    readonly toRank?: number
    
    /**
    * 
    * @type {boolean}
    * @memberof AuthorsApiGet
    */
    readonly isHeadline?: boolean
    
    /**
    * 
    * @type {boolean}
    * @memberof AuthorsApiGet
    */
    readonly isPaidContent?: boolean
    
    /**
    * 
    * @type {string}
    * @memberof AuthorsApiGet
    */
    readonly parentUrl?: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthorsApiGet
    */
    readonly allLinks?: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthorsApiGet
    */
    readonly allDomainLinks?: string
    
    /**
    * 
    * @type {number}
    * @memberof AuthorsApiGet
    */
    readonly wordCountMin?: number
    
    /**
    * 
    * @type {number}
    * @memberof AuthorsApiGet
    */
    readonly wordCountMax?: number
    
    /**
    * 
    * @type {number}
    * @memberof AuthorsApiGet
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof AuthorsApiGet
    */
    readonly pageSize?: number
    
    /**
    * 
    * @type {boolean}
    * @memberof AuthorsApiGet
    */
    readonly includeNlpData?: boolean
    
    /**
    * 
    * @type {boolean}
    * @memberof AuthorsApiGet
    */
    readonly hasNlp?: boolean
    
    /**
    * 
    * @type {string}
    * @memberof AuthorsApiGet
    */
    readonly theme?: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthorsApiGet
    */
    readonly nerName?: string
    
    /**
    * 
    * @type {number}
    * @memberof AuthorsApiGet
    */
    readonly titleSentimentMin?: number
    
    /**
    * 
    * @type {number}
    * @memberof AuthorsApiGet
    */
    readonly titleSentimentMax?: number
    
    /**
    * 
    * @type {number}
    * @memberof AuthorsApiGet
    */
    readonly contentSentimentMin?: number
    
    /**
    * 
    * @type {number}
    * @memberof AuthorsApiGet
    */
    readonly contentSentimentMax?: number
    
}

/**
 * Request parameters for post operation in AuthorsApi.
 * @export
 * @interface AuthorsApiPostRequest
 */
export type AuthorsApiPostRequest = {
    
} & AuthorSearchRequest

/**
 * AuthorsApiGenerated - object-oriented interface
 * @export
 * @class AuthorsApiGenerated
 * @extends {BaseAPI}
 */
export class AuthorsApiGenerated extends BaseAPI {
    /**
     * This endpoint allows you to search for articles by author. You need to specify the author name. You can also filter by language, country, source, and more.
     * @summary [Get] Search By Author Request
     * @param {AuthorsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApiGenerated
     */
    public get(requestParameters: AuthorsApiGetRequest, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to search for articles by author. You need to specify the author name. You can also filter by language, country, source, and more.
     * @summary [Post] Search By Author Request
     * @param {AuthorsApiPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApiGenerated
     */
    public post(requestParameters: AuthorsApiPostRequest, options?: AxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).post(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
