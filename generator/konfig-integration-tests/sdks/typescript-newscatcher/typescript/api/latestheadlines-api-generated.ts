/* tslint:disable */
/* eslint-disable */
/*
NewsCatcher-V3 Production API

<img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>

The version of the OpenAPI document: Beta-3.0.0
Contact: maksym@newscatcherapi.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { LatestHeadlinesGetResponse } from '../models';
// @ts-ignore
import { LatestHeadlinesPostResponse } from '../models';
// @ts-ignore
import { LatestHeadlinesRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LatestheadlinesApi - axios parameter creator
 * @export
 */
export const LatestheadlinesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
         * @summary [Get] Search For Latest Headlines Request
         * @param {string} [when] 
         * @param {boolean} [byParseDate] 
         * @param {string} [lang] 
         * @param {string} [notLang] 
         * @param {string} [countries] 
         * @param {string} [notCountries] 
         * @param {string} [sources] 
         * @param {string} [predefinedSources] 
         * @param {string} [notSources] 
         * @param {string} [rankedOnly] 
         * @param {boolean} [isHeadline] 
         * @param {boolean} [isPaidContent] 
         * @param {string} [parentUrl] 
         * @param {string} [theme] 
         * @param {string} [allLinks] 
         * @param {string} [allDomainLinks] 
         * @param {number} [wordCountMin] 
         * @param {number} [wordCountMax] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [clusteringEnabled] 
         * @param {number} [clusteringThreshold] 
         * @param {string} [clusteringVariable] 
         * @param {boolean} [includeNlpData] 
         * @param {boolean} [hasNlp] 
         * @param {string} [oRGEntityName] 
         * @param {string} [pEREntityName] 
         * @param {string} [lOCEntityName] 
         * @param {string} [mISCEntityName] 
         * @param {number} [titleSentimentMin] 
         * @param {number} [titleSentimentMax] 
         * @param {number} [contentSentimentMin] 
         * @param {number} [contentSentimentMax] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (when?: string, byParseDate?: boolean, lang?: string, notLang?: string, countries?: string, notCountries?: string, sources?: string, predefinedSources?: string, notSources?: string, rankedOnly?: string, isHeadline?: boolean, isPaidContent?: boolean, parentUrl?: string, theme?: string, allLinks?: string, allDomainLinks?: string, wordCountMin?: number, wordCountMax?: number, page?: number, pageSize?: number, clusteringEnabled?: boolean, clusteringThreshold?: number, clusteringVariable?: string, includeNlpData?: boolean, hasNlp?: boolean, oRGEntityName?: string, pEREntityName?: string, lOCEntityName?: string, mISCEntityName?: string, titleSentimentMin?: number, titleSentimentMax?: number, contentSentimentMin?: number, contentSentimentMax?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/latest_headlines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "x-api-token", configuration })
            if (when !== undefined) {
                localVarQueryParameter['when'] = when;
            }

            if (byParseDate !== undefined) {
                localVarQueryParameter['by_parse_date'] = byParseDate;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            if (notLang !== undefined) {
                localVarQueryParameter['not_lang'] = notLang;
            }

            if (countries !== undefined) {
                localVarQueryParameter['countries'] = countries;
            }

            if (notCountries !== undefined) {
                localVarQueryParameter['not_countries'] = notCountries;
            }

            if (sources !== undefined) {
                localVarQueryParameter['sources'] = sources;
            }

            if (predefinedSources !== undefined) {
                localVarQueryParameter['predefined_sources'] = predefinedSources;
            }

            if (notSources !== undefined) {
                localVarQueryParameter['not_sources'] = notSources;
            }

            if (rankedOnly !== undefined) {
                localVarQueryParameter['ranked_only'] = rankedOnly;
            }

            if (isHeadline !== undefined) {
                localVarQueryParameter['is_headline'] = isHeadline;
            }

            if (isPaidContent !== undefined) {
                localVarQueryParameter['is_paid_content'] = isPaidContent;
            }

            if (parentUrl !== undefined) {
                localVarQueryParameter['parent_url'] = parentUrl;
            }

            if (theme !== undefined) {
                localVarQueryParameter['theme'] = theme;
            }

            if (allLinks !== undefined) {
                localVarQueryParameter['all_links'] = allLinks;
            }

            if (allDomainLinks !== undefined) {
                localVarQueryParameter['all_domain_links'] = allDomainLinks;
            }

            if (wordCountMin !== undefined) {
                localVarQueryParameter['word_count_min'] = wordCountMin;
            }

            if (wordCountMax !== undefined) {
                localVarQueryParameter['word_count_max'] = wordCountMax;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (clusteringEnabled !== undefined) {
                localVarQueryParameter['clustering_enabled'] = clusteringEnabled;
            }

            if (clusteringThreshold !== undefined) {
                localVarQueryParameter['clustering_threshold'] = clusteringThreshold;
            }

            if (clusteringVariable !== undefined) {
                localVarQueryParameter['clustering_variable'] = clusteringVariable;
            }

            if (includeNlpData !== undefined) {
                localVarQueryParameter['include_nlp_data'] = includeNlpData;
            }

            if (hasNlp !== undefined) {
                localVarQueryParameter['has_nlp'] = hasNlp;
            }

            if (oRGEntityName !== undefined) {
                localVarQueryParameter['ORG_entity_name'] = oRGEntityName;
            }

            if (pEREntityName !== undefined) {
                localVarQueryParameter['PER_entity_name'] = pEREntityName;
            }

            if (lOCEntityName !== undefined) {
                localVarQueryParameter['LOC_entity_name'] = lOCEntityName;
            }

            if (mISCEntityName !== undefined) {
                localVarQueryParameter['MISC_entity_name'] = mISCEntityName;
            }

            if (titleSentimentMin !== undefined) {
                localVarQueryParameter['title_sentiment_min'] = titleSentimentMin;
            }

            if (titleSentimentMax !== undefined) {
                localVarQueryParameter['title_sentiment_max'] = titleSentimentMax;
            }

            if (contentSentimentMin !== undefined) {
                localVarQueryParameter['content_sentiment_min'] = contentSentimentMin;
            }

            if (contentSentimentMax !== undefined) {
                localVarQueryParameter['content_sentiment_max'] = contentSentimentMax;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
         * @summary [Post] Search For Latest Headlines Request
         * @param {LatestHeadlinesRequest} latestHeadlinesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post: async (latestHeadlinesRequest: LatestHeadlinesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'latestHeadlinesRequest' is not null or undefined
            assertParamExists('post', 'latestHeadlinesRequest', latestHeadlinesRequest)
            const localVarPath = `/api/latest_headlines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "x-api-token", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: latestHeadlinesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(latestHeadlinesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LatestheadlinesApi - functional programming interface
 * @export
 */
export const LatestheadlinesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LatestheadlinesApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
         * @summary [Get] Search For Latest Headlines Request
         * @param {LatestheadlinesApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: LatestheadlinesApiGetRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LatestHeadlinesGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.when, requestParameters.byParseDate, requestParameters.lang, requestParameters.notLang, requestParameters.countries, requestParameters.notCountries, requestParameters.sources, requestParameters.predefinedSources, requestParameters.notSources, requestParameters.rankedOnly, requestParameters.isHeadline, requestParameters.isPaidContent, requestParameters.parentUrl, requestParameters.theme, requestParameters.allLinks, requestParameters.allDomainLinks, requestParameters.wordCountMin, requestParameters.wordCountMax, requestParameters.page, requestParameters.pageSize, requestParameters.clusteringEnabled, requestParameters.clusteringThreshold, requestParameters.clusteringVariable, requestParameters.includeNlpData, requestParameters.hasNlp, requestParameters.oRGEntityName, requestParameters.pEREntityName, requestParameters.lOCEntityName, requestParameters.mISCEntityName, requestParameters.titleSentimentMin, requestParameters.titleSentimentMax, requestParameters.contentSentimentMin, requestParameters.contentSentimentMax, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
         * @summary [Post] Search For Latest Headlines Request
         * @param {LatestheadlinesApiPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async post(requestParameters: LatestheadlinesApiPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LatestHeadlinesPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.post(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LatestheadlinesApi - factory interface
 * @export
 */
export const LatestheadlinesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LatestheadlinesApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
         * @summary [Get] Search For Latest Headlines Request
         * @param {LatestheadlinesApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: LatestheadlinesApiGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LatestHeadlinesGetResponse> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
         * @summary [Post] Search For Latest Headlines Request
         * @param {LatestheadlinesApiPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post(requestParameters: LatestheadlinesApiPostRequest, options?: AxiosRequestConfig): AxiosPromise<LatestHeadlinesPostResponse> {
            return localVarFp.post(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get operation in LatestheadlinesApi.
 * @export
 * @interface LatestheadlinesApiGetRequest
 */
export type LatestheadlinesApiGetRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof LatestheadlinesApiGet
    */
    readonly when?: string
    
    /**
    * 
    * @type {boolean}
    * @memberof LatestheadlinesApiGet
    */
    readonly byParseDate?: boolean
    
    /**
    * 
    * @type {string}
    * @memberof LatestheadlinesApiGet
    */
    readonly lang?: string
    
    /**
    * 
    * @type {string}
    * @memberof LatestheadlinesApiGet
    */
    readonly notLang?: string
    
    /**
    * 
    * @type {string}
    * @memberof LatestheadlinesApiGet
    */
    readonly countries?: string
    
    /**
    * 
    * @type {string}
    * @memberof LatestheadlinesApiGet
    */
    readonly notCountries?: string
    
    /**
    * 
    * @type {string}
    * @memberof LatestheadlinesApiGet
    */
    readonly sources?: string
    
    /**
    * 
    * @type {string}
    * @memberof LatestheadlinesApiGet
    */
    readonly predefinedSources?: string
    
    /**
    * 
    * @type {string}
    * @memberof LatestheadlinesApiGet
    */
    readonly notSources?: string
    
    /**
    * 
    * @type {string}
    * @memberof LatestheadlinesApiGet
    */
    readonly rankedOnly?: string
    
    /**
    * 
    * @type {boolean}
    * @memberof LatestheadlinesApiGet
    */
    readonly isHeadline?: boolean
    
    /**
    * 
    * @type {boolean}
    * @memberof LatestheadlinesApiGet
    */
    readonly isPaidContent?: boolean
    
    /**
    * 
    * @type {string}
    * @memberof LatestheadlinesApiGet
    */
    readonly parentUrl?: string
    
    /**
    * 
    * @type {string}
    * @memberof LatestheadlinesApiGet
    */
    readonly theme?: string
    
    /**
    * 
    * @type {string}
    * @memberof LatestheadlinesApiGet
    */
    readonly allLinks?: string
    
    /**
    * 
    * @type {string}
    * @memberof LatestheadlinesApiGet
    */
    readonly allDomainLinks?: string
    
    /**
    * 
    * @type {number}
    * @memberof LatestheadlinesApiGet
    */
    readonly wordCountMin?: number
    
    /**
    * 
    * @type {number}
    * @memberof LatestheadlinesApiGet
    */
    readonly wordCountMax?: number
    
    /**
    * 
    * @type {number}
    * @memberof LatestheadlinesApiGet
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof LatestheadlinesApiGet
    */
    readonly pageSize?: number
    
    /**
    * 
    * @type {boolean}
    * @memberof LatestheadlinesApiGet
    */
    readonly clusteringEnabled?: boolean
    
    /**
    * 
    * @type {number}
    * @memberof LatestheadlinesApiGet
    */
    readonly clusteringThreshold?: number
    
    /**
    * 
    * @type {string}
    * @memberof LatestheadlinesApiGet
    */
    readonly clusteringVariable?: string
    
    /**
    * 
    * @type {boolean}
    * @memberof LatestheadlinesApiGet
    */
    readonly includeNlpData?: boolean
    
    /**
    * 
    * @type {boolean}
    * @memberof LatestheadlinesApiGet
    */
    readonly hasNlp?: boolean
    
    /**
    * 
    * @type {string}
    * @memberof LatestheadlinesApiGet
    */
    readonly oRGEntityName?: string
    
    /**
    * 
    * @type {string}
    * @memberof LatestheadlinesApiGet
    */
    readonly pEREntityName?: string
    
    /**
    * 
    * @type {string}
    * @memberof LatestheadlinesApiGet
    */
    readonly lOCEntityName?: string
    
    /**
    * 
    * @type {string}
    * @memberof LatestheadlinesApiGet
    */
    readonly mISCEntityName?: string
    
    /**
    * 
    * @type {number}
    * @memberof LatestheadlinesApiGet
    */
    readonly titleSentimentMin?: number
    
    /**
    * 
    * @type {number}
    * @memberof LatestheadlinesApiGet
    */
    readonly titleSentimentMax?: number
    
    /**
    * 
    * @type {number}
    * @memberof LatestheadlinesApiGet
    */
    readonly contentSentimentMin?: number
    
    /**
    * 
    * @type {number}
    * @memberof LatestheadlinesApiGet
    */
    readonly contentSentimentMax?: number
    
}

/**
 * Request parameters for post operation in LatestheadlinesApi.
 * @export
 * @interface LatestheadlinesApiPostRequest
 */
export type LatestheadlinesApiPostRequest = {
    
} & LatestHeadlinesRequest

/**
 * LatestheadlinesApiGenerated - object-oriented interface
 * @export
 * @class LatestheadlinesApiGenerated
 * @extends {BaseAPI}
 */
export class LatestheadlinesApiGenerated extends BaseAPI {
    /**
     * This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
     * @summary [Get] Search For Latest Headlines Request
     * @param {LatestheadlinesApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LatestheadlinesApiGenerated
     */
    public get(requestParameters: LatestheadlinesApiGetRequest = {}, options?: AxiosRequestConfig) {
        return LatestheadlinesApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
     * @summary [Post] Search For Latest Headlines Request
     * @param {LatestheadlinesApiPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LatestheadlinesApiGenerated
     */
    public post(requestParameters: LatestheadlinesApiPostRequest, options?: AxiosRequestConfig) {
        return LatestheadlinesApiFp(this.configuration).post(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
