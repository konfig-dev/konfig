/* tslint:disable */
/* eslint-disable */
/*
NewsCatcher-V3 Production API

<img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>

The version of the OpenAPI document: Beta-3.0.0
Contact: maksym@newscatcherapi.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { From } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { SearchGetResponse } from '../models';
// @ts-ignore
import { SearchPostResponse } from '../models';
// @ts-ignore
import { SearchRequest } from '../models';
// @ts-ignore
import { To } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to search for articles. You can search for articles by keyword, language, country, source, and more.
         * @summary [Get] Search For Articles Request
         * @param {string} q 
         * @param {string} [searchIn] 
         * @param {string} [predefinedSources] 
         * @param {string} [sources] 
         * @param {string} [notSources] 
         * @param {string} [lang] 
         * @param {string} [notLang] 
         * @param {string} [countries] 
         * @param {string} [notCountries] 
         * @param {From} [from] 
         * @param {To} [to] 
         * @param {string} [publishedDatePrecision] 
         * @param {boolean} [byParseDate] 
         * @param {string} [sortBy] 
         * @param {string} [rankedOnly] 
         * @param {number} [fromRank] 
         * @param {number} [toRank] 
         * @param {boolean} [isHeadline] 
         * @param {boolean} [isPaidContent] 
         * @param {string} [parentUrl] 
         * @param {string} [allLinks] 
         * @param {string} [allDomainLinks] 
         * @param {number} [wordCountMin] 
         * @param {number} [wordCountMax] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [clusteringEnabled] 
         * @param {number} [clusteringThreshold] 
         * @param {string} [clusteringVariable] 
         * @param {boolean} [includeNlpData] 
         * @param {boolean} [hasNlp] 
         * @param {string} [theme] 
         * @param {string} [oRGEntityName] 
         * @param {string} [pEREntityName] 
         * @param {string} [lOCEntityName] 
         * @param {string} [mISCEntityName] 
         * @param {number} [titleSentimentMin] 
         * @param {number} [titleSentimentMax] 
         * @param {number} [contentSentimentMin] 
         * @param {number} [contentSentimentMax] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (q: string, searchIn?: string, predefinedSources?: string, sources?: string, notSources?: string, lang?: string, notLang?: string, countries?: string, notCountries?: string, from?: From, to?: To, publishedDatePrecision?: string, byParseDate?: boolean, sortBy?: string, rankedOnly?: string, fromRank?: number, toRank?: number, isHeadline?: boolean, isPaidContent?: boolean, parentUrl?: string, allLinks?: string, allDomainLinks?: string, wordCountMin?: number, wordCountMax?: number, page?: number, pageSize?: number, clusteringEnabled?: boolean, clusteringThreshold?: number, clusteringVariable?: string, includeNlpData?: boolean, hasNlp?: boolean, theme?: string, oRGEntityName?: string, pEREntityName?: string, lOCEntityName?: string, mISCEntityName?: string, titleSentimentMin?: number, titleSentimentMax?: number, contentSentimentMin?: number, contentSentimentMax?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('get', 'q', q)
            const localVarPath = `/api/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "x-api-token", configuration })
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (searchIn !== undefined) {
                localVarQueryParameter['search_in'] = searchIn;
            }

            if (predefinedSources !== undefined) {
                localVarQueryParameter['predefined_sources'] = predefinedSources;
            }

            if (sources !== undefined) {
                localVarQueryParameter['sources'] = sources;
            }

            if (notSources !== undefined) {
                localVarQueryParameter['not_sources'] = notSources;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            if (notLang !== undefined) {
                localVarQueryParameter['not_lang'] = notLang;
            }

            if (countries !== undefined) {
                localVarQueryParameter['countries'] = countries;
            }

            if (notCountries !== undefined) {
                localVarQueryParameter['not_countries'] = notCountries;
            }

            if (from !== undefined) {
                localVarQueryParameter['from_'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to_'] = to;
            }

            if (publishedDatePrecision !== undefined) {
                localVarQueryParameter['published_date_precision'] = publishedDatePrecision;
            }

            if (byParseDate !== undefined) {
                localVarQueryParameter['by_parse_date'] = byParseDate;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (rankedOnly !== undefined) {
                localVarQueryParameter['ranked_only'] = rankedOnly;
            }

            if (fromRank !== undefined) {
                localVarQueryParameter['from_rank'] = fromRank;
            }

            if (toRank !== undefined) {
                localVarQueryParameter['to_rank'] = toRank;
            }

            if (isHeadline !== undefined) {
                localVarQueryParameter['is_headline'] = isHeadline;
            }

            if (isPaidContent !== undefined) {
                localVarQueryParameter['is_paid_content'] = isPaidContent;
            }

            if (parentUrl !== undefined) {
                localVarQueryParameter['parent_url'] = parentUrl;
            }

            if (allLinks !== undefined) {
                localVarQueryParameter['all_links'] = allLinks;
            }

            if (allDomainLinks !== undefined) {
                localVarQueryParameter['all_domain_links'] = allDomainLinks;
            }

            if (wordCountMin !== undefined) {
                localVarQueryParameter['word_count_min'] = wordCountMin;
            }

            if (wordCountMax !== undefined) {
                localVarQueryParameter['word_count_max'] = wordCountMax;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (clusteringEnabled !== undefined) {
                localVarQueryParameter['clustering_enabled'] = clusteringEnabled;
            }

            if (clusteringThreshold !== undefined) {
                localVarQueryParameter['clustering_threshold'] = clusteringThreshold;
            }

            if (clusteringVariable !== undefined) {
                localVarQueryParameter['clustering_variable'] = clusteringVariable;
            }

            if (includeNlpData !== undefined) {
                localVarQueryParameter['include_nlp_data'] = includeNlpData;
            }

            if (hasNlp !== undefined) {
                localVarQueryParameter['has_nlp'] = hasNlp;
            }

            if (theme !== undefined) {
                localVarQueryParameter['theme'] = theme;
            }

            if (oRGEntityName !== undefined) {
                localVarQueryParameter['ORG_entity_name'] = oRGEntityName;
            }

            if (pEREntityName !== undefined) {
                localVarQueryParameter['PER_entity_name'] = pEREntityName;
            }

            if (lOCEntityName !== undefined) {
                localVarQueryParameter['LOC_entity_name'] = lOCEntityName;
            }

            if (mISCEntityName !== undefined) {
                localVarQueryParameter['MISC_entity_name'] = mISCEntityName;
            }

            if (titleSentimentMin !== undefined) {
                localVarQueryParameter['title_sentiment_min'] = titleSentimentMin;
            }

            if (titleSentimentMax !== undefined) {
                localVarQueryParameter['title_sentiment_max'] = titleSentimentMax;
            }

            if (contentSentimentMin !== undefined) {
                localVarQueryParameter['content_sentiment_min'] = contentSentimentMin;
            }

            if (contentSentimentMax !== undefined) {
                localVarQueryParameter['content_sentiment_max'] = contentSentimentMax;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to search for articles. You can search for articles by keyword, language, country, source, and more.
         * @summary [Post] Search For Articles Request
         * @param {SearchRequest} searchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post: async (searchRequest: SearchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchRequest' is not null or undefined
            assertParamExists('post', 'searchRequest', searchRequest)
            const localVarPath = `/api/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "x-api-token", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: searchRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(searchRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to search for articles. You can search for articles by keyword, language, country, source, and more.
         * @summary [Get] Search For Articles Request
         * @param {SearchApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: SearchApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.q, requestParameters.searchIn, requestParameters.predefinedSources, requestParameters.sources, requestParameters.notSources, requestParameters.lang, requestParameters.notLang, requestParameters.countries, requestParameters.notCountries, requestParameters.from, requestParameters.to, requestParameters.publishedDatePrecision, requestParameters.byParseDate, requestParameters.sortBy, requestParameters.rankedOnly, requestParameters.fromRank, requestParameters.toRank, requestParameters.isHeadline, requestParameters.isPaidContent, requestParameters.parentUrl, requestParameters.allLinks, requestParameters.allDomainLinks, requestParameters.wordCountMin, requestParameters.wordCountMax, requestParameters.page, requestParameters.pageSize, requestParameters.clusteringEnabled, requestParameters.clusteringThreshold, requestParameters.clusteringVariable, requestParameters.includeNlpData, requestParameters.hasNlp, requestParameters.theme, requestParameters.oRGEntityName, requestParameters.pEREntityName, requestParameters.lOCEntityName, requestParameters.mISCEntityName, requestParameters.titleSentimentMin, requestParameters.titleSentimentMax, requestParameters.contentSentimentMin, requestParameters.contentSentimentMax, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to search for articles. You can search for articles by keyword, language, country, source, and more.
         * @summary [Post] Search For Articles Request
         * @param {SearchApiPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async post(requestParameters: SearchApiPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.post(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * This endpoint allows you to search for articles. You can search for articles by keyword, language, country, source, and more.
         * @summary [Get] Search For Articles Request
         * @param {SearchApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: SearchApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<SearchGetResponse> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to search for articles. You can search for articles by keyword, language, country, source, and more.
         * @summary [Post] Search For Articles Request
         * @param {SearchApiPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post(requestParameters: SearchApiPostRequest, options?: AxiosRequestConfig): AxiosPromise<SearchPostResponse> {
            return localVarFp.post(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get operation in SearchApi.
 * @export
 * @interface SearchApiGetRequest
 */
export type SearchApiGetRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly q: string
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly searchIn?: string
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly predefinedSources?: string
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly sources?: string
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly notSources?: string
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly lang?: string
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly notLang?: string
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly countries?: string
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly notCountries?: string
    
    /**
    * 
    * @type {From}
    * @memberof SearchApiGet
    */
    readonly from?: From
    
    /**
    * 
    * @type {To}
    * @memberof SearchApiGet
    */
    readonly to?: To
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly publishedDatePrecision?: string
    
    /**
    * 
    * @type {boolean}
    * @memberof SearchApiGet
    */
    readonly byParseDate?: boolean
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly sortBy?: string
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly rankedOnly?: string
    
    /**
    * 
    * @type {number}
    * @memberof SearchApiGet
    */
    readonly fromRank?: number
    
    /**
    * 
    * @type {number}
    * @memberof SearchApiGet
    */
    readonly toRank?: number
    
    /**
    * 
    * @type {boolean}
    * @memberof SearchApiGet
    */
    readonly isHeadline?: boolean
    
    /**
    * 
    * @type {boolean}
    * @memberof SearchApiGet
    */
    readonly isPaidContent?: boolean
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly parentUrl?: string
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly allLinks?: string
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly allDomainLinks?: string
    
    /**
    * 
    * @type {number}
    * @memberof SearchApiGet
    */
    readonly wordCountMin?: number
    
    /**
    * 
    * @type {number}
    * @memberof SearchApiGet
    */
    readonly wordCountMax?: number
    
    /**
    * 
    * @type {number}
    * @memberof SearchApiGet
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof SearchApiGet
    */
    readonly pageSize?: number
    
    /**
    * 
    * @type {boolean}
    * @memberof SearchApiGet
    */
    readonly clusteringEnabled?: boolean
    
    /**
    * 
    * @type {number}
    * @memberof SearchApiGet
    */
    readonly clusteringThreshold?: number
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly clusteringVariable?: string
    
    /**
    * 
    * @type {boolean}
    * @memberof SearchApiGet
    */
    readonly includeNlpData?: boolean
    
    /**
    * 
    * @type {boolean}
    * @memberof SearchApiGet
    */
    readonly hasNlp?: boolean
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly theme?: string
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly oRGEntityName?: string
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly pEREntityName?: string
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly lOCEntityName?: string
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiGet
    */
    readonly mISCEntityName?: string
    
    /**
    * 
    * @type {number}
    * @memberof SearchApiGet
    */
    readonly titleSentimentMin?: number
    
    /**
    * 
    * @type {number}
    * @memberof SearchApiGet
    */
    readonly titleSentimentMax?: number
    
    /**
    * 
    * @type {number}
    * @memberof SearchApiGet
    */
    readonly contentSentimentMin?: number
    
    /**
    * 
    * @type {number}
    * @memberof SearchApiGet
    */
    readonly contentSentimentMax?: number
    
}

/**
 * Request parameters for post operation in SearchApi.
 * @export
 * @interface SearchApiPostRequest
 */
export type SearchApiPostRequest = {
    
} & SearchRequest

/**
 * SearchApiGenerated - object-oriented interface
 * @export
 * @class SearchApiGenerated
 * @extends {BaseAPI}
 */
export class SearchApiGenerated extends BaseAPI {
    /**
     * This endpoint allows you to search for articles. You can search for articles by keyword, language, country, source, and more.
     * @summary [Get] Search For Articles Request
     * @param {SearchApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiGenerated
     */
    public get(requestParameters: SearchApiGetRequest, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to search for articles. You can search for articles by keyword, language, country, source, and more.
     * @summary [Post] Search For Articles Request
     * @param {SearchApiPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiGenerated
     */
    public post(requestParameters: SearchApiPostRequest, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).post(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
