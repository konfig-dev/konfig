<?php
/**
 * UserFile
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Carbon
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * Carbon
 *
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Carbon\Model;

use \ArrayAccess;
use \Carbon\ObjectSerializer;

/**
 * UserFile Class Doc Comment
 *
 * @category Class
 * @package  Carbon
 * @implements \ArrayAccess<string, mixed>
 */
class UserFile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserFile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tags' => 'object',
        'id' => 'int',
        'source' => '\Carbon\Model\DataSourceType',
        'organization_id' => 'int',
        'organization_supplied_user_id' => 'string',
        'organization_user_data_source_id' => 'int',
        'external_file_id' => 'string',
        'external_url' => 'string',
        'sync_status' => '\Carbon\Model\ExternalFileSyncStatuses',
        'sync_error_message' => 'string',
        'last_sync' => '\DateTime',
        'file_statistics' => '\Carbon\Model\FileStatisticsNullable',
        'file_metadata' => 'object',
        'embedding_properties' => 'array<string,\Carbon\Model\EmbeddingProperties>',
        'chunk_size' => 'int',
        'chunk_overlap' => 'int',
        'chunk_properties' => '\Carbon\Model\ChunkPropertiesNullable',
        'name' => 'string',
        'parent_id' => 'int',
        'enable_auto_sync' => 'bool',
        'presigned_url' => 'string',
        'parsed_text_url' => 'string',
        'additional_presigned_urls' => 'object',
        'skip_embedding_generation' => 'bool',
        'source_created_at' => '\DateTime',
        'generate_sparse_vectors' => 'bool',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tags' => null,
        'id' => null,
        'source' => null,
        'organization_id' => null,
        'organization_supplied_user_id' => null,
        'organization_user_data_source_id' => null,
        'external_file_id' => null,
        'external_url' => null,
        'sync_status' => null,
        'sync_error_message' => null,
        'last_sync' => 'date-time',
        'file_statistics' => null,
        'file_metadata' => null,
        'embedding_properties' => null,
        'chunk_size' => null,
        'chunk_overlap' => null,
        'chunk_properties' => null,
        'name' => null,
        'parent_id' => null,
        'enable_auto_sync' => null,
        'presigned_url' => null,
        'parsed_text_url' => null,
        'additional_presigned_urls' => null,
        'skip_embedding_generation' => null,
        'source_created_at' => 'date-time',
        'generate_sparse_vectors' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'tags' => true,
		'id' => false,
		'source' => false,
		'organization_id' => false,
		'organization_supplied_user_id' => false,
		'organization_user_data_source_id' => true,
		'external_file_id' => false,
		'external_url' => true,
		'sync_status' => false,
		'sync_error_message' => true,
		'last_sync' => true,
		'file_statistics' => true,
		'file_metadata' => true,
		'embedding_properties' => true,
		'chunk_size' => true,
		'chunk_overlap' => true,
		'chunk_properties' => true,
		'name' => true,
		'parent_id' => true,
		'enable_auto_sync' => true,
		'presigned_url' => true,
		'parsed_text_url' => true,
		'additional_presigned_urls' => true,
		'skip_embedding_generation' => false,
		'source_created_at' => true,
		'generate_sparse_vectors' => true,
		'created_at' => false,
		'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tags' => 'tags',
        'id' => 'id',
        'source' => 'source',
        'organization_id' => 'organization_id',
        'organization_supplied_user_id' => 'organization_supplied_user_id',
        'organization_user_data_source_id' => 'organization_user_data_source_id',
        'external_file_id' => 'external_file_id',
        'external_url' => 'external_url',
        'sync_status' => 'sync_status',
        'sync_error_message' => 'sync_error_message',
        'last_sync' => 'last_sync',
        'file_statistics' => 'file_statistics',
        'file_metadata' => 'file_metadata',
        'embedding_properties' => 'embedding_properties',
        'chunk_size' => 'chunk_size',
        'chunk_overlap' => 'chunk_overlap',
        'chunk_properties' => 'chunk_properties',
        'name' => 'name',
        'parent_id' => 'parent_id',
        'enable_auto_sync' => 'enable_auto_sync',
        'presigned_url' => 'presigned_url',
        'parsed_text_url' => 'parsed_text_url',
        'additional_presigned_urls' => 'additional_presigned_urls',
        'skip_embedding_generation' => 'skip_embedding_generation',
        'source_created_at' => 'source_created_at',
        'generate_sparse_vectors' => 'generate_sparse_vectors',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tags' => 'setTags',
        'id' => 'setId',
        'source' => 'setSource',
        'organization_id' => 'setOrganizationId',
        'organization_supplied_user_id' => 'setOrganizationSuppliedUserId',
        'organization_user_data_source_id' => 'setOrganizationUserDataSourceId',
        'external_file_id' => 'setExternalFileId',
        'external_url' => 'setExternalUrl',
        'sync_status' => 'setSyncStatus',
        'sync_error_message' => 'setSyncErrorMessage',
        'last_sync' => 'setLastSync',
        'file_statistics' => 'setFileStatistics',
        'file_metadata' => 'setFileMetadata',
        'embedding_properties' => 'setEmbeddingProperties',
        'chunk_size' => 'setChunkSize',
        'chunk_overlap' => 'setChunkOverlap',
        'chunk_properties' => 'setChunkProperties',
        'name' => 'setName',
        'parent_id' => 'setParentId',
        'enable_auto_sync' => 'setEnableAutoSync',
        'presigned_url' => 'setPresignedUrl',
        'parsed_text_url' => 'setParsedTextUrl',
        'additional_presigned_urls' => 'setAdditionalPresignedUrls',
        'skip_embedding_generation' => 'setSkipEmbeddingGeneration',
        'source_created_at' => 'setSourceCreatedAt',
        'generate_sparse_vectors' => 'setGenerateSparseVectors',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tags' => 'getTags',
        'id' => 'getId',
        'source' => 'getSource',
        'organization_id' => 'getOrganizationId',
        'organization_supplied_user_id' => 'getOrganizationSuppliedUserId',
        'organization_user_data_source_id' => 'getOrganizationUserDataSourceId',
        'external_file_id' => 'getExternalFileId',
        'external_url' => 'getExternalUrl',
        'sync_status' => 'getSyncStatus',
        'sync_error_message' => 'getSyncErrorMessage',
        'last_sync' => 'getLastSync',
        'file_statistics' => 'getFileStatistics',
        'file_metadata' => 'getFileMetadata',
        'embedding_properties' => 'getEmbeddingProperties',
        'chunk_size' => 'getChunkSize',
        'chunk_overlap' => 'getChunkOverlap',
        'chunk_properties' => 'getChunkProperties',
        'name' => 'getName',
        'parent_id' => 'getParentId',
        'enable_auto_sync' => 'getEnableAutoSync',
        'presigned_url' => 'getPresignedUrl',
        'parsed_text_url' => 'getParsedTextUrl',
        'additional_presigned_urls' => 'getAdditionalPresignedUrls',
        'skip_embedding_generation' => 'getSkipEmbeddingGeneration',
        'source_created_at' => 'getSourceCreatedAt',
        'generate_sparse_vectors' => 'getGenerateSparseVectors',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('organization_id', $data ?? [], null);
        $this->setIfExists('organization_supplied_user_id', $data ?? [], null);
        $this->setIfExists('organization_user_data_source_id', $data ?? [], null);
        $this->setIfExists('external_file_id', $data ?? [], null);
        $this->setIfExists('external_url', $data ?? [], null);
        $this->setIfExists('sync_status', $data ?? [], null);
        $this->setIfExists('sync_error_message', $data ?? [], null);
        $this->setIfExists('last_sync', $data ?? [], null);
        $this->setIfExists('file_statistics', $data ?? [], null);
        $this->setIfExists('file_metadata', $data ?? [], null);
        $this->setIfExists('embedding_properties', $data ?? [], null);
        $this->setIfExists('chunk_size', $data ?? [], null);
        $this->setIfExists('chunk_overlap', $data ?? [], null);
        $this->setIfExists('chunk_properties', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('enable_auto_sync', $data ?? [], null);
        $this->setIfExists('presigned_url', $data ?? [], null);
        $this->setIfExists('parsed_text_url', $data ?? [], null);
        $this->setIfExists('additional_presigned_urls', $data ?? [], null);
        $this->setIfExists('skip_embedding_generation', $data ?? [], null);
        $this->setIfExists('source_created_at', $data ?? [], null);
        $this->setIfExists('generate_sparse_vectors', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['tags'] === null) {
            $invalidProperties[] = "'tags' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if ($this->container['organization_id'] === null) {
            $invalidProperties[] = "'organization_id' can't be null";
        }
        if ($this->container['organization_supplied_user_id'] === null) {
            $invalidProperties[] = "'organization_supplied_user_id' can't be null";
        }
        if ($this->container['organization_user_data_source_id'] === null) {
            $invalidProperties[] = "'organization_user_data_source_id' can't be null";
        }
        if ($this->container['external_file_id'] === null) {
            $invalidProperties[] = "'external_file_id' can't be null";
        }
        if ($this->container['external_url'] === null) {
            $invalidProperties[] = "'external_url' can't be null";
        }
        if ($this->container['sync_status'] === null) {
            $invalidProperties[] = "'sync_status' can't be null";
        }
        if ($this->container['sync_error_message'] === null) {
            $invalidProperties[] = "'sync_error_message' can't be null";
        }
        if ($this->container['last_sync'] === null) {
            $invalidProperties[] = "'last_sync' can't be null";
        }
        if ($this->container['file_statistics'] === null) {
            $invalidProperties[] = "'file_statistics' can't be null";
        }
        if ($this->container['file_metadata'] === null) {
            $invalidProperties[] = "'file_metadata' can't be null";
        }
        if ($this->container['embedding_properties'] === null) {
            $invalidProperties[] = "'embedding_properties' can't be null";
        }
        if ($this->container['chunk_size'] === null) {
            $invalidProperties[] = "'chunk_size' can't be null";
        }
        if ($this->container['chunk_overlap'] === null) {
            $invalidProperties[] = "'chunk_overlap' can't be null";
        }
        if ($this->container['chunk_properties'] === null) {
            $invalidProperties[] = "'chunk_properties' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['parent_id'] === null) {
            $invalidProperties[] = "'parent_id' can't be null";
        }
        if ($this->container['enable_auto_sync'] === null) {
            $invalidProperties[] = "'enable_auto_sync' can't be null";
        }
        if ($this->container['presigned_url'] === null) {
            $invalidProperties[] = "'presigned_url' can't be null";
        }
        if ($this->container['parsed_text_url'] === null) {
            $invalidProperties[] = "'parsed_text_url' can't be null";
        }
        if ($this->container['additional_presigned_urls'] === null) {
            $invalidProperties[] = "'additional_presigned_urls' can't be null";
        }
        if ($this->container['skip_embedding_generation'] === null) {
            $invalidProperties[] = "'skip_embedding_generation' can't be null";
        }
        if ($this->container['source_created_at'] === null) {
            $invalidProperties[] = "'source_created_at' can't be null";
        }
        if ($this->container['generate_sparse_vectors'] === null) {
            $invalidProperties[] = "'generate_sparse_vectors' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tags
     *
     * @return object
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param object $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {

        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \Carbon\Model\DataSourceType
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \Carbon\Model\DataSourceType $source source
     *
     * @return self
     */
    public function setSource($source)
    {

        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }

        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return int
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param int $organization_id organization_id
     *
     * @return self
     */
    public function setOrganizationId($organization_id)
    {

        if (is_null($organization_id)) {
            throw new \InvalidArgumentException('non-nullable organization_id cannot be null');
        }

        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets organization_supplied_user_id
     *
     * @return string
     */
    public function getOrganizationSuppliedUserId()
    {
        return $this->container['organization_supplied_user_id'];
    }

    /**
     * Sets organization_supplied_user_id
     *
     * @param string $organization_supplied_user_id organization_supplied_user_id
     *
     * @return self
     */
    public function setOrganizationSuppliedUserId($organization_supplied_user_id)
    {

        if (is_null($organization_supplied_user_id)) {
            throw new \InvalidArgumentException('non-nullable organization_supplied_user_id cannot be null');
        }

        $this->container['organization_supplied_user_id'] = $organization_supplied_user_id;

        return $this;
    }

    /**
     * Gets organization_user_data_source_id
     *
     * @return int
     */
    public function getOrganizationUserDataSourceId()
    {
        return $this->container['organization_user_data_source_id'];
    }

    /**
     * Sets organization_user_data_source_id
     *
     * @param int $organization_user_data_source_id organization_user_data_source_id
     *
     * @return self
     */
    public function setOrganizationUserDataSourceId($organization_user_data_source_id)
    {

        if (is_null($organization_user_data_source_id)) {
            array_push($this->openAPINullablesSetToNull, 'organization_user_data_source_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_user_data_source_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['organization_user_data_source_id'] = $organization_user_data_source_id;

        return $this;
    }

    /**
     * Gets external_file_id
     *
     * @return string
     */
    public function getExternalFileId()
    {
        return $this->container['external_file_id'];
    }

    /**
     * Sets external_file_id
     *
     * @param string $external_file_id external_file_id
     *
     * @return self
     */
    public function setExternalFileId($external_file_id)
    {

        if (is_null($external_file_id)) {
            throw new \InvalidArgumentException('non-nullable external_file_id cannot be null');
        }

        $this->container['external_file_id'] = $external_file_id;

        return $this;
    }

    /**
     * Gets external_url
     *
     * @return string
     */
    public function getExternalUrl()
    {
        return $this->container['external_url'];
    }

    /**
     * Sets external_url
     *
     * @param string $external_url external_url
     *
     * @return self
     */
    public function setExternalUrl($external_url)
    {

        if (is_null($external_url)) {
            array_push($this->openAPINullablesSetToNull, 'external_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['external_url'] = $external_url;

        return $this;
    }

    /**
     * Gets sync_status
     *
     * @return \Carbon\Model\ExternalFileSyncStatuses
     */
    public function getSyncStatus()
    {
        return $this->container['sync_status'];
    }

    /**
     * Sets sync_status
     *
     * @param \Carbon\Model\ExternalFileSyncStatuses $sync_status sync_status
     *
     * @return self
     */
    public function setSyncStatus($sync_status)
    {

        if (is_null($sync_status)) {
            throw new \InvalidArgumentException('non-nullable sync_status cannot be null');
        }

        $this->container['sync_status'] = $sync_status;

        return $this;
    }

    /**
     * Gets sync_error_message
     *
     * @return string
     */
    public function getSyncErrorMessage()
    {
        return $this->container['sync_error_message'];
    }

    /**
     * Sets sync_error_message
     *
     * @param string $sync_error_message sync_error_message
     *
     * @return self
     */
    public function setSyncErrorMessage($sync_error_message)
    {

        if (is_null($sync_error_message)) {
            array_push($this->openAPINullablesSetToNull, 'sync_error_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sync_error_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['sync_error_message'] = $sync_error_message;

        return $this;
    }

    /**
     * Gets last_sync
     *
     * @return \DateTime
     */
    public function getLastSync()
    {
        return $this->container['last_sync'];
    }

    /**
     * Sets last_sync
     *
     * @param \DateTime $last_sync last_sync
     *
     * @return self
     */
    public function setLastSync($last_sync)
    {

        if (is_null($last_sync)) {
            array_push($this->openAPINullablesSetToNull, 'last_sync');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_sync', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['last_sync'] = $last_sync;

        return $this;
    }

    /**
     * Gets file_statistics
     *
     * @return \Carbon\Model\FileStatisticsNullable
     */
    public function getFileStatistics()
    {
        return $this->container['file_statistics'];
    }

    /**
     * Sets file_statistics
     *
     * @param \Carbon\Model\FileStatisticsNullable $file_statistics file_statistics
     *
     * @return self
     */
    public function setFileStatistics($file_statistics)
    {

        if (is_null($file_statistics)) {
            array_push($this->openAPINullablesSetToNull, 'file_statistics');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_statistics', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['file_statistics'] = $file_statistics;

        return $this;
    }

    /**
     * Gets file_metadata
     *
     * @return object
     */
    public function getFileMetadata()
    {
        return $this->container['file_metadata'];
    }

    /**
     * Sets file_metadata
     *
     * @param object $file_metadata file_metadata
     *
     * @return self
     */
    public function setFileMetadata($file_metadata)
    {

        if (is_null($file_metadata)) {
            array_push($this->openAPINullablesSetToNull, 'file_metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['file_metadata'] = $file_metadata;

        return $this;
    }

    /**
     * Gets embedding_properties
     *
     * @return array<string,\Carbon\Model\EmbeddingProperties>
     */
    public function getEmbeddingProperties()
    {
        return $this->container['embedding_properties'];
    }

    /**
     * Sets embedding_properties
     *
     * @param array<string,\Carbon\Model\EmbeddingProperties> $embedding_properties embedding_properties
     *
     * @return self
     */
    public function setEmbeddingProperties($embedding_properties)
    {

        if (is_null($embedding_properties)) {
            array_push($this->openAPINullablesSetToNull, 'embedding_properties');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('embedding_properties', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['embedding_properties'] = $embedding_properties;

        return $this;
    }

    /**
     * Gets chunk_size
     *
     * @return int
     */
    public function getChunkSize()
    {
        return $this->container['chunk_size'];
    }

    /**
     * Sets chunk_size
     *
     * @param int $chunk_size chunk_size
     *
     * @return self
     */
    public function setChunkSize($chunk_size)
    {

        if (is_null($chunk_size)) {
            array_push($this->openAPINullablesSetToNull, 'chunk_size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chunk_size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['chunk_size'] = $chunk_size;

        return $this;
    }

    /**
     * Gets chunk_overlap
     *
     * @return int
     */
    public function getChunkOverlap()
    {
        return $this->container['chunk_overlap'];
    }

    /**
     * Sets chunk_overlap
     *
     * @param int $chunk_overlap chunk_overlap
     *
     * @return self
     */
    public function setChunkOverlap($chunk_overlap)
    {

        if (is_null($chunk_overlap)) {
            array_push($this->openAPINullablesSetToNull, 'chunk_overlap');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chunk_overlap', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['chunk_overlap'] = $chunk_overlap;

        return $this;
    }

    /**
     * Gets chunk_properties
     *
     * @return \Carbon\Model\ChunkPropertiesNullable
     */
    public function getChunkProperties()
    {
        return $this->container['chunk_properties'];
    }

    /**
     * Sets chunk_properties
     *
     * @param \Carbon\Model\ChunkPropertiesNullable $chunk_properties chunk_properties
     *
     * @return self
     */
    public function setChunkProperties($chunk_properties)
    {

        if (is_null($chunk_properties)) {
            array_push($this->openAPINullablesSetToNull, 'chunk_properties');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chunk_properties', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['chunk_properties'] = $chunk_properties;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id parent_id
     *
     * @return self
     */
    public function setParentId($parent_id)
    {

        if (is_null($parent_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets enable_auto_sync
     *
     * @return bool
     */
    public function getEnableAutoSync()
    {
        return $this->container['enable_auto_sync'];
    }

    /**
     * Sets enable_auto_sync
     *
     * @param bool $enable_auto_sync enable_auto_sync
     *
     * @return self
     */
    public function setEnableAutoSync($enable_auto_sync)
    {

        if (is_null($enable_auto_sync)) {
            array_push($this->openAPINullablesSetToNull, 'enable_auto_sync');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enable_auto_sync', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['enable_auto_sync'] = $enable_auto_sync;

        return $this;
    }

    /**
     * Gets presigned_url
     *
     * @return string
     */
    public function getPresignedUrl()
    {
        return $this->container['presigned_url'];
    }

    /**
     * Sets presigned_url
     *
     * @param string $presigned_url presigned_url
     *
     * @return self
     */
    public function setPresignedUrl($presigned_url)
    {

        if (is_null($presigned_url)) {
            array_push($this->openAPINullablesSetToNull, 'presigned_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('presigned_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['presigned_url'] = $presigned_url;

        return $this;
    }

    /**
     * Gets parsed_text_url
     *
     * @return string
     */
    public function getParsedTextUrl()
    {
        return $this->container['parsed_text_url'];
    }

    /**
     * Sets parsed_text_url
     *
     * @param string $parsed_text_url parsed_text_url
     *
     * @return self
     */
    public function setParsedTextUrl($parsed_text_url)
    {

        if (is_null($parsed_text_url)) {
            array_push($this->openAPINullablesSetToNull, 'parsed_text_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parsed_text_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['parsed_text_url'] = $parsed_text_url;

        return $this;
    }

    /**
     * Gets additional_presigned_urls
     *
     * @return object
     */
    public function getAdditionalPresignedUrls()
    {
        return $this->container['additional_presigned_urls'];
    }

    /**
     * Sets additional_presigned_urls
     *
     * @param object $additional_presigned_urls additional_presigned_urls
     *
     * @return self
     */
    public function setAdditionalPresignedUrls($additional_presigned_urls)
    {

        if (is_null($additional_presigned_urls)) {
            array_push($this->openAPINullablesSetToNull, 'additional_presigned_urls');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_presigned_urls', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['additional_presigned_urls'] = $additional_presigned_urls;

        return $this;
    }

    /**
     * Gets skip_embedding_generation
     *
     * @return bool
     */
    public function getSkipEmbeddingGeneration()
    {
        return $this->container['skip_embedding_generation'];
    }

    /**
     * Sets skip_embedding_generation
     *
     * @param bool $skip_embedding_generation skip_embedding_generation
     *
     * @return self
     */
    public function setSkipEmbeddingGeneration($skip_embedding_generation)
    {

        if (is_null($skip_embedding_generation)) {
            throw new \InvalidArgumentException('non-nullable skip_embedding_generation cannot be null');
        }

        $this->container['skip_embedding_generation'] = $skip_embedding_generation;

        return $this;
    }

    /**
     * Gets source_created_at
     *
     * @return \DateTime
     */
    public function getSourceCreatedAt()
    {
        return $this->container['source_created_at'];
    }

    /**
     * Sets source_created_at
     *
     * @param \DateTime $source_created_at source_created_at
     *
     * @return self
     */
    public function setSourceCreatedAt($source_created_at)
    {

        if (is_null($source_created_at)) {
            array_push($this->openAPINullablesSetToNull, 'source_created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source_created_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['source_created_at'] = $source_created_at;

        return $this;
    }

    /**
     * Gets generate_sparse_vectors
     *
     * @return bool
     */
    public function getGenerateSparseVectors()
    {
        return $this->container['generate_sparse_vectors'];
    }

    /**
     * Sets generate_sparse_vectors
     *
     * @param bool $generate_sparse_vectors generate_sparse_vectors
     *
     * @return self
     */
    public function setGenerateSparseVectors($generate_sparse_vectors)
    {

        if (is_null($generate_sparse_vectors)) {
            array_push($this->openAPINullablesSetToNull, 'generate_sparse_vectors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('generate_sparse_vectors', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['generate_sparse_vectors'] = $generate_sparse_vectors;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {

        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }

        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {

        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }

        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


