<?php
/**
 * IntegrationsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Carbon
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * Carbon
 *
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Carbon\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\BodySummarizer;
use GuzzleHttp\Middleware;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Utils;
use Carbon\ApiException;
use Carbon\Configuration;
use Carbon\HeaderSelector;
use Carbon\ObjectSerializer;

class IntegrationsApi extends \Carbon\CustomApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'connectFreshdesk' => [
            'application/json',
        ],
        'connectGitbook' => [
            'application/json',
        ],
        'createAwsIamUser' => [
            'application/json',
        ],
        'getOauthUrl' => [
            'application/json',
        ],
        'listConfluencePages' => [
            'application/json',
        ],
        'listDataSourceItems' => [
            'application/json',
        ],
        'listFolders' => [
            'application/json',
        ],
        'listGitbookSpaces' => [
            'application/json',
        ],
        'listLabels' => [
            'application/json',
        ],
        'listOutlookCategories' => [
            'application/json',
        ],
        'syncConfluence' => [
            'application/json',
        ],
        'syncDataSourceItems' => [
            'application/json',
        ],
        'syncFiles' => [
            'application/json',
        ],
        'syncGitbook' => [
            'application/json',
        ],
        'syncGmail' => [
            'application/json',
        ],
        'syncOutlook' => [
            'application/json',
        ],
        'syncRssFeed' => [
            'application/json',
        ],
        'syncS3Files' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config = null,
        ClientInterface $client = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $clientOptions = [];
        if (!$config->getVerifySsl()) $clientOptions["verify"] = false;

        // Do not truncate error messages
        // https://github.com/guzzle/guzzle/issues/2185#issuecomment-800293420
        $stack = new HandlerStack(Utils::chooseHandler());
        $stack->push(Middleware::httpErrors(new BodySummarizer(10000)), 'http_errors');
        $stack->push(Middleware::redirect(), 'allow_redirects');
        $stack->push(Middleware::cookies(), 'cookies');
        $stack->push(Middleware::prepareBody(), 'prepare_body');
        $clientOptions["handler"] = $stack;

        $this->client = $client ?: new Client($clientOptions);
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * For initializing request body parameter
     */
    private function setRequestBodyProperty(&$body, $property, $value) {
        if ($body === null) $body = [];
        // user did not pass in a value for this parameter
        if ($value === SENTINEL_VALUE) return;
        $body[$property] = $value;
    }

    /**
     * Operation connectFreshdesk
     *
     * Freshdesk Connect
     *
     * @param  \Carbon\Model\FreshDeskConnectRequest $fresh_desk_connect_request fresh_desk_connect_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['connectFreshdesk'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError
     */
    public function connectFreshdesk(

        $domain,
        $api_key,
        $tags = SENTINEL_VALUE,
        $chunk_size = 1500,
        $chunk_overlap = 20,
        $skip_embedding_generation = false,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        string $contentType = self::contentTypes['connectFreshdesk'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "domain", $domain);
        $this->setRequestBodyProperty($_body, "api_key", $api_key);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $fresh_desk_connect_request = $_body;

        list($response) = $this->connectFreshdeskWithHttpInfo($fresh_desk_connect_request, $contentType);
        return $response;
    }

    /**
     * Operation connectFreshdeskWithHttpInfo
     *
     * Freshdesk Connect
     *
     * @param  \Carbon\Model\FreshDeskConnectRequest $fresh_desk_connect_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['connectFreshdesk'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function connectFreshdeskWithHttpInfo($fresh_desk_connect_request, string $contentType = self::contentTypes['connectFreshdesk'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->connectFreshdeskRequest($fresh_desk_connect_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->connectFreshdeskWithHttpInfo(
                        $fresh_desk_connect_request,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\GenericSuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\GenericSuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\GenericSuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\GenericSuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\GenericSuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation connectFreshdeskAsync
     *
     * Freshdesk Connect
     *
     * @param  \Carbon\Model\FreshDeskConnectRequest $fresh_desk_connect_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['connectFreshdesk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function connectFreshdeskAsync(

        $domain,
        $api_key,
        $tags = SENTINEL_VALUE,
        $chunk_size = 1500,
        $chunk_overlap = 20,
        $skip_embedding_generation = false,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        string $contentType = self::contentTypes['connectFreshdesk'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "domain", $domain);
        $this->setRequestBodyProperty($_body, "api_key", $api_key);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $fresh_desk_connect_request = $_body;

        return $this->connectFreshdeskAsyncWithHttpInfo($fresh_desk_connect_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation connectFreshdeskAsyncWithHttpInfo
     *
     * Freshdesk Connect
     *
     * @param  \Carbon\Model\FreshDeskConnectRequest $fresh_desk_connect_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['connectFreshdesk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function connectFreshdeskAsyncWithHttpInfo($fresh_desk_connect_request, string $contentType = self::contentTypes['connectFreshdesk'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\GenericSuccessResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->connectFreshdeskRequest($fresh_desk_connect_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'connectFreshdesk'
     *
     * @param  \Carbon\Model\FreshDeskConnectRequest $fresh_desk_connect_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['connectFreshdesk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function connectFreshdeskRequest($fresh_desk_connect_request, string $contentType = self::contentTypes['connectFreshdesk'][0])
    {

        if ($fresh_desk_connect_request !== SENTINEL_VALUE) {
            if (!($fresh_desk_connect_request instanceof \Carbon\Model\FreshDeskConnectRequest)) {
                if (!is_array($fresh_desk_connect_request))
                    throw new \InvalidArgumentException('"fresh_desk_connect_request" must be associative array or an instance of \Carbon\Model\FreshDeskConnectRequest IntegrationsApi.connectFreshdesk.');
                else
                    $fresh_desk_connect_request = new \Carbon\Model\FreshDeskConnectRequest($fresh_desk_connect_request);
            }
        }
        // verify the required parameter 'fresh_desk_connect_request' is set
        if ($fresh_desk_connect_request === SENTINEL_VALUE || (is_array($fresh_desk_connect_request) && count($fresh_desk_connect_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter fresh_desk_connect_request when calling connectFreshdesk'
            );
        }


        $resourcePath = '/integrations/freshdesk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($fresh_desk_connect_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($fresh_desk_connect_request));
            } else {
                $httpBody = $fresh_desk_connect_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation connectGitbook
     *
     * Gitbook Connect
     *
     * @param  \Carbon\Model\GitbookConnectRequest $gitbook_connect_request gitbook_connect_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['connectGitbook'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError
     */
    public function connectGitbook(

        $organization,
        $access_token,
        string $contentType = self::contentTypes['connectGitbook'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "organization", $organization);
        $this->setRequestBodyProperty($_body, "access_token", $access_token);
        $gitbook_connect_request = $_body;

        list($response) = $this->connectGitbookWithHttpInfo($gitbook_connect_request, $contentType);
        return $response;
    }

    /**
     * Operation connectGitbookWithHttpInfo
     *
     * Gitbook Connect
     *
     * @param  \Carbon\Model\GitbookConnectRequest $gitbook_connect_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['connectGitbook'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function connectGitbookWithHttpInfo($gitbook_connect_request, string $contentType = self::contentTypes['connectGitbook'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->connectGitbookRequest($gitbook_connect_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->connectGitbookWithHttpInfo(
                        $gitbook_connect_request,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\GenericSuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\GenericSuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\GenericSuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\GenericSuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\GenericSuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation connectGitbookAsync
     *
     * Gitbook Connect
     *
     * @param  \Carbon\Model\GitbookConnectRequest $gitbook_connect_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['connectGitbook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function connectGitbookAsync(

        $organization,
        $access_token,
        string $contentType = self::contentTypes['connectGitbook'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "organization", $organization);
        $this->setRequestBodyProperty($_body, "access_token", $access_token);
        $gitbook_connect_request = $_body;

        return $this->connectGitbookAsyncWithHttpInfo($gitbook_connect_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation connectGitbookAsyncWithHttpInfo
     *
     * Gitbook Connect
     *
     * @param  \Carbon\Model\GitbookConnectRequest $gitbook_connect_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['connectGitbook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function connectGitbookAsyncWithHttpInfo($gitbook_connect_request, string $contentType = self::contentTypes['connectGitbook'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\GenericSuccessResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->connectGitbookRequest($gitbook_connect_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'connectGitbook'
     *
     * @param  \Carbon\Model\GitbookConnectRequest $gitbook_connect_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['connectGitbook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function connectGitbookRequest($gitbook_connect_request, string $contentType = self::contentTypes['connectGitbook'][0])
    {

        if ($gitbook_connect_request !== SENTINEL_VALUE) {
            if (!($gitbook_connect_request instanceof \Carbon\Model\GitbookConnectRequest)) {
                if (!is_array($gitbook_connect_request))
                    throw new \InvalidArgumentException('"gitbook_connect_request" must be associative array or an instance of \Carbon\Model\GitbookConnectRequest IntegrationsApi.connectGitbook.');
                else
                    $gitbook_connect_request = new \Carbon\Model\GitbookConnectRequest($gitbook_connect_request);
            }
        }
        // verify the required parameter 'gitbook_connect_request' is set
        if ($gitbook_connect_request === SENTINEL_VALUE || (is_array($gitbook_connect_request) && count($gitbook_connect_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter gitbook_connect_request when calling connectGitbook'
            );
        }


        $resourcePath = '/integrations/gitbook';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($gitbook_connect_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gitbook_connect_request));
            } else {
                $httpBody = $gitbook_connect_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation createAwsIamUser
     *
     * S3 Auth
     *
     * @param  \Carbon\Model\S3AuthRequest $s3_auth_request s3_auth_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAwsIamUser'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\OrganizationUserDataSourceAPI|\Carbon\Model\HTTPValidationError
     */
    public function createAwsIamUser(

        $access_key,
        $access_key_secret,
        string $contentType = self::contentTypes['createAwsIamUser'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "access_key", $access_key);
        $this->setRequestBodyProperty($_body, "access_key_secret", $access_key_secret);
        $s3_auth_request = $_body;

        list($response) = $this->createAwsIamUserWithHttpInfo($s3_auth_request, $contentType);
        return $response;
    }

    /**
     * Operation createAwsIamUserWithHttpInfo
     *
     * S3 Auth
     *
     * @param  \Carbon\Model\S3AuthRequest $s3_auth_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAwsIamUser'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\OrganizationUserDataSourceAPI|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAwsIamUserWithHttpInfo($s3_auth_request, string $contentType = self::contentTypes['createAwsIamUser'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->createAwsIamUserRequest($s3_auth_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->createAwsIamUserWithHttpInfo(
                        $s3_auth_request,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\OrganizationUserDataSourceAPI' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\OrganizationUserDataSourceAPI' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\OrganizationUserDataSourceAPI', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\OrganizationUserDataSourceAPI';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\OrganizationUserDataSourceAPI',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAwsIamUserAsync
     *
     * S3 Auth
     *
     * @param  \Carbon\Model\S3AuthRequest $s3_auth_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAwsIamUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAwsIamUserAsync(

        $access_key,
        $access_key_secret,
        string $contentType = self::contentTypes['createAwsIamUser'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "access_key", $access_key);
        $this->setRequestBodyProperty($_body, "access_key_secret", $access_key_secret);
        $s3_auth_request = $_body;

        return $this->createAwsIamUserAsyncWithHttpInfo($s3_auth_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAwsIamUserAsyncWithHttpInfo
     *
     * S3 Auth
     *
     * @param  \Carbon\Model\S3AuthRequest $s3_auth_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAwsIamUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAwsIamUserAsyncWithHttpInfo($s3_auth_request, string $contentType = self::contentTypes['createAwsIamUser'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\OrganizationUserDataSourceAPI';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->createAwsIamUserRequest($s3_auth_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAwsIamUser'
     *
     * @param  \Carbon\Model\S3AuthRequest $s3_auth_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAwsIamUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAwsIamUserRequest($s3_auth_request, string $contentType = self::contentTypes['createAwsIamUser'][0])
    {

        if ($s3_auth_request !== SENTINEL_VALUE) {
            if (!($s3_auth_request instanceof \Carbon\Model\S3AuthRequest)) {
                if (!is_array($s3_auth_request))
                    throw new \InvalidArgumentException('"s3_auth_request" must be associative array or an instance of \Carbon\Model\S3AuthRequest IntegrationsApi.createAwsIamUser.');
                else
                    $s3_auth_request = new \Carbon\Model\S3AuthRequest($s3_auth_request);
            }
        }
        // verify the required parameter 's3_auth_request' is set
        if ($s3_auth_request === SENTINEL_VALUE || (is_array($s3_auth_request) && count($s3_auth_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter s3_auth_request when calling createAwsIamUser'
            );
        }


        $resourcePath = '/integrations/s3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($s3_auth_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($s3_auth_request));
            } else {
                $httpBody = $s3_auth_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation getOauthUrl
     *
     * Get Oauth Url
     *
     * @param  \Carbon\Model\OAuthURLRequest $o_auth_url_request o_auth_url_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOauthUrl'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Carbon\Model\HTTPValidationError
     */
    public function getOauthUrl(

        $service,
        $tags = SENTINEL_VALUE,
        $scope = SENTINEL_VALUE,
        $chunk_size = 1500,
        $chunk_overlap = 20,
        $skip_embedding_generation = false,
        $embedding_model = SENTINEL_VALUE,
        $zendesk_subdomain = SENTINEL_VALUE,
        $microsoft_tenant = SENTINEL_VALUE,
        $sharepoint_site_name = SENTINEL_VALUE,
        $confluence_subdomain = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        $max_items_per_chunk = SENTINEL_VALUE,
        $salesforce_domain = SENTINEL_VALUE,
        $sync_files_on_connection = false,
        $set_page_as_boundary = false,
        string $contentType = self::contentTypes['getOauthUrl'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "scope", $scope);
        $this->setRequestBodyProperty($_body, "service", $service);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "zendesk_subdomain", $zendesk_subdomain);
        $this->setRequestBodyProperty($_body, "microsoft_tenant", $microsoft_tenant);
        $this->setRequestBodyProperty($_body, "sharepoint_site_name", $sharepoint_site_name);
        $this->setRequestBodyProperty($_body, "confluence_subdomain", $confluence_subdomain);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $this->setRequestBodyProperty($_body, "max_items_per_chunk", $max_items_per_chunk);
        $this->setRequestBodyProperty($_body, "salesforce_domain", $salesforce_domain);
        $this->setRequestBodyProperty($_body, "sync_files_on_connection", $sync_files_on_connection);
        $this->setRequestBodyProperty($_body, "set_page_as_boundary", $set_page_as_boundary);
        $o_auth_url_request = $_body;

        list($response) = $this->getOauthUrlWithHttpInfo($o_auth_url_request, $contentType);
        return $response;
    }

    /**
     * Operation getOauthUrlWithHttpInfo
     *
     * Get Oauth Url
     *
     * @param  \Carbon\Model\OAuthURLRequest $o_auth_url_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOauthUrl'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOauthUrlWithHttpInfo($o_auth_url_request, string $contentType = self::contentTypes['getOauthUrl'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getOauthUrlRequest($o_auth_url_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->getOauthUrlWithHttpInfo(
                        $o_auth_url_request,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOauthUrlAsync
     *
     * Get Oauth Url
     *
     * @param  \Carbon\Model\OAuthURLRequest $o_auth_url_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOauthUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOauthUrlAsync(

        $service,
        $tags = SENTINEL_VALUE,
        $scope = SENTINEL_VALUE,
        $chunk_size = 1500,
        $chunk_overlap = 20,
        $skip_embedding_generation = false,
        $embedding_model = SENTINEL_VALUE,
        $zendesk_subdomain = SENTINEL_VALUE,
        $microsoft_tenant = SENTINEL_VALUE,
        $sharepoint_site_name = SENTINEL_VALUE,
        $confluence_subdomain = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        $max_items_per_chunk = SENTINEL_VALUE,
        $salesforce_domain = SENTINEL_VALUE,
        $sync_files_on_connection = false,
        $set_page_as_boundary = false,
        string $contentType = self::contentTypes['getOauthUrl'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "scope", $scope);
        $this->setRequestBodyProperty($_body, "service", $service);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "zendesk_subdomain", $zendesk_subdomain);
        $this->setRequestBodyProperty($_body, "microsoft_tenant", $microsoft_tenant);
        $this->setRequestBodyProperty($_body, "sharepoint_site_name", $sharepoint_site_name);
        $this->setRequestBodyProperty($_body, "confluence_subdomain", $confluence_subdomain);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $this->setRequestBodyProperty($_body, "max_items_per_chunk", $max_items_per_chunk);
        $this->setRequestBodyProperty($_body, "salesforce_domain", $salesforce_domain);
        $this->setRequestBodyProperty($_body, "sync_files_on_connection", $sync_files_on_connection);
        $this->setRequestBodyProperty($_body, "set_page_as_boundary", $set_page_as_boundary);
        $o_auth_url_request = $_body;

        return $this->getOauthUrlAsyncWithHttpInfo($o_auth_url_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOauthUrlAsyncWithHttpInfo
     *
     * Get Oauth Url
     *
     * @param  \Carbon\Model\OAuthURLRequest $o_auth_url_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOauthUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOauthUrlAsyncWithHttpInfo($o_auth_url_request, string $contentType = self::contentTypes['getOauthUrl'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = 'object';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getOauthUrlRequest($o_auth_url_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOauthUrl'
     *
     * @param  \Carbon\Model\OAuthURLRequest $o_auth_url_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOauthUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOauthUrlRequest($o_auth_url_request, string $contentType = self::contentTypes['getOauthUrl'][0])
    {

        if ($o_auth_url_request !== SENTINEL_VALUE) {
            if (!($o_auth_url_request instanceof \Carbon\Model\OAuthURLRequest)) {
                if (!is_array($o_auth_url_request))
                    throw new \InvalidArgumentException('"o_auth_url_request" must be associative array or an instance of \Carbon\Model\OAuthURLRequest IntegrationsApi.getOauthUrl.');
                else
                    $o_auth_url_request = new \Carbon\Model\OAuthURLRequest($o_auth_url_request);
            }
        }
        // verify the required parameter 'o_auth_url_request' is set
        if ($o_auth_url_request === SENTINEL_VALUE || (is_array($o_auth_url_request) && count($o_auth_url_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter o_auth_url_request when calling getOauthUrl'
            );
        }


        $resourcePath = '/integrations/oauth_url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($o_auth_url_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($o_auth_url_request));
            } else {
                $httpBody = $o_auth_url_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation listConfluencePages
     *
     * Confluence List
     *
     * @param  \Carbon\Model\ListRequest $list_request list_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConfluencePages'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\ListResponse|\Carbon\Model\HTTPValidationError
     */
    public function listConfluencePages(

        $data_source_id,
        $parent_id = SENTINEL_VALUE,
        string $contentType = self::contentTypes['listConfluencePages'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "parent_id", $parent_id);
        $list_request = $_body;

        list($response) = $this->listConfluencePagesWithHttpInfo($list_request, $contentType);
        return $response;
    }

    /**
     * Operation listConfluencePagesWithHttpInfo
     *
     * Confluence List
     *
     * @param  \Carbon\Model\ListRequest $list_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConfluencePages'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\ListResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listConfluencePagesWithHttpInfo($list_request, string $contentType = self::contentTypes['listConfluencePages'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->listConfluencePagesRequest($list_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->listConfluencePagesWithHttpInfo(
                        $list_request,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\ListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\ListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\ListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\ListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\ListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listConfluencePagesAsync
     *
     * Confluence List
     *
     * @param  \Carbon\Model\ListRequest $list_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConfluencePages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listConfluencePagesAsync(

        $data_source_id,
        $parent_id = SENTINEL_VALUE,
        string $contentType = self::contentTypes['listConfluencePages'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "parent_id", $parent_id);
        $list_request = $_body;

        return $this->listConfluencePagesAsyncWithHttpInfo($list_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listConfluencePagesAsyncWithHttpInfo
     *
     * Confluence List
     *
     * @param  \Carbon\Model\ListRequest $list_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConfluencePages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listConfluencePagesAsyncWithHttpInfo($list_request, string $contentType = self::contentTypes['listConfluencePages'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\ListResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->listConfluencePagesRequest($list_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listConfluencePages'
     *
     * @param  \Carbon\Model\ListRequest $list_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConfluencePages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listConfluencePagesRequest($list_request, string $contentType = self::contentTypes['listConfluencePages'][0])
    {

        if ($list_request !== SENTINEL_VALUE) {
            if (!($list_request instanceof \Carbon\Model\ListRequest)) {
                if (!is_array($list_request))
                    throw new \InvalidArgumentException('"list_request" must be associative array or an instance of \Carbon\Model\ListRequest IntegrationsApi.listConfluencePages.');
                else
                    $list_request = new \Carbon\Model\ListRequest($list_request);
            }
        }
        // verify the required parameter 'list_request' is set
        if ($list_request === SENTINEL_VALUE || (is_array($list_request) && count($list_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter list_request when calling listConfluencePages'
            );
        }


        $resourcePath = '/integrations/confluence/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($list_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($list_request));
            } else {
                $httpBody = $list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation listDataSourceItems
     *
     * List Data Source Items
     *
     * @param  \Carbon\Model\ListDataSourceItemsRequest $list_data_source_items_request list_data_source_items_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDataSourceItems'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\ListDataSourceItemsResponse|\Carbon\Model\HTTPValidationError
     */
    public function listDataSourceItems(

        $data_source_id,
        $parent_id = SENTINEL_VALUE,
        $pagination = SENTINEL_VALUE,
        string $contentType = self::contentTypes['listDataSourceItems'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "parent_id", $parent_id);
        $this->setRequestBodyProperty($_body, "pagination", $pagination);
        $list_data_source_items_request = $_body;

        list($response) = $this->listDataSourceItemsWithHttpInfo($list_data_source_items_request, $contentType);
        return $response;
    }

    /**
     * Operation listDataSourceItemsWithHttpInfo
     *
     * List Data Source Items
     *
     * @param  \Carbon\Model\ListDataSourceItemsRequest $list_data_source_items_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDataSourceItems'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\ListDataSourceItemsResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDataSourceItemsWithHttpInfo($list_data_source_items_request, string $contentType = self::contentTypes['listDataSourceItems'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->listDataSourceItemsRequest($list_data_source_items_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->listDataSourceItemsWithHttpInfo(
                        $list_data_source_items_request,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\ListDataSourceItemsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\ListDataSourceItemsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\ListDataSourceItemsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\ListDataSourceItemsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\ListDataSourceItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDataSourceItemsAsync
     *
     * List Data Source Items
     *
     * @param  \Carbon\Model\ListDataSourceItemsRequest $list_data_source_items_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDataSourceItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDataSourceItemsAsync(

        $data_source_id,
        $parent_id = SENTINEL_VALUE,
        $pagination = SENTINEL_VALUE,
        string $contentType = self::contentTypes['listDataSourceItems'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "parent_id", $parent_id);
        $this->setRequestBodyProperty($_body, "pagination", $pagination);
        $list_data_source_items_request = $_body;

        return $this->listDataSourceItemsAsyncWithHttpInfo($list_data_source_items_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDataSourceItemsAsyncWithHttpInfo
     *
     * List Data Source Items
     *
     * @param  \Carbon\Model\ListDataSourceItemsRequest $list_data_source_items_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDataSourceItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDataSourceItemsAsyncWithHttpInfo($list_data_source_items_request, string $contentType = self::contentTypes['listDataSourceItems'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\ListDataSourceItemsResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->listDataSourceItemsRequest($list_data_source_items_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDataSourceItems'
     *
     * @param  \Carbon\Model\ListDataSourceItemsRequest $list_data_source_items_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDataSourceItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listDataSourceItemsRequest($list_data_source_items_request, string $contentType = self::contentTypes['listDataSourceItems'][0])
    {

        if ($list_data_source_items_request !== SENTINEL_VALUE) {
            if (!($list_data_source_items_request instanceof \Carbon\Model\ListDataSourceItemsRequest)) {
                if (!is_array($list_data_source_items_request))
                    throw new \InvalidArgumentException('"list_data_source_items_request" must be associative array or an instance of \Carbon\Model\ListDataSourceItemsRequest IntegrationsApi.listDataSourceItems.');
                else
                    $list_data_source_items_request = new \Carbon\Model\ListDataSourceItemsRequest($list_data_source_items_request);
            }
        }
        // verify the required parameter 'list_data_source_items_request' is set
        if ($list_data_source_items_request === SENTINEL_VALUE || (is_array($list_data_source_items_request) && count($list_data_source_items_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter list_data_source_items_request when calling listDataSourceItems'
            );
        }


        $resourcePath = '/integrations/items/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($list_data_source_items_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($list_data_source_items_request));
            } else {
                $httpBody = $list_data_source_items_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation listFolders
     *
     * Outlook Folders
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listFolders'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Carbon\Model\HTTPValidationError
     */
    public function listFolders(


        string $contentType = self::contentTypes['listFolders'][0]
    )
    {

        list($response) = $this->listFoldersWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation listFoldersWithHttpInfo
     *
     * Outlook Folders
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listFolders'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listFoldersWithHttpInfo(string $contentType = self::contentTypes['listFolders'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->listFoldersRequest($contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->listFoldersWithHttpInfo(
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listFoldersAsync
     *
     * Outlook Folders
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listFolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listFoldersAsync(


        string $contentType = self::contentTypes['listFolders'][0]
    )
    {

        return $this->listFoldersAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listFoldersAsyncWithHttpInfo
     *
     * Outlook Folders
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listFolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listFoldersAsyncWithHttpInfo(string $contentType = self::contentTypes['listFolders'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = 'object';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->listFoldersRequest($contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listFolders'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listFolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listFoldersRequest(string $contentType = self::contentTypes['listFolders'][0])
    {



        $resourcePath = '/integrations/outlook/user_folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation listGitbookSpaces
     *
     * Gitbook Spaces
     *
     * @param  int $data_source_id data_source_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listGitbookSpaces'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Carbon\Model\HTTPValidationError
     */
    public function listGitbookSpaces(
        $data_source_id,

        string $contentType = self::contentTypes['listGitbookSpaces'][0]
    )
    {

        list($response) = $this->listGitbookSpacesWithHttpInfo($data_source_id, $contentType);
        return $response;
    }

    /**
     * Operation listGitbookSpacesWithHttpInfo
     *
     * Gitbook Spaces
     *
     * @param  int $data_source_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listGitbookSpaces'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listGitbookSpacesWithHttpInfo($data_source_id, string $contentType = self::contentTypes['listGitbookSpaces'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->listGitbookSpacesRequest($data_source_id, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->listGitbookSpacesWithHttpInfo(
                        $data_source_id,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listGitbookSpacesAsync
     *
     * Gitbook Spaces
     *
     * @param  int $data_source_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listGitbookSpaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listGitbookSpacesAsync(
        $data_source_id,

        string $contentType = self::contentTypes['listGitbookSpaces'][0]
    )
    {

        return $this->listGitbookSpacesAsyncWithHttpInfo($data_source_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listGitbookSpacesAsyncWithHttpInfo
     *
     * Gitbook Spaces
     *
     * @param  int $data_source_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listGitbookSpaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listGitbookSpacesAsyncWithHttpInfo($data_source_id, string $contentType = self::contentTypes['listGitbookSpaces'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = 'object';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->listGitbookSpacesRequest($data_source_id, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listGitbookSpaces'
     *
     * @param  int $data_source_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listGitbookSpaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listGitbookSpacesRequest($data_source_id, string $contentType = self::contentTypes['listGitbookSpaces'][0])
    {

        // verify the required parameter 'data_source_id' is set
        if ($data_source_id === SENTINEL_VALUE || (is_array($data_source_id) && count($data_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter data_source_id when calling listGitbookSpaces'
            );
        }


        $resourcePath = '/integrations/gitbook/spaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($data_source_id !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $data_source_id,
                'data_source_id', // param base name
                'integer', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? []);
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation listLabels
     *
     * Gmail Labels
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLabels'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Carbon\Model\HTTPValidationError
     */
    public function listLabels(


        string $contentType = self::contentTypes['listLabels'][0]
    )
    {

        list($response) = $this->listLabelsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation listLabelsWithHttpInfo
     *
     * Gmail Labels
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLabels'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listLabelsWithHttpInfo(string $contentType = self::contentTypes['listLabels'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->listLabelsRequest($contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->listLabelsWithHttpInfo(
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listLabelsAsync
     *
     * Gmail Labels
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listLabelsAsync(


        string $contentType = self::contentTypes['listLabels'][0]
    )
    {

        return $this->listLabelsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listLabelsAsyncWithHttpInfo
     *
     * Gmail Labels
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listLabelsAsyncWithHttpInfo(string $contentType = self::contentTypes['listLabels'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = 'object';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->listLabelsRequest($contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listLabels'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listLabelsRequest(string $contentType = self::contentTypes['listLabels'][0])
    {



        $resourcePath = '/integrations/gmail/user_labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation listOutlookCategories
     *
     * Outlook Categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOutlookCategories'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Carbon\Model\HTTPValidationError
     */
    public function listOutlookCategories(


        string $contentType = self::contentTypes['listOutlookCategories'][0]
    )
    {

        list($response) = $this->listOutlookCategoriesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation listOutlookCategoriesWithHttpInfo
     *
     * Outlook Categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOutlookCategories'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listOutlookCategoriesWithHttpInfo(string $contentType = self::contentTypes['listOutlookCategories'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->listOutlookCategoriesRequest($contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->listOutlookCategoriesWithHttpInfo(
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listOutlookCategoriesAsync
     *
     * Outlook Categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOutlookCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listOutlookCategoriesAsync(


        string $contentType = self::contentTypes['listOutlookCategories'][0]
    )
    {

        return $this->listOutlookCategoriesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listOutlookCategoriesAsyncWithHttpInfo
     *
     * Outlook Categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOutlookCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listOutlookCategoriesAsyncWithHttpInfo(string $contentType = self::contentTypes['listOutlookCategories'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = 'object';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->listOutlookCategoriesRequest($contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listOutlookCategories'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOutlookCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listOutlookCategoriesRequest(string $contentType = self::contentTypes['listOutlookCategories'][0])
    {



        $resourcePath = '/integrations/outlook/user_categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation syncConfluence
     *
     * Confluence Sync
     *
     * @param  \Carbon\Model\SyncFilesRequest $sync_files_request sync_files_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncConfluence'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError
     */
    public function syncConfluence(

        $data_source_id,
        $ids,
        $tags = SENTINEL_VALUE,
        $chunk_size = 1500,
        $chunk_overlap = 20,
        $skip_embedding_generation = false,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        $max_items_per_chunk = SENTINEL_VALUE,
        $set_page_as_boundary = false,
        string $contentType = self::contentTypes['syncConfluence'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "ids", $ids);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $this->setRequestBodyProperty($_body, "max_items_per_chunk", $max_items_per_chunk);
        $this->setRequestBodyProperty($_body, "set_page_as_boundary", $set_page_as_boundary);
        $sync_files_request = $_body;

        list($response) = $this->syncConfluenceWithHttpInfo($sync_files_request, $contentType);
        return $response;
    }

    /**
     * Operation syncConfluenceWithHttpInfo
     *
     * Confluence Sync
     *
     * @param  \Carbon\Model\SyncFilesRequest $sync_files_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncConfluence'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncConfluenceWithHttpInfo($sync_files_request, string $contentType = self::contentTypes['syncConfluence'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->syncConfluenceRequest($sync_files_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->syncConfluenceWithHttpInfo(
                        $sync_files_request,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\GenericSuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\GenericSuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\GenericSuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\GenericSuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\GenericSuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation syncConfluenceAsync
     *
     * Confluence Sync
     *
     * @param  \Carbon\Model\SyncFilesRequest $sync_files_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncConfluence'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncConfluenceAsync(

        $data_source_id,
        $ids,
        $tags = SENTINEL_VALUE,
        $chunk_size = 1500,
        $chunk_overlap = 20,
        $skip_embedding_generation = false,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        $max_items_per_chunk = SENTINEL_VALUE,
        $set_page_as_boundary = false,
        string $contentType = self::contentTypes['syncConfluence'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "ids", $ids);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $this->setRequestBodyProperty($_body, "max_items_per_chunk", $max_items_per_chunk);
        $this->setRequestBodyProperty($_body, "set_page_as_boundary", $set_page_as_boundary);
        $sync_files_request = $_body;

        return $this->syncConfluenceAsyncWithHttpInfo($sync_files_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncConfluenceAsyncWithHttpInfo
     *
     * Confluence Sync
     *
     * @param  \Carbon\Model\SyncFilesRequest $sync_files_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncConfluence'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncConfluenceAsyncWithHttpInfo($sync_files_request, string $contentType = self::contentTypes['syncConfluence'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\GenericSuccessResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->syncConfluenceRequest($sync_files_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncConfluence'
     *
     * @param  \Carbon\Model\SyncFilesRequest $sync_files_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncConfluence'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncConfluenceRequest($sync_files_request, string $contentType = self::contentTypes['syncConfluence'][0])
    {

        if ($sync_files_request !== SENTINEL_VALUE) {
            if (!($sync_files_request instanceof \Carbon\Model\SyncFilesRequest)) {
                if (!is_array($sync_files_request))
                    throw new \InvalidArgumentException('"sync_files_request" must be associative array or an instance of \Carbon\Model\SyncFilesRequest IntegrationsApi.syncConfluence.');
                else
                    $sync_files_request = new \Carbon\Model\SyncFilesRequest($sync_files_request);
            }
        }
        // verify the required parameter 'sync_files_request' is set
        if ($sync_files_request === SENTINEL_VALUE || (is_array($sync_files_request) && count($sync_files_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter sync_files_request when calling syncConfluence'
            );
        }


        $resourcePath = '/integrations/confluence/sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sync_files_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($sync_files_request));
            } else {
                $httpBody = $sync_files_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation syncDataSourceItems
     *
     * Sync Data Source Items
     *
     * @param  \Carbon\Model\SyncDirectoryRequest $sync_directory_request sync_directory_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncDataSourceItems'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\OrganizationUserDataSourceAPI|\Carbon\Model\HTTPValidationError
     */
    public function syncDataSourceItems(

        $data_source_id,
        string $contentType = self::contentTypes['syncDataSourceItems'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $sync_directory_request = $_body;

        list($response) = $this->syncDataSourceItemsWithHttpInfo($sync_directory_request, $contentType);
        return $response;
    }

    /**
     * Operation syncDataSourceItemsWithHttpInfo
     *
     * Sync Data Source Items
     *
     * @param  \Carbon\Model\SyncDirectoryRequest $sync_directory_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncDataSourceItems'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\OrganizationUserDataSourceAPI|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncDataSourceItemsWithHttpInfo($sync_directory_request, string $contentType = self::contentTypes['syncDataSourceItems'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->syncDataSourceItemsRequest($sync_directory_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->syncDataSourceItemsWithHttpInfo(
                        $sync_directory_request,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\OrganizationUserDataSourceAPI' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\OrganizationUserDataSourceAPI' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\OrganizationUserDataSourceAPI', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\OrganizationUserDataSourceAPI';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\OrganizationUserDataSourceAPI',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation syncDataSourceItemsAsync
     *
     * Sync Data Source Items
     *
     * @param  \Carbon\Model\SyncDirectoryRequest $sync_directory_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncDataSourceItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncDataSourceItemsAsync(

        $data_source_id,
        string $contentType = self::contentTypes['syncDataSourceItems'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $sync_directory_request = $_body;

        return $this->syncDataSourceItemsAsyncWithHttpInfo($sync_directory_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncDataSourceItemsAsyncWithHttpInfo
     *
     * Sync Data Source Items
     *
     * @param  \Carbon\Model\SyncDirectoryRequest $sync_directory_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncDataSourceItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncDataSourceItemsAsyncWithHttpInfo($sync_directory_request, string $contentType = self::contentTypes['syncDataSourceItems'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\OrganizationUserDataSourceAPI';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->syncDataSourceItemsRequest($sync_directory_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncDataSourceItems'
     *
     * @param  \Carbon\Model\SyncDirectoryRequest $sync_directory_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncDataSourceItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncDataSourceItemsRequest($sync_directory_request, string $contentType = self::contentTypes['syncDataSourceItems'][0])
    {

        if ($sync_directory_request !== SENTINEL_VALUE) {
            if (!($sync_directory_request instanceof \Carbon\Model\SyncDirectoryRequest)) {
                if (!is_array($sync_directory_request))
                    throw new \InvalidArgumentException('"sync_directory_request" must be associative array or an instance of \Carbon\Model\SyncDirectoryRequest IntegrationsApi.syncDataSourceItems.');
                else
                    $sync_directory_request = new \Carbon\Model\SyncDirectoryRequest($sync_directory_request);
            }
        }
        // verify the required parameter 'sync_directory_request' is set
        if ($sync_directory_request === SENTINEL_VALUE || (is_array($sync_directory_request) && count($sync_directory_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter sync_directory_request when calling syncDataSourceItems'
            );
        }


        $resourcePath = '/integrations/items/sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sync_directory_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($sync_directory_request));
            } else {
                $httpBody = $sync_directory_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation syncFiles
     *
     * Sync Files
     *
     * @param  \Carbon\Model\SyncFilesRequest $sync_files_request sync_files_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncFiles'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError
     */
    public function syncFiles(

        $data_source_id,
        $ids,
        $tags = SENTINEL_VALUE,
        $chunk_size = 1500,
        $chunk_overlap = 20,
        $skip_embedding_generation = false,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        $max_items_per_chunk = SENTINEL_VALUE,
        $set_page_as_boundary = false,
        string $contentType = self::contentTypes['syncFiles'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "ids", $ids);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $this->setRequestBodyProperty($_body, "max_items_per_chunk", $max_items_per_chunk);
        $this->setRequestBodyProperty($_body, "set_page_as_boundary", $set_page_as_boundary);
        $sync_files_request = $_body;

        list($response) = $this->syncFilesWithHttpInfo($sync_files_request, $contentType);
        return $response;
    }

    /**
     * Operation syncFilesWithHttpInfo
     *
     * Sync Files
     *
     * @param  \Carbon\Model\SyncFilesRequest $sync_files_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncFiles'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncFilesWithHttpInfo($sync_files_request, string $contentType = self::contentTypes['syncFiles'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->syncFilesRequest($sync_files_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->syncFilesWithHttpInfo(
                        $sync_files_request,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\GenericSuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\GenericSuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\GenericSuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\GenericSuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\GenericSuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation syncFilesAsync
     *
     * Sync Files
     *
     * @param  \Carbon\Model\SyncFilesRequest $sync_files_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncFilesAsync(

        $data_source_id,
        $ids,
        $tags = SENTINEL_VALUE,
        $chunk_size = 1500,
        $chunk_overlap = 20,
        $skip_embedding_generation = false,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        $max_items_per_chunk = SENTINEL_VALUE,
        $set_page_as_boundary = false,
        string $contentType = self::contentTypes['syncFiles'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "ids", $ids);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $this->setRequestBodyProperty($_body, "max_items_per_chunk", $max_items_per_chunk);
        $this->setRequestBodyProperty($_body, "set_page_as_boundary", $set_page_as_boundary);
        $sync_files_request = $_body;

        return $this->syncFilesAsyncWithHttpInfo($sync_files_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncFilesAsyncWithHttpInfo
     *
     * Sync Files
     *
     * @param  \Carbon\Model\SyncFilesRequest $sync_files_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncFilesAsyncWithHttpInfo($sync_files_request, string $contentType = self::contentTypes['syncFiles'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\GenericSuccessResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->syncFilesRequest($sync_files_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncFiles'
     *
     * @param  \Carbon\Model\SyncFilesRequest $sync_files_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncFilesRequest($sync_files_request, string $contentType = self::contentTypes['syncFiles'][0])
    {

        if ($sync_files_request !== SENTINEL_VALUE) {
            if (!($sync_files_request instanceof \Carbon\Model\SyncFilesRequest)) {
                if (!is_array($sync_files_request))
                    throw new \InvalidArgumentException('"sync_files_request" must be associative array or an instance of \Carbon\Model\SyncFilesRequest IntegrationsApi.syncFiles.');
                else
                    $sync_files_request = new \Carbon\Model\SyncFilesRequest($sync_files_request);
            }
        }
        // verify the required parameter 'sync_files_request' is set
        if ($sync_files_request === SENTINEL_VALUE || (is_array($sync_files_request) && count($sync_files_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter sync_files_request when calling syncFiles'
            );
        }


        $resourcePath = '/integrations/files/sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sync_files_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($sync_files_request));
            } else {
                $httpBody = $sync_files_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation syncGitbook
     *
     * Gitbook Sync
     *
     * @param  \Carbon\Model\GitbookSyncRequest $gitbook_sync_request gitbook_sync_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncGitbook'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Carbon\Model\HTTPValidationError
     */
    public function syncGitbook(

        $space_ids,
        $data_source_id,
        $tags = SENTINEL_VALUE,
        $chunk_size = 1500,
        $chunk_overlap = 20,
        $skip_embedding_generation = false,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        string $contentType = self::contentTypes['syncGitbook'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "space_ids", $space_ids);
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $gitbook_sync_request = $_body;

        list($response) = $this->syncGitbookWithHttpInfo($gitbook_sync_request, $contentType);
        return $response;
    }

    /**
     * Operation syncGitbookWithHttpInfo
     *
     * Gitbook Sync
     *
     * @param  \Carbon\Model\GitbookSyncRequest $gitbook_sync_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncGitbook'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncGitbookWithHttpInfo($gitbook_sync_request, string $contentType = self::contentTypes['syncGitbook'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->syncGitbookRequest($gitbook_sync_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->syncGitbookWithHttpInfo(
                        $gitbook_sync_request,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation syncGitbookAsync
     *
     * Gitbook Sync
     *
     * @param  \Carbon\Model\GitbookSyncRequest $gitbook_sync_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncGitbook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncGitbookAsync(

        $space_ids,
        $data_source_id,
        $tags = SENTINEL_VALUE,
        $chunk_size = 1500,
        $chunk_overlap = 20,
        $skip_embedding_generation = false,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        string $contentType = self::contentTypes['syncGitbook'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "space_ids", $space_ids);
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $gitbook_sync_request = $_body;

        return $this->syncGitbookAsyncWithHttpInfo($gitbook_sync_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncGitbookAsyncWithHttpInfo
     *
     * Gitbook Sync
     *
     * @param  \Carbon\Model\GitbookSyncRequest $gitbook_sync_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncGitbook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncGitbookAsyncWithHttpInfo($gitbook_sync_request, string $contentType = self::contentTypes['syncGitbook'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = 'object';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->syncGitbookRequest($gitbook_sync_request, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncGitbook'
     *
     * @param  \Carbon\Model\GitbookSyncRequest $gitbook_sync_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncGitbook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncGitbookRequest($gitbook_sync_request, string $contentType = self::contentTypes['syncGitbook'][0])
    {

        if ($gitbook_sync_request !== SENTINEL_VALUE) {
            if (!($gitbook_sync_request instanceof \Carbon\Model\GitbookSyncRequest)) {
                if (!is_array($gitbook_sync_request))
                    throw new \InvalidArgumentException('"gitbook_sync_request" must be associative array or an instance of \Carbon\Model\GitbookSyncRequest IntegrationsApi.syncGitbook.');
                else
                    $gitbook_sync_request = new \Carbon\Model\GitbookSyncRequest($gitbook_sync_request);
            }
        }
        // verify the required parameter 'gitbook_sync_request' is set
        if ($gitbook_sync_request === SENTINEL_VALUE || (is_array($gitbook_sync_request) && count($gitbook_sync_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter gitbook_sync_request when calling syncGitbook'
            );
        }


        $resourcePath = '/integrations/gitbook/sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($gitbook_sync_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gitbook_sync_request));
            } else {
                $httpBody = $gitbook_sync_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation syncGmail
     *
     * Gmail Sync
     *
     * @param  \Carbon\Model\GmailSyncInput $gmail_sync_input gmail_sync_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncGmail'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError
     */
    public function syncGmail(

        $filters,
        $tags = SENTINEL_VALUE,
        $chunk_size = 1500,
        $chunk_overlap = 20,
        $skip_embedding_generation = false,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        string $contentType = self::contentTypes['syncGmail'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "filters", $filters);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $gmail_sync_input = $_body;

        list($response) = $this->syncGmailWithHttpInfo($gmail_sync_input, $contentType);
        return $response;
    }

    /**
     * Operation syncGmailWithHttpInfo
     *
     * Gmail Sync
     *
     * @param  \Carbon\Model\GmailSyncInput $gmail_sync_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncGmail'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncGmailWithHttpInfo($gmail_sync_input, string $contentType = self::contentTypes['syncGmail'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->syncGmailRequest($gmail_sync_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->syncGmailWithHttpInfo(
                        $gmail_sync_input,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\GenericSuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\GenericSuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\GenericSuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\GenericSuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\GenericSuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation syncGmailAsync
     *
     * Gmail Sync
     *
     * @param  \Carbon\Model\GmailSyncInput $gmail_sync_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncGmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncGmailAsync(

        $filters,
        $tags = SENTINEL_VALUE,
        $chunk_size = 1500,
        $chunk_overlap = 20,
        $skip_embedding_generation = false,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        string $contentType = self::contentTypes['syncGmail'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "filters", $filters);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $gmail_sync_input = $_body;

        return $this->syncGmailAsyncWithHttpInfo($gmail_sync_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncGmailAsyncWithHttpInfo
     *
     * Gmail Sync
     *
     * @param  \Carbon\Model\GmailSyncInput $gmail_sync_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncGmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncGmailAsyncWithHttpInfo($gmail_sync_input, string $contentType = self::contentTypes['syncGmail'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\GenericSuccessResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->syncGmailRequest($gmail_sync_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncGmail'
     *
     * @param  \Carbon\Model\GmailSyncInput $gmail_sync_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncGmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncGmailRequest($gmail_sync_input, string $contentType = self::contentTypes['syncGmail'][0])
    {

        if ($gmail_sync_input !== SENTINEL_VALUE) {
            if (!($gmail_sync_input instanceof \Carbon\Model\GmailSyncInput)) {
                if (!is_array($gmail_sync_input))
                    throw new \InvalidArgumentException('"gmail_sync_input" must be associative array or an instance of \Carbon\Model\GmailSyncInput IntegrationsApi.syncGmail.');
                else
                    $gmail_sync_input = new \Carbon\Model\GmailSyncInput($gmail_sync_input);
            }
        }
        // verify the required parameter 'gmail_sync_input' is set
        if ($gmail_sync_input === SENTINEL_VALUE || (is_array($gmail_sync_input) && count($gmail_sync_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter gmail_sync_input when calling syncGmail'
            );
        }


        $resourcePath = '/integrations/gmail/sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($gmail_sync_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($gmail_sync_input));
            } else {
                $httpBody = $gmail_sync_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation syncOutlook
     *
     * Outlook Sync
     *
     * @param  \Carbon\Model\OutlookSyncInput $outlook_sync_input outlook_sync_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncOutlook'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError
     */
    public function syncOutlook(

        $filters,
        $tags = SENTINEL_VALUE,
        $folder = 'Inbox',
        $chunk_size = 1500,
        $chunk_overlap = 20,
        $skip_embedding_generation = false,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        string $contentType = self::contentTypes['syncOutlook'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "folder", $folder);
        $this->setRequestBodyProperty($_body, "filters", $filters);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $outlook_sync_input = $_body;

        list($response) = $this->syncOutlookWithHttpInfo($outlook_sync_input, $contentType);
        return $response;
    }

    /**
     * Operation syncOutlookWithHttpInfo
     *
     * Outlook Sync
     *
     * @param  \Carbon\Model\OutlookSyncInput $outlook_sync_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncOutlook'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncOutlookWithHttpInfo($outlook_sync_input, string $contentType = self::contentTypes['syncOutlook'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->syncOutlookRequest($outlook_sync_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->syncOutlookWithHttpInfo(
                        $outlook_sync_input,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\GenericSuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\GenericSuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\GenericSuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\GenericSuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\GenericSuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation syncOutlookAsync
     *
     * Outlook Sync
     *
     * @param  \Carbon\Model\OutlookSyncInput $outlook_sync_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncOutlook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncOutlookAsync(

        $filters,
        $tags = SENTINEL_VALUE,
        $folder = 'Inbox',
        $chunk_size = 1500,
        $chunk_overlap = 20,
        $skip_embedding_generation = false,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        string $contentType = self::contentTypes['syncOutlook'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "folder", $folder);
        $this->setRequestBodyProperty($_body, "filters", $filters);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $outlook_sync_input = $_body;

        return $this->syncOutlookAsyncWithHttpInfo($outlook_sync_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncOutlookAsyncWithHttpInfo
     *
     * Outlook Sync
     *
     * @param  \Carbon\Model\OutlookSyncInput $outlook_sync_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncOutlook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncOutlookAsyncWithHttpInfo($outlook_sync_input, string $contentType = self::contentTypes['syncOutlook'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\GenericSuccessResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->syncOutlookRequest($outlook_sync_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncOutlook'
     *
     * @param  \Carbon\Model\OutlookSyncInput $outlook_sync_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncOutlook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncOutlookRequest($outlook_sync_input, string $contentType = self::contentTypes['syncOutlook'][0])
    {

        if ($outlook_sync_input !== SENTINEL_VALUE) {
            if (!($outlook_sync_input instanceof \Carbon\Model\OutlookSyncInput)) {
                if (!is_array($outlook_sync_input))
                    throw new \InvalidArgumentException('"outlook_sync_input" must be associative array or an instance of \Carbon\Model\OutlookSyncInput IntegrationsApi.syncOutlook.');
                else
                    $outlook_sync_input = new \Carbon\Model\OutlookSyncInput($outlook_sync_input);
            }
        }
        // verify the required parameter 'outlook_sync_input' is set
        if ($outlook_sync_input === SENTINEL_VALUE || (is_array($outlook_sync_input) && count($outlook_sync_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter outlook_sync_input when calling syncOutlook'
            );
        }


        $resourcePath = '/integrations/outlook/sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($outlook_sync_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($outlook_sync_input));
            } else {
                $httpBody = $outlook_sync_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation syncRssFeed
     *
     * Rss Feed
     *
     * @param  \Carbon\Model\RSSFeedInput $rss_feed_input rss_feed_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncRssFeed'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError
     */
    public function syncRssFeed(

        $url,
        $tags = SENTINEL_VALUE,
        $chunk_size = 1500,
        $chunk_overlap = 20,
        $skip_embedding_generation = false,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        string $contentType = self::contentTypes['syncRssFeed'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "url", $url);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $rss_feed_input = $_body;

        list($response) = $this->syncRssFeedWithHttpInfo($rss_feed_input, $contentType);
        return $response;
    }

    /**
     * Operation syncRssFeedWithHttpInfo
     *
     * Rss Feed
     *
     * @param  \Carbon\Model\RSSFeedInput $rss_feed_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncRssFeed'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncRssFeedWithHttpInfo($rss_feed_input, string $contentType = self::contentTypes['syncRssFeed'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->syncRssFeedRequest($rss_feed_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->syncRssFeedWithHttpInfo(
                        $rss_feed_input,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\GenericSuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\GenericSuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\GenericSuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\GenericSuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\GenericSuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation syncRssFeedAsync
     *
     * Rss Feed
     *
     * @param  \Carbon\Model\RSSFeedInput $rss_feed_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncRssFeed'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncRssFeedAsync(

        $url,
        $tags = SENTINEL_VALUE,
        $chunk_size = 1500,
        $chunk_overlap = 20,
        $skip_embedding_generation = false,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        string $contentType = self::contentTypes['syncRssFeed'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "url", $url);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $rss_feed_input = $_body;

        return $this->syncRssFeedAsyncWithHttpInfo($rss_feed_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncRssFeedAsyncWithHttpInfo
     *
     * Rss Feed
     *
     * @param  \Carbon\Model\RSSFeedInput $rss_feed_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncRssFeed'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncRssFeedAsyncWithHttpInfo($rss_feed_input, string $contentType = self::contentTypes['syncRssFeed'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\GenericSuccessResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->syncRssFeedRequest($rss_feed_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncRssFeed'
     *
     * @param  \Carbon\Model\RSSFeedInput $rss_feed_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncRssFeed'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncRssFeedRequest($rss_feed_input, string $contentType = self::contentTypes['syncRssFeed'][0])
    {

        if ($rss_feed_input !== SENTINEL_VALUE) {
            if (!($rss_feed_input instanceof \Carbon\Model\RSSFeedInput)) {
                if (!is_array($rss_feed_input))
                    throw new \InvalidArgumentException('"rss_feed_input" must be associative array or an instance of \Carbon\Model\RSSFeedInput IntegrationsApi.syncRssFeed.');
                else
                    $rss_feed_input = new \Carbon\Model\RSSFeedInput($rss_feed_input);
            }
        }
        // verify the required parameter 'rss_feed_input' is set
        if ($rss_feed_input === SENTINEL_VALUE || (is_array($rss_feed_input) && count($rss_feed_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter rss_feed_input when calling syncRssFeed'
            );
        }


        $resourcePath = '/integrations/rss_feed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rss_feed_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rss_feed_input));
            } else {
                $httpBody = $rss_feed_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation syncS3Files
     *
     * S3 Files
     *
     * @param  \Carbon\Model\S3FileSyncInput $s3_file_sync_input s3_file_sync_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncS3Files'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError
     */
    public function syncS3Files(

        $ids,
        $tags = SENTINEL_VALUE,
        $chunk_size = 1500,
        $chunk_overlap = 20,
        $skip_embedding_generation = false,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        $max_items_per_chunk = SENTINEL_VALUE,
        $set_page_as_boundary = false,
        string $contentType = self::contentTypes['syncS3Files'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "ids", $ids);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $this->setRequestBodyProperty($_body, "max_items_per_chunk", $max_items_per_chunk);
        $this->setRequestBodyProperty($_body, "set_page_as_boundary", $set_page_as_boundary);
        $s3_file_sync_input = $_body;

        list($response) = $this->syncS3FilesWithHttpInfo($s3_file_sync_input, $contentType);
        return $response;
    }

    /**
     * Operation syncS3FilesWithHttpInfo
     *
     * S3 Files
     *
     * @param  \Carbon\Model\S3FileSyncInput $s3_file_sync_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncS3Files'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncS3FilesWithHttpInfo($s3_file_sync_input, string $contentType = self::contentTypes['syncS3Files'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->syncS3FilesRequest($s3_file_sync_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->syncS3FilesWithHttpInfo(
                        $s3_file_sync_input,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\GenericSuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\GenericSuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\GenericSuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\GenericSuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\GenericSuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation syncS3FilesAsync
     *
     * S3 Files
     *
     * @param  \Carbon\Model\S3FileSyncInput $s3_file_sync_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncS3Files'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncS3FilesAsync(

        $ids,
        $tags = SENTINEL_VALUE,
        $chunk_size = 1500,
        $chunk_overlap = 20,
        $skip_embedding_generation = false,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        $max_items_per_chunk = SENTINEL_VALUE,
        $set_page_as_boundary = false,
        string $contentType = self::contentTypes['syncS3Files'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "ids", $ids);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $this->setRequestBodyProperty($_body, "max_items_per_chunk", $max_items_per_chunk);
        $this->setRequestBodyProperty($_body, "set_page_as_boundary", $set_page_as_boundary);
        $s3_file_sync_input = $_body;

        return $this->syncS3FilesAsyncWithHttpInfo($s3_file_sync_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncS3FilesAsyncWithHttpInfo
     *
     * S3 Files
     *
     * @param  \Carbon\Model\S3FileSyncInput $s3_file_sync_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncS3Files'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncS3FilesAsyncWithHttpInfo($s3_file_sync_input, string $contentType = self::contentTypes['syncS3Files'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\GenericSuccessResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->syncS3FilesRequest($s3_file_sync_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncS3Files'
     *
     * @param  \Carbon\Model\S3FileSyncInput $s3_file_sync_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncS3Files'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncS3FilesRequest($s3_file_sync_input, string $contentType = self::contentTypes['syncS3Files'][0])
    {

        if ($s3_file_sync_input !== SENTINEL_VALUE) {
            if (!($s3_file_sync_input instanceof \Carbon\Model\S3FileSyncInput)) {
                if (!is_array($s3_file_sync_input))
                    throw new \InvalidArgumentException('"s3_file_sync_input" must be associative array or an instance of \Carbon\Model\S3FileSyncInput IntegrationsApi.syncS3Files.');
                else
                    $s3_file_sync_input = new \Carbon\Model\S3FileSyncInput($s3_file_sync_input);
            }
        }
        // verify the required parameter 's3_file_sync_input' is set
        if ($s3_file_sync_input === SENTINEL_VALUE || (is_array($s3_file_sync_input) && count($s3_file_sync_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter s3_file_sync_input when calling syncS3Files'
            );
        }


        $resourcePath = '/integrations/s3/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($s3_file_sync_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($s3_file_sync_input));
            } else {
                $httpBody = $s3_file_sync_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
