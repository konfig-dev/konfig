/*
NewsCatcher-V3 Production API

<img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>

API version: Beta-3.0.0
Contact: maksym@newscatcherapi.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package newscatcherapi

import (
	"encoding/json"
	"fmt"
)

// ArticlesPropertyInner1AllLinks - struct for ArticlesPropertyInner1AllLinks
type ArticlesPropertyInner1AllLinks struct {
	AllLinks *AllLinks
}

// AllLinksAsArticlesPropertyInner1AllLinks is a convenience function that returns AllLinks wrapped in ArticlesPropertyInner1AllLinks
func AllLinksAsArticlesPropertyInner1AllLinks(v *AllLinks) ArticlesPropertyInner1AllLinks {
	return ArticlesPropertyInner1AllLinks{
		AllLinks: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ArticlesPropertyInner1AllLinks) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AllLinks
	err = newStrictDecoder(data).Decode(&dst.AllLinks)
	if err == nil {
		jsonAllLinks, _ := json.Marshal(dst.AllLinks)
		if string(jsonAllLinks) == "{}" { // empty struct
			dst.AllLinks = nil
		} else {
			match++
		}
	} else {
		dst.AllLinks = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AllLinks = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ArticlesPropertyInner1AllLinks)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ArticlesPropertyInner1AllLinks)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ArticlesPropertyInner1AllLinks) MarshalJSON() ([]byte, error) {
	if src.AllLinks != nil {
		return json.Marshal(&src.AllLinks)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ArticlesPropertyInner1AllLinks) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AllLinks != nil {
		return obj.AllLinks
	}

	// all schemas are nil
	return nil
}

type NullableArticlesPropertyInner1AllLinks struct {
	value *ArticlesPropertyInner1AllLinks
	isSet bool
}

func (v NullableArticlesPropertyInner1AllLinks) Get() *ArticlesPropertyInner1AllLinks {
	return v.value
}

func (v *NullableArticlesPropertyInner1AllLinks) Set(val *ArticlesPropertyInner1AllLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableArticlesPropertyInner1AllLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableArticlesPropertyInner1AllLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArticlesPropertyInner1AllLinks(val *ArticlesPropertyInner1AllLinks) *NullableArticlesPropertyInner1AllLinks {
	return &NullableArticlesPropertyInner1AllLinks{value: val, isSet: true}
}

func (v NullableArticlesPropertyInner1AllLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArticlesPropertyInner1AllLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


