/*
 * SnapTrade
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SessionEvent
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SessionEvent {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  /**
   * Gets or Sets sessionEventType
   */
  @JsonAdapter(SessionEventTypeEnum.Adapter.class)
 public enum SessionEventTypeEnum {
    CONNECTION_FAILED("CONNECTION_FAILED"),
    
    DISCLAIMER_ACCEPTED("DISCLAIMER_ACCEPTED"),
    
    BROKERAGE_CONNECTION_INITIATED("BROKERAGE_CONNECTION_INITIATED"),
    
    BROKERAGE_AUTHENTICATION("BROKERAGE_AUTHENTICATION"),
    
    MFA_AUTHORIZATION("MFA_AUTHORIZATION"),
    
    CONNECTION_SUCCESSFUL("CONNECTION_SUCCESSFUL"),
    
    PARTNER_REDIRECT("PARTNER_REDIRECT");

    private String value;

    SessionEventTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SessionEventTypeEnum fromValue(String value) {
      for (SessionEventTypeEnum b : SessionEventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SessionEventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SessionEventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SessionEventTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SessionEventTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SESSION_EVENT_TYPE = "session_event_type";
  @SerializedName(SERIALIZED_NAME_SESSION_EVENT_TYPE)
  private SessionEventTypeEnum sessionEventType;

  public static final String SERIALIZED_NAME_SESSION_ID = "session_id";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private UUID sessionId;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_CREATED_DATE = "created_date";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_BROKERAGE_STATUS_CODE = "brokerage_status_code";
  @SerializedName(SERIALIZED_NAME_BROKERAGE_STATUS_CODE)
  private Integer brokerageStatusCode;

  public static final String SERIALIZED_NAME_BROKERAGE_AUTHORIZATION_ID = "brokerage_authorization_id";
  @SerializedName(SERIALIZED_NAME_BROKERAGE_AUTHORIZATION_ID)
  private UUID brokerageAuthorizationId;

  public SessionEvent() {
  }

  public SessionEvent id(UUID id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2bcd7cc3-e922-4976-bce1-9858296801c3", value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    
    
    
    this.id = id;
  }


  public SessionEvent sessionEventType(SessionEventTypeEnum sessionEventType) {
    
    
    
    
    this.sessionEventType = sessionEventType;
    return this;
  }

   /**
   * Get sessionEventType
   * @return sessionEventType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SessionEventTypeEnum getSessionEventType() {
    return sessionEventType;
  }


  public void setSessionEventType(SessionEventTypeEnum sessionEventType) {
    
    
    
    this.sessionEventType = sessionEventType;
  }


  public SessionEvent sessionId(UUID sessionId) {
    
    
    
    
    this.sessionId = sessionId;
    return this;
  }

   /**
   * Get sessionId
   * @return sessionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2bcd7cc3-e922-4976-bce1-9858296801c3", value = "")

  public UUID getSessionId() {
    return sessionId;
  }


  public void setSessionId(UUID sessionId) {
    
    
    
    this.sessionId = sessionId;
  }


  public SessionEvent userId(String userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * SnapTrade User ID. Provided by SnapTrade Partner. Can be any string, as long as it&#39;s unique to a user
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "snaptrade-user-123", value = "SnapTrade User ID. Provided by SnapTrade Partner. Can be any string, as long as it's unique to a user")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    
    
    
    this.userId = userId;
  }


  public SessionEvent createdDate(String createdDate) {
    
    
    
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Time
   * @return createdDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-01-21T20:11:19.217Z", value = "Time")

  public String getCreatedDate() {
    return createdDate;
  }


  public void setCreatedDate(String createdDate) {
    
    
    
    this.createdDate = createdDate;
  }


  public SessionEvent brokerageStatusCode(Integer brokerageStatusCode) {
    
    
    
    
    this.brokerageStatusCode = brokerageStatusCode;
    return this;
  }

   /**
   * Get brokerageStatusCode
   * @return brokerageStatusCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "400", value = "")

  public Integer getBrokerageStatusCode() {
    return brokerageStatusCode;
  }


  public void setBrokerageStatusCode(Integer brokerageStatusCode) {
    
    
    
    this.brokerageStatusCode = brokerageStatusCode;
  }


  public SessionEvent brokerageAuthorizationId(UUID brokerageAuthorizationId) {
    
    
    
    
    this.brokerageAuthorizationId = brokerageAuthorizationId;
    return this;
  }

   /**
   * Get brokerageAuthorizationId
   * @return brokerageAuthorizationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2bcd7cc3-e922-4976-bce1-9858296801c3", value = "")

  public UUID getBrokerageAuthorizationId() {
    return brokerageAuthorizationId;
  }


  public void setBrokerageAuthorizationId(UUID brokerageAuthorizationId) {
    
    
    
    this.brokerageAuthorizationId = brokerageAuthorizationId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SessionEvent instance itself
   */
  public SessionEvent putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionEvent sessionEvent = (SessionEvent) o;
    return Objects.equals(this.id, sessionEvent.id) &&
        Objects.equals(this.sessionEventType, sessionEvent.sessionEventType) &&
        Objects.equals(this.sessionId, sessionEvent.sessionId) &&
        Objects.equals(this.userId, sessionEvent.userId) &&
        Objects.equals(this.createdDate, sessionEvent.createdDate) &&
        Objects.equals(this.brokerageStatusCode, sessionEvent.brokerageStatusCode) &&
        Objects.equals(this.brokerageAuthorizationId, sessionEvent.brokerageAuthorizationId)&&
        Objects.equals(this.additionalProperties, sessionEvent.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, sessionEventType, sessionId, userId, createdDate, brokerageStatusCode, brokerageAuthorizationId, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionEvent {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sessionEventType: ").append(toIndentedString(sessionEventType)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    brokerageStatusCode: ").append(toIndentedString(brokerageStatusCode)).append("\n");
    sb.append("    brokerageAuthorizationId: ").append(toIndentedString(brokerageAuthorizationId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("session_event_type");
    openapiFields.add("session_id");
    openapiFields.add("user_id");
    openapiFields.add("created_date");
    openapiFields.add("brokerage_status_code");
    openapiFields.add("brokerage_authorization_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SessionEvent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SessionEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SessionEvent is not found in the empty JSON string", SessionEvent.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("session_event_type") != null && !jsonObj.get("session_event_type").isJsonNull()) && !jsonObj.get("session_event_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_event_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_event_type").toString()));
      }
      if ((jsonObj.get("session_id") != null && !jsonObj.get("session_id").isJsonNull()) && !jsonObj.get("session_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_id").toString()));
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
      if ((jsonObj.get("created_date") != null && !jsonObj.get("created_date").isJsonNull()) && !jsonObj.get("created_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_date").toString()));
      }
      if ((jsonObj.get("brokerage_authorization_id") != null && !jsonObj.get("brokerage_authorization_id").isJsonNull()) && !jsonObj.get("brokerage_authorization_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brokerage_authorization_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brokerage_authorization_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SessionEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SessionEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SessionEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SessionEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<SessionEvent>() {
           @Override
           public void write(JsonWriter out, SessionEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else if (entry.getValue() == null) {
                   obj.addProperty(entry.getKey(), (String) null);
                 } else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SessionEvent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SessionEvent instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SessionEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SessionEvent
  * @throws IOException if the JSON string is invalid with respect to SessionEvent
  */
  public static SessionEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SessionEvent.class);
  }

 /**
  * Convert an instance of SessionEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

