/*
 * NewsCatcher-V3 Production API
 *
 * <img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>
 *
 * The version of the OpenAPI document: 3.2.16
 * Contact: maksym@newscatcherapi.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Newscatcherapi.Net.Client;
using Newscatcherapi.Net.Model;

namespace Newscatcherapi.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchSimilarApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [Get] Search For Similar Articles Request
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of articles that are similar to the query provided. You also have the option to get similar articles for the results of a search.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"></param>
        /// <param name="searchIn"> (optional, default to &quot;title_content&quot;)</param>
        /// <param name="includeSimilarDocuments"> (optional, default to false)</param>
        /// <param name="similarDocumentsNumber"> (optional, default to 5)</param>
        /// <param name="similarDocumentsFields"> (optional, default to &quot;title,content&quot;)</param>
        /// <param name="predefinedSources"> (optional)</param>
        /// <param name="sources"> (optional)</param>
        /// <param name="notSources"> (optional)</param>
        /// <param name="lang"> (optional)</param>
        /// <param name="notLang"> (optional)</param>
        /// <param name="countries"> (optional)</param>
        /// <param name="notCountries"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="byParseDate"> (optional, default to false)</param>
        /// <param name="publishedDatePrecision"> (optional)</param>
        /// <param name="sortBy"> (optional, default to &quot;relevancy&quot;)</param>
        /// <param name="rankedOnly"> (optional)</param>
        /// <param name="fromRank"> (optional)</param>
        /// <param name="toRank"> (optional)</param>
        /// <param name="isHeadline"> (optional)</param>
        /// <param name="isOpinion"> (optional)</param>
        /// <param name="isPaidContent"> (optional)</param>
        /// <param name="parentUrl"> (optional)</param>
        /// <param name="allLinks"> (optional)</param>
        /// <param name="allDomainLinks"> (optional)</param>
        /// <param name="wordCountMin"> (optional)</param>
        /// <param name="wordCountMax"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="includeNlpData"> (optional)</param>
        /// <param name="hasNlp"> (optional)</param>
        /// <param name="theme"> (optional)</param>
        /// <param name="notTheme"> (optional)</param>
        /// <param name="nerName"> (optional)</param>
        /// <param name="titleSentimentMin"> (optional)</param>
        /// <param name="titleSentimentMax"> (optional)</param>
        /// <param name="contentSentimentMin"> (optional)</param>
        /// <param name="contentSentimentMax"> (optional)</param>
        /// <param name="iptcTags"> (optional)</param>
        /// <param name="notIptcTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchSimilarGetResponse</returns>
        SearchSimilarGetResponse Get(string q, string searchIn = default(string), bool? includeSimilarDocuments = default(bool?), int? similarDocumentsNumber = default(int?), string similarDocumentsFields = default(string), Object predefinedSources = default(Object), Object sources = default(Object), Object notSources = default(Object), Object lang = default(Object), Object notLang = default(Object), Object countries = default(Object), Object notCountries = default(Object), From from = default(From), To to = default(To), bool? byParseDate = default(bool?), string publishedDatePrecision = default(string), string sortBy = default(string), string rankedOnly = default(string), int? fromRank = default(int?), int? toRank = default(int?), bool? isHeadline = default(bool?), bool? isOpinion = default(bool?), bool? isPaidContent = default(bool?), Object parentUrl = default(Object), Object allLinks = default(Object), Object allDomainLinks = default(Object), int? wordCountMin = default(int?), int? wordCountMax = default(int?), int? page = default(int?), int? pageSize = default(int?), bool? includeNlpData = default(bool?), bool? hasNlp = default(bool?), string theme = default(string), string notTheme = default(string), string nerName = default(string), double? titleSentimentMin = default(double?), double? titleSentimentMax = default(double?), double? contentSentimentMin = default(double?), double? contentSentimentMax = default(double?), Object iptcTags = default(Object), Object notIptcTags = default(Object), int operationIndex = 0);

        /// <summary>
        /// [Get] Search For Similar Articles Request
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of articles that are similar to the query provided. You also have the option to get similar articles for the results of a search.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"></param>
        /// <param name="searchIn"> (optional, default to &quot;title_content&quot;)</param>
        /// <param name="includeSimilarDocuments"> (optional, default to false)</param>
        /// <param name="similarDocumentsNumber"> (optional, default to 5)</param>
        /// <param name="similarDocumentsFields"> (optional, default to &quot;title,content&quot;)</param>
        /// <param name="predefinedSources"> (optional)</param>
        /// <param name="sources"> (optional)</param>
        /// <param name="notSources"> (optional)</param>
        /// <param name="lang"> (optional)</param>
        /// <param name="notLang"> (optional)</param>
        /// <param name="countries"> (optional)</param>
        /// <param name="notCountries"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="byParseDate"> (optional, default to false)</param>
        /// <param name="publishedDatePrecision"> (optional)</param>
        /// <param name="sortBy"> (optional, default to &quot;relevancy&quot;)</param>
        /// <param name="rankedOnly"> (optional)</param>
        /// <param name="fromRank"> (optional)</param>
        /// <param name="toRank"> (optional)</param>
        /// <param name="isHeadline"> (optional)</param>
        /// <param name="isOpinion"> (optional)</param>
        /// <param name="isPaidContent"> (optional)</param>
        /// <param name="parentUrl"> (optional)</param>
        /// <param name="allLinks"> (optional)</param>
        /// <param name="allDomainLinks"> (optional)</param>
        /// <param name="wordCountMin"> (optional)</param>
        /// <param name="wordCountMax"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="includeNlpData"> (optional)</param>
        /// <param name="hasNlp"> (optional)</param>
        /// <param name="theme"> (optional)</param>
        /// <param name="notTheme"> (optional)</param>
        /// <param name="nerName"> (optional)</param>
        /// <param name="titleSentimentMin"> (optional)</param>
        /// <param name="titleSentimentMax"> (optional)</param>
        /// <param name="contentSentimentMin"> (optional)</param>
        /// <param name="contentSentimentMax"> (optional)</param>
        /// <param name="iptcTags"> (optional)</param>
        /// <param name="notIptcTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchSimilarGetResponse</returns>
        ApiResponse<SearchSimilarGetResponse> GetWithHttpInfo(string q, string searchIn = default(string), bool? includeSimilarDocuments = default(bool?), int? similarDocumentsNumber = default(int?), string similarDocumentsFields = default(string), Object predefinedSources = default(Object), Object sources = default(Object), Object notSources = default(Object), Object lang = default(Object), Object notLang = default(Object), Object countries = default(Object), Object notCountries = default(Object), From from = default(From), To to = default(To), bool? byParseDate = default(bool?), string publishedDatePrecision = default(string), string sortBy = default(string), string rankedOnly = default(string), int? fromRank = default(int?), int? toRank = default(int?), bool? isHeadline = default(bool?), bool? isOpinion = default(bool?), bool? isPaidContent = default(bool?), Object parentUrl = default(Object), Object allLinks = default(Object), Object allDomainLinks = default(Object), int? wordCountMin = default(int?), int? wordCountMax = default(int?), int? page = default(int?), int? pageSize = default(int?), bool? includeNlpData = default(bool?), bool? hasNlp = default(bool?), string theme = default(string), string notTheme = default(string), string nerName = default(string), double? titleSentimentMin = default(double?), double? titleSentimentMax = default(double?), double? contentSentimentMin = default(double?), double? contentSentimentMax = default(double?), Object iptcTags = default(Object), Object notIptcTags = default(Object), int operationIndex = 0);
        /// <summary>
        /// [Post] Search For Similar Articles Request
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of articles that are similar to the query provided. You also have the option to get similar articles for the results of a search.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moreLikeThisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchSimilarPostResponse</returns>
        SearchSimilarPostResponse Post(MoreLikeThisRequest moreLikeThisRequest, int operationIndex = 0);

        /// <summary>
        /// [Post] Search For Similar Articles Request
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of articles that are similar to the query provided. You also have the option to get similar articles for the results of a search.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moreLikeThisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchSimilarPostResponse</returns>
        ApiResponse<SearchSimilarPostResponse> PostWithHttpInfo(MoreLikeThisRequest moreLikeThisRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchSimilarApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// [Get] Search For Similar Articles Request
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of articles that are similar to the query provided. You also have the option to get similar articles for the results of a search.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"></param>
        /// <param name="searchIn"> (optional, default to &quot;title_content&quot;)</param>
        /// <param name="includeSimilarDocuments"> (optional, default to false)</param>
        /// <param name="similarDocumentsNumber"> (optional, default to 5)</param>
        /// <param name="similarDocumentsFields"> (optional, default to &quot;title,content&quot;)</param>
        /// <param name="predefinedSources"> (optional)</param>
        /// <param name="sources"> (optional)</param>
        /// <param name="notSources"> (optional)</param>
        /// <param name="lang"> (optional)</param>
        /// <param name="notLang"> (optional)</param>
        /// <param name="countries"> (optional)</param>
        /// <param name="notCountries"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="byParseDate"> (optional, default to false)</param>
        /// <param name="publishedDatePrecision"> (optional)</param>
        /// <param name="sortBy"> (optional, default to &quot;relevancy&quot;)</param>
        /// <param name="rankedOnly"> (optional)</param>
        /// <param name="fromRank"> (optional)</param>
        /// <param name="toRank"> (optional)</param>
        /// <param name="isHeadline"> (optional)</param>
        /// <param name="isOpinion"> (optional)</param>
        /// <param name="isPaidContent"> (optional)</param>
        /// <param name="parentUrl"> (optional)</param>
        /// <param name="allLinks"> (optional)</param>
        /// <param name="allDomainLinks"> (optional)</param>
        /// <param name="wordCountMin"> (optional)</param>
        /// <param name="wordCountMax"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="includeNlpData"> (optional)</param>
        /// <param name="hasNlp"> (optional)</param>
        /// <param name="theme"> (optional)</param>
        /// <param name="notTheme"> (optional)</param>
        /// <param name="nerName"> (optional)</param>
        /// <param name="titleSentimentMin"> (optional)</param>
        /// <param name="titleSentimentMax"> (optional)</param>
        /// <param name="contentSentimentMin"> (optional)</param>
        /// <param name="contentSentimentMax"> (optional)</param>
        /// <param name="iptcTags"> (optional)</param>
        /// <param name="notIptcTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchSimilarGetResponse</returns>
        System.Threading.Tasks.Task<SearchSimilarGetResponse> GetAsync(string q, string searchIn = default(string), bool? includeSimilarDocuments = default(bool?), int? similarDocumentsNumber = default(int?), string similarDocumentsFields = default(string), Object predefinedSources = default(Object), Object sources = default(Object), Object notSources = default(Object), Object lang = default(Object), Object notLang = default(Object), Object countries = default(Object), Object notCountries = default(Object), From from = default(From), To to = default(To), bool? byParseDate = default(bool?), string publishedDatePrecision = default(string), string sortBy = default(string), string rankedOnly = default(string), int? fromRank = default(int?), int? toRank = default(int?), bool? isHeadline = default(bool?), bool? isOpinion = default(bool?), bool? isPaidContent = default(bool?), Object parentUrl = default(Object), Object allLinks = default(Object), Object allDomainLinks = default(Object), int? wordCountMin = default(int?), int? wordCountMax = default(int?), int? page = default(int?), int? pageSize = default(int?), bool? includeNlpData = default(bool?), bool? hasNlp = default(bool?), string theme = default(string), string notTheme = default(string), string nerName = default(string), double? titleSentimentMin = default(double?), double? titleSentimentMax = default(double?), double? contentSentimentMin = default(double?), double? contentSentimentMax = default(double?), Object iptcTags = default(Object), Object notIptcTags = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [Get] Search For Similar Articles Request
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of articles that are similar to the query provided. You also have the option to get similar articles for the results of a search.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"></param>
        /// <param name="searchIn"> (optional, default to &quot;title_content&quot;)</param>
        /// <param name="includeSimilarDocuments"> (optional, default to false)</param>
        /// <param name="similarDocumentsNumber"> (optional, default to 5)</param>
        /// <param name="similarDocumentsFields"> (optional, default to &quot;title,content&quot;)</param>
        /// <param name="predefinedSources"> (optional)</param>
        /// <param name="sources"> (optional)</param>
        /// <param name="notSources"> (optional)</param>
        /// <param name="lang"> (optional)</param>
        /// <param name="notLang"> (optional)</param>
        /// <param name="countries"> (optional)</param>
        /// <param name="notCountries"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="byParseDate"> (optional, default to false)</param>
        /// <param name="publishedDatePrecision"> (optional)</param>
        /// <param name="sortBy"> (optional, default to &quot;relevancy&quot;)</param>
        /// <param name="rankedOnly"> (optional)</param>
        /// <param name="fromRank"> (optional)</param>
        /// <param name="toRank"> (optional)</param>
        /// <param name="isHeadline"> (optional)</param>
        /// <param name="isOpinion"> (optional)</param>
        /// <param name="isPaidContent"> (optional)</param>
        /// <param name="parentUrl"> (optional)</param>
        /// <param name="allLinks"> (optional)</param>
        /// <param name="allDomainLinks"> (optional)</param>
        /// <param name="wordCountMin"> (optional)</param>
        /// <param name="wordCountMax"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="includeNlpData"> (optional)</param>
        /// <param name="hasNlp"> (optional)</param>
        /// <param name="theme"> (optional)</param>
        /// <param name="notTheme"> (optional)</param>
        /// <param name="nerName"> (optional)</param>
        /// <param name="titleSentimentMin"> (optional)</param>
        /// <param name="titleSentimentMax"> (optional)</param>
        /// <param name="contentSentimentMin"> (optional)</param>
        /// <param name="contentSentimentMax"> (optional)</param>
        /// <param name="iptcTags"> (optional)</param>
        /// <param name="notIptcTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchSimilarGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchSimilarGetResponse>> GetWithHttpInfoAsync(string q, string searchIn = default(string), bool? includeSimilarDocuments = default(bool?), int? similarDocumentsNumber = default(int?), string similarDocumentsFields = default(string), Object predefinedSources = default(Object), Object sources = default(Object), Object notSources = default(Object), Object lang = default(Object), Object notLang = default(Object), Object countries = default(Object), Object notCountries = default(Object), From from = default(From), To to = default(To), bool? byParseDate = default(bool?), string publishedDatePrecision = default(string), string sortBy = default(string), string rankedOnly = default(string), int? fromRank = default(int?), int? toRank = default(int?), bool? isHeadline = default(bool?), bool? isOpinion = default(bool?), bool? isPaidContent = default(bool?), Object parentUrl = default(Object), Object allLinks = default(Object), Object allDomainLinks = default(Object), int? wordCountMin = default(int?), int? wordCountMax = default(int?), int? page = default(int?), int? pageSize = default(int?), bool? includeNlpData = default(bool?), bool? hasNlp = default(bool?), string theme = default(string), string notTheme = default(string), string nerName = default(string), double? titleSentimentMin = default(double?), double? titleSentimentMax = default(double?), double? contentSentimentMin = default(double?), double? contentSentimentMax = default(double?), Object iptcTags = default(Object), Object notIptcTags = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [Post] Search For Similar Articles Request
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of articles that are similar to the query provided. You also have the option to get similar articles for the results of a search.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moreLikeThisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchSimilarPostResponse</returns>
        System.Threading.Tasks.Task<SearchSimilarPostResponse> PostAsync(MoreLikeThisRequest moreLikeThisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [Post] Search For Similar Articles Request
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of articles that are similar to the query provided. You also have the option to get similar articles for the results of a search.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moreLikeThisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchSimilarPostResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchSimilarPostResponse>> PostWithHttpInfoAsync(MoreLikeThisRequest moreLikeThisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchSimilarApi : ISearchSimilarApiSync, ISearchSimilarApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchSimilarApiGenerated : ISearchSimilarApi
    {
        private Newscatcherapi.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchSimilarApiGenerated"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchSimilarApiGenerated() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchSimilarApiGenerated"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchSimilarApiGenerated(string basePath)
        {
            this.Configuration = Newscatcherapi.Net.Client.Configuration.MergeConfigurations(
                Newscatcherapi.Net.Client.GlobalConfiguration.Instance,
                new Newscatcherapi.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Newscatcherapi.Net.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Newscatcherapi.Net.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Newscatcherapi.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchSimilarApiGenerated"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchSimilarApiGenerated(Newscatcherapi.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Newscatcherapi.Net.Client.Configuration.MergeConfigurations(
                Newscatcherapi.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Newscatcherapi.Net.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Newscatcherapi.Net.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Newscatcherapi.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchSimilarApiGenerated"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SearchSimilarApiGenerated(Newscatcherapi.Net.Client.ISynchronousClient client, Newscatcherapi.Net.Client.IAsynchronousClient asyncClient, Newscatcherapi.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Newscatcherapi.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Newscatcherapi.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Newscatcherapi.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Newscatcherapi.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Newscatcherapi.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// [Get] Search For Similar Articles Request This endpoint returns a list of articles that are similar to the query provided. You also have the option to get similar articles for the results of a search.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"></param>
        /// <param name="searchIn"> (optional, default to &quot;title_content&quot;)</param>
        /// <param name="includeSimilarDocuments"> (optional, default to false)</param>
        /// <param name="similarDocumentsNumber"> (optional, default to 5)</param>
        /// <param name="similarDocumentsFields"> (optional, default to &quot;title,content&quot;)</param>
        /// <param name="predefinedSources"> (optional)</param>
        /// <param name="sources"> (optional)</param>
        /// <param name="notSources"> (optional)</param>
        /// <param name="lang"> (optional)</param>
        /// <param name="notLang"> (optional)</param>
        /// <param name="countries"> (optional)</param>
        /// <param name="notCountries"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="byParseDate"> (optional, default to false)</param>
        /// <param name="publishedDatePrecision"> (optional)</param>
        /// <param name="sortBy"> (optional, default to &quot;relevancy&quot;)</param>
        /// <param name="rankedOnly"> (optional)</param>
        /// <param name="fromRank"> (optional)</param>
        /// <param name="toRank"> (optional)</param>
        /// <param name="isHeadline"> (optional)</param>
        /// <param name="isOpinion"> (optional)</param>
        /// <param name="isPaidContent"> (optional)</param>
        /// <param name="parentUrl"> (optional)</param>
        /// <param name="allLinks"> (optional)</param>
        /// <param name="allDomainLinks"> (optional)</param>
        /// <param name="wordCountMin"> (optional)</param>
        /// <param name="wordCountMax"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="includeNlpData"> (optional)</param>
        /// <param name="hasNlp"> (optional)</param>
        /// <param name="theme"> (optional)</param>
        /// <param name="notTheme"> (optional)</param>
        /// <param name="nerName"> (optional)</param>
        /// <param name="titleSentimentMin"> (optional)</param>
        /// <param name="titleSentimentMax"> (optional)</param>
        /// <param name="contentSentimentMin"> (optional)</param>
        /// <param name="contentSentimentMax"> (optional)</param>
        /// <param name="iptcTags"> (optional)</param>
        /// <param name="notIptcTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchSimilarGetResponse</returns>
        public SearchSimilarGetResponse Get(string q, string searchIn = default(string), bool? includeSimilarDocuments = default(bool?), int? similarDocumentsNumber = default(int?), string similarDocumentsFields = default(string), Object predefinedSources = default(Object), Object sources = default(Object), Object notSources = default(Object), Object lang = default(Object), Object notLang = default(Object), Object countries = default(Object), Object notCountries = default(Object), From from = default(From), To to = default(To), bool? byParseDate = default(bool?), string publishedDatePrecision = default(string), string sortBy = default(string), string rankedOnly = default(string), int? fromRank = default(int?), int? toRank = default(int?), bool? isHeadline = default(bool?), bool? isOpinion = default(bool?), bool? isPaidContent = default(bool?), Object parentUrl = default(Object), Object allLinks = default(Object), Object allDomainLinks = default(Object), int? wordCountMin = default(int?), int? wordCountMax = default(int?), int? page = default(int?), int? pageSize = default(int?), bool? includeNlpData = default(bool?), bool? hasNlp = default(bool?), string theme = default(string), string notTheme = default(string), string nerName = default(string), double? titleSentimentMin = default(double?), double? titleSentimentMax = default(double?), double? contentSentimentMin = default(double?), double? contentSentimentMax = default(double?), Object iptcTags = default(Object), Object notIptcTags = default(Object), int operationIndex = 0)
        {
            Newscatcherapi.Net.Client.ApiResponse<SearchSimilarGetResponse> localVarResponse = GetWithHttpInfo(q, searchIn, includeSimilarDocuments, similarDocumentsNumber, similarDocumentsFields, predefinedSources, sources, notSources, lang, notLang, countries, notCountries, from, to, byParseDate, publishedDatePrecision, sortBy, rankedOnly, fromRank, toRank, isHeadline, isOpinion, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, includeNlpData, hasNlp, theme, notTheme, nerName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, iptcTags, notIptcTags);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [Get] Search For Similar Articles Request This endpoint returns a list of articles that are similar to the query provided. You also have the option to get similar articles for the results of a search.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"></param>
        /// <param name="searchIn"> (optional, default to &quot;title_content&quot;)</param>
        /// <param name="includeSimilarDocuments"> (optional, default to false)</param>
        /// <param name="similarDocumentsNumber"> (optional, default to 5)</param>
        /// <param name="similarDocumentsFields"> (optional, default to &quot;title,content&quot;)</param>
        /// <param name="predefinedSources"> (optional)</param>
        /// <param name="sources"> (optional)</param>
        /// <param name="notSources"> (optional)</param>
        /// <param name="lang"> (optional)</param>
        /// <param name="notLang"> (optional)</param>
        /// <param name="countries"> (optional)</param>
        /// <param name="notCountries"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="byParseDate"> (optional, default to false)</param>
        /// <param name="publishedDatePrecision"> (optional)</param>
        /// <param name="sortBy"> (optional, default to &quot;relevancy&quot;)</param>
        /// <param name="rankedOnly"> (optional)</param>
        /// <param name="fromRank"> (optional)</param>
        /// <param name="toRank"> (optional)</param>
        /// <param name="isHeadline"> (optional)</param>
        /// <param name="isOpinion"> (optional)</param>
        /// <param name="isPaidContent"> (optional)</param>
        /// <param name="parentUrl"> (optional)</param>
        /// <param name="allLinks"> (optional)</param>
        /// <param name="allDomainLinks"> (optional)</param>
        /// <param name="wordCountMin"> (optional)</param>
        /// <param name="wordCountMax"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="includeNlpData"> (optional)</param>
        /// <param name="hasNlp"> (optional)</param>
        /// <param name="theme"> (optional)</param>
        /// <param name="notTheme"> (optional)</param>
        /// <param name="nerName"> (optional)</param>
        /// <param name="titleSentimentMin"> (optional)</param>
        /// <param name="titleSentimentMax"> (optional)</param>
        /// <param name="contentSentimentMin"> (optional)</param>
        /// <param name="contentSentimentMax"> (optional)</param>
        /// <param name="iptcTags"> (optional)</param>
        /// <param name="notIptcTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchSimilarGetResponse</returns>
        public Newscatcherapi.Net.Client.ApiResponse<SearchSimilarGetResponse> GetWithHttpInfo(string q, string searchIn = default(string), bool? includeSimilarDocuments = default(bool?), int? similarDocumentsNumber = default(int?), string similarDocumentsFields = default(string), Object predefinedSources = default(Object), Object sources = default(Object), Object notSources = default(Object), Object lang = default(Object), Object notLang = default(Object), Object countries = default(Object), Object notCountries = default(Object), From from = default(From), To to = default(To), bool? byParseDate = default(bool?), string publishedDatePrecision = default(string), string sortBy = default(string), string rankedOnly = default(string), int? fromRank = default(int?), int? toRank = default(int?), bool? isHeadline = default(bool?), bool? isOpinion = default(bool?), bool? isPaidContent = default(bool?), Object parentUrl = default(Object), Object allLinks = default(Object), Object allDomainLinks = default(Object), int? wordCountMin = default(int?), int? wordCountMax = default(int?), int? page = default(int?), int? pageSize = default(int?), bool? includeNlpData = default(bool?), bool? hasNlp = default(bool?), string theme = default(string), string notTheme = default(string), string nerName = default(string), double? titleSentimentMin = default(double?), double? titleSentimentMax = default(double?), double? contentSentimentMin = default(double?), double? contentSentimentMax = default(double?), Object iptcTags = default(Object), Object notIptcTags = default(Object), int operationIndex = 0)
        {
            // verify the required parameter 'q' is set
            if (q == null)
            {
                throw new Newscatcherapi.Net.Client.ApiException(400, "Missing required parameter 'q' when calling SearchSimilarApi->Get");
            }

            Newscatcherapi.Net.Client.RequestOptions localVarRequestOptions = new Newscatcherapi.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "q", q, ""));
            if (searchIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "search_in", searchIn, ""));
            }
            if (includeSimilarDocuments != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "include_similar_documents", includeSimilarDocuments, ""));
            }
            if (similarDocumentsNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "similar_documents_number", similarDocumentsNumber, ""));
            }
            if (similarDocumentsFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "similar_documents_fields", similarDocumentsFields, ""));
            }
            if (predefinedSources != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "predefined_sources", predefinedSources, ""));
            }
            if (sources != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "sources", sources, ""));
            }
            if (notSources != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_sources", notSources, ""));
            }
            if (lang != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "lang", lang, ""));
            }
            if (notLang != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_lang", notLang, ""));
            }
            if (countries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "countries", countries, ""));
            }
            if (notCountries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_countries", notCountries, ""));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "from_", from, ""));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "to_", to, ""));
            }
            if (byParseDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "by_parse_date", byParseDate, ""));
            }
            if (publishedDatePrecision != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "published_date_precision", publishedDatePrecision, ""));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy, ""));
            }
            if (rankedOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "ranked_only", rankedOnly, ""));
            }
            if (fromRank != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "from_rank", fromRank, ""));
            }
            if (toRank != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "to_rank", toRank, ""));
            }
            if (isHeadline != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "is_headline", isHeadline, ""));
            }
            if (isOpinion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "is_opinion", isOpinion, ""));
            }
            if (isPaidContent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "is_paid_content", isPaidContent, ""));
            }
            if (parentUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "parent_url", parentUrl, ""));
            }
            if (allLinks != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "all_links", allLinks, ""));
            }
            if (allDomainLinks != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "all_domain_links", allDomainLinks, ""));
            }
            if (wordCountMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "word_count_min", wordCountMin, ""));
            }
            if (wordCountMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "word_count_max", wordCountMax, ""));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page, ""));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize, ""));
            }
            if (includeNlpData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "include_nlp_data", includeNlpData, ""));
            }
            if (hasNlp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "has_nlp", hasNlp, ""));
            }
            if (theme != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "theme", theme, ""));
            }
            if (notTheme != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_theme", notTheme, ""));
            }
            if (nerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "ner_name", nerName, ""));
            }
            if (titleSentimentMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "title_sentiment_min", titleSentimentMin, ""));
            }
            if (titleSentimentMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "title_sentiment_max", titleSentimentMax, ""));
            }
            if (contentSentimentMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "content_sentiment_min", contentSentimentMin, ""));
            }
            if (contentSentimentMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "content_sentiment_max", contentSentimentMax, ""));
            }
            if (iptcTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "iptc_tags", iptcTags, ""));
            }
            if (notIptcTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_iptc_tags", notIptcTags, ""));
            }

            localVarRequestOptions.Operation = "SearchSimilarApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-token", this.Configuration.GetApiKeyWithPrefix("x-api-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchSimilarGetResponse>("/api/search_similar", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [Get] Search For Similar Articles Request This endpoint returns a list of articles that are similar to the query provided. You also have the option to get similar articles for the results of a search.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"></param>
        /// <param name="searchIn"> (optional, default to &quot;title_content&quot;)</param>
        /// <param name="includeSimilarDocuments"> (optional, default to false)</param>
        /// <param name="similarDocumentsNumber"> (optional, default to 5)</param>
        /// <param name="similarDocumentsFields"> (optional, default to &quot;title,content&quot;)</param>
        /// <param name="predefinedSources"> (optional)</param>
        /// <param name="sources"> (optional)</param>
        /// <param name="notSources"> (optional)</param>
        /// <param name="lang"> (optional)</param>
        /// <param name="notLang"> (optional)</param>
        /// <param name="countries"> (optional)</param>
        /// <param name="notCountries"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="byParseDate"> (optional, default to false)</param>
        /// <param name="publishedDatePrecision"> (optional)</param>
        /// <param name="sortBy"> (optional, default to &quot;relevancy&quot;)</param>
        /// <param name="rankedOnly"> (optional)</param>
        /// <param name="fromRank"> (optional)</param>
        /// <param name="toRank"> (optional)</param>
        /// <param name="isHeadline"> (optional)</param>
        /// <param name="isOpinion"> (optional)</param>
        /// <param name="isPaidContent"> (optional)</param>
        /// <param name="parentUrl"> (optional)</param>
        /// <param name="allLinks"> (optional)</param>
        /// <param name="allDomainLinks"> (optional)</param>
        /// <param name="wordCountMin"> (optional)</param>
        /// <param name="wordCountMax"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="includeNlpData"> (optional)</param>
        /// <param name="hasNlp"> (optional)</param>
        /// <param name="theme"> (optional)</param>
        /// <param name="notTheme"> (optional)</param>
        /// <param name="nerName"> (optional)</param>
        /// <param name="titleSentimentMin"> (optional)</param>
        /// <param name="titleSentimentMax"> (optional)</param>
        /// <param name="contentSentimentMin"> (optional)</param>
        /// <param name="contentSentimentMax"> (optional)</param>
        /// <param name="iptcTags"> (optional)</param>
        /// <param name="notIptcTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchSimilarGetResponse</returns>
        public async System.Threading.Tasks.Task<SearchSimilarGetResponse> GetAsync(string q, string searchIn = default(string), bool? includeSimilarDocuments = default(bool?), int? similarDocumentsNumber = default(int?), string similarDocumentsFields = default(string), Object predefinedSources = default(Object), Object sources = default(Object), Object notSources = default(Object), Object lang = default(Object), Object notLang = default(Object), Object countries = default(Object), Object notCountries = default(Object), From from = default(From), To to = default(To), bool? byParseDate = default(bool?), string publishedDatePrecision = default(string), string sortBy = default(string), string rankedOnly = default(string), int? fromRank = default(int?), int? toRank = default(int?), bool? isHeadline = default(bool?), bool? isOpinion = default(bool?), bool? isPaidContent = default(bool?), Object parentUrl = default(Object), Object allLinks = default(Object), Object allDomainLinks = default(Object), int? wordCountMin = default(int?), int? wordCountMax = default(int?), int? page = default(int?), int? pageSize = default(int?), bool? includeNlpData = default(bool?), bool? hasNlp = default(bool?), string theme = default(string), string notTheme = default(string), string nerName = default(string), double? titleSentimentMin = default(double?), double? titleSentimentMax = default(double?), double? contentSentimentMin = default(double?), double? contentSentimentMax = default(double?), Object iptcTags = default(Object), Object notIptcTags = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Newscatcherapi.Net.Client.ApiResponse<SearchSimilarGetResponse> localVarResponse = await GetWithHttpInfoAsync(q, searchIn, includeSimilarDocuments, similarDocumentsNumber, similarDocumentsFields, predefinedSources, sources, notSources, lang, notLang, countries, notCountries, from, to, byParseDate, publishedDatePrecision, sortBy, rankedOnly, fromRank, toRank, isHeadline, isOpinion, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, includeNlpData, hasNlp, theme, notTheme, nerName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, iptcTags, notIptcTags, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [Get] Search For Similar Articles Request This endpoint returns a list of articles that are similar to the query provided. You also have the option to get similar articles for the results of a search.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"></param>
        /// <param name="searchIn"> (optional, default to &quot;title_content&quot;)</param>
        /// <param name="includeSimilarDocuments"> (optional, default to false)</param>
        /// <param name="similarDocumentsNumber"> (optional, default to 5)</param>
        /// <param name="similarDocumentsFields"> (optional, default to &quot;title,content&quot;)</param>
        /// <param name="predefinedSources"> (optional)</param>
        /// <param name="sources"> (optional)</param>
        /// <param name="notSources"> (optional)</param>
        /// <param name="lang"> (optional)</param>
        /// <param name="notLang"> (optional)</param>
        /// <param name="countries"> (optional)</param>
        /// <param name="notCountries"> (optional)</param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="byParseDate"> (optional, default to false)</param>
        /// <param name="publishedDatePrecision"> (optional)</param>
        /// <param name="sortBy"> (optional, default to &quot;relevancy&quot;)</param>
        /// <param name="rankedOnly"> (optional)</param>
        /// <param name="fromRank"> (optional)</param>
        /// <param name="toRank"> (optional)</param>
        /// <param name="isHeadline"> (optional)</param>
        /// <param name="isOpinion"> (optional)</param>
        /// <param name="isPaidContent"> (optional)</param>
        /// <param name="parentUrl"> (optional)</param>
        /// <param name="allLinks"> (optional)</param>
        /// <param name="allDomainLinks"> (optional)</param>
        /// <param name="wordCountMin"> (optional)</param>
        /// <param name="wordCountMax"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="includeNlpData"> (optional)</param>
        /// <param name="hasNlp"> (optional)</param>
        /// <param name="theme"> (optional)</param>
        /// <param name="notTheme"> (optional)</param>
        /// <param name="nerName"> (optional)</param>
        /// <param name="titleSentimentMin"> (optional)</param>
        /// <param name="titleSentimentMax"> (optional)</param>
        /// <param name="contentSentimentMin"> (optional)</param>
        /// <param name="contentSentimentMax"> (optional)</param>
        /// <param name="iptcTags"> (optional)</param>
        /// <param name="notIptcTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchSimilarGetResponse)</returns>
        public virtual async System.Threading.Tasks.Task<Newscatcherapi.Net.Client.ApiResponse<SearchSimilarGetResponse>> GetWithHttpInfoAsync(string q, string searchIn = default(string), bool? includeSimilarDocuments = default(bool?), int? similarDocumentsNumber = default(int?), string similarDocumentsFields = default(string), Object predefinedSources = default(Object), Object sources = default(Object), Object notSources = default(Object), Object lang = default(Object), Object notLang = default(Object), Object countries = default(Object), Object notCountries = default(Object), From from = default(From), To to = default(To), bool? byParseDate = default(bool?), string publishedDatePrecision = default(string), string sortBy = default(string), string rankedOnly = default(string), int? fromRank = default(int?), int? toRank = default(int?), bool? isHeadline = default(bool?), bool? isOpinion = default(bool?), bool? isPaidContent = default(bool?), Object parentUrl = default(Object), Object allLinks = default(Object), Object allDomainLinks = default(Object), int? wordCountMin = default(int?), int? wordCountMax = default(int?), int? page = default(int?), int? pageSize = default(int?), bool? includeNlpData = default(bool?), bool? hasNlp = default(bool?), string theme = default(string), string notTheme = default(string), string nerName = default(string), double? titleSentimentMin = default(double?), double? titleSentimentMax = default(double?), double? contentSentimentMin = default(double?), double? contentSentimentMax = default(double?), Object iptcTags = default(Object), Object notIptcTags = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'q' is set
            if (q == null)
            {
                throw new Newscatcherapi.Net.Client.ApiException(400, "Missing required parameter 'q' when calling SearchSimilarApi->Get");
            }


            Newscatcherapi.Net.Client.RequestOptions localVarRequestOptions = new Newscatcherapi.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "q", q, ""));
            if (searchIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "search_in", searchIn, ""));
            }
            if (includeSimilarDocuments != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "include_similar_documents", includeSimilarDocuments, ""));
            }
            if (similarDocumentsNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "similar_documents_number", similarDocumentsNumber, ""));
            }
            if (similarDocumentsFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "similar_documents_fields", similarDocumentsFields, ""));
            }
            if (predefinedSources != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "predefined_sources", predefinedSources, ""));
            }
            if (sources != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "sources", sources, ""));
            }
            if (notSources != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_sources", notSources, ""));
            }
            if (lang != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "lang", lang, ""));
            }
            if (notLang != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_lang", notLang, ""));
            }
            if (countries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "countries", countries, ""));
            }
            if (notCountries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_countries", notCountries, ""));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "from_", from, ""));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "to_", to, ""));
            }
            if (byParseDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "by_parse_date", byParseDate, ""));
            }
            if (publishedDatePrecision != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "published_date_precision", publishedDatePrecision, ""));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy, ""));
            }
            if (rankedOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "ranked_only", rankedOnly, ""));
            }
            if (fromRank != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "from_rank", fromRank, ""));
            }
            if (toRank != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "to_rank", toRank, ""));
            }
            if (isHeadline != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "is_headline", isHeadline, ""));
            }
            if (isOpinion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "is_opinion", isOpinion, ""));
            }
            if (isPaidContent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "is_paid_content", isPaidContent, ""));
            }
            if (parentUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "parent_url", parentUrl, ""));
            }
            if (allLinks != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "all_links", allLinks, ""));
            }
            if (allDomainLinks != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "all_domain_links", allDomainLinks, ""));
            }
            if (wordCountMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "word_count_min", wordCountMin, ""));
            }
            if (wordCountMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "word_count_max", wordCountMax, ""));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page, ""));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize, ""));
            }
            if (includeNlpData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "include_nlp_data", includeNlpData, ""));
            }
            if (hasNlp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "has_nlp", hasNlp, ""));
            }
            if (theme != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "theme", theme, ""));
            }
            if (notTheme != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_theme", notTheme, ""));
            }
            if (nerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "ner_name", nerName, ""));
            }
            if (titleSentimentMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "title_sentiment_min", titleSentimentMin, ""));
            }
            if (titleSentimentMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "title_sentiment_max", titleSentimentMax, ""));
            }
            if (contentSentimentMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "content_sentiment_min", contentSentimentMin, ""));
            }
            if (contentSentimentMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "content_sentiment_max", contentSentimentMax, ""));
            }
            if (iptcTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "iptc_tags", iptcTags, ""));
            }
            if (notIptcTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_iptc_tags", notIptcTags, ""));
            }

            localVarRequestOptions.Operation = "SearchSimilarApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-token", this.Configuration.GetApiKeyWithPrefix("x-api-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchSimilarGetResponse>("/api/search_similar", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [Post] Search For Similar Articles Request This endpoint returns a list of articles that are similar to the query provided. You also have the option to get similar articles for the results of a search.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moreLikeThisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchSimilarPostResponse</returns>
        public SearchSimilarPostResponse Post(MoreLikeThisRequest moreLikeThisRequest, int operationIndex = 0)
        {
            Newscatcherapi.Net.Client.ApiResponse<SearchSimilarPostResponse> localVarResponse = PostWithHttpInfo(moreLikeThisRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [Post] Search For Similar Articles Request This endpoint returns a list of articles that are similar to the query provided. You also have the option to get similar articles for the results of a search.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moreLikeThisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchSimilarPostResponse</returns>
        public Newscatcherapi.Net.Client.ApiResponse<SearchSimilarPostResponse> PostWithHttpInfo(MoreLikeThisRequest moreLikeThisRequest, int operationIndex = 0)
        {
            // verify the required parameter 'moreLikeThisRequest' is set
            if (moreLikeThisRequest == null)
            {
                throw new Newscatcherapi.Net.Client.ApiException(400, "Missing required parameter 'moreLikeThisRequest' when calling SearchSimilarApi->Post");
            }

            Newscatcherapi.Net.Client.RequestOptions localVarRequestOptions = new Newscatcherapi.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = moreLikeThisRequest;

            localVarRequestOptions.Operation = "SearchSimilarApi.Post";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-token", this.Configuration.GetApiKeyWithPrefix("x-api-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchSimilarPostResponse>("/api/search_similar", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Post", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [Post] Search For Similar Articles Request This endpoint returns a list of articles that are similar to the query provided. You also have the option to get similar articles for the results of a search.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moreLikeThisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchSimilarPostResponse</returns>
        public async System.Threading.Tasks.Task<SearchSimilarPostResponse> PostAsync(MoreLikeThisRequest moreLikeThisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Newscatcherapi.Net.Client.ApiResponse<SearchSimilarPostResponse> localVarResponse = await PostWithHttpInfoAsync(moreLikeThisRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [Post] Search For Similar Articles Request This endpoint returns a list of articles that are similar to the query provided. You also have the option to get similar articles for the results of a search.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moreLikeThisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchSimilarPostResponse)</returns>
        public virtual async System.Threading.Tasks.Task<Newscatcherapi.Net.Client.ApiResponse<SearchSimilarPostResponse>> PostWithHttpInfoAsync(MoreLikeThisRequest moreLikeThisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'moreLikeThisRequest' is set
            if (moreLikeThisRequest == null)
            {
                throw new Newscatcherapi.Net.Client.ApiException(400, "Missing required parameter 'moreLikeThisRequest' when calling SearchSimilarApi->Post");
            }


            Newscatcherapi.Net.Client.RequestOptions localVarRequestOptions = new Newscatcherapi.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = moreLikeThisRequest;

            localVarRequestOptions.Operation = "SearchSimilarApi.Post";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-token", this.Configuration.GetApiKeyWithPrefix("x-api-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchSimilarPostResponse>("/api/search_similar", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Post", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
