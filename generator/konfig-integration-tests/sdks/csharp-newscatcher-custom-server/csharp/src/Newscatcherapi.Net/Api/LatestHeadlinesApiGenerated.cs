/*
 * NewsCatcher-V3 Production API
 *
 * <img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>
 *
 * The version of the OpenAPI document: 3.2.16
 * Contact: maksym@newscatcherapi.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Newscatcherapi.Net.Client;
using Newscatcherapi.Net.Model;

namespace Newscatcherapi.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILatestHeadlinesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [Get] Search For Latest Headlines Request
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="when"> (optional, default to &quot;7d&quot;)</param>
        /// <param name="byParseDate"> (optional, default to false)</param>
        /// <param name="lang"> (optional)</param>
        /// <param name="notLang"> (optional)</param>
        /// <param name="countries"> (optional)</param>
        /// <param name="notCountries"> (optional)</param>
        /// <param name="sources"> (optional)</param>
        /// <param name="predefinedSources"> (optional)</param>
        /// <param name="notSources"> (optional)</param>
        /// <param name="notAuthorName"> (optional)</param>
        /// <param name="rankedOnly"> (optional)</param>
        /// <param name="isHeadline"> (optional)</param>
        /// <param name="isOpinion"> (optional)</param>
        /// <param name="isPaidContent"> (optional)</param>
        /// <param name="parentUrl"> (optional)</param>
        /// <param name="allLinks"> (optional)</param>
        /// <param name="allDomainLinks"> (optional)</param>
        /// <param name="wordCountMin"> (optional)</param>
        /// <param name="wordCountMax"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="clusteringVariable"> (optional)</param>
        /// <param name="clusteringEnabled"> (optional)</param>
        /// <param name="clusteringThreshold"> (optional)</param>
        /// <param name="includeNlpData"> (optional)</param>
        /// <param name="hasNlp"> (optional)</param>
        /// <param name="theme"> (optional)</param>
        /// <param name="notTheme"> (optional)</param>
        /// <param name="oRGEntityName"> (optional)</param>
        /// <param name="pEREntityName"> (optional)</param>
        /// <param name="lOCEntityName"> (optional)</param>
        /// <param name="mISCEntityName"> (optional)</param>
        /// <param name="titleSentimentMin"> (optional)</param>
        /// <param name="titleSentimentMax"> (optional)</param>
        /// <param name="contentSentimentMin"> (optional)</param>
        /// <param name="contentSentimentMax"> (optional)</param>
        /// <param name="iptcTags"> (optional)</param>
        /// <param name="notIptcTags"> (optional)</param>
        /// <param name="iabTags"> (optional)</param>
        /// <param name="notIabTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LatestHeadlinesGetResponse</returns>
        LatestHeadlinesGetResponse Get(string when = default(string), bool? byParseDate = default(bool?), Object lang = default(Object), Object notLang = default(Object), Object countries = default(Object), Object notCountries = default(Object), Object sources = default(Object), Object predefinedSources = default(Object), Object notSources = default(Object), Object notAuthorName = default(Object), string rankedOnly = default(string), bool? isHeadline = default(bool?), bool? isOpinion = default(bool?), bool? isPaidContent = default(bool?), Object parentUrl = default(Object), Object allLinks = default(Object), Object allDomainLinks = default(Object), int? wordCountMin = default(int?), int? wordCountMax = default(int?), int? page = default(int?), int? pageSize = default(int?), string clusteringVariable = default(string), bool? clusteringEnabled = default(bool?), double? clusteringThreshold = default(double?), bool? includeNlpData = default(bool?), bool? hasNlp = default(bool?), string theme = default(string), string notTheme = default(string), string oRGEntityName = default(string), string pEREntityName = default(string), string lOCEntityName = default(string), string mISCEntityName = default(string), double? titleSentimentMin = default(double?), double? titleSentimentMax = default(double?), double? contentSentimentMin = default(double?), double? contentSentimentMax = default(double?), Object iptcTags = default(Object), Object notIptcTags = default(Object), Object iabTags = default(Object), Object notIabTags = default(Object), int operationIndex = 0);

        /// <summary>
        /// [Get] Search For Latest Headlines Request
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="when"> (optional, default to &quot;7d&quot;)</param>
        /// <param name="byParseDate"> (optional, default to false)</param>
        /// <param name="lang"> (optional)</param>
        /// <param name="notLang"> (optional)</param>
        /// <param name="countries"> (optional)</param>
        /// <param name="notCountries"> (optional)</param>
        /// <param name="sources"> (optional)</param>
        /// <param name="predefinedSources"> (optional)</param>
        /// <param name="notSources"> (optional)</param>
        /// <param name="notAuthorName"> (optional)</param>
        /// <param name="rankedOnly"> (optional)</param>
        /// <param name="isHeadline"> (optional)</param>
        /// <param name="isOpinion"> (optional)</param>
        /// <param name="isPaidContent"> (optional)</param>
        /// <param name="parentUrl"> (optional)</param>
        /// <param name="allLinks"> (optional)</param>
        /// <param name="allDomainLinks"> (optional)</param>
        /// <param name="wordCountMin"> (optional)</param>
        /// <param name="wordCountMax"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="clusteringVariable"> (optional)</param>
        /// <param name="clusteringEnabled"> (optional)</param>
        /// <param name="clusteringThreshold"> (optional)</param>
        /// <param name="includeNlpData"> (optional)</param>
        /// <param name="hasNlp"> (optional)</param>
        /// <param name="theme"> (optional)</param>
        /// <param name="notTheme"> (optional)</param>
        /// <param name="oRGEntityName"> (optional)</param>
        /// <param name="pEREntityName"> (optional)</param>
        /// <param name="lOCEntityName"> (optional)</param>
        /// <param name="mISCEntityName"> (optional)</param>
        /// <param name="titleSentimentMin"> (optional)</param>
        /// <param name="titleSentimentMax"> (optional)</param>
        /// <param name="contentSentimentMin"> (optional)</param>
        /// <param name="contentSentimentMax"> (optional)</param>
        /// <param name="iptcTags"> (optional)</param>
        /// <param name="notIptcTags"> (optional)</param>
        /// <param name="iabTags"> (optional)</param>
        /// <param name="notIabTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LatestHeadlinesGetResponse</returns>
        ApiResponse<LatestHeadlinesGetResponse> GetWithHttpInfo(string when = default(string), bool? byParseDate = default(bool?), Object lang = default(Object), Object notLang = default(Object), Object countries = default(Object), Object notCountries = default(Object), Object sources = default(Object), Object predefinedSources = default(Object), Object notSources = default(Object), Object notAuthorName = default(Object), string rankedOnly = default(string), bool? isHeadline = default(bool?), bool? isOpinion = default(bool?), bool? isPaidContent = default(bool?), Object parentUrl = default(Object), Object allLinks = default(Object), Object allDomainLinks = default(Object), int? wordCountMin = default(int?), int? wordCountMax = default(int?), int? page = default(int?), int? pageSize = default(int?), string clusteringVariable = default(string), bool? clusteringEnabled = default(bool?), double? clusteringThreshold = default(double?), bool? includeNlpData = default(bool?), bool? hasNlp = default(bool?), string theme = default(string), string notTheme = default(string), string oRGEntityName = default(string), string pEREntityName = default(string), string lOCEntityName = default(string), string mISCEntityName = default(string), double? titleSentimentMin = default(double?), double? titleSentimentMax = default(double?), double? contentSentimentMin = default(double?), double? contentSentimentMax = default(double?), Object iptcTags = default(Object), Object notIptcTags = default(Object), Object iabTags = default(Object), Object notIabTags = default(Object), int operationIndex = 0);
        /// <summary>
        /// [Post] Search For Latest Headlines Request
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestHeadlinesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LatestHeadlinesPostResponse</returns>
        LatestHeadlinesPostResponse Post(LatestHeadlinesRequest latestHeadlinesRequest, int operationIndex = 0);

        /// <summary>
        /// [Post] Search For Latest Headlines Request
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestHeadlinesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LatestHeadlinesPostResponse</returns>
        ApiResponse<LatestHeadlinesPostResponse> PostWithHttpInfo(LatestHeadlinesRequest latestHeadlinesRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILatestHeadlinesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// [Get] Search For Latest Headlines Request
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="when"> (optional, default to &quot;7d&quot;)</param>
        /// <param name="byParseDate"> (optional, default to false)</param>
        /// <param name="lang"> (optional)</param>
        /// <param name="notLang"> (optional)</param>
        /// <param name="countries"> (optional)</param>
        /// <param name="notCountries"> (optional)</param>
        /// <param name="sources"> (optional)</param>
        /// <param name="predefinedSources"> (optional)</param>
        /// <param name="notSources"> (optional)</param>
        /// <param name="notAuthorName"> (optional)</param>
        /// <param name="rankedOnly"> (optional)</param>
        /// <param name="isHeadline"> (optional)</param>
        /// <param name="isOpinion"> (optional)</param>
        /// <param name="isPaidContent"> (optional)</param>
        /// <param name="parentUrl"> (optional)</param>
        /// <param name="allLinks"> (optional)</param>
        /// <param name="allDomainLinks"> (optional)</param>
        /// <param name="wordCountMin"> (optional)</param>
        /// <param name="wordCountMax"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="clusteringVariable"> (optional)</param>
        /// <param name="clusteringEnabled"> (optional)</param>
        /// <param name="clusteringThreshold"> (optional)</param>
        /// <param name="includeNlpData"> (optional)</param>
        /// <param name="hasNlp"> (optional)</param>
        /// <param name="theme"> (optional)</param>
        /// <param name="notTheme"> (optional)</param>
        /// <param name="oRGEntityName"> (optional)</param>
        /// <param name="pEREntityName"> (optional)</param>
        /// <param name="lOCEntityName"> (optional)</param>
        /// <param name="mISCEntityName"> (optional)</param>
        /// <param name="titleSentimentMin"> (optional)</param>
        /// <param name="titleSentimentMax"> (optional)</param>
        /// <param name="contentSentimentMin"> (optional)</param>
        /// <param name="contentSentimentMax"> (optional)</param>
        /// <param name="iptcTags"> (optional)</param>
        /// <param name="notIptcTags"> (optional)</param>
        /// <param name="iabTags"> (optional)</param>
        /// <param name="notIabTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LatestHeadlinesGetResponse</returns>
        System.Threading.Tasks.Task<LatestHeadlinesGetResponse> GetAsync(string when = default(string), bool? byParseDate = default(bool?), Object lang = default(Object), Object notLang = default(Object), Object countries = default(Object), Object notCountries = default(Object), Object sources = default(Object), Object predefinedSources = default(Object), Object notSources = default(Object), Object notAuthorName = default(Object), string rankedOnly = default(string), bool? isHeadline = default(bool?), bool? isOpinion = default(bool?), bool? isPaidContent = default(bool?), Object parentUrl = default(Object), Object allLinks = default(Object), Object allDomainLinks = default(Object), int? wordCountMin = default(int?), int? wordCountMax = default(int?), int? page = default(int?), int? pageSize = default(int?), string clusteringVariable = default(string), bool? clusteringEnabled = default(bool?), double? clusteringThreshold = default(double?), bool? includeNlpData = default(bool?), bool? hasNlp = default(bool?), string theme = default(string), string notTheme = default(string), string oRGEntityName = default(string), string pEREntityName = default(string), string lOCEntityName = default(string), string mISCEntityName = default(string), double? titleSentimentMin = default(double?), double? titleSentimentMax = default(double?), double? contentSentimentMin = default(double?), double? contentSentimentMax = default(double?), Object iptcTags = default(Object), Object notIptcTags = default(Object), Object iabTags = default(Object), Object notIabTags = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [Get] Search For Latest Headlines Request
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="when"> (optional, default to &quot;7d&quot;)</param>
        /// <param name="byParseDate"> (optional, default to false)</param>
        /// <param name="lang"> (optional)</param>
        /// <param name="notLang"> (optional)</param>
        /// <param name="countries"> (optional)</param>
        /// <param name="notCountries"> (optional)</param>
        /// <param name="sources"> (optional)</param>
        /// <param name="predefinedSources"> (optional)</param>
        /// <param name="notSources"> (optional)</param>
        /// <param name="notAuthorName"> (optional)</param>
        /// <param name="rankedOnly"> (optional)</param>
        /// <param name="isHeadline"> (optional)</param>
        /// <param name="isOpinion"> (optional)</param>
        /// <param name="isPaidContent"> (optional)</param>
        /// <param name="parentUrl"> (optional)</param>
        /// <param name="allLinks"> (optional)</param>
        /// <param name="allDomainLinks"> (optional)</param>
        /// <param name="wordCountMin"> (optional)</param>
        /// <param name="wordCountMax"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="clusteringVariable"> (optional)</param>
        /// <param name="clusteringEnabled"> (optional)</param>
        /// <param name="clusteringThreshold"> (optional)</param>
        /// <param name="includeNlpData"> (optional)</param>
        /// <param name="hasNlp"> (optional)</param>
        /// <param name="theme"> (optional)</param>
        /// <param name="notTheme"> (optional)</param>
        /// <param name="oRGEntityName"> (optional)</param>
        /// <param name="pEREntityName"> (optional)</param>
        /// <param name="lOCEntityName"> (optional)</param>
        /// <param name="mISCEntityName"> (optional)</param>
        /// <param name="titleSentimentMin"> (optional)</param>
        /// <param name="titleSentimentMax"> (optional)</param>
        /// <param name="contentSentimentMin"> (optional)</param>
        /// <param name="contentSentimentMax"> (optional)</param>
        /// <param name="iptcTags"> (optional)</param>
        /// <param name="notIptcTags"> (optional)</param>
        /// <param name="iabTags"> (optional)</param>
        /// <param name="notIabTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LatestHeadlinesGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestHeadlinesGetResponse>> GetWithHttpInfoAsync(string when = default(string), bool? byParseDate = default(bool?), Object lang = default(Object), Object notLang = default(Object), Object countries = default(Object), Object notCountries = default(Object), Object sources = default(Object), Object predefinedSources = default(Object), Object notSources = default(Object), Object notAuthorName = default(Object), string rankedOnly = default(string), bool? isHeadline = default(bool?), bool? isOpinion = default(bool?), bool? isPaidContent = default(bool?), Object parentUrl = default(Object), Object allLinks = default(Object), Object allDomainLinks = default(Object), int? wordCountMin = default(int?), int? wordCountMax = default(int?), int? page = default(int?), int? pageSize = default(int?), string clusteringVariable = default(string), bool? clusteringEnabled = default(bool?), double? clusteringThreshold = default(double?), bool? includeNlpData = default(bool?), bool? hasNlp = default(bool?), string theme = default(string), string notTheme = default(string), string oRGEntityName = default(string), string pEREntityName = default(string), string lOCEntityName = default(string), string mISCEntityName = default(string), double? titleSentimentMin = default(double?), double? titleSentimentMax = default(double?), double? contentSentimentMin = default(double?), double? contentSentimentMax = default(double?), Object iptcTags = default(Object), Object notIptcTags = default(Object), Object iabTags = default(Object), Object notIabTags = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [Post] Search For Latest Headlines Request
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestHeadlinesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LatestHeadlinesPostResponse</returns>
        System.Threading.Tasks.Task<LatestHeadlinesPostResponse> PostAsync(LatestHeadlinesRequest latestHeadlinesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [Post] Search For Latest Headlines Request
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestHeadlinesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LatestHeadlinesPostResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestHeadlinesPostResponse>> PostWithHttpInfoAsync(LatestHeadlinesRequest latestHeadlinesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILatestHeadlinesApi : ILatestHeadlinesApiSync, ILatestHeadlinesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LatestHeadlinesApiGenerated : ILatestHeadlinesApi
    {
        private Newscatcherapi.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LatestHeadlinesApiGenerated"/> class.
        /// </summary>
        /// <returns></returns>
        public LatestHeadlinesApiGenerated() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LatestHeadlinesApiGenerated"/> class.
        /// </summary>
        /// <returns></returns>
        public LatestHeadlinesApiGenerated(string basePath)
        {
            this.Configuration = Newscatcherapi.Net.Client.Configuration.MergeConfigurations(
                Newscatcherapi.Net.Client.GlobalConfiguration.Instance,
                new Newscatcherapi.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Newscatcherapi.Net.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Newscatcherapi.Net.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Newscatcherapi.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LatestHeadlinesApiGenerated"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LatestHeadlinesApiGenerated(Newscatcherapi.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Newscatcherapi.Net.Client.Configuration.MergeConfigurations(
                Newscatcherapi.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Newscatcherapi.Net.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Newscatcherapi.Net.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Newscatcherapi.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LatestHeadlinesApiGenerated"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LatestHeadlinesApiGenerated(Newscatcherapi.Net.Client.ISynchronousClient client, Newscatcherapi.Net.Client.IAsynchronousClient asyncClient, Newscatcherapi.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Newscatcherapi.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Newscatcherapi.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Newscatcherapi.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Newscatcherapi.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Newscatcherapi.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// [Get] Search For Latest Headlines Request This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="when"> (optional, default to &quot;7d&quot;)</param>
        /// <param name="byParseDate"> (optional, default to false)</param>
        /// <param name="lang"> (optional)</param>
        /// <param name="notLang"> (optional)</param>
        /// <param name="countries"> (optional)</param>
        /// <param name="notCountries"> (optional)</param>
        /// <param name="sources"> (optional)</param>
        /// <param name="predefinedSources"> (optional)</param>
        /// <param name="notSources"> (optional)</param>
        /// <param name="notAuthorName"> (optional)</param>
        /// <param name="rankedOnly"> (optional)</param>
        /// <param name="isHeadline"> (optional)</param>
        /// <param name="isOpinion"> (optional)</param>
        /// <param name="isPaidContent"> (optional)</param>
        /// <param name="parentUrl"> (optional)</param>
        /// <param name="allLinks"> (optional)</param>
        /// <param name="allDomainLinks"> (optional)</param>
        /// <param name="wordCountMin"> (optional)</param>
        /// <param name="wordCountMax"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="clusteringVariable"> (optional)</param>
        /// <param name="clusteringEnabled"> (optional)</param>
        /// <param name="clusteringThreshold"> (optional)</param>
        /// <param name="includeNlpData"> (optional)</param>
        /// <param name="hasNlp"> (optional)</param>
        /// <param name="theme"> (optional)</param>
        /// <param name="notTheme"> (optional)</param>
        /// <param name="oRGEntityName"> (optional)</param>
        /// <param name="pEREntityName"> (optional)</param>
        /// <param name="lOCEntityName"> (optional)</param>
        /// <param name="mISCEntityName"> (optional)</param>
        /// <param name="titleSentimentMin"> (optional)</param>
        /// <param name="titleSentimentMax"> (optional)</param>
        /// <param name="contentSentimentMin"> (optional)</param>
        /// <param name="contentSentimentMax"> (optional)</param>
        /// <param name="iptcTags"> (optional)</param>
        /// <param name="notIptcTags"> (optional)</param>
        /// <param name="iabTags"> (optional)</param>
        /// <param name="notIabTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LatestHeadlinesGetResponse</returns>
        public LatestHeadlinesGetResponse Get(string when = default(string), bool? byParseDate = default(bool?), Object lang = default(Object), Object notLang = default(Object), Object countries = default(Object), Object notCountries = default(Object), Object sources = default(Object), Object predefinedSources = default(Object), Object notSources = default(Object), Object notAuthorName = default(Object), string rankedOnly = default(string), bool? isHeadline = default(bool?), bool? isOpinion = default(bool?), bool? isPaidContent = default(bool?), Object parentUrl = default(Object), Object allLinks = default(Object), Object allDomainLinks = default(Object), int? wordCountMin = default(int?), int? wordCountMax = default(int?), int? page = default(int?), int? pageSize = default(int?), string clusteringVariable = default(string), bool? clusteringEnabled = default(bool?), double? clusteringThreshold = default(double?), bool? includeNlpData = default(bool?), bool? hasNlp = default(bool?), string theme = default(string), string notTheme = default(string), string oRGEntityName = default(string), string pEREntityName = default(string), string lOCEntityName = default(string), string mISCEntityName = default(string), double? titleSentimentMin = default(double?), double? titleSentimentMax = default(double?), double? contentSentimentMin = default(double?), double? contentSentimentMax = default(double?), Object iptcTags = default(Object), Object notIptcTags = default(Object), Object iabTags = default(Object), Object notIabTags = default(Object), int operationIndex = 0)
        {
            Newscatcherapi.Net.Client.ApiResponse<LatestHeadlinesGetResponse> localVarResponse = GetWithHttpInfo(when, byParseDate, lang, notLang, countries, notCountries, sources, predefinedSources, notSources, notAuthorName, rankedOnly, isHeadline, isOpinion, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, clusteringVariable, clusteringEnabled, clusteringThreshold, includeNlpData, hasNlp, theme, notTheme, oRGEntityName, pEREntityName, lOCEntityName, mISCEntityName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, iptcTags, notIptcTags, iabTags, notIabTags);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [Get] Search For Latest Headlines Request This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="when"> (optional, default to &quot;7d&quot;)</param>
        /// <param name="byParseDate"> (optional, default to false)</param>
        /// <param name="lang"> (optional)</param>
        /// <param name="notLang"> (optional)</param>
        /// <param name="countries"> (optional)</param>
        /// <param name="notCountries"> (optional)</param>
        /// <param name="sources"> (optional)</param>
        /// <param name="predefinedSources"> (optional)</param>
        /// <param name="notSources"> (optional)</param>
        /// <param name="notAuthorName"> (optional)</param>
        /// <param name="rankedOnly"> (optional)</param>
        /// <param name="isHeadline"> (optional)</param>
        /// <param name="isOpinion"> (optional)</param>
        /// <param name="isPaidContent"> (optional)</param>
        /// <param name="parentUrl"> (optional)</param>
        /// <param name="allLinks"> (optional)</param>
        /// <param name="allDomainLinks"> (optional)</param>
        /// <param name="wordCountMin"> (optional)</param>
        /// <param name="wordCountMax"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="clusteringVariable"> (optional)</param>
        /// <param name="clusteringEnabled"> (optional)</param>
        /// <param name="clusteringThreshold"> (optional)</param>
        /// <param name="includeNlpData"> (optional)</param>
        /// <param name="hasNlp"> (optional)</param>
        /// <param name="theme"> (optional)</param>
        /// <param name="notTheme"> (optional)</param>
        /// <param name="oRGEntityName"> (optional)</param>
        /// <param name="pEREntityName"> (optional)</param>
        /// <param name="lOCEntityName"> (optional)</param>
        /// <param name="mISCEntityName"> (optional)</param>
        /// <param name="titleSentimentMin"> (optional)</param>
        /// <param name="titleSentimentMax"> (optional)</param>
        /// <param name="contentSentimentMin"> (optional)</param>
        /// <param name="contentSentimentMax"> (optional)</param>
        /// <param name="iptcTags"> (optional)</param>
        /// <param name="notIptcTags"> (optional)</param>
        /// <param name="iabTags"> (optional)</param>
        /// <param name="notIabTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LatestHeadlinesGetResponse</returns>
        public Newscatcherapi.Net.Client.ApiResponse<LatestHeadlinesGetResponse> GetWithHttpInfo(string when = default(string), bool? byParseDate = default(bool?), Object lang = default(Object), Object notLang = default(Object), Object countries = default(Object), Object notCountries = default(Object), Object sources = default(Object), Object predefinedSources = default(Object), Object notSources = default(Object), Object notAuthorName = default(Object), string rankedOnly = default(string), bool? isHeadline = default(bool?), bool? isOpinion = default(bool?), bool? isPaidContent = default(bool?), Object parentUrl = default(Object), Object allLinks = default(Object), Object allDomainLinks = default(Object), int? wordCountMin = default(int?), int? wordCountMax = default(int?), int? page = default(int?), int? pageSize = default(int?), string clusteringVariable = default(string), bool? clusteringEnabled = default(bool?), double? clusteringThreshold = default(double?), bool? includeNlpData = default(bool?), bool? hasNlp = default(bool?), string theme = default(string), string notTheme = default(string), string oRGEntityName = default(string), string pEREntityName = default(string), string lOCEntityName = default(string), string mISCEntityName = default(string), double? titleSentimentMin = default(double?), double? titleSentimentMax = default(double?), double? contentSentimentMin = default(double?), double? contentSentimentMax = default(double?), Object iptcTags = default(Object), Object notIptcTags = default(Object), Object iabTags = default(Object), Object notIabTags = default(Object), int operationIndex = 0)
        {
            Newscatcherapi.Net.Client.RequestOptions localVarRequestOptions = new Newscatcherapi.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (when != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "when", when, ""));
            }
            if (byParseDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "by_parse_date", byParseDate, ""));
            }
            if (lang != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "lang", lang, ""));
            }
            if (notLang != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_lang", notLang, ""));
            }
            if (countries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "countries", countries, ""));
            }
            if (notCountries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_countries", notCountries, ""));
            }
            if (sources != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "sources", sources, ""));
            }
            if (predefinedSources != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "predefined_sources", predefinedSources, ""));
            }
            if (notSources != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_sources", notSources, ""));
            }
            if (notAuthorName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_author_name", notAuthorName, ""));
            }
            if (rankedOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "ranked_only", rankedOnly, ""));
            }
            if (isHeadline != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "is_headline", isHeadline, ""));
            }
            if (isOpinion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "is_opinion", isOpinion, ""));
            }
            if (isPaidContent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "is_paid_content", isPaidContent, ""));
            }
            if (parentUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "parent_url", parentUrl, ""));
            }
            if (allLinks != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "all_links", allLinks, ""));
            }
            if (allDomainLinks != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "all_domain_links", allDomainLinks, ""));
            }
            if (wordCountMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "word_count_min", wordCountMin, ""));
            }
            if (wordCountMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "word_count_max", wordCountMax, ""));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page, ""));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize, ""));
            }
            if (clusteringVariable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "clustering_variable", clusteringVariable, ""));
            }
            if (clusteringEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "clustering_enabled", clusteringEnabled, ""));
            }
            if (clusteringThreshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "clustering_threshold", clusteringThreshold, ""));
            }
            if (includeNlpData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "include_nlp_data", includeNlpData, ""));
            }
            if (hasNlp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "has_nlp", hasNlp, ""));
            }
            if (theme != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "theme", theme, ""));
            }
            if (notTheme != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_theme", notTheme, ""));
            }
            if (oRGEntityName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "ORG_entity_name", oRGEntityName, ""));
            }
            if (pEREntityName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "PER_entity_name", pEREntityName, ""));
            }
            if (lOCEntityName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "LOC_entity_name", lOCEntityName, ""));
            }
            if (mISCEntityName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "MISC_entity_name", mISCEntityName, ""));
            }
            if (titleSentimentMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "title_sentiment_min", titleSentimentMin, ""));
            }
            if (titleSentimentMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "title_sentiment_max", titleSentimentMax, ""));
            }
            if (contentSentimentMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "content_sentiment_min", contentSentimentMin, ""));
            }
            if (contentSentimentMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "content_sentiment_max", contentSentimentMax, ""));
            }
            if (iptcTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "iptc_tags", iptcTags, ""));
            }
            if (notIptcTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_iptc_tags", notIptcTags, ""));
            }
            if (iabTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "iab_tags", iabTags, ""));
            }
            if (notIabTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_iab_tags", notIabTags, ""));
            }

            localVarRequestOptions.Operation = "LatestHeadlinesApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-token", this.Configuration.GetApiKeyWithPrefix("x-api-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LatestHeadlinesGetResponse>("/api/latest_headlines", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [Get] Search For Latest Headlines Request This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="when"> (optional, default to &quot;7d&quot;)</param>
        /// <param name="byParseDate"> (optional, default to false)</param>
        /// <param name="lang"> (optional)</param>
        /// <param name="notLang"> (optional)</param>
        /// <param name="countries"> (optional)</param>
        /// <param name="notCountries"> (optional)</param>
        /// <param name="sources"> (optional)</param>
        /// <param name="predefinedSources"> (optional)</param>
        /// <param name="notSources"> (optional)</param>
        /// <param name="notAuthorName"> (optional)</param>
        /// <param name="rankedOnly"> (optional)</param>
        /// <param name="isHeadline"> (optional)</param>
        /// <param name="isOpinion"> (optional)</param>
        /// <param name="isPaidContent"> (optional)</param>
        /// <param name="parentUrl"> (optional)</param>
        /// <param name="allLinks"> (optional)</param>
        /// <param name="allDomainLinks"> (optional)</param>
        /// <param name="wordCountMin"> (optional)</param>
        /// <param name="wordCountMax"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="clusteringVariable"> (optional)</param>
        /// <param name="clusteringEnabled"> (optional)</param>
        /// <param name="clusteringThreshold"> (optional)</param>
        /// <param name="includeNlpData"> (optional)</param>
        /// <param name="hasNlp"> (optional)</param>
        /// <param name="theme"> (optional)</param>
        /// <param name="notTheme"> (optional)</param>
        /// <param name="oRGEntityName"> (optional)</param>
        /// <param name="pEREntityName"> (optional)</param>
        /// <param name="lOCEntityName"> (optional)</param>
        /// <param name="mISCEntityName"> (optional)</param>
        /// <param name="titleSentimentMin"> (optional)</param>
        /// <param name="titleSentimentMax"> (optional)</param>
        /// <param name="contentSentimentMin"> (optional)</param>
        /// <param name="contentSentimentMax"> (optional)</param>
        /// <param name="iptcTags"> (optional)</param>
        /// <param name="notIptcTags"> (optional)</param>
        /// <param name="iabTags"> (optional)</param>
        /// <param name="notIabTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LatestHeadlinesGetResponse</returns>
        public async System.Threading.Tasks.Task<LatestHeadlinesGetResponse> GetAsync(string when = default(string), bool? byParseDate = default(bool?), Object lang = default(Object), Object notLang = default(Object), Object countries = default(Object), Object notCountries = default(Object), Object sources = default(Object), Object predefinedSources = default(Object), Object notSources = default(Object), Object notAuthorName = default(Object), string rankedOnly = default(string), bool? isHeadline = default(bool?), bool? isOpinion = default(bool?), bool? isPaidContent = default(bool?), Object parentUrl = default(Object), Object allLinks = default(Object), Object allDomainLinks = default(Object), int? wordCountMin = default(int?), int? wordCountMax = default(int?), int? page = default(int?), int? pageSize = default(int?), string clusteringVariable = default(string), bool? clusteringEnabled = default(bool?), double? clusteringThreshold = default(double?), bool? includeNlpData = default(bool?), bool? hasNlp = default(bool?), string theme = default(string), string notTheme = default(string), string oRGEntityName = default(string), string pEREntityName = default(string), string lOCEntityName = default(string), string mISCEntityName = default(string), double? titleSentimentMin = default(double?), double? titleSentimentMax = default(double?), double? contentSentimentMin = default(double?), double? contentSentimentMax = default(double?), Object iptcTags = default(Object), Object notIptcTags = default(Object), Object iabTags = default(Object), Object notIabTags = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Newscatcherapi.Net.Client.ApiResponse<LatestHeadlinesGetResponse> localVarResponse = await GetWithHttpInfoAsync(when, byParseDate, lang, notLang, countries, notCountries, sources, predefinedSources, notSources, notAuthorName, rankedOnly, isHeadline, isOpinion, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, clusteringVariable, clusteringEnabled, clusteringThreshold, includeNlpData, hasNlp, theme, notTheme, oRGEntityName, pEREntityName, lOCEntityName, mISCEntityName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, iptcTags, notIptcTags, iabTags, notIabTags, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [Get] Search For Latest Headlines Request This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="when"> (optional, default to &quot;7d&quot;)</param>
        /// <param name="byParseDate"> (optional, default to false)</param>
        /// <param name="lang"> (optional)</param>
        /// <param name="notLang"> (optional)</param>
        /// <param name="countries"> (optional)</param>
        /// <param name="notCountries"> (optional)</param>
        /// <param name="sources"> (optional)</param>
        /// <param name="predefinedSources"> (optional)</param>
        /// <param name="notSources"> (optional)</param>
        /// <param name="notAuthorName"> (optional)</param>
        /// <param name="rankedOnly"> (optional)</param>
        /// <param name="isHeadline"> (optional)</param>
        /// <param name="isOpinion"> (optional)</param>
        /// <param name="isPaidContent"> (optional)</param>
        /// <param name="parentUrl"> (optional)</param>
        /// <param name="allLinks"> (optional)</param>
        /// <param name="allDomainLinks"> (optional)</param>
        /// <param name="wordCountMin"> (optional)</param>
        /// <param name="wordCountMax"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="clusteringVariable"> (optional)</param>
        /// <param name="clusteringEnabled"> (optional)</param>
        /// <param name="clusteringThreshold"> (optional)</param>
        /// <param name="includeNlpData"> (optional)</param>
        /// <param name="hasNlp"> (optional)</param>
        /// <param name="theme"> (optional)</param>
        /// <param name="notTheme"> (optional)</param>
        /// <param name="oRGEntityName"> (optional)</param>
        /// <param name="pEREntityName"> (optional)</param>
        /// <param name="lOCEntityName"> (optional)</param>
        /// <param name="mISCEntityName"> (optional)</param>
        /// <param name="titleSentimentMin"> (optional)</param>
        /// <param name="titleSentimentMax"> (optional)</param>
        /// <param name="contentSentimentMin"> (optional)</param>
        /// <param name="contentSentimentMax"> (optional)</param>
        /// <param name="iptcTags"> (optional)</param>
        /// <param name="notIptcTags"> (optional)</param>
        /// <param name="iabTags"> (optional)</param>
        /// <param name="notIabTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LatestHeadlinesGetResponse)</returns>
        public virtual async System.Threading.Tasks.Task<Newscatcherapi.Net.Client.ApiResponse<LatestHeadlinesGetResponse>> GetWithHttpInfoAsync(string when = default(string), bool? byParseDate = default(bool?), Object lang = default(Object), Object notLang = default(Object), Object countries = default(Object), Object notCountries = default(Object), Object sources = default(Object), Object predefinedSources = default(Object), Object notSources = default(Object), Object notAuthorName = default(Object), string rankedOnly = default(string), bool? isHeadline = default(bool?), bool? isOpinion = default(bool?), bool? isPaidContent = default(bool?), Object parentUrl = default(Object), Object allLinks = default(Object), Object allDomainLinks = default(Object), int? wordCountMin = default(int?), int? wordCountMax = default(int?), int? page = default(int?), int? pageSize = default(int?), string clusteringVariable = default(string), bool? clusteringEnabled = default(bool?), double? clusteringThreshold = default(double?), bool? includeNlpData = default(bool?), bool? hasNlp = default(bool?), string theme = default(string), string notTheme = default(string), string oRGEntityName = default(string), string pEREntityName = default(string), string lOCEntityName = default(string), string mISCEntityName = default(string), double? titleSentimentMin = default(double?), double? titleSentimentMax = default(double?), double? contentSentimentMin = default(double?), double? contentSentimentMax = default(double?), Object iptcTags = default(Object), Object notIptcTags = default(Object), Object iabTags = default(Object), Object notIabTags = default(Object), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Newscatcherapi.Net.Client.RequestOptions localVarRequestOptions = new Newscatcherapi.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (when != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "when", when, ""));
            }
            if (byParseDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "by_parse_date", byParseDate, ""));
            }
            if (lang != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "lang", lang, ""));
            }
            if (notLang != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_lang", notLang, ""));
            }
            if (countries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "countries", countries, ""));
            }
            if (notCountries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_countries", notCountries, ""));
            }
            if (sources != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "sources", sources, ""));
            }
            if (predefinedSources != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "predefined_sources", predefinedSources, ""));
            }
            if (notSources != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_sources", notSources, ""));
            }
            if (notAuthorName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_author_name", notAuthorName, ""));
            }
            if (rankedOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "ranked_only", rankedOnly, ""));
            }
            if (isHeadline != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "is_headline", isHeadline, ""));
            }
            if (isOpinion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "is_opinion", isOpinion, ""));
            }
            if (isPaidContent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "is_paid_content", isPaidContent, ""));
            }
            if (parentUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "parent_url", parentUrl, ""));
            }
            if (allLinks != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "all_links", allLinks, ""));
            }
            if (allDomainLinks != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "all_domain_links", allDomainLinks, ""));
            }
            if (wordCountMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "word_count_min", wordCountMin, ""));
            }
            if (wordCountMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "word_count_max", wordCountMax, ""));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page, ""));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize, ""));
            }
            if (clusteringVariable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "clustering_variable", clusteringVariable, ""));
            }
            if (clusteringEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "clustering_enabled", clusteringEnabled, ""));
            }
            if (clusteringThreshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "clustering_threshold", clusteringThreshold, ""));
            }
            if (includeNlpData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "include_nlp_data", includeNlpData, ""));
            }
            if (hasNlp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "has_nlp", hasNlp, ""));
            }
            if (theme != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "theme", theme, ""));
            }
            if (notTheme != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_theme", notTheme, ""));
            }
            if (oRGEntityName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "ORG_entity_name", oRGEntityName, ""));
            }
            if (pEREntityName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "PER_entity_name", pEREntityName, ""));
            }
            if (lOCEntityName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "LOC_entity_name", lOCEntityName, ""));
            }
            if (mISCEntityName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "MISC_entity_name", mISCEntityName, ""));
            }
            if (titleSentimentMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "title_sentiment_min", titleSentimentMin, ""));
            }
            if (titleSentimentMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "title_sentiment_max", titleSentimentMax, ""));
            }
            if (contentSentimentMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "content_sentiment_min", contentSentimentMin, ""));
            }
            if (contentSentimentMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "content_sentiment_max", contentSentimentMax, ""));
            }
            if (iptcTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "iptc_tags", iptcTags, ""));
            }
            if (notIptcTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_iptc_tags", notIptcTags, ""));
            }
            if (iabTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "iab_tags", iabTags, ""));
            }
            if (notIabTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "not_iab_tags", notIabTags, ""));
            }

            localVarRequestOptions.Operation = "LatestHeadlinesApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-token", this.Configuration.GetApiKeyWithPrefix("x-api-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LatestHeadlinesGetResponse>("/api/latest_headlines", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [Post] Search For Latest Headlines Request This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestHeadlinesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LatestHeadlinesPostResponse</returns>
        public LatestHeadlinesPostResponse Post(LatestHeadlinesRequest latestHeadlinesRequest, int operationIndex = 0)
        {
            Newscatcherapi.Net.Client.ApiResponse<LatestHeadlinesPostResponse> localVarResponse = PostWithHttpInfo(latestHeadlinesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [Post] Search For Latest Headlines Request This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestHeadlinesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LatestHeadlinesPostResponse</returns>
        public Newscatcherapi.Net.Client.ApiResponse<LatestHeadlinesPostResponse> PostWithHttpInfo(LatestHeadlinesRequest latestHeadlinesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'latestHeadlinesRequest' is set
            if (latestHeadlinesRequest == null)
            {
                throw new Newscatcherapi.Net.Client.ApiException(400, "Missing required parameter 'latestHeadlinesRequest' when calling LatestHeadlinesApi->Post");
            }

            Newscatcherapi.Net.Client.RequestOptions localVarRequestOptions = new Newscatcherapi.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = latestHeadlinesRequest;

            localVarRequestOptions.Operation = "LatestHeadlinesApi.Post";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-token", this.Configuration.GetApiKeyWithPrefix("x-api-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LatestHeadlinesPostResponse>("/api/latest_headlines", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Post", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [Post] Search For Latest Headlines Request This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestHeadlinesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LatestHeadlinesPostResponse</returns>
        public async System.Threading.Tasks.Task<LatestHeadlinesPostResponse> PostAsync(LatestHeadlinesRequest latestHeadlinesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Newscatcherapi.Net.Client.ApiResponse<LatestHeadlinesPostResponse> localVarResponse = await PostWithHttpInfoAsync(latestHeadlinesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [Post] Search For Latest Headlines Request This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestHeadlinesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LatestHeadlinesPostResponse)</returns>
        public virtual async System.Threading.Tasks.Task<Newscatcherapi.Net.Client.ApiResponse<LatestHeadlinesPostResponse>> PostWithHttpInfoAsync(LatestHeadlinesRequest latestHeadlinesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'latestHeadlinesRequest' is set
            if (latestHeadlinesRequest == null)
            {
                throw new Newscatcherapi.Net.Client.ApiException(400, "Missing required parameter 'latestHeadlinesRequest' when calling LatestHeadlinesApi->Post");
            }


            Newscatcherapi.Net.Client.RequestOptions localVarRequestOptions = new Newscatcherapi.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = latestHeadlinesRequest;

            localVarRequestOptions.Operation = "LatestHeadlinesApi.Post";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-token", this.Configuration.GetApiKeyWithPrefix("x-api-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LatestHeadlinesPostResponse>("/api/latest_headlines", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Post", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
