/*
 * NewsCatcher-V3 Production API
 *
 * <img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>
 *
 * The version of the OpenAPI document: 3.2.16
 * Contact: maksym@newscatcherapi.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Newscatcherapi.Net.Client.OpenAPIDateConverter;

namespace Newscatcherapi.Net.Model
{
    /// <summary>
    /// ArticleResult DTO class.
    /// </summary>
    [DataContract(Name = "dto__responses__more_like_this_response__ArticleResult")]
    public partial class DtoResponsesMoreLikeThisResponseArticleResult : IEquatable<DtoResponsesMoreLikeThisResponseArticleResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoResponsesMoreLikeThisResponseArticleResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DtoResponsesMoreLikeThisResponseArticleResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoResponsesMoreLikeThisResponseArticleResult" /> class.
        /// </summary>
        /// <param name="title">title (required).</param>
        /// <param name="description">description.</param>
        /// <param name="author">author.</param>
        /// <param name="authors">authors.</param>
        /// <param name="journalists">journalists.</param>
        /// <param name="publishedDate">publishedDate.</param>
        /// <param name="publishedDatePrecision">publishedDatePrecision.</param>
        /// <param name="updatedDate">updatedDate.</param>
        /// <param name="updatedDatePrecision">updatedDatePrecision.</param>
        /// <param name="parseDate">parseDate.</param>
        /// <param name="link">link (required).</param>
        /// <param name="domainUrl">domainUrl (required).</param>
        /// <param name="fullDomainUrl">fullDomainUrl (required).</param>
        /// <param name="nameSource">nameSource.</param>
        /// <param name="isHeadline">isHeadline.</param>
        /// <param name="paidContent">paidContent.</param>
        /// <param name="extractionData">extractionData (required).</param>
        /// <param name="country">country.</param>
        /// <param name="rights">rights.</param>
        /// <param name="rank">rank (required).</param>
        /// <param name="media">media.</param>
        /// <param name="language">language.</param>
        /// <param name="content">content (required).</param>
        /// <param name="wordCount">wordCount (default to 0).</param>
        /// <param name="isOpinion">isOpinion.</param>
        /// <param name="twitterAccount">twitterAccount.</param>
        /// <param name="allLinks">allLinks.</param>
        /// <param name="allDomainLinks">allDomainLinks.</param>
        /// <param name="nlp">nlp.</param>
        /// <param name="id">id (required).</param>
        /// <param name="score">score (required).</param>
        /// <param name="similarDocuments">similarDocuments.</param>
        public DtoResponsesMoreLikeThisResponseArticleResult(string title = default(string), string description = default(string), string author = default(string), AuthorsProperty authors = default(AuthorsProperty), JournalistsProperty journalists = default(JournalistsProperty), string publishedDate = default(string), string publishedDatePrecision = default(string), string updatedDate = default(string), string updatedDatePrecision = default(string), string parseDate = default(string), string link = default(string), string domainUrl = default(string), string fullDomainUrl = default(string), string nameSource = default(string), string isHeadline = default(string), bool paidContent = default(bool), string extractionData = default(string), string country = default(string), string rights = default(string), int rank = default(int), string media = default(string), string language = default(string), string content = default(string), int wordCount = 0, bool isOpinion = default(bool), string twitterAccount = default(string), AllLinksProperty allLinks = default(AllLinksProperty), AllDomainLinksProperty allDomainLinks = default(AllDomainLinksProperty), Object nlp = default(Object), string id = default(string), double score = default(double), List<SimilarDocument> similarDocuments = default(List<SimilarDocument>))
        {
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for DtoResponsesMoreLikeThisResponseArticleResult and cannot be null");
            }
            this.Title = title;
            // to ensure "link" is required (not null)
            if (link == null)
            {
                throw new ArgumentNullException("link is a required property for DtoResponsesMoreLikeThisResponseArticleResult and cannot be null");
            }
            this.Link = link;
            // to ensure "domainUrl" is required (not null)
            if (domainUrl == null)
            {
                throw new ArgumentNullException("domainUrl is a required property for DtoResponsesMoreLikeThisResponseArticleResult and cannot be null");
            }
            this.DomainUrl = domainUrl;
            // to ensure "fullDomainUrl" is required (not null)
            if (fullDomainUrl == null)
            {
                throw new ArgumentNullException("fullDomainUrl is a required property for DtoResponsesMoreLikeThisResponseArticleResult and cannot be null");
            }
            this.FullDomainUrl = fullDomainUrl;
            // to ensure "extractionData" is required (not null)
            if (extractionData == null)
            {
                throw new ArgumentNullException("extractionData is a required property for DtoResponsesMoreLikeThisResponseArticleResult and cannot be null");
            }
            this.ExtractionData = extractionData;
            this.Rank = rank;
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new ArgumentNullException("content is a required property for DtoResponsesMoreLikeThisResponseArticleResult and cannot be null");
            }
            this.Content = content;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for DtoResponsesMoreLikeThisResponseArticleResult and cannot be null");
            }
            this.Id = id;
            this.Score = score;
            this.Description = description;
            this.Author = author;
            this.Authors = authors;
            this.Journalists = journalists;
            this.PublishedDate = publishedDate;
            this.PublishedDatePrecision = publishedDatePrecision;
            this.UpdatedDate = updatedDate;
            this.UpdatedDatePrecision = updatedDatePrecision;
            this.ParseDate = parseDate;
            this.NameSource = nameSource;
            this.IsHeadline = isHeadline;
            this.PaidContent = paidContent;
            this.Country = country;
            this.Rights = rights;
            this.Media = media;
            this.Language = language;
            this.WordCount = wordCount;
            this.IsOpinion = isOpinion;
            this.TwitterAccount = twitterAccount;
            this.AllLinks = allLinks;
            this.AllDomainLinks = allDomainLinks;
            this.Nlp = nlp;
            this.SimilarDocuments = similarDocuments;
        }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name = "author", EmitDefaultValue = false)]
        public string Author { get; set; }

        /// <summary>
        /// Gets or Sets Authors
        /// </summary>
        [DataMember(Name = "authors", EmitDefaultValue = false)]
        public AuthorsProperty Authors { get; set; }

        /// <summary>
        /// Gets or Sets Journalists
        /// </summary>
        [DataMember(Name = "journalists", EmitDefaultValue = false)]
        public JournalistsProperty Journalists { get; set; }

        /// <summary>
        /// Gets or Sets PublishedDate
        /// </summary>
        [DataMember(Name = "published_date", EmitDefaultValue = false)]
        public string PublishedDate { get; set; }

        /// <summary>
        /// Gets or Sets PublishedDatePrecision
        /// </summary>
        [DataMember(Name = "published_date_precision", EmitDefaultValue = false)]
        public string PublishedDatePrecision { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedDate
        /// </summary>
        [DataMember(Name = "updated_date", EmitDefaultValue = false)]
        public string UpdatedDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedDatePrecision
        /// </summary>
        [DataMember(Name = "updated_date_precision", EmitDefaultValue = false)]
        public string UpdatedDatePrecision { get; set; }

        /// <summary>
        /// Gets or Sets ParseDate
        /// </summary>
        [DataMember(Name = "parse_date", EmitDefaultValue = false)]
        public string ParseDate { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name = "link", IsRequired = true, EmitDefaultValue = true)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets DomainUrl
        /// </summary>
        [DataMember(Name = "domain_url", IsRequired = true, EmitDefaultValue = true)]
        public string DomainUrl { get; set; }

        /// <summary>
        /// Gets or Sets FullDomainUrl
        /// </summary>
        [DataMember(Name = "full_domain_url", IsRequired = true, EmitDefaultValue = true)]
        public string FullDomainUrl { get; set; }

        /// <summary>
        /// Gets or Sets NameSource
        /// </summary>
        [DataMember(Name = "name_source", EmitDefaultValue = false)]
        public string NameSource { get; set; }

        /// <summary>
        /// Gets or Sets IsHeadline
        /// </summary>
        [DataMember(Name = "is_headline", EmitDefaultValue = false)]
        public string IsHeadline { get; set; }

        /// <summary>
        /// Gets or Sets PaidContent
        /// </summary>
        [DataMember(Name = "paid_content", EmitDefaultValue = true)]
        public bool PaidContent { get; set; }

        /// <summary>
        /// Gets or Sets ExtractionData
        /// </summary>
        [DataMember(Name = "extraction_data", IsRequired = true, EmitDefaultValue = true)]
        public string ExtractionData { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Rights
        /// </summary>
        [DataMember(Name = "rights", EmitDefaultValue = false)]
        public string Rights { get; set; }

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        [DataMember(Name = "rank", IsRequired = true, EmitDefaultValue = true)]
        public int Rank { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        public string Media { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = true)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets WordCount
        /// </summary>
        [DataMember(Name = "word_count", EmitDefaultValue = false)]
        public int WordCount { get; set; }

        /// <summary>
        /// Gets or Sets IsOpinion
        /// </summary>
        [DataMember(Name = "is_opinion", EmitDefaultValue = true)]
        public bool IsOpinion { get; set; }

        /// <summary>
        /// Gets or Sets TwitterAccount
        /// </summary>
        [DataMember(Name = "twitter_account", EmitDefaultValue = false)]
        public string TwitterAccount { get; set; }

        /// <summary>
        /// Gets or Sets AllLinks
        /// </summary>
        [DataMember(Name = "all_links", EmitDefaultValue = false)]
        public AllLinksProperty AllLinks { get; set; }

        /// <summary>
        /// Gets or Sets AllDomainLinks
        /// </summary>
        [DataMember(Name = "all_domain_links", EmitDefaultValue = false)]
        public AllDomainLinksProperty AllDomainLinks { get; set; }

        /// <summary>
        /// Gets or Sets Nlp
        /// </summary>
        [DataMember(Name = "nlp", EmitDefaultValue = false)]
        public Object Nlp { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name = "score", IsRequired = true, EmitDefaultValue = true)]
        public double Score { get; set; }

        /// <summary>
        /// Gets or Sets SimilarDocuments
        /// </summary>
        [DataMember(Name = "similar_documents", EmitDefaultValue = false)]
        public List<SimilarDocument> SimilarDocuments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoResponsesMoreLikeThisResponseArticleResult {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Authors: ").Append(Authors).Append("\n");
            sb.Append("  Journalists: ").Append(Journalists).Append("\n");
            sb.Append("  PublishedDate: ").Append(PublishedDate).Append("\n");
            sb.Append("  PublishedDatePrecision: ").Append(PublishedDatePrecision).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  UpdatedDatePrecision: ").Append(UpdatedDatePrecision).Append("\n");
            sb.Append("  ParseDate: ").Append(ParseDate).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  DomainUrl: ").Append(DomainUrl).Append("\n");
            sb.Append("  FullDomainUrl: ").Append(FullDomainUrl).Append("\n");
            sb.Append("  NameSource: ").Append(NameSource).Append("\n");
            sb.Append("  IsHeadline: ").Append(IsHeadline).Append("\n");
            sb.Append("  PaidContent: ").Append(PaidContent).Append("\n");
            sb.Append("  ExtractionData: ").Append(ExtractionData).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Rights: ").Append(Rights).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  WordCount: ").Append(WordCount).Append("\n");
            sb.Append("  IsOpinion: ").Append(IsOpinion).Append("\n");
            sb.Append("  TwitterAccount: ").Append(TwitterAccount).Append("\n");
            sb.Append("  AllLinks: ").Append(AllLinks).Append("\n");
            sb.Append("  AllDomainLinks: ").Append(AllDomainLinks).Append("\n");
            sb.Append("  Nlp: ").Append(Nlp).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  SimilarDocuments: ").Append(SimilarDocuments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DtoResponsesMoreLikeThisResponseArticleResult);
        }

        /// <summary>
        /// Returns true if DtoResponsesMoreLikeThisResponseArticleResult instances are equal
        /// </summary>
        /// <param name="input">Instance of DtoResponsesMoreLikeThisResponseArticleResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DtoResponsesMoreLikeThisResponseArticleResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.Authors == input.Authors ||
                    (this.Authors != null &&
                    this.Authors.Equals(input.Authors))
                ) && 
                (
                    this.Journalists == input.Journalists ||
                    (this.Journalists != null &&
                    this.Journalists.Equals(input.Journalists))
                ) && 
                (
                    this.PublishedDate == input.PublishedDate ||
                    (this.PublishedDate != null &&
                    this.PublishedDate.Equals(input.PublishedDate))
                ) && 
                (
                    this.PublishedDatePrecision == input.PublishedDatePrecision ||
                    (this.PublishedDatePrecision != null &&
                    this.PublishedDatePrecision.Equals(input.PublishedDatePrecision))
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                ) && 
                (
                    this.UpdatedDatePrecision == input.UpdatedDatePrecision ||
                    (this.UpdatedDatePrecision != null &&
                    this.UpdatedDatePrecision.Equals(input.UpdatedDatePrecision))
                ) && 
                (
                    this.ParseDate == input.ParseDate ||
                    (this.ParseDate != null &&
                    this.ParseDate.Equals(input.ParseDate))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.DomainUrl == input.DomainUrl ||
                    (this.DomainUrl != null &&
                    this.DomainUrl.Equals(input.DomainUrl))
                ) && 
                (
                    this.FullDomainUrl == input.FullDomainUrl ||
                    (this.FullDomainUrl != null &&
                    this.FullDomainUrl.Equals(input.FullDomainUrl))
                ) && 
                (
                    this.NameSource == input.NameSource ||
                    (this.NameSource != null &&
                    this.NameSource.Equals(input.NameSource))
                ) && 
                (
                    this.IsHeadline == input.IsHeadline ||
                    (this.IsHeadline != null &&
                    this.IsHeadline.Equals(input.IsHeadline))
                ) && 
                (
                    this.PaidContent == input.PaidContent ||
                    this.PaidContent.Equals(input.PaidContent)
                ) && 
                (
                    this.ExtractionData == input.ExtractionData ||
                    (this.ExtractionData != null &&
                    this.ExtractionData.Equals(input.ExtractionData))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Rights == input.Rights ||
                    (this.Rights != null &&
                    this.Rights.Equals(input.Rights))
                ) && 
                (
                    this.Rank == input.Rank ||
                    this.Rank.Equals(input.Rank)
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.WordCount == input.WordCount ||
                    this.WordCount.Equals(input.WordCount)
                ) && 
                (
                    this.IsOpinion == input.IsOpinion ||
                    this.IsOpinion.Equals(input.IsOpinion)
                ) && 
                (
                    this.TwitterAccount == input.TwitterAccount ||
                    (this.TwitterAccount != null &&
                    this.TwitterAccount.Equals(input.TwitterAccount))
                ) && 
                (
                    this.AllLinks == input.AllLinks ||
                    (this.AllLinks != null &&
                    this.AllLinks.Equals(input.AllLinks))
                ) && 
                (
                    this.AllDomainLinks == input.AllDomainLinks ||
                    (this.AllDomainLinks != null &&
                    this.AllDomainLinks.Equals(input.AllDomainLinks))
                ) && 
                (
                    this.Nlp == input.Nlp ||
                    (this.Nlp != null &&
                    this.Nlp.Equals(input.Nlp))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                ) && 
                (
                    this.SimilarDocuments == input.SimilarDocuments ||
                    this.SimilarDocuments != null &&
                    input.SimilarDocuments != null &&
                    this.SimilarDocuments.SequenceEqual(input.SimilarDocuments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Author != null)
                {
                    hashCode = (hashCode * 59) + this.Author.GetHashCode();
                }
                if (this.Authors != null)
                {
                    hashCode = (hashCode * 59) + this.Authors.GetHashCode();
                }
                if (this.Journalists != null)
                {
                    hashCode = (hashCode * 59) + this.Journalists.GetHashCode();
                }
                if (this.PublishedDate != null)
                {
                    hashCode = (hashCode * 59) + this.PublishedDate.GetHashCode();
                }
                if (this.PublishedDatePrecision != null)
                {
                    hashCode = (hashCode * 59) + this.PublishedDatePrecision.GetHashCode();
                }
                if (this.UpdatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDate.GetHashCode();
                }
                if (this.UpdatedDatePrecision != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedDatePrecision.GetHashCode();
                }
                if (this.ParseDate != null)
                {
                    hashCode = (hashCode * 59) + this.ParseDate.GetHashCode();
                }
                if (this.Link != null)
                {
                    hashCode = (hashCode * 59) + this.Link.GetHashCode();
                }
                if (this.DomainUrl != null)
                {
                    hashCode = (hashCode * 59) + this.DomainUrl.GetHashCode();
                }
                if (this.FullDomainUrl != null)
                {
                    hashCode = (hashCode * 59) + this.FullDomainUrl.GetHashCode();
                }
                if (this.NameSource != null)
                {
                    hashCode = (hashCode * 59) + this.NameSource.GetHashCode();
                }
                if (this.IsHeadline != null)
                {
                    hashCode = (hashCode * 59) + this.IsHeadline.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaidContent.GetHashCode();
                if (this.ExtractionData != null)
                {
                    hashCode = (hashCode * 59) + this.ExtractionData.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.Rights != null)
                {
                    hashCode = (hashCode * 59) + this.Rights.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Rank.GetHashCode();
                if (this.Media != null)
                {
                    hashCode = (hashCode * 59) + this.Media.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WordCount.GetHashCode();
                hashCode = (hashCode * 59) + this.IsOpinion.GetHashCode();
                if (this.TwitterAccount != null)
                {
                    hashCode = (hashCode * 59) + this.TwitterAccount.GetHashCode();
                }
                if (this.AllLinks != null)
                {
                    hashCode = (hashCode * 59) + this.AllLinks.GetHashCode();
                }
                if (this.AllDomainLinks != null)
                {
                    hashCode = (hashCode * 59) + this.AllDomainLinks.GetHashCode();
                }
                if (this.Nlp != null)
                {
                    hashCode = (hashCode * 59) + this.Nlp.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Score.GetHashCode();
                if (this.SimilarDocuments != null)
                {
                    hashCode = (hashCode * 59) + this.SimilarDocuments.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
