/*
 * NewsCatcher-V3 Production API
 *
 * <img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>
 *
 * The version of the OpenAPI document: 3.2.16
 * Contact: maksym@newscatcherapi.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Newscatcherapi.Net.Client.OpenAPIDateConverter;

namespace Newscatcherapi.Net.Model
{
    /// <summary>
    /// Cluster DTO class.
    /// </summary>
    [DataContract(Name = "Cluster")]
    public partial class Cluster : IEquatable<Cluster>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cluster" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Cluster() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cluster" /> class.
        /// </summary>
        /// <param name="clusterId">clusterId (required).</param>
        /// <param name="clusterSize">clusterSize (required).</param>
        /// <param name="articles">articles (required).</param>
        public Cluster(string clusterId = default(string), int clusterSize = default(int), List<Object> articles = default(List<Object>))
        {
            // to ensure "clusterId" is required (not null)
            if (clusterId == null)
            {
                throw new ArgumentNullException("clusterId is a required property for Cluster and cannot be null");
            }
            this.ClusterId = clusterId;
            this.ClusterSize = clusterSize;
            // to ensure "articles" is required (not null)
            if (articles == null)
            {
                throw new ArgumentNullException("articles is a required property for Cluster and cannot be null");
            }
            this.Articles = articles;
        }

        /// <summary>
        /// Gets or Sets ClusterId
        /// </summary>
        [DataMember(Name = "cluster_id", IsRequired = true, EmitDefaultValue = true)]
        public string ClusterId { get; set; }

        /// <summary>
        /// Gets or Sets ClusterSize
        /// </summary>
        [DataMember(Name = "cluster_size", IsRequired = true, EmitDefaultValue = true)]
        public int ClusterSize { get; set; }

        /// <summary>
        /// Gets or Sets Articles
        /// </summary>
        [DataMember(Name = "articles", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Articles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Cluster {\n");
            sb.Append("  ClusterId: ").Append(ClusterId).Append("\n");
            sb.Append("  ClusterSize: ").Append(ClusterSize).Append("\n");
            sb.Append("  Articles: ").Append(Articles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cluster);
        }

        /// <summary>
        /// Returns true if Cluster instances are equal
        /// </summary>
        /// <param name="input">Instance of Cluster to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cluster input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClusterId == input.ClusterId ||
                    (this.ClusterId != null &&
                    this.ClusterId.Equals(input.ClusterId))
                ) && 
                (
                    this.ClusterSize == input.ClusterSize ||
                    this.ClusterSize.Equals(input.ClusterSize)
                ) && 
                (
                    this.Articles == input.Articles ||
                    this.Articles != null &&
                    input.Articles != null &&
                    this.Articles.SequenceEqual(input.Articles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClusterId != null)
                {
                    hashCode = (hashCode * 59) + this.ClusterId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClusterSize.GetHashCode();
                if (this.Articles != null)
                {
                    hashCode = (hashCode * 59) + this.Articles.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
