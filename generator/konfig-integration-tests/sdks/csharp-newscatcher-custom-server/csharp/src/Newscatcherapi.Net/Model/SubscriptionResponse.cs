/*
 * NewsCatcher-V3 Production API
 *
 * <img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>
 *
 * The version of the OpenAPI document: 3.2.16
 * Contact: maksym@newscatcherapi.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Newscatcherapi.Net.Client.OpenAPIDateConverter;

namespace Newscatcherapi.Net.Model
{
    /// <summary>
    /// SubscriptionResponse DTO class.
    /// </summary>
    [DataContract(Name = "SubscriptionResponse")]
    public partial class SubscriptionResponse : IEquatable<SubscriptionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscriptionResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionResponse" /> class.
        /// </summary>
        /// <param name="active">active (required).</param>
        /// <param name="callsPerSeconds">callsPerSeconds.</param>
        /// <param name="planName">planName (required).</param>
        /// <param name="usageAssignedCalls">usageAssignedCalls.</param>
        /// <param name="usageRemainingCalls">usageRemainingCalls.</param>
        /// <param name="historicalDays">historicalDays.</param>
        public SubscriptionResponse(bool active = default(bool), int callsPerSeconds = default(int), string planName = default(string), int usageAssignedCalls = default(int), int usageRemainingCalls = default(int), int historicalDays = default(int))
        {
            this.Active = active;
            // to ensure "planName" is required (not null)
            if (planName == null)
            {
                throw new ArgumentNullException("planName is a required property for SubscriptionResponse and cannot be null");
            }
            this.PlanName = planName;
            this.CallsPerSeconds = callsPerSeconds;
            this.UsageAssignedCalls = usageAssignedCalls;
            this.UsageRemainingCalls = usageRemainingCalls;
            this.HistoricalDays = historicalDays;
        }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", IsRequired = true, EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets CallsPerSeconds
        /// </summary>
        [DataMember(Name = "calls_per_seconds", EmitDefaultValue = false)]
        public int CallsPerSeconds { get; set; }

        /// <summary>
        /// Gets or Sets PlanName
        /// </summary>
        [DataMember(Name = "plan_name", IsRequired = true, EmitDefaultValue = true)]
        public string PlanName { get; set; }

        /// <summary>
        /// Gets or Sets UsageAssignedCalls
        /// </summary>
        [DataMember(Name = "usage_assigned_calls", EmitDefaultValue = false)]
        public int UsageAssignedCalls { get; set; }

        /// <summary>
        /// Gets or Sets UsageRemainingCalls
        /// </summary>
        [DataMember(Name = "usage_remaining_calls", EmitDefaultValue = false)]
        public int UsageRemainingCalls { get; set; }

        /// <summary>
        /// Gets or Sets HistoricalDays
        /// </summary>
        [DataMember(Name = "historical_days", EmitDefaultValue = false)]
        public int HistoricalDays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubscriptionResponse {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  CallsPerSeconds: ").Append(CallsPerSeconds).Append("\n");
            sb.Append("  PlanName: ").Append(PlanName).Append("\n");
            sb.Append("  UsageAssignedCalls: ").Append(UsageAssignedCalls).Append("\n");
            sb.Append("  UsageRemainingCalls: ").Append(UsageRemainingCalls).Append("\n");
            sb.Append("  HistoricalDays: ").Append(HistoricalDays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionResponse);
        }

        /// <summary>
        /// Returns true if SubscriptionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.CallsPerSeconds == input.CallsPerSeconds ||
                    this.CallsPerSeconds.Equals(input.CallsPerSeconds)
                ) && 
                (
                    this.PlanName == input.PlanName ||
                    (this.PlanName != null &&
                    this.PlanName.Equals(input.PlanName))
                ) && 
                (
                    this.UsageAssignedCalls == input.UsageAssignedCalls ||
                    this.UsageAssignedCalls.Equals(input.UsageAssignedCalls)
                ) && 
                (
                    this.UsageRemainingCalls == input.UsageRemainingCalls ||
                    this.UsageRemainingCalls.Equals(input.UsageRemainingCalls)
                ) && 
                (
                    this.HistoricalDays == input.HistoricalDays ||
                    this.HistoricalDays.Equals(input.HistoricalDays)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                hashCode = (hashCode * 59) + this.CallsPerSeconds.GetHashCode();
                if (this.PlanName != null)
                {
                    hashCode = (hashCode * 59) + this.PlanName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UsageAssignedCalls.GetHashCode();
                hashCode = (hashCode * 59) + this.UsageRemainingCalls.GetHashCode();
                hashCode = (hashCode * 59) + this.HistoricalDays.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
