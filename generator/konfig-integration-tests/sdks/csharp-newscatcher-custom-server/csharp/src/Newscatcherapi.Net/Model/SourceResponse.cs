/*
 * NewsCatcher-V3 Production API
 *
 * <img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>
 *
 * The version of the OpenAPI document: 3.2.16
 * Contact: maksym@newscatcherapi.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Newscatcherapi.Net.Client.OpenAPIDateConverter;

namespace Newscatcherapi.Net.Model
{
    /// <summary>
    /// SourceResponse DTO class.
    /// </summary>
    [DataContract(Name = "SourceResponse")]
    public partial class SourceResponse : IEquatable<SourceResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SourceResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SourceResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SourceResponse" /> class.
        /// </summary>
        /// <param name="message">message (required).</param>
        /// <param name="sources">sources (required).</param>
        /// <param name="userInput">userInput (required).</param>
        public SourceResponse(string message = default(string), List<SourcesPropertyInner> sources = default(List<SourcesPropertyInner>), Object userInput = default(Object))
        {
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for SourceResponse and cannot be null");
            }
            this.Message = message;
            // to ensure "sources" is required (not null)
            if (sources == null)
            {
                throw new ArgumentNullException("sources is a required property for SourceResponse and cannot be null");
            }
            this.Sources = sources;
            // to ensure "userInput" is required (not null)
            if (userInput == null)
            {
                throw new ArgumentNullException("userInput is a required property for SourceResponse and cannot be null");
            }
            this.UserInput = userInput;
        }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Sources
        /// </summary>
        [DataMember(Name = "sources", IsRequired = true, EmitDefaultValue = true)]
        public List<SourcesPropertyInner> Sources { get; set; }

        /// <summary>
        /// Gets or Sets UserInput
        /// </summary>
        [DataMember(Name = "user_input", IsRequired = true, EmitDefaultValue = true)]
        public Object UserInput { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SourceResponse {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Sources: ").Append(Sources).Append("\n");
            sb.Append("  UserInput: ").Append(UserInput).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SourceResponse);
        }

        /// <summary>
        /// Returns true if SourceResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SourceResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SourceResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Sources == input.Sources ||
                    this.Sources != null &&
                    input.Sources != null &&
                    this.Sources.SequenceEqual(input.Sources)
                ) && 
                (
                    this.UserInput == input.UserInput ||
                    (this.UserInput != null &&
                    this.UserInput.Equals(input.UserInput))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Sources != null)
                {
                    hashCode = (hashCode * 59) + this.Sources.GetHashCode();
                }
                if (this.UserInput != null)
                {
                    hashCode = (hashCode * 59) + this.UserInput.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
