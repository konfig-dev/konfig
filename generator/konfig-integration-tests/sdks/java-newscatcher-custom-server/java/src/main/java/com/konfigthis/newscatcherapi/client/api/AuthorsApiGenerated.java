/*
 * NewsCatcher-V3 Production API
 * <img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>
 *
 * The version of the OpenAPI document: 3.2.16
 * Contact: maksym@newscatcherapi.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.newscatcherapi.client.api;

import com.konfigthis.newscatcherapi.client.ApiCallback;
import com.konfigthis.newscatcherapi.client.ApiClient;
import com.konfigthis.newscatcherapi.client.ApiException;
import com.konfigthis.newscatcherapi.client.ApiResponse;
import com.konfigthis.newscatcherapi.client.Configuration;
import com.konfigthis.newscatcherapi.client.Pair;
import com.konfigthis.newscatcherapi.client.ProgressRequestBody;
import com.konfigthis.newscatcherapi.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.newscatcherapi.client.model.AuthorSearchRequest;
import com.konfigthis.newscatcherapi.client.model.FSearchResponse;
import com.konfigthis.newscatcherapi.client.model.FSearchResponse1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthorsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthorsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"x-api-token\" is required but no API key was provided. Please set \"x-api-token\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCall(String authorName, String notAuthorName, Object sources, Object predefinedSources, Object notSources, Object lang, Object notLang, Object countries, Object notCountries, String from, String to, String publishedDatePrecision, Boolean byParseDate, String sortBy, String rankedOnly, Integer fromRank, Integer toRank, Boolean isHeadline, Boolean isOpinion, Boolean isPaidContent, Object parentUrl, Object allLinks, Object allDomainLinks, Integer wordCountMin, Integer wordCountMax, Integer page, Integer pageSize, Boolean includeNlpData, Boolean hasNlp, String theme, String notTheme, String nerName, Double titleSentimentMin, Double titleSentimentMax, Double contentSentimentMin, Double contentSentimentMax, Object iptcTags, Object notIptcTags, Object iabTags, Object notIabTags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/authors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author_name", authorName));
        }

        if (notAuthorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not_author_name", notAuthorName));
        }

        if (sources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sources", sources));
        }

        if (predefinedSources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("predefined_sources", predefinedSources));
        }

        if (notSources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not_sources", notSources));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (notLang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not_lang", notLang));
        }

        if (countries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countries", countries));
        }

        if (notCountries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not_countries", notCountries));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_", to));
        }

        if (publishedDatePrecision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_date_precision", publishedDatePrecision));
        }

        if (byParseDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("by_parse_date", byParseDate));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (rankedOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ranked_only", rankedOnly));
        }

        if (fromRank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_rank", fromRank));
        }

        if (toRank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_rank", toRank));
        }

        if (isHeadline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_headline", isHeadline));
        }

        if (isOpinion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_opinion", isOpinion));
        }

        if (isPaidContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_paid_content", isPaidContent));
        }

        if (parentUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_url", parentUrl));
        }

        if (allLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all_links", allLinks));
        }

        if (allDomainLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all_domain_links", allDomainLinks));
        }

        if (wordCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("word_count_min", wordCountMin));
        }

        if (wordCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("word_count_max", wordCountMax));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (includeNlpData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_nlp_data", includeNlpData));
        }

        if (hasNlp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_nlp", hasNlp));
        }

        if (theme != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("theme", theme));
        }

        if (notTheme != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not_theme", notTheme));
        }

        if (nerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ner_name", nerName));
        }

        if (titleSentimentMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_sentiment_min", titleSentimentMin));
        }

        if (titleSentimentMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_sentiment_max", titleSentimentMax));
        }

        if (contentSentimentMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_sentiment_min", contentSentimentMin));
        }

        if (contentSentimentMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_sentiment_max", contentSentimentMax));
        }

        if (iptcTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iptc_tags", iptcTags));
        }

        if (notIptcTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not_iptc_tags", notIptcTags));
        }

        if (iabTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iab_tags", iabTags));
        }

        if (notIabTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not_iab_tags", notIabTags));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String authorName, String notAuthorName, Object sources, Object predefinedSources, Object notSources, Object lang, Object notLang, Object countries, Object notCountries, String from, String to, String publishedDatePrecision, Boolean byParseDate, String sortBy, String rankedOnly, Integer fromRank, Integer toRank, Boolean isHeadline, Boolean isOpinion, Boolean isPaidContent, Object parentUrl, Object allLinks, Object allDomainLinks, Integer wordCountMin, Integer wordCountMax, Integer page, Integer pageSize, Boolean includeNlpData, Boolean hasNlp, String theme, String notTheme, String nerName, Double titleSentimentMin, Double titleSentimentMax, Double contentSentimentMin, Double contentSentimentMax, Object iptcTags, Object notIptcTags, Object iabTags, Object notIabTags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorName' is set
        if (authorName == null) {
            throw new ApiException("Missing the required parameter 'authorName' when calling get(Async)");
        }

        return getCall(authorName, notAuthorName, sources, predefinedSources, notSources, lang, notLang, countries, notCountries, from, to, publishedDatePrecision, byParseDate, sortBy, rankedOnly, fromRank, toRank, isHeadline, isOpinion, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, includeNlpData, hasNlp, theme, notTheme, nerName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, iptcTags, notIptcTags, iabTags, notIabTags, _callback);

    }


    private ApiResponse<FSearchResponse> getWithHttpInfo(String authorName, String notAuthorName, Object sources, Object predefinedSources, Object notSources, Object lang, Object notLang, Object countries, Object notCountries, String from, String to, String publishedDatePrecision, Boolean byParseDate, String sortBy, String rankedOnly, Integer fromRank, Integer toRank, Boolean isHeadline, Boolean isOpinion, Boolean isPaidContent, Object parentUrl, Object allLinks, Object allDomainLinks, Integer wordCountMin, Integer wordCountMax, Integer page, Integer pageSize, Boolean includeNlpData, Boolean hasNlp, String theme, String notTheme, String nerName, Double titleSentimentMin, Double titleSentimentMax, Double contentSentimentMin, Double contentSentimentMax, Object iptcTags, Object notIptcTags, Object iabTags, Object notIabTags) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(authorName, notAuthorName, sources, predefinedSources, notSources, lang, notLang, countries, notCountries, from, to, publishedDatePrecision, byParseDate, sortBy, rankedOnly, fromRank, toRank, isHeadline, isOpinion, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, includeNlpData, hasNlp, theme, notTheme, nerName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, iptcTags, notIptcTags, iabTags, notIabTags, null);
        Type localVarReturnType = new TypeToken<FSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAsync(String authorName, String notAuthorName, Object sources, Object predefinedSources, Object notSources, Object lang, Object notLang, Object countries, Object notCountries, String from, String to, String publishedDatePrecision, Boolean byParseDate, String sortBy, String rankedOnly, Integer fromRank, Integer toRank, Boolean isHeadline, Boolean isOpinion, Boolean isPaidContent, Object parentUrl, Object allLinks, Object allDomainLinks, Integer wordCountMin, Integer wordCountMax, Integer page, Integer pageSize, Boolean includeNlpData, Boolean hasNlp, String theme, String notTheme, String nerName, Double titleSentimentMin, Double titleSentimentMax, Double contentSentimentMin, Double contentSentimentMax, Object iptcTags, Object notIptcTags, Object iabTags, Object notIabTags, final ApiCallback<FSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(authorName, notAuthorName, sources, predefinedSources, notSources, lang, notLang, countries, notCountries, from, to, publishedDatePrecision, byParseDate, sortBy, rankedOnly, fromRank, toRank, isHeadline, isOpinion, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, includeNlpData, hasNlp, theme, notTheme, nerName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, iptcTags, notIptcTags, iabTags, notIabTags, _callback);
        Type localVarReturnType = new TypeToken<FSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class GetRequestBuilderGenerated {
        private final String authorName;
        private String notAuthorName;
        private Object sources;
        private Object predefinedSources;
        private Object notSources;
        private Object lang;
        private Object notLang;
        private Object countries;
        private Object notCountries;
        private String from;
        private String to;
        private String publishedDatePrecision;
        private Boolean byParseDate;
        private String sortBy;
        private String rankedOnly;
        private Integer fromRank;
        private Integer toRank;
        private Boolean isHeadline;
        private Boolean isOpinion;
        private Boolean isPaidContent;
        private Object parentUrl;
        private Object allLinks;
        private Object allDomainLinks;
        private Integer wordCountMin;
        private Integer wordCountMax;
        private Integer page;
        private Integer pageSize;
        private Boolean includeNlpData;
        private Boolean hasNlp;
        private String theme;
        private String notTheme;
        private String nerName;
        private Double titleSentimentMin;
        private Double titleSentimentMax;
        private Double contentSentimentMin;
        private Double contentSentimentMax;
        private Object iptcTags;
        private Object notIptcTags;
        private Object iabTags;
        private Object notIabTags;

        public GetRequestBuilderGenerated(String authorName) {
            this.authorName = authorName;
        }

        /**
         * Set notAuthorName
         * @param notAuthorName  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder notAuthorName(String notAuthorName) {
            this.notAuthorName = notAuthorName;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set sources
         * @param sources  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder sources(Object sources) {
            this.sources = sources;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set predefinedSources
         * @param predefinedSources  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder predefinedSources(Object predefinedSources) {
            this.predefinedSources = predefinedSources;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set notSources
         * @param notSources  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder notSources(Object notSources) {
            this.notSources = notSources;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set lang
         * @param lang  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder lang(Object lang) {
            this.lang = lang;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set notLang
         * @param notLang  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder notLang(Object notLang) {
            this.notLang = notLang;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set countries
         * @param countries  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder countries(Object countries) {
            this.countries = countries;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set notCountries
         * @param notCountries  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder notCountries(Object notCountries) {
            this.notCountries = notCountries;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set from
         * @param from  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder from(String from) {
            this.from = from;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set to
         * @param to  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder to(String to) {
            this.to = to;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set publishedDatePrecision
         * @param publishedDatePrecision  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder publishedDatePrecision(String publishedDatePrecision) {
            this.publishedDatePrecision = publishedDatePrecision;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set byParseDate
         * @param byParseDate  (optional, default to false)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder byParseDate(Boolean byParseDate) {
            this.byParseDate = byParseDate;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set sortBy
         * @param sortBy  (optional, default to relevancy)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set rankedOnly
         * @param rankedOnly  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder rankedOnly(String rankedOnly) {
            this.rankedOnly = rankedOnly;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set fromRank
         * @param fromRank  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder fromRank(Integer fromRank) {
            this.fromRank = fromRank;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set toRank
         * @param toRank  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder toRank(Integer toRank) {
            this.toRank = toRank;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set isHeadline
         * @param isHeadline  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder isHeadline(Boolean isHeadline) {
            this.isHeadline = isHeadline;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set isOpinion
         * @param isOpinion  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder isOpinion(Boolean isOpinion) {
            this.isOpinion = isOpinion;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set isPaidContent
         * @param isPaidContent  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder isPaidContent(Boolean isPaidContent) {
            this.isPaidContent = isPaidContent;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set parentUrl
         * @param parentUrl  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder parentUrl(Object parentUrl) {
            this.parentUrl = parentUrl;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set allLinks
         * @param allLinks  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder allLinks(Object allLinks) {
            this.allLinks = allLinks;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set allDomainLinks
         * @param allDomainLinks  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder allDomainLinks(Object allDomainLinks) {
            this.allDomainLinks = allDomainLinks;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set wordCountMin
         * @param wordCountMin  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder wordCountMin(Integer wordCountMin) {
            this.wordCountMin = wordCountMin;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set wordCountMax
         * @param wordCountMax  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder wordCountMax(Integer wordCountMax) {
            this.wordCountMax = wordCountMax;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set page
         * @param page  (optional, default to 1)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder page(Integer page) {
            this.page = page;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set pageSize
         * @param pageSize  (optional, default to 100)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set includeNlpData
         * @param includeNlpData  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder includeNlpData(Boolean includeNlpData) {
            this.includeNlpData = includeNlpData;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set hasNlp
         * @param hasNlp  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder hasNlp(Boolean hasNlp) {
            this.hasNlp = hasNlp;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set theme
         * @param theme  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder theme(String theme) {
            this.theme = theme;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set notTheme
         * @param notTheme  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder notTheme(String notTheme) {
            this.notTheme = notTheme;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set nerName
         * @param nerName  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder nerName(String nerName) {
            this.nerName = nerName;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set titleSentimentMin
         * @param titleSentimentMin  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder titleSentimentMin(Double titleSentimentMin) {
            this.titleSentimentMin = titleSentimentMin;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set titleSentimentMax
         * @param titleSentimentMax  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder titleSentimentMax(Double titleSentimentMax) {
            this.titleSentimentMax = titleSentimentMax;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set contentSentimentMin
         * @param contentSentimentMin  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder contentSentimentMin(Double contentSentimentMin) {
            this.contentSentimentMin = contentSentimentMin;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set contentSentimentMax
         * @param contentSentimentMax  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder contentSentimentMax(Double contentSentimentMax) {
            this.contentSentimentMax = contentSentimentMax;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set iptcTags
         * @param iptcTags  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder iptcTags(Object iptcTags) {
            this.iptcTags = iptcTags;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set notIptcTags
         * @param notIptcTags  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder notIptcTags(Object notIptcTags) {
            this.notIptcTags = notIptcTags;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set iabTags
         * @param iabTags  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder iabTags(Object iabTags) {
            this.iabTags = iabTags;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Set notIabTags
         * @param notIabTags  (optional)
         * @return AuthorsApi.GetRequestBuilder
         */
        public AuthorsApi.GetRequestBuilder notIabTags(Object notIabTags) {
            this.notIabTags = notIabTags;
            return (AuthorsApi.GetRequestBuilder) this;
        }
        
        /**
         * Build call for get
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCall(authorName, notAuthorName, sources, predefinedSources, notSources, lang, notLang, countries, notCountries, from, to, publishedDatePrecision, byParseDate, sortBy, rankedOnly, fromRank, toRank, isHeadline, isOpinion, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, includeNlpData, hasNlp, theme, notTheme, nerName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, iptcTags, notIptcTags, iabTags, notIabTags, _callback);
        }


        /**
         * Execute get request
         * @return FSearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public FSearchResponse execute() throws ApiException {
            ApiResponse<FSearchResponse> localVarResp = getWithHttpInfo(authorName, notAuthorName, sources, predefinedSources, notSources, lang, notLang, countries, notCountries, from, to, publishedDatePrecision, byParseDate, sortBy, rankedOnly, fromRank, toRank, isHeadline, isOpinion, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, includeNlpData, hasNlp, theme, notTheme, nerName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, iptcTags, notIptcTags, iabTags, notIabTags);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute get request with HTTP info returned
         * @return ApiResponse&lt;FSearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FSearchResponse> executeWithHttpInfo() throws ApiException {
            return getWithHttpInfo(authorName, notAuthorName, sources, predefinedSources, notSources, lang, notLang, countries, notCountries, from, to, publishedDatePrecision, byParseDate, sortBy, rankedOnly, fromRank, toRank, isHeadline, isOpinion, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, includeNlpData, hasNlp, theme, notTheme, nerName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, iptcTags, notIptcTags, iabTags, notIabTags);
        }

        /**
         * Execute get request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FSearchResponse> _callback) throws ApiException {
            return getAsync(authorName, notAuthorName, sources, predefinedSources, notSources, lang, notLang, countries, notCountries, from, to, publishedDatePrecision, byParseDate, sortBy, rankedOnly, fromRank, toRank, isHeadline, isOpinion, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, includeNlpData, hasNlp, theme, notTheme, nerName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, iptcTags, notIptcTags, iabTags, notIabTags, _callback);
        }
    }

    /**
     * [Get] Search By Author Request
     * This endpoint allows you to search for articles by author. You need to specify the author name. You can also filter by language, country, source, and more.
     * @param authorName  (required)
     * @return GetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public AuthorsApi.GetRequestBuilder get(String authorName) throws IllegalArgumentException {
        if (authorName == null) throw new IllegalArgumentException("\"authorName\" is required but got null");
            

        return ((AuthorsApi) this).new GetRequestBuilder(authorName);
    }
    private okhttp3.Call postCall(AuthorSearchRequest authorSearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorSearchRequest;

        // create path and map variables
        String localVarPath = "/api/authors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postValidateBeforeCall(AuthorSearchRequest authorSearchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorSearchRequest' is set
        if (authorSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'authorSearchRequest' when calling post(Async)");
        }

        return postCall(authorSearchRequest, _callback);

    }


    private ApiResponse<FSearchResponse1> postWithHttpInfo(AuthorSearchRequest authorSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = postValidateBeforeCall(authorSearchRequest, null);
        Type localVarReturnType = new TypeToken<FSearchResponse1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postAsync(AuthorSearchRequest authorSearchRequest, final ApiCallback<FSearchResponse1> _callback) throws ApiException {

        okhttp3.Call localVarCall = postValidateBeforeCall(authorSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<FSearchResponse1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class PostRequestBuilderGenerated {
        private final String authorName;
        private String notAuthorName;
        private Object sources;
        private Object predefinedSources;
        private Object notSources;
        private Object lang;
        private Object notLang;
        private Object countries;
        private Object notCountries;
        private String from;
        private String to;
        private String publishedDatePrecision;
        private Boolean byParseDate;
        private String sortBy;
        private String rankedOnly;
        private Integer fromRank;
        private Integer toRank;
        private Boolean isHeadline;
        private Boolean isOpinion;
        private Boolean isPaidContent;
        private Object parentUrl;
        private Object allLinks;
        private Object allDomainLinks;
        private Integer wordCountMin;
        private Integer wordCountMax;
        private Integer page;
        private Integer pageSize;
        private Boolean includeNlpData;
        private Boolean hasNlp;
        private String theme;
        private String notTheme;
        private String nerName;
        private Double titleSentimentMin;
        private Double titleSentimentMax;
        private Double contentSentimentMin;
        private Double contentSentimentMax;
        private Object iptcTags;
        private Object notIptcTags;
        private Object iabTags;
        private Object notIabTags;

        public PostRequestBuilderGenerated(String authorName) {
            this.authorName = authorName;
        }

        /**
         * Set notAuthorName
         * @param notAuthorName  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder notAuthorName(String notAuthorName) {
            this.notAuthorName = notAuthorName;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set sources
         * @param sources  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder sources(Object sources) {
            this.sources = sources;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set predefinedSources
         * @param predefinedSources  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder predefinedSources(Object predefinedSources) {
            this.predefinedSources = predefinedSources;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set notSources
         * @param notSources  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder notSources(Object notSources) {
            this.notSources = notSources;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set lang
         * @param lang  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder lang(Object lang) {
            this.lang = lang;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set notLang
         * @param notLang  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder notLang(Object notLang) {
            this.notLang = notLang;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set countries
         * @param countries  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder countries(Object countries) {
            this.countries = countries;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set notCountries
         * @param notCountries  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder notCountries(Object notCountries) {
            this.notCountries = notCountries;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set from
         * @param from  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder from(String from) {
            this.from = from;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set to
         * @param to  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder to(String to) {
            this.to = to;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set publishedDatePrecision
         * @param publishedDatePrecision  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder publishedDatePrecision(String publishedDatePrecision) {
            this.publishedDatePrecision = publishedDatePrecision;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set byParseDate
         * @param byParseDate  (optional, default to false)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder byParseDate(Boolean byParseDate) {
            this.byParseDate = byParseDate;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set sortBy
         * @param sortBy  (optional, default to relevancy)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set rankedOnly
         * @param rankedOnly  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder rankedOnly(String rankedOnly) {
            this.rankedOnly = rankedOnly;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set fromRank
         * @param fromRank  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder fromRank(Integer fromRank) {
            this.fromRank = fromRank;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set toRank
         * @param toRank  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder toRank(Integer toRank) {
            this.toRank = toRank;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set isHeadline
         * @param isHeadline  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder isHeadline(Boolean isHeadline) {
            this.isHeadline = isHeadline;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set isOpinion
         * @param isOpinion  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder isOpinion(Boolean isOpinion) {
            this.isOpinion = isOpinion;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set isPaidContent
         * @param isPaidContent  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder isPaidContent(Boolean isPaidContent) {
            this.isPaidContent = isPaidContent;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set parentUrl
         * @param parentUrl  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder parentUrl(Object parentUrl) {
            this.parentUrl = parentUrl;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set allLinks
         * @param allLinks  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder allLinks(Object allLinks) {
            this.allLinks = allLinks;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set allDomainLinks
         * @param allDomainLinks  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder allDomainLinks(Object allDomainLinks) {
            this.allDomainLinks = allDomainLinks;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set wordCountMin
         * @param wordCountMin  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder wordCountMin(Integer wordCountMin) {
            this.wordCountMin = wordCountMin;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set wordCountMax
         * @param wordCountMax  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder wordCountMax(Integer wordCountMax) {
            this.wordCountMax = wordCountMax;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set page
         * @param page  (optional, default to 1)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder page(Integer page) {
            this.page = page;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set pageSize
         * @param pageSize  (optional, default to 100)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set includeNlpData
         * @param includeNlpData  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder includeNlpData(Boolean includeNlpData) {
            this.includeNlpData = includeNlpData;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set hasNlp
         * @param hasNlp  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder hasNlp(Boolean hasNlp) {
            this.hasNlp = hasNlp;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set theme
         * @param theme  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder theme(String theme) {
            this.theme = theme;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set notTheme
         * @param notTheme  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder notTheme(String notTheme) {
            this.notTheme = notTheme;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set nerName
         * @param nerName  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder nerName(String nerName) {
            this.nerName = nerName;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set titleSentimentMin
         * @param titleSentimentMin  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder titleSentimentMin(Double titleSentimentMin) {
            this.titleSentimentMin = titleSentimentMin;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set titleSentimentMax
         * @param titleSentimentMax  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder titleSentimentMax(Double titleSentimentMax) {
            this.titleSentimentMax = titleSentimentMax;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set contentSentimentMin
         * @param contentSentimentMin  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder contentSentimentMin(Double contentSentimentMin) {
            this.contentSentimentMin = contentSentimentMin;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set contentSentimentMax
         * @param contentSentimentMax  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder contentSentimentMax(Double contentSentimentMax) {
            this.contentSentimentMax = contentSentimentMax;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set iptcTags
         * @param iptcTags  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder iptcTags(Object iptcTags) {
            this.iptcTags = iptcTags;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set notIptcTags
         * @param notIptcTags  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder notIptcTags(Object notIptcTags) {
            this.notIptcTags = notIptcTags;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set iabTags
         * @param iabTags  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder iabTags(Object iabTags) {
            this.iabTags = iabTags;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Set notIabTags
         * @param notIabTags  (optional)
         * @return AuthorsApi.PostRequestBuilder
         */
        public AuthorsApi.PostRequestBuilder notIabTags(Object notIabTags) {
            this.notIabTags = notIabTags;
            return (AuthorsApi.PostRequestBuilder) this;
        }
        
        /**
         * Build call for post
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AuthorSearchRequest authorSearchRequest = buildBodyParams();
            return postCall(authorSearchRequest, _callback);
        }

        private AuthorSearchRequest buildBodyParams() {
            AuthorSearchRequest authorSearchRequest = new AuthorSearchRequest();
            authorSearchRequest.authorName(this.authorName);
            authorSearchRequest.notAuthorName(this.notAuthorName);
            authorSearchRequest.sources(this.sources);
            authorSearchRequest.predefinedSources(this.predefinedSources);
            authorSearchRequest.notSources(this.notSources);
            authorSearchRequest.lang(this.lang);
            authorSearchRequest.notLang(this.notLang);
            authorSearchRequest.countries(this.countries);
            authorSearchRequest.notCountries(this.notCountries);
            authorSearchRequest.from(this.from);
            authorSearchRequest.to(this.to);
            authorSearchRequest.publishedDatePrecision(this.publishedDatePrecision);
            authorSearchRequest.byParseDate(this.byParseDate);
            authorSearchRequest.sortBy(this.sortBy);
            authorSearchRequest.rankedOnly(this.rankedOnly);
            authorSearchRequest.fromRank(this.fromRank);
            authorSearchRequest.toRank(this.toRank);
            authorSearchRequest.isHeadline(this.isHeadline);
            authorSearchRequest.isOpinion(this.isOpinion);
            authorSearchRequest.isPaidContent(this.isPaidContent);
            authorSearchRequest.parentUrl(this.parentUrl);
            authorSearchRequest.allLinks(this.allLinks);
            authorSearchRequest.allDomainLinks(this.allDomainLinks);
            authorSearchRequest.wordCountMin(this.wordCountMin);
            authorSearchRequest.wordCountMax(this.wordCountMax);
            authorSearchRequest.page(this.page);
            authorSearchRequest.pageSize(this.pageSize);
            authorSearchRequest.includeNlpData(this.includeNlpData);
            authorSearchRequest.hasNlp(this.hasNlp);
            authorSearchRequest.theme(this.theme);
            authorSearchRequest.notTheme(this.notTheme);
            authorSearchRequest.nerName(this.nerName);
            authorSearchRequest.titleSentimentMin(this.titleSentimentMin);
            authorSearchRequest.titleSentimentMax(this.titleSentimentMax);
            authorSearchRequest.contentSentimentMin(this.contentSentimentMin);
            authorSearchRequest.contentSentimentMax(this.contentSentimentMax);
            authorSearchRequest.iptcTags(this.iptcTags);
            authorSearchRequest.notIptcTags(this.notIptcTags);
            authorSearchRequest.iabTags(this.iabTags);
            authorSearchRequest.notIabTags(this.notIabTags);
            return authorSearchRequest;
        }

        /**
         * Execute post request
         * @return FSearchResponse1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public FSearchResponse1 execute() throws ApiException {
            AuthorSearchRequest authorSearchRequest = buildBodyParams();
            ApiResponse<FSearchResponse1> localVarResp = postWithHttpInfo(authorSearchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute post request with HTTP info returned
         * @return ApiResponse&lt;FSearchResponse1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FSearchResponse1> executeWithHttpInfo() throws ApiException {
            AuthorSearchRequest authorSearchRequest = buildBodyParams();
            return postWithHttpInfo(authorSearchRequest);
        }

        /**
         * Execute post request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FSearchResponse1> _callback) throws ApiException {
            AuthorSearchRequest authorSearchRequest = buildBodyParams();
            return postAsync(authorSearchRequest, _callback);
        }
    }

    /**
     * [Post] Search By Author Request
     * This endpoint allows you to search for articles by author. You need to specify the author name. You can also filter by language, country, source, and more.
     * @param authorSearchRequest  (required)
     * @return PostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public AuthorsApi.PostRequestBuilder post(String authorName) throws IllegalArgumentException {
        if (authorName == null) throw new IllegalArgumentException("\"authorName\" is required but got null");
            

        return ((AuthorsApi) this).new PostRequestBuilder(authorName);
    }
}
