/*
 * NewsCatcher-V3 Production API
 * <img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>
 *
 * The version of the OpenAPI document: 3.2.16
 * Contact: maksym@newscatcherapi.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.newscatcherapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.newscatcherapi.client.JSON;

/**
 * Sources request DTO
 */
@ApiModel(description = "Sources request DTO")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SourcesRequest {
  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  private String lang;

  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private String countries;

  public static final String SERIALIZED_NAME_PREDEFINED_SOURCES = "predefined_sources";
  @SerializedName(SERIALIZED_NAME_PREDEFINED_SOURCES)
  private String predefinedSources;

  public static final String SERIALIZED_NAME_INCLUDE_ADDITIONAL_INFO = "include_additional_info";
  @SerializedName(SERIALIZED_NAME_INCLUDE_ADDITIONAL_INFO)
  private Boolean includeAdditionalInfo;

  public static final String SERIALIZED_NAME_FROM_RANK = "from_rank";
  @SerializedName(SERIALIZED_NAME_FROM_RANK)
  private Integer fromRank;

  public static final String SERIALIZED_NAME_TO_RANK = "to_rank";
  @SerializedName(SERIALIZED_NAME_TO_RANK)
  private Integer toRank;

  public static final String SERIALIZED_NAME_SOURCE_NAME = "source_name";
  @SerializedName(SERIALIZED_NAME_SOURCE_NAME)
  private Object sourceName = null;

  public static final String SERIALIZED_NAME_SOURCE_URL = "source_url";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private String sourceUrl;

  public SourcesRequest() {
  }

  public SourcesRequest lang(String lang) {
    
    
    
    
    this.lang = lang;
    return this;
  }

   /**
   * Get lang
   * @return lang
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLang() {
    return lang;
  }


  public void setLang(String lang) {
    
    
    
    this.lang = lang;
  }


  public SourcesRequest countries(String countries) {
    
    
    
    
    this.countries = countries;
    return this;
  }

   /**
   * Get countries
   * @return countries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountries() {
    return countries;
  }


  public void setCountries(String countries) {
    
    
    
    this.countries = countries;
  }


  public SourcesRequest predefinedSources(String predefinedSources) {
    
    
    
    
    this.predefinedSources = predefinedSources;
    return this;
  }

   /**
   * Get predefinedSources
   * @return predefinedSources
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPredefinedSources() {
    return predefinedSources;
  }


  public void setPredefinedSources(String predefinedSources) {
    
    
    
    this.predefinedSources = predefinedSources;
  }


  public SourcesRequest includeAdditionalInfo(Boolean includeAdditionalInfo) {
    
    
    
    
    this.includeAdditionalInfo = includeAdditionalInfo;
    return this;
  }

   /**
   * Get includeAdditionalInfo
   * @return includeAdditionalInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIncludeAdditionalInfo() {
    return includeAdditionalInfo;
  }


  public void setIncludeAdditionalInfo(Boolean includeAdditionalInfo) {
    
    
    
    this.includeAdditionalInfo = includeAdditionalInfo;
  }


  public SourcesRequest fromRank(Integer fromRank) {
    
    
    
    
    this.fromRank = fromRank;
    return this;
  }

   /**
   * Get fromRank
   * @return fromRank
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getFromRank() {
    return fromRank;
  }


  public void setFromRank(Integer fromRank) {
    
    
    
    this.fromRank = fromRank;
  }


  public SourcesRequest toRank(Integer toRank) {
    
    
    
    
    this.toRank = toRank;
    return this;
  }

   /**
   * Get toRank
   * @return toRank
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getToRank() {
    return toRank;
  }


  public void setToRank(Integer toRank) {
    
    
    
    this.toRank = toRank;
  }


  public SourcesRequest sourceName(Object sourceName) {
    
    
    
    
    this.sourceName = sourceName;
    return this;
  }

   /**
   * Get sourceName
   * @return sourceName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getSourceName() {
    return sourceName;
  }


  public void setSourceName(Object sourceName) {
    
    
    
    this.sourceName = sourceName;
  }


  public SourcesRequest sourceUrl(String sourceUrl) {
    
    
    
    
    this.sourceUrl = sourceUrl;
    return this;
  }

   /**
   * Get sourceUrl
   * @return sourceUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSourceUrl() {
    return sourceUrl;
  }


  public void setSourceUrl(String sourceUrl) {
    
    
    
    this.sourceUrl = sourceUrl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SourcesRequest instance itself
   */
  public SourcesRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourcesRequest sourcesRequest = (SourcesRequest) o;
    return Objects.equals(this.lang, sourcesRequest.lang) &&
        Objects.equals(this.countries, sourcesRequest.countries) &&
        Objects.equals(this.predefinedSources, sourcesRequest.predefinedSources) &&
        Objects.equals(this.includeAdditionalInfo, sourcesRequest.includeAdditionalInfo) &&
        Objects.equals(this.fromRank, sourcesRequest.fromRank) &&
        Objects.equals(this.toRank, sourcesRequest.toRank) &&
        Objects.equals(this.sourceName, sourcesRequest.sourceName) &&
        Objects.equals(this.sourceUrl, sourcesRequest.sourceUrl)&&
        Objects.equals(this.additionalProperties, sourcesRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(lang, countries, predefinedSources, includeAdditionalInfo, fromRank, toRank, sourceName, sourceUrl, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourcesRequest {\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    predefinedSources: ").append(toIndentedString(predefinedSources)).append("\n");
    sb.append("    includeAdditionalInfo: ").append(toIndentedString(includeAdditionalInfo)).append("\n");
    sb.append("    fromRank: ").append(toIndentedString(fromRank)).append("\n");
    sb.append("    toRank: ").append(toIndentedString(toRank)).append("\n");
    sb.append("    sourceName: ").append(toIndentedString(sourceName)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lang");
    openapiFields.add("countries");
    openapiFields.add("predefined_sources");
    openapiFields.add("include_additional_info");
    openapiFields.add("from_rank");
    openapiFields.add("to_rank");
    openapiFields.add("source_name");
    openapiFields.add("source_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SourcesRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SourcesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourcesRequest is not found in the empty JSON string", SourcesRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("lang") != null && !jsonObj.get("lang").isJsonNull()) && !jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      if ((jsonObj.get("countries") != null && !jsonObj.get("countries").isJsonNull()) && !jsonObj.get("countries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countries").toString()));
      }
      if ((jsonObj.get("predefined_sources") != null && !jsonObj.get("predefined_sources").isJsonNull()) && !jsonObj.get("predefined_sources").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `predefined_sources` to be a primitive type in the JSON string but got `%s`", jsonObj.get("predefined_sources").toString()));
      }
      if ((jsonObj.get("source_url") != null && !jsonObj.get("source_url").isJsonNull()) && !jsonObj.get("source_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourcesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourcesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourcesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourcesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SourcesRequest>() {
           @Override
           public void write(JsonWriter out, SourcesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SourcesRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SourcesRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SourcesRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SourcesRequest
  * @throws IOException if the JSON string is invalid with respect to SourcesRequest
  */
  public static SourcesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourcesRequest.class);
  }

 /**
  * Convert an instance of SourcesRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

