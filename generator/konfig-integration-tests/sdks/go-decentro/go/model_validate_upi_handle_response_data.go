/*
decentro-in-collections

Collections

API version: 1.0.0
Contact: admin@decentro.tech
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package decentro_in_collections

import (
	"encoding/json"
)

// ValidateUpiHandleResponseData struct for ValidateUpiHandleResponseData
type ValidateUpiHandleResponseData struct {
	UpiId *string `json:"upiId,omitempty"`
	Name *string `json:"name,omitempty"`
	Status *string `json:"status,omitempty"`
	StatusDescription *string `json:"statusDescription,omitempty"`
}

// NewValidateUpiHandleResponseData instantiates a new ValidateUpiHandleResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateUpiHandleResponseData() *ValidateUpiHandleResponseData {
	this := ValidateUpiHandleResponseData{}
	return &this
}

// NewValidateUpiHandleResponseDataWithDefaults instantiates a new ValidateUpiHandleResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateUpiHandleResponseDataWithDefaults() *ValidateUpiHandleResponseData {
	this := ValidateUpiHandleResponseData{}
	return &this
}

// GetUpiId returns the UpiId field value if set, zero value otherwise.
func (o *ValidateUpiHandleResponseData) GetUpiId() string {
	if o == nil || isNil(o.UpiId) {
		var ret string
		return ret
	}
	return *o.UpiId
}

// GetUpiIdOk returns a tuple with the UpiId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateUpiHandleResponseData) GetUpiIdOk() (*string, bool) {
	if o == nil || isNil(o.UpiId) {
    return nil, false
	}
	return o.UpiId, true
}

// HasUpiId returns a boolean if a field has been set.
func (o *ValidateUpiHandleResponseData) HasUpiId() bool {
	if o != nil && !isNil(o.UpiId) {
		return true
	}

	return false
}

// SetUpiId gets a reference to the given string and assigns it to the UpiId field.
func (o *ValidateUpiHandleResponseData) SetUpiId(v string) {
	o.UpiId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ValidateUpiHandleResponseData) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateUpiHandleResponseData) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ValidateUpiHandleResponseData) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ValidateUpiHandleResponseData) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ValidateUpiHandleResponseData) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateUpiHandleResponseData) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ValidateUpiHandleResponseData) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ValidateUpiHandleResponseData) SetStatus(v string) {
	o.Status = &v
}

// GetStatusDescription returns the StatusDescription field value if set, zero value otherwise.
func (o *ValidateUpiHandleResponseData) GetStatusDescription() string {
	if o == nil || isNil(o.StatusDescription) {
		var ret string
		return ret
	}
	return *o.StatusDescription
}

// GetStatusDescriptionOk returns a tuple with the StatusDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateUpiHandleResponseData) GetStatusDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.StatusDescription) {
    return nil, false
	}
	return o.StatusDescription, true
}

// HasStatusDescription returns a boolean if a field has been set.
func (o *ValidateUpiHandleResponseData) HasStatusDescription() bool {
	if o != nil && !isNil(o.StatusDescription) {
		return true
	}

	return false
}

// SetStatusDescription gets a reference to the given string and assigns it to the StatusDescription field.
func (o *ValidateUpiHandleResponseData) SetStatusDescription(v string) {
	o.StatusDescription = &v
}

func (o ValidateUpiHandleResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.UpiId) {
		toSerialize["upiId"] = o.UpiId
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.StatusDescription) {
		toSerialize["statusDescription"] = o.StatusDescription
	}
	return json.Marshal(toSerialize)
}

type NullableValidateUpiHandleResponseData struct {
	value *ValidateUpiHandleResponseData
	isSet bool
}

func (v NullableValidateUpiHandleResponseData) Get() *ValidateUpiHandleResponseData {
	return v.value
}

func (v *NullableValidateUpiHandleResponseData) Set(val *ValidateUpiHandleResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateUpiHandleResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateUpiHandleResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateUpiHandleResponseData(val *ValidateUpiHandleResponseData) *NullableValidateUpiHandleResponseData {
	return &NullableValidateUpiHandleResponseData{value: val, isSet: true}
}

func (v NullableValidateUpiHandleResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateUpiHandleResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


