/*
decentro-in-collections

Collections

API version: 1.0.0
Contact: admin@decentro.tech
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package decentro_in_collections

import (
	"encoding/json"
)

// IssueCollectRequestRequest struct for IssueCollectRequestRequest
type IssueCollectRequestRequest struct {
	ReferenceId string `json:"reference_id"`
	PayerUpi string `json:"payer_upi"`
	PayeeAccount string `json:"payee_account"`
	Amount float32 `json:"amount"`
	PurposeMessage string `json:"purpose_message"`
	ExpiryTime *int32 `json:"expiry_time,omitempty"`
}

// NewIssueCollectRequestRequest instantiates a new IssueCollectRequestRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueCollectRequestRequest(referenceId string, payerUpi string, payeeAccount string, amount float32, purposeMessage string) *IssueCollectRequestRequest {
	this := IssueCollectRequestRequest{}
	this.ReferenceId = referenceId
	this.PayerUpi = payerUpi
	this.PayeeAccount = payeeAccount
	this.Amount = amount
	this.PurposeMessage = purposeMessage
	return &this
}

// NewIssueCollectRequestRequestWithDefaults instantiates a new IssueCollectRequestRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueCollectRequestRequestWithDefaults() *IssueCollectRequestRequest {
	this := IssueCollectRequestRequest{}
	return &this
}

// GetReferenceId returns the ReferenceId field value
func (o *IssueCollectRequestRequest) GetReferenceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value
// and a boolean to check if the value has been set.
func (o *IssueCollectRequestRequest) GetReferenceIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ReferenceId, true
}

// SetReferenceId sets field value
func (o *IssueCollectRequestRequest) SetReferenceId(v string) {
	o.ReferenceId = v
}

// GetPayerUpi returns the PayerUpi field value
func (o *IssueCollectRequestRequest) GetPayerUpi() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayerUpi
}

// GetPayerUpiOk returns a tuple with the PayerUpi field value
// and a boolean to check if the value has been set.
func (o *IssueCollectRequestRequest) GetPayerUpiOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.PayerUpi, true
}

// SetPayerUpi sets field value
func (o *IssueCollectRequestRequest) SetPayerUpi(v string) {
	o.PayerUpi = v
}

// GetPayeeAccount returns the PayeeAccount field value
func (o *IssueCollectRequestRequest) GetPayeeAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayeeAccount
}

// GetPayeeAccountOk returns a tuple with the PayeeAccount field value
// and a boolean to check if the value has been set.
func (o *IssueCollectRequestRequest) GetPayeeAccountOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.PayeeAccount, true
}

// SetPayeeAccount sets field value
func (o *IssueCollectRequestRequest) SetPayeeAccount(v string) {
	o.PayeeAccount = v
}

// GetAmount returns the Amount field value
func (o *IssueCollectRequestRequest) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *IssueCollectRequestRequest) GetAmountOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *IssueCollectRequestRequest) SetAmount(v float32) {
	o.Amount = v
}

// GetPurposeMessage returns the PurposeMessage field value
func (o *IssueCollectRequestRequest) GetPurposeMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PurposeMessage
}

// GetPurposeMessageOk returns a tuple with the PurposeMessage field value
// and a boolean to check if the value has been set.
func (o *IssueCollectRequestRequest) GetPurposeMessageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.PurposeMessage, true
}

// SetPurposeMessage sets field value
func (o *IssueCollectRequestRequest) SetPurposeMessage(v string) {
	o.PurposeMessage = v
}

// GetExpiryTime returns the ExpiryTime field value if set, zero value otherwise.
func (o *IssueCollectRequestRequest) GetExpiryTime() int32 {
	if o == nil || isNil(o.ExpiryTime) {
		var ret int32
		return ret
	}
	return *o.ExpiryTime
}

// GetExpiryTimeOk returns a tuple with the ExpiryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCollectRequestRequest) GetExpiryTimeOk() (*int32, bool) {
	if o == nil || isNil(o.ExpiryTime) {
    return nil, false
	}
	return o.ExpiryTime, true
}

// HasExpiryTime returns a boolean if a field has been set.
func (o *IssueCollectRequestRequest) HasExpiryTime() bool {
	if o != nil && !isNil(o.ExpiryTime) {
		return true
	}

	return false
}

// SetExpiryTime gets a reference to the given int32 and assigns it to the ExpiryTime field.
func (o *IssueCollectRequestRequest) SetExpiryTime(v int32) {
	o.ExpiryTime = &v
}

func (o IssueCollectRequestRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["reference_id"] = o.ReferenceId
	}
	if true {
		toSerialize["payer_upi"] = o.PayerUpi
	}
	if true {
		toSerialize["payee_account"] = o.PayeeAccount
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["purpose_message"] = o.PurposeMessage
	}
	if !isNil(o.ExpiryTime) {
		toSerialize["expiry_time"] = o.ExpiryTime
	}
	return json.Marshal(toSerialize)
}

type NullableIssueCollectRequestRequest struct {
	value *IssueCollectRequestRequest
	isSet bool
}

func (v NullableIssueCollectRequestRequest) Get() *IssueCollectRequestRequest {
	return v.value
}

func (v *NullableIssueCollectRequestRequest) Set(val *IssueCollectRequestRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueCollectRequestRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueCollectRequestRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueCollectRequestRequest(val *IssueCollectRequestRequest) *NullableIssueCollectRequestRequest {
	return &NullableIssueCollectRequestRequest{value: val, isSet: true}
}

func (v NullableIssueCollectRequestRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueCollectRequestRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


