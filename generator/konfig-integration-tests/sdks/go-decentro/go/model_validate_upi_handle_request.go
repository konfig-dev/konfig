/*
decentro-in-collections

Collections

API version: 1.0.0
Contact: admin@decentro.tech
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package decentro_in_collections

import (
	"encoding/json"
)

// ValidateUpiHandleRequest struct for ValidateUpiHandleRequest
type ValidateUpiHandleRequest struct {
	ReferenceId string `json:"reference_id"`
	UpiId string `json:"upi_id"`
	Type *string `json:"type,omitempty"`
}

// NewValidateUpiHandleRequest instantiates a new ValidateUpiHandleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateUpiHandleRequest(referenceId string, upiId string) *ValidateUpiHandleRequest {
	this := ValidateUpiHandleRequest{}
	this.ReferenceId = referenceId
	this.UpiId = upiId
	return &this
}

// NewValidateUpiHandleRequestWithDefaults instantiates a new ValidateUpiHandleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateUpiHandleRequestWithDefaults() *ValidateUpiHandleRequest {
	this := ValidateUpiHandleRequest{}
	return &this
}

// GetReferenceId returns the ReferenceId field value
func (o *ValidateUpiHandleRequest) GetReferenceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value
// and a boolean to check if the value has been set.
func (o *ValidateUpiHandleRequest) GetReferenceIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ReferenceId, true
}

// SetReferenceId sets field value
func (o *ValidateUpiHandleRequest) SetReferenceId(v string) {
	o.ReferenceId = v
}

// GetUpiId returns the UpiId field value
func (o *ValidateUpiHandleRequest) GetUpiId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpiId
}

// GetUpiIdOk returns a tuple with the UpiId field value
// and a boolean to check if the value has been set.
func (o *ValidateUpiHandleRequest) GetUpiIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UpiId, true
}

// SetUpiId sets field value
func (o *ValidateUpiHandleRequest) SetUpiId(v string) {
	o.UpiId = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ValidateUpiHandleRequest) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateUpiHandleRequest) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ValidateUpiHandleRequest) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ValidateUpiHandleRequest) SetType(v string) {
	o.Type = &v
}

func (o ValidateUpiHandleRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["reference_id"] = o.ReferenceId
	}
	if true {
		toSerialize["upi_id"] = o.UpiId
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableValidateUpiHandleRequest struct {
	value *ValidateUpiHandleRequest
	isSet bool
}

func (v NullableValidateUpiHandleRequest) Get() *ValidateUpiHandleRequest {
	return v.value
}

func (v *NullableValidateUpiHandleRequest) Set(val *ValidateUpiHandleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateUpiHandleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateUpiHandleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateUpiHandleRequest(val *ValidateUpiHandleRequest) *NullableValidateUpiHandleRequest {
	return &NullableValidateUpiHandleRequest{value: val, isSet: true}
}

func (v NullableValidateUpiHandleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateUpiHandleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


