/*
decentro-in-collections

Collections

API version: 1.0.0
Contact: admin@decentro.tech
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package decentro_in_collections

import (
	"encoding/json"
)

// IssueUpiRefundRequest struct for IssueUpiRefundRequest
type IssueUpiRefundRequest struct {
	ReferenceId string `json:"reference_id"`
	TransactionId *string `json:"transaction_id,omitempty"`
	BankReferenceNumber *string `json:"bank_reference_number,omitempty"`
	PurposeMessage *string `json:"purpose_message,omitempty"`
}

// NewIssueUpiRefundRequest instantiates a new IssueUpiRefundRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueUpiRefundRequest(referenceId string) *IssueUpiRefundRequest {
	this := IssueUpiRefundRequest{}
	this.ReferenceId = referenceId
	return &this
}

// NewIssueUpiRefundRequestWithDefaults instantiates a new IssueUpiRefundRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueUpiRefundRequestWithDefaults() *IssueUpiRefundRequest {
	this := IssueUpiRefundRequest{}
	return &this
}

// GetReferenceId returns the ReferenceId field value
func (o *IssueUpiRefundRequest) GetReferenceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value
// and a boolean to check if the value has been set.
func (o *IssueUpiRefundRequest) GetReferenceIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ReferenceId, true
}

// SetReferenceId sets field value
func (o *IssueUpiRefundRequest) SetReferenceId(v string) {
	o.ReferenceId = v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *IssueUpiRefundRequest) GetTransactionId() string {
	if o == nil || isNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueUpiRefundRequest) GetTransactionIdOk() (*string, bool) {
	if o == nil || isNil(o.TransactionId) {
    return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *IssueUpiRefundRequest) HasTransactionId() bool {
	if o != nil && !isNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *IssueUpiRefundRequest) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetBankReferenceNumber returns the BankReferenceNumber field value if set, zero value otherwise.
func (o *IssueUpiRefundRequest) GetBankReferenceNumber() string {
	if o == nil || isNil(o.BankReferenceNumber) {
		var ret string
		return ret
	}
	return *o.BankReferenceNumber
}

// GetBankReferenceNumberOk returns a tuple with the BankReferenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueUpiRefundRequest) GetBankReferenceNumberOk() (*string, bool) {
	if o == nil || isNil(o.BankReferenceNumber) {
    return nil, false
	}
	return o.BankReferenceNumber, true
}

// HasBankReferenceNumber returns a boolean if a field has been set.
func (o *IssueUpiRefundRequest) HasBankReferenceNumber() bool {
	if o != nil && !isNil(o.BankReferenceNumber) {
		return true
	}

	return false
}

// SetBankReferenceNumber gets a reference to the given string and assigns it to the BankReferenceNumber field.
func (o *IssueUpiRefundRequest) SetBankReferenceNumber(v string) {
	o.BankReferenceNumber = &v
}

// GetPurposeMessage returns the PurposeMessage field value if set, zero value otherwise.
func (o *IssueUpiRefundRequest) GetPurposeMessage() string {
	if o == nil || isNil(o.PurposeMessage) {
		var ret string
		return ret
	}
	return *o.PurposeMessage
}

// GetPurposeMessageOk returns a tuple with the PurposeMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueUpiRefundRequest) GetPurposeMessageOk() (*string, bool) {
	if o == nil || isNil(o.PurposeMessage) {
    return nil, false
	}
	return o.PurposeMessage, true
}

// HasPurposeMessage returns a boolean if a field has been set.
func (o *IssueUpiRefundRequest) HasPurposeMessage() bool {
	if o != nil && !isNil(o.PurposeMessage) {
		return true
	}

	return false
}

// SetPurposeMessage gets a reference to the given string and assigns it to the PurposeMessage field.
func (o *IssueUpiRefundRequest) SetPurposeMessage(v string) {
	o.PurposeMessage = &v
}

func (o IssueUpiRefundRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["reference_id"] = o.ReferenceId
	}
	if !isNil(o.TransactionId) {
		toSerialize["transaction_id"] = o.TransactionId
	}
	if !isNil(o.BankReferenceNumber) {
		toSerialize["bank_reference_number"] = o.BankReferenceNumber
	}
	if !isNil(o.PurposeMessage) {
		toSerialize["purpose_message"] = o.PurposeMessage
	}
	return json.Marshal(toSerialize)
}

type NullableIssueUpiRefundRequest struct {
	value *IssueUpiRefundRequest
	isSet bool
}

func (v NullableIssueUpiRefundRequest) Get() *IssueUpiRefundRequest {
	return v.value
}

func (v *NullableIssueUpiRefundRequest) Set(val *IssueUpiRefundRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueUpiRefundRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueUpiRefundRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueUpiRefundRequest(val *IssueUpiRefundRequest) *NullableIssueUpiRefundRequest {
	return &NullableIssueUpiRefundRequest{value: val, isSet: true}
}

func (v NullableIssueUpiRefundRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueUpiRefundRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


