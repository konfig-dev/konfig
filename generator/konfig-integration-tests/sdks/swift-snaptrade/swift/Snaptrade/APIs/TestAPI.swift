//
// TestAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TestAPI {

    /**
     Fetches a JSON value based on input parameter
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func fetch(apiResponseQueue: DispatchQueue = SnaptradeAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return fetchWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Fetches a JSON value based on input parameter
     - GET /simple-endpoint
     - Provide an input parameter to receive a JSON value with properties.
     - API Key:
       - type: apiKey X-API-KEY 
       - name: ApiKey
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func fetchWithRequestBuilder() -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/simple-endpoint"
        let localVariableURLString = SnaptradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = SnaptradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
