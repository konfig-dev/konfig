//
// TradingAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TradingAPI {

    /**
     Cancel open order in account
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to cancel the order in. 
     - parameter tradingCancelUserAccountOrderRequest: (body) The Order ID to be canceled 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cancelUserAccountOrder(userId: String, userSecret: String, accountId: UUID, tradingCancelUserAccountOrderRequest: TradingCancelUserAccountOrderRequest, apiResponseQueue: DispatchQueue = SnaptradeAPI.apiResponseQueue, completion: @escaping ((_ data: AccountOrderRecord?, _ error: Error?) -> Void)) -> RequestTask {
        return cancelUserAccountOrderWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, tradingCancelUserAccountOrderRequest: tradingCancelUserAccountOrderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancel open order in account
     - POST /accounts/{accountId}/orders/cancel
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to cancel the order in. 
     - parameter tradingCancelUserAccountOrderRequest: (body) The Order ID to be canceled 
     - returns: RequestBuilder<AccountOrderRecord> 
     */
    open class func cancelUserAccountOrderWithRequestBuilder(userId: String, userSecret: String, accountId: UUID, tradingCancelUserAccountOrderRequest: TradingCancelUserAccountOrderRequest) -> RequestBuilder<AccountOrderRecord> {
        var localVariablePath = "/accounts/{accountId}/orders/cancel"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SnaptradeAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tradingCancelUserAccountOrderRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountOrderRecord>.Type = SnaptradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Check impact of trades on account.
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter manualTradeForm: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOrderImpact(userId: String, userSecret: String, manualTradeForm: ManualTradeForm, apiResponseQueue: DispatchQueue = SnaptradeAPI.apiResponseQueue, completion: @escaping ((_ data: ManualTradeAndImpact?, _ error: Error?) -> Void)) -> RequestTask {
        return getOrderImpactWithRequestBuilder(userId: userId, userSecret: userSecret, manualTradeForm: manualTradeForm).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Check impact of trades on account.
     - POST /trade/impact
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter manualTradeForm: (body)  
     - returns: RequestBuilder<ManualTradeAndImpact> 
     */
    open class func getOrderImpactWithRequestBuilder(userId: String, userSecret: String, manualTradeForm: ManualTradeForm) -> RequestBuilder<ManualTradeAndImpact> {
        let localVariablePath = "/trade/impact"
        let localVariableURLString = SnaptradeAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: manualTradeForm)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ManualTradeAndImpact>.Type = SnaptradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get symbol quotes
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter symbols: (query) List of universal_symbol_id or tickers to get quotes for. 
     - parameter accountId: (path) The ID of the account to get quotes. 
     - parameter useTicker: (query) Should be set to True if providing tickers. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserAccountQuotes(userId: String, userSecret: String, symbols: String, accountId: String, useTicker: Bool? = nil, apiResponseQueue: DispatchQueue = SnaptradeAPI.apiResponseQueue, completion: @escaping ((_ data: [SymbolsQuotesInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserAccountQuotesWithRequestBuilder(userId: userId, userSecret: userSecret, symbols: symbols, accountId: accountId, useTicker: useTicker).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get symbol quotes
     - GET /accounts/{accountId}/quotes
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter symbols: (query) List of universal_symbol_id or tickers to get quotes for. 
     - parameter accountId: (path) The ID of the account to get quotes. 
     - parameter useTicker: (query) Should be set to True if providing tickers. (optional)
     - returns: RequestBuilder<[SymbolsQuotesInner]> 
     */
    open class func getUserAccountQuotesWithRequestBuilder(userId: String, userSecret: String, symbols: String, accountId: String, useTicker: Bool? = nil) -> RequestBuilder<[SymbolsQuotesInner]> {
        var localVariablePath = "/accounts/{accountId}/quotes"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SnaptradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
            "symbols": (wrappedValue: symbols.encodeToJSON(), isExplode: true),
            "use_ticker": (wrappedValue: useTicker?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[SymbolsQuotesInner]>.Type = SnaptradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Place a trade with NO validation.
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter manualTradeForm: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func placeForceOrder(userId: String, userSecret: String, manualTradeForm: ManualTradeForm, apiResponseQueue: DispatchQueue = SnaptradeAPI.apiResponseQueue, completion: @escaping ((_ data: AccountOrderRecord?, _ error: Error?) -> Void)) -> RequestTask {
        return placeForceOrderWithRequestBuilder(userId: userId, userSecret: userSecret, manualTradeForm: manualTradeForm).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Place a trade with NO validation.
     - POST /trade/place
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter manualTradeForm: (body)  
     - returns: RequestBuilder<AccountOrderRecord> 
     */
    open class func placeForceOrderWithRequestBuilder(userId: String, userSecret: String, manualTradeForm: ManualTradeForm) -> RequestBuilder<AccountOrderRecord> {
        let localVariablePath = "/trade/place"
        let localVariableURLString = SnaptradeAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: manualTradeForm)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountOrderRecord>.Type = SnaptradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Place a OCO (One Cancels Other) order
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter tradingPlaceOCOOrderRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @discardableResult
    open class func placeOCOOrder(userId: String, userSecret: String, tradingPlaceOCOOrderRequest: TradingPlaceOCOOrderRequest, apiResponseQueue: DispatchQueue = SnaptradeAPI.apiResponseQueue, completion: @escaping ((_ data: AccountOrderRecord?, _ error: Error?) -> Void)) -> RequestTask {
        return placeOCOOrderWithRequestBuilder(userId: userId, userSecret: userSecret, tradingPlaceOCOOrderRequest: tradingPlaceOCOOrderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Place a OCO (One Cancels Other) order
     - POST /trade/oco
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter tradingPlaceOCOOrderRequest: (body)  
     - returns: RequestBuilder<AccountOrderRecord> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func placeOCOOrderWithRequestBuilder(userId: String, userSecret: String, tradingPlaceOCOOrderRequest: TradingPlaceOCOOrderRequest) -> RequestBuilder<AccountOrderRecord> {
        let localVariablePath = "/trade/oco"
        let localVariableURLString = SnaptradeAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tradingPlaceOCOOrderRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountOrderRecord>.Type = SnaptradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Place order
     
     - parameter tradeId: (path) The ID of trade object obtained from trade/impact endpoint 
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func placeOrder(tradeId: UUID, userId: String, userSecret: String, apiResponseQueue: DispatchQueue = SnaptradeAPI.apiResponseQueue, completion: @escaping ((_ data: AccountOrderRecord?, _ error: Error?) -> Void)) -> RequestTask {
        return placeOrderWithRequestBuilder(tradeId: tradeId, userId: userId, userSecret: userSecret).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Place order
     - POST /trade/{tradeId}
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter tradeId: (path) The ID of trade object obtained from trade/impact endpoint 
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - returns: RequestBuilder<AccountOrderRecord> 
     */
    open class func placeOrderWithRequestBuilder(tradeId: UUID, userId: String, userSecret: String) -> RequestBuilder<AccountOrderRecord> {
        var localVariablePath = "/trade/{tradeId}"
        let tradeIdPreEscape = "\(APIHelper.mapValueToPathItem(tradeId))"
        let tradeIdPostEscape = tradeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tradeId}", with: tradeIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SnaptradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountOrderRecord>.Type = SnaptradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
