//
// EncryptedResponseEncryptedMessageData.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EncryptedResponseEncryptedMessageData: Codable, JSONEncodable, Hashable {

    public var encryptedMessage: String?
    public var tag: String?
    public var nonce: String?

    public init(encryptedMessage: String? = nil, tag: String? = nil, nonce: String? = nil) {
        self.encryptedMessage = encryptedMessage
        self.tag = tag
        self.nonce = nonce
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case encryptedMessage
        case tag
        case nonce
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(encryptedMessage, forKey: .encryptedMessage)
        try container.encodeIfPresent(tag, forKey: .tag)
        try container.encodeIfPresent(nonce, forKey: .nonce)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        encryptedMessage = try container.decodeIfPresent(String.self, forKey: .encryptedMessage)
        tag = try container.decodeIfPresent(String.self, forKey: .tag)
        nonce = try container.decodeIfPresent(String.self, forKey: .nonce)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("encryptedMessage")
        nonAdditionalPropertyKeys.insert("tag")
        nonAdditionalPropertyKeys.insert("nonce")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

