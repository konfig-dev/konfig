//
// UserSettings.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** User account settings */
public struct UserSettings: Codable, JSONEncodable, Hashable {

    public var email: String?
    public var name: String?
    public var receiveCashNotification: Bool?
    public var receiveDriftNotification: Bool?
    public var userTrialActivated: Bool?
    public var activatedTrialDate: String?
    public var demo: Bool?
    public var apiEnabled: Bool?
    public var driftThreshold: Double?
    public var preferredCurrency: Currency?

    public init(email: String? = nil, name: String? = nil, receiveCashNotification: Bool? = nil, receiveDriftNotification: Bool? = nil, userTrialActivated: Bool? = nil, activatedTrialDate: String? = nil, demo: Bool? = nil, apiEnabled: Bool? = nil, driftThreshold: Double? = nil, preferredCurrency: Currency? = nil) {
        self.email = email
        self.name = name
        self.receiveCashNotification = receiveCashNotification
        self.receiveDriftNotification = receiveDriftNotification
        self.userTrialActivated = userTrialActivated
        self.activatedTrialDate = activatedTrialDate
        self.demo = demo
        self.apiEnabled = apiEnabled
        self.driftThreshold = driftThreshold
        self.preferredCurrency = preferredCurrency
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case email
        case name
        case receiveCashNotification = "receive_cash_notification"
        case receiveDriftNotification = "receive_drift_notification"
        case userTrialActivated = "user_trial_activated"
        case activatedTrialDate = "activated_trial_date"
        case demo
        case apiEnabled = "api_enabled"
        case driftThreshold = "drift_threshold"
        case preferredCurrency = "preferred_currency"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(receiveCashNotification, forKey: .receiveCashNotification)
        try container.encodeIfPresent(receiveDriftNotification, forKey: .receiveDriftNotification)
        try container.encodeIfPresent(userTrialActivated, forKey: .userTrialActivated)
        try container.encodeIfPresent(activatedTrialDate, forKey: .activatedTrialDate)
        try container.encodeIfPresent(demo, forKey: .demo)
        try container.encodeIfPresent(apiEnabled, forKey: .apiEnabled)
        try container.encodeIfPresent(driftThreshold, forKey: .driftThreshold)
        try container.encodeIfPresent(preferredCurrency, forKey: .preferredCurrency)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        email = try container.decodeIfPresent(String.self, forKey: .email)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        receiveCashNotification = try container.decodeIfPresent(Bool.self, forKey: .receiveCashNotification)
        receiveDriftNotification = try container.decodeIfPresent(Bool.self, forKey: .receiveDriftNotification)
        userTrialActivated = try container.decodeIfPresent(Bool.self, forKey: .userTrialActivated)
        activatedTrialDate = try container.decodeIfPresent(String.self, forKey: .activatedTrialDate)
        demo = try container.decodeIfPresent(Bool.self, forKey: .demo)
        apiEnabled = try container.decodeIfPresent(Bool.self, forKey: .apiEnabled)
        driftThreshold = try container.decodeIfPresent(Double.self, forKey: .driftThreshold)
        preferredCurrency = try container.decodeIfPresent(Currency.self, forKey: .preferredCurrency)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("email")
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("receive_cash_notification")
        nonAdditionalPropertyKeys.insert("receive_drift_notification")
        nonAdditionalPropertyKeys.insert("user_trial_activated")
        nonAdditionalPropertyKeys.insert("activated_trial_date")
        nonAdditionalPropertyKeys.insert("demo")
        nonAdditionalPropertyKeys.insert("api_enabled")
        nonAdditionalPropertyKeys.insert("drift_threshold")
        nonAdditionalPropertyKeys.insert("preferred_currency")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

