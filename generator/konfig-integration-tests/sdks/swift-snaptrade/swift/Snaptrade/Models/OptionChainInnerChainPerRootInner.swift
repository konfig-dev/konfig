//
// OptionChainInnerChainPerRootInner.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OptionChainInnerChainPerRootInner: Codable, JSONEncodable, Hashable {

    public var optionRoot: String?
    public var chainPerStrikePrice: [OptionChainInnerChainPerRootInnerChainPerStrikePriceInner]?
    public var multiplier: Int?

    public init(optionRoot: String? = nil, chainPerStrikePrice: [OptionChainInnerChainPerRootInnerChainPerStrikePriceInner]? = nil, multiplier: Int? = nil) {
        self.optionRoot = optionRoot
        self.chainPerStrikePrice = chainPerStrikePrice
        self.multiplier = multiplier
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case optionRoot
        case chainPerStrikePrice
        case multiplier
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(optionRoot, forKey: .optionRoot)
        try container.encodeIfPresent(chainPerStrikePrice, forKey: .chainPerStrikePrice)
        try container.encodeIfPresent(multiplier, forKey: .multiplier)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        optionRoot = try container.decodeIfPresent(String.self, forKey: .optionRoot)
        chainPerStrikePrice = try container.decodeIfPresent([OptionChainInnerChainPerRootInnerChainPerStrikePriceInner].self, forKey: .chainPerStrikePrice)
        multiplier = try container.decodeIfPresent(Int.self, forKey: .multiplier)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("optionRoot")
        nonAdditionalPropertyKeys.insert("chainPerStrikePrice")
        nonAdditionalPropertyKeys.insert("multiplier")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

