//
// BrokerageSymbol.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Brokerage symbol */
public struct BrokerageSymbol: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var symbol: BrokerageSymbolSymbol?
    public var brokerageAuthorization: BrokerageAuthorization?
    public var description: String?
    public var allowsFractionalUnits: Bool?
    public var optionSymbol: BrokerageSymbolOptionSymbol?

    public init(id: UUID? = nil, symbol: BrokerageSymbolSymbol? = nil, brokerageAuthorization: BrokerageAuthorization? = nil, description: String? = nil, allowsFractionalUnits: Bool? = nil, optionSymbol: BrokerageSymbolOptionSymbol? = nil) {
        self.id = id
        self.symbol = symbol
        self.brokerageAuthorization = brokerageAuthorization
        self.description = description
        self.allowsFractionalUnits = allowsFractionalUnits
        self.optionSymbol = optionSymbol
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case symbol
        case brokerageAuthorization = "brokerage_authorization"
        case description
        case allowsFractionalUnits = "allows_fractional_units"
        case optionSymbol = "option_symbol"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(brokerageAuthorization, forKey: .brokerageAuthorization)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(allowsFractionalUnits, forKey: .allowsFractionalUnits)
        try container.encodeIfPresent(optionSymbol, forKey: .optionSymbol)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(UUID.self, forKey: .id)
        symbol = try container.decodeIfPresent(BrokerageSymbolSymbol.self, forKey: .symbol)
        brokerageAuthorization = try container.decodeIfPresent(BrokerageAuthorization.self, forKey: .brokerageAuthorization)
        description = try container.decodeIfPresent(String.self, forKey: .description)
        allowsFractionalUnits = try container.decodeIfPresent(Bool.self, forKey: .allowsFractionalUnits)
        optionSymbol = try container.decodeIfPresent(BrokerageSymbolOptionSymbol.self, forKey: .optionSymbol)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("symbol")
        nonAdditionalPropertyKeys.insert("brokerage_authorization")
        nonAdditionalPropertyKeys.insert("description")
        nonAdditionalPropertyKeys.insert("allows_fractional_units")
        nonAdditionalPropertyKeys.insert("option_symbol")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

