//
// ExchangeRatePairs.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The exchange rate of a pair of currencies */
public struct ExchangeRatePairs: Codable, JSONEncodable, Hashable {

    public var src: Currency?
    public var dst: Currency?
    public var exchangeRate: Double?

    public init(src: Currency? = nil, dst: Currency? = nil, exchangeRate: Double? = nil) {
        self.src = src
        self.dst = dst
        self.exchangeRate = exchangeRate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case src
        case dst
        case exchangeRate = "exchange_rate"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(src, forKey: .src)
        try container.encodeIfPresent(dst, forKey: .dst)
        try container.encodeIfPresent(exchangeRate, forKey: .exchangeRate)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        src = try container.decodeIfPresent(Currency.self, forKey: .src)
        dst = try container.decodeIfPresent(Currency.self, forKey: .dst)
        exchangeRate = try container.decodeIfPresent(Double.self, forKey: .exchangeRate)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("src")
        nonAdditionalPropertyKeys.insert("dst")
        nonAdditionalPropertyKeys.insert("exchange_rate")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

