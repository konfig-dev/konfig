//
// AccountOrderRecord.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Record of order in brokerageaccount */
public struct AccountOrderRecord: Codable, JSONEncodable, Hashable {

    /** Order id returned by brokerage */
    public var brokerageOrderId: String?
    public var status: AccountOrderRecordStatus?
    public var symbol: UUID?
    public var universalSymbol: UniversalSymbol?
    public var optionSymbol: OptionsSymbol?
    public var action: Action?
    /** Trade Units. Cannot work with notional value. */
    public var totalQuantity: Double?
    /** Trade Units */
    public var openQuantity: Double?
    /** Trade Units */
    public var canceledQuantity: Double?
    /** Trade Units */
    public var filledQuantity: Double?
    /** Trade Price if limit or stop limit order */
    public var executionPrice: Double?
    /** Trade Price if limit or stop limit order */
    public var limitPrice: Double?
    /** Stop Price. If stop loss or stop limit order, the price to trigger the stop */
    public var stopPrice: Double?
    public var orderType: OrderType?
    /** Trade time in force examples:   * FOK - Fill Or Kill   * Day - Day   * GTC - Good Til Canceled   * GTD - Good Til Date  */
    public var timeInForce: String?
    /** Time */
    public var timePlaced: String?
    /** Time */
    public var timeUpdated: String?
    /** Time */
    public var expiryDate: String?

    public init(brokerageOrderId: String? = nil, status: AccountOrderRecordStatus? = nil, symbol: UUID? = nil, universalSymbol: UniversalSymbol? = nil, optionSymbol: OptionsSymbol? = nil, action: Action? = nil, totalQuantity: Double? = nil, openQuantity: Double? = nil, canceledQuantity: Double? = nil, filledQuantity: Double? = nil, executionPrice: Double? = nil, limitPrice: Double? = nil, stopPrice: Double? = nil, orderType: OrderType? = nil, timeInForce: String? = nil, timePlaced: String? = nil, timeUpdated: String? = nil, expiryDate: String? = nil) {
        self.brokerageOrderId = brokerageOrderId
        self.status = status
        self.symbol = symbol
        self.universalSymbol = universalSymbol
        self.optionSymbol = optionSymbol
        self.action = action
        self.totalQuantity = totalQuantity
        self.openQuantity = openQuantity
        self.canceledQuantity = canceledQuantity
        self.filledQuantity = filledQuantity
        self.executionPrice = executionPrice
        self.limitPrice = limitPrice
        self.stopPrice = stopPrice
        self.orderType = orderType
        self.timeInForce = timeInForce
        self.timePlaced = timePlaced
        self.timeUpdated = timeUpdated
        self.expiryDate = expiryDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case brokerageOrderId = "brokerage_order_id"
        case status
        case symbol
        case universalSymbol = "universal_symbol"
        case optionSymbol = "option_symbol"
        case action
        case totalQuantity = "total_quantity"
        case openQuantity = "open_quantity"
        case canceledQuantity = "canceled_quantity"
        case filledQuantity = "filled_quantity"
        case executionPrice = "execution_price"
        case limitPrice = "limit_price"
        case stopPrice = "stop_price"
        case orderType = "order_type"
        case timeInForce = "time_in_force"
        case timePlaced = "time_placed"
        case timeUpdated = "time_updated"
        case expiryDate = "expiry_date"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(brokerageOrderId, forKey: .brokerageOrderId)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(universalSymbol, forKey: .universalSymbol)
        try container.encodeIfPresent(optionSymbol, forKey: .optionSymbol)
        try container.encodeIfPresent(action, forKey: .action)
        try container.encodeIfPresent(totalQuantity, forKey: .totalQuantity)
        try container.encodeIfPresent(openQuantity, forKey: .openQuantity)
        try container.encodeIfPresent(canceledQuantity, forKey: .canceledQuantity)
        try container.encodeIfPresent(filledQuantity, forKey: .filledQuantity)
        try container.encodeIfPresent(executionPrice, forKey: .executionPrice)
        try container.encodeIfPresent(limitPrice, forKey: .limitPrice)
        try container.encodeIfPresent(stopPrice, forKey: .stopPrice)
        try container.encodeIfPresent(orderType, forKey: .orderType)
        try container.encodeIfPresent(timeInForce, forKey: .timeInForce)
        try container.encodeIfPresent(timePlaced, forKey: .timePlaced)
        try container.encodeIfPresent(timeUpdated, forKey: .timeUpdated)
        try container.encodeIfPresent(expiryDate, forKey: .expiryDate)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        brokerageOrderId = try container.decodeIfPresent(String.self, forKey: .brokerageOrderId)
        status = try container.decodeIfPresent(AccountOrderRecordStatus.self, forKey: .status)
        symbol = try container.decodeIfPresent(UUID.self, forKey: .symbol)
        universalSymbol = try container.decodeIfPresent(UniversalSymbol.self, forKey: .universalSymbol)
        optionSymbol = try container.decodeIfPresent(OptionsSymbol.self, forKey: .optionSymbol)
        action = try container.decodeIfPresent(Action.self, forKey: .action)
        totalQuantity = try container.decodeIfPresent(Double.self, forKey: .totalQuantity)
        openQuantity = try container.decodeIfPresent(Double.self, forKey: .openQuantity)
        canceledQuantity = try container.decodeIfPresent(Double.self, forKey: .canceledQuantity)
        filledQuantity = try container.decodeIfPresent(Double.self, forKey: .filledQuantity)
        executionPrice = try container.decodeIfPresent(Double.self, forKey: .executionPrice)
        limitPrice = try container.decodeIfPresent(Double.self, forKey: .limitPrice)
        stopPrice = try container.decodeIfPresent(Double.self, forKey: .stopPrice)
        orderType = try container.decodeIfPresent(OrderType.self, forKey: .orderType)
        timeInForce = try container.decodeIfPresent(String.self, forKey: .timeInForce)
        timePlaced = try container.decodeIfPresent(String.self, forKey: .timePlaced)
        timeUpdated = try container.decodeIfPresent(String.self, forKey: .timeUpdated)
        expiryDate = try container.decodeIfPresent(String.self, forKey: .expiryDate)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("brokerage_order_id")
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("symbol")
        nonAdditionalPropertyKeys.insert("universal_symbol")
        nonAdditionalPropertyKeys.insert("option_symbol")
        nonAdditionalPropertyKeys.insert("action")
        nonAdditionalPropertyKeys.insert("total_quantity")
        nonAdditionalPropertyKeys.insert("open_quantity")
        nonAdditionalPropertyKeys.insert("canceled_quantity")
        nonAdditionalPropertyKeys.insert("filled_quantity")
        nonAdditionalPropertyKeys.insert("execution_price")
        nonAdditionalPropertyKeys.insert("limit_price")
        nonAdditionalPropertyKeys.insert("stop_price")
        nonAdditionalPropertyKeys.insert("order_type")
        nonAdditionalPropertyKeys.insert("time_in_force")
        nonAdditionalPropertyKeys.insert("time_placed")
        nonAdditionalPropertyKeys.insert("time_updated")
        nonAdditionalPropertyKeys.insert("expiry_date")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

