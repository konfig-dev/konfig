//
// SymbolsQuotesInner.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SymbolsQuotesInner: Codable, JSONEncodable, Hashable {

    public var symbol: UniversalSymbol?
    public var bidPrice: Double?
    public var askPrice: Double?
    public var lastTradePrice: Double?
    public var bidSize: Double?
    public var askSize: Double?

    public init(symbol: UniversalSymbol? = nil, bidPrice: Double? = nil, askPrice: Double? = nil, lastTradePrice: Double? = nil, bidSize: Double? = nil, askSize: Double? = nil) {
        self.symbol = symbol
        self.bidPrice = bidPrice
        self.askPrice = askPrice
        self.lastTradePrice = lastTradePrice
        self.bidSize = bidSize
        self.askSize = askSize
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case symbol
        case bidPrice = "bid_price"
        case askPrice = "ask_price"
        case lastTradePrice = "last_trade_price"
        case bidSize = "bid_size"
        case askSize = "ask_size"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(bidPrice, forKey: .bidPrice)
        try container.encodeIfPresent(askPrice, forKey: .askPrice)
        try container.encodeIfPresent(lastTradePrice, forKey: .lastTradePrice)
        try container.encodeIfPresent(bidSize, forKey: .bidSize)
        try container.encodeIfPresent(askSize, forKey: .askSize)
    }
}

