//
// StrategyQuotesGreek.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct StrategyQuotesGreek: Codable, JSONEncodable, Hashable {

    public var delta: Double?
    public var gamma: Double?
    public var theta: Double?
    public var vega: Double?
    public var rho: Double?

    public init(delta: Double? = nil, gamma: Double? = nil, theta: Double? = nil, vega: Double? = nil, rho: Double? = nil) {
        self.delta = delta
        self.gamma = gamma
        self.theta = theta
        self.vega = vega
        self.rho = rho
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case delta
        case gamma
        case theta
        case vega
        case rho
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(delta, forKey: .delta)
        try container.encodeIfPresent(gamma, forKey: .gamma)
        try container.encodeIfPresent(theta, forKey: .theta)
        try container.encodeIfPresent(vega, forKey: .vega)
        try container.encodeIfPresent(rho, forKey: .rho)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        delta = try container.decodeIfPresent(Double.self, forKey: .delta)
        gamma = try container.decodeIfPresent(Double.self, forKey: .gamma)
        theta = try container.decodeIfPresent(Double.self, forKey: .theta)
        vega = try container.decodeIfPresent(Double.self, forKey: .vega)
        rho = try container.decodeIfPresent(Double.self, forKey: .rho)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("delta")
        nonAdditionalPropertyKeys.insert("gamma")
        nonAdditionalPropertyKeys.insert("theta")
        nonAdditionalPropertyKeys.insert("vega")
        nonAdditionalPropertyKeys.insert("rho")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

