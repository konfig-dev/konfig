//
// ManualTrade.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A manual trade object */
public struct ManualTrade: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var account: String?
    public var orderType: OrderType?
    /** Trade time in force examples:   * FOK - Fill Or Kill   * Day - Day   * GTC - Good Til Canceled   * GTD - Good Til Date  */
    public var timeInForce: String?
    public var symbol: ManualTradeSymbol?
    public var action: Action?
    /** Trade Units. Cannot work with notional value. */
    public var units: Double?
    /** Trade Price if limit or stop limit order */
    public var price: Double?

    public init(id: UUID? = nil, account: String? = nil, orderType: OrderType? = nil, timeInForce: String? = nil, symbol: ManualTradeSymbol? = nil, action: Action? = nil, units: Double? = nil, price: Double? = nil) {
        self.id = id
        self.account = account
        self.orderType = orderType
        self.timeInForce = timeInForce
        self.symbol = symbol
        self.action = action
        self.units = units
        self.price = price
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case account
        case orderType = "order_type"
        case timeInForce = "time_in_force"
        case symbol
        case action
        case units
        case price
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(account, forKey: .account)
        try container.encodeIfPresent(orderType, forKey: .orderType)
        try container.encodeIfPresent(timeInForce, forKey: .timeInForce)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(action, forKey: .action)
        try container.encodeIfPresent(units, forKey: .units)
        try container.encodeIfPresent(price, forKey: .price)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(UUID.self, forKey: .id)
        account = try container.decodeIfPresent(String.self, forKey: .account)
        orderType = try container.decodeIfPresent(OrderType.self, forKey: .orderType)
        timeInForce = try container.decodeIfPresent(String.self, forKey: .timeInForce)
        symbol = try container.decodeIfPresent(ManualTradeSymbol.self, forKey: .symbol)
        action = try container.decodeIfPresent(Action.self, forKey: .action)
        units = try container.decodeIfPresent(Double.self, forKey: .units)
        price = try container.decodeIfPresent(Double.self, forKey: .price)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("account")
        nonAdditionalPropertyKeys.insert("order_type")
        nonAdditionalPropertyKeys.insert("time_in_force")
        nonAdditionalPropertyKeys.insert("symbol")
        nonAdditionalPropertyKeys.insert("action")
        nonAdditionalPropertyKeys.insert("units")
        nonAdditionalPropertyKeys.insert("price")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

