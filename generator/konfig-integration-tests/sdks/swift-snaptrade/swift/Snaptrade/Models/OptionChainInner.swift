//
// OptionChainInner.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OptionChainInner: Codable, JSONEncodable, Hashable {

    public var expiryDate: String?
    public var description: String?
    public var listingExchange: String?
    public var optionExerciseType: String?
    public var chainPerRoot: [OptionChainInnerChainPerRootInner]?

    public init(expiryDate: String? = nil, description: String? = nil, listingExchange: String? = nil, optionExerciseType: String? = nil, chainPerRoot: [OptionChainInnerChainPerRootInner]? = nil) {
        self.expiryDate = expiryDate
        self.description = description
        self.listingExchange = listingExchange
        self.optionExerciseType = optionExerciseType
        self.chainPerRoot = chainPerRoot
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case expiryDate
        case description
        case listingExchange
        case optionExerciseType
        case chainPerRoot
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(expiryDate, forKey: .expiryDate)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(listingExchange, forKey: .listingExchange)
        try container.encodeIfPresent(optionExerciseType, forKey: .optionExerciseType)
        try container.encodeIfPresent(chainPerRoot, forKey: .chainPerRoot)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        expiryDate = try container.decodeIfPresent(String.self, forKey: .expiryDate)
        description = try container.decodeIfPresent(String.self, forKey: .description)
        listingExchange = try container.decodeIfPresent(String.self, forKey: .listingExchange)
        optionExerciseType = try container.decodeIfPresent(String.self, forKey: .optionExerciseType)
        chainPerRoot = try container.decodeIfPresent([OptionChainInnerChainPerRootInner].self, forKey: .chainPerRoot)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("expiryDate")
        nonAdditionalPropertyKeys.insert("description")
        nonAdditionalPropertyKeys.insert("listingExchange")
        nonAdditionalPropertyKeys.insert("optionExerciseType")
        nonAdditionalPropertyKeys.insert("chainPerRoot")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

