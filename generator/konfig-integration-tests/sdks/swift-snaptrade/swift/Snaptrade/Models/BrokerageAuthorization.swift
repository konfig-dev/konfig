//
// BrokerageAuthorization.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BrokerageAuthorization: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    /** Time */
    public var createdDate: String?
    /** Time */
    public var updatedDate: String?
    public var brokerage: Brokerage?
    /** Connection Name */
    public var name: String?
    public var type: String?
    public var disabled: Bool?
    /** Disabled date */
    public var disabledDate: String?
    /** Additional data about brokerage authorization */
    public var meta: [String: AnyCodable]?

    public init(id: UUID? = nil, createdDate: String? = nil, updatedDate: String? = nil, brokerage: Brokerage? = nil, name: String? = nil, type: String? = nil, disabled: Bool? = nil, disabledDate: String? = nil, meta: [String: AnyCodable]? = nil) {
        self.id = id
        self.createdDate = createdDate
        self.updatedDate = updatedDate
        self.brokerage = brokerage
        self.name = name
        self.type = type
        self.disabled = disabled
        self.disabledDate = disabledDate
        self.meta = meta
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdDate = "created_date"
        case updatedDate = "updated_date"
        case brokerage
        case name
        case type
        case disabled
        case disabledDate = "disabled_date"
        case meta
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(updatedDate, forKey: .updatedDate)
        try container.encodeIfPresent(brokerage, forKey: .brokerage)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(disabled, forKey: .disabled)
        try container.encodeIfPresent(disabledDate, forKey: .disabledDate)
        try container.encodeIfPresent(meta, forKey: .meta)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(UUID.self, forKey: .id)
        createdDate = try container.decodeIfPresent(String.self, forKey: .createdDate)
        updatedDate = try container.decodeIfPresent(String.self, forKey: .updatedDate)
        brokerage = try container.decodeIfPresent(Brokerage.self, forKey: .brokerage)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        type = try container.decodeIfPresent(String.self, forKey: .type)
        disabled = try container.decodeIfPresent(Bool.self, forKey: .disabled)
        disabledDate = try container.decodeIfPresent(String.self, forKey: .disabledDate)
        meta = try container.decodeIfPresent([String: AnyCodable].self, forKey: .meta)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("created_date")
        nonAdditionalPropertyKeys.insert("updated_date")
        nonAdditionalPropertyKeys.insert("brokerage")
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("type")
        nonAdditionalPropertyKeys.insert("disabled")
        nonAdditionalPropertyKeys.insert("disabled_date")
        nonAdditionalPropertyKeys.insert("meta")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

