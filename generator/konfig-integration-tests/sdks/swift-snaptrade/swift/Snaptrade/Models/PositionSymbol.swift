//
// PositionSymbol.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Symbol returned in position object */
public struct PositionSymbol: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var description: String?
    public var symbol: UniversalSymbol?
    public var localId: String?
    public var isQuotable: Bool?
    public var isTradable: Bool?

    public init(id: UUID? = nil, description: String? = nil, symbol: UniversalSymbol? = nil, localId: String? = nil, isQuotable: Bool? = nil, isTradable: Bool? = nil) {
        self.id = id
        self.description = description
        self.symbol = symbol
        self.localId = localId
        self.isQuotable = isQuotable
        self.isTradable = isTradable
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case description
        case symbol
        case localId = "local_id"
        case isQuotable = "is_quotable"
        case isTradable = "is_tradable"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(localId, forKey: .localId)
        try container.encodeIfPresent(isQuotable, forKey: .isQuotable)
        try container.encodeIfPresent(isTradable, forKey: .isTradable)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(UUID.self, forKey: .id)
        description = try container.decodeIfPresent(String.self, forKey: .description)
        symbol = try container.decodeIfPresent(UniversalSymbol.self, forKey: .symbol)
        localId = try container.decodeIfPresent(String.self, forKey: .localId)
        isQuotable = try container.decodeIfPresent(Bool.self, forKey: .isQuotable)
        isTradable = try container.decodeIfPresent(Bool.self, forKey: .isTradable)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("description")
        nonAdditionalPropertyKeys.insert("symbol")
        nonAdditionalPropertyKeys.insert("local_id")
        nonAdditionalPropertyKeys.insert("is_quotable")
        nonAdditionalPropertyKeys.insert("is_tradable")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

