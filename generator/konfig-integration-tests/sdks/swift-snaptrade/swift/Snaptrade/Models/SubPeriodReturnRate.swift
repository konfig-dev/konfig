//
// SubPeriodReturnRate.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SubPeriodReturnRate: Codable, JSONEncodable, Hashable {

    /** Date used to specify timeframe for a reporting call (in YYYY-MM-DD format) */
    public var periodStart: String?
    /** Date used to specify timeframe for a reporting call (in YYYY-MM-DD format) */
    public var periodEnd: String?
    /** The return rate for the given period */
    public var rateOfReturn: Double?

    public init(periodStart: String? = nil, periodEnd: String? = nil, rateOfReturn: Double? = nil) {
        self.periodStart = periodStart
        self.periodEnd = periodEnd
        self.rateOfReturn = rateOfReturn
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case periodStart
        case periodEnd
        case rateOfReturn
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(periodStart, forKey: .periodStart)
        try container.encodeIfPresent(periodEnd, forKey: .periodEnd)
        try container.encodeIfPresent(rateOfReturn, forKey: .rateOfReturn)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        periodStart = try container.decodeIfPresent(String.self, forKey: .periodStart)
        periodEnd = try container.decodeIfPresent(String.self, forKey: .periodEnd)
        rateOfReturn = try container.decodeIfPresent(Double.self, forKey: .rateOfReturn)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("periodStart")
        nonAdditionalPropertyKeys.insert("periodEnd")
        nonAdditionalPropertyKeys.insert("rateOfReturn")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

