//
// SessionEvent.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SessionEvent: Codable, JSONEncodable, Hashable {

    public enum SessionEventType: String, Codable, CaseIterable {
        case connectionFailed = "CONNECTION_FAILED"
        case disclaimerAccepted = "DISCLAIMER_ACCEPTED"
        case brokerageConnectionInitiated = "BROKERAGE_CONNECTION_INITIATED"
        case brokerageAuthentication = "BROKERAGE_AUTHENTICATION"
        case mfaAuthorization = "MFA_AUTHORIZATION"
        case connectionSuccessful = "CONNECTION_SUCCESSFUL"
        case partnerRedirect = "PARTNER_REDIRECT"
    }
    public var id: UUID?
    public var sessionEventType: SessionEventType?
    public var sessionId: UUID?
    /** SnapTrade User ID. Provided by SnapTrade Partner. Can be any string, as long as it's unique to a user */
    public var userId: String?
    /** Time */
    public var createdDate: String?
    public var brokerageStatusCode: Int?
    public var brokerageAuthorizationId: UUID?

    public init(id: UUID? = nil, sessionEventType: SessionEventType? = nil, sessionId: UUID? = nil, userId: String? = nil, createdDate: String? = nil, brokerageStatusCode: Int? = nil, brokerageAuthorizationId: UUID? = nil) {
        self.id = id
        self.sessionEventType = sessionEventType
        self.sessionId = sessionId
        self.userId = userId
        self.createdDate = createdDate
        self.brokerageStatusCode = brokerageStatusCode
        self.brokerageAuthorizationId = brokerageAuthorizationId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case sessionEventType = "session_event_type"
        case sessionId = "session_id"
        case userId = "user_id"
        case createdDate = "created_date"
        case brokerageStatusCode = "brokerage_status_code"
        case brokerageAuthorizationId = "brokerage_authorization_id"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(sessionEventType, forKey: .sessionEventType)
        try container.encodeIfPresent(sessionId, forKey: .sessionId)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(brokerageStatusCode, forKey: .brokerageStatusCode)
        try container.encodeIfPresent(brokerageAuthorizationId, forKey: .brokerageAuthorizationId)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(UUID.self, forKey: .id)
        sessionEventType = try container.decodeIfPresent(SessionEventType.self, forKey: .sessionEventType)
        sessionId = try container.decodeIfPresent(UUID.self, forKey: .sessionId)
        userId = try container.decodeIfPresent(String.self, forKey: .userId)
        createdDate = try container.decodeIfPresent(String.self, forKey: .createdDate)
        brokerageStatusCode = try container.decodeIfPresent(Int.self, forKey: .brokerageStatusCode)
        brokerageAuthorizationId = try container.decodeIfPresent(UUID.self, forKey: .brokerageAuthorizationId)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("session_event_type")
        nonAdditionalPropertyKeys.insert("session_id")
        nonAdditionalPropertyKeys.insert("user_id")
        nonAdditionalPropertyKeys.insert("created_date")
        nonAdditionalPropertyKeys.insert("brokerage_status_code")
        nonAdditionalPropertyKeys.insert("brokerage_authorization_id")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

