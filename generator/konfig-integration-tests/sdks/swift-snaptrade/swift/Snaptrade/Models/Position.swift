//
// Position.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Account Position */
public struct Position: Codable, JSONEncodable, Hashable {

    public var symbol: PositionSymbol?
    public var units: Double?
    /** Last known market price for the symbol */
    public var price: Double?
    public var openPnl: Double?
    /** Deprecated, use the units field for both fractional and integer units going forward */
    public var fractionalUnits: Double?
    /** Average purchase price for this position. Either returned by the underlying broker or calculated using historical transactions. */
    public var averagePurchasePrice: Double?

    public init(symbol: PositionSymbol? = nil, units: Double? = nil, price: Double? = nil, openPnl: Double? = nil, fractionalUnits: Double? = nil, averagePurchasePrice: Double? = nil) {
        self.symbol = symbol
        self.units = units
        self.price = price
        self.openPnl = openPnl
        self.fractionalUnits = fractionalUnits
        self.averagePurchasePrice = averagePurchasePrice
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case symbol
        case units
        case price
        case openPnl = "open_pnl"
        case fractionalUnits = "fractional_units"
        case averagePurchasePrice = "average_purchase_price"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(units, forKey: .units)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(openPnl, forKey: .openPnl)
        try container.encodeIfPresent(fractionalUnits, forKey: .fractionalUnits)
        try container.encodeIfPresent(averagePurchasePrice, forKey: .averagePurchasePrice)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        symbol = try container.decodeIfPresent(PositionSymbol.self, forKey: .symbol)
        units = try container.decodeIfPresent(Double.self, forKey: .units)
        price = try container.decodeIfPresent(Double.self, forKey: .price)
        openPnl = try container.decodeIfPresent(Double.self, forKey: .openPnl)
        fractionalUnits = try container.decodeIfPresent(Double.self, forKey: .fractionalUnits)
        averagePurchasePrice = try container.decodeIfPresent(Double.self, forKey: .averagePurchasePrice)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("symbol")
        nonAdditionalPropertyKeys.insert("units")
        nonAdditionalPropertyKeys.insert("price")
        nonAdditionalPropertyKeys.insert("open_pnl")
        nonAdditionalPropertyKeys.insert("fractional_units")
        nonAdditionalPropertyKeys.insert("average_purchase_price")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

