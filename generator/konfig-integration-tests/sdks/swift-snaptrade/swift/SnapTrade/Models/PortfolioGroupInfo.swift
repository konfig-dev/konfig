//
// PortfolioGroupInfo.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Summary of all relevant information about a portfolio group. */
public struct PortfolioGroupInfo: Codable, JSONEncodable, Hashable {

    public var symbols: [UniversalSymbol]?
    public var quotableSymbols: [UniversalSymbol]?
    public var balances: [Balance]?
    public var positions: [Position]?
    public var targetPositions: [TargetAsset]?
    public var idealPositions: [Position]?
    public var excludedPositions: [ExcludedAsset]?
    public var calculatedTrades: [CalculatedTrade]?
    public var brokerageAuthorizations: [BrokerageAuthorization]?
    public var accuracy: Double?
    public var settings: PortfolioGroupSettings?

    public init(symbols: [UniversalSymbol]? = nil, quotableSymbols: [UniversalSymbol]? = nil, balances: [Balance]? = nil, positions: [Position]? = nil, targetPositions: [TargetAsset]? = nil, idealPositions: [Position]? = nil, excludedPositions: [ExcludedAsset]? = nil, calculatedTrades: [CalculatedTrade]? = nil, brokerageAuthorizations: [BrokerageAuthorization]? = nil, accuracy: Double? = nil, settings: PortfolioGroupSettings? = nil) {
        self.symbols = symbols
        self.quotableSymbols = quotableSymbols
        self.balances = balances
        self.positions = positions
        self.targetPositions = targetPositions
        self.idealPositions = idealPositions
        self.excludedPositions = excludedPositions
        self.calculatedTrades = calculatedTrades
        self.brokerageAuthorizations = brokerageAuthorizations
        self.accuracy = accuracy
        self.settings = settings
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case symbols
        case quotableSymbols = "quotable_symbols"
        case balances
        case positions
        case targetPositions = "target_positions"
        case idealPositions = "ideal_positions"
        case excludedPositions = "excluded_positions"
        case calculatedTrades = "calculated_trades"
        case brokerageAuthorizations = "brokerage_authorizations"
        case accuracy
        case settings
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(symbols, forKey: .symbols)
        try container.encodeIfPresent(quotableSymbols, forKey: .quotableSymbols)
        try container.encodeIfPresent(balances, forKey: .balances)
        try container.encodeIfPresent(positions, forKey: .positions)
        try container.encodeIfPresent(targetPositions, forKey: .targetPositions)
        try container.encodeIfPresent(idealPositions, forKey: .idealPositions)
        try container.encodeIfPresent(excludedPositions, forKey: .excludedPositions)
        try container.encodeIfPresent(calculatedTrades, forKey: .calculatedTrades)
        try container.encodeIfPresent(brokerageAuthorizations, forKey: .brokerageAuthorizations)
        try container.encodeIfPresent(accuracy, forKey: .accuracy)
        try container.encodeIfPresent(settings, forKey: .settings)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        symbols = try container.decodeIfPresent([UniversalSymbol].self, forKey: .symbols)
        quotableSymbols = try container.decodeIfPresent([UniversalSymbol].self, forKey: .quotableSymbols)
        balances = try container.decodeIfPresent([Balance].self, forKey: .balances)
        positions = try container.decodeIfPresent([Position].self, forKey: .positions)
        targetPositions = try container.decodeIfPresent([TargetAsset].self, forKey: .targetPositions)
        idealPositions = try container.decodeIfPresent([Position].self, forKey: .idealPositions)
        excludedPositions = try container.decodeIfPresent([ExcludedAsset].self, forKey: .excludedPositions)
        calculatedTrades = try container.decodeIfPresent([CalculatedTrade].self, forKey: .calculatedTrades)
        brokerageAuthorizations = try container.decodeIfPresent([BrokerageAuthorization].self, forKey: .brokerageAuthorizations)
        accuracy = try container.decodeIfPresent(Double.self, forKey: .accuracy)
        settings = try container.decodeIfPresent(PortfolioGroupSettings.self, forKey: .settings)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("symbols")
        nonAdditionalPropertyKeys.insert("quotable_symbols")
        nonAdditionalPropertyKeys.insert("balances")
        nonAdditionalPropertyKeys.insert("positions")
        nonAdditionalPropertyKeys.insert("target_positions")
        nonAdditionalPropertyKeys.insert("ideal_positions")
        nonAdditionalPropertyKeys.insert("excluded_positions")
        nonAdditionalPropertyKeys.insert("calculated_trades")
        nonAdditionalPropertyKeys.insert("brokerage_authorizations")
        nonAdditionalPropertyKeys.insert("accuracy")
        nonAdditionalPropertyKeys.insert("settings")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

