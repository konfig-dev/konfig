//
// SnapTradeLoginUserRequestBody.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Data to login a user via SnapTrade Partner */
public struct SnapTradeLoginUserRequestBody: Codable, JSONEncodable, Hashable {

    public enum ConnectionType: String, Codable, CaseIterable {
        case read = "read"
        case trade = "trade"
    }
    public enum ConnectionPortalVersion: String, Codable, CaseIterable {
        case v2 = "v2"
        case v3 = "v3"
    }
    /** Slug of the brokerage to connect the user to */
    public var broker: String?
    /** When set to True, user will be redirected back to the partner's site instead of the connection portal */
    public var immediateRedirect: Bool?
    /** URL to redirect the user to after the user connects their brokerage account */
    public var customRedirect: String?
    /** The UUID of the brokerage connection to be reconnected. This parameter should be left empty unless you are reconnecting a disabled connection. See ‘Reconnecting Accounts’ for more information. */
    public var reconnect: String?
    /** Sets whether the connection should be read or trade */
    public var connectionType: ConnectionType?
    /** Sets the version of the connection portal to render, with a default to 'v2' */
    public var connectionPortalVersion: ConnectionPortalVersion?

    public init(broker: String? = nil, immediateRedirect: Bool? = nil, customRedirect: String? = nil, reconnect: String? = nil, connectionType: ConnectionType? = nil, connectionPortalVersion: ConnectionPortalVersion? = nil) {
        self.broker = broker
        self.immediateRedirect = immediateRedirect
        self.customRedirect = customRedirect
        self.reconnect = reconnect
        self.connectionType = connectionType
        self.connectionPortalVersion = connectionPortalVersion
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case broker
        case immediateRedirect
        case customRedirect
        case reconnect
        case connectionType
        case connectionPortalVersion
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(broker, forKey: .broker)
        try container.encodeIfPresent(immediateRedirect, forKey: .immediateRedirect)
        try container.encodeIfPresent(customRedirect, forKey: .customRedirect)
        try container.encodeIfPresent(reconnect, forKey: .reconnect)
        try container.encodeIfPresent(connectionType, forKey: .connectionType)
        try container.encodeIfPresent(connectionPortalVersion, forKey: .connectionPortalVersion)
    }
}

