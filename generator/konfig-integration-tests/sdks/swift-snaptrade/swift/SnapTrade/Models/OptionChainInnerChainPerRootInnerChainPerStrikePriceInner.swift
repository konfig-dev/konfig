//
// OptionChainInnerChainPerRootInnerChainPerStrikePriceInner.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OptionChainInnerChainPerRootInnerChainPerStrikePriceInner: Codable, JSONEncodable, Hashable {

    public var strikePrice: Int?
    public var callSymbolId: Int?
    public var putSymbolId: Int?

    public init(strikePrice: Int? = nil, callSymbolId: Int? = nil, putSymbolId: Int? = nil) {
        self.strikePrice = strikePrice
        self.callSymbolId = callSymbolId
        self.putSymbolId = putSymbolId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case strikePrice
        case callSymbolId
        case putSymbolId
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(strikePrice, forKey: .strikePrice)
        try container.encodeIfPresent(callSymbolId, forKey: .callSymbolId)
        try container.encodeIfPresent(putSymbolId, forKey: .putSymbolId)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        strikePrice = try container.decodeIfPresent(Int.self, forKey: .strikePrice)
        callSymbolId = try container.decodeIfPresent(Int.self, forKey: .callSymbolId)
        putSymbolId = try container.decodeIfPresent(Int.self, forKey: .putSymbolId)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("strikePrice")
        nonAdditionalPropertyKeys.insert("callSymbolId")
        nonAdditionalPropertyKeys.insert("putSymbolId")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

