//
// USExchange.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** US Stock Exchange */
public struct USExchange: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var code: String?
    public var micCode: String?
    public var name: String?
    public var timezone: String?
    public var startTime: String?
    public var closeTime: String?
    public var suffix: String?
    public var allowsCryptocurrencySymbols: Bool?

    public init(id: String? = nil, code: String? = nil, micCode: String? = nil, name: String? = nil, timezone: String? = nil, startTime: String? = nil, closeTime: String? = nil, suffix: String? = nil, allowsCryptocurrencySymbols: Bool? = nil) {
        self.id = id
        self.code = code
        self.micCode = micCode
        self.name = name
        self.timezone = timezone
        self.startTime = startTime
        self.closeTime = closeTime
        self.suffix = suffix
        self.allowsCryptocurrencySymbols = allowsCryptocurrencySymbols
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case code
        case micCode = "mic_code"
        case name
        case timezone
        case startTime = "start_time"
        case closeTime = "close_time"
        case suffix
        case allowsCryptocurrencySymbols = "allows_cryptocurrency_symbols"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(micCode, forKey: .micCode)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(timezone, forKey: .timezone)
        try container.encodeIfPresent(startTime, forKey: .startTime)
        try container.encodeIfPresent(closeTime, forKey: .closeTime)
        try container.encodeIfPresent(suffix, forKey: .suffix)
        try container.encodeIfPresent(allowsCryptocurrencySymbols, forKey: .allowsCryptocurrencySymbols)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(String.self, forKey: .id)
        code = try container.decodeIfPresent(String.self, forKey: .code)
        micCode = try container.decodeIfPresent(String.self, forKey: .micCode)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        timezone = try container.decodeIfPresent(String.self, forKey: .timezone)
        startTime = try container.decodeIfPresent(String.self, forKey: .startTime)
        closeTime = try container.decodeIfPresent(String.self, forKey: .closeTime)
        suffix = try container.decodeIfPresent(String.self, forKey: .suffix)
        allowsCryptocurrencySymbols = try container.decodeIfPresent(Bool.self, forKey: .allowsCryptocurrencySymbols)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("code")
        nonAdditionalPropertyKeys.insert("mic_code")
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("timezone")
        nonAdditionalPropertyKeys.insert("start_time")
        nonAdditionalPropertyKeys.insert("close_time")
        nonAdditionalPropertyKeys.insert("suffix")
        nonAdditionalPropertyKeys.insert("allows_cryptocurrency_symbols")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

