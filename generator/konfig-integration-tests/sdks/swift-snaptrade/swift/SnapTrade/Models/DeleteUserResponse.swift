//
// DeleteUserResponse.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Response when delete user is successful */
public struct DeleteUserResponse: Codable, JSONEncodable, Hashable {

    /** Delete status */
    public var status: String?
    /** SnapTrade User ID. Provided by SnapTrade Partner. Can be any string, as long as it's unique to a user */
    public var userId: String?

    public init(status: String? = nil, userId: String? = nil) {
        self.status = status
        self.userId = userId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case status
        case userId
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(userId, forKey: .userId)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        status = try container.decodeIfPresent(String.self, forKey: .status)
        userId = try container.decodeIfPresent(String.self, forKey: .userId)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("userId")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

