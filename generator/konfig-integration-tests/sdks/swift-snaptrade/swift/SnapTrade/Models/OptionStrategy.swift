//
// OptionStrategy.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OptionStrategy: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var underlyingSymbolId: UniversalSymbol?
    public var strategyType: String?
    public var numberOfLegs: Double?
    public var legs: [OptionStrategyLegsInner]?

    public init(id: String? = nil, underlyingSymbolId: UniversalSymbol? = nil, strategyType: String? = nil, numberOfLegs: Double? = nil, legs: [OptionStrategyLegsInner]? = nil) {
        self.id = id
        self.underlyingSymbolId = underlyingSymbolId
        self.strategyType = strategyType
        self.numberOfLegs = numberOfLegs
        self.legs = legs
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case underlyingSymbolId = "underlying_symbol_id"
        case strategyType = "strategy_type"
        case numberOfLegs = "number_of_legs"
        case legs
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(underlyingSymbolId, forKey: .underlyingSymbolId)
        try container.encodeIfPresent(strategyType, forKey: .strategyType)
        try container.encodeIfPresent(numberOfLegs, forKey: .numberOfLegs)
        try container.encodeIfPresent(legs, forKey: .legs)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(String.self, forKey: .id)
        underlyingSymbolId = try container.decodeIfPresent(UniversalSymbol.self, forKey: .underlyingSymbolId)
        strategyType = try container.decodeIfPresent(String.self, forKey: .strategyType)
        numberOfLegs = try container.decodeIfPresent(Double.self, forKey: .numberOfLegs)
        legs = try container.decodeIfPresent([OptionStrategyLegsInner].self, forKey: .legs)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("underlying_symbol_id")
        nonAdditionalPropertyKeys.insert("strategy_type")
        nonAdditionalPropertyKeys.insert("number_of_legs")
        nonAdditionalPropertyKeys.insert("legs")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

