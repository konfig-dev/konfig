//
// ManualTradeSymbol.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Manual trade symbol object */
public struct ManualTradeSymbol: Codable, JSONEncodable, Hashable {

    public var brokerageSymbolId: UUID?
    public var universalSymbolId: UUID?
    public var currency: Currency?
    public var localId: String?
    public var description: String?
    public var symbol: String?

    public init(brokerageSymbolId: UUID? = nil, universalSymbolId: UUID? = nil, currency: Currency? = nil, localId: String? = nil, description: String? = nil, symbol: String? = nil) {
        self.brokerageSymbolId = brokerageSymbolId
        self.universalSymbolId = universalSymbolId
        self.currency = currency
        self.localId = localId
        self.description = description
        self.symbol = symbol
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case brokerageSymbolId = "brokerage_symbol_id"
        case universalSymbolId = "universal_symbol_id"
        case currency
        case localId = "local_id"
        case description
        case symbol
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(brokerageSymbolId, forKey: .brokerageSymbolId)
        try container.encodeIfPresent(universalSymbolId, forKey: .universalSymbolId)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(localId, forKey: .localId)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        brokerageSymbolId = try container.decodeIfPresent(UUID.self, forKey: .brokerageSymbolId)
        universalSymbolId = try container.decodeIfPresent(UUID.self, forKey: .universalSymbolId)
        currency = try container.decodeIfPresent(Currency.self, forKey: .currency)
        localId = try container.decodeIfPresent(String.self, forKey: .localId)
        description = try container.decodeIfPresent(String.self, forKey: .description)
        symbol = try container.decodeIfPresent(String.self, forKey: .symbol)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("brokerage_symbol_id")
        nonAdditionalPropertyKeys.insert("universal_symbol_id")
        nonAdditionalPropertyKeys.insert("currency")
        nonAdditionalPropertyKeys.insert("local_id")
        nonAdditionalPropertyKeys.insert("description")
        nonAdditionalPropertyKeys.insert("symbol")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

