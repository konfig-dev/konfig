//
// OptionsSymbol.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Options Symbol */
public struct OptionsSymbol: Codable, JSONEncodable, Hashable {

    public enum OptionType: String, Codable, CaseIterable {
        case call = "CALL"
        case put = "PUT"
    }
    public var id: String
    public var ticker: String
    public var optionType: OptionType
    public var strikePrice: Double
    public var expirationDate: String
    public var isMiniOption: Bool?
    public var underlyingSymbol: UnderlyingSymbol
    public var localId: String?
    public var exchangeId: String?

    public init(id: String, ticker: String, optionType: OptionType, strikePrice: Double, expirationDate: String, isMiniOption: Bool? = nil, underlyingSymbol: UnderlyingSymbol, localId: String? = nil, exchangeId: String? = nil) {
        self.id = id
        self.ticker = ticker
        self.optionType = optionType
        self.strikePrice = strikePrice
        self.expirationDate = expirationDate
        self.isMiniOption = isMiniOption
        self.underlyingSymbol = underlyingSymbol
        self.localId = localId
        self.exchangeId = exchangeId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case ticker
        case optionType = "option_type"
        case strikePrice = "strike_price"
        case expirationDate = "expiration_date"
        case isMiniOption = "is_mini_option"
        case underlyingSymbol = "underlying_symbol"
        case localId = "local_id"
        case exchangeId = "exchange_id"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(ticker, forKey: .ticker)
        try container.encode(optionType, forKey: .optionType)
        try container.encode(strikePrice, forKey: .strikePrice)
        try container.encode(expirationDate, forKey: .expirationDate)
        try container.encodeIfPresent(isMiniOption, forKey: .isMiniOption)
        try container.encode(underlyingSymbol, forKey: .underlyingSymbol)
        try container.encodeIfPresent(localId, forKey: .localId)
        try container.encodeIfPresent(exchangeId, forKey: .exchangeId)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(String.self, forKey: .id)
        ticker = try container.decode(String.self, forKey: .ticker)
        optionType = try container.decode(OptionType.self, forKey: .optionType)
        strikePrice = try container.decode(Double.self, forKey: .strikePrice)
        expirationDate = try container.decode(String.self, forKey: .expirationDate)
        isMiniOption = try container.decodeIfPresent(Bool.self, forKey: .isMiniOption)
        underlyingSymbol = try container.decode(UnderlyingSymbol.self, forKey: .underlyingSymbol)
        localId = try container.decodeIfPresent(String.self, forKey: .localId)
        exchangeId = try container.decodeIfPresent(String.self, forKey: .exchangeId)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("ticker")
        nonAdditionalPropertyKeys.insert("option_type")
        nonAdditionalPropertyKeys.insert("strike_price")
        nonAdditionalPropertyKeys.insert("expiration_date")
        nonAdditionalPropertyKeys.insert("is_mini_option")
        nonAdditionalPropertyKeys.insert("underlying_symbol")
        nonAdditionalPropertyKeys.insert("local_id")
        nonAdditionalPropertyKeys.insert("exchange_id")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

