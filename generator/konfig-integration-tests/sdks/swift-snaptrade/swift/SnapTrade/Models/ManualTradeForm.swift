//
// ManualTradeForm.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Manual Trade Form */
public struct ManualTradeForm: Codable, JSONEncodable, Hashable {

    public var accountId: String?
    public var action: Action?
    public var orderType: OrderType?
    /** Trade Price if limit or stop limit order */
    public var price: Double?
    /** Stop Price. If stop loss or stop limit order, the price to trigger the stop */
    public var stop: Double?
    public var timeInForce: TimeInForceStrict?
    public var units: Double?
    public var universalSymbolId: String?
    public var notionalValue: Double?

    public init(accountId: String? = nil, action: Action? = nil, orderType: OrderType? = nil, price: Double? = nil, stop: Double? = nil, timeInForce: TimeInForceStrict? = nil, units: Double? = nil, universalSymbolId: String? = nil, notionalValue: Double? = nil) {
        self.accountId = accountId
        self.action = action
        self.orderType = orderType
        self.price = price
        self.stop = stop
        self.timeInForce = timeInForce
        self.units = units
        self.universalSymbolId = universalSymbolId
        self.notionalValue = notionalValue
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case action
        case orderType = "order_type"
        case price
        case stop
        case timeInForce = "time_in_force"
        case units
        case universalSymbolId = "universal_symbol_id"
        case notionalValue = "notional_value"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encodeIfPresent(action, forKey: .action)
        try container.encodeIfPresent(orderType, forKey: .orderType)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(stop, forKey: .stop)
        try container.encodeIfPresent(timeInForce, forKey: .timeInForce)
        try container.encodeIfPresent(units, forKey: .units)
        try container.encodeIfPresent(universalSymbolId, forKey: .universalSymbolId)
        try container.encodeIfPresent(notionalValue, forKey: .notionalValue)
    }
}

