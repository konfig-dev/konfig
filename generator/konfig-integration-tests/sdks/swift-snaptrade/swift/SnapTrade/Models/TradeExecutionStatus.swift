//
// TradeExecutionStatus.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Execution status of a trade */
public struct TradeExecutionStatus: Codable, JSONEncodable, Hashable {

    public enum State: String, Codable, CaseIterable {
        case executed = "Executed"
        case canceled = "Canceled"
        case rejected = "Rejected"
        case failed = "Failed"
        case notExecuted = "Not Executed"
    }
    public enum Action: String, Codable, CaseIterable {
        case buy = "BUY"
        case sell = "SELL"
    }
    public var symbol: BrokerageSymbol?
    public var universalSymbol: UniversalSymbol?
    public var trade: Trade?
    /** Execution state of a trade */
    public var state: State?
    /** Number of filled units */
    public var filledUnits: Int?
    /** Action of executed trade */
    public var action: Action?
    /** Price of execution */
    public var price: Double?
    /** Fees paid from executing trade */
    public var commissions: Double?
    /** Other misc. data */
    public var meta: [String: AnyCodable]?

    public init(symbol: BrokerageSymbol? = nil, universalSymbol: UniversalSymbol? = nil, trade: Trade? = nil, state: State? = nil, filledUnits: Int? = nil, action: Action? = nil, price: Double? = nil, commissions: Double? = nil, meta: [String: AnyCodable]? = nil) {
        self.symbol = symbol
        self.universalSymbol = universalSymbol
        self.trade = trade
        self.state = state
        self.filledUnits = filledUnits
        self.action = action
        self.price = price
        self.commissions = commissions
        self.meta = meta
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case symbol
        case universalSymbol = "universal_symbol"
        case trade
        case state
        case filledUnits = "filled_units"
        case action
        case price
        case commissions
        case meta
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(universalSymbol, forKey: .universalSymbol)
        try container.encodeIfPresent(trade, forKey: .trade)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(filledUnits, forKey: .filledUnits)
        try container.encodeIfPresent(action, forKey: .action)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(commissions, forKey: .commissions)
        try container.encodeIfPresent(meta, forKey: .meta)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        symbol = try container.decodeIfPresent(BrokerageSymbol.self, forKey: .symbol)
        universalSymbol = try container.decodeIfPresent(UniversalSymbol.self, forKey: .universalSymbol)
        trade = try container.decodeIfPresent(Trade.self, forKey: .trade)
        state = try container.decodeIfPresent(State.self, forKey: .state)
        filledUnits = try container.decodeIfPresent(Int.self, forKey: .filledUnits)
        action = try container.decodeIfPresent(Action.self, forKey: .action)
        price = try container.decodeIfPresent(Double.self, forKey: .price)
        commissions = try container.decodeIfPresent(Double.self, forKey: .commissions)
        meta = try container.decodeIfPresent([String: AnyCodable].self, forKey: .meta)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("symbol")
        nonAdditionalPropertyKeys.insert("universal_symbol")
        nonAdditionalPropertyKeys.insert("trade")
        nonAdditionalPropertyKeys.insert("state")
        nonAdditionalPropertyKeys.insert("filled_units")
        nonAdditionalPropertyKeys.insert("action")
        nonAdditionalPropertyKeys.insert("price")
        nonAdditionalPropertyKeys.insert("commissions")
        nonAdditionalPropertyKeys.insert("meta")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

