//
// BrokerageSymbolSymbol.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BrokerageSymbolSymbol: Codable, JSONEncodable, Hashable {

    public var id: String
    public var symbol: String
    public var rawSymbol: String
    public var description: String?
    public var currency: Currency
    public var exchange: Exchange?
    public var type: SecurityType
    public var currencies: [Currency]
    public var figiCode: String?

    public init(id: String, symbol: String, rawSymbol: String, description: String? = nil, currency: Currency, exchange: Exchange? = nil, type: SecurityType, currencies: [Currency], figiCode: String? = nil) {
        self.id = id
        self.symbol = symbol
        self.rawSymbol = rawSymbol
        self.description = description
        self.currency = currency
        self.exchange = exchange
        self.type = type
        self.currencies = currencies
        self.figiCode = figiCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case symbol
        case rawSymbol = "raw_symbol"
        case description
        case currency
        case exchange
        case type
        case currencies
        case figiCode = "figi_code"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(symbol, forKey: .symbol)
        try container.encode(rawSymbol, forKey: .rawSymbol)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(currency, forKey: .currency)
        try container.encodeIfPresent(exchange, forKey: .exchange)
        try container.encode(type, forKey: .type)
        try container.encode(currencies, forKey: .currencies)
        try container.encodeIfPresent(figiCode, forKey: .figiCode)
    }
}

