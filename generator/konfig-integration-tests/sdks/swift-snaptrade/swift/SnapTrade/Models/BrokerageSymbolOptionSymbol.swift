//
// BrokerageSymbolOptionSymbol.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BrokerageSymbolOptionSymbol: Codable, JSONEncodable, Hashable {

    public enum OptionType: String, Codable, CaseIterable {
        case call = "CALL"
        case put = "PUT"
    }
    public var id: String
    public var ticker: String
    public var optionType: OptionType
    public var strikePrice: Double
    public var expirationDate: String
    public var isMiniOption: Bool?
    public var underlyingSymbol: UnderlyingSymbol
    public var localId: String?
    public var exchangeId: String?

    public init(id: String, ticker: String, optionType: OptionType, strikePrice: Double, expirationDate: String, isMiniOption: Bool? = nil, underlyingSymbol: UnderlyingSymbol, localId: String? = nil, exchangeId: String? = nil) {
        self.id = id
        self.ticker = ticker
        self.optionType = optionType
        self.strikePrice = strikePrice
        self.expirationDate = expirationDate
        self.isMiniOption = isMiniOption
        self.underlyingSymbol = underlyingSymbol
        self.localId = localId
        self.exchangeId = exchangeId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case ticker
        case optionType = "option_type"
        case strikePrice = "strike_price"
        case expirationDate = "expiration_date"
        case isMiniOption = "is_mini_option"
        case underlyingSymbol = "underlying_symbol"
        case localId = "local_id"
        case exchangeId = "exchange_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(ticker, forKey: .ticker)
        try container.encode(optionType, forKey: .optionType)
        try container.encode(strikePrice, forKey: .strikePrice)
        try container.encode(expirationDate, forKey: .expirationDate)
        try container.encodeIfPresent(isMiniOption, forKey: .isMiniOption)
        try container.encode(underlyingSymbol, forKey: .underlyingSymbol)
        try container.encodeIfPresent(localId, forKey: .localId)
        try container.encodeIfPresent(exchangeId, forKey: .exchangeId)
    }
}

