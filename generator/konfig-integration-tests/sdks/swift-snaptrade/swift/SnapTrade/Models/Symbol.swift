//
// Symbol.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Symbol */
public struct Symbol: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var symbol: String?
    public var rawSymbol: String?
    public var name: String?
    public var currency: Currency?
    public var exchange: Exchange?
    public var type: SecurityType?
    public var figiCode: String?

    public init(id: String? = nil, symbol: String? = nil, rawSymbol: String? = nil, name: String? = nil, currency: Currency? = nil, exchange: Exchange? = nil, type: SecurityType? = nil, figiCode: String? = nil) {
        self.id = id
        self.symbol = symbol
        self.rawSymbol = rawSymbol
        self.name = name
        self.currency = currency
        self.exchange = exchange
        self.type = type
        self.figiCode = figiCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case symbol
        case rawSymbol = "raw_symbol"
        case name
        case currency
        case exchange
        case type
        case figiCode = "figi_code"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(rawSymbol, forKey: .rawSymbol)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(exchange, forKey: .exchange)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(figiCode, forKey: .figiCode)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(String.self, forKey: .id)
        symbol = try container.decodeIfPresent(String.self, forKey: .symbol)
        rawSymbol = try container.decodeIfPresent(String.self, forKey: .rawSymbol)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        currency = try container.decodeIfPresent(Currency.self, forKey: .currency)
        exchange = try container.decodeIfPresent(Exchange.self, forKey: .exchange)
        type = try container.decodeIfPresent(SecurityType.self, forKey: .type)
        figiCode = try container.decodeIfPresent(String.self, forKey: .figiCode)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("symbol")
        nonAdditionalPropertyKeys.insert("raw_symbol")
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("currency")
        nonAdditionalPropertyKeys.insert("exchange")
        nonAdditionalPropertyKeys.insert("type")
        nonAdditionalPropertyKeys.insert("figi_code")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

