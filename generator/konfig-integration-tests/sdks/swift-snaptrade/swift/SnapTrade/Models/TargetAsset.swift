//
// TargetAsset.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Target percentage of a certain asset */
public struct TargetAsset: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var symbol: UniversalSymbol?
    public var percent: Double?
    public var isSupported: Bool?
    public var isExcluded: Bool?
    public var meta: [String: AnyCodable]?

    public init(id: String? = nil, symbol: UniversalSymbol? = nil, percent: Double? = nil, isSupported: Bool? = nil, isExcluded: Bool? = nil, meta: [String: AnyCodable]? = nil) {
        self.id = id
        self.symbol = symbol
        self.percent = percent
        self.isSupported = isSupported
        self.isExcluded = isExcluded
        self.meta = meta
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case symbol
        case percent
        case isSupported = "is_supported"
        case isExcluded = "is_excluded"
        case meta
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(percent, forKey: .percent)
        try container.encodeIfPresent(isSupported, forKey: .isSupported)
        try container.encodeIfPresent(isExcluded, forKey: .isExcluded)
        try container.encodeIfPresent(meta, forKey: .meta)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(String.self, forKey: .id)
        symbol = try container.decodeIfPresent(UniversalSymbol.self, forKey: .symbol)
        percent = try container.decodeIfPresent(Double.self, forKey: .percent)
        isSupported = try container.decodeIfPresent(Bool.self, forKey: .isSupported)
        isExcluded = try container.decodeIfPresent(Bool.self, forKey: .isExcluded)
        meta = try container.decodeIfPresent([String: AnyCodable].self, forKey: .meta)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("symbol")
        nonAdditionalPropertyKeys.insert("percent")
        nonAdditionalPropertyKeys.insert("is_supported")
        nonAdditionalPropertyKeys.insert("is_excluded")
        nonAdditionalPropertyKeys.insert("meta")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

