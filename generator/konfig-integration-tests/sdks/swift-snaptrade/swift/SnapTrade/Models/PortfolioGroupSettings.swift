//
// PortfolioGroupSettings.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PortfolioGroupSettings: Codable, JSONEncodable, Hashable {

    public var buyOnly: Bool?
    public var cashOptimizer: Bool?
    public var notifyFrequency: String?
    public var driftThreshold: Double?
    public var preferredCurrency: Currency?

    public init(buyOnly: Bool? = nil, cashOptimizer: Bool? = nil, notifyFrequency: String? = nil, driftThreshold: Double? = nil, preferredCurrency: Currency? = nil) {
        self.buyOnly = buyOnly
        self.cashOptimizer = cashOptimizer
        self.notifyFrequency = notifyFrequency
        self.driftThreshold = driftThreshold
        self.preferredCurrency = preferredCurrency
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case buyOnly
        case cashOptimizer = "cash_optimizer"
        case notifyFrequency
        case driftThreshold
        case preferredCurrency = "preferred_currency"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(buyOnly, forKey: .buyOnly)
        try container.encodeIfPresent(cashOptimizer, forKey: .cashOptimizer)
        try container.encodeIfPresent(notifyFrequency, forKey: .notifyFrequency)
        try container.encodeIfPresent(driftThreshold, forKey: .driftThreshold)
        try container.encodeIfPresent(preferredCurrency, forKey: .preferredCurrency)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        buyOnly = try container.decodeIfPresent(Bool.self, forKey: .buyOnly)
        cashOptimizer = try container.decodeIfPresent(Bool.self, forKey: .cashOptimizer)
        notifyFrequency = try container.decodeIfPresent(String.self, forKey: .notifyFrequency)
        driftThreshold = try container.decodeIfPresent(Double.self, forKey: .driftThreshold)
        preferredCurrency = try container.decodeIfPresent(Currency.self, forKey: .preferredCurrency)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("buyOnly")
        nonAdditionalPropertyKeys.insert("cash_optimizer")
        nonAdditionalPropertyKeys.insert("notifyFrequency")
        nonAdditionalPropertyKeys.insert("driftThreshold")
        nonAdditionalPropertyKeys.insert("preferred_currency")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

