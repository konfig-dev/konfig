//
// Account.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** SnapTradeUser Investment Account */
public struct Account: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var brokerageAuthorization: UUID?
    public var portfolioGroup: UUID?
    public var name: String?
    public var number: String?
    public var institutionName: String?
    public var createdDate: String?
    public var meta: [String: AnyCodable]?
    public var cashRestrictions: [CashRestriction]?
    public var syncStatus: AccountSyncStatus?
    public var balance: AccountBalance?

    public init(id: UUID? = nil, brokerageAuthorization: UUID? = nil, portfolioGroup: UUID? = nil, name: String? = nil, number: String? = nil, institutionName: String? = nil, createdDate: String? = nil, meta: [String: AnyCodable]? = nil, cashRestrictions: [CashRestriction]? = nil, syncStatus: AccountSyncStatus? = nil, balance: AccountBalance? = nil) {
        self.id = id
        self.brokerageAuthorization = brokerageAuthorization
        self.portfolioGroup = portfolioGroup
        self.name = name
        self.number = number
        self.institutionName = institutionName
        self.createdDate = createdDate
        self.meta = meta
        self.cashRestrictions = cashRestrictions
        self.syncStatus = syncStatus
        self.balance = balance
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case brokerageAuthorization = "brokerage_authorization"
        case portfolioGroup = "portfolio_group"
        case name
        case number
        case institutionName = "institution_name"
        case createdDate = "created_date"
        case meta
        case cashRestrictions = "cash_restrictions"
        case syncStatus = "sync_status"
        case balance
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(brokerageAuthorization, forKey: .brokerageAuthorization)
        try container.encodeIfPresent(portfolioGroup, forKey: .portfolioGroup)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(institutionName, forKey: .institutionName)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(meta, forKey: .meta)
        try container.encodeIfPresent(cashRestrictions, forKey: .cashRestrictions)
        try container.encodeIfPresent(syncStatus, forKey: .syncStatus)
        try container.encodeIfPresent(balance, forKey: .balance)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(UUID.self, forKey: .id)
        brokerageAuthorization = try container.decodeIfPresent(UUID.self, forKey: .brokerageAuthorization)
        portfolioGroup = try container.decodeIfPresent(UUID.self, forKey: .portfolioGroup)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        number = try container.decodeIfPresent(String.self, forKey: .number)
        institutionName = try container.decodeIfPresent(String.self, forKey: .institutionName)
        createdDate = try container.decodeIfPresent(String.self, forKey: .createdDate)
        meta = try container.decodeIfPresent([String: AnyCodable].self, forKey: .meta)
        cashRestrictions = try container.decodeIfPresent([CashRestriction].self, forKey: .cashRestrictions)
        syncStatus = try container.decodeIfPresent(AccountSyncStatus.self, forKey: .syncStatus)
        balance = try container.decodeIfPresent(AccountBalance.self, forKey: .balance)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("brokerage_authorization")
        nonAdditionalPropertyKeys.insert("portfolio_group")
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("number")
        nonAdditionalPropertyKeys.insert("institution_name")
        nonAdditionalPropertyKeys.insert("created_date")
        nonAdditionalPropertyKeys.insert("meta")
        nonAdditionalPropertyKeys.insert("cash_restrictions")
        nonAdditionalPropertyKeys.insert("sync_status")
        nonAdditionalPropertyKeys.insert("balance")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

