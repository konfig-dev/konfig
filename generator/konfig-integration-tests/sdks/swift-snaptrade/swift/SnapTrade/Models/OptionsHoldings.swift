//
// OptionsHoldings.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Option Holdings */
public struct OptionsHoldings: Codable, JSONEncodable, Hashable {

    /** Options information */
    public var id: String?
    public var symbol: UUID?
    public var optionSymbol: OptionsSymbol?
    /** Trade Price if limit or stop limit order */
    public var price: Double?
    public var currency: Currency?
    /** Average purchase price for this position */
    public var averagePurchasePrice: Double?

    public init(id: String? = nil, symbol: UUID? = nil, optionSymbol: OptionsSymbol? = nil, price: Double? = nil, currency: Currency? = nil, averagePurchasePrice: Double? = nil) {
        self.id = id
        self.symbol = symbol
        self.optionSymbol = optionSymbol
        self.price = price
        self.currency = currency
        self.averagePurchasePrice = averagePurchasePrice
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case symbol
        case optionSymbol = "option_symbol"
        case price
        case currency
        case averagePurchasePrice = "average_purchase_price"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(optionSymbol, forKey: .optionSymbol)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(averagePurchasePrice, forKey: .averagePurchasePrice)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(String.self, forKey: .id)
        symbol = try container.decodeIfPresent(UUID.self, forKey: .symbol)
        optionSymbol = try container.decodeIfPresent(OptionsSymbol.self, forKey: .optionSymbol)
        price = try container.decodeIfPresent(Double.self, forKey: .price)
        currency = try container.decodeIfPresent(Currency.self, forKey: .currency)
        averagePurchasePrice = try container.decodeIfPresent(Double.self, forKey: .averagePurchasePrice)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("symbol")
        nonAdditionalPropertyKeys.insert("option_symbol")
        nonAdditionalPropertyKeys.insert("price")
        nonAdditionalPropertyKeys.insert("currency")
        nonAdditionalPropertyKeys.insert("average_purchase_price")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

