//
// UserErrorLog.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An API error log for a specific SnapTrade user. */
public struct UserErrorLog: Codable, JSONEncodable, Hashable {

    public var requestedAt: String?
    public var response: String?
    public var statusCode: Double?
    public var queryParams: String?
    public var httpMethod: String?
    public var endpoint: String?

    public init(requestedAt: String? = nil, response: String? = nil, statusCode: Double? = nil, queryParams: String? = nil, httpMethod: String? = nil, endpoint: String? = nil) {
        self.requestedAt = requestedAt
        self.response = response
        self.statusCode = statusCode
        self.queryParams = queryParams
        self.httpMethod = httpMethod
        self.endpoint = endpoint
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case requestedAt
        case response
        case statusCode
        case queryParams
        case httpMethod
        case endpoint
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(requestedAt, forKey: .requestedAt)
        try container.encodeIfPresent(response, forKey: .response)
        try container.encodeIfPresent(statusCode, forKey: .statusCode)
        try container.encodeIfPresent(queryParams, forKey: .queryParams)
        try container.encodeIfPresent(httpMethod, forKey: .httpMethod)
        try container.encodeIfPresent(endpoint, forKey: .endpoint)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        requestedAt = try container.decodeIfPresent(String.self, forKey: .requestedAt)
        response = try container.decodeIfPresent(String.self, forKey: .response)
        statusCode = try container.decodeIfPresent(Double.self, forKey: .statusCode)
        queryParams = try container.decodeIfPresent(String.self, forKey: .queryParams)
        httpMethod = try container.decodeIfPresent(String.self, forKey: .httpMethod)
        endpoint = try container.decodeIfPresent(String.self, forKey: .endpoint)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("requestedAt")
        nonAdditionalPropertyKeys.insert("response")
        nonAdditionalPropertyKeys.insert("statusCode")
        nonAdditionalPropertyKeys.insert("queryParams")
        nonAdditionalPropertyKeys.insert("httpMethod")
        nonAdditionalPropertyKeys.insert("endpoint")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

