//
// ModelPortfolioDetails.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ModelPortfolioDetails: Codable, JSONEncodable, Hashable {

    public var modelPortfolio: ModelPortfolio?
    public var modelPortfolioSecurity: [ModelPortfolioSecurity]?
    public var modelPortfolioAssetClass: [ModelPortfolioAssetClass]?

    public init(modelPortfolio: ModelPortfolio? = nil, modelPortfolioSecurity: [ModelPortfolioSecurity]? = nil, modelPortfolioAssetClass: [ModelPortfolioAssetClass]? = nil) {
        self.modelPortfolio = modelPortfolio
        self.modelPortfolioSecurity = modelPortfolioSecurity
        self.modelPortfolioAssetClass = modelPortfolioAssetClass
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case modelPortfolio = "model_portfolio"
        case modelPortfolioSecurity = "model_portfolio_security"
        case modelPortfolioAssetClass = "model_portfolio_asset_class"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(modelPortfolio, forKey: .modelPortfolio)
        try container.encodeIfPresent(modelPortfolioSecurity, forKey: .modelPortfolioSecurity)
        try container.encodeIfPresent(modelPortfolioAssetClass, forKey: .modelPortfolioAssetClass)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        modelPortfolio = try container.decodeIfPresent(ModelPortfolio.self, forKey: .modelPortfolio)
        modelPortfolioSecurity = try container.decodeIfPresent([ModelPortfolioSecurity].self, forKey: .modelPortfolioSecurity)
        modelPortfolioAssetClass = try container.decodeIfPresent([ModelPortfolioAssetClass].self, forKey: .modelPortfolioAssetClass)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("model_portfolio")
        nonAdditionalPropertyKeys.insert("model_portfolio_security")
        nonAdditionalPropertyKeys.insert("model_portfolio_asset_class")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

