//
// Brokerage.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Brokerage: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var name: String?
    public var displayName: String?
    public var description: String?
    public var awsS3LogoUrl: String?
    public var slug: String?
    public var url: String?
    public var enabled: Bool?
    public var maintenanceMode: Bool?
    public var allowsFractionalUnits: Bool?
    public var allowsTrading: Bool?
    public var hasReporting: Bool?
    public var isRealTimeConnection: Bool?
    public var allowsTradingThroughSnaptradeApi: Bool?
    public var isScrapingIntegration: Bool?
    public var defaultCurrency: UUID?
    public var brokerageType: BrokerageType?
    /** List of exchange ID supported by brokerage */
    public var exchanges: [AnyCodable]?

    public init(id: UUID? = nil, name: String? = nil, displayName: String? = nil, description: String? = nil, awsS3LogoUrl: String? = nil, slug: String? = nil, url: String? = nil, enabled: Bool? = nil, maintenanceMode: Bool? = nil, allowsFractionalUnits: Bool? = nil, allowsTrading: Bool? = nil, hasReporting: Bool? = nil, isRealTimeConnection: Bool? = nil, allowsTradingThroughSnaptradeApi: Bool? = nil, isScrapingIntegration: Bool? = nil, defaultCurrency: UUID? = nil, brokerageType: BrokerageType? = nil, exchanges: [AnyCodable]? = nil) {
        self.id = id
        self.name = name
        self.displayName = displayName
        self.description = description
        self.awsS3LogoUrl = awsS3LogoUrl
        self.slug = slug
        self.url = url
        self.enabled = enabled
        self.maintenanceMode = maintenanceMode
        self.allowsFractionalUnits = allowsFractionalUnits
        self.allowsTrading = allowsTrading
        self.hasReporting = hasReporting
        self.isRealTimeConnection = isRealTimeConnection
        self.allowsTradingThroughSnaptradeApi = allowsTradingThroughSnaptradeApi
        self.isScrapingIntegration = isScrapingIntegration
        self.defaultCurrency = defaultCurrency
        self.brokerageType = brokerageType
        self.exchanges = exchanges
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case displayName = "display_name"
        case description
        case awsS3LogoUrl = "aws_s3_logo_url"
        case slug
        case url
        case enabled
        case maintenanceMode = "maintenance_mode"
        case allowsFractionalUnits = "allows_fractional_units"
        case allowsTrading = "allows_trading"
        case hasReporting = "has_reporting"
        case isRealTimeConnection = "is_real_time_connection"
        case allowsTradingThroughSnaptradeApi = "allows_trading_through_snaptrade_api"
        case isScrapingIntegration = "is_scraping_integration"
        case defaultCurrency = "default_currency"
        case brokerageType = "brokerage_type"
        case exchanges
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(awsS3LogoUrl, forKey: .awsS3LogoUrl)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(maintenanceMode, forKey: .maintenanceMode)
        try container.encodeIfPresent(allowsFractionalUnits, forKey: .allowsFractionalUnits)
        try container.encodeIfPresent(allowsTrading, forKey: .allowsTrading)
        try container.encodeIfPresent(hasReporting, forKey: .hasReporting)
        try container.encodeIfPresent(isRealTimeConnection, forKey: .isRealTimeConnection)
        try container.encodeIfPresent(allowsTradingThroughSnaptradeApi, forKey: .allowsTradingThroughSnaptradeApi)
        try container.encodeIfPresent(isScrapingIntegration, forKey: .isScrapingIntegration)
        try container.encodeIfPresent(defaultCurrency, forKey: .defaultCurrency)
        try container.encodeIfPresent(brokerageType, forKey: .brokerageType)
        try container.encodeIfPresent(exchanges, forKey: .exchanges)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(UUID.self, forKey: .id)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        displayName = try container.decodeIfPresent(String.self, forKey: .displayName)
        description = try container.decodeIfPresent(String.self, forKey: .description)
        awsS3LogoUrl = try container.decodeIfPresent(String.self, forKey: .awsS3LogoUrl)
        slug = try container.decodeIfPresent(String.self, forKey: .slug)
        url = try container.decodeIfPresent(String.self, forKey: .url)
        enabled = try container.decodeIfPresent(Bool.self, forKey: .enabled)
        maintenanceMode = try container.decodeIfPresent(Bool.self, forKey: .maintenanceMode)
        allowsFractionalUnits = try container.decodeIfPresent(Bool.self, forKey: .allowsFractionalUnits)
        allowsTrading = try container.decodeIfPresent(Bool.self, forKey: .allowsTrading)
        hasReporting = try container.decodeIfPresent(Bool.self, forKey: .hasReporting)
        isRealTimeConnection = try container.decodeIfPresent(Bool.self, forKey: .isRealTimeConnection)
        allowsTradingThroughSnaptradeApi = try container.decodeIfPresent(Bool.self, forKey: .allowsTradingThroughSnaptradeApi)
        isScrapingIntegration = try container.decodeIfPresent(Bool.self, forKey: .isScrapingIntegration)
        defaultCurrency = try container.decodeIfPresent(UUID.self, forKey: .defaultCurrency)
        brokerageType = try container.decodeIfPresent(BrokerageType.self, forKey: .brokerageType)
        exchanges = try container.decodeIfPresent([AnyCodable].self, forKey: .exchanges)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("display_name")
        nonAdditionalPropertyKeys.insert("description")
        nonAdditionalPropertyKeys.insert("aws_s3_logo_url")
        nonAdditionalPropertyKeys.insert("slug")
        nonAdditionalPropertyKeys.insert("url")
        nonAdditionalPropertyKeys.insert("enabled")
        nonAdditionalPropertyKeys.insert("maintenance_mode")
        nonAdditionalPropertyKeys.insert("allows_fractional_units")
        nonAdditionalPropertyKeys.insert("allows_trading")
        nonAdditionalPropertyKeys.insert("has_reporting")
        nonAdditionalPropertyKeys.insert("is_real_time_connection")
        nonAdditionalPropertyKeys.insert("allows_trading_through_snaptrade_api")
        nonAdditionalPropertyKeys.insert("is_scraping_integration")
        nonAdditionalPropertyKeys.insert("default_currency")
        nonAdditionalPropertyKeys.insert("brokerage_type")
        nonAdditionalPropertyKeys.insert("exchanges")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

