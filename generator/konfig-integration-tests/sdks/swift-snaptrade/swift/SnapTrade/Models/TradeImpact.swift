//
// TradeImpact.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Impact of a group of trade */
public struct TradeImpact: Codable, JSONEncodable, Hashable {

    public var account: Account?
    public var currency: Currency?
    /** Remaining balance after executing all trades */
    public var remainingCash: Double?
    /** Total estimated commissions across all trades to make */
    public var estimatedCommissions: Double?
    /** Estimated forex fees to pay to excute trades */
    public var forexFees: Double?

    public init(account: Account? = nil, currency: Currency? = nil, remainingCash: Double? = nil, estimatedCommissions: Double? = nil, forexFees: Double? = nil) {
        self.account = account
        self.currency = currency
        self.remainingCash = remainingCash
        self.estimatedCommissions = estimatedCommissions
        self.forexFees = forexFees
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case account
        case currency
        case remainingCash = "remaining_cash"
        case estimatedCommissions = "estimated_commissions"
        case forexFees = "forex_fees"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(account, forKey: .account)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(remainingCash, forKey: .remainingCash)
        try container.encodeIfPresent(estimatedCommissions, forKey: .estimatedCommissions)
        try container.encodeIfPresent(forexFees, forKey: .forexFees)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        account = try container.decodeIfPresent(Account.self, forKey: .account)
        currency = try container.decodeIfPresent(Currency.self, forKey: .currency)
        remainingCash = try container.decodeIfPresent(Double.self, forKey: .remainingCash)
        estimatedCommissions = try container.decodeIfPresent(Double.self, forKey: .estimatedCommissions)
        forexFees = try container.decodeIfPresent(Double.self, forKey: .forexFees)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("account")
        nonAdditionalPropertyKeys.insert("currency")
        nonAdditionalPropertyKeys.insert("remaining_cash")
        nonAdditionalPropertyKeys.insert("estimated_commissions")
        nonAdditionalPropertyKeys.insert("forex_fees")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

