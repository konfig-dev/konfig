//
// Trade.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A trade object */
public struct Trade: Codable, JSONEncodable, Hashable {

    public enum Action: String, Codable, CaseIterable {
        case buy = "BUY"
        case sell = "SELL"
    }
    public var id: UUID?
    public var account: Account?
    public var symbol: BrokerageSymbol?
    public var universalSymbol: UniversalSymbol?
    public var action: Action?
    public var units: Int?
    public var price: Double?
    public var sequence: Int?

    public init(id: UUID? = nil, account: Account? = nil, symbol: BrokerageSymbol? = nil, universalSymbol: UniversalSymbol? = nil, action: Action? = nil, units: Int? = nil, price: Double? = nil, sequence: Int? = nil) {
        self.id = id
        self.account = account
        self.symbol = symbol
        self.universalSymbol = universalSymbol
        self.action = action
        self.units = units
        self.price = price
        self.sequence = sequence
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case account
        case symbol
        case universalSymbol = "universal_symbol"
        case action
        case units
        case price
        case sequence
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(account, forKey: .account)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(universalSymbol, forKey: .universalSymbol)
        try container.encodeIfPresent(action, forKey: .action)
        try container.encodeIfPresent(units, forKey: .units)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(sequence, forKey: .sequence)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(UUID.self, forKey: .id)
        account = try container.decodeIfPresent(Account.self, forKey: .account)
        symbol = try container.decodeIfPresent(BrokerageSymbol.self, forKey: .symbol)
        universalSymbol = try container.decodeIfPresent(UniversalSymbol.self, forKey: .universalSymbol)
        action = try container.decodeIfPresent(Action.self, forKey: .action)
        units = try container.decodeIfPresent(Int.self, forKey: .units)
        price = try container.decodeIfPresent(Double.self, forKey: .price)
        sequence = try container.decodeIfPresent(Int.self, forKey: .sequence)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("account")
        nonAdditionalPropertyKeys.insert("symbol")
        nonAdditionalPropertyKeys.insert("universal_symbol")
        nonAdditionalPropertyKeys.insert("action")
        nonAdditionalPropertyKeys.insert("units")
        nonAdditionalPropertyKeys.insert("price")
        nonAdditionalPropertyKeys.insert("sequence")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

