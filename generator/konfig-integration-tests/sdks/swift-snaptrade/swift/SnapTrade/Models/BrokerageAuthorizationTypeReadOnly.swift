//
// BrokerageAuthorizationTypeReadOnly.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BrokerageAuthorizationTypeReadOnly: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case read = "read"
        case trade = "trade"
    }
    public enum AuthType: String, Codable, CaseIterable {
        case oauth = "OAUTH"
        case scrape = "SCRAPE"
        case unofficialApi = "UNOFFICIAL_API"
        case token = "TOKEN"
    }
    public var id: String?
    public var type: ModelType?
    public var authType: AuthType?
    public var brokerage: BrokerageAuthorizationTypeReadOnlyBrokerage?

    public init(id: String? = nil, type: ModelType? = nil, authType: AuthType? = nil, brokerage: BrokerageAuthorizationTypeReadOnlyBrokerage? = nil) {
        self.id = id
        self.type = type
        self.authType = authType
        self.brokerage = brokerage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case authType = "auth_type"
        case brokerage
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(authType, forKey: .authType)
        try container.encodeIfPresent(brokerage, forKey: .brokerage)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(String.self, forKey: .id)
        type = try container.decodeIfPresent(ModelType.self, forKey: .type)
        authType = try container.decodeIfPresent(AuthType.self, forKey: .authType)
        brokerage = try container.decodeIfPresent(BrokerageAuthorizationTypeReadOnlyBrokerage.self, forKey: .brokerage)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("type")
        nonAdditionalPropertyKeys.insert("auth_type")
        nonAdditionalPropertyKeys.insert("brokerage")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

