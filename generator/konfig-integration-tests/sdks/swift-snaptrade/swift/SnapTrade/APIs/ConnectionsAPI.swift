//
// ConnectionsAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ConnectionsAPI {

    /**
     Get brokerage authorization details
     
     - parameter authorizationId: (path) The ID of a brokerage authorization object. 
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func detailBrokerageAuthorization(authorizationId: UUID, userId: String, userSecret: String, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: BrokerageAuthorization?, _ error: Error?) -> Void)) -> RequestTask {
        return detailBrokerageAuthorizationWithRequestBuilder(authorizationId: authorizationId, userId: userId, userSecret: userSecret).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get brokerage authorization details
     
     - parameter authorizationId: (path) The ID of a brokerage authorization object. 
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func detailBrokerageAuthorizationAsync(authorizationId: UUID, userId: String, userSecret: String) async throws -> BrokerageAuthorization {
        return try await withCheckedThrowingContinuation { continuation in
            detailBrokerageAuthorizationWithRequestBuilder(authorizationId: authorizationId, userId: userId, userSecret: userSecret).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Get brokerage authorization details
     - GET /authorizations/{authorizationId}
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter authorizationId: (path) The ID of a brokerage authorization object. 
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - returns: RequestBuilder<BrokerageAuthorization> 
     */
    open class func detailBrokerageAuthorizationWithRequestBuilder(authorizationId: UUID, userId: String, userSecret: String) -> RequestBuilder<BrokerageAuthorization> {
        var localVariablePath = "/authorizations/{authorizationId}"
        let authorizationIdPreEscape = "\(APIHelper.mapValueToPathItem(authorizationId))"
        let authorizationIdPostEscape = authorizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{authorizationId}", with: authorizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BrokerageAuthorization>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List all brokerage authorizations for the user
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listBrokerageAuthorizations(userId: String, userSecret: String, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [BrokerageAuthorization]?, _ error: Error?) -> Void)) -> RequestTask {
        return listBrokerageAuthorizationsWithRequestBuilder(userId: userId, userSecret: userSecret).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List all brokerage authorizations for the user
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func listBrokerageAuthorizationsAsync(userId: String, userSecret: String) async throws -> [BrokerageAuthorization] {
        return try await withCheckedThrowingContinuation { continuation in
            listBrokerageAuthorizationsWithRequestBuilder(userId: userId, userSecret: userSecret).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     List all brokerage authorizations for the user
     - GET /authorizations
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - returns: RequestBuilder<[BrokerageAuthorization]> 
     */
    open class func listBrokerageAuthorizationsWithRequestBuilder(userId: String, userSecret: String) -> RequestBuilder<[BrokerageAuthorization]> {
        let localVariablePath = "/authorizations"
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[BrokerageAuthorization]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete brokerage authorization
     
     - parameter authorizationId: (path) The ID of the Authorization to delete. 
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func removeBrokerageAuthorization(authorizationId: UUID, userId: String, userSecret: String, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return removeBrokerageAuthorizationWithRequestBuilder(authorizationId: authorizationId, userId: userId, userSecret: userSecret).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete brokerage authorization
     
     - parameter authorizationId: (path) The ID of the Authorization to delete. 
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func removeBrokerageAuthorizationAsync(authorizationId: UUID, userId: String, userSecret: String) async throws -> Void {
        return try await withCheckedThrowingContinuation { continuation in
            removeBrokerageAuthorizationWithRequestBuilder(authorizationId: authorizationId, userId: userId, userSecret: userSecret).execute { result in
                switch result {
                case .success:
                    continuation.resume(returning: ())
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Delete brokerage authorization
     - DELETE /authorizations/{authorizationId}
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter authorizationId: (path) The ID of the Authorization to delete. 
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - returns: RequestBuilder<Void> 
     */
    open class func removeBrokerageAuthorizationWithRequestBuilder(authorizationId: UUID, userId: String, userSecret: String) -> RequestBuilder<Void> {
        var localVariablePath = "/authorizations/{authorizationId}"
        let authorizationIdPreEscape = "\(APIHelper.mapValueToPathItem(authorizationId))"
        let authorizationIdPostEscape = authorizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{authorizationId}", with: authorizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = SnapTradeAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List all session events for the partner
     
     - parameter partnerClientId: (query)  
     - parameter userId: (query) Optional comma seperated list of user IDs used to filter the request on specific users (optional)
     - parameter sessionId: (query) Optional comma seperated list of session IDs used to filter the request on specific users (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sessionEvents(partnerClientId: String, userId: String? = nil, sessionId: String? = nil, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [ConnectionsSessionEvents200ResponseInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return sessionEventsWithRequestBuilder(partnerClientId: partnerClientId, userId: userId, sessionId: sessionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List all session events for the partner
     
     - parameter partnerClientId: (query)  
     - parameter userId: (query) Optional comma seperated list of user IDs used to filter the request on specific users (optional)
     - parameter sessionId: (query) Optional comma seperated list of session IDs used to filter the request on specific users (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func sessionEventsAsync(partnerClientId: String, userId: String? = nil, sessionId: String? = nil) async throws -> [ConnectionsSessionEvents200ResponseInner] {
        return try await withCheckedThrowingContinuation { continuation in
            sessionEventsWithRequestBuilder(partnerClientId: partnerClientId, userId: userId, sessionId: sessionId).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     List all session events for the partner
     - GET /sessionEvents
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter partnerClientId: (query)  
     - parameter userId: (query) Optional comma seperated list of user IDs used to filter the request on specific users (optional)
     - parameter sessionId: (query) Optional comma seperated list of session IDs used to filter the request on specific users (optional)
     - returns: RequestBuilder<[ConnectionsSessionEvents200ResponseInner]> 
     */
    open class func sessionEventsWithRequestBuilder(partnerClientId: String, userId: String? = nil, sessionId: String? = nil) -> RequestBuilder<[ConnectionsSessionEvents200ResponseInner]> {
        let localVariablePath = "/sessionEvents"
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "PartnerClientId": (wrappedValue: partnerClientId.encodeToJSON(), isExplode: true),
            "userId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "sessionId": (wrappedValue: sessionId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ConnectionsSessionEvents200ResponseInner]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
