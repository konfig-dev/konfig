//
// ErrorLogsAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ErrorLogsAPI {

    /**
     Retrieve error logs on behalf of your SnapTrade users
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listUserErrors(userId: String, userSecret: String, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [UserErrorLog]?, _ error: Error?) -> Void)) -> RequestTask {
        return listUserErrorsWithRequestBuilder(userId: userId, userSecret: userSecret).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve error logs on behalf of your SnapTrade users
     - GET /snapTrade/listUserErrors
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - returns: RequestBuilder<[UserErrorLog]> 
     */
    open class func listUserErrorsWithRequestBuilder(userId: String, userSecret: String) -> RequestBuilder<[UserErrorLog]> {
        let localVariablePath = "/snapTrade/listUserErrors"
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UserErrorLog]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
