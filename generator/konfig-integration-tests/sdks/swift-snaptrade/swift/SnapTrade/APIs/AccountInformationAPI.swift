//
// AccountInformationAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AccountInformationAPI {

    /**
     List all accounts for the user, plus balances, positions, and orders for each account.
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter brokerageAuthorizations: (query) Optional. Comma seperated list of authorization IDs (only use if filtering is needed on one or more authorizations). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @discardableResult
    open class func getAllUserHoldings(userId: String, userSecret: String, brokerageAuthorizations: UUID? = nil, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [AccountHoldings]?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllUserHoldingsWithRequestBuilder(userId: userId, userSecret: userSecret, brokerageAuthorizations: brokerageAuthorizations).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List all accounts for the user, plus balances, positions, and orders for each account.
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter brokerageAuthorizations: (query) Optional. Comma seperated list of authorization IDs (only use if filtering is needed on one or more authorizations). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getAllUserHoldingsAsync(userId: String, userSecret: String, brokerageAuthorizations: UUID? = nil) async throws -> [AccountHoldings] {
        return try await withCheckedThrowingContinuation { continuation in
            getAllUserHoldingsWithRequestBuilder(userId: userId, userSecret: userSecret, brokerageAuthorizations: brokerageAuthorizations).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     List all accounts for the user, plus balances, positions, and orders for each account.
     - GET /holdings
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter brokerageAuthorizations: (query) Optional. Comma seperated list of authorization IDs (only use if filtering is needed on one or more authorizations). (optional)
     - returns: RequestBuilder<[AccountHoldings]> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getAllUserHoldingsWithRequestBuilder(userId: String, userSecret: String, brokerageAuthorizations: UUID? = nil) -> RequestBuilder<[AccountHoldings]> {
        let localVariablePath = "/holdings"
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
            "brokerage_authorizations": (wrappedValue: brokerageAuthorizations?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AccountHoldings]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List account balances
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to get balances. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserAccountBalance(userId: String, userSecret: String, accountId: UUID, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [Balance]?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserAccountBalanceWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List account balances
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to get balances. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getUserAccountBalanceAsync(userId: String, userSecret: String, accountId: UUID) async throws -> [Balance] {
        return try await withCheckedThrowingContinuation { continuation in
            getUserAccountBalanceWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     List account balances
     - GET /accounts/{accountId}/balances
     - A list of account balances for the specified account (one per currency that the account holds).
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to get balances. 
     - returns: RequestBuilder<[Balance]> 
     */
    open class func getUserAccountBalanceWithRequestBuilder(userId: String, userSecret: String, accountId: UUID) -> RequestBuilder<[Balance]> {
        var localVariablePath = "/accounts/{accountId}/balances"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Balance]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Return details of a specific investment account
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to get detail of. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserAccountDetails(userId: String, userSecret: String, accountId: UUID, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: Account?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserAccountDetailsWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return details of a specific investment account
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to get detail of. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getUserAccountDetailsAsync(userId: String, userSecret: String, accountId: UUID) async throws -> Account {
        return try await withCheckedThrowingContinuation { continuation in
            getUserAccountDetailsWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Return details of a specific investment account
     - GET /accounts/{accountId}
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to get detail of. 
     - returns: RequestBuilder<Account> 
     */
    open class func getUserAccountDetailsWithRequestBuilder(userId: String, userSecret: String, accountId: UUID) -> RequestBuilder<Account> {
        var localVariablePath = "/accounts/{accountId}"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Account>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter state
     */
    public enum State_getUserAccountOrders: String, CaseIterable {
        case all = "all"
        case _open = "open"
        case executed = "executed"
    }

    /**
     List account orders
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to get orders. 
     - parameter state: (query) defaults value is set to \&quot;all\&quot; (optional)
     - parameter days: (query) Number of days in the past to fetch the most recent orders. Defaults to the last 90 days if no value is passed in. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserAccountOrders(userId: String, userSecret: String, accountId: UUID, state: State_getUserAccountOrders? = nil, days: Int? = nil, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [AccountOrderRecord]?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserAccountOrdersWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, state: state, days: days).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List account orders
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to get orders. 
     - parameter state: (query) defaults value is set to \&quot;all\&quot; (optional)
     - parameter days: (query) Number of days in the past to fetch the most recent orders. Defaults to the last 90 days if no value is passed in. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getUserAccountOrdersAsync(userId: String, userSecret: String, accountId: UUID, state: State_getUserAccountOrders? = nil, days: Int? = nil) async throws -> [AccountOrderRecord] {
        return try await withCheckedThrowingContinuation { continuation in
            getUserAccountOrdersWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, state: state, days: days).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     List account orders
     - GET /accounts/{accountId}/orders
     - Fetch all recent orders from a user's account.
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to get orders. 
     - parameter state: (query) defaults value is set to \&quot;all\&quot; (optional)
     - parameter days: (query) Number of days in the past to fetch the most recent orders. Defaults to the last 90 days if no value is passed in. (optional)
     - returns: RequestBuilder<[AccountOrderRecord]> 
     */
    open class func getUserAccountOrdersWithRequestBuilder(userId: String, userSecret: String, accountId: UUID, state: State_getUserAccountOrders? = nil, days: Int? = nil) -> RequestBuilder<[AccountOrderRecord]> {
        var localVariablePath = "/accounts/{accountId}/orders"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
            "state": (wrappedValue: state?.encodeToJSON(), isExplode: true),
            "days": (wrappedValue: days?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AccountOrderRecord]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List account positions
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to get positions. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserAccountPositions(userId: String, userSecret: String, accountId: UUID, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [Position]?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserAccountPositionsWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List account positions
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to get positions. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getUserAccountPositionsAsync(userId: String, userSecret: String, accountId: UUID) async throws -> [Position] {
        return try await withCheckedThrowingContinuation { continuation in
            getUserAccountPositionsWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     List account positions
     - GET /accounts/{accountId}/positions
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to get positions. 
     - returns: RequestBuilder<[Position]> 
     */
    open class func getUserAccountPositionsWithRequestBuilder(userId: String, userSecret: String, accountId: UUID) -> RequestBuilder<[Position]> {
        var localVariablePath = "/accounts/{accountId}/positions"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Position]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List balances, positions and orders for the specified account
     
     - parameter accountId: (path) The ID of the account to fetch holdings for. 
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserHoldings(accountId: UUID, userId: String, userSecret: String, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: AccountHoldingsAccount?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserHoldingsWithRequestBuilder(accountId: accountId, userId: userId, userSecret: userSecret).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List balances, positions and orders for the specified account
     
     - parameter accountId: (path) The ID of the account to fetch holdings for. 
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getUserHoldingsAsync(accountId: UUID, userId: String, userSecret: String) async throws -> AccountHoldingsAccount {
        return try await withCheckedThrowingContinuation { continuation in
            getUserHoldingsWithRequestBuilder(accountId: accountId, userId: userId, userSecret: userSecret).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     List balances, positions and orders for the specified account
     - GET /accounts/{accountId}/holdings
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter accountId: (path) The ID of the account to fetch holdings for. 
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - returns: RequestBuilder<AccountHoldingsAccount> 
     */
    open class func getUserHoldingsWithRequestBuilder(accountId: UUID, userId: String, userSecret: String) -> RequestBuilder<AccountHoldingsAccount> {
        var localVariablePath = "/accounts/{accountId}/holdings"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountHoldingsAccount>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List accounts
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listUserAccounts(userId: String, userSecret: String, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [Account]?, _ error: Error?) -> Void)) -> RequestTask {
        return listUserAccountsWithRequestBuilder(userId: userId, userSecret: userSecret).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List accounts
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func listUserAccountsAsync(userId: String, userSecret: String) async throws -> [Account] {
        return try await withCheckedThrowingContinuation { continuation in
            listUserAccountsWithRequestBuilder(userId: userId, userSecret: userSecret).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     List accounts
     - GET /accounts
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - returns: RequestBuilder<[Account]> 
     */
    open class func listUserAccountsWithRequestBuilder(userId: String, userSecret: String) -> RequestBuilder<[Account]> {
        let localVariablePath = "/accounts"
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Account]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update details of an investment account
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to update. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateUserAccount(userId: String, userSecret: String, accountId: UUID, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [Account]?, _ error: Error?) -> Void)) -> RequestTask {
        return updateUserAccountWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update details of an investment account
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to update. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func updateUserAccountAsync(userId: String, userSecret: String, accountId: UUID) async throws -> [Account] {
        return try await withCheckedThrowingContinuation { continuation in
            updateUserAccountWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Update details of an investment account
     - PUT /accounts/{accountId}
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to update. 
     - returns: RequestBuilder<[Account]> 
     */
    open class func updateUserAccountWithRequestBuilder(userId: String, userSecret: String, accountId: UUID) -> RequestBuilder<[Account]> {
        var localVariablePath = "/accounts/{accountId}"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Account]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
