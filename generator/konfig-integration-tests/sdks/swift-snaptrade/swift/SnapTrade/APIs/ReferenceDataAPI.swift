//
// ReferenceDataAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ReferenceDataAPI {

    let client: SnapTradeClient

    public init(client: SnapTradeClient) {
        self.client = client
    }

    /**
     Return the exchange rate of a currency pair
     
     - parameter currencyPair: (path) A currency pair based on currency code for example, {CAD-USD} 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCurrencyExchangeRatePairSync(currencyPair: String, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: ExchangeRatePairs?, _ error: Error?) -> Void)) -> RequestTask {
        return getCurrencyExchangeRatePairWithRequestBuilder(currencyPair: currencyPair).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return the exchange rate of a currency pair
     
     - parameter currencyPair: (path) A currency pair based on currency code for example, {CAD-USD} 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getCurrencyExchangeRatePairAsyncMappedParams(currencyPair: String) async throws -> ExchangeRatePairs {
        return try await withCheckedThrowingContinuation { continuation in
            getCurrencyExchangeRatePairWithRequestBuilder(currencyPair: currencyPair).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Return the exchange rate of a currency pair
     
     - parameter currencyPair: (path) A currency pair based on currency code for example, {CAD-USD} 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getCurrencyExchangeRatePair(
        currencyPair: String
    ) async throws -> ExchangeRatePairs {
        return try await withCheckedThrowingContinuation { continuation in
            getCurrencyExchangeRatePairWithRequestBuilder(currencyPair: currencyPair).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Return the exchange rate of a currency pair
     
     - parameter currencyPair: (path) A currency pair based on currency code for example, {CAD-USD} 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getCurrencyExchangeRatePair(
        currencyPair: String
    ) async throws -> ExchangeRatePairs {
        return try await withCheckedThrowingContinuation { continuation in
            getCurrencyExchangeRatePairWithRequestBuilder(currencyPair: currencyPair).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Return the exchange rate of a currency pair
     - GET /currencies/rates/{currencyPair}
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter currencyPair: (path) A currency pair based on currency code for example, {CAD-USD} 
     - returns: RequestBuilder<ExchangeRatePairs> 
     */
    open class func getCurrencyExchangeRatePairWithRequestBuilder(
            currencyPair: String
    ) -> RequestBuilder<ExchangeRatePairs> {
        let basePath = SnapTradeAPI.basePath;
        var localVariablePath = "/currencies/rates/{currencyPair}"
        let currencyPairPreEscape = "\(APIHelper.mapValueToPathItem(currencyPair))"
        let currencyPairPostEscape = currencyPairPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{currencyPair}", with: currencyPairPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: SnapTradeAPI.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: SnapTradeAPI.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: SnapTradeAPI.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<ExchangeRatePairs>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /currencies/rates/{currencyPair}")
    }

    /**
     Return the exchange rate of a currency pair
     - GET /currencies/rates/{currencyPair}
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter currencyPair: (path) A currency pair based on currency code for example, {CAD-USD} 
     - returns: RequestBuilder<ExchangeRatePairs> 
     */
    open func getCurrencyExchangeRatePairWithRequestBuilder(
            currencyPair: String
    ) -> RequestBuilder<ExchangeRatePairs> {
        let basePath = self.client.basePath;
        var localVariablePath = "/currencies/rates/{currencyPair}"
        let currencyPairPreEscape = "\(APIHelper.mapValueToPathItem(currencyPair))"
        let currencyPairPostEscape = currencyPairPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{currencyPair}", with: currencyPairPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: self.client.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: self.client.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: self.client.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<ExchangeRatePairs>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /currencies/rates/{currencyPair}")
    }


    /**
     Get metadata related to Snaptrade partner
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPartnerInfoSync(apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: PartnerData?, _ error: Error?) -> Void)) -> RequestTask {
        return getPartnerInfoWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get metadata related to Snaptrade partner
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getPartnerInfoAsyncMappedParams() async throws -> PartnerData {
        return try await withCheckedThrowingContinuation { continuation in
            getPartnerInfoWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get metadata related to Snaptrade partner
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getPartnerInfo(
    ) async throws -> PartnerData {
        return try await withCheckedThrowingContinuation { continuation in
            getPartnerInfoWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Get metadata related to Snaptrade partner
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getPartnerInfo(
    ) async throws -> PartnerData {
        return try await withCheckedThrowingContinuation { continuation in
            getPartnerInfoWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Get metadata related to Snaptrade partner
     - GET /snapTrade/partners
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - returns: RequestBuilder<PartnerData> 
     */
    open class func getPartnerInfoWithRequestBuilder(
    ) -> RequestBuilder<PartnerData> {
        let basePath = SnapTradeAPI.basePath;
        let localVariablePath = "/snapTrade/partners"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: SnapTradeAPI.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: SnapTradeAPI.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: SnapTradeAPI.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<PartnerData>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /snapTrade/partners")
    }

    /**
     Get metadata related to Snaptrade partner
     - GET /snapTrade/partners
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - returns: RequestBuilder<PartnerData> 
     */
    open func getPartnerInfoWithRequestBuilder(
    ) -> RequestBuilder<PartnerData> {
        let basePath = self.client.basePath;
        let localVariablePath = "/snapTrade/partners"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: self.client.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: self.client.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: self.client.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<PartnerData>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /snapTrade/partners")
    }


    /**
     List of all security types
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSecurityTypesSync(apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [SecurityType]?, _ error: Error?) -> Void)) -> RequestTask {
        return getSecurityTypesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List of all security types
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getSecurityTypesAsyncMappedParams() async throws -> [SecurityType] {
        return try await withCheckedThrowingContinuation { continuation in
            getSecurityTypesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     List of all security types
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getSecurityTypes(
    ) async throws -> [SecurityType] {
        return try await withCheckedThrowingContinuation { continuation in
            getSecurityTypesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     List of all security types
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getSecurityTypes(
    ) async throws -> [SecurityType] {
        return try await withCheckedThrowingContinuation { continuation in
            getSecurityTypesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     List of all security types
     - GET /securityTypes
     - List security types available on SnapTrade.
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - returns: RequestBuilder<[SecurityType]> 
     */
    open class func getSecurityTypesWithRequestBuilder(
    ) -> RequestBuilder<[SecurityType]> {
        let basePath = SnapTradeAPI.basePath;
        let localVariablePath = "/securityTypes"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: SnapTradeAPI.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: SnapTradeAPI.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: SnapTradeAPI.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<[SecurityType]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /securityTypes")
    }

    /**
     List of all security types
     - GET /securityTypes
     - List security types available on SnapTrade.
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - returns: RequestBuilder<[SecurityType]> 
     */
    open func getSecurityTypesWithRequestBuilder(
    ) -> RequestBuilder<[SecurityType]> {
        let basePath = self.client.basePath;
        let localVariablePath = "/securityTypes"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: self.client.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: self.client.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: self.client.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<[SecurityType]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /securityTypes")
    }


    /**
     List exchanges
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getStockExchangesSync(apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [Exchange]?, _ error: Error?) -> Void)) -> RequestTask {
        return getStockExchangesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List exchanges
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getStockExchangesAsyncMappedParams() async throws -> [Exchange] {
        return try await withCheckedThrowingContinuation { continuation in
            getStockExchangesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     List exchanges
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getStockExchanges(
    ) async throws -> [Exchange] {
        return try await withCheckedThrowingContinuation { continuation in
            getStockExchangesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     List exchanges
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getStockExchanges(
    ) async throws -> [Exchange] {
        return try await withCheckedThrowingContinuation { continuation in
            getStockExchangesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     List exchanges
     - GET /exchanges
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - returns: RequestBuilder<[Exchange]> 
     */
    open class func getStockExchangesWithRequestBuilder(
    ) -> RequestBuilder<[Exchange]> {
        let basePath = SnapTradeAPI.basePath;
        let localVariablePath = "/exchanges"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: SnapTradeAPI.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: SnapTradeAPI.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: SnapTradeAPI.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<[Exchange]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /exchanges")
    }

    /**
     List exchanges
     - GET /exchanges
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - returns: RequestBuilder<[Exchange]> 
     */
    open func getStockExchangesWithRequestBuilder(
    ) -> RequestBuilder<[Exchange]> {
        let basePath = self.client.basePath;
        let localVariablePath = "/exchanges"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: self.client.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: self.client.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: self.client.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<[Exchange]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /exchanges")
    }


    /**
     Search for symbols
     
     - parameter symbolQuery: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSymbolsSync(symbolQuery: SymbolQuery? = nil, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [UniversalSymbol]?, _ error: Error?) -> Void)) -> RequestTask {
        return getSymbolsWithRequestBuilder(symbolQuery: symbolQuery).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search for symbols
     
     - parameter symbolQuery: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getSymbolsAsyncMappedParams(symbolQuery: SymbolQuery? = nil) async throws -> [UniversalSymbol] {
        return try await withCheckedThrowingContinuation { continuation in
            getSymbolsWithRequestBuilder(symbolQuery: symbolQuery).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Search for symbols
     
     - parameter symbolQuery: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getSymbols(
        substring: String? = nil
    ) async throws -> [UniversalSymbol] {
        let symbolQuery = SymbolQuery(
            substring: substring
        )
        return try await withCheckedThrowingContinuation { continuation in
            getSymbolsWithRequestBuilder(symbolQuery: symbolQuery).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Search for symbols
     
     - parameter symbolQuery: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getSymbols(
        substring: String? = nil
    ) async throws -> [UniversalSymbol] {
        let symbolQuery = SymbolQuery(
            substring: substring
        )
        return try await withCheckedThrowingContinuation { continuation in
            getSymbolsWithRequestBuilder(symbolQuery: symbolQuery).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Search for symbols
     - POST /symbols
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter symbolQuery: (body)  (optional)
     - returns: RequestBuilder<[UniversalSymbol]> 
     */
    open class func getSymbolsWithRequestBuilder(
            symbolQuery: SymbolQuery? = nil
    ) -> RequestBuilder<[UniversalSymbol]> {
        let basePath = SnapTradeAPI.basePath;
        let localVariablePath = "/symbols"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: symbolQuery)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: SnapTradeAPI.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: SnapTradeAPI.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: SnapTradeAPI.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<[UniversalSymbol]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /symbols")
    }

    /**
     Search for symbols
     - POST /symbols
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter symbolQuery: (body)  (optional)
     - returns: RequestBuilder<[UniversalSymbol]> 
     */
    open func getSymbolsWithRequestBuilder(
            symbolQuery: SymbolQuery? = nil
    ) -> RequestBuilder<[UniversalSymbol]> {
        let basePath = self.client.basePath;
        let localVariablePath = "/symbols"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: symbolQuery)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: self.client.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: self.client.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: self.client.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<[UniversalSymbol]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /symbols")
    }


    /**
     Get details of a symbol by the ticker or the universal_symbol_id
     
     - parameter query: (path) The ticker or universal_symbol_id of the UniversalSymbol to get. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSymbolsByTickerSync(query: String, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: UniversalSymbol?, _ error: Error?) -> Void)) -> RequestTask {
        return getSymbolsByTickerWithRequestBuilder(query: query).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get details of a symbol by the ticker or the universal_symbol_id
     
     - parameter query: (path) The ticker or universal_symbol_id of the UniversalSymbol to get. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getSymbolsByTickerAsyncMappedParams(query: String) async throws -> UniversalSymbol {
        return try await withCheckedThrowingContinuation { continuation in
            getSymbolsByTickerWithRequestBuilder(query: query).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get details of a symbol by the ticker or the universal_symbol_id
     
     - parameter query: (path) The ticker or universal_symbol_id of the UniversalSymbol to get. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getSymbolsByTicker(
        query: String
    ) async throws -> UniversalSymbol {
        return try await withCheckedThrowingContinuation { continuation in
            getSymbolsByTickerWithRequestBuilder(query: query).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Get details of a symbol by the ticker or the universal_symbol_id
     
     - parameter query: (path) The ticker or universal_symbol_id of the UniversalSymbol to get. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getSymbolsByTicker(
        query: String
    ) async throws -> UniversalSymbol {
        return try await withCheckedThrowingContinuation { continuation in
            getSymbolsByTickerWithRequestBuilder(query: query).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Get details of a symbol by the ticker or the universal_symbol_id
     - GET /symbols/{query}
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter query: (path) The ticker or universal_symbol_id of the UniversalSymbol to get. 
     - returns: RequestBuilder<UniversalSymbol> 
     */
    open class func getSymbolsByTickerWithRequestBuilder(
            query: String
    ) -> RequestBuilder<UniversalSymbol> {
        let basePath = SnapTradeAPI.basePath;
        var localVariablePath = "/symbols/{query}"
        let queryPreEscape = "\(APIHelper.mapValueToPathItem(query))"
        let queryPostEscape = queryPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{query}", with: queryPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: SnapTradeAPI.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: SnapTradeAPI.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: SnapTradeAPI.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<UniversalSymbol>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /symbols/{query}")
    }

    /**
     Get details of a symbol by the ticker or the universal_symbol_id
     - GET /symbols/{query}
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter query: (path) The ticker or universal_symbol_id of the UniversalSymbol to get. 
     - returns: RequestBuilder<UniversalSymbol> 
     */
    open func getSymbolsByTickerWithRequestBuilder(
            query: String
    ) -> RequestBuilder<UniversalSymbol> {
        let basePath = self.client.basePath;
        var localVariablePath = "/symbols/{query}"
        let queryPreEscape = "\(APIHelper.mapValueToPathItem(query))"
        let queryPostEscape = queryPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{query}", with: queryPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: self.client.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: self.client.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: self.client.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<UniversalSymbol>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /symbols/{query}")
    }


    /**
     List of all brokerage authorization types
     
     - parameter brokerage: (query) Comma separated value of brokerage slugs (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listAllBrokerageAuthorizationTypeSync(brokerage: String? = nil, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [BrokerageAuthorizationTypeReadOnly]?, _ error: Error?) -> Void)) -> RequestTask {
        return listAllBrokerageAuthorizationTypeWithRequestBuilder(brokerage: brokerage).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List of all brokerage authorization types
     
     - parameter brokerage: (query) Comma separated value of brokerage slugs (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func listAllBrokerageAuthorizationTypeAsyncMappedParams(brokerage: String? = nil) async throws -> [BrokerageAuthorizationTypeReadOnly] {
        return try await withCheckedThrowingContinuation { continuation in
            listAllBrokerageAuthorizationTypeWithRequestBuilder(brokerage: brokerage).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     List of all brokerage authorization types
     
     - parameter brokerage: (query) Comma separated value of brokerage slugs (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func listAllBrokerageAuthorizationType(
        brokerage: String? = nil
    ) async throws -> [BrokerageAuthorizationTypeReadOnly] {
        return try await withCheckedThrowingContinuation { continuation in
            listAllBrokerageAuthorizationTypeWithRequestBuilder(brokerage: brokerage).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     List of all brokerage authorization types
     
     - parameter brokerage: (query) Comma separated value of brokerage slugs (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func listAllBrokerageAuthorizationType(
        brokerage: String? = nil
    ) async throws -> [BrokerageAuthorizationTypeReadOnly] {
        return try await withCheckedThrowingContinuation { continuation in
            listAllBrokerageAuthorizationTypeWithRequestBuilder(brokerage: brokerage).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     List of all brokerage authorization types
     - GET /brokerageAuthorizationTypes
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter brokerage: (query) Comma separated value of brokerage slugs (optional)
     - returns: RequestBuilder<[BrokerageAuthorizationTypeReadOnly]> 
     */
    open class func listAllBrokerageAuthorizationTypeWithRequestBuilder(
            brokerage: String? = nil
    ) -> RequestBuilder<[BrokerageAuthorizationTypeReadOnly]> {
        let basePath = SnapTradeAPI.basePath;
        let localVariablePath = "/brokerageAuthorizationTypes"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "brokerage": (wrappedValue: brokerage?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: SnapTradeAPI.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: SnapTradeAPI.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: SnapTradeAPI.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<[BrokerageAuthorizationTypeReadOnly]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /brokerageAuthorizationTypes")
    }

    /**
     List of all brokerage authorization types
     - GET /brokerageAuthorizationTypes
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter brokerage: (query) Comma separated value of brokerage slugs (optional)
     - returns: RequestBuilder<[BrokerageAuthorizationTypeReadOnly]> 
     */
    open func listAllBrokerageAuthorizationTypeWithRequestBuilder(
            brokerage: String? = nil
    ) -> RequestBuilder<[BrokerageAuthorizationTypeReadOnly]> {
        let basePath = self.client.basePath;
        let localVariablePath = "/brokerageAuthorizationTypes"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "brokerage": (wrappedValue: brokerage?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: self.client.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: self.client.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: self.client.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<[BrokerageAuthorizationTypeReadOnly]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /brokerageAuthorizationTypes")
    }


    /**
     List brokerages
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listAllBrokeragesSync(apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [Brokerage]?, _ error: Error?) -> Void)) -> RequestTask {
        return listAllBrokeragesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List brokerages
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func listAllBrokeragesAsyncMappedParams() async throws -> [Brokerage] {
        return try await withCheckedThrowingContinuation { continuation in
            listAllBrokeragesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     List brokerages
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func listAllBrokerages(
    ) async throws -> [Brokerage] {
        return try await withCheckedThrowingContinuation { continuation in
            listAllBrokeragesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     List brokerages
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func listAllBrokerages(
    ) async throws -> [Brokerage] {
        return try await withCheckedThrowingContinuation { continuation in
            listAllBrokeragesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     List brokerages
     - GET /brokerages
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - returns: RequestBuilder<[Brokerage]> 
     */
    open class func listAllBrokeragesWithRequestBuilder(
    ) -> RequestBuilder<[Brokerage]> {
        let basePath = SnapTradeAPI.basePath;
        let localVariablePath = "/brokerages"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: SnapTradeAPI.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: SnapTradeAPI.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: SnapTradeAPI.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<[Brokerage]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /brokerages")
    }

    /**
     List brokerages
     - GET /brokerages
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - returns: RequestBuilder<[Brokerage]> 
     */
    open func listAllBrokeragesWithRequestBuilder(
    ) -> RequestBuilder<[Brokerage]> {
        let basePath = self.client.basePath;
        let localVariablePath = "/brokerages"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: self.client.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: self.client.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: self.client.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<[Brokerage]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /brokerages")
    }


    /**
     List currencies
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listAllCurrenciesSync(apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [Currency]?, _ error: Error?) -> Void)) -> RequestTask {
        return listAllCurrenciesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List currencies
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func listAllCurrenciesAsyncMappedParams() async throws -> [Currency] {
        return try await withCheckedThrowingContinuation { continuation in
            listAllCurrenciesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     List currencies
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func listAllCurrencies(
    ) async throws -> [Currency] {
        return try await withCheckedThrowingContinuation { continuation in
            listAllCurrenciesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     List currencies
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func listAllCurrencies(
    ) async throws -> [Currency] {
        return try await withCheckedThrowingContinuation { continuation in
            listAllCurrenciesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     List currencies
     - GET /currencies
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - returns: RequestBuilder<[Currency]> 
     */
    open class func listAllCurrenciesWithRequestBuilder(
    ) -> RequestBuilder<[Currency]> {
        let basePath = SnapTradeAPI.basePath;
        let localVariablePath = "/currencies"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: SnapTradeAPI.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: SnapTradeAPI.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: SnapTradeAPI.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<[Currency]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /currencies")
    }

    /**
     List currencies
     - GET /currencies
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - returns: RequestBuilder<[Currency]> 
     */
    open func listAllCurrenciesWithRequestBuilder(
    ) -> RequestBuilder<[Currency]> {
        let basePath = self.client.basePath;
        let localVariablePath = "/currencies"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: self.client.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: self.client.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: self.client.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<[Currency]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /currencies")
    }


    /**
     List currency exchange rates
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listAllCurrenciesRatesSync(apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [ExchangeRatePairs]?, _ error: Error?) -> Void)) -> RequestTask {
        return listAllCurrenciesRatesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List currency exchange rates
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func listAllCurrenciesRatesAsyncMappedParams() async throws -> [ExchangeRatePairs] {
        return try await withCheckedThrowingContinuation { continuation in
            listAllCurrenciesRatesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     List currency exchange rates
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func listAllCurrenciesRates(
    ) async throws -> [ExchangeRatePairs] {
        return try await withCheckedThrowingContinuation { continuation in
            listAllCurrenciesRatesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     List currency exchange rates
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func listAllCurrenciesRates(
    ) async throws -> [ExchangeRatePairs] {
        return try await withCheckedThrowingContinuation { continuation in
            listAllCurrenciesRatesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     List currency exchange rates
     - GET /currencies/rates
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - returns: RequestBuilder<[ExchangeRatePairs]> 
     */
    open class func listAllCurrenciesRatesWithRequestBuilder(
    ) -> RequestBuilder<[ExchangeRatePairs]> {
        let basePath = SnapTradeAPI.basePath;
        let localVariablePath = "/currencies/rates"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: SnapTradeAPI.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: SnapTradeAPI.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: SnapTradeAPI.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<[ExchangeRatePairs]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /currencies/rates")
    }

    /**
     List currency exchange rates
     - GET /currencies/rates
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - returns: RequestBuilder<[ExchangeRatePairs]> 
     */
    open func listAllCurrenciesRatesWithRequestBuilder(
    ) -> RequestBuilder<[ExchangeRatePairs]> {
        let basePath = self.client.basePath;
        let localVariablePath = "/currencies/rates"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: self.client.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: self.client.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: self.client.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<[ExchangeRatePairs]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /currencies/rates")
    }


    /**
     Search for symbols available in an account
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to search for symbols within. 
     - parameter symbolQuery: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func symbolSearchUserAccountSync(userId: String, userSecret: String, accountId: String, symbolQuery: SymbolQuery? = nil, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [UniversalSymbol]?, _ error: Error?) -> Void)) -> RequestTask {
        return symbolSearchUserAccountWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, symbolQuery: symbolQuery).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search for symbols available in an account
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to search for symbols within. 
     - parameter symbolQuery: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func symbolSearchUserAccountAsyncMappedParams(userId: String, userSecret: String, accountId: String, symbolQuery: SymbolQuery? = nil) async throws -> [UniversalSymbol] {
        return try await withCheckedThrowingContinuation { continuation in
            symbolSearchUserAccountWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, symbolQuery: symbolQuery).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Search for symbols available in an account
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to search for symbols within. 
     - parameter symbolQuery: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func symbolSearchUserAccount(
        userId: String,
        userSecret: String,
        accountId: String,
        substring: String? = nil
    ) async throws -> [UniversalSymbol] {
        let symbolQuery = SymbolQuery(
            substring: substring
        )
        return try await withCheckedThrowingContinuation { continuation in
            symbolSearchUserAccountWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, symbolQuery: symbolQuery).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Search for symbols available in an account
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to search for symbols within. 
     - parameter symbolQuery: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func symbolSearchUserAccount(
        userId: String,
        userSecret: String,
        accountId: String,
        substring: String? = nil
    ) async throws -> [UniversalSymbol] {
        let symbolQuery = SymbolQuery(
            substring: substring
        )
        return try await withCheckedThrowingContinuation { continuation in
            symbolSearchUserAccountWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, symbolQuery: symbolQuery).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Search for symbols available in an account
     - POST /accounts/{accountId}/symbols
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to search for symbols within. 
     - parameter symbolQuery: (body)  (optional)
     - returns: RequestBuilder<[UniversalSymbol]> 
     */
    open class func symbolSearchUserAccountWithRequestBuilder(
            userId: String,
            userSecret: String,
            accountId: String,
            symbolQuery: SymbolQuery? = nil
    ) -> RequestBuilder<[UniversalSymbol]> {
        let basePath = SnapTradeAPI.basePath;
        var localVariablePath = "/accounts/{accountId}/symbols"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: symbolQuery)
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: SnapTradeAPI.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: SnapTradeAPI.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: SnapTradeAPI.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<[UniversalSymbol]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /accounts/{accountId}/symbols")
    }

    /**
     Search for symbols available in an account
     - POST /accounts/{accountId}/symbols
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to search for symbols within. 
     - parameter symbolQuery: (body)  (optional)
     - returns: RequestBuilder<[UniversalSymbol]> 
     */
    open func symbolSearchUserAccountWithRequestBuilder(
            userId: String,
            userSecret: String,
            accountId: String,
            symbolQuery: SymbolQuery? = nil
    ) -> RequestBuilder<[UniversalSymbol]> {
        let basePath = self.client.basePath;
        var localVariablePath = "/accounts/{accountId}/symbols"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: symbolQuery)
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: self.client.partnerClientId, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: self.client.partnerSignature, prefix: nil)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: self.client.partnerTimestamp, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<[UniversalSymbol]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /accounts/{accountId}/symbols")
    }

}
