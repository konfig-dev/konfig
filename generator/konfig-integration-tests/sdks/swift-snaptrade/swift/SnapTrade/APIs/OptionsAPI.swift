//
// OptionsAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OptionsAPI {

    /**
     Creates an option strategy object that will be used to place an option strategy order
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to create the option strategy object in. 
     - parameter optionsGetOptionStrategyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOptionStrategy(userId: String, userSecret: String, accountId: UUID, optionsGetOptionStrategyRequest: OptionsGetOptionStrategyRequest, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: StrategyQuotes?, _ error: Error?) -> Void)) -> RequestTask {
        return getOptionStrategyWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, optionsGetOptionStrategyRequest: optionsGetOptionStrategyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Creates an option strategy object that will be used to place an option strategy order
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to create the option strategy object in. 
     - parameter optionsGetOptionStrategyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getOptionStrategyAsyncMappedParams(userId: String, userSecret: String, accountId: UUID, optionsGetOptionStrategyRequest: OptionsGetOptionStrategyRequest) async throws -> StrategyQuotes {
        return try await withCheckedThrowingContinuation { continuation in
            getOptionStrategyWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, optionsGetOptionStrategyRequest: optionsGetOptionStrategyRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Creates an option strategy object that will be used to place an option strategy order
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to create the option strategy object in. 
     - parameter optionsGetOptionStrategyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getOptionStrategyAsync(
        underlyingSymbolId: UUID,
        legs: [OptionLeg],
        strategyType: OptionsGetOptionStrategyRequest.StrategyType,
        userId: String,
        userSecret: String,
        accountId: UUID
    ) async throws -> StrategyQuotes {
        let optionsGetOptionStrategyRequest = OptionsGetOptionStrategyRequest(
            underlyingSymbolId: underlyingSymbolId,
            legs: legs,
            strategyType: strategyType
        )
        return try await withCheckedThrowingContinuation { continuation in
            getOptionStrategyWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, optionsGetOptionStrategyRequest: optionsGetOptionStrategyRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Creates an option strategy object that will be used to place an option strategy order
     - POST /accounts/{accountId}/optionStrategy
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to create the option strategy object in. 
     - parameter optionsGetOptionStrategyRequest: (body)  
     - returns: RequestBuilder<StrategyQuotes> 
     */
    open class func getOptionStrategyWithRequestBuilder(userId: String, userSecret: String, accountId: UUID, optionsGetOptionStrategyRequest: OptionsGetOptionStrategyRequest) -> RequestBuilder<StrategyQuotes> {
        var localVariablePath = "/accounts/{accountId}/optionStrategy"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: optionsGetOptionStrategyRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: SnapTradeAPI.partnerClientId)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: SnapTradeAPI.partnerSignature)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: SnapTradeAPI.partnerTimestamp)
            let localVariableRequestBuilder: RequestBuilder<StrategyQuotes>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to /snapTrade/registerUser POST")

    }

    /**
     Get the options chain
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to get the options chain from. 
     - parameter symbol: (query) Universal symbol ID if symbol 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOptionsChain(userId: String, userSecret: String, accountId: UUID, symbol: UUID, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [OptionChainInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return getOptionsChainWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, symbol: symbol).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the options chain
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to get the options chain from. 
     - parameter symbol: (query) Universal symbol ID if symbol 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getOptionsChainAsyncMappedParams(userId: String, userSecret: String, accountId: UUID, symbol: UUID) async throws -> [OptionChainInner] {
        return try await withCheckedThrowingContinuation { continuation in
            getOptionsChainWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, symbol: symbol).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get the options chain
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to get the options chain from. 
     - parameter symbol: (query) Universal symbol ID if symbol 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getOptionsChainAsync(
        userId: String,
        userSecret: String,
        accountId: UUID,
        symbol: UUID
    ) async throws -> [OptionChainInner] {
        return try await withCheckedThrowingContinuation { continuation in
            getOptionsChainWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, symbol: symbol).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Get the options chain
     - GET /accounts/{accountId}/optionsChain
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to get the options chain from. 
     - parameter symbol: (query) Universal symbol ID if symbol 
     - returns: RequestBuilder<[OptionChainInner]> 
     */
    open class func getOptionsChainWithRequestBuilder(userId: String, userSecret: String, accountId: UUID, symbol: UUID) -> RequestBuilder<[OptionChainInner]> {
        var localVariablePath = "/accounts/{accountId}/optionsChain"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
            "symbol": (wrappedValue: symbol.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: SnapTradeAPI.partnerClientId)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: SnapTradeAPI.partnerSignature)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: SnapTradeAPI.partnerTimestamp)
            let localVariableRequestBuilder: RequestBuilder<[OptionChainInner]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to /snapTrade/registerUser POST")

    }

    /**
     Get latest market data of option strategy
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account the strategy will be placed in. 
     - parameter optionStrategyId: (path) Option strategy id obtained from response when creating option strategy object 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOptionsStrategyQuote(userId: String, userSecret: String, accountId: UUID, optionStrategyId: UUID, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: StrategyQuotes?, _ error: Error?) -> Void)) -> RequestTask {
        return getOptionsStrategyQuoteWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, optionStrategyId: optionStrategyId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get latest market data of option strategy
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account the strategy will be placed in. 
     - parameter optionStrategyId: (path) Option strategy id obtained from response when creating option strategy object 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getOptionsStrategyQuoteAsyncMappedParams(userId: String, userSecret: String, accountId: UUID, optionStrategyId: UUID) async throws -> StrategyQuotes {
        return try await withCheckedThrowingContinuation { continuation in
            getOptionsStrategyQuoteWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, optionStrategyId: optionStrategyId).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get latest market data of option strategy
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account the strategy will be placed in. 
     - parameter optionStrategyId: (path) Option strategy id obtained from response when creating option strategy object 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getOptionsStrategyQuoteAsync(
        userId: String,
        userSecret: String,
        accountId: UUID,
        optionStrategyId: UUID
    ) async throws -> StrategyQuotes {
        return try await withCheckedThrowingContinuation { continuation in
            getOptionsStrategyQuoteWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, optionStrategyId: optionStrategyId).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Get latest market data of option strategy
     - GET /accounts/{accountId}/optionStrategy/{optionStrategyId}
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account the strategy will be placed in. 
     - parameter optionStrategyId: (path) Option strategy id obtained from response when creating option strategy object 
     - returns: RequestBuilder<StrategyQuotes> 
     */
    open class func getOptionsStrategyQuoteWithRequestBuilder(userId: String, userSecret: String, accountId: UUID, optionStrategyId: UUID) -> RequestBuilder<StrategyQuotes> {
        var localVariablePath = "/accounts/{accountId}/optionStrategy/{optionStrategyId}"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let optionStrategyIdPreEscape = "\(APIHelper.mapValueToPathItem(optionStrategyId))"
        let optionStrategyIdPostEscape = optionStrategyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{optionStrategyId}", with: optionStrategyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: SnapTradeAPI.partnerClientId)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: SnapTradeAPI.partnerSignature)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: SnapTradeAPI.partnerTimestamp)
            let localVariableRequestBuilder: RequestBuilder<StrategyQuotes>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to /snapTrade/registerUser POST")

    }

    /**
     Get the options holdings in the account
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to fetch options holdings for. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listOptionHoldings(userId: String, userSecret: String, accountId: UUID, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [OptionsPosition]?, _ error: Error?) -> Void)) -> RequestTask {
        return listOptionHoldingsWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the options holdings in the account
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to fetch options holdings for. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func listOptionHoldingsAsyncMappedParams(userId: String, userSecret: String, accountId: UUID) async throws -> [OptionsPosition] {
        return try await withCheckedThrowingContinuation { continuation in
            listOptionHoldingsWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get the options holdings in the account
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to fetch options holdings for. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func listOptionHoldingsAsync(
        userId: String,
        userSecret: String,
        accountId: UUID
    ) async throws -> [OptionsPosition] {
        return try await withCheckedThrowingContinuation { continuation in
            listOptionHoldingsWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Get the options holdings in the account
     - GET /accounts/{accountId}/options
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to fetch options holdings for. 
     - returns: RequestBuilder<[OptionsPosition]> 
     */
    open class func listOptionHoldingsWithRequestBuilder(userId: String, userSecret: String, accountId: UUID) -> RequestBuilder<[OptionsPosition]> {
        var localVariablePath = "/accounts/{accountId}/options"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: SnapTradeAPI.partnerClientId)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: SnapTradeAPI.partnerSignature)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: SnapTradeAPI.partnerTimestamp)
            let localVariableRequestBuilder: RequestBuilder<[OptionsPosition]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to /snapTrade/registerUser POST")

    }

    /**
     Place an option strategy order on the brokerage
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to execute the strategy in. 
     - parameter optionStrategyId: (path) Option strategy id obtained from response when creating option strategy object 
     - parameter optionsPlaceOptionStrategyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func placeOptionStrategy(userId: String, userSecret: String, accountId: UUID, optionStrategyId: UUID, optionsPlaceOptionStrategyRequest: OptionsPlaceOptionStrategyRequest, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: StrategyOrderRecord?, _ error: Error?) -> Void)) -> RequestTask {
        return placeOptionStrategyWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, optionStrategyId: optionStrategyId, optionsPlaceOptionStrategyRequest: optionsPlaceOptionStrategyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Place an option strategy order on the brokerage
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to execute the strategy in. 
     - parameter optionStrategyId: (path) Option strategy id obtained from response when creating option strategy object 
     - parameter optionsPlaceOptionStrategyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func placeOptionStrategyAsyncMappedParams(userId: String, userSecret: String, accountId: UUID, optionStrategyId: UUID, optionsPlaceOptionStrategyRequest: OptionsPlaceOptionStrategyRequest) async throws -> StrategyOrderRecord {
        return try await withCheckedThrowingContinuation { continuation in
            placeOptionStrategyWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, optionStrategyId: optionStrategyId, optionsPlaceOptionStrategyRequest: optionsPlaceOptionStrategyRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Place an option strategy order on the brokerage
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to execute the strategy in. 
     - parameter optionStrategyId: (path) Option strategy id obtained from response when creating option strategy object 
     - parameter optionsPlaceOptionStrategyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func placeOptionStrategyAsync(
        orderType: OrderType,
        timeInForce: TimeInForceStrict,
        userId: String,
        userSecret: String,
        accountId: UUID,
        optionStrategyId: UUID,
        price: Double? = nil
    ) async throws -> StrategyOrderRecord {
        let optionsPlaceOptionStrategyRequest = OptionsPlaceOptionStrategyRequest(
            orderType: orderType,
            timeInForce: timeInForce,
            price: price
        )
        return try await withCheckedThrowingContinuation { continuation in
            placeOptionStrategyWithRequestBuilder(userId: userId, userSecret: userSecret, accountId: accountId, optionStrategyId: optionStrategyId, optionsPlaceOptionStrategyRequest: optionsPlaceOptionStrategyRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Place an option strategy order on the brokerage
     - POST /accounts/{accountId}/optionStrategy/{optionStrategyId}/execute
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter accountId: (path) The ID of the account to execute the strategy in. 
     - parameter optionStrategyId: (path) Option strategy id obtained from response when creating option strategy object 
     - parameter optionsPlaceOptionStrategyRequest: (body)  
     - returns: RequestBuilder<StrategyOrderRecord> 
     */
    open class func placeOptionStrategyWithRequestBuilder(userId: String, userSecret: String, accountId: UUID, optionStrategyId: UUID, optionsPlaceOptionStrategyRequest: OptionsPlaceOptionStrategyRequest) -> RequestBuilder<StrategyOrderRecord> {
        var localVariablePath = "/accounts/{accountId}/optionStrategy/{optionStrategyId}/execute"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let optionStrategyIdPreEscape = "\(APIHelper.mapValueToPathItem(optionStrategyId))"
        let optionStrategyIdPostEscape = optionStrategyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{optionStrategyId}", with: optionStrategyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: optionsPlaceOptionStrategyRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "clientId", value: SnapTradeAPI.partnerClientId)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Signature", value: SnapTradeAPI.partnerSignature)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "query", name: "timestamp", value: SnapTradeAPI.partnerTimestamp)
            let localVariableRequestBuilder: RequestBuilder<StrategyOrderRecord>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to /snapTrade/registerUser POST")

    }
}
