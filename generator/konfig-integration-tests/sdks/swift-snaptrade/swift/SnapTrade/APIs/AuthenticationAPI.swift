//
// AuthenticationAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthenticationAPI {

    /**
     Delete SnapTrade user
     
     - parameter userId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteSnapTradeUser(userId: String, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: DeleteUserResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteSnapTradeUserWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete SnapTrade user
     
     - parameter userId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func deleteSnapTradeUserAsync(userId: String) async throws -> DeleteUserResponse {
        return try await withCheckedThrowingContinuation { continuation in
            deleteSnapTradeUserWithRequestBuilder(userId: userId).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Delete SnapTrade user
     - DELETE /snapTrade/deleteUser
     - Deletes a user you've registered over the SnapTrade API, and any data associated with them or their investment accounts.
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - returns: RequestBuilder<DeleteUserResponse> 
     */
    open class func deleteSnapTradeUserWithRequestBuilder(userId: String) -> RequestBuilder<DeleteUserResponse> {
        let localVariablePath = "/snapTrade/deleteUser"
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeleteUserResponse>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Generate encrypted JWT token
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserJWT(userId: String, userSecret: String, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: EncryptedResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserJWTWithRequestBuilder(userId: userId, userSecret: userSecret).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Generate encrypted JWT token
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getUserJWTAsync(userId: String, userSecret: String) async throws -> EncryptedResponse {
        return try await withCheckedThrowingContinuation { continuation in
            getUserJWTWithRequestBuilder(userId: userId, userSecret: userSecret).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Generate encrypted JWT token
     - GET /snapTrade/encryptedJWT
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - returns: RequestBuilder<EncryptedResponse> 
     */
    open class func getUserJWTWithRequestBuilder(userId: String, userSecret: String) -> RequestBuilder<EncryptedResponse> {
        let localVariablePath = "/snapTrade/encryptedJWT"
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EncryptedResponse>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List SnapTrade users
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listSnapTradeUsers(apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?, _ error: Error?) -> Void)) -> RequestTask {
        return listSnapTradeUsersWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List SnapTrade users
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func listSnapTradeUsersAsync() async throws -> [String] {
        return try await withCheckedThrowingContinuation { continuation in
            listSnapTradeUsersWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     List SnapTrade users
     - GET /snapTrade/listUsers
     - Returns a list of users you've registered over the SnapTrade API.
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - returns: RequestBuilder<[String]> 
     */
    open class func listSnapTradeUsersWithRequestBuilder() -> RequestBuilder<[String]> {
        let localVariablePath = "/snapTrade/listUsers"
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Login user & generate connection link
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter snapTradeLoginUserRequestBody: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func loginSnapTradeUser(userId: String, userSecret: String, snapTradeLoginUserRequestBody: SnapTradeLoginUserRequestBody? = nil, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticationLoginSnapTradeUser200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return loginSnapTradeUserWithRequestBuilder(userId: userId, userSecret: userSecret, snapTradeLoginUserRequestBody: snapTradeLoginUserRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Login user & generate connection link
     
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter snapTradeLoginUserRequestBody: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func loginSnapTradeUserAsync(userId: String, userSecret: String, snapTradeLoginUserRequestBody: SnapTradeLoginUserRequestBody? = nil) async throws -> AuthenticationLoginSnapTradeUser200Response {
        return try await withCheckedThrowingContinuation { continuation in
            loginSnapTradeUserWithRequestBuilder(userId: userId, userSecret: userSecret, snapTradeLoginUserRequestBody: snapTradeLoginUserRequestBody).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Login user & generate connection link
     - POST /snapTrade/login
     - Logs in a SnapTrade user and returns an authenticated connection portal URL for them to use to connect a brokerage account.
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userId: (query)  
     - parameter userSecret: (query)  
     - parameter snapTradeLoginUserRequestBody: (body)  (optional)
     - returns: RequestBuilder<AuthenticationLoginSnapTradeUser200Response> 
     */
    open class func loginSnapTradeUserWithRequestBuilder(userId: String, userSecret: String, snapTradeLoginUserRequestBody: SnapTradeLoginUserRequestBody? = nil) -> RequestBuilder<AuthenticationLoginSnapTradeUser200Response> {
        let localVariablePath = "/snapTrade/login"
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: snapTradeLoginUserRequestBody)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "userSecret": (wrappedValue: userSecret.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticationLoginSnapTradeUser200Response>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create SnapTrade user
     
     - parameter snapTradeRegisterUserRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func registerSnapTradeUser(snapTradeRegisterUserRequestBody: SnapTradeRegisterUserRequestBody, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: UserIDandSecret?, _ error: Error?) -> Void)) -> RequestTask {
        return registerSnapTradeUserWithRequestBuilder(snapTradeRegisterUserRequestBody: snapTradeRegisterUserRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create SnapTrade user
     
     - parameter snapTradeRegisterUserRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func registerSnapTradeUserAsyncMappedParams(snapTradeRegisterUserRequestBody: SnapTradeRegisterUserRequestBody) async throws -> UserIDandSecret {
        return try await withCheckedThrowingContinuation { continuation in
            registerSnapTradeUserWithRequestBuilder(snapTradeRegisterUserRequestBody: snapTradeRegisterUserRequestBody).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Create SnapTrade user
     
     - parameter snapTradeRegisterUserRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func registerSnapTradeUserAsync(userId: String?) async throws -> UserIDandSecret {
        let snapTradeRegisterUserRequestBody = SnapTradeRegisterUserRequestBody(userId: userId)
        return try await withCheckedThrowingContinuation { continuation in
            registerSnapTradeUserWithRequestBuilder(snapTradeRegisterUserRequestBody: snapTradeRegisterUserRequestBody).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Create SnapTrade user
     - POST /snapTrade/registerUser
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter snapTradeRegisterUserRequestBody: (body)  
     - returns: RequestBuilder<UserIDandSecret> 
     */
    open class func registerSnapTradeUserWithRequestBuilder(snapTradeRegisterUserRequestBody: SnapTradeRegisterUserRequestBody) -> RequestBuilder<UserIDandSecret> {
        let localVariablePath = "/snapTrade/registerUser"
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: snapTradeRegisterUserRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserIDandSecret>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Obtain a new user secret for a user
     
     - parameter userIDandSecret: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func resetSnapTradeUserSecret(userIDandSecret: UserIDandSecret, apiResponseQueue: DispatchQueue = SnapTradeAPI.apiResponseQueue, completion: @escaping ((_ data: UserIDandSecret?, _ error: Error?) -> Void)) -> RequestTask {
        return resetSnapTradeUserSecretWithRequestBuilder(userIDandSecret: userIDandSecret).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Obtain a new user secret for a user
     
     - parameter userIDandSecret: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func resetSnapTradeUserSecretAsync(userIDandSecret: UserIDandSecret) async throws -> UserIDandSecret {
        return try await withCheckedThrowingContinuation { continuation in
            resetSnapTradeUserSecretWithRequestBuilder(userIDandSecret: userIDandSecret).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Obtain a new user secret for a user
     - POST /snapTrade/resetUserSecret
     - API Key:
       - type: apiKey clientId (QUERY)
       - name: PartnerClientId
     - API Key:
       - type: apiKey Signature 
       - name: PartnerSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: PartnerTimestamp
     - parameter userIDandSecret: (body)  
     - returns: RequestBuilder<UserIDandSecret> 
     */
    open class func resetSnapTradeUserSecretWithRequestBuilder(userIDandSecret: UserIDandSecret) -> RequestBuilder<UserIDandSecret> {
        let localVariablePath = "/snapTrade/resetUserSecret"
        let localVariableURLString = SnapTradeAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userIDandSecret)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserIDandSecret>.Type = SnapTradeAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
