/* tslint:disable */
/* eslint-disable */
/*
NewsCatcher-V3 Production API

<img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>

The version of the OpenAPI document: 3.2.16
Contact: maksym@newscatcherapi.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DtoResponsesSearchResponseSearchResponse } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { SearchURLRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SearchLinkApi - axios parameter creator
 * @export
 */
export const SearchLinkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to search for articles. You can search for articles by id(s) or link(s).
         * @summary [Get] Search For Articles By Id Or Link
         * @param {any} [ids] 
         * @param {any} [links] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (ids?: any, links?: any, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/search_by_link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-token", keyParamName: "xApiToken", configuration })
            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (links !== undefined) {
                localVarQueryParameter['links'] = links;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/search_by_link',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to search for articles. You can search for articles by id(s) or link(s).
         * @summary [Post] Search For Articles Request
         * @param {SearchURLRequest} searchURLRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post: async (searchURLRequest: SearchURLRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchURLRequest' is not null or undefined
            assertParamExists('post', 'searchURLRequest', searchURLRequest)
            const localVarPath = `/api/search_by_link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-token", keyParamName: "xApiToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: searchURLRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/search_by_link',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(searchURLRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchLinkApi - functional programming interface
 * @export
 */
export const SearchLinkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchLinkApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to search for articles. You can search for articles by id(s) or link(s).
         * @summary [Get] Search For Articles By Id Or Link
         * @param {SearchLinkApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: SearchLinkApiGetRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtoResponsesSearchResponseSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.ids, requestParameters.links, requestParameters.page, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to search for articles. You can search for articles by id(s) or link(s).
         * @summary [Post] Search For Articles Request
         * @param {SearchLinkApiPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async post(requestParameters: SearchLinkApiPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtoResponsesSearchResponseSearchResponse>> {
            const searchURLRequest: SearchURLRequest = {
                ids: requestParameters.ids,
                links: requestParameters.links,
                page: requestParameters.page,
                page_size: requestParameters.page_size
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.post(searchURLRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchLinkApi - factory interface
 * @export
 */
export const SearchLinkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchLinkApiFp(configuration)
    return {
        /**
         * This endpoint allows you to search for articles. You can search for articles by id(s) or link(s).
         * @summary [Get] Search For Articles By Id Or Link
         * @param {SearchLinkApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: SearchLinkApiGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DtoResponsesSearchResponseSearchResponse> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to search for articles. You can search for articles by id(s) or link(s).
         * @summary [Post] Search For Articles Request
         * @param {SearchLinkApiPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post(requestParameters: SearchLinkApiPostRequest, options?: AxiosRequestConfig): AxiosPromise<DtoResponsesSearchResponseSearchResponse> {
            return localVarFp.post(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get operation in SearchLinkApi.
 * @export
 * @interface SearchLinkApiGetRequest
 */
export type SearchLinkApiGetRequest = {
    
    /**
    * 
    * @type {any}
    * @memberof SearchLinkApiGet
    */
    readonly ids?: any
    
    /**
    * 
    * @type {any}
    * @memberof SearchLinkApiGet
    */
    readonly links?: any
    
    /**
    * 
    * @type {number}
    * @memberof SearchLinkApiGet
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof SearchLinkApiGet
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for post operation in SearchLinkApi.
 * @export
 * @interface SearchLinkApiPostRequest
 */
export type SearchLinkApiPostRequest = {
    
} & SearchURLRequest

/**
 * SearchLinkApiGenerated - object-oriented interface
 * @export
 * @class SearchLinkApiGenerated
 * @extends {BaseAPI}
 */
export class SearchLinkApiGenerated extends BaseAPI {
    /**
     * This endpoint allows you to search for articles. You can search for articles by id(s) or link(s).
     * @summary [Get] Search For Articles By Id Or Link
     * @param {SearchLinkApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchLinkApiGenerated
     */
    public get(requestParameters: SearchLinkApiGetRequest = {}, options?: AxiosRequestConfig) {
        return paginate({
            initialParameters: requestParameters,
            request: (parameters: SearchLinkApiGetRequest) => {
                return SearchLinkApiFp(this.configuration).get(parameters, options).then((request) => request(this.axios, this.basePath));
            },
        });
    }

    /**
     * This endpoint allows you to search for articles. You can search for articles by id(s) or link(s).
     * @summary [Post] Search For Articles Request
     * @param {SearchLinkApiPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchLinkApiGenerated
     */
    public post(requestParameters: SearchLinkApiPostRequest, options?: AxiosRequestConfig) {
        return paginate({
            initialParameters: requestParameters,
            request: (parameters: SearchLinkApiPostRequest) => {
                return SearchLinkApiFp(this.configuration).post(parameters, options).then((request) => request(this.axios, this.basePath));
            },
        });
    }
}
