<?php
/**
 * ExternalSourceItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Carbon
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * Carbon
 *
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Carbon\Model;

use \ArrayAccess;
use \Carbon\ObjectSerializer;

/**
 * ExternalSourceItem Class Doc Comment
 *
 * @category Class
 * @package  Carbon
 * @implements \ArrayAccess<string, mixed>
 */
class ExternalSourceItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExternalSourceItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'external_id' => 'string',
        'source' => '\Carbon\Model\DataSourceType',
        'name' => 'string',
        'synced_at' => '\DateTime',
        'is_selectable' => 'bool',
        'is_expandable' => 'bool',
        'organization_id' => 'int',
        'organization_supplied_user_id' => 'string',
        'organization_user_id' => 'int',
        'organization_user_data_source_id' => 'int',
        'organization_user_file_to_sync_id' => 'int',
        'parent_external_id' => 'string',
        'item_type' => 'string',
        'root_external_id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'external_id' => null,
        'source' => null,
        'name' => null,
        'synced_at' => 'date-time',
        'is_selectable' => null,
        'is_expandable' => null,
        'organization_id' => null,
        'organization_supplied_user_id' => null,
        'organization_user_id' => null,
        'organization_user_data_source_id' => null,
        'organization_user_file_to_sync_id' => null,
        'parent_external_id' => null,
        'item_type' => null,
        'root_external_id' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'external_id' => false,
		'source' => false,
		'name' => false,
		'synced_at' => false,
		'is_selectable' => true,
		'is_expandable' => true,
		'organization_id' => false,
		'organization_supplied_user_id' => false,
		'organization_user_id' => false,
		'organization_user_data_source_id' => false,
		'organization_user_file_to_sync_id' => true,
		'parent_external_id' => true,
		'item_type' => true,
		'root_external_id' => true,
		'created_at' => false,
		'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'external_id' => 'external_id',
        'source' => 'source',
        'name' => 'name',
        'synced_at' => 'synced_at',
        'is_selectable' => 'is_selectable',
        'is_expandable' => 'is_expandable',
        'organization_id' => 'organization_id',
        'organization_supplied_user_id' => 'organization_supplied_user_id',
        'organization_user_id' => 'organization_user_id',
        'organization_user_data_source_id' => 'organization_user_data_source_id',
        'organization_user_file_to_sync_id' => 'organization_user_file_to_sync_id',
        'parent_external_id' => 'parent_external_id',
        'item_type' => 'item_type',
        'root_external_id' => 'root_external_id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'external_id' => 'setExternalId',
        'source' => 'setSource',
        'name' => 'setName',
        'synced_at' => 'setSyncedAt',
        'is_selectable' => 'setIsSelectable',
        'is_expandable' => 'setIsExpandable',
        'organization_id' => 'setOrganizationId',
        'organization_supplied_user_id' => 'setOrganizationSuppliedUserId',
        'organization_user_id' => 'setOrganizationUserId',
        'organization_user_data_source_id' => 'setOrganizationUserDataSourceId',
        'organization_user_file_to_sync_id' => 'setOrganizationUserFileToSyncId',
        'parent_external_id' => 'setParentExternalId',
        'item_type' => 'setItemType',
        'root_external_id' => 'setRootExternalId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'external_id' => 'getExternalId',
        'source' => 'getSource',
        'name' => 'getName',
        'synced_at' => 'getSyncedAt',
        'is_selectable' => 'getIsSelectable',
        'is_expandable' => 'getIsExpandable',
        'organization_id' => 'getOrganizationId',
        'organization_supplied_user_id' => 'getOrganizationSuppliedUserId',
        'organization_user_id' => 'getOrganizationUserId',
        'organization_user_data_source_id' => 'getOrganizationUserDataSourceId',
        'organization_user_file_to_sync_id' => 'getOrganizationUserFileToSyncId',
        'parent_external_id' => 'getParentExternalId',
        'item_type' => 'getItemType',
        'root_external_id' => 'getRootExternalId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('synced_at', $data ?? [], null);
        $this->setIfExists('is_selectable', $data ?? [], null);
        $this->setIfExists('is_expandable', $data ?? [], null);
        $this->setIfExists('organization_id', $data ?? [], null);
        $this->setIfExists('organization_supplied_user_id', $data ?? [], null);
        $this->setIfExists('organization_user_id', $data ?? [], null);
        $this->setIfExists('organization_user_data_source_id', $data ?? [], null);
        $this->setIfExists('organization_user_file_to_sync_id', $data ?? [], null);
        $this->setIfExists('parent_external_id', $data ?? [], null);
        $this->setIfExists('item_type', $data ?? [], null);
        $this->setIfExists('root_external_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['external_id'] === null) {
            $invalidProperties[] = "'external_id' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['synced_at'] === null) {
            $invalidProperties[] = "'synced_at' can't be null";
        }
        if ($this->container['is_selectable'] === null) {
            $invalidProperties[] = "'is_selectable' can't be null";
        }
        if ($this->container['is_expandable'] === null) {
            $invalidProperties[] = "'is_expandable' can't be null";
        }
        if ($this->container['organization_id'] === null) {
            $invalidProperties[] = "'organization_id' can't be null";
        }
        if ($this->container['organization_supplied_user_id'] === null) {
            $invalidProperties[] = "'organization_supplied_user_id' can't be null";
        }
        if ($this->container['organization_user_id'] === null) {
            $invalidProperties[] = "'organization_user_id' can't be null";
        }
        if ($this->container['organization_user_data_source_id'] === null) {
            $invalidProperties[] = "'organization_user_data_source_id' can't be null";
        }
        if ($this->container['organization_user_file_to_sync_id'] === null) {
            $invalidProperties[] = "'organization_user_file_to_sync_id' can't be null";
        }
        if ($this->container['parent_external_id'] === null) {
            $invalidProperties[] = "'parent_external_id' can't be null";
        }
        if ($this->container['item_type'] === null) {
            $invalidProperties[] = "'item_type' can't be null";
        }
        if ($this->container['root_external_id'] === null) {
            $invalidProperties[] = "'root_external_id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {

        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }

        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \Carbon\Model\DataSourceType
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \Carbon\Model\DataSourceType $source source
     *
     * @return self
     */
    public function setSource($source)
    {

        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }

        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets synced_at
     *
     * @return \DateTime
     */
    public function getSyncedAt()
    {
        return $this->container['synced_at'];
    }

    /**
     * Sets synced_at
     *
     * @param \DateTime $synced_at synced_at
     *
     * @return self
     */
    public function setSyncedAt($synced_at)
    {

        if (is_null($synced_at)) {
            throw new \InvalidArgumentException('non-nullable synced_at cannot be null');
        }

        $this->container['synced_at'] = $synced_at;

        return $this;
    }

    /**
     * Gets is_selectable
     *
     * @return bool
     */
    public function getIsSelectable()
    {
        return $this->container['is_selectable'];
    }

    /**
     * Sets is_selectable
     *
     * @param bool $is_selectable is_selectable
     *
     * @return self
     */
    public function setIsSelectable($is_selectable)
    {

        if (is_null($is_selectable)) {
            array_push($this->openAPINullablesSetToNull, 'is_selectable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_selectable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['is_selectable'] = $is_selectable;

        return $this;
    }

    /**
     * Gets is_expandable
     *
     * @return bool
     */
    public function getIsExpandable()
    {
        return $this->container['is_expandable'];
    }

    /**
     * Sets is_expandable
     *
     * @param bool $is_expandable is_expandable
     *
     * @return self
     */
    public function setIsExpandable($is_expandable)
    {

        if (is_null($is_expandable)) {
            array_push($this->openAPINullablesSetToNull, 'is_expandable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_expandable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['is_expandable'] = $is_expandable;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return int
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param int $organization_id organization_id
     *
     * @return self
     */
    public function setOrganizationId($organization_id)
    {

        if (is_null($organization_id)) {
            throw new \InvalidArgumentException('non-nullable organization_id cannot be null');
        }

        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets organization_supplied_user_id
     *
     * @return string
     */
    public function getOrganizationSuppliedUserId()
    {
        return $this->container['organization_supplied_user_id'];
    }

    /**
     * Sets organization_supplied_user_id
     *
     * @param string $organization_supplied_user_id organization_supplied_user_id
     *
     * @return self
     */
    public function setOrganizationSuppliedUserId($organization_supplied_user_id)
    {

        if (is_null($organization_supplied_user_id)) {
            throw new \InvalidArgumentException('non-nullable organization_supplied_user_id cannot be null');
        }

        $this->container['organization_supplied_user_id'] = $organization_supplied_user_id;

        return $this;
    }

    /**
     * Gets organization_user_id
     *
     * @return int
     */
    public function getOrganizationUserId()
    {
        return $this->container['organization_user_id'];
    }

    /**
     * Sets organization_user_id
     *
     * @param int $organization_user_id organization_user_id
     *
     * @return self
     */
    public function setOrganizationUserId($organization_user_id)
    {

        if (is_null($organization_user_id)) {
            throw new \InvalidArgumentException('non-nullable organization_user_id cannot be null');
        }

        $this->container['organization_user_id'] = $organization_user_id;

        return $this;
    }

    /**
     * Gets organization_user_data_source_id
     *
     * @return int
     */
    public function getOrganizationUserDataSourceId()
    {
        return $this->container['organization_user_data_source_id'];
    }

    /**
     * Sets organization_user_data_source_id
     *
     * @param int $organization_user_data_source_id organization_user_data_source_id
     *
     * @return self
     */
    public function setOrganizationUserDataSourceId($organization_user_data_source_id)
    {

        if (is_null($organization_user_data_source_id)) {
            throw new \InvalidArgumentException('non-nullable organization_user_data_source_id cannot be null');
        }

        $this->container['organization_user_data_source_id'] = $organization_user_data_source_id;

        return $this;
    }

    /**
     * Gets organization_user_file_to_sync_id
     *
     * @return int
     */
    public function getOrganizationUserFileToSyncId()
    {
        return $this->container['organization_user_file_to_sync_id'];
    }

    /**
     * Sets organization_user_file_to_sync_id
     *
     * @param int $organization_user_file_to_sync_id organization_user_file_to_sync_id
     *
     * @return self
     */
    public function setOrganizationUserFileToSyncId($organization_user_file_to_sync_id)
    {

        if (is_null($organization_user_file_to_sync_id)) {
            array_push($this->openAPINullablesSetToNull, 'organization_user_file_to_sync_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_user_file_to_sync_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['organization_user_file_to_sync_id'] = $organization_user_file_to_sync_id;

        return $this;
    }

    /**
     * Gets parent_external_id
     *
     * @return string
     */
    public function getParentExternalId()
    {
        return $this->container['parent_external_id'];
    }

    /**
     * Sets parent_external_id
     *
     * @param string $parent_external_id parent_external_id
     *
     * @return self
     */
    public function setParentExternalId($parent_external_id)
    {

        if (is_null($parent_external_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_external_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_external_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['parent_external_id'] = $parent_external_id;

        return $this;
    }

    /**
     * Gets item_type
     *
     * @return string
     */
    public function getItemType()
    {
        return $this->container['item_type'];
    }

    /**
     * Sets item_type
     *
     * @param string $item_type item_type
     *
     * @return self
     */
    public function setItemType($item_type)
    {

        if (is_null($item_type)) {
            array_push($this->openAPINullablesSetToNull, 'item_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['item_type'] = $item_type;

        return $this;
    }

    /**
     * Gets root_external_id
     *
     * @return string
     */
    public function getRootExternalId()
    {
        return $this->container['root_external_id'];
    }

    /**
     * Sets root_external_id
     *
     * @param string $root_external_id root_external_id
     *
     * @return self
     */
    public function setRootExternalId($root_external_id)
    {

        if (is_null($root_external_id)) {
            array_push($this->openAPINullablesSetToNull, 'root_external_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('root_external_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['root_external_id'] = $root_external_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {

        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }

        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {

        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }

        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


