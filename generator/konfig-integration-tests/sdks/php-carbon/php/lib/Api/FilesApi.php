<?php
/**
 * FilesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Carbon
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * Carbon
 *
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Carbon\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\BodySummarizer;
use GuzzleHttp\Middleware;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Utils;
use Carbon\ApiException;
use Carbon\Configuration;
use Carbon\HeaderSelector;
use Carbon\ObjectSerializer;

class FilesApi extends \Carbon\CustomApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createUserFileTags' => [
            'application/json',
        ],
        'delete' => [
            'application/json',
        ],
        'deleteFileTags' => [
            'application/json',
        ],
        'deleteMany' => [
            'application/json',
        ],
        'getParsedFile' => [
            'application/json',
        ],
        'getRawFile' => [
            'application/json',
        ],
        'queryUserFiles' => [
            'application/json',
        ],
        'queryUserFilesDeprecated' => [
            'application/json',
        ],
        'resync' => [
            'application/json',
        ],
        'upload' => [
            'multipart/form-data',
        ],
        'uploadFromUrl' => [
            'application/json',
        ],
        'uploadText' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config = null,
        ClientInterface $client = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $clientOptions = [];
        if (!$config->getVerifySsl()) $clientOptions["verify"] = false;

        // Do not truncate error messages
        // https://github.com/guzzle/guzzle/issues/2185#issuecomment-800293420
        $stack = new HandlerStack(Utils::chooseHandler());
        $stack->push(Middleware::httpErrors(new BodySummarizer(10000)), 'http_errors');
        $stack->push(Middleware::redirect(), 'allow_redirects');
        $stack->push(Middleware::cookies(), 'cookies');
        $stack->push(Middleware::prepareBody(), 'prepare_body');
        $clientOptions["handler"] = $stack;

        $this->client = $client ?: new Client($clientOptions);
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * For initializing request body parameter
     */
    private function setRequestBodyProperty(&$body, $property, $value) {
        if ($body === null) $body = [];
        // user did not pass in a value for this parameter
        if ($value === SENTINEL_VALUE) return;
        $body[$property] = $value;
    }

    /**
     * Operation createUserFileTags
     *
     * Create File Tags
     *
     * @param  \Carbon\Model\OrganizationUserFileTagCreate $organization_user_file_tag_create organization_user_file_tag_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUserFileTags'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\UserFile|\Carbon\Model\HTTPValidationError
     */
    public function createUserFileTags(

        $tags,
        $organization_user_file_id,
        string $contentType = self::contentTypes['createUserFileTags'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "organization_user_file_id", $organization_user_file_id);
        $organization_user_file_tag_create = $_body;

        list($response) = $this->createUserFileTagsWithHttpInfo($organization_user_file_tag_create, $contentType);
        return $response;
    }

    /**
     * Operation createUserFileTagsWithHttpInfo
     *
     * Create File Tags
     *
     * @param  \Carbon\Model\OrganizationUserFileTagCreate $organization_user_file_tag_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUserFileTags'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\UserFile|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUserFileTagsWithHttpInfo($organization_user_file_tag_create, string $contentType = self::contentTypes['createUserFileTags'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->createUserFileTagsRequest($organization_user_file_tag_create, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->createUserFileTagsWithHttpInfo(
                        $organization_user_file_tag_create,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\UserFile' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\UserFile' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\UserFile', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\UserFile';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\UserFile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createUserFileTagsAsync
     *
     * Create File Tags
     *
     * @param  \Carbon\Model\OrganizationUserFileTagCreate $organization_user_file_tag_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUserFileTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUserFileTagsAsync(

        $tags,
        $organization_user_file_id,
        string $contentType = self::contentTypes['createUserFileTags'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "organization_user_file_id", $organization_user_file_id);
        $organization_user_file_tag_create = $_body;

        return $this->createUserFileTagsAsyncWithHttpInfo($organization_user_file_tag_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createUserFileTagsAsyncWithHttpInfo
     *
     * Create File Tags
     *
     * @param  \Carbon\Model\OrganizationUserFileTagCreate $organization_user_file_tag_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUserFileTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUserFileTagsAsyncWithHttpInfo($organization_user_file_tag_create, string $contentType = self::contentTypes['createUserFileTags'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\UserFile';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->createUserFileTagsRequest($organization_user_file_tag_create, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createUserFileTags'
     *
     * @param  \Carbon\Model\OrganizationUserFileTagCreate $organization_user_file_tag_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUserFileTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createUserFileTagsRequest($organization_user_file_tag_create, string $contentType = self::contentTypes['createUserFileTags'][0])
    {

        if ($organization_user_file_tag_create !== SENTINEL_VALUE) {
            if (!($organization_user_file_tag_create instanceof \Carbon\Model\OrganizationUserFileTagCreate)) {
                if (!is_array($organization_user_file_tag_create))
                    throw new \InvalidArgumentException('"organization_user_file_tag_create" must be associative array or an instance of \Carbon\Model\OrganizationUserFileTagCreate FilesApi.createUserFileTags.');
                else
                    $organization_user_file_tag_create = new \Carbon\Model\OrganizationUserFileTagCreate($organization_user_file_tag_create);
            }
        }
        // verify the required parameter 'organization_user_file_tag_create' is set
        if ($organization_user_file_tag_create === SENTINEL_VALUE || (is_array($organization_user_file_tag_create) && count($organization_user_file_tag_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter organization_user_file_tag_create when calling createUserFileTags'
            );
        }


        $resourcePath = '/create_user_file_tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($organization_user_file_tag_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($organization_user_file_tag_create));
            } else {
                $httpBody = $organization_user_file_tag_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation delete
     *
     * Delete File Endpoint
     *
     * @param  int $file_id file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delete'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError
     */
    public function delete(
        $file_id,

        string $contentType = self::contentTypes['delete'][0]
    )
    {

        list($response) = $this->deleteWithHttpInfo($file_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteWithHttpInfo
     *
     * Delete File Endpoint
     *
     * @param  int $file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delete'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWithHttpInfo($file_id, string $contentType = self::contentTypes['delete'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->deleteRequest($file_id, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->deleteWithHttpInfo(
                        $file_id,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\GenericSuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\GenericSuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\GenericSuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\GenericSuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\GenericSuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAsync
     *
     * Delete File Endpoint
     *
     * @param  int $file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAsync(
        $file_id,

        string $contentType = self::contentTypes['delete'][0]
    )
    {

        return $this->deleteAsyncWithHttpInfo($file_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAsyncWithHttpInfo
     *
     * Delete File Endpoint
     *
     * @param  int $file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAsyncWithHttpInfo($file_id, string $contentType = self::contentTypes['delete'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\GenericSuccessResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->deleteRequest($file_id, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'delete'
     *
     * @param  int $file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRequest($file_id, string $contentType = self::contentTypes['delete'][0])
    {

        // verify the required parameter 'file_id' is set
        if ($file_id === SENTINEL_VALUE || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter file_id when calling delete'
            );
        }


        $resourcePath = '/deletefile/{file_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($file_id !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'file_id' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'DELETE';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation deleteFileTags
     *
     * Delete File Tags
     *
     * @param  \Carbon\Model\OrganizationUserFileTagsRemove $organization_user_file_tags_remove organization_user_file_tags_remove (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileTags'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\UserFile|\Carbon\Model\HTTPValidationError
     */
    public function deleteFileTags(

        $tags,
        $organization_user_file_id,
        string $contentType = self::contentTypes['deleteFileTags'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "organization_user_file_id", $organization_user_file_id);
        $organization_user_file_tags_remove = $_body;

        list($response) = $this->deleteFileTagsWithHttpInfo($organization_user_file_tags_remove, $contentType);
        return $response;
    }

    /**
     * Operation deleteFileTagsWithHttpInfo
     *
     * Delete File Tags
     *
     * @param  \Carbon\Model\OrganizationUserFileTagsRemove $organization_user_file_tags_remove (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileTags'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\UserFile|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFileTagsWithHttpInfo($organization_user_file_tags_remove, string $contentType = self::contentTypes['deleteFileTags'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->deleteFileTagsRequest($organization_user_file_tags_remove, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->deleteFileTagsWithHttpInfo(
                        $organization_user_file_tags_remove,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\UserFile' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\UserFile' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\UserFile', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\UserFile';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\UserFile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFileTagsAsync
     *
     * Delete File Tags
     *
     * @param  \Carbon\Model\OrganizationUserFileTagsRemove $organization_user_file_tags_remove (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFileTagsAsync(

        $tags,
        $organization_user_file_id,
        string $contentType = self::contentTypes['deleteFileTags'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "tags", $tags);
        $this->setRequestBodyProperty($_body, "organization_user_file_id", $organization_user_file_id);
        $organization_user_file_tags_remove = $_body;

        return $this->deleteFileTagsAsyncWithHttpInfo($organization_user_file_tags_remove, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFileTagsAsyncWithHttpInfo
     *
     * Delete File Tags
     *
     * @param  \Carbon\Model\OrganizationUserFileTagsRemove $organization_user_file_tags_remove (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFileTagsAsyncWithHttpInfo($organization_user_file_tags_remove, string $contentType = self::contentTypes['deleteFileTags'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\UserFile';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->deleteFileTagsRequest($organization_user_file_tags_remove, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFileTags'
     *
     * @param  \Carbon\Model\OrganizationUserFileTagsRemove $organization_user_file_tags_remove (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFileTagsRequest($organization_user_file_tags_remove, string $contentType = self::contentTypes['deleteFileTags'][0])
    {

        if ($organization_user_file_tags_remove !== SENTINEL_VALUE) {
            if (!($organization_user_file_tags_remove instanceof \Carbon\Model\OrganizationUserFileTagsRemove)) {
                if (!is_array($organization_user_file_tags_remove))
                    throw new \InvalidArgumentException('"organization_user_file_tags_remove" must be associative array or an instance of \Carbon\Model\OrganizationUserFileTagsRemove FilesApi.deleteFileTags.');
                else
                    $organization_user_file_tags_remove = new \Carbon\Model\OrganizationUserFileTagsRemove($organization_user_file_tags_remove);
            }
        }
        // verify the required parameter 'organization_user_file_tags_remove' is set
        if ($organization_user_file_tags_remove === SENTINEL_VALUE || (is_array($organization_user_file_tags_remove) && count($organization_user_file_tags_remove) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter organization_user_file_tags_remove when calling deleteFileTags'
            );
        }


        $resourcePath = '/delete_user_file_tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($organization_user_file_tags_remove)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($organization_user_file_tags_remove));
            } else {
                $httpBody = $organization_user_file_tags_remove;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation deleteMany
     *
     * Delete Files Endpoint
     *
     * @param  \Carbon\Model\DeleteFilesQueryInput $delete_files_query_input delete_files_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMany'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError
     */
    public function deleteMany(

        $file_ids = SENTINEL_VALUE,
        $sync_statuses = SENTINEL_VALUE,
        $delete_non_synced_only = false,
        $send_webhook = false,
        string $contentType = self::contentTypes['deleteMany'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "file_ids", $file_ids);
        $this->setRequestBodyProperty($_body, "sync_statuses", $sync_statuses);
        $this->setRequestBodyProperty($_body, "delete_non_synced_only", $delete_non_synced_only);
        $this->setRequestBodyProperty($_body, "send_webhook", $send_webhook);
        $delete_files_query_input = $_body;

        list($response) = $this->deleteManyWithHttpInfo($delete_files_query_input, $contentType);
        return $response;
    }

    /**
     * Operation deleteManyWithHttpInfo
     *
     * Delete Files Endpoint
     *
     * @param  \Carbon\Model\DeleteFilesQueryInput $delete_files_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMany'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteManyWithHttpInfo($delete_files_query_input, string $contentType = self::contentTypes['deleteMany'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->deleteManyRequest($delete_files_query_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->deleteManyWithHttpInfo(
                        $delete_files_query_input,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\GenericSuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\GenericSuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\GenericSuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\GenericSuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\GenericSuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteManyAsync
     *
     * Delete Files Endpoint
     *
     * @param  \Carbon\Model\DeleteFilesQueryInput $delete_files_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMany'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteManyAsync(

        $file_ids = SENTINEL_VALUE,
        $sync_statuses = SENTINEL_VALUE,
        $delete_non_synced_only = false,
        $send_webhook = false,
        string $contentType = self::contentTypes['deleteMany'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "file_ids", $file_ids);
        $this->setRequestBodyProperty($_body, "sync_statuses", $sync_statuses);
        $this->setRequestBodyProperty($_body, "delete_non_synced_only", $delete_non_synced_only);
        $this->setRequestBodyProperty($_body, "send_webhook", $send_webhook);
        $delete_files_query_input = $_body;

        return $this->deleteManyAsyncWithHttpInfo($delete_files_query_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteManyAsyncWithHttpInfo
     *
     * Delete Files Endpoint
     *
     * @param  \Carbon\Model\DeleteFilesQueryInput $delete_files_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMany'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteManyAsyncWithHttpInfo($delete_files_query_input, string $contentType = self::contentTypes['deleteMany'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\GenericSuccessResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->deleteManyRequest($delete_files_query_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMany'
     *
     * @param  \Carbon\Model\DeleteFilesQueryInput $delete_files_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMany'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteManyRequest($delete_files_query_input, string $contentType = self::contentTypes['deleteMany'][0])
    {

        if ($delete_files_query_input !== SENTINEL_VALUE) {
            if (!($delete_files_query_input instanceof \Carbon\Model\DeleteFilesQueryInput)) {
                if (!is_array($delete_files_query_input))
                    throw new \InvalidArgumentException('"delete_files_query_input" must be associative array or an instance of \Carbon\Model\DeleteFilesQueryInput FilesApi.deleteMany.');
                else
                    $delete_files_query_input = new \Carbon\Model\DeleteFilesQueryInput($delete_files_query_input);
            }
        }
        // verify the required parameter 'delete_files_query_input' is set
        if ($delete_files_query_input === SENTINEL_VALUE || (is_array($delete_files_query_input) && count($delete_files_query_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter delete_files_query_input when calling deleteMany'
            );
        }


        $resourcePath = '/delete_files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($delete_files_query_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($delete_files_query_input));
            } else {
                $httpBody = $delete_files_query_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation getParsedFile
     *
     * Parsed File
     *
     * @param  int $file_id file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParsedFile'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\PresignedURLResponse|\Carbon\Model\HTTPValidationError
     * @deprecated
     */
    public function getParsedFile(
        $file_id,

        string $contentType = self::contentTypes['getParsedFile'][0]
    )
    {

        list($response) = $this->getParsedFileWithHttpInfo($file_id, $contentType);
        return $response;
    }

    /**
     * Operation getParsedFileWithHttpInfo
     *
     * Parsed File
     *
     * @param  int $file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParsedFile'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\PresignedURLResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getParsedFileWithHttpInfo($file_id, string $contentType = self::contentTypes['getParsedFile'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getParsedFileRequest($file_id, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->getParsedFileWithHttpInfo(
                        $file_id,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\PresignedURLResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\PresignedURLResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\PresignedURLResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\PresignedURLResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\PresignedURLResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParsedFileAsync
     *
     * Parsed File
     *
     * @param  int $file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParsedFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getParsedFileAsync(
        $file_id,

        string $contentType = self::contentTypes['getParsedFile'][0]
    )
    {

        return $this->getParsedFileAsyncWithHttpInfo($file_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParsedFileAsyncWithHttpInfo
     *
     * Parsed File
     *
     * @param  int $file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParsedFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getParsedFileAsyncWithHttpInfo($file_id, string $contentType = self::contentTypes['getParsedFile'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\PresignedURLResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getParsedFileRequest($file_id, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParsedFile'
     *
     * @param  int $file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getParsedFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getParsedFileRequest($file_id, string $contentType = self::contentTypes['getParsedFile'][0])
    {

        // verify the required parameter 'file_id' is set
        if ($file_id === SENTINEL_VALUE || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter file_id when calling getParsedFile'
            );
        }


        $resourcePath = '/parsed_file/{file_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($file_id !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'file_id' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation getRawFile
     *
     * Raw File
     *
     * @param  int $file_id file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRawFile'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\PresignedURLResponse|\Carbon\Model\HTTPValidationError
     * @deprecated
     */
    public function getRawFile(
        $file_id,

        string $contentType = self::contentTypes['getRawFile'][0]
    )
    {

        list($response) = $this->getRawFileWithHttpInfo($file_id, $contentType);
        return $response;
    }

    /**
     * Operation getRawFileWithHttpInfo
     *
     * Raw File
     *
     * @param  int $file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRawFile'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\PresignedURLResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getRawFileWithHttpInfo($file_id, string $contentType = self::contentTypes['getRawFile'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getRawFileRequest($file_id, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->getRawFileWithHttpInfo(
                        $file_id,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\PresignedURLResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\PresignedURLResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\PresignedURLResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\PresignedURLResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\PresignedURLResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRawFileAsync
     *
     * Raw File
     *
     * @param  int $file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRawFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getRawFileAsync(
        $file_id,

        string $contentType = self::contentTypes['getRawFile'][0]
    )
    {

        return $this->getRawFileAsyncWithHttpInfo($file_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRawFileAsyncWithHttpInfo
     *
     * Raw File
     *
     * @param  int $file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRawFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getRawFileAsyncWithHttpInfo($file_id, string $contentType = self::contentTypes['getRawFile'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\PresignedURLResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getRawFileRequest($file_id, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRawFile'
     *
     * @param  int $file_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRawFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getRawFileRequest($file_id, string $contentType = self::contentTypes['getRawFile'][0])
    {

        // verify the required parameter 'file_id' is set
        if ($file_id === SENTINEL_VALUE || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter file_id when calling getRawFile'
            );
        }


        $resourcePath = '/raw_file/{file_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($file_id !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'file_id' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation queryUserFiles
     *
     * User Files V2
     *
     * @param  \Carbon\Model\OrganizationUserFilesToSyncQueryInput $organization_user_files_to_sync_query_input organization_user_files_to_sync_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserFiles'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\UserFilesV2|\Carbon\Model\HTTPValidationError
     */
    public function queryUserFiles(

        $pagination = SENTINEL_VALUE,
        $order_by = SENTINEL_VALUE,
        $order_dir = SENTINEL_VALUE,
        $filters = SENTINEL_VALUE,
        $include_raw_file = SENTINEL_VALUE,
        $include_parsed_text_file = SENTINEL_VALUE,
        $include_additional_files = SENTINEL_VALUE,
        string $contentType = self::contentTypes['queryUserFiles'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "pagination", $pagination);
        $this->setRequestBodyProperty($_body, "order_by", $order_by);
        $this->setRequestBodyProperty($_body, "order_dir", $order_dir);
        $this->setRequestBodyProperty($_body, "filters", $filters);
        $this->setRequestBodyProperty($_body, "include_raw_file", $include_raw_file);
        $this->setRequestBodyProperty($_body, "include_parsed_text_file", $include_parsed_text_file);
        $this->setRequestBodyProperty($_body, "include_additional_files", $include_additional_files);
        $organization_user_files_to_sync_query_input = $_body;

        list($response) = $this->queryUserFilesWithHttpInfo($organization_user_files_to_sync_query_input, $contentType);
        return $response;
    }

    /**
     * Operation queryUserFilesWithHttpInfo
     *
     * User Files V2
     *
     * @param  \Carbon\Model\OrganizationUserFilesToSyncQueryInput $organization_user_files_to_sync_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserFiles'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\UserFilesV2|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryUserFilesWithHttpInfo($organization_user_files_to_sync_query_input, string $contentType = self::contentTypes['queryUserFiles'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->queryUserFilesRequest($organization_user_files_to_sync_query_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->queryUserFilesWithHttpInfo(
                        $organization_user_files_to_sync_query_input,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\UserFilesV2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\UserFilesV2' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\UserFilesV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\UserFilesV2';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\UserFilesV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryUserFilesAsync
     *
     * User Files V2
     *
     * @param  \Carbon\Model\OrganizationUserFilesToSyncQueryInput $organization_user_files_to_sync_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryUserFilesAsync(

        $pagination = SENTINEL_VALUE,
        $order_by = SENTINEL_VALUE,
        $order_dir = SENTINEL_VALUE,
        $filters = SENTINEL_VALUE,
        $include_raw_file = SENTINEL_VALUE,
        $include_parsed_text_file = SENTINEL_VALUE,
        $include_additional_files = SENTINEL_VALUE,
        string $contentType = self::contentTypes['queryUserFiles'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "pagination", $pagination);
        $this->setRequestBodyProperty($_body, "order_by", $order_by);
        $this->setRequestBodyProperty($_body, "order_dir", $order_dir);
        $this->setRequestBodyProperty($_body, "filters", $filters);
        $this->setRequestBodyProperty($_body, "include_raw_file", $include_raw_file);
        $this->setRequestBodyProperty($_body, "include_parsed_text_file", $include_parsed_text_file);
        $this->setRequestBodyProperty($_body, "include_additional_files", $include_additional_files);
        $organization_user_files_to_sync_query_input = $_body;

        return $this->queryUserFilesAsyncWithHttpInfo($organization_user_files_to_sync_query_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryUserFilesAsyncWithHttpInfo
     *
     * User Files V2
     *
     * @param  \Carbon\Model\OrganizationUserFilesToSyncQueryInput $organization_user_files_to_sync_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryUserFilesAsyncWithHttpInfo($organization_user_files_to_sync_query_input, string $contentType = self::contentTypes['queryUserFiles'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\UserFilesV2';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->queryUserFilesRequest($organization_user_files_to_sync_query_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryUserFiles'
     *
     * @param  \Carbon\Model\OrganizationUserFilesToSyncQueryInput $organization_user_files_to_sync_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryUserFilesRequest($organization_user_files_to_sync_query_input, string $contentType = self::contentTypes['queryUserFiles'][0])
    {

        if ($organization_user_files_to_sync_query_input !== SENTINEL_VALUE) {
            if (!($organization_user_files_to_sync_query_input instanceof \Carbon\Model\OrganizationUserFilesToSyncQueryInput)) {
                if (!is_array($organization_user_files_to_sync_query_input))
                    throw new \InvalidArgumentException('"organization_user_files_to_sync_query_input" must be associative array or an instance of \Carbon\Model\OrganizationUserFilesToSyncQueryInput FilesApi.queryUserFiles.');
                else
                    $organization_user_files_to_sync_query_input = new \Carbon\Model\OrganizationUserFilesToSyncQueryInput($organization_user_files_to_sync_query_input);
            }
        }
        // verify the required parameter 'organization_user_files_to_sync_query_input' is set
        if ($organization_user_files_to_sync_query_input === SENTINEL_VALUE || (is_array($organization_user_files_to_sync_query_input) && count($organization_user_files_to_sync_query_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter organization_user_files_to_sync_query_input when calling queryUserFiles'
            );
        }


        $resourcePath = '/user_files_v2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($organization_user_files_to_sync_query_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($organization_user_files_to_sync_query_input));
            } else {
                $httpBody = $organization_user_files_to_sync_query_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation queryUserFilesDeprecated
     *
     * User Files
     *
     * @param  \Carbon\Model\OrganizationUserFilesToSyncQueryInput $organization_user_files_to_sync_query_input organization_user_files_to_sync_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserFilesDeprecated'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\UserFile[]|\Carbon\Model\HTTPValidationError
     * @deprecated
     */
    public function queryUserFilesDeprecated(

        $pagination = SENTINEL_VALUE,
        $order_by = SENTINEL_VALUE,
        $order_dir = SENTINEL_VALUE,
        $filters = SENTINEL_VALUE,
        $include_raw_file = SENTINEL_VALUE,
        $include_parsed_text_file = SENTINEL_VALUE,
        $include_additional_files = SENTINEL_VALUE,
        string $contentType = self::contentTypes['queryUserFilesDeprecated'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "pagination", $pagination);
        $this->setRequestBodyProperty($_body, "order_by", $order_by);
        $this->setRequestBodyProperty($_body, "order_dir", $order_dir);
        $this->setRequestBodyProperty($_body, "filters", $filters);
        $this->setRequestBodyProperty($_body, "include_raw_file", $include_raw_file);
        $this->setRequestBodyProperty($_body, "include_parsed_text_file", $include_parsed_text_file);
        $this->setRequestBodyProperty($_body, "include_additional_files", $include_additional_files);
        $organization_user_files_to_sync_query_input = $_body;

        list($response) = $this->queryUserFilesDeprecatedWithHttpInfo($organization_user_files_to_sync_query_input, $contentType);
        return $response;
    }

    /**
     * Operation queryUserFilesDeprecatedWithHttpInfo
     *
     * User Files
     *
     * @param  \Carbon\Model\OrganizationUserFilesToSyncQueryInput $organization_user_files_to_sync_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserFilesDeprecated'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\UserFile[]|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function queryUserFilesDeprecatedWithHttpInfo($organization_user_files_to_sync_query_input, string $contentType = self::contentTypes['queryUserFilesDeprecated'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->queryUserFilesDeprecatedRequest($organization_user_files_to_sync_query_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->queryUserFilesDeprecatedWithHttpInfo(
                        $organization_user_files_to_sync_query_input,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\UserFile[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\UserFile[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\UserFile[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\UserFile[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\UserFile[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryUserFilesDeprecatedAsync
     *
     * User Files
     *
     * @param  \Carbon\Model\OrganizationUserFilesToSyncQueryInput $organization_user_files_to_sync_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserFilesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function queryUserFilesDeprecatedAsync(

        $pagination = SENTINEL_VALUE,
        $order_by = SENTINEL_VALUE,
        $order_dir = SENTINEL_VALUE,
        $filters = SENTINEL_VALUE,
        $include_raw_file = SENTINEL_VALUE,
        $include_parsed_text_file = SENTINEL_VALUE,
        $include_additional_files = SENTINEL_VALUE,
        string $contentType = self::contentTypes['queryUserFilesDeprecated'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "pagination", $pagination);
        $this->setRequestBodyProperty($_body, "order_by", $order_by);
        $this->setRequestBodyProperty($_body, "order_dir", $order_dir);
        $this->setRequestBodyProperty($_body, "filters", $filters);
        $this->setRequestBodyProperty($_body, "include_raw_file", $include_raw_file);
        $this->setRequestBodyProperty($_body, "include_parsed_text_file", $include_parsed_text_file);
        $this->setRequestBodyProperty($_body, "include_additional_files", $include_additional_files);
        $organization_user_files_to_sync_query_input = $_body;

        return $this->queryUserFilesDeprecatedAsyncWithHttpInfo($organization_user_files_to_sync_query_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryUserFilesDeprecatedAsyncWithHttpInfo
     *
     * User Files
     *
     * @param  \Carbon\Model\OrganizationUserFilesToSyncQueryInput $organization_user_files_to_sync_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserFilesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function queryUserFilesDeprecatedAsyncWithHttpInfo($organization_user_files_to_sync_query_input, string $contentType = self::contentTypes['queryUserFilesDeprecated'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\UserFile[]';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->queryUserFilesDeprecatedRequest($organization_user_files_to_sync_query_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryUserFilesDeprecated'
     *
     * @param  \Carbon\Model\OrganizationUserFilesToSyncQueryInput $organization_user_files_to_sync_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserFilesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function queryUserFilesDeprecatedRequest($organization_user_files_to_sync_query_input, string $contentType = self::contentTypes['queryUserFilesDeprecated'][0])
    {

        if ($organization_user_files_to_sync_query_input !== SENTINEL_VALUE) {
            if (!($organization_user_files_to_sync_query_input instanceof \Carbon\Model\OrganizationUserFilesToSyncQueryInput)) {
                if (!is_array($organization_user_files_to_sync_query_input))
                    throw new \InvalidArgumentException('"organization_user_files_to_sync_query_input" must be associative array or an instance of \Carbon\Model\OrganizationUserFilesToSyncQueryInput FilesApi.queryUserFilesDeprecated.');
                else
                    $organization_user_files_to_sync_query_input = new \Carbon\Model\OrganizationUserFilesToSyncQueryInput($organization_user_files_to_sync_query_input);
            }
        }
        // verify the required parameter 'organization_user_files_to_sync_query_input' is set
        if ($organization_user_files_to_sync_query_input === SENTINEL_VALUE || (is_array($organization_user_files_to_sync_query_input) && count($organization_user_files_to_sync_query_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter organization_user_files_to_sync_query_input when calling queryUserFilesDeprecated'
            );
        }


        $resourcePath = '/user_files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($organization_user_files_to_sync_query_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($organization_user_files_to_sync_query_input));
            } else {
                $httpBody = $organization_user_files_to_sync_query_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation resync
     *
     * Resync File
     *
     * @param  \Carbon\Model\ResyncFileQueryInput $resync_file_query_input resync_file_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resync'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\UserFile|\Carbon\Model\HTTPValidationError
     */
    public function resync(

        $file_id,
        $chunk_size = SENTINEL_VALUE,
        $chunk_overlap = SENTINEL_VALUE,
        string $contentType = self::contentTypes['resync'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "file_id", $file_id);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $resync_file_query_input = $_body;

        list($response) = $this->resyncWithHttpInfo($resync_file_query_input, $contentType);
        return $response;
    }

    /**
     * Operation resyncWithHttpInfo
     *
     * Resync File
     *
     * @param  \Carbon\Model\ResyncFileQueryInput $resync_file_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resync'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\UserFile|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function resyncWithHttpInfo($resync_file_query_input, string $contentType = self::contentTypes['resync'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->resyncRequest($resync_file_query_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->resyncWithHttpInfo(
                        $resync_file_query_input,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\UserFile' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\UserFile' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\UserFile', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\UserFile';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\UserFile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resyncAsync
     *
     * Resync File
     *
     * @param  \Carbon\Model\ResyncFileQueryInput $resync_file_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resyncAsync(

        $file_id,
        $chunk_size = SENTINEL_VALUE,
        $chunk_overlap = SENTINEL_VALUE,
        string $contentType = self::contentTypes['resync'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "file_id", $file_id);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $resync_file_query_input = $_body;

        return $this->resyncAsyncWithHttpInfo($resync_file_query_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resyncAsyncWithHttpInfo
     *
     * Resync File
     *
     * @param  \Carbon\Model\ResyncFileQueryInput $resync_file_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resyncAsyncWithHttpInfo($resync_file_query_input, string $contentType = self::contentTypes['resync'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\UserFile';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->resyncRequest($resync_file_query_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resync'
     *
     * @param  \Carbon\Model\ResyncFileQueryInput $resync_file_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resyncRequest($resync_file_query_input, string $contentType = self::contentTypes['resync'][0])
    {

        if ($resync_file_query_input !== SENTINEL_VALUE) {
            if (!($resync_file_query_input instanceof \Carbon\Model\ResyncFileQueryInput)) {
                if (!is_array($resync_file_query_input))
                    throw new \InvalidArgumentException('"resync_file_query_input" must be associative array or an instance of \Carbon\Model\ResyncFileQueryInput FilesApi.resync.');
                else
                    $resync_file_query_input = new \Carbon\Model\ResyncFileQueryInput($resync_file_query_input);
            }
        }
        // verify the required parameter 'resync_file_query_input' is set
        if ($resync_file_query_input === SENTINEL_VALUE || (is_array($resync_file_query_input) && count($resync_file_query_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter resync_file_query_input when calling resync'
            );
        }


        $resourcePath = '/resync_file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($resync_file_query_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($resync_file_query_input));
            } else {
                $httpBody = $resync_file_query_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation upload
     *
     * Create Upload File
     *
     * @param  \SplFileObject $file file (required)
     * @param  \Carbon\Model\BodyCreateUploadFileUploadfilePost $body_create_upload_file_uploadfile_post body_create_upload_file_uploadfile_post (required)
     * @param  int $chunk_size Chunk size in tiktoken tokens to be used when processing file. (optional)
     * @param  int $chunk_overlap Chunk overlap in tiktoken tokens to be used when processing file. (optional)
     * @param  bool $skip_embedding_generation Flag to control whether or not embeddings should be generated and stored             when processing file. (optional, default to false)
     * @param  bool $set_page_as_boundary Flag to control whether or not to set the a page&#39;s worth of content as the maximum             amount of content that can appear in a chunk. Only valid for PDFs. See description route description for             more information. (optional, default to false)
     * @param  TextEmbeddingGenerators $embedding_model Embedding model that will be used to embed file chunks. (optional)
     * @param  bool $use_ocr Whether or not to use OCR when processing files. Only valid for PDFs. Useful for documents with             tables, images, and/or scanned text. (optional, default to false)
     * @param  bool $generate_sparse_vectors Whether or not to generate sparse vectors for the file. This is *required* for the file to be a             candidate for hybrid search. (optional, default to false)
     * @param  bool $prepend_filename_to_chunks Whether or not to prepend the file&#39;s name to chunks. (optional, default to false)
     * @param  int $max_items_per_chunk Number of objects per chunk. For json files only. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upload'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\UserFile|\Carbon\Model\HTTPValidationError
     */
    public function upload(

        $file,
        $chunk_size = SENTINEL_VALUE,
        $chunk_overlap = SENTINEL_VALUE,
        $skip_embedding_generation = false,
        $set_page_as_boundary = false,
        $embedding_model = SENTINEL_VALUE,
        $use_ocr = false,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        $max_items_per_chunk = SENTINEL_VALUE,
        string $contentType = self::contentTypes['upload'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "file", $file);
        $body_create_upload_file_uploadfile_post = $_body;

        list($response) = $this->uploadWithHttpInfo($file, $body_create_upload_file_uploadfile_post, $chunk_size, $chunk_overlap, $skip_embedding_generation, $set_page_as_boundary, $embedding_model, $use_ocr, $generate_sparse_vectors, $prepend_filename_to_chunks, $max_items_per_chunk, $contentType);
        return $response;
    }

    /**
     * Operation uploadWithHttpInfo
     *
     * Create Upload File
     *
     * @param  \SplFileObject $file (required)
     * @param  \Carbon\Model\BodyCreateUploadFileUploadfilePost $body_create_upload_file_uploadfile_post (required)
     * @param  int $chunk_size Chunk size in tiktoken tokens to be used when processing file. (optional)
     * @param  int $chunk_overlap Chunk overlap in tiktoken tokens to be used when processing file. (optional)
     * @param  bool $skip_embedding_generation Flag to control whether or not embeddings should be generated and stored             when processing file. (optional, default to false)
     * @param  bool $set_page_as_boundary Flag to control whether or not to set the a page&#39;s worth of content as the maximum             amount of content that can appear in a chunk. Only valid for PDFs. See description route description for             more information. (optional, default to false)
     * @param  TextEmbeddingGenerators $embedding_model Embedding model that will be used to embed file chunks. (optional)
     * @param  bool $use_ocr Whether or not to use OCR when processing files. Only valid for PDFs. Useful for documents with             tables, images, and/or scanned text. (optional, default to false)
     * @param  bool $generate_sparse_vectors Whether or not to generate sparse vectors for the file. This is *required* for the file to be a             candidate for hybrid search. (optional, default to false)
     * @param  bool $prepend_filename_to_chunks Whether or not to prepend the file&#39;s name to chunks. (optional, default to false)
     * @param  int $max_items_per_chunk Number of objects per chunk. For json files only. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upload'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\UserFile|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadWithHttpInfo($file, $body_create_upload_file_uploadfile_post, $chunk_size = null, $chunk_overlap = null, $skip_embedding_generation = false, $set_page_as_boundary = false, $embedding_model = null, $use_ocr = false, $generate_sparse_vectors = false, $prepend_filename_to_chunks = false, $max_items_per_chunk = null, string $contentType = self::contentTypes['upload'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->uploadRequest($file, $body_create_upload_file_uploadfile_post, $chunk_size, $chunk_overlap, $skip_embedding_generation, $set_page_as_boundary, $embedding_model, $use_ocr, $generate_sparse_vectors, $prepend_filename_to_chunks, $max_items_per_chunk, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->uploadWithHttpInfo(
                        $file,
                        $body_create_upload_file_uploadfile_post,
                        $chunk_size,
                        $chunk_overlap,
                        $skip_embedding_generation,
                        $set_page_as_boundary,
                        $embedding_model,
                        $use_ocr,
                        $generate_sparse_vectors,
                        $prepend_filename_to_chunks,
                        $max_items_per_chunk,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\UserFile' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\UserFile' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\UserFile', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\UserFile';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\UserFile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadAsync
     *
     * Create Upload File
     *
     * @param  \SplFileObject $file (required)
     * @param  \Carbon\Model\BodyCreateUploadFileUploadfilePost $body_create_upload_file_uploadfile_post (required)
     * @param  int $chunk_size Chunk size in tiktoken tokens to be used when processing file. (optional)
     * @param  int $chunk_overlap Chunk overlap in tiktoken tokens to be used when processing file. (optional)
     * @param  bool $skip_embedding_generation Flag to control whether or not embeddings should be generated and stored             when processing file. (optional, default to false)
     * @param  bool $set_page_as_boundary Flag to control whether or not to set the a page&#39;s worth of content as the maximum             amount of content that can appear in a chunk. Only valid for PDFs. See description route description for             more information. (optional, default to false)
     * @param  TextEmbeddingGenerators $embedding_model Embedding model that will be used to embed file chunks. (optional)
     * @param  bool $use_ocr Whether or not to use OCR when processing files. Only valid for PDFs. Useful for documents with             tables, images, and/or scanned text. (optional, default to false)
     * @param  bool $generate_sparse_vectors Whether or not to generate sparse vectors for the file. This is *required* for the file to be a             candidate for hybrid search. (optional, default to false)
     * @param  bool $prepend_filename_to_chunks Whether or not to prepend the file&#39;s name to chunks. (optional, default to false)
     * @param  int $max_items_per_chunk Number of objects per chunk. For json files only. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadAsync(

        $file,
        $chunk_size = SENTINEL_VALUE,
        $chunk_overlap = SENTINEL_VALUE,
        $skip_embedding_generation = false,
        $set_page_as_boundary = false,
        $embedding_model = SENTINEL_VALUE,
        $use_ocr = false,
        $generate_sparse_vectors = false,
        $prepend_filename_to_chunks = false,
        $max_items_per_chunk = SENTINEL_VALUE,
        string $contentType = self::contentTypes['upload'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "file", $file);
        $body_create_upload_file_uploadfile_post = $_body;

        return $this->uploadAsyncWithHttpInfo($file, $body_create_upload_file_uploadfile_post, $chunk_size, $chunk_overlap, $skip_embedding_generation, $set_page_as_boundary, $embedding_model, $use_ocr, $generate_sparse_vectors, $prepend_filename_to_chunks, $max_items_per_chunk, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadAsyncWithHttpInfo
     *
     * Create Upload File
     *
     * @param  \SplFileObject $file (required)
     * @param  \Carbon\Model\BodyCreateUploadFileUploadfilePost $body_create_upload_file_uploadfile_post (required)
     * @param  int $chunk_size Chunk size in tiktoken tokens to be used when processing file. (optional)
     * @param  int $chunk_overlap Chunk overlap in tiktoken tokens to be used when processing file. (optional)
     * @param  bool $skip_embedding_generation Flag to control whether or not embeddings should be generated and stored             when processing file. (optional, default to false)
     * @param  bool $set_page_as_boundary Flag to control whether or not to set the a page&#39;s worth of content as the maximum             amount of content that can appear in a chunk. Only valid for PDFs. See description route description for             more information. (optional, default to false)
     * @param  TextEmbeddingGenerators $embedding_model Embedding model that will be used to embed file chunks. (optional)
     * @param  bool $use_ocr Whether or not to use OCR when processing files. Only valid for PDFs. Useful for documents with             tables, images, and/or scanned text. (optional, default to false)
     * @param  bool $generate_sparse_vectors Whether or not to generate sparse vectors for the file. This is *required* for the file to be a             candidate for hybrid search. (optional, default to false)
     * @param  bool $prepend_filename_to_chunks Whether or not to prepend the file&#39;s name to chunks. (optional, default to false)
     * @param  int $max_items_per_chunk Number of objects per chunk. For json files only. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadAsyncWithHttpInfo($file, $body_create_upload_file_uploadfile_post, $chunk_size = null, $chunk_overlap = null, $skip_embedding_generation = false, $set_page_as_boundary = false, $embedding_model = null, $use_ocr = false, $generate_sparse_vectors = false, $prepend_filename_to_chunks = false, $max_items_per_chunk = null, string $contentType = self::contentTypes['upload'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\UserFile';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->uploadRequest($file, $body_create_upload_file_uploadfile_post, $chunk_size, $chunk_overlap, $skip_embedding_generation, $set_page_as_boundary, $embedding_model, $use_ocr, $generate_sparse_vectors, $prepend_filename_to_chunks, $max_items_per_chunk, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upload'
     *
     * @param  \SplFileObject $file (required)
     * @param  \Carbon\Model\BodyCreateUploadFileUploadfilePost $body_create_upload_file_uploadfile_post (required)
     * @param  int $chunk_size Chunk size in tiktoken tokens to be used when processing file. (optional)
     * @param  int $chunk_overlap Chunk overlap in tiktoken tokens to be used when processing file. (optional)
     * @param  bool $skip_embedding_generation Flag to control whether or not embeddings should be generated and stored             when processing file. (optional, default to false)
     * @param  bool $set_page_as_boundary Flag to control whether or not to set the a page&#39;s worth of content as the maximum             amount of content that can appear in a chunk. Only valid for PDFs. See description route description for             more information. (optional, default to false)
     * @param  TextEmbeddingGenerators $embedding_model Embedding model that will be used to embed file chunks. (optional)
     * @param  bool $use_ocr Whether or not to use OCR when processing files. Only valid for PDFs. Useful for documents with             tables, images, and/or scanned text. (optional, default to false)
     * @param  bool $generate_sparse_vectors Whether or not to generate sparse vectors for the file. This is *required* for the file to be a             candidate for hybrid search. (optional, default to false)
     * @param  bool $prepend_filename_to_chunks Whether or not to prepend the file&#39;s name to chunks. (optional, default to false)
     * @param  int $max_items_per_chunk Number of objects per chunk. For json files only. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadRequest($file, $body_create_upload_file_uploadfile_post, $chunk_size = SENTINEL_VALUE, $chunk_overlap = SENTINEL_VALUE, $skip_embedding_generation = false, $set_page_as_boundary = false, $embedding_model = SENTINEL_VALUE, $use_ocr = false, $generate_sparse_vectors = false, $prepend_filename_to_chunks = false, $max_items_per_chunk = SENTINEL_VALUE, string $contentType = self::contentTypes['upload'][0])
    {

        // verify the required parameter 'file' is set
        if ($file === SENTINEL_VALUE || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter file when calling upload'
            );
        }
        if ($body_create_upload_file_uploadfile_post !== SENTINEL_VALUE) {
            if (!($body_create_upload_file_uploadfile_post instanceof \Carbon\Model\BodyCreateUploadFileUploadfilePost)) {
                if (!is_array($body_create_upload_file_uploadfile_post))
                    throw new \InvalidArgumentException('"body_create_upload_file_uploadfile_post" must be associative array or an instance of \Carbon\Model\BodyCreateUploadFileUploadfilePost FilesApi.upload.');
                else
                    $body_create_upload_file_uploadfile_post = new \Carbon\Model\BodyCreateUploadFileUploadfilePost($body_create_upload_file_uploadfile_post);
            }
        }
        // verify the required parameter 'body_create_upload_file_uploadfile_post' is set
        if ($body_create_upload_file_uploadfile_post === SENTINEL_VALUE || (is_array($body_create_upload_file_uploadfile_post) && count($body_create_upload_file_uploadfile_post) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter body_create_upload_file_uploadfile_post when calling upload'
            );
        }


        $resourcePath = '/uploadfile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($chunk_size !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $chunk_size,
                'chunk_size', // param base name
                'integer', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? []);
        }
        if ($chunk_overlap !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $chunk_overlap,
                'chunk_overlap', // param base name
                'integer', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? []);
        }
        if ($skip_embedding_generation !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $skip_embedding_generation,
                'skip_embedding_generation', // param base name
                'boolean', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? []);
        }
        if ($set_page_as_boundary !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $set_page_as_boundary,
                'set_page_as_boundary', // param base name
                'boolean', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? []);
        }
        if ($embedding_model !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $embedding_model,
                'embedding_model', // param base name
                'TextEmbeddingGenerators', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? []);
        }
        if ($use_ocr !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $use_ocr,
                'use_ocr', // param base name
                'boolean', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? []);
        }
        if ($generate_sparse_vectors !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $generate_sparse_vectors,
                'generate_sparse_vectors', // param base name
                'boolean', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? []);
        }
        if ($prepend_filename_to_chunks !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $prepend_filename_to_chunks,
                'prepend_filename_to_chunks', // param base name
                'boolean', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? []);
        }
        if ($max_items_per_chunk !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $max_items_per_chunk,
                'max_items_per_chunk', // param base name
                'integer', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? []);
        }



        // form params
        if ($file !== SENTINEL_VALUE) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body_create_upload_file_uploadfile_post)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body_create_upload_file_uploadfile_post));
            } else {
                $httpBody = $body_create_upload_file_uploadfile_post;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation uploadFromUrl
     *
     * Create Upload File From Url
     *
     * @param  \Carbon\Model\UploadFileFromUrlInput $upload_file_from_url_input upload_file_from_url_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadFromUrl'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\UserFile|\Carbon\Model\HTTPValidationError
     */
    public function uploadFromUrl(

        $url,
        $file_name = SENTINEL_VALUE,
        $chunk_size = SENTINEL_VALUE,
        $chunk_overlap = SENTINEL_VALUE,
        $skip_embedding_generation = false,
        $set_page_as_boundary = false,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $use_textract = false,
        $prepend_filename_to_chunks = false,
        $max_items_per_chunk = SENTINEL_VALUE,
        string $contentType = self::contentTypes['uploadFromUrl'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "url", $url);
        $this->setRequestBodyProperty($_body, "file_name", $file_name);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "set_page_as_boundary", $set_page_as_boundary);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "use_textract", $use_textract);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $this->setRequestBodyProperty($_body, "max_items_per_chunk", $max_items_per_chunk);
        $upload_file_from_url_input = $_body;

        list($response) = $this->uploadFromUrlWithHttpInfo($upload_file_from_url_input, $contentType);
        return $response;
    }

    /**
     * Operation uploadFromUrlWithHttpInfo
     *
     * Create Upload File From Url
     *
     * @param  \Carbon\Model\UploadFileFromUrlInput $upload_file_from_url_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadFromUrl'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\UserFile|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadFromUrlWithHttpInfo($upload_file_from_url_input, string $contentType = self::contentTypes['uploadFromUrl'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->uploadFromUrlRequest($upload_file_from_url_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->uploadFromUrlWithHttpInfo(
                        $upload_file_from_url_input,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\UserFile' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\UserFile' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\UserFile', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\UserFile';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\UserFile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadFromUrlAsync
     *
     * Create Upload File From Url
     *
     * @param  \Carbon\Model\UploadFileFromUrlInput $upload_file_from_url_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadFromUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadFromUrlAsync(

        $url,
        $file_name = SENTINEL_VALUE,
        $chunk_size = SENTINEL_VALUE,
        $chunk_overlap = SENTINEL_VALUE,
        $skip_embedding_generation = false,
        $set_page_as_boundary = false,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        $use_textract = false,
        $prepend_filename_to_chunks = false,
        $max_items_per_chunk = SENTINEL_VALUE,
        string $contentType = self::contentTypes['uploadFromUrl'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "url", $url);
        $this->setRequestBodyProperty($_body, "file_name", $file_name);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "set_page_as_boundary", $set_page_as_boundary);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $this->setRequestBodyProperty($_body, "use_textract", $use_textract);
        $this->setRequestBodyProperty($_body, "prepend_filename_to_chunks", $prepend_filename_to_chunks);
        $this->setRequestBodyProperty($_body, "max_items_per_chunk", $max_items_per_chunk);
        $upload_file_from_url_input = $_body;

        return $this->uploadFromUrlAsyncWithHttpInfo($upload_file_from_url_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadFromUrlAsyncWithHttpInfo
     *
     * Create Upload File From Url
     *
     * @param  \Carbon\Model\UploadFileFromUrlInput $upload_file_from_url_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadFromUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadFromUrlAsyncWithHttpInfo($upload_file_from_url_input, string $contentType = self::contentTypes['uploadFromUrl'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\UserFile';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->uploadFromUrlRequest($upload_file_from_url_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadFromUrl'
     *
     * @param  \Carbon\Model\UploadFileFromUrlInput $upload_file_from_url_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadFromUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadFromUrlRequest($upload_file_from_url_input, string $contentType = self::contentTypes['uploadFromUrl'][0])
    {

        if ($upload_file_from_url_input !== SENTINEL_VALUE) {
            if (!($upload_file_from_url_input instanceof \Carbon\Model\UploadFileFromUrlInput)) {
                if (!is_array($upload_file_from_url_input))
                    throw new \InvalidArgumentException('"upload_file_from_url_input" must be associative array or an instance of \Carbon\Model\UploadFileFromUrlInput FilesApi.uploadFromUrl.');
                else
                    $upload_file_from_url_input = new \Carbon\Model\UploadFileFromUrlInput($upload_file_from_url_input);
            }
        }
        // verify the required parameter 'upload_file_from_url_input' is set
        if ($upload_file_from_url_input === SENTINEL_VALUE || (is_array($upload_file_from_url_input) && count($upload_file_from_url_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter upload_file_from_url_input when calling uploadFromUrl'
            );
        }


        $resourcePath = '/upload_file_from_url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($upload_file_from_url_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($upload_file_from_url_input));
            } else {
                $httpBody = $upload_file_from_url_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation uploadText
     *
     * Create Raw Text
     *
     * @param  \Carbon\Model\RawTextInput $raw_text_input raw_text_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadText'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\UserFile|\Carbon\Model\HTTPValidationError
     */
    public function uploadText(

        $contents,
        $name = SENTINEL_VALUE,
        $chunk_size = SENTINEL_VALUE,
        $chunk_overlap = SENTINEL_VALUE,
        $skip_embedding_generation = false,
        $overwrite_file_id = SENTINEL_VALUE,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        string $contentType = self::contentTypes['uploadText'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "contents", $contents);
        $this->setRequestBodyProperty($_body, "name", $name);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "overwrite_file_id", $overwrite_file_id);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $raw_text_input = $_body;

        list($response) = $this->uploadTextWithHttpInfo($raw_text_input, $contentType);
        return $response;
    }

    /**
     * Operation uploadTextWithHttpInfo
     *
     * Create Raw Text
     *
     * @param  \Carbon\Model\RawTextInput $raw_text_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadText'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\UserFile|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadTextWithHttpInfo($raw_text_input, string $contentType = self::contentTypes['uploadText'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->uploadTextRequest($raw_text_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->uploadTextWithHttpInfo(
                        $raw_text_input,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\UserFile' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\UserFile' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\UserFile', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\UserFile';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\UserFile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadTextAsync
     *
     * Create Raw Text
     *
     * @param  \Carbon\Model\RawTextInput $raw_text_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadText'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadTextAsync(

        $contents,
        $name = SENTINEL_VALUE,
        $chunk_size = SENTINEL_VALUE,
        $chunk_overlap = SENTINEL_VALUE,
        $skip_embedding_generation = false,
        $overwrite_file_id = SENTINEL_VALUE,
        $embedding_model = SENTINEL_VALUE,
        $generate_sparse_vectors = false,
        string $contentType = self::contentTypes['uploadText'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "contents", $contents);
        $this->setRequestBodyProperty($_body, "name", $name);
        $this->setRequestBodyProperty($_body, "chunk_size", $chunk_size);
        $this->setRequestBodyProperty($_body, "chunk_overlap", $chunk_overlap);
        $this->setRequestBodyProperty($_body, "skip_embedding_generation", $skip_embedding_generation);
        $this->setRequestBodyProperty($_body, "overwrite_file_id", $overwrite_file_id);
        $this->setRequestBodyProperty($_body, "embedding_model", $embedding_model);
        $this->setRequestBodyProperty($_body, "generate_sparse_vectors", $generate_sparse_vectors);
        $raw_text_input = $_body;

        return $this->uploadTextAsyncWithHttpInfo($raw_text_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadTextAsyncWithHttpInfo
     *
     * Create Raw Text
     *
     * @param  \Carbon\Model\RawTextInput $raw_text_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadText'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadTextAsyncWithHttpInfo($raw_text_input, string $contentType = self::contentTypes['uploadText'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\UserFile';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->uploadTextRequest($raw_text_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadText'
     *
     * @param  \Carbon\Model\RawTextInput $raw_text_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadText'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadTextRequest($raw_text_input, string $contentType = self::contentTypes['uploadText'][0])
    {

        if ($raw_text_input !== SENTINEL_VALUE) {
            if (!($raw_text_input instanceof \Carbon\Model\RawTextInput)) {
                if (!is_array($raw_text_input))
                    throw new \InvalidArgumentException('"raw_text_input" must be associative array or an instance of \Carbon\Model\RawTextInput FilesApi.uploadText.');
                else
                    $raw_text_input = new \Carbon\Model\RawTextInput($raw_text_input);
            }
        }
        // verify the required parameter 'raw_text_input' is set
        if ($raw_text_input === SENTINEL_VALUE || (is_array($raw_text_input) && count($raw_text_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter raw_text_input when calling uploadText'
            );
        }


        $resourcePath = '/upload_text';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($raw_text_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($raw_text_input));
            } else {
                $httpBody = $raw_text_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
