<?php
/**
 * DataSourcesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Carbon
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * Carbon
 *
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Carbon\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\BodySummarizer;
use GuzzleHttp\Middleware;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Utils;
use Carbon\ApiException;
use Carbon\Configuration;
use Carbon\HeaderSelector;
use Carbon\ObjectSerializer;

class DataSourcesApi extends \Carbon\CustomApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'queryUserDataSources' => [
            'application/json',
        ],
        'revokeAccessToken' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config = null,
        ClientInterface $client = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $clientOptions = [];
        if (!$config->getVerifySsl()) $clientOptions["verify"] = false;

        // Do not truncate error messages
        // https://github.com/guzzle/guzzle/issues/2185#issuecomment-800293420
        $stack = new HandlerStack(Utils::chooseHandler());
        $stack->push(Middleware::httpErrors(new BodySummarizer(10000)), 'http_errors');
        $stack->push(Middleware::redirect(), 'allow_redirects');
        $stack->push(Middleware::cookies(), 'cookies');
        $stack->push(Middleware::prepareBody(), 'prepare_body');
        $clientOptions["handler"] = $stack;

        $this->client = $client ?: new Client($clientOptions);
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * For initializing request body parameter
     */
    private function setRequestBodyProperty(&$body, $property, $value) {
        if ($body === null) $body = [];
        // user did not pass in a value for this parameter
        if ($value === SENTINEL_VALUE) return;
        $body[$property] = $value;
    }

    /**
     * Operation queryUserDataSources
     *
     * User Data Sources
     *
     * @param  \Carbon\Model\OrganizationUserDataSourceQueryInput $organization_user_data_source_query_input organization_user_data_source_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserDataSources'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\OrganizationUserDataSourceResponse|\Carbon\Model\HTTPValidationError
     */
    public function queryUserDataSources(

        $pagination = SENTINEL_VALUE,
        $order_by = SENTINEL_VALUE,
        $order_dir = SENTINEL_VALUE,
        $filters = SENTINEL_VALUE,
        string $contentType = self::contentTypes['queryUserDataSources'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "pagination", $pagination);
        $this->setRequestBodyProperty($_body, "order_by", $order_by);
        $this->setRequestBodyProperty($_body, "order_dir", $order_dir);
        $this->setRequestBodyProperty($_body, "filters", $filters);
        $organization_user_data_source_query_input = $_body;

        list($response) = $this->queryUserDataSourcesWithHttpInfo($organization_user_data_source_query_input, $contentType);
        return $response;
    }

    /**
     * Operation queryUserDataSourcesWithHttpInfo
     *
     * User Data Sources
     *
     * @param  \Carbon\Model\OrganizationUserDataSourceQueryInput $organization_user_data_source_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserDataSources'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\OrganizationUserDataSourceResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryUserDataSourcesWithHttpInfo($organization_user_data_source_query_input, string $contentType = self::contentTypes['queryUserDataSources'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->queryUserDataSourcesRequest($organization_user_data_source_query_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->queryUserDataSourcesWithHttpInfo(
                        $organization_user_data_source_query_input,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\OrganizationUserDataSourceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\OrganizationUserDataSourceResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\OrganizationUserDataSourceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\OrganizationUserDataSourceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\OrganizationUserDataSourceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryUserDataSourcesAsync
     *
     * User Data Sources
     *
     * @param  \Carbon\Model\OrganizationUserDataSourceQueryInput $organization_user_data_source_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserDataSources'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryUserDataSourcesAsync(

        $pagination = SENTINEL_VALUE,
        $order_by = SENTINEL_VALUE,
        $order_dir = SENTINEL_VALUE,
        $filters = SENTINEL_VALUE,
        string $contentType = self::contentTypes['queryUserDataSources'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "pagination", $pagination);
        $this->setRequestBodyProperty($_body, "order_by", $order_by);
        $this->setRequestBodyProperty($_body, "order_dir", $order_dir);
        $this->setRequestBodyProperty($_body, "filters", $filters);
        $organization_user_data_source_query_input = $_body;

        return $this->queryUserDataSourcesAsyncWithHttpInfo($organization_user_data_source_query_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryUserDataSourcesAsyncWithHttpInfo
     *
     * User Data Sources
     *
     * @param  \Carbon\Model\OrganizationUserDataSourceQueryInput $organization_user_data_source_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserDataSources'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryUserDataSourcesAsyncWithHttpInfo($organization_user_data_source_query_input, string $contentType = self::contentTypes['queryUserDataSources'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\OrganizationUserDataSourceResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->queryUserDataSourcesRequest($organization_user_data_source_query_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryUserDataSources'
     *
     * @param  \Carbon\Model\OrganizationUserDataSourceQueryInput $organization_user_data_source_query_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserDataSources'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryUserDataSourcesRequest($organization_user_data_source_query_input, string $contentType = self::contentTypes['queryUserDataSources'][0])
    {

        if ($organization_user_data_source_query_input !== SENTINEL_VALUE) {
            if (!($organization_user_data_source_query_input instanceof \Carbon\Model\OrganizationUserDataSourceQueryInput)) {
                if (!is_array($organization_user_data_source_query_input))
                    throw new \InvalidArgumentException('"organization_user_data_source_query_input" must be associative array or an instance of \Carbon\Model\OrganizationUserDataSourceQueryInput DataSourcesApi.queryUserDataSources.');
                else
                    $organization_user_data_source_query_input = new \Carbon\Model\OrganizationUserDataSourceQueryInput($organization_user_data_source_query_input);
            }
        }
        // verify the required parameter 'organization_user_data_source_query_input' is set
        if ($organization_user_data_source_query_input === SENTINEL_VALUE || (is_array($organization_user_data_source_query_input) && count($organization_user_data_source_query_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter organization_user_data_source_query_input when calling queryUserDataSources'
            );
        }


        $resourcePath = '/user_data_sources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($organization_user_data_source_query_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($organization_user_data_source_query_input));
            } else {
                $httpBody = $organization_user_data_source_query_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation revokeAccessToken
     *
     * Revoke Access Token
     *
     * @param  \Carbon\Model\RevokeAccessTokenInput $revoke_access_token_input revoke_access_token_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeAccessToken'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError
     */
    public function revokeAccessToken(

        $data_source_id,
        string $contentType = self::contentTypes['revokeAccessToken'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $revoke_access_token_input = $_body;

        list($response) = $this->revokeAccessTokenWithHttpInfo($revoke_access_token_input, $contentType);
        return $response;
    }

    /**
     * Operation revokeAccessTokenWithHttpInfo
     *
     * Revoke Access Token
     *
     * @param  \Carbon\Model\RevokeAccessTokenInput $revoke_access_token_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeAccessToken'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\GenericSuccessResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeAccessTokenWithHttpInfo($revoke_access_token_input, string $contentType = self::contentTypes['revokeAccessToken'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->revokeAccessTokenRequest($revoke_access_token_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->revokeAccessTokenWithHttpInfo(
                        $revoke_access_token_input,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\GenericSuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\GenericSuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\GenericSuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\GenericSuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\GenericSuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation revokeAccessTokenAsync
     *
     * Revoke Access Token
     *
     * @param  \Carbon\Model\RevokeAccessTokenInput $revoke_access_token_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeAccessTokenAsync(

        $data_source_id,
        string $contentType = self::contentTypes['revokeAccessToken'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $revoke_access_token_input = $_body;

        return $this->revokeAccessTokenAsyncWithHttpInfo($revoke_access_token_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation revokeAccessTokenAsyncWithHttpInfo
     *
     * Revoke Access Token
     *
     * @param  \Carbon\Model\RevokeAccessTokenInput $revoke_access_token_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeAccessTokenAsyncWithHttpInfo($revoke_access_token_input, string $contentType = self::contentTypes['revokeAccessToken'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\GenericSuccessResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->revokeAccessTokenRequest($revoke_access_token_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'revokeAccessToken'
     *
     * @param  \Carbon\Model\RevokeAccessTokenInput $revoke_access_token_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function revokeAccessTokenRequest($revoke_access_token_input, string $contentType = self::contentTypes['revokeAccessToken'][0])
    {

        if ($revoke_access_token_input !== SENTINEL_VALUE) {
            if (!($revoke_access_token_input instanceof \Carbon\Model\RevokeAccessTokenInput)) {
                if (!is_array($revoke_access_token_input))
                    throw new \InvalidArgumentException('"revoke_access_token_input" must be associative array or an instance of \Carbon\Model\RevokeAccessTokenInput DataSourcesApi.revokeAccessToken.');
                else
                    $revoke_access_token_input = new \Carbon\Model\RevokeAccessTokenInput($revoke_access_token_input);
            }
        }
        // verify the required parameter 'revoke_access_token_input' is set
        if ($revoke_access_token_input === SENTINEL_VALUE || (is_array($revoke_access_token_input) && count($revoke_access_token_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter revoke_access_token_input when calling revokeAccessToken'
            );
        }


        $resourcePath = '/revoke_access_token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($revoke_access_token_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($revoke_access_token_input));
            } else {
                $httpBody = $revoke_access_token_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
