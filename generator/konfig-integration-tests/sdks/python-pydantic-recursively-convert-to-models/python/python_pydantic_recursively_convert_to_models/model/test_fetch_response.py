# coding: utf-8

"""
    python-pydantic-recursively-convert-to-models API

    A simple API based for testing python-pydantic-recursively-convert-to-models.

    The version of the OpenAPI document: 1.0.0
    Contact: support@example.com
    Created by: http://example.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from python_pydantic_recursively_convert_to_models import schemas  # noqa: F401


class TestFetchResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def a() -> typing.Type['Inner']:
                return Inner
        
            @staticmethod
            def b() -> typing.Type['ListInner']:
                return ListInner
            __annotations__ = {
                "a": a,
                "b": b,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["a"]) -> 'Inner': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["b"]) -> 'ListInner': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["a", "b", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["a"]) -> typing.Union['Inner', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["b"]) -> typing.Union['ListInner', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["a", "b", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        a: typing.Union['Inner', schemas.Unset] = schemas.unset,
        b: typing.Union['ListInner', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TestFetchResponse':
        return super().__new__(
            cls,
            *args,
            a=a,
            b=b,
            _configuration=_configuration,
            **kwargs,
        )

from python_pydantic_recursively_convert_to_models.model.inner import Inner
from python_pydantic_recursively_convert_to_models.model.list_inner import ListInner
