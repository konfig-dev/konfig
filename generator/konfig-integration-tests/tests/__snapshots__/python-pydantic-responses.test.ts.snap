// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`python-pydantic-responses 1`] = `
"# python-pydantic-responses-python-sdk

A simple API based on python pydantic responses.


[![PyPI](https://img.shields.io/badge/PyPI-v1.0.0-blue)](https://pypi.org/project/python-pydantic-responses-python-sdk/1.0.0)
[![README.md](https://img.shields.io/badge/README-Click%20Here-green)](https://github.com/konfig-dev/konfig/tree/main/python#readme)
[![More Info](https://img.shields.io/badge/More%20Info-Click%20Here-orange)](http://example.com/support)

## Table of Contents

<!-- toc -->

- [Requirements](#requirements)
- [Installing](#installing)
- [Getting Started](#getting-started)
- [Async](#async)
- [Raw HTTP Response](#raw-http-response)
- [Reference](#reference)
  * [\`pythonpydanticresponses.test.fetch\`](#pythonpydanticresponsestestfetch)
  * [\`pythonpydanticresponses.test.reserved_word\`](#pythonpydanticresponsestestreserved_word)

<!-- tocstop -->

## Requirements

Python >=3.7

## Installing

\`\`\`sh
pip install python-pydantic-responses-python-sdk==1.0.0
\`\`\`

## Getting Started

\`\`\`python
from pprint import pprint
from python_pydantic import PythonPydanticResponses, ApiException

pythonpydanticresponses = PythonPydanticResponses(
    api_key="YOUR_API_KEY",
)

try:
    # Fetches a JSON value based on input parameter
    fetch_response = pythonpydanticresponses.test.fetch(
        input_parameter="inputParameter_example",
    )
    print(fetch_response)
except ApiException as e:
    print("Exception when calling TestApi.fetch: %s\\n" % e)
    pprint(e.body)
    if e.status == 400:
        pprint(e.body["error"])
    if e.status == 500:
        pprint(e.body["error"])
    pprint(e.headers)
    pprint(e.status)
    pprint(e.reason)
    pprint(e.round_trip_time)
\`\`\`

## Async

\`async\` support is available by prepending \`a\` to any method.

\`\`\`python
import asyncio
from pprint import pprint
from python_pydantic import PythonPydanticResponses, ApiException

pythonpydanticresponses = PythonPydanticResponses(
    api_key="YOUR_API_KEY",
)


async def main():
    try:
        # Fetches a JSON value based on input parameter
        fetch_response = await pythonpydanticresponses.test.afetch(
            input_parameter="inputParameter_example",
        )
        print(fetch_response)
    except ApiException as e:
        print("Exception when calling TestApi.fetch: %s\\n" % e)
        pprint(e.body)
        if e.status == 400:
            pprint(e.body["error"])
        if e.status == 500:
            pprint(e.body["error"])
        pprint(e.headers)
        pprint(e.status)
        pprint(e.reason)
        pprint(e.round_trip_time)


asyncio.run(main())
\`\`\`

## Raw HTTP Response

To access raw HTTP response values, use the \`.raw\` namespace.

\`\`\`python
from pprint import pprint
from python_pydantic import PythonPydanticResponses, ApiException

pythonpydanticresponses = PythonPydanticResponses(
    api_key="YOUR_API_KEY",
)

try:
    # Fetches a JSON value based on input parameter
    fetch_response = pythonpydanticresponses.test.raw.fetch(
        input_parameter="inputParameter_example",
    )
    pprint(fetch_response.body)
    pprint(fetch_response.body["property_a"])
    pprint(fetch_response.body["property_b"])
    pprint(fetch_response.body["property_c"])
    pprint(fetch_response.headers)
    pprint(fetch_response.status)
    pprint(fetch_response.round_trip_time)
except ApiException as e:
    print("Exception when calling TestApi.fetch: %s\\n" % e)
    pprint(e.body)
    if e.status == 400:
        pprint(e.body["error"])
    if e.status == 500:
        pprint(e.body["error"])
    pprint(e.headers)
    pprint(e.status)
    pprint(e.reason)
    pprint(e.round_trip_time)
\`\`\`


## Reference
### \`pythonpydanticresponses.test.fetch\`

Provide an input parameter to receive a JSON value with properties.

#### üõ†Ô∏è Usage

\`\`\`python
fetch_response = pythonpydanticresponses.test.fetch(
    input_parameter="inputParameter_example",
)
\`\`\`

#### ‚öôÔ∏è Parameters

##### input_parameter: \`str\`

The input parameter to process.

#### üîÑ Return

[TestFetchResponse](./python_pydantic/pydantic/test_fetch_response.py)

#### üåê Endpoint

\`/simple-endpoint\` \`get\`

[üîô **Back to Table of Contents**](#table-of-contents)

---

### \`pythonpydanticresponses.test.reserved_word\`

Reserved word in Python

#### üõ†Ô∏è Usage

\`\`\`python
reserved_word_response = pythonpydanticresponses.test.reserved_word()
\`\`\`

#### üîÑ Return

[TestReservedWord](./python_pydantic/pydantic/test_reserved_word.py)

#### üåê Endpoint

\`/reserved-word\` \`get\`

[üîô **Back to Table of Contents**](#table-of-contents)

---


## Author
This Python package is automatically generated by [Konfig](https://konfigthis.com)
"
`;
