// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`leap-workflows-sdks 1`] = `
"# leap-workflows-python-sdk<a id=\\"leap-workflows-python-sdk\\"></a>

The Leap Workflows API allows developers to run workflows, fetch workflow runs, and provide other utility functions related to workflow runs. Please use the X-Api-Key for authenticated requests.


[![PyPI](https://img.shields.io/badge/PyPI-v1.0.0-blue)](https://pypi.org/project/leap-workflows-python-sdk/1.0.0)
[![README.md](https://img.shields.io/badge/README-Click%20Here-green)](https://github.com/leap-ai/workflows-sdks/tree/main/sdks/python#readme)
[![More Info](https://img.shields.io/badge/More%20Info-Click%20Here-orange)](https://tryleap.ai/)

## Table of Contents<a id=\\"table-of-contents\\"></a>

<!-- toc -->

- [Requirements](#requirements)
- [Installing](#installing)
- [Getting Started](#getting-started)
- [Async](#async)
- [Reference](#reference)
  * [\`leap.workflow_runs.get_workflow_run\`](#leapworkflow_runsget_workflow_run)
  * [\`leap.workflow_runs.workflow\`](#leapworkflow_runsworkflow)

<!-- tocstop -->

## Requirements<a id=\\"requirements\\"></a>

Python >=3.7

## Installing<a id=\\"installing\\"></a>

\`\`\`sh
pip install leap-workflows-python-sdk==1.0.0
\`\`\`

## Getting Started<a id=\\"getting-started\\"></a>

\`\`\`python
from pprint import pprint
from leap_workflows import Leap, ApiException

leap = Leap(
    api_key=\\"YOUR_API_KEY\\",
)

try:
    # Get a workflow run
    get_workflow_run_response = leap.workflow_runs.get_workflow_run(
        workflow_run_id=\\"workflow_run_id_example\\",
    )
    pprint(get_workflow_run_response.body)
    pprint(get_workflow_run_response.body[\\"id\\"])
    pprint(get_workflow_run_response.body[\\"version_id\\"])
    pprint(get_workflow_run_response.body[\\"status\\"])
    pprint(get_workflow_run_response.body[\\"created_at\\"])
    pprint(get_workflow_run_response.body[\\"started_at\\"])
    pprint(get_workflow_run_response.body[\\"ended_at\\"])
    pprint(get_workflow_run_response.body[\\"workflow_id\\"])
    pprint(get_workflow_run_response.body[\\"error\\"])
    pprint(get_workflow_run_response.body[\\"input\\"])
    pprint(get_workflow_run_response.body[\\"output\\"])
    pprint(get_workflow_run_response.headers)
    pprint(get_workflow_run_response.status)
    pprint(get_workflow_run_response.round_trip_time)
except ApiException as e:
    print(\\"Exception when calling WorkflowRunsApi.get_workflow_run: %s\\\\n\\" % e)
    pprint(e.body)
    pprint(e.headers)
    pprint(e.status)
    pprint(e.reason)
    pprint(e.round_trip_time)
\`\`\`

## Async<a id=\\"async\\"></a>

\`async\` support is available by prepending \`a\` to any method.

\`\`\`python
import asyncio
from pprint import pprint
from leap_workflows import Leap, ApiException

leap = Leap(
    api_key=\\"YOUR_API_KEY\\",
)


async def main():
    try:
        # Get a workflow run
        get_workflow_run_response = await leap.workflow_runs.aget_workflow_run(
            workflow_run_id=\\"workflow_run_id_example\\",
        )
        pprint(get_workflow_run_response.body)
        pprint(get_workflow_run_response.body[\\"id\\"])
        pprint(get_workflow_run_response.body[\\"version_id\\"])
        pprint(get_workflow_run_response.body[\\"status\\"])
        pprint(get_workflow_run_response.body[\\"created_at\\"])
        pprint(get_workflow_run_response.body[\\"started_at\\"])
        pprint(get_workflow_run_response.body[\\"ended_at\\"])
        pprint(get_workflow_run_response.body[\\"workflow_id\\"])
        pprint(get_workflow_run_response.body[\\"error\\"])
        pprint(get_workflow_run_response.body[\\"input\\"])
        pprint(get_workflow_run_response.body[\\"output\\"])
        pprint(get_workflow_run_response.headers)
        pprint(get_workflow_run_response.status)
        pprint(get_workflow_run_response.round_trip_time)
    except ApiException as e:
        print(\\"Exception when calling WorkflowRunsApi.get_workflow_run: %s\\\\n\\" % e)
        pprint(e.body)
        pprint(e.headers)
        pprint(e.status)
        pprint(e.reason)
        pprint(e.round_trip_time)


asyncio.run(main())
\`\`\`


## Reference<a id=\\"reference\\"></a>
### \`leap.workflow_runs.get_workflow_run\`<a id=\\"leapworkflow_runsget_workflow_run\\"></a>

This endpoint retrieves the details of a specific workflow run using its \`workflow_run_id\`.

#### üõ†Ô∏è Usage<a id=\\"üõ†Ô∏è-usage\\"></a>

\`\`\`python
get_workflow_run_response = leap.workflow_runs.get_workflow_run(
    workflow_run_id=\\"workflow_run_id_example\\",
)
\`\`\`

#### ‚öôÔ∏è Parameters<a id=\\"‚öôÔ∏è-parameters\\"></a>

##### workflow_run_id: \`str\`<a id=\\"workflow_run_id-str\\"></a>

The ID of the workflow run to retrieve.

#### üîÑ Return<a id=\\"üîÑ-return\\"></a>

[\`WorkflowRunEntity\`](./leap_workflows/type/workflow_run_entity.py)

#### üåê Endpoint<a id=\\"üåê-endpoint\\"></a>

\`/v1/runs/{workflow_run_id}\` \`get\`

[üîô **Back to Table of Contents**](#table-of-contents)

---

### \`leap.workflow_runs.workflow\`<a id=\\"leapworkflow_runsworkflow\\"></a>

This endpoint lets the user run a specified workflow with the provided workflow definition.

#### üõ†Ô∏è Usage<a id=\\"üõ†Ô∏è-usage\\"></a>

\`\`\`python
workflow_response = leap.workflow_runs.workflow(
    workflow_id=\\"123e4567-e89b-12d3-a456-426614174000\\",
    webhook_url=\\"https://myapp.com/webhook\\",
    input={
        \\"first_name\\": \\"Sam\\",
        \\"last_name\\": \\"Altman\\",
    },
)
\`\`\`

#### ‚öôÔ∏è Parameters<a id=\\"‚öôÔ∏è-parameters\\"></a>

##### workflow_id: \`str\`<a id=\\"workflow_id-str\\"></a>

The UUID of the workflow to be run.

##### webhook_url: \`str\`<a id=\\"webhook_url-str\\"></a>

The URL to which the workflow results should be sent to on completion.

##### input: [\`WorkflowRunPostRequestInput\`](./leap_workflows/type/workflow_run_post_request_input.py)<a id=\\"input-workflowrunpostrequestinputleap_workflowstypeworkflow_run_post_request_inputpy\\"></a>

#### ‚öôÔ∏è Request Body<a id=\\"‚öôÔ∏è-request-body\\"></a>

[\`WorkflowRunPostRequest\`](./leap_workflows/type/workflow_run_post_request.py)
#### üîÑ Return<a id=\\"üîÑ-return\\"></a>

[\`WorkflowRunEntity\`](./leap_workflows/type/workflow_run_entity.py)

#### üåê Endpoint<a id=\\"üåê-endpoint\\"></a>

\`/v1/runs\` \`post\`

[üîô **Back to Table of Contents**](#table-of-contents)

---


## Author<a id=\\"author\\"></a>
This Python package is automatically generated by [Konfig](https://konfigthis.com)
"
`;

exports[`leap-workflows-sdks 2`] = `
"# @leap-ai/workflows<a id=\\"leap-aiworkflows\\"></a>

The Leap Workflows API allows developers to run workflows, fetch workflow runs, and provide other utility functions related to workflow runs. Please use the X-Api-Key for authenticated requests.

[![npm](https://img.shields.io/badge/npm-v1.0.0-blue)](https://www.npmjs.com/package/@leap-ai/workflows/v/1.0.0)
[![More Info](https://img.shields.io/badge/More%20Info-Click%20Here-orange)](https://tryleap.ai/)

## Table of Contents<a id=\\"table-of-contents\\"></a>

<!-- toc -->

- [Installing](#installing)
  * [npm](#npm)
  * [yarn](#yarn)
- [Getting Started](#getting-started)
- [Reference](#reference)
  * [\`leap.workflowRuns.getWorkflowRun\`](#leapworkflowrunsgetworkflowrun)
  * [\`leap.workflowRuns.workflow\`](#leapworkflowrunsworkflow)

<!-- tocstop -->

## Installing<a id=\\"installing\\"></a>

### npm<a id=\\"npm\\"></a>
\`\`\`
npm install @leap-ai/workflows --save
\`\`\`

### yarn<a id=\\"yarn\\"></a>
\`\`\`
yarn add @leap-ai/workflows
\`\`\`

## Getting Started<a id=\\"getting-started\\"></a>

\`\`\`typescript
import { Leap } from \\"@leap-ai/workflows\\";

const leap = new Leap({
  // Defining the base path is optional and defaults to https://api.workflows.tryleap.ai
  // basePath: \\"https://api.workflows.tryleap.ai\\",
  apiKey: \\"API_KEY\\",
});

const getWorkflowRunResponse = await leap.workflowRuns.getWorkflowRun({
  workflowRunId: \\"workflowRunId_example\\",
});

console.log(getWorkflowRunResponse);
\`\`\`

## Reference<a id=\\"reference\\"></a>


### \`leap.workflowRuns.getWorkflowRun\`<a id=\\"leapworkflowrunsgetworkflowrun\\"></a>

This endpoint retrieves the details of a specific workflow run using its \`workflow_run_id\`.

#### üõ†Ô∏è Usage<a id=\\"üõ†Ô∏è-usage\\"></a>

\`\`\`typescript
const getWorkflowRunResponse = await leap.workflowRuns.getWorkflowRun({
  workflowRunId: \\"workflowRunId_example\\",
});
\`\`\`

#### ‚öôÔ∏è Parameters<a id=\\"‚öôÔ∏è-parameters\\"></a>

##### workflowRunId: \`string\`<a id=\\"workflowrunid-string\\"></a>

The ID of the workflow run to retrieve.

#### üîÑ Return<a id=\\"üîÑ-return\\"></a>

[WorkflowRunEntity](./models/workflow-run-entity.ts)

#### üåê Endpoint<a id=\\"üåê-endpoint\\"></a>

\`/v1/runs/{workflow_run_id}\` \`GET\`

[üîô **Back to Table of Contents**](#table-of-contents)

---


### \`leap.workflowRuns.workflow\`<a id=\\"leapworkflowrunsworkflow\\"></a>

This endpoint lets the user run a specified workflow with the provided workflow definition.

#### üõ†Ô∏è Usage<a id=\\"üõ†Ô∏è-usage\\"></a>

\`\`\`typescript
const workflowResponse = await leap.workflowRuns.workflow({
  workflow_id: \\"123e4567-e89b-12d3-a456-426614174000\\",
  webhook_url: \\"https://myapp.com/webhook\\",
});
\`\`\`

#### ‚öôÔ∏è Parameters<a id=\\"‚öôÔ∏è-parameters\\"></a>

##### workflow_id: \`string\`<a id=\\"workflow_id-string\\"></a>

The UUID of the workflow to be run.

##### webhook_url: \`string\`<a id=\\"webhook_url-string\\"></a>

The URL to which the workflow results should be sent to on completion.

##### input: \`{ [key: string]: any; }\`<a id=\\"input--key-string-any-\\"></a>

Variables that the workflow can use globally and their values.

#### üîÑ Return<a id=\\"üîÑ-return\\"></a>

[WorkflowRunEntity](./models/workflow-run-entity.ts)

#### üåê Endpoint<a id=\\"üåê-endpoint\\"></a>

\`/v1/runs\` \`POST\`

[üîô **Back to Table of Contents**](#table-of-contents)

---


## Author<a id=\\"author\\"></a>
This TypeScript package is automatically generated by [Konfig](https://konfigthis.com)
"
`;
