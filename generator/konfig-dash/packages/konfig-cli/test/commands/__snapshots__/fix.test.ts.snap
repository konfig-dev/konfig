// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`fix empty object as example ignores object-with-no-properties test 1`] = `
"{
  "openapi": "3.0.2",
  "info": {
    "title": "Humanloop API",
    "description": "The Humanloop API allows you to interact with Humanloop from your product or service.\\n\\nYou can do this through HTTP requests from any language or via our official Python SDK.\\n\\nTo install the official Python SDK, run the following command:\\n\\n\`\`\`bash\\npip install humanloop\\n\`\`\`\\n\\n---\\n\\nGuides and further details about key concepts can be found in [our docs](https://humanloop.gitbook.io/humanloop-docs/).",
    "version": "3.0.0",
    "x-konfig-ignore": {
      "object-with-no-properties": true
    }
  },
  "servers": [
    {
      "description": "Production server",
      "url": "https://api.humanloop.com/v3"
    }
  ],
  "tags": [
    {
      "name": "Projects"
    },
    {
      "name": "Organizations"
    },
    {
      "name": "Experiments"
    },
    {
      "name": "Metrics"
    },
    {
      "name": "Model configs"
    },
    {
      "name": "Generate"
    },
    {
      "name": "Logs"
    },
    {
      "name": "Feedback"
    },
    {
      "name": "Tools"
    },
    {
      "description": "The Humanloop API uses API keys for authentication. Visit your \\n[User Settings](https://app.humanloop.com/llama/settings) page to retrieve the\\nAPI key you'll use in your requests.\\n\\nThis key allows full access and control over your projects, so keep this secret\\nand take care to not expose it in any client-side code.\\n\\nTo use your API key, include it under the \`X-API-KEY\` header in your HTTP request.\\n\\n\`\`\`bash\\ncurl https://api.humanloop.com/v3/projects -H 'X-API-KEY: YOUR_API_KEY'\\n\`\`\`\\n\\nIf you're using the Python SDK, initialize the client with your API key before\\nusing other SDK methods:\\n\\n\`\`\`python\\nhl.init(api_key=\\"YOUR_API_KEY\\")\\n\`\`\`",
      "name": "Authentication"
    }
  ],
  "paths": {
    "/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Projects",
        "operationId": "Projects_list",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Retrieve a paginated list of projects associated to your user.",
        "parameters": [
          {
            "description": "Page offset for pagination.",
            "required": false,
            "schema": {
              "title": "Page index",
              "description": "Page offset for pagination.",
              "type": "integer",
              "default": 0
            },
            "name": "page",
            "in": "query"
          },
          {
            "description": "Page size for pagination. Number of projects to fetch.",
            "required": false,
            "schema": {
              "title": "Page size",
              "description": "Page size for pagination. Number of projects to fetch.",
              "type": "integer",
              "default": 10
            },
            "name": "size",
            "in": "query"
          },
          {
            "description": "ID of organization that fetched projects belong to. Starts with \`org_\`.",
            "required": false,
            "schema": {
              "title": "Organization filter",
              "description": "ID of organization that fetched projects belong to. Starts with \`org_\`.",
              "type": "string"
            },
            "name": "organization_id",
            "in": "query"
          },
          {
            "description": "Case-insensitive filter for project name.",
            "required": false,
            "schema": {
              "title": "Project name filter",
              "description": "Case-insensitive filter for project name.",
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "description": "Case-insensitive filter for users in the project. This filter matches against both email address and name of users.",
            "required": false,
            "schema": {
              "title": "User filter",
              "description": "Case-insensitive filter for users in the project. This filter matches against both email address and name of users.",
              "type": "string"
            },
            "name": "user_filter",
            "in": "query"
          },
          {
            "description": "Field to sort projects by",
            "required": false,
            "schema": {
              "title": "Sort by",
              "description": "Field to sort projects by",
              "default": "created_at",
              "$ref": "#/components/schemas/ProjectSortBy"
            },
            "name": "sort_by",
            "in": "query"
          },
          {
            "description": "Direction to sort by.",
            "required": false,
            "schema": {
              "title": "Sort order",
              "description": "Direction to sort by.",
              "default": "desc",
              "$ref": "#/components/schemas/SortOrder"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData_ProjectResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create Project",
        "operationId": "Projects_create",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Creates a new project with the provided name.\\n\\nAn error will be raised if the user is already associated to a project with\\nthat name.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Project",
        "operationId": "Projects_get",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "parameters": [
          {
            "description": "String ID of project. Starts with \`pr_\`.",
            "required": true,
            "schema": {
              "title": "Project ID",
              "description": "String ID of project. Starts with \`pr_\`.",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Projects"
        ],
        "summary": "Update Project",
        "operationId": "Projects_update",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Update the project with the specified ID.\\n\\nSet the project's active model config/experiment by passing either\\n\`active_experiment_id\` or \`active_model_config_id\`.\\n\\nSet the feedback labels to be treated as positive user feedback used in\\ncalculating top-level project metrics by passing a list of labels in\\n\`positive_labels\`.",
        "parameters": [
          {
            "description": "String ID of project. Starts with \`pr_\`.",
            "required": true,
            "schema": {
              "title": "Project ID",
              "description": "String ID of project. Starts with \`pr_\`.",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/model-configs": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Project Model Configs",
        "operationId": "Projects_getModelConfigs",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Get an array of model_configs associated to your project",
        "parameters": [
          {
            "description": "String ID of project. Starts with \`pr_\`.",
            "required": true,
            "schema": {
              "title": "Project ID",
              "description": "String ID of project. Starts with \`pr_\`.",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetModelConfigsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/model-config": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Model Config From Project",
        "operationId": "Projects_getModelConfig",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Retrieves a model config to use to execute your model.\\n\\nA model config will be selected based on the project's\\nactive model config/experiment settings.",
        "parameters": [
          {
            "description": "String ID of project. Starts with \`pr_\`.",
            "required": true,
            "schema": {
              "title": "Project ID",
              "description": "String ID of project. Starts with \`pr_\`.",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetModelConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/active-model-config": {
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete Active Model Config",
        "operationId": "Projects_deleteActiveModelConfig",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Remove the project's active model config, if set.\\n\\nThis has no effect if the project does not have an active model config set.",
        "parameters": [
          {
            "description": "String ID of project. Starts with \`pr_\`.",
            "required": true,
            "schema": {
              "title": "Project ID",
              "description": "String ID of project. Starts with \`pr_\`.",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/active-experiment": {
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete Active Experiment",
        "operationId": "Projects_deleteActiveExperiment",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Remove the project's active experiment, if set.\\n\\nThis has no effect if the project does not have an active experiment set.",
        "parameters": [
          {
            "description": "String ID of project. Starts with \`pr_\`.",
            "required": true,
            "schema": {
              "title": "Project ID",
              "description": "String ID of project. Starts with \`pr_\`.",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/feedback-types": {
      "patch": {
        "tags": [
          "Projects"
        ],
        "summary": "Update Feedback Types",
        "operationId": "Projects_updateFeedbackTypes",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Update feedback types.\\n\\nAllows creation of the default feedback types and setting status of\\nfeedback types/categorical values.\\n\\nThis behaves like an upsert; any feedback categorical values that do not\\nalready exist in the project will be created.",
        "parameters": [
          {
            "description": "String ID of project. Starts with \`pr_\`.",
            "required": true,
            "schema": {
              "title": "Project ID",
              "description": "String ID of project. Starts with \`pr_\`.",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFeedbackTypesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateFeedbackTypesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/export": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Export Datapoints",
        "operationId": "Projects_exportDatapoints",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Export all logged datapoints associated to your project.\\n\\nResults are paginated and sorts the datapoints based on \`created_at\` in\\ndescending order.",
        "parameters": [
          {
            "description": "String ID of project. Starts with \`pr_\`.",
            "required": true,
            "schema": {
              "title": "Project ID",
              "description": "String ID of project. Starts with \`pr_\`.",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Page offset for pagination.",
            "required": false,
            "schema": {
              "title": "Page index",
              "description": "Page offset for pagination.",
              "type": "integer",
              "default": 0
            },
            "name": "page",
            "in": "query"
          },
          {
            "description": "Page size for pagination. Number of logs to export.",
            "required": false,
            "schema": {
              "title": "Page size",
              "description": "Page size for pagination. Number of logs to export.",
              "type": "integer",
              "default": 10
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData_LogResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/generate": {
      "post": {
        "tags": [
          "Generate"
        ],
        "summary": "Generate",
        "operationId": "Generate_generate",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Generates an output from your model and automatically logs the results for feedback later.\\n\\nThe model config used for the generation depends on what parameters were specified. The 4 different behaviours, and the required parameters for each are listed below:\\n\\n1. \`model_config\`:\\n    - The specific model config parameters will be used to link to an existing or create a new model config that will be used for this generation.\\n    - E.g. \`{ \\"model_config\\": { \\"model: \\"text-davinci-002\\", \\"prompt_template\\", \\"parameters\\", ... } }\`\\n2. \`model_config_id\`:\\n    - The ID of an existing model config to be used.\\n    - E.g. \`{ \\"model_config_id\\": \\"config_abcdef1234567\\" }\`\\n3. \`experiment_id\`:\\n    - The ID of an existing experiment. A model config will be sampled from the experiment's list of active model configs.\\n    - E.g. \`{ \\"experiment_id\\": \\"exp_abcdef1234567\\" }\`\\n4. \`project\`:\\n    - A model config will be selected based on the project's deployment settings.\\n    - E.g. \`{ \\"project\\": \\"your-project-name-001\\" }\`\\n\\n\\nThese signatures have been listed in decreasing priority. If multiple signatures are satisfied, the highest priority signature will be used.\\nFor example, if both \`model_config\` and \`experiment_id\` are provided, the \`model_config\`  will be used and the \`experiment_id\` will be ignored.\\n\\n\\nNote that all of the above signatures also require the following parameters: \`project\`, \`inputs\`, \`source\`, and \`provider_api_keys\`.\\nAdditionally, the following parameters are supported: \`num_samples\`, \`logprobs\`, \`suffix\`, \`user\`, and \`metadata\`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/logs": {
      "post": {
        "tags": [
          "Logs"
        ],
        "summary": "Log",
        "operationId": "Logs_log",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Log a datapoint or array of datapoints to your Humanloop project.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Log200Response"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/feedback": {
      "post": {
        "tags": [
          "Feedback"
        ],
        "summary": "Feedback",
        "operationId": "Feedback_submit",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Submit a list of feedback for existing \`data_ids\`",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/model-configs": {
      "post": {
        "tags": [
          "Model configs"
        ],
        "summary": "Register Project Model Config",
        "operationId": "Modelconfigs_register",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Register a model config to a project and optionally add it to an\\nexperiment.\\n\\nIf the project provided does not exist, a new project will be created\\nautomatically.\\nIf an experiment name is provided, the specified experiment must already\\nexist. Otherwise, an error will be raised.\\n\\nIf the model config is the first to be associated to the project, it will\\nbe set as the active model config.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectModelConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectModelConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/model-configs/{id}": {
      "get": {
        "tags": [
          "Model configs"
        ],
        "summary": "Get Model Config",
        "operationId": "Modelconfigs_get",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "parameters": [
          {
            "description": "String ID of the model config. Starts with \`config_\`.",
            "required": true,
            "schema": {
              "title": "Model config ID",
              "description": "String ID of the model config. Starts with \`config_\`.",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/experiments": {
      "get": {
        "tags": [
          "Experiments"
        ],
        "summary": "Get Project Experiments",
        "operationId": "Experiments_list",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Get an array of experiments associated to your project.",
        "parameters": [
          {
            "description": "String ID of project. Starts with \`pr_\`.",
            "required": true,
            "schema": {
              "title": "Project ID",
              "description": "String ID of project. Starts with \`pr_\`.",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Experiments"
        ],
        "summary": "Create Project Experiment",
        "operationId": "Experiments_create",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Create an experiment for your project.\\n\\nYou can optionally specify IDs of your project's model configs to include\\nin the experiment, along with a set of labels to consider as positive feedback\\nand whether the experiment should be set as active.",
        "parameters": [
          {
            "description": "String ID of project. Starts with \`pr_\`.",
            "required": true,
            "schema": {
              "title": "Project ID",
              "description": "String ID of project. Starts with \`pr_\`.",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExperimentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperimentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/experiments/{experiment_id}": {
      "delete": {
        "tags": [
          "Experiments"
        ],
        "summary": "Delete Experiment",
        "operationId": "Experiments_delete",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Delete the experiment with the specified ID.",
        "parameters": [
          {
            "description": "String ID of experiment. Starts with \`exp_\`.",
            "required": true,
            "schema": {
              "title": "Experiment ID",
              "description": "String ID of experiment. Starts with \`exp_\`.",
              "type": "string"
            },
            "name": "experiment_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Experiments"
        ],
        "summary": "Update Experiment",
        "operationId": "Experiments_update",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Update your experiment, including registering and de-registering\\nmodel configs.",
        "parameters": [
          {
            "description": "String ID of experiment. Starts with \`exp_\`.",
            "required": true,
            "schema": {
              "title": "Experiment ID",
              "description": "String ID of experiment. Starts with \`exp_\`.",
              "type": "string"
            },
            "name": "experiment_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExperimentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperimentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/experiments/{experiment_id}/model-config": {
      "get": {
        "tags": [
          "Experiments"
        ],
        "summary": "Get Model Config From Experiment",
        "operationId": "Experiments_getModelConfig",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Retrieves a model config to use to execute your model.\\n\\nA model config will be sampled from the experiment's list of active\\nmodel configs.",
        "parameters": [
          {
            "description": "String ID of experiment. Starts with \`exp_\`.",
            "required": true,
            "schema": {
              "title": "Experiment ID",
              "description": "String ID of experiment. Starts with \`exp_\`.",
              "type": "string"
            },
            "name": "experiment_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetModelConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/metrics": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Get Metrics",
        "operationId": "Metrics_list",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Get an array of existing metrics for a given project.",
        "parameters": [
          {
            "description": "String ID of project. Starts with \`pr_\`.",
            "required": true,
            "schema": {
              "title": "Project ID",
              "description": "String ID of project. Starts with \`pr_\`.",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/List200Response"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Metrics"
        ],
        "summary": "Create Metric",
        "operationId": "Metrics_create",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Create a metric for your project.\\n\\nThe metric will be calculated for all datapoints in the project.",
        "parameters": [
          {
            "description": "String ID of project. Starts with \`pr_\`.",
            "required": true,
            "schema": {
              "title": "Project ID",
              "description": "String ID of project. Starts with \`pr_\`.",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMetricRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/metrics/{metric_id}": {
      "delete": {
        "tags": [
          "Metrics"
        ],
        "summary": "Delete Metric",
        "operationId": "Metrics_delete",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Delete a metric by its ID.",
        "parameters": [
          {
            "description": "String ID of project. Starts with \`pr_\`.",
            "required": true,
            "schema": {
              "title": "Project ID",
              "description": "String ID of project. Starts with \`pr_\`.",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "String ID of metric. Starts with \`metric_\`.",
            "required": true,
            "schema": {
              "title": "Metric ID",
              "description": "String ID of metric. Starts with \`metric_\`.",
              "type": "string"
            },
            "name": "metric_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Metrics"
        ],
        "summary": "Update Metric",
        "operationId": "Metrics_update",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Update a metric by its ID.",
        "parameters": [
          {
            "description": "String ID of project. Starts with \`pr_\`.",
            "required": true,
            "schema": {
              "title": "Project ID",
              "description": "String ID of project. Starts with \`pr_\`.",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "String ID of metric. Starts with \`metric_\`.",
            "required": true,
            "schema": {
              "title": "Metric ID",
              "description": "String ID of metric. Starts with \`metric_\`.",
              "type": "string"
            },
            "name": "metric_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMetricRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{id}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get Organization",
        "operationId": "Organizations_get",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "parameters": [
          {
            "description": "String ID of organization. Starts with \`org_\`.",
            "required": true,
            "schema": {
              "title": "Organization ID",
              "description": "String ID of organization. Starts with \`org_\`.",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Organizations"
        ],
        "summary": "Update Organization",
        "operationId": "Organizations_update",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Update the specified organization.",
        "parameters": [
          {
            "description": "String ID of organization. Starts with \`org_\`.",
            "required": true,
            "schema": {
              "title": "Organization ID",
              "description": "String ID of organization. Starts with \`org_\`.",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{id}/subscriptions": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get Organization Subscriptions",
        "operationId": "Organizations_getSubscriptions",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Fetches an organizations subscriptions.",
        "parameters": [
          {
            "description": "String ID of organization. Starts with \`org_\`.",
            "required": true,
            "schema": {
              "title": "Organization ID",
              "description": "String ID of organization. Starts with \`org_\`.",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubscriptionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{id}/users/{user_id}/role": {
      "put": {
        "tags": [
          "Organizations"
        ],
        "summary": "Update Organization User Role",
        "operationId": "Organizations_updateUserRole",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Updates a user's role in the specified organization.",
        "parameters": [
          {
            "description": "String ID of organization. Starts with \`org_\`.",
            "required": true,
            "schema": {
              "title": "Organization ID",
              "description": "String ID of organization. Starts with \`org_\`.",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "String ID of user. Starts with \`usr_\`.",
            "required": true,
            "schema": {
              "title": "User ID",
              "description": "String ID of user. Starts with \`usr_\`.",
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserOrganizationRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{id}/users/{user_id}": {
      "delete": {
        "tags": [
          "Organizations"
        ],
        "summary": "Remove User From Organization",
        "operationId": "Organizations_removeUser",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Removes a user from the specified organization.",
        "parameters": [
          {
            "description": "String ID of organization. Starts with \`org_\`.",
            "required": true,
            "schema": {
              "title": "Organization ID",
              "description": "String ID of organization. Starts with \`org_\`.",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "String ID of user. Starts with \`usr_\`.",
            "required": true,
            "schema": {
              "title": "User ID",
              "description": "String ID of user. Starts with \`usr_\`.",
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{id}/api-keys": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get Api Keys",
        "operationId": "Organizations_getApiKeys",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Get API keys for the organization.",
        "parameters": [
          {
            "description": "String ID of organization. Starts with \`org_\`.",
            "required": true,
            "schema": {
              "title": "Organization ID",
              "description": "String ID of organization. Starts with \`org_\`.",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetApiKeysResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{id}/tools": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get Organization Tools",
        "operationId": "Organizations_getTools",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Get all active tools for an organization.",
        "parameters": [
          {
            "description": "String ID of organization. Starts with \`org_\`.",
            "required": true,
            "schema": {
              "title": "Organization ID",
              "description": "String ID of organization. Starts with \`org_\`.",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetToolsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Create Organization Tool",
        "operationId": "Organizations_createTool",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Create new organization tool with setup values.",
        "parameters": [
          {
            "description": "String ID of organization. Starts with \`org_\`.",
            "required": true,
            "schema": {
              "title": "Organization ID",
              "description": "String ID of organization. Starts with \`org_\`.",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrgToolRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{id}/tools/{tool_id}": {
      "patch": {
        "tags": [
          "Organizations"
        ],
        "summary": "Update Organization Tool",
        "operationId": "Organizations_updateTool",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Update organization tool.",
        "parameters": [
          {
            "description": "String ID of organization. Starts with \`org_\`.",
            "required": true,
            "schema": {
              "title": "Organization ID",
              "description": "String ID of organization. Starts with \`org_\`.",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique ID of the organization's tool. Starts with \`org_tool\`.",
            "required": true,
            "schema": {
              "title": "Tool ID",
              "description": "Unique ID of the organization's tool. Starts with \`org_tool\`.",
              "type": "string"
            },
            "name": "tool_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrgToolRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tools": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Get Tool Specs",
        "operationId": "Tools_getSpecs",
        "security": [
          {
            "APIKeyHeader": [
            ]
          }
        ],
        "description": "Get all Humanloop provided tool specifications",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSpecsResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActiveSubscriptionResponse": {
        "title": "ActiveSubscriptionResponse",
        "required": [
          "id",
          "status",
          "created_at",
          "product",
          "interval"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "product": {
            "$ref": "#/components/schemas/ProductResponse"
          },
          "interval": {
            "$ref": "#/components/schemas/PaymentInterval"
          },
          "cancel_at_period_end": {
            "title": "Cancel At Period End",
            "type": "boolean"
          }
        }
      },
      "ApiKeyResponse": {
        "title": "ApiKeyResponse",
        "required": [
          "id",
          "name",
          "api_key",
          "organization_id",
          "created_by",
          "created_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "API key ID",
            "description": "String ID of API key. Starts with \`key_\`. This is an ID that can be used to revoke keys, and is not the key itself.",
            "type": "string"
          },
          "name": {
            "title": "API key name",
            "description": "Displayed name of the generated API key.",
            "type": "string"
          },
          "api_key": {
            "title": "API key",
            "description": "The API key. This is censored and will only contain a few leading and trailing characters.",
            "type": "string"
          },
          "organization_id": {
            "title": "Organization ID",
            "description": "String ID of organization that the API key belongs to. Starts with \`org_\`.",
            "type": "string"
          },
          "created_by": {
            "title": "Created by",
            "description": "The user that created the API key.",
            "$ref": "#/components/schemas/UserResponse"
          },
          "last_used": {
            "title": "Last used",
            "description": "The most recent time the API key was used to authenticate a request.",
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BaseMetricResponse": {
        "title": "BaseMetricResponse",
        "required": [
          "id",
          "name",
          "description",
          "code",
          "default",
          "active",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "description": {
            "title": "Metric description",
            "description": "A description of what the metric measures.",
            "type": "string"
          },
          "id": {
            "title": "Metric ID",
            "description": "ID of the metric. Starts with 'metric_'.",
            "type": "string"
          },
          "name": {
            "title": "Metric name",
            "description": "The name of the metric.",
            "type": "string"
          },
          "code": {
            "title": "Metric code",
            "description": "Python code used to calculate a metric value on each logged datapoint.",
            "type": "string"
          },
          "default": {
            "title": "Metric default flag",
            "description": "Whether the metric is a global default metric. Metrics with this flag enabled cannot be deleted or modified.",
            "type": "boolean"
          },
          "active": {
            "title": "Metric active flag",
            "description": "If enabled, the metric is calculated for every logged datapoint.",
            "type": "boolean"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CategoricalFeedbackLabel": {
        "title": "CategoricalFeedbackLabel",
        "required": [
          "value",
          "sentiment"
        ],
        "type": "object",
        "properties": {
          "value": {
            "title": "Label value",
            "type": "string"
          },
          "sentiment": {
            "title": "Feedback label sentiment",
            "description": "Whether the feedback sentiment is positive or negative.",
            "$ref": "#/components/schemas/LabelSentiment"
          }
        }
      },
      "CreateExperimentRequest": {
        "title": "CreateExperimentRequest",
        "required": [
          "name",
          "positive_labels"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Experiment name",
            "description": "Name of experiment.",
            "type": "string"
          },
          "model_config_ids": {
            "title": "Model config IDs",
            "description": "Model configs to add to this experiment. Further model configs can be added later.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "positive_labels": {
            "title": "Positive labels",
            "description": "Feedback labels to treat as positive user feedback. Used to monitor the performance of model configs in the experiment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositiveLabel"
            }
          },
          "set_active": {
            "title": "Set as project's active experiment",
            "description": "Whether to set the created project as the project's active experiment.",
            "type": "boolean",
            "default": false
          }
        }
      },
      "CreateLogResponse": {
        "title": "CreateLogResponse",
        "required": [
          "id",
          "project_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Datapoint ID",
            "description": "String ID of logged datapoint. Starts with \`data_\`.",
            "type": "string"
          },
          "project_id": {
            "title": "Project ID",
            "description": "String ID of project the experiment belongs to. Starts with \`pr_\`.",
            "type": "string"
          }
        }
      },
      "CreateMetricRequest": {
        "title": "CreateMetricRequest",
        "required": [
          "name",
          "description",
          "code"
        ],
        "type": "object",
        "properties": {
          "description": {
            "title": "Metric description",
            "description": "Description of the metric to be created.",
            "type": "string"
          },
          "name": {
            "title": "Metric name",
            "description": "Name of the metric to be created.",
            "type": "string"
          },
          "code": {
            "title": "Metric code",
            "description": "Python code used to calculate a metric value on each logged datapoint. The last defined function in the code block will be called with a \`log\` dict, and should return a number, or \`None\`.",
            "type": "string"
          }
        }
      },
      "CreateOrgToolRequest": {
        "title": "CreateOrgToolRequest",
        "required": [
          "spec"
        ],
        "type": "object",
        "properties": {
          "description": {
            "title": "Tool description",
            "description": "Organization's description for the tool. If not provided, the spec description will be used",
            "type": "string"
          },
          "name": {
            "title": "Tool name",
            "description": "Organizations name for the tool. If not provided, the spec name will be used",
            "type": "string"
          },
          "func_name": {
            "title": "Function name",
            "description": "Name of the function as it called",
            "type": "string"
          },
          "setup_values": {
            "title": "Tool setup values",
            "description": "Any setup values needed to set the tool as active - retrieve what setup values are required from GET on v3/tools",
            "type": "object"
          },
          "status": {
            "title": "Tool status",
            "description": "Whether the tool has been set up by the org.",
            "$ref": "#/components/schemas/OrganizationToolStatus"
          },
          "spec": {
            "title": "Spec name",
            "description": "Unique name of tool spec. Retrieve from GET on /v3/tools",
            "type": "string"
          }
        }
      },
      "CreateProjectRequest": {
        "title": "CreateProjectRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Project name",
            "description": "Unique project name.",
            "type": "string"
          },
          "feedback_types": {
            "title": "Feedback types",
            "description": "Feedback types to be created.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeedbackTypeRequest"
            }
          }
        }
      },
      "DataResponse": {
        "title": "DataResponse",
        "required": [
          "id",
          "index",
          "output",
          "raw_output",
          "inputs",
          "model_config_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Data ID",
            "description": "Unique ID for the model inputs and output logged to Humanloop. Use this when recording feedback later.",
            "type": "string"
          },
          "index": {
            "title": "Sample index",
            "description": "The index for the sampled generation for a given input. The num_samples request parameter controls how many samples are generated.",
            "type": "integer"
          },
          "output": {
            "title": "Sanitized output text",
            "description": "Output text returned from the provider model with leading and trailing whitespaces stripped.",
            "type": "string"
          },
          "raw_output": {
            "title": "Provider's output text",
            "description": "Raw output text returned from the provider model.",
            "type": "string"
          },
          "inputs": {
            "title": "Inputs",
            "description": "The inputs passed to the prompt template to send to provider model.",
            "type": "object"
          },
          "finish_reason": {
            "title": "Finish reason",
            "description": "Why the completion ended. Usually one of 'stop' (indicating a stop token was encountered), or 'length' (indicating the max tokens limit has been reached). It will be set as null for the intermediary responses during a stream, and will only be set as non-null for the final streamed token.",
            "type": "string"
          },
          "model_config_id": {
            "title": "The ID of your model configuration",
            "description": "The model configuration used to create the generation.",
            "type": "string"
          },
          "tools": {
            "title": "Tool results",
            "description": "Results of any tools run during the generation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolResultResponse"
            }
          }
        }
      },
      "ExperimentGenerate": {
        "title": "ExperimentGenerate",
        "required": [
          "project",
          "inputs",
          "provider_api_keys",
          "experiment_id"
        ],
        "type": "object",
        "properties": {
          "project": {
            "title": "Project name",
            "description": "Unique project name. The model configuration will be added to the project if necessary.",
            "type": "string"
          },
          "inputs": {
            "title": "Model input data",
            "description": "List of name, value pairs for the inputs used by your prompt template, or directly by your model.",
            "type": "object"
          },
          "source": {
            "title": "Source",
            "description": "What was source of the model used for this generation?e.g. website-landing-page",
            "type": "string"
          },
          "provider_api_keys": {
            "title": "Provider API Keys",
            "description": "API keys required by each provider to make API calls. These API keys are not stored by Humanloop.",
            "$ref": "#/components/schemas/ProviderApiKeys"
          },
          "num_samples": {
            "title": "Number of samples",
            "description": "How many generations to make for each set of inputs. Each generate will sample a model config for an experiment.",
            "type": "integer",
            "default": 1
          },
          "logprobs": {
            "title": "Log probabilities of most likely n tokens",
            "description": "Include the log probabilities of the top n tokens in the provider_response",
            "type": "integer"
          },
          "stream": {
            "title": "Whether to stream partial results",
            "description": "If true, tokens will be sent as data-only server-sent events as they become available. If num_samples > 1, samples are streamed back independently. The stream for each sample will be terminated with a non-null finish_reason.",
            "type": "boolean",
            "default": false
          },
          "suffix": {
            "title": "Completion suffix",
            "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts.",
            "type": "string"
          },
          "user": {
            "title": "End-user identifier",
            "description": "End-user id passed through to provider call.",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Any additional metadata that you would like to log for reference.",
            "type": "object"
          },
          "experiment_id": {
            "title": "ID of experiment",
            "description": "If an experiment ID is provided a model configuration will be sampled from the experiments active model configurations.",
            "type": "string"
          }
        }
      },
      "ExperimentModelConfigResponse": {
        "title": "ExperimentModelConfigResponse",
        "required": [
          "trials_count",
          "active",
          "id",
          "display_name",
          "model_config",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "mean": {
            "title": "Mean of experiment's metric",
            "description": "The mean performance of the model config, as measured by the experiment's metric.",
            "type": "number"
          },
          "spread": {
            "title": "Spread of experiment's metric",
            "description": "The spread of performance of the model config, as measured by the experiment's metric. A measure of the uncertainty in the model config's performance.",
            "type": "number"
          },
          "trials_count": {
            "title": "The number of trials that have happened in this experiment",
            "description": "Number of datapoints with feedback associated to this experiment.",
            "type": "integer"
          },
          "active": {
            "title": "Model config active",
            "description": "Whether the model config is active in the experiment. Only active model configs can be sampled from the experiment.",
            "type": "boolean"
          },
          "id": {
            "title": "Model config ID",
            "description": "String ID of model config. Starts with \`config_\`.",
            "type": "string"
          },
          "display_name": {
            "title": "Display name",
            "description": "Display name of model config. If this is not set by the user, a friendly name will be generated.",
            "type": "string"
          },
          "model_config": {
            "title": "Model config",
            "description": "Full definition of model config used in the experiment.",
            "$ref": "#/components/schemas/ModelConfigResponse"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ExperimentResponse": {
        "title": "ExperimentResponse",
        "required": [
          "id",
          "project_id",
          "name",
          "status",
          "metric",
          "positive_labels",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Experiment ID",
            "description": "String ID of experiment. Starts with \`exp_\`.",
            "type": "string"
          },
          "project_id": {
            "title": "Project ID",
            "description": "String ID of project the experiment belongs to. Starts with \`pr_\`.",
            "type": "string"
          },
          "name": {
            "title": "Experiment name",
            "description": "Name of experiment.",
            "type": "string"
          },
          "status": {
            "title": "Experiment status",
            "description": "Status of experiment.",
            "$ref": "#/components/schemas/ExperimentStatus"
          },
          "model_configs": {
            "title": "Experiment model configs",
            "description": "List of model configs associated to the experiment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperimentModelConfigResponse"
            }
          },
          "metric": {
            "title": "Experiment metric",
            "description": "Metric used as the experiment's objective.",
            "$ref": "#/components/schemas/BaseMetricResponse"
          },
          "positive_labels": {
            "title": "Positive labels",
            "description": "Feedback labels to treat as positive user feedback. Used to monitor the performance of model configs in the experiment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositiveLabel"
            }
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ExperimentStatus": {
        "title": "ExperimentStatus",
        "description": "An enumeration.",
        "enum": [
          "Initialized",
          "In progress"
        ],
        "type": "string"
      },
      "Feedback": {
        "title": "Feedback",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Feedback type",
            "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeedbackType"
              },
              {
                "type": "string"
              }
            ]
          },
          "value": {
            "title": "Feedback value",
            "description": "The feedback value to set. This would be the appropriate text for 'correction' or 'comment', or a label to apply for 'rating', 'action', or 'issue'.",
            "type": "string"
          },
          "data_id": {
            "title": "Datapoint ID",
            "description": "ID to associate the feedback to a previously logged datapoint.When providing instant feedback as part of the hl.log(...) call you don't need to provide a data_id.",
            "type": "string"
          },
          "user": {
            "title": "User",
            "description": "A unique identifier to who provided the feedback. This gets passed through to the provider as required.",
            "type": "string"
          },
          "created_at": {
            "title": "Created at",
            "description": "Timestamp for when the feedback was created. If not provided, the time the call was made will be used as a timestamp.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "FeedbackClass": {
        "title": "FeedbackClass",
        "description": "An enumeration.",
        "enum": [
          "select",
          "multi_select",
          "text"
        ],
        "type": "string"
      },
      "FeedbackLabelRequest": {
        "title": "FeedbackLabelRequest",
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "title": "Value",
            "type": "string"
          },
          "sentiment": {
            "$ref": "#/components/schemas/LabelSentiment"
          }
        }
      },
      "FeedbackRequest": {
        "title": "FeedbackRequest",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Feedback type",
            "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeedbackType"
              },
              {
                "type": "string"
              }
            ]
          },
          "value": {
            "title": "Feedback value",
            "description": "The feedback value to be set. This field should be left blank when unsetting 'rating', 'correction' or 'comment', but is required otherwise.",
            "type": "string"
          },
          "data_id": {
            "title": "Datapoint ID",
            "description": "ID to associate the feedback to a previously logged datapoint.When providing instant feedback as part of the hl.log(...) call you don't need to provide a data_id.",
            "type": "string"
          },
          "user": {
            "title": "User",
            "description": "A unique identifier to who provided the feedback. This gets passed through to the provider as required.",
            "type": "string"
          },
          "created_at": {
            "title": "Created at",
            "description": "Timestamp for when the feedback was created. If not provided, the time the call was made will be used as a timestamp.",
            "type": "string",
            "format": "date-time"
          },
          "unset": {
            "title": "Unset",
            "description": "If true, the value for this feedback type is unset.",
            "type": "boolean"
          }
        }
      },
      "FeedbackResponse": {
        "title": "FeedbackResponse",
        "required": [
          "type",
          "value",
          "id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Feedback type",
            "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeedbackType"
              },
              {
                "type": "string"
              }
            ]
          },
          "value": {
            "title": "Feedback value",
            "description": "The feedback value to set. This would be the appropriate text for 'correction' or 'comment', or a label to apply for 'rating', 'action', or 'issue'.",
            "type": "string"
          },
          "data_id": {
            "title": "Datapoint ID",
            "description": "ID to associate the feedback to a previously logged datapoint.When providing instant feedback as part of the hl.log(...) call you don't need to provide a data_id.",
            "type": "string"
          },
          "user": {
            "title": "User",
            "description": "A unique identifier to who provided the feedback. This gets passed through to the provider as required.",
            "type": "string"
          },
          "created_at": {
            "title": "Created at",
            "description": "Timestamp for when the feedback was created. If not provided, the time the call was made will be used as a timestamp.",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "title": "Feedback ID",
            "description": "String ID of user feedback. Starts with \`ann_\`, short for annotation.",
            "type": "string"
          }
        }
      },
      "FeedbackType": {
        "title": "FeedbackType",
        "description": "An enumeration.",
        "enum": [
          "rating",
          "action",
          "issue",
          "correction",
          "comment"
        ],
        "type": "string"
      },
      "FeedbackTypeModel": {
        "title": "FeedbackTypeModel",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Feedback type",
            "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeedbackType"
              },
              {
                "type": "string"
              }
            ]
          },
          "values": {
            "title": "Allowed values for categorical feedback types",
            "description": "The allowed values for categorical feedback types. Not populated for \`correction\` and \`comment\`.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoricalFeedbackLabel"
            }
          }
        }
      },
      "FeedbackTypeRequest": {
        "title": "FeedbackTypeRequest",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Feedback type",
            "description": "The type of feedback to update.",
            "type": "string"
          },
          "values": {
            "title": "Feedback label values",
            "description": "The feedback values to be available. This field should only be populated when updating a 'select' or 'multi_select' feedback class.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeedbackLabelRequest"
            }
          },
          "class": {
            "title": "Feedback class",
            "description": "The data type associated to this feedback type; whether it is a 'text'/'select'/'multi_select'. This is optional when updating the default feedback types (i.e. when \`type\` is 'rating', 'action' or 'issue').",
            "$ref": "#/components/schemas/FeedbackClass"
          }
        }
      },
      "FeedbackTypes": {
        "title": "FeedbackTypes",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/FeedbackTypeModel"
        }
      },
      "GenerateResponse": {
        "title": "GenerateResponse",
        "required": [
          "project_id",
          "data",
          "provider_responses"
        ],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project id",
            "description": "Unique identifier of the parent project.",
            "type": "string"
          },
          "num_samples": {
            "title": "Number of samples",
            "description": "How many generates to make for each set of inputs.",
            "type": "integer",
            "default": 1
          },
          "logprobs": {
            "title": "Log probabilities of most likely n tokens",
            "description": "Include the log probabilities of the top n tokens in the provider_response",
            "type": "integer"
          },
          "suffix": {
            "title": "Completion suffix",
            "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts.",
            "type": "string"
          },
          "user": {
            "title": "End-user identifier",
            "description": "End-user id passed through to provider call.",
            "type": "string"
          },
          "data": {
            "title": "Logged data",
            "description": "Array containing the details of the resulting generations.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataResponse"
            }
          },
          "usage": {
            "title": "Usage",
            "description": "Counts of the number of tokens used and related stats.",
            "$ref": "#/components/schemas/GenerateUsage"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Any additional metadata that you would like to log for reference.",
            "type": "object"
          },
          "provider_responses": {
            "title": "Provider responses",
            "description": "The full raw responses provided by the calls to the provider.",
            "type": "array",
            "items": {
            }
          }
        }
      },
      "GenerateUsage": {
        "title": "GenerateUsage",
        "required": [
          "prompt_tokens",
          "generation_tokens",
          "total_tokens"
        ],
        "type": "object",
        "properties": {
          "prompt_tokens": {
            "title": "Prompt tokens",
            "description": "Number of tokens used in the prompt.",
            "type": "integer"
          },
          "generation_tokens": {
            "title": "Generation tokens",
            "description": "Number of tokens produced by the generation.",
            "type": "integer"
          },
          "total_tokens": {
            "title": "Total tokens",
            "description": "Total number of tokens used by the prompt and generation combined.",
            "type": "integer"
          }
        }
      },
      "GetModelConfigResponse": {
        "title": "GetModelConfigResponse",
        "description": "A selected model configuration.\\n\\nIf the model configuration was selected in the context of an experiment,\\nthe response will include a trial_id to associate a subsequent log() call.",
        "required": [
          "model",
          "prompt_template",
          "id",
          "created_at",
          "updated_at",
          "last_used"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "title": "Model provider",
            "description": "The company providing the underlying model service.",
            "default": "openai",
            "$ref": "#/components/schemas/ModelProviders"
          },
          "endpoint": {
            "title": "Provider endpoint",
            "description": "Which of the providers model endpoints to use. For example Complete or Edit.",
            "default": "complete",
            "$ref": "#/components/schemas/ModelEndpoints"
          },
          "model": {
            "title": "Model instance used",
            "description": "What model instance to use for the generation. e.g. text-davinci-002.",
            "type": "string"
          },
          "prompt_template": {
            "title": "Prompt template",
            "description": "Prompt template that will take your specified inputs to form your final request to the provider model. NB: Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}.",
            "type": "string"
          },
          "temperature": {
            "title": "Sampling temperature",
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "type": "number",
            "default": 1
          },
          "max_tokens": {
            "title": "Maximum tokens",
            "description": "The maximum number of tokens to generate in the completion.",
            "type": "integer",
            "default": 16
          },
          "top_p": {
            "title": "Top p probability mass",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "type": "number",
            "default": 1
          },
          "stop": {
            "title": "Stop sequence(s)",
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "presence_penalty": {
            "title": "Penalize tokens on whether present.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "type": "number",
            "default": 0
          },
          "frequency_penalty": {
            "title": "Penalize tokens on whether frequent.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "type": "number",
            "default": 0
          },
          "other": {
            "title": "Other provider parameters",
            "description": "Other parameter values to be passed to the provider call.",
            "type": "object",
            "default": {
            }
          },
          "id": {
            "title": "Model config ID",
            "description": "Model config unique identifier generated by Humanloop.",
            "type": "string"
          },
          "display_name": {
            "title": "Model config name",
            "description": "A friendly display name for the model config.",
            "type": "string"
          },
          "project_id": {
            "title": "Project ID",
            "description": "String ID of project the model config belongs to. Starts with \`pr_\`.",
            "type": "string"
          },
          "project_name": {
            "title": "Project name",
            "description": "Name of the project the model config belongs to.",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          },
          "last_used": {
            "title": "Last Used",
            "type": "string",
            "format": "date-time"
          },
          "feedback_stats": {
            "title": "Feedback Stats",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectModelConfigFeedbackStatsResponse"
            }
          },
          "experiment_id": {
            "title": "Experiment ID",
            "description": "The ID of the experiment the model config has been registered to. Only populated when registering a model config to an experiment.",
            "type": "string"
          },
          "trial_id": {
            "title": "Trial ID",
            "description": "ID of trial to reference in subsequent log calls.",
            "type": "string"
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "LabelSentiment": {
        "title": "LabelSentiment",
        "description": "How a label should be treated in calculating model config performance.\\n\\nUsed by a project's PAPV metric.",
        "enum": [
          "positive",
          "negative",
          "neutral",
          "unset"
        ],
        "type": "string"
      },
      "LogRequest": {
        "title": "LogRequest",
        "required": [
          "project",
          "inputs",
          "output"
        ],
        "type": "object",
        "properties": {
          "project": {
            "title": "Project name",
            "description": "Unique project name. If it does not exist, a new project will be created.",
            "type": "string"
          },
          "trial_id": {
            "title": "Trial ID",
            "description": "Unique ID of trial to associate to a log to inform an experiment.",
            "type": "string"
          },
          "inputs": {
            "title": "Model input data",
            "description": "List of (name, value) pairs for the inputs used by your prompt template, or directly by your model.",
            "type": "object"
          },
          "output": {
            "title": "Model output",
            "description": "Generated output from your model for the provided inputs.",
            "type": "string"
          },
          "source": {
            "title": "Source of generation",
            "description": "What was source of the model used for this generation? e.g. website-landing-page",
            "type": "string"
          },
          "model_config": {
            "title": "Model config",
            "description": "The model config used for this generation. Required unless \`trial_id\` is provided.",
            "$ref": "#/components/schemas/ModelConfigRequest"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Any additional metadata that you would like to log for reference.",
            "type": "object"
          },
          "feedback": {
            "title": "Feedback labels",
            "description": "Optional parameter to provide feedback with your logged datapoint.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/Feedback"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Feedback"
                }
              }
            ]
          },
          "created_at": {
            "title": "Created at",
            "description": "Timestamp for when the log was created. If not provided, the time the log call was made will be used as a timestamp.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "LogResponse": {
        "title": "LogResponse",
        "required": [
          "project",
          "inputs",
          "output",
          "id",
          "project_id"
        ],
        "type": "object",
        "properties": {
          "project": {
            "title": "Project name",
            "description": "Unique project name. If it does not exist, a new project will be created.",
            "type": "string"
          },
          "trial_id": {
            "title": "Trial ID",
            "description": "Unique ID of trial to associate to a log to inform an experiment.",
            "type": "string"
          },
          "inputs": {
            "title": "Model input data",
            "description": "List of (name, value) pairs for the inputs used by your prompt template, or directly by your model.",
            "type": "object"
          },
          "output": {
            "title": "Model output",
            "description": "Generated output from your model for the provided inputs.",
            "type": "string"
          },
          "source": {
            "title": "Source of generation",
            "description": "What was source of the model used for this generation? e.g. website-landing-page",
            "type": "string"
          },
          "model_config": {
            "title": "Model config",
            "description": "The model config used for this generation",
            "$ref": "#/components/schemas/ProjectModelConfigResponse"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Additional metadata logged for reference.",
            "type": "object"
          },
          "feedback": {
            "title": "Feedback",
            "description": "Feedback associated to the datapoint.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/Feedback"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Feedback"
                }
              }
            ]
          },
          "created_at": {
            "title": "Created at",
            "description": "Timestamp for when the log was created.",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "title": "Datapoint ID",
            "description": "String ID of logged datapoint. Starts with \`data_\`.",
            "type": "string"
          },
          "project_id": {
            "title": "Project ID",
            "description": "String ID of project the datapoint belongs to. Starts with \`pr_\`.",
            "type": "string"
          }
        }
      },
      "MetricExperimentResponse": {
        "title": "MetricExperimentResponse",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Experiment ID",
            "description": "String ID of experiment. Starts with \`exp_\`.",
            "type": "string"
          },
          "name": {
            "title": "Experiment name",
            "description": "Name of experiment.",
            "type": "string"
          }
        }
      },
      "MetricResponse": {
        "title": "MetricResponse",
        "required": [
          "id",
          "name",
          "description",
          "code",
          "default",
          "active",
          "created_at",
          "updated_at",
          "experiments",
          "num_values"
        ],
        "type": "object",
        "properties": {
          "description": {
            "title": "Metric description",
            "description": "A description of what the metric measures.",
            "type": "string"
          },
          "id": {
            "title": "Metric ID",
            "description": "ID of the metric. Starts with 'metric_'.",
            "type": "string"
          },
          "name": {
            "title": "Metric name",
            "description": "The name of the metric.",
            "type": "string"
          },
          "code": {
            "title": "Metric code",
            "description": "Python code used to calculate a metric value on each logged datapoint.",
            "type": "string"
          },
          "default": {
            "title": "Metric default flag",
            "description": "Whether the metric is a global default metric. Metrics with this flag enabled cannot be deleted or modified.",
            "type": "boolean"
          },
          "active": {
            "title": "Metric active flag",
            "description": "If enabled, the metric is calculated for every logged datapoint.",
            "type": "boolean"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          },
          "experiments": {
            "title": "Experiments using the metric",
            "description": "List of experiments optimizing for this metric.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricExperimentResponse"
            }
          },
          "num_values": {
            "title": "Number of values",
            "description": "Number of datapoints this metric has been calculated on. This does not include datapoints where the metric returned \`None\`.",
            "type": "integer"
          }
        }
      },
      "ModelConfigGenerate": {
        "title": "ModelConfigGenerate",
        "required": [
          "project",
          "inputs",
          "provider_api_keys",
          "model_config_id"
        ],
        "type": "object",
        "properties": {
          "project": {
            "title": "Project name",
            "description": "Unique project name. The model configuration will be added to the project if necessary.",
            "type": "string"
          },
          "inputs": {
            "title": "Model input data",
            "description": "List of name, value pairs for the inputs used by your prompt template, or directly by your model.",
            "type": "object"
          },
          "source": {
            "title": "Source",
            "description": "What was source of the model used for this generation?e.g. website-landing-page",
            "type": "string"
          },
          "provider_api_keys": {
            "title": "Provider API Keys",
            "description": "API keys required by each provider to make API calls. These API keys are not stored by Humanloop.",
            "$ref": "#/components/schemas/ProviderApiKeys"
          },
          "num_samples": {
            "title": "Number of samples",
            "description": "How many generations to make for each set of inputs for the specified model config.",
            "type": "integer",
            "default": 1
          },
          "logprobs": {
            "title": "Log probabilities of most likely n tokens",
            "description": "Include the log probabilities of the top n tokens in the provider_response",
            "type": "integer"
          },
          "stream": {
            "title": "Whether to stream partial results",
            "description": "If true, tokens will be sent as data-only server-sent events as they become available. If num_samples > 1, samples are streamed back independently. The stream for each sample will be terminated with a non-null finish_reason.",
            "type": "boolean",
            "default": false
          },
          "suffix": {
            "title": "Completion suffix",
            "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts.",
            "type": "string"
          },
          "user": {
            "title": "End-user identifier",
            "description": "End-user id passed through to provider call.",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Any additional metadata that you would like to log for reference.",
            "type": "object"
          },
          "model_config_id": {
            "title": "ID of a model config",
            "description": "The model configuration specified will be used to create a generation.",
            "type": "string"
          }
        }
      },
      "ModelConfigRequest": {
        "title": "ModelConfigRequest",
        "description": "Core ModelConfig request model.\\nFollowing closely: https://beta.openai.com/docs/api-reference/completions/create",
        "required": [
          "model",
          "prompt_template"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "title": "Model provider",
            "description": "The company providing the underlying model service.",
            "default": "openai",
            "$ref": "#/components/schemas/ModelProviders"
          },
          "endpoint": {
            "title": "Provider endpoint",
            "description": "Which of the providers model endpoints to use. For example Complete or Edit.",
            "default": "complete",
            "$ref": "#/components/schemas/ModelEndpoints"
          },
          "model": {
            "title": "Model instance used",
            "description": "What model instance to use for the generation. e.g. text-davinci-002.",
            "type": "string"
          },
          "prompt_template": {
            "title": "Prompt template",
            "description": "Prompt template that will take your specified inputs to form your final request to the provider model. NB: Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}.",
            "type": "string"
          },
          "temperature": {
            "title": "Sampling temperature",
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "type": "number",
            "default": 1
          },
          "max_tokens": {
            "title": "Maximum tokens",
            "description": "The maximum number of tokens to generate in the completion.",
            "type": "integer",
            "default": 16
          },
          "top_p": {
            "title": "Top p probability mass",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "type": "number",
            "default": 1
          },
          "stop": {
            "title": "Stop sequence(s)",
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "presence_penalty": {
            "title": "Penalize tokens on whether present.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "type": "number",
            "default": 0
          },
          "frequency_penalty": {
            "title": "Penalize tokens on whether frequent.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "type": "number",
            "default": 0
          },
          "other": {
            "title": "Other provider parameters",
            "description": "Other parameter values to be passed to the provider call.",
            "type": "object",
            "default": {
            }
          }
        }
      },
      "ModelConfigResponse": {
        "title": "ModelConfigResponse",
        "description": "Extends the core ModelConfig request object to include Humanloop generated\\nidentifier and method for serializing response from ModelConfig domain object.",
        "required": [
          "model",
          "prompt_template",
          "id"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "title": "Model provider",
            "description": "The company providing the underlying model service.",
            "default": "openai",
            "$ref": "#/components/schemas/ModelProviders"
          },
          "endpoint": {
            "title": "Provider endpoint",
            "description": "Which of the providers model endpoints to use. For example Complete or Edit.",
            "default": "complete",
            "$ref": "#/components/schemas/ModelEndpoints"
          },
          "model": {
            "title": "Model instance used",
            "description": "What model instance to use for the generation. e.g. text-davinci-002.",
            "type": "string"
          },
          "prompt_template": {
            "title": "Prompt template",
            "description": "Prompt template that will take your specified inputs to form your final request to the provider model. NB: Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}.",
            "type": "string"
          },
          "temperature": {
            "title": "Sampling temperature",
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "type": "number",
            "default": 1
          },
          "max_tokens": {
            "title": "Maximum tokens",
            "description": "The maximum number of tokens to generate in the completion.",
            "type": "integer",
            "default": 16
          },
          "top_p": {
            "title": "Top p probability mass",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "type": "number",
            "default": 1
          },
          "stop": {
            "title": "Stop sequence(s)",
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "presence_penalty": {
            "title": "Penalize tokens on whether present.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "type": "number",
            "default": 0
          },
          "frequency_penalty": {
            "title": "Penalize tokens on whether frequent.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "type": "number",
            "default": 0
          },
          "other": {
            "title": "Other provider parameters",
            "description": "Other parameter values to be passed to the provider call.",
            "type": "object",
            "default": {
            }
          },
          "id": {
            "title": "Model config ID",
            "description": "Model config unique identifier generated by Humanloop.",
            "type": "string"
          },
          "display_name": {
            "title": "Model config name",
            "description": "A friendly display name for the model config.",
            "type": "string"
          }
        }
      },
      "ModelEndpoints": {
        "title": "ModelEndpoints",
        "description": "Supported model provider endpoints.",
        "enum": [
          "complete",
          "edit"
        ],
        "type": "string"
      },
      "ModelProviders": {
        "title": "ModelProviders",
        "description": "Supported model providers.",
        "enum": [
          "openai",
          "ai21",
          "mock",
          "anthropic"
        ],
        "type": "string"
      },
      "OrganizationResponse": {
        "title": "OrganizationResponse",
        "required": [
          "name",
          "id",
          "created_at",
          "updated_at",
          "teams",
          "users"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Organization name",
            "type": "string"
          },
          "slug": {
            "title": "Organization unique slug",
            "description": "A unique slug that will be used for the organization. Only accepts letters, numbers, and hyphens.",
            "type": "string"
          },
          "id": {
            "title": "Organization ID",
            "description": "String ID of organization. Starts with \`org_\`.",
            "type": "string"
          },
          "active_subscription": {
            "title": "Active subscription",
            "description": "The active subscription of the organization including product information. If None the org has no active subscription.",
            "$ref": "#/components/schemas/ActiveSubscriptionResponse"
          },
          "customer_id": {
            "title": "Stripe customer ID",
            "description": "The customer ID of the organization in stripe. None if they have never made a subscription.",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          },
          "teams": {
            "title": "Teams",
            "description": "Teams associated to this organization.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamResponse"
            }
          },
          "users": {
            "title": "Users",
            "description": "Users in this organization",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationUserResponse"
            }
          }
        }
      },
      "OrganizationToolResponse": {
        "title": "OrganizationToolResponse",
        "required": [
          "id",
          "name",
          "description",
          "signature",
          "status",
          "spec"
        ],
        "type": "object",
        "properties": {
          "description": {
            "title": "Org tool description",
            "description": "Organization's description for the tool.",
            "type": "string"
          },
          "id": {
            "title": "Organization tool ID",
            "description": "Unique ID for the orgs tool setup.",
            "type": "string"
          },
          "name": {
            "title": "Org tool name",
            "description": "Organization's name for the tool.",
            "type": "string"
          },
          "signature": {
            "title": "Org tool signature",
            "description": "The call signature for the tool of its name and parameters which is used to call the tool from the \`prompt_template\`.",
            "type": "string"
          },
          "status": {
            "title": "Tool status",
            "description": "Whether the tool has been set up by the org.",
            "$ref": "#/components/schemas/OrganizationToolStatus"
          },
          "setup_values": {
            "title": "Setup values",
            "description": "Values used to set up the tool - following the spec's setup model.",
            "type": "object"
          },
          "spec": {
            "title": "Tool spec",
            "description": "The specification of the tool's requirements for setup and execution.",
            "$ref": "#/components/schemas/ToolSpecResponse"
          }
        }
      },
      "OrganizationToolStatus": {
        "title": "OrganizationToolStatus",
        "description": "An enumeration.",
        "enum": [
          "active",
          "inactive"
        ],
        "type": "string"
      },
      "OrganizationUserResponse": {
        "title": "OrganizationUserResponse",
        "required": [
          "id",
          "email_address",
          "verified",
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "User ID",
            "description": "String ID of user. Starts with \`usr_\`.",
            "type": "string"
          },
          "email_address": {
            "title": "Email address",
            "description": "The user's email address.",
            "type": "string"
          },
          "full_name": {
            "title": "Full name",
            "description": "The user's full name.",
            "type": "string"
          },
          "verified": {
            "title": "Verified",
            "description": "Whether the user has verified their email address.",
            "type": "boolean"
          },
          "feature_flags": {
            "title": "Feature Flags",
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "role": {
            "$ref": "#/components/schemas/UserOrganizationRole"
          }
        }
      },
      "PaginatedData_LogResponse_": {
        "title": "PaginatedData[LogResponse]",
        "required": [
          "records",
          "page",
          "size",
          "total"
        ],
        "type": "object",
        "properties": {
          "records": {
            "title": "Records",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogResponse"
            }
          },
          "page": {
            "title": "Page",
            "type": "integer"
          },
          "size": {
            "title": "Size",
            "type": "integer"
          },
          "total": {
            "title": "Total",
            "type": "integer"
          }
        }
      },
      "PaginatedData_ProjectResponse_": {
        "title": "PaginatedData[ProjectResponse]",
        "required": [
          "records",
          "page",
          "size",
          "total"
        ],
        "type": "object",
        "properties": {
          "records": {
            "title": "Records",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectResponse"
            }
          },
          "page": {
            "title": "Page",
            "type": "integer"
          },
          "size": {
            "title": "Size",
            "type": "integer"
          },
          "total": {
            "title": "Total",
            "type": "integer"
          }
        }
      },
      "PaymentInterval": {
        "title": "PaymentInterval",
        "description": "Interval units used for pricing and usage.",
        "enum": [
          "month",
          "year",
          "week",
          "day"
        ],
        "type": "string"
      },
      "PositiveLabel": {
        "title": "PositiveLabel",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Feedback type",
            "type": "string"
          },
          "value": {
            "title": "Feedback value",
            "type": "string"
          }
        }
      },
      "PriceResponse": {
        "title": "PriceResponse",
        "required": [
          "id",
          "interval",
          "subscription_duration",
          "model"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "interval": {
            "$ref": "#/components/schemas/PaymentInterval"
          },
          "subscription_duration": {
            "$ref": "#/components/schemas/SubscriptionDuration"
          },
          "model": {
            "$ref": "#/components/schemas/PricingModel"
          },
          "data_limit": {
            "title": "Data limit",
            "description": "Value over which usage pricing kicks in at num datapoints used x unit price.",
            "type": "integer"
          },
          "data_unit_price": {
            "title": "Data Unit Price",
            "type": "number"
          },
          "data_unit_currency": {
            "title": "Data Unit Currency",
            "type": "string"
          }
        }
      },
      "PricingModel": {
        "title": "PricingModel",
        "description": "Models of pricing - fixed or graduated usage based",
        "enum": [
          "fixed",
          "usage"
        ],
        "type": "string"
      },
      "ProductResponse": {
        "title": "ProductResponse",
        "required": [
          "id",
          "name",
          "prices",
          "seats_limit"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "prices": {
            "title": "Prices",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceResponse"
            }
          },
          "seats_limit": {
            "title": "Seats Limit",
            "type": "integer"
          },
          "feature_flags": {
            "title": "Feature Flags",
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        }
      },
      "ProjectGenerate": {
        "title": "ProjectGenerate",
        "description": "Alias for BaseGenerate that providers a better name for the consumer of docs",
        "required": [
          "project",
          "inputs",
          "provider_api_keys"
        ],
        "type": "object",
        "properties": {
          "project": {
            "title": "Project name",
            "description": "Unique project name. This project must already have an active deployment configured.",
            "type": "string"
          },
          "inputs": {
            "title": "Model input data",
            "description": "List of name, value pairs for the inputs used by your prompt template, or directly by your model.",
            "type": "object"
          },
          "source": {
            "title": "Source",
            "description": "What was source of the model used for this generation?e.g. website-landing-page",
            "type": "string"
          },
          "provider_api_keys": {
            "title": "Provider API Keys",
            "description": "API keys required by each provider to make API calls. These API keys are not stored by Humanloop.",
            "$ref": "#/components/schemas/ProviderApiKeys"
          },
          "num_samples": {
            "title": "Number of samples",
            "description": "How many generations to make for each set of inputs for the specified model config.",
            "type": "integer",
            "default": 1
          },
          "logprobs": {
            "title": "Log probabilities of most likely n tokens",
            "description": "Include the log probabilities of the top n tokens in the provider_response",
            "type": "integer"
          },
          "stream": {
            "title": "Whether to stream partial results",
            "description": "If true, tokens will be sent as data-only server-sent events as they become available. If num_samples > 1, samples are streamed back independently. The stream for each sample will be terminated with a non-null finish_reason.",
            "type": "boolean",
            "default": false
          },
          "suffix": {
            "title": "Completion suffix",
            "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts.",
            "type": "string"
          },
          "user": {
            "title": "End-user identifier",
            "description": "End-user id passed through to provider call.",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Any additional metadata that you would like to log for reference.",
            "type": "object"
          }
        }
      },
      "ProjectModelConfigFeedbackStatsResponse": {
        "title": "ProjectModelConfigFeedbackStatsResponse",
        "required": [
          "feedback_group_id",
          "feedback_group_name",
          "feedback_label",
          "feedback_count"
        ],
        "type": "object",
        "properties": {
          "feedback_group_id": {
            "title": "Feedback Group Id",
            "type": "integer"
          },
          "feedback_group_name": {
            "title": "Feedback Group Name",
            "type": "string"
          },
          "feedback_label": {
            "title": "Feedback Label",
            "type": "string"
          },
          "feedback_count": {
            "title": "Feedback Count",
            "type": "integer"
          }
        }
      },
      "ProjectModelConfigRequest": {
        "title": "ProjectModelConfigRequest",
        "description": "Core ModelConfig request model.\\nFollowing closely: https://beta.openai.com/docs/api-reference/completions/create",
        "required": [
          "model",
          "prompt_template",
          "project"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "title": "Model provider",
            "description": "The company providing the underlying model service.",
            "default": "openai",
            "$ref": "#/components/schemas/ModelProviders"
          },
          "endpoint": {
            "title": "Provider endpoint",
            "description": "Which of the providers model endpoints to use. For example Complete or Edit.",
            "default": "complete",
            "$ref": "#/components/schemas/ModelEndpoints"
          },
          "model": {
            "title": "Model instance used",
            "description": "What model instance to use for the generation. e.g. text-davinci-002.",
            "type": "string"
          },
          "prompt_template": {
            "title": "Prompt template",
            "description": "Prompt template that will take your specified inputs to form your final request to the provider model. NB: Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}.",
            "type": "string"
          },
          "temperature": {
            "title": "Sampling temperature",
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "type": "number",
            "default": 1
          },
          "max_tokens": {
            "title": "Maximum tokens",
            "description": "The maximum number of tokens to generate in the completion.",
            "type": "integer",
            "default": 16
          },
          "top_p": {
            "title": "Top p probability mass",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "type": "number",
            "default": 1
          },
          "stop": {
            "title": "Stop sequence(s)",
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "presence_penalty": {
            "title": "Penalize tokens on whether present.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "type": "number",
            "default": 0
          },
          "frequency_penalty": {
            "title": "Penalize tokens on whether frequent.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "type": "number",
            "default": 0
          },
          "other": {
            "title": "Other provider parameters",
            "description": "Other parameter values to be passed to the provider call.",
            "type": "object",
            "default": {
            }
          },
          "project": {
            "title": "Project name",
            "description": "Unique project name. If it does not exist, a new project will be created.",
            "type": "string"
          },
          "name": {
            "title": "Model config name",
            "description": "A friendly display name for the model config. If not provided, a name will be generated.",
            "type": "string"
          },
          "experiment": {
            "title": "Experiment name",
            "description": "If specified, the model config will be added to this experiment. Experiments are used for A/B testing and optimizing hyperparameters.",
            "type": "string"
          }
        }
      },
      "ProjectModelConfigResponse": {
        "title": "ProjectModelConfigResponse",
        "description": "Extends the core ModelConfig request object to include Humanloop generated\\nidentifier and method for serializing response from ModelConfig domain object.",
        "required": [
          "model",
          "prompt_template",
          "id",
          "created_at",
          "updated_at",
          "last_used"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "title": "Model provider",
            "description": "The company providing the underlying model service.",
            "default": "openai",
            "$ref": "#/components/schemas/ModelProviders"
          },
          "endpoint": {
            "title": "Provider endpoint",
            "description": "Which of the providers model endpoints to use. For example Complete or Edit.",
            "default": "complete",
            "$ref": "#/components/schemas/ModelEndpoints"
          },
          "model": {
            "title": "Model instance used",
            "description": "What model instance to use for the generation. e.g. text-davinci-002.",
            "type": "string"
          },
          "prompt_template": {
            "title": "Prompt template",
            "description": "Prompt template that will take your specified inputs to form your final request to the provider model. NB: Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}.",
            "type": "string"
          },
          "temperature": {
            "title": "Sampling temperature",
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "type": "number",
            "default": 1
          },
          "max_tokens": {
            "title": "Maximum tokens",
            "description": "The maximum number of tokens to generate in the completion.",
            "type": "integer",
            "default": 16
          },
          "top_p": {
            "title": "Top p probability mass",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "type": "number",
            "default": 1
          },
          "stop": {
            "title": "Stop sequence(s)",
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "presence_penalty": {
            "title": "Penalize tokens on whether present.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "type": "number",
            "default": 0
          },
          "frequency_penalty": {
            "title": "Penalize tokens on whether frequent.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "type": "number",
            "default": 0
          },
          "other": {
            "title": "Other provider parameters",
            "description": "Other parameter values to be passed to the provider call.",
            "type": "object",
            "default": {
            }
          },
          "id": {
            "title": "Model config ID",
            "description": "Model config unique identifier generated by Humanloop.",
            "type": "string"
          },
          "display_name": {
            "title": "Model config name",
            "description": "A friendly display name for the model config.",
            "type": "string"
          },
          "project_id": {
            "title": "Project ID",
            "description": "String ID of project the model config belongs to. Starts with \`pr_\`.",
            "type": "string"
          },
          "project_name": {
            "title": "Project name",
            "description": "Name of the project the model config belongs to.",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          },
          "last_used": {
            "title": "Last Used",
            "type": "string",
            "format": "date-time"
          },
          "feedback_stats": {
            "title": "Feedback Stats",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectModelConfigFeedbackStatsResponse"
            }
          },
          "experiment_id": {
            "title": "Experiment ID",
            "description": "The ID of the experiment the model config has been registered to. Only populated when registering a model config to an experiment.",
            "type": "string"
          }
        }
      },
      "ProjectResponse": {
        "title": "ProjectResponse",
        "required": [
          "id",
          "internal_id",
          "name",
          "users",
          "data_count",
          "feedback_types",
          "team_id",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Project ID",
            "description": "Project ID",
            "type": "string"
          },
          "internal_id": {
            "title": "Internal project ID",
            "description": "Project ID for internal Humanloop use.",
            "type": "integer"
          },
          "name": {
            "title": "Project name",
            "description": "Unique project name.",
            "type": "string"
          },
          "active_experiment": {
            "title": "Active experiment",
            "description": "Experiment that has been set as the project's active deployment. At most one of active_experiment and active_model_config can be set.",
            "$ref": "#/components/schemas/ExperimentResponse"
          },
          "active_model_config": {
            "title": "Active model configuration",
            "description": "Model configuration that has been set as the project's active deployment. At most one of active_experiment and active_model_config can be set.",
            "$ref": "#/components/schemas/ProjectModelConfigResponse"
          },
          "users": {
            "title": "Project users",
            "description": "Users associated to the project.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectUserResponse"
            }
          },
          "data_count": {
            "title": "Number of datapoints",
            "description": "The count of datapoints that have been logged to the project.",
            "type": "integer"
          },
          "feedback_types": {
            "title": "Feedback types",
            "description": "The feedback types that have been defined in the project.",
            "$ref": "#/components/schemas/FeedbackTypes"
          },
          "team_id": {
            "title": "Team ID",
            "description": "Unique ID of the team the project belongs to. Starts with \`tm_\`.",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProjectSortBy": {
        "title": "ProjectSortBy",
        "description": "An enumeration.",
        "enum": [
          "created_at",
          "updated_at",
          "name"
        ],
        "type": "string"
      },
      "ProjectUserResponse": {
        "title": "ProjectUserResponse",
        "required": [
          "id",
          "email_address"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "User ID",
            "description": "String ID of user. Starts with \`usr_\`.",
            "type": "string"
          },
          "email_address": {
            "title": "Email address",
            "description": "The user's email address.",
            "type": "string"
          },
          "full_name": {
            "title": "Full name",
            "description": "The user's full name.",
            "type": "string"
          }
        }
      },
      "ProviderApiKeys": {
        "title": "ProviderApiKeys",
        "type": "object",
        "properties": {
          "openai": {
            "title": "Openai",
            "type": "string"
          },
          "ai21": {
            "title": "Ai21",
            "type": "string"
          },
          "mock": {
            "title": "Mock",
            "type": "string"
          },
          "anthropic": {
            "title": "Anthropic",
            "type": "string"
          }
        }
      },
      "RawGenerate": {
        "title": "RawGenerate",
        "required": [
          "project",
          "inputs",
          "provider_api_keys",
          "model_config"
        ],
        "type": "object",
        "properties": {
          "project": {
            "title": "Project name",
            "description": "Unique project name. The model configuration will be added to the project if necessary.",
            "type": "string"
          },
          "inputs": {
            "title": "Model input data",
            "description": "List of name, value pairs for the inputs used by your prompt template, or directly by your model.",
            "type": "object"
          },
          "source": {
            "title": "Source",
            "description": "What was source of the model used for this generation?e.g. website-landing-page",
            "type": "string"
          },
          "provider_api_keys": {
            "title": "Provider API Keys",
            "description": "API keys required by each provider to make API calls. These API keys are not stored by Humanloop.",
            "$ref": "#/components/schemas/ProviderApiKeys"
          },
          "num_samples": {
            "title": "Number of samples",
            "description": "How many generations to make for each set of inputs for the specified model config.",
            "type": "integer",
            "default": 1
          },
          "logprobs": {
            "title": "Log probabilities of most likely n tokens",
            "description": "Include the log probabilities of the top n tokens in the provider_response",
            "type": "integer"
          },
          "stream": {
            "title": "Whether to stream partial results",
            "description": "If true, tokens will be sent as data-only server-sent events as they become available. If num_samples > 1, samples are streamed back independently. The stream for each sample will be terminated with a non-null finish_reason.",
            "type": "boolean",
            "default": false
          },
          "suffix": {
            "title": "Completion suffix",
            "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts.",
            "type": "string"
          },
          "user": {
            "title": "End-user identifier",
            "description": "End-user id passed through to provider call.",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Any additional metadata that you would like to log for reference.",
            "type": "object"
          },
          "model_config": {
            "title": "The configuration of your model",
            "description": "The model configuration provided will be recorded and used to create a generation.",
            "$ref": "#/components/schemas/ModelConfigRequest"
          }
        }
      },
      "SetupAndRunSpec": {
        "title": "SetupAndRunSpec",
        "required": [
          "name",
          "required",
          "type",
          "title",
          "description"
        ],
        "type": "object",
        "properties": {
          "title": {
            "title": "Title",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "required": {
            "title": "Required",
            "type": "boolean"
          },
          "type": {
            "title": "Type",
            "type": "string"
          },
          "default": {
            "title": "Default"
          }
        }
      },
      "SortOrder": {
        "title": "SortOrder",
        "description": "An enumeration.",
        "enum": [
          "asc",
          "desc"
        ],
        "type": "string"
      },
      "SubscriptionDuration": {
        "title": "SubscriptionDuration",
        "description": "An enumeration.",
        "enum": [
          "month",
          "year"
        ],
        "type": "string"
      },
      "SubscriptionResponse": {
        "title": "SubscriptionResponse",
        "required": [
          "id",
          "status",
          "created_at",
          "product",
          "interval",
          "duration",
          "usage_reports",
          "current_period_start",
          "current_period_end",
          "current_usage"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "product": {
            "$ref": "#/components/schemas/ProductResponse"
          },
          "interval": {
            "$ref": "#/components/schemas/PaymentInterval"
          },
          "duration": {
            "$ref": "#/components/schemas/SubscriptionDuration"
          },
          "usage_reports": {
            "title": "Usage Reports",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UsageReportResponse"
            }
          },
          "current_period_start": {
            "title": "Current Period Start",
            "type": "string",
            "format": "date-time"
          },
          "current_period_end": {
            "title": "Current Period End",
            "type": "string",
            "format": "date-time"
          },
          "cancel_at_period_end": {
            "title": "Cancel At Period End",
            "type": "boolean"
          },
          "current_usage": {
            "title": "Current Usage",
            "type": "integer"
          }
        }
      },
      "SubscriptionStatus": {
        "title": "SubscriptionStatus",
        "description": "An enumeration.",
        "enum": [
          "active",
          "inactive"
        ],
        "type": "string"
      },
      "TeamResponse": {
        "title": "TeamResponse",
        "description": "Team without an expanded list of users.\\n\\nUsed to avoid circular nesting of \`Team.users\` -> \`User.teams\`.",
        "required": [
          "name",
          "organization_id",
          "id",
          "created_at",
          "updated_at",
          "users"
        ],
        "type": "object",
        "properties": {
          "description": {
            "title": "Team description",
            "type": "string"
          },
          "name": {
            "title": "Team name",
            "type": "string"
          },
          "organization_id": {
            "title": "Organization ID",
            "description": "String ID of organization that this team belongs to. Starts with \`org_\`.",
            "type": "string"
          },
          "id": {
            "title": "Team ID",
            "description": "String ID of team. Starts with \`tm_\`.",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          },
          "users": {
            "title": "Users",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamUserResponse"
            }
          }
        }
      },
      "TeamUserResponse": {
        "title": "TeamUserResponse",
        "required": [
          "id",
          "email_address",
          "verified",
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "User ID",
            "description": "String ID of user. Starts with \`usr_\`.",
            "type": "string"
          },
          "email_address": {
            "title": "Email address",
            "description": "The user's email address.",
            "type": "string"
          },
          "full_name": {
            "title": "Full name",
            "description": "The user's full name.",
            "type": "string"
          },
          "verified": {
            "title": "Verified",
            "description": "Whether the user has verified their email address.",
            "type": "boolean"
          },
          "feature_flags": {
            "title": "Feature Flags",
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "role": {
            "$ref": "#/components/schemas/UserTeamRole"
          }
        }
      },
      "ToolResultResponse": {
        "title": "ToolResultResponse",
        "description": "A result from a tool used to populate the prompt template",
        "required": [
          "id",
          "name",
          "signature",
          "result"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "signature": {
            "title": "Signature",
            "type": "string"
          },
          "result": {
            "title": "Result",
            "type": "string"
          }
        }
      },
      "ToolSpecResponse": {
        "title": "ToolSpecResponse",
        "required": [
          "name",
          "description",
          "func_name",
          "signature"
        ],
        "type": "object",
        "properties": {
          "description": {
            "title": "Description",
            "description": "Description of the tool - acts as a specification to agents for how to use the tool ",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "description": "Unique name for the tool",
            "type": "string"
          },
          "setup_spec": {
            "title": "Setup arguments spec",
            "description": "Field definitions for the setup (i.e. init) arguments that the tool needs - e.g api_key",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetupAndRunSpec"
            }
          },
          "run_spec": {
            "title": "Run arguments spec",
            "description": "Field definitions for the run arguments the tool needs - e.g query",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "func_name": {
            "title": "Name of callable",
            "description": "Unique name to use when running tool.",
            "type": "string"
          },
          "signature": {
            "title": "Signature",
            "description": "The function signature of the tool when being called.",
            "type": "string"
          }
        }
      },
      "UpdateExperimentRequest": {
        "title": "UpdateExperimentRequest",
        "type": "object",
        "properties": {
          "name": {
            "title": "Experiment name",
            "description": "Name of experiment.",
            "type": "string"
          },
          "positive_labels": {
            "title": "Positive labels",
            "description": "Feedback labels to treat as positive user feedback. Used to monitor the performance of model configs in the experiment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositiveLabel"
            }
          },
          "config_ids_to_register": {
            "title": "Model config IDs to register",
            "description": "Model configs to add to this experiment.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "config_ids_to_deregister": {
            "title": "Model config IDs to deregister",
            "description": "Model configs in this experiment to be deactivated.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateMetricRequest": {
        "title": "UpdateMetricRequest",
        "type": "object",
        "properties": {
          "description": {
            "title": "Metric description",
            "description": "A description of what the metric measures.",
            "type": "string"
          },
          "name": {
            "title": "Metric name",
            "description": "The name of the metric.",
            "type": "string"
          },
          "code": {
            "title": "Metric code",
            "description": "Python code used to calculate a metric value on each logged datapoint.",
            "type": "string"
          },
          "active": {
            "title": "Metric active flag",
            "description": "If enabled, the metric is calculated for every logged datapoint.",
            "type": "boolean"
          }
        }
      },
      "UpdateOrgToolRequest": {
        "title": "UpdateOrgToolRequest",
        "type": "object",
        "properties": {
          "description": {
            "title": "Tool description",
            "description": "Organization's description for the tool. If not provided, the spec description will be used",
            "type": "string"
          },
          "name": {
            "title": "Tool name",
            "description": "Organizations name for the tool. If not provided, the spec name will be used",
            "type": "string"
          },
          "func_name": {
            "title": "Function name",
            "description": "Name of the function as it called",
            "type": "string"
          },
          "setup_values": {
            "title": "Tool setup values",
            "description": "Any setup values needed to set the tool as active - retrieve what setup values are required from GET on v3/tools",
            "type": "object"
          },
          "status": {
            "title": "Tool status",
            "description": "Whether the tool has been set up by the org.",
            "$ref": "#/components/schemas/OrganizationToolStatus"
          }
        }
      },
      "UpdateOrganizationRequest": {
        "title": "UpdateOrganizationRequest",
        "type": "object",
        "properties": {
          "name": {
            "title": "Organization name",
            "type": "string"
          },
          "slug": {
            "title": "Organization unique slug",
            "description": "A unique slug that will be used for the organization. Only accepts letters, numbers, and hyphens.",
            "type": "string"
          }
        }
      },
      "UpdateProjectRequest": {
        "title": "UpdateProjectRequest",
        "type": "object",
        "properties": {
          "active_experiment_id": {
            "title": "Active experiment ID",
            "description": "ID for an experiment to set as the project's active deployment. Starts with 'exp_'. At most one of 'active_experiment_id' and 'active_model_config_id' can be set.",
            "type": "string"
          },
          "active_model_config_id": {
            "title": "Active model configuration ID",
            "description": "ID for a model configuration to set as the project's active deployment. Starts with 'config_'. At most one of 'active_experiment_id' and 'active_model_config_id' can be set.",
            "type": "string"
          },
          "positive_labels": {
            "title": "List of feedback labels to consider as positive actions",
            "description": "The full list of labels to treat as positive user feedback.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositiveLabel"
            }
          }
        }
      },
      "UpdateUserOrganizationRole": {
        "title": "UpdateUserOrganizationRole",
        "required": [
          "role"
        ],
        "type": "object",
        "properties": {
          "role": {
            "title": "User role",
            "description": "Role assigned to the user.",
            "$ref": "#/components/schemas/UserOrganizationRole"
          }
        }
      },
      "UsageReportResponse": {
        "title": "UsageReportResponse",
        "description": "Usage reports sent to payments provider over time.",
        "required": [
          "id",
          "unit",
          "units_used",
          "usage_from",
          "usage_to",
          "created_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "unit": {
            "title": "Unit",
            "type": "string"
          },
          "units_used": {
            "title": "Units Used",
            "type": "integer"
          },
          "usage_from": {
            "title": "Usage From",
            "type": "string",
            "format": "date-time"
          },
          "usage_to": {
            "title": "Usage To",
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserOrganizationRole": {
        "title": "UserOrganizationRole",
        "description": "An enumeration.",
        "enum": [
          "admin",
          "member"
        ],
        "type": "string"
      },
      "UserResponse": {
        "title": "UserResponse",
        "required": [
          "id",
          "email_address",
          "verified"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "User ID",
            "description": "String ID of user. Starts with \`usr_\`.",
            "type": "string"
          },
          "email_address": {
            "title": "Email address",
            "description": "The user's email address.",
            "type": "string"
          },
          "full_name": {
            "title": "Full name",
            "description": "The user's full name.",
            "type": "string"
          },
          "verified": {
            "title": "Verified",
            "description": "Whether the user has verified their email address.",
            "type": "boolean"
          },
          "feature_flags": {
            "title": "Feature Flags",
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        }
      },
      "UserTeamRole": {
        "title": "UserTeamRole",
        "description": "An enumeration.",
        "enum": [
          "admin",
          "member"
        ],
        "type": "string"
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "UpdateFeedbackTypesRequest": {
        "title": "Feedback Types",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/FeedbackTypeRequest"
        }
      },
      "GenerateRequest": {
        "title": "Request",
        "anyOf": [
          {
            "$ref": "#/components/schemas/RawGenerate"
          },
          {
            "$ref": "#/components/schemas/ModelConfigGenerate"
          },
          {
            "$ref": "#/components/schemas/ExperimentGenerate"
          },
          {
            "$ref": "#/components/schemas/ProjectGenerate"
          }
        ]
      },
      "LogRequestBody": {
        "title": "Log Request",
        "anyOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogRequest"
            }
          },
          {
            "$ref": "#/components/schemas/LogRequest"
          }
        ]
      },
      "SubmitRequest": {
        "title": "Feedback Request",
        "anyOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeedbackRequest"
            }
          },
          {
            "$ref": "#/components/schemas/FeedbackRequest"
          }
        ]
      },
      "GetModelConfigsResponse": {
        "title": "Response Get Project Model Configs Projects  Id  Model Configs Get",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ProjectModelConfigResponse"
        }
      },
      "UpdateFeedbackTypesResponse": {
        "type": "object",
        "properties": {
        },
        "example": {
        }
      },
      "Log200Response": {
        "title": "Response Log Logs Post",
        "anyOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateLogResponse"
            }
          },
          {
            "$ref": "#/components/schemas/CreateLogResponse"
          }
        ]
      },
      "SubmitResponse": {
        "title": "Response Feedback Feedback Post",
        "anyOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeedbackResponse"
            }
          },
          {
            "$ref": "#/components/schemas/FeedbackResponse"
          }
        ]
      },
      "ListResponse": {
        "title": "Response Get Project Experiments Projects  Project Id  Experiments Get",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ExperimentResponse"
        }
      },
      "List200Response": {
        "title": "Response Get Metrics Projects  Project Id  Metrics Get",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/MetricResponse"
        }
      },
      "GetSubscriptionsResponse": {
        "title": "Response Get Organization Subscriptions Organizations  Id  Subscriptions Get",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SubscriptionResponse"
        }
      },
      "GetApiKeysResponse": {
        "title": "Response Get Api Keys Organizations  Id  Api Keys Get",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ApiKeyResponse"
        }
      },
      "GetToolsResponse": {
        "title": "Response Get Organization Tools Organizations  Id  Tools Get",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/OrganizationToolResponse"
        }
      },
      "GetSpecsResponse": {
        "title": "Response Get Tool Specs Tools Get",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ToolSpecResponse"
        }
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "description": "The Humanloop API uses API keys for authentication. Visit your \\n[User Settings](https://app.humanloop.com/llama/settings) page to retrieve the\\nAPI key you'll use in your requests.\\n\\nThis key allows full access and control over your projects, so keep this secret\\nand take care to not expose it in any client-side code.\\n\\nTo use your API key, include it under the \`X-API-KEY\` header in your HTTP request.\\n\\n\`\`\`bash\\ncurl https://api.humanloop.com/v3/projects -H 'X-API-KEY: YOUR_API_KEY'\\n\`\`\`\\n\\nIf you're using the Python SDK, initialize the client with your API key before\\nusing other SDK methods:\\n\\n\`\`\`python\\nhl.init(api_key=\\"YOUR_API_KEY\\")\\n\`\`\`",
        "type": "apiKey",
        "in": "header",
        "name": "X-API-KEY"
      }
    }
  },
  "x-readme": {
    "samples-languages": [
      "python",
      "javascript",
      "curl"
    ]
  }
}"
`;

exports[`fix fix redundant security requirements splitit test 1`] = `
"{
  "openapi": "3.0.0",
  "info": {
    "title": "Splitit.OnBoarding.Api.V2",
    "description": "Test",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://onboarding-v2.sandbox.splitit.com"
    }
  ],
  "tags": [
    {
      "name": "Data"
    },
    {
      "name": "Merchants"
    }
  ],
  "paths": {
    "/api/data/get-countries": {
      "get": {
        "tags": [
          "Data"
        ],
        "operationId": "Data_getCountries",
        "responses": {
          "200": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountriesResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfOnBoardingErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/data/get-currencies": {
      "get": {
        "tags": [
          "Data"
        ],
        "operationId": "Data_getCurrencies",
        "responses": {
          "200": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrenciesResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfOnBoardingErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/data/get-processors": {
      "get": {
        "tags": [
          "Data"
        ],
        "operationId": "Data_getProcessors",
        "responses": {
          "200": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessorsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfOnBoardingErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/data/get-verticals": {
      "get": {
        "tags": [
          "Data"
        ],
        "operationId": "Data_getVerticals",
        "responses": {
          "200": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantVerticalsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfOnBoardingErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/data/status-legend": {
      "get": {
        "tags": [
          "Data"
        ],
        "operationId": "Data_statusLegend",
        "responses": {
          "200": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusLegendResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfOnBoardingErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/merchants/get": {
      "get": {
        "tags": [
          "Merchants"
        ],
        "operationId": "Merchants_get",
        "parameters": [
          {
            "name": "NumberOfRowsInPage",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LegalName",
            "in": "query",
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMerchantsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfOnBoardingErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/merchants/get-details": {
      "get": {
        "tags": [
          "Merchants"
        ],
        "operationId": "Merchants_getDetails",
        "parameters": [
          {
            "name": "merchantTempId",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMerchantDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfOnBoardingErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/merchants/create": {
      "post": {
        "tags": [
          "Merchants"
        ],
        "operationId": "Merchants_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMerchantRequest"
              }
            }
          },
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "201": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMerchantResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfOnBoardingErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/merchants/create/developer": {
      "post": {
        "tags": [
          "Merchants"
        ],
        "operationId": "Merchants_createDeveloper",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeveloperRequest"
              }
            }
          },
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "201": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMerchantResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfOnBoardingErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://auth.sandbox.splitit.com/connect/token",
            "scopes": {
              "onboarding.api.v2": "onboarding.api.v2"
            }
          }
        }
      }
    },
    "schemas": {
      "CountriesResponse": {
        "type": "object",
        "required": [
          "countries"
        ],
        "properties": {
          "countries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountryResponse"
            }
          }
        }
      },
      "CountryResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "isoA2",
          "isoA3",
          "isoNumber"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "isoA2": {
            "type": "string"
          },
          "isoA3": {
            "type": "string"
          },
          "isoNumber": {
            "type": "string"
          }
        }
      },
      "SelfOnBoardingErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "errorCode": {
            "type": "integer",
            "format": "int32"
          },
          "paramName": {
            "type": "string"
          },
          "traceId": {
            "type": "string"
          }
        }
      },
      "CurrenciesResponse": {
        "type": "object",
        "required": [
          "currencies"
        ],
        "properties": {
          "currencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyResponse"
            }
          }
        }
      },
      "CurrencyResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "isoNumber": {
            "type": "string"
          }
        }
      },
      "ProcessorsResponse": {
        "type": "object",
        "required": [
          "processors"
        ],
        "properties": {
          "processors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessorResponse"
            }
          }
        }
      },
      "ProcessorResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "processorAuthenticationParametersRequest"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "processorAuthenticationParametersRequest": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessorAuthenticationParametersRequest"
            }
          }
        }
      },
      "ProcessorAuthenticationParametersRequest": {
        "type": "object",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "type": "string"
          }
        }
      },
      "MerchantVerticalsResponse": {
        "type": "object",
        "required": [
          "merchantVerticals"
        ],
        "properties": {
          "merchantVerticals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantVerticalResponse"
            }
          }
        }
      },
      "MerchantVerticalResponse": {
        "type": "object",
        "required": [
          "verticalDisplayName",
          "verticalSplititName",
          "subCategories"
        ],
        "properties": {
          "verticalDisplayName": {
            "type": "string"
          },
          "verticalSplititName": {
            "type": "string"
          },
          "subCategories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EnumDTO": {
        "type": "object",
        "required": [
          "key",
          "name"
        ],
        "properties": {
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "GetMerchantsResponse": {
        "type": "object",
        "required": [
          "merchants"
        ],
        "properties": {
          "merchants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMerchantResponse"
            }
          }
        }
      },
      "GetMerchantResponse": {
        "type": "object",
        "required": [
          "publicName",
          "legalName",
          "phone",
          "country",
          "annualSales",
          "status",
          "merchantTempId"
        ],
        "properties": {
          "publicName": {
            "type": "string"
          },
          "legalName": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "annualSales": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "merchantTempId": {
            "type": "string"
          }
        }
      },
      "GetMerchantDetailsResponse": {
        "type": "object",
        "required": [
          "publicName",
          "legalName",
          "phoneNumber",
          "merchantTempId",
          "email",
          "merchantStatus"
        ],
        "properties": {
          "publicName": {
            "type": "string"
          },
          "legalName": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "merchantTempId": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "merchantStatus": {
            "type": "string"
          }
        }
      },
      "CreateMerchantResponse": {
        "type": "object",
        "required": [
          "merchantTempId",
          "merchantStatus",
          "responseHeader"
        ],
        "properties": {
          "merchantTempId": {
            "type": "string"
          },
          "merchantStatus": {
            "type": "string"
          },
          "responseHeader": {
            "$ref": "#/components/schemas/ResponseHeader"
          }
        }
      },
      "ResponseHeader": {
        "type": "object",
        "required": [
          "succeeded"
        ],
        "properties": {
          "succeeded": {
            "type": "boolean"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          },
          "traceId": {
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "additionalInfo": {
            "type": "string"
          }
        }
      },
      "CreateMerchantRequest": {
        "type": "object",
        "required": [
          "publicName",
          "email",
          "phoneNumber",
          "countryIso2",
          "legalName",
          "currencyCode",
          "vertical"
        ],
        "properties": {
          "publicName": {
            "type": "string",
            "minLength": 1
          },
          "email": {
            "type": "string",
            "minLength": 1
          },
          "phoneNumber": {
            "type": "string",
            "minLength": 1
          },
          "countryIso2": {
            "type": "string",
            "minLength": 1
          },
          "legalName": {
            "type": "string",
            "minLength": 1
          },
          "currencyCode": {
            "type": "string",
            "minLength": 1
          },
          "vertical": {
            "type": "string",
            "minLength": 1
          },
          "tier": {
            "type": "string"
          },
          "businessStreetAddress": {
            "type": "string"
          },
          "businessCity": {
            "type": "string"
          },
          "businessPostalCode": {
            "type": "string"
          },
          "businessCountry": {
            "type": "string"
          },
          "businessState": {
            "type": "string"
          },
          "subVertical": {
            "type": "string"
          },
          "nameOnBankAccount": {
            "type": "string"
          },
          "incorporationCountry": {
            "type": "string"
          },
          "accountNumber": {
            "type": "string"
          },
          "routingNumber": {
            "type": "string"
          },
          "taxIdNumber": {
            "type": "string"
          },
          "totalAnnualSales": {
            "type": "string"
          },
          "platformName": {
            "type": "string"
          }
        }
      },
      "CreateDeveloperRequest": {
        "type": "object",
        "required": [
          "fullName",
          "email",
          "companyName",
          "termsAndConditions",
          "countryCode",
          "fullCountryName",
          "requestHeader"
        ],
        "properties": {
          "fullName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "companyName": {
            "type": "string"
          },
          "termsAndConditions": {
            "type": "boolean"
          },
          "countryCode": {
            "type": "string"
          },
          "fullCountryName": {
            "type": "string"
          },
          "requestHeader": {
            "$ref": "#/components/schemas/RequestHeaderSlim"
          }
        }
      },
      "RequestHeaderSlim": {
        "type": "object",
        "required": [
          "sessionId"
        ],
        "properties": {
          "sessionId": {
            "type": "string"
          }
        }
      },
      "StatusLegendResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/EnumDTO"
        }
      }
    }
  },
  "security": [
    {
      "oauth2": [
      ]
    }
  ],
  "x-generator": "NSwag v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))"
}"
`;

exports[`fix info description must be non-empty in progress.yaml to confirm using existing splitit test 1`] = `
"{
  "openapi": "3.0.0",
  "info": {
    "title": "Splitit.OnBoarding.Api.V2",
    "description": "Test Description",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://onboarding-v2.sandbox.splitit.com"
    }
  ],
  "tags": [
    {
      "name": "Data"
    },
    {
      "name": "Merchants"
    }
  ],
  "paths": {
    "/api/data/get-countries": {
      "get": {
        "tags": [
          "Data"
        ],
        "operationId": "Data_getCountries",
        "responses": {
          "200": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountriesResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfOnBoardingErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/data/get-currencies": {
      "get": {
        "tags": [
          "Data"
        ],
        "operationId": "Data_getCurrencies",
        "responses": {
          "200": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrenciesResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfOnBoardingErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/data/get-processors": {
      "get": {
        "tags": [
          "Data"
        ],
        "operationId": "Data_getProcessors",
        "responses": {
          "200": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessorsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfOnBoardingErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/data/get-verticals": {
      "get": {
        "tags": [
          "Data"
        ],
        "operationId": "Data_getVerticals",
        "responses": {
          "200": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantVerticalsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfOnBoardingErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/data/status-legend": {
      "get": {
        "tags": [
          "Data"
        ],
        "operationId": "Data_statusLegend",
        "responses": {
          "200": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusLegendResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfOnBoardingErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/merchants/get": {
      "get": {
        "tags": [
          "Merchants"
        ],
        "operationId": "Merchants_get",
        "parameters": [
          {
            "name": "NumberOfRowsInPage",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LegalName",
            "in": "query",
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "x-nullable": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMerchantsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfOnBoardingErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/merchants/get-details": {
      "get": {
        "tags": [
          "Merchants"
        ],
        "operationId": "Merchants_getDetails",
        "parameters": [
          {
            "name": "merchantTempId",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMerchantDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfOnBoardingErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/merchants/create": {
      "post": {
        "tags": [
          "Merchants"
        ],
        "operationId": "Merchants_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMerchantRequest"
              }
            }
          },
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "201": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMerchantResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfOnBoardingErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/merchants/create/developer": {
      "post": {
        "tags": [
          "Merchants"
        ],
        "operationId": "Merchants_createDeveloper",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeveloperRequest"
              }
            }
          },
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "201": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMerchantResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "x-nullable": false,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfOnBoardingErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://auth.sandbox.splitit.com/connect/token",
            "scopes": {
              "onboarding.api.v2": "onboarding.api.v2"
            }
          }
        }
      }
    },
    "schemas": {
      "CountriesResponse": {
        "type": "object",
        "required": [
          "countries"
        ],
        "properties": {
          "countries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountryResponse"
            }
          }
        }
      },
      "CountryResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "isoA2",
          "isoA3",
          "isoNumber"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "isoA2": {
            "type": "string"
          },
          "isoA3": {
            "type": "string"
          },
          "isoNumber": {
            "type": "string"
          }
        }
      },
      "SelfOnBoardingErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "errorCode": {
            "type": "integer",
            "format": "int32"
          },
          "paramName": {
            "type": "string"
          },
          "traceId": {
            "type": "string"
          }
        }
      },
      "CurrenciesResponse": {
        "type": "object",
        "required": [
          "currencies"
        ],
        "properties": {
          "currencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyResponse"
            }
          }
        }
      },
      "CurrencyResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "isoNumber": {
            "type": "string"
          }
        }
      },
      "ProcessorsResponse": {
        "type": "object",
        "required": [
          "processors"
        ],
        "properties": {
          "processors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessorResponse"
            }
          }
        }
      },
      "ProcessorResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "processorAuthenticationParametersRequest"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "processorAuthenticationParametersRequest": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessorAuthenticationParametersRequest"
            }
          }
        }
      },
      "ProcessorAuthenticationParametersRequest": {
        "type": "object",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "type": "string"
          }
        }
      },
      "MerchantVerticalsResponse": {
        "type": "object",
        "required": [
          "merchantVerticals"
        ],
        "properties": {
          "merchantVerticals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantVerticalResponse"
            }
          }
        }
      },
      "MerchantVerticalResponse": {
        "type": "object",
        "required": [
          "verticalDisplayName",
          "verticalSplititName",
          "subCategories"
        ],
        "properties": {
          "verticalDisplayName": {
            "type": "string"
          },
          "verticalSplititName": {
            "type": "string"
          },
          "subCategories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EnumDTO": {
        "type": "object",
        "required": [
          "key",
          "name"
        ],
        "properties": {
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "GetMerchantsResponse": {
        "type": "object",
        "required": [
          "merchants"
        ],
        "properties": {
          "merchants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMerchantResponse"
            }
          }
        }
      },
      "GetMerchantResponse": {
        "type": "object",
        "required": [
          "publicName",
          "legalName",
          "phone",
          "country",
          "annualSales",
          "status",
          "merchantTempId"
        ],
        "properties": {
          "publicName": {
            "type": "string"
          },
          "legalName": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "annualSales": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "merchantTempId": {
            "type": "string"
          }
        }
      },
      "GetMerchantDetailsResponse": {
        "type": "object",
        "required": [
          "publicName",
          "legalName",
          "phoneNumber",
          "merchantTempId",
          "email",
          "merchantStatus"
        ],
        "properties": {
          "publicName": {
            "type": "string"
          },
          "legalName": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "merchantTempId": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "merchantStatus": {
            "type": "string"
          }
        }
      },
      "CreateMerchantResponse": {
        "type": "object",
        "required": [
          "merchantTempId",
          "merchantStatus",
          "responseHeader"
        ],
        "properties": {
          "merchantTempId": {
            "type": "string"
          },
          "merchantStatus": {
            "type": "string"
          },
          "responseHeader": {
            "$ref": "#/components/schemas/ResponseHeader"
          }
        }
      },
      "ResponseHeader": {
        "type": "object",
        "required": [
          "succeeded"
        ],
        "properties": {
          "succeeded": {
            "type": "boolean"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          },
          "traceId": {
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "additionalInfo": {
            "type": "string"
          }
        }
      },
      "CreateMerchantRequest": {
        "type": "object",
        "required": [
          "publicName",
          "email",
          "phoneNumber",
          "countryIso2",
          "legalName",
          "currencyCode",
          "vertical"
        ],
        "properties": {
          "publicName": {
            "type": "string",
            "minLength": 1
          },
          "email": {
            "type": "string",
            "minLength": 1
          },
          "phoneNumber": {
            "type": "string",
            "minLength": 1
          },
          "countryIso2": {
            "type": "string",
            "minLength": 1
          },
          "legalName": {
            "type": "string",
            "minLength": 1
          },
          "currencyCode": {
            "type": "string",
            "minLength": 1
          },
          "vertical": {
            "type": "string",
            "minLength": 1
          },
          "tier": {
            "type": "string"
          },
          "businessStreetAddress": {
            "type": "string"
          },
          "businessCity": {
            "type": "string"
          },
          "businessPostalCode": {
            "type": "string"
          },
          "businessCountry": {
            "type": "string"
          },
          "businessState": {
            "type": "string"
          },
          "subVertical": {
            "type": "string"
          },
          "nameOnBankAccount": {
            "type": "string"
          },
          "incorporationCountry": {
            "type": "string"
          },
          "accountNumber": {
            "type": "string"
          },
          "routingNumber": {
            "type": "string"
          },
          "taxIdNumber": {
            "type": "string"
          },
          "totalAnnualSales": {
            "type": "string"
          },
          "platformName": {
            "type": "string"
          }
        }
      },
      "CreateDeveloperRequest": {
        "type": "object",
        "required": [
          "fullName",
          "email",
          "companyName",
          "termsAndConditions",
          "countryCode",
          "fullCountryName",
          "requestHeader"
        ],
        "properties": {
          "fullName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "companyName": {
            "type": "string"
          },
          "termsAndConditions": {
            "type": "boolean"
          },
          "countryCode": {
            "type": "string"
          },
          "fullCountryName": {
            "type": "string"
          },
          "requestHeader": {
            "$ref": "#/components/schemas/RequestHeaderSlim"
          }
        }
      },
      "RequestHeaderSlim": {
        "type": "object",
        "required": [
          "sessionId"
        ],
        "properties": {
          "sessionId": {
            "type": "string"
          }
        }
      },
      "StatusLegendResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/EnumDTO"
        }
      }
    }
  },
  "security": [
    {
      "oauth2": [
      ]
    }
  ],
  "x-generator": "NSwag v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))"
}"
`;

exports[`fix writes same file type json test 1`] = `
"{
  "openapi": "3.0.0",
  "info": {
    "title": "OpenAPI Petstore",
    "description": "This is a sample server Petstore server. For this sample, you can use the api key \`special-key\` to test the authorization filters.",
    "version": "1.0.0",
    "license": {
      "name": "Apache-2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v2"
    }
  ],
  "tags": [
    {
      "description": "Everything about your Pets",
      "name": "pet"
    },
    {
      "description": "Operations about user",
      "name": "user"
    },
    {
      "description": "Access to Petstore orders",
      "name": "store"
    },
    {
      "description": "miscellaneous namespace",
      "name": "miscellaneous"
    }
  ],
  "paths": {
    "/pagination": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Pagination sandbox",
        "operationId": "misc_paginate",
        "description": "Iterate through a bunch of items",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaginateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pet": {
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Add a new pet to the store",
        "operationId": "pet_add",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "Update an existing pet",
        "operationId": "pet_update",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by status",
        "operationId": "pet_findByStatus",
        "security": [
          {
            "petstore_auth": [
              "read:pets"
            ]
          }
        ],
        "description": "Multiple status values can be provided with comma separated strings",
        "parameters": [
          {
            "description": "Status values that need to be considered for filter",
            "name": "status",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "deprecated": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "available",
                  "pending",
                  "sold"
                ],
                "default": "available"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindByStatus200Response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FindByStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by tags",
        "operationId": "pet_findByTags",
        "security": [
          {
            "petstore_auth": [
              "read:pets"
            ]
          }
        ],
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "parameters": [
          {
            "description": "Tags to filter by",
            "name": "tags",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindByTags200Response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FindByTagsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "deprecated": true
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Find pet by ID",
        "operationId": "pet_getById",
        "security": [
          {
            "api_key": [
            ]
          }
        ],
        "description": "Returns a single pet",
        "parameters": [
          {
            "description": "ID of pet to return",
            "name": "petId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        }
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Updates a pet in the store with form data",
        "operationId": "pet_updateWithForm",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "description": "",
        "parameters": [
          {
            "description": "ID of pet that needs to be updated",
            "name": "petId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWithFormRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "pet"
        ],
        "summary": "Deletes a pet",
        "operationId": "Pet_delete",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ],
            "api_key": [
            ]
          }
        ],
        "description": "",
        "parameters": [
          {
            "description": "Pet id to delete",
            "name": "petId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Invalid pet value"
          }
        }
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "uploads an image",
        "operationId": "pet_uploadImage",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "description": "",
        "parameters": [
          {
            "description": "ID of pet to update",
            "name": "petId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadImageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/store/inventory": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Returns pet inventories by status",
        "operationId": "store_getInventory",
        "security": [
          {
            "api_key": [
            ]
          }
        ],
        "description": "Returns a map of status codes to quantities",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInventoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/store/order": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Place an order for a pet",
        "operationId": "store_placeOrder",
        "description": "",
        "requestBody": {
          "description": "order placed for purchasing the pet",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find purchase order by ID",
        "operationId": "store_getOrderById",
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
        "parameters": [
          {
            "description": "ID of pet that needs to be fetched",
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 5
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "operationId": "store_deleteOrder",
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "parameters": [
          {
            "description": "ID of the order that needs to be deleted",
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "operationId": "user_create",
        "security": [
          {
            "api_key": [
            ]
          }
        ],
        "description": "This can only be done by the logged in user.",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "operationId": "user_createWithArray",
        "security": [
          {
            "api_key": [
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray"
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "operationId": "user_createWithList",
        "security": [
          {
            "api_key": [
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray"
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "operationId": "user_login",
        "description": "",
        "parameters": [
          {
            "description": "The user name for login",
            "name": "username",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]+[a-zA-Z0-9\\\\.\\\\-_]*[a-zA-Z0-9]+$"
            }
          },
          {
            "description": "The password for login in clear text",
            "name": "password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "Set-Cookie": {
                "description": "Cookie authentication key for use with the \`api_key\` apiKey authentication.",
                "schema": {
                  "type": "string",
                  "example": "AUTH_KEY=abcde12345; Path=/; HttpOnly"
                }
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Login200Response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "operationId": "user_logout",
        "security": [
          {
            "api_key": [
            ]
          }
        ],
        "description": "",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "operationId": "user_getByName",
        "description": "",
        "parameters": [
          {
            "description": "The name that needs to be fetched. Use user1 for testing.",
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "operationId": "user_update",
        "security": [
          {
            "api_key": [
            ]
          }
        ],
        "description": "This can only be done by the logged in user.",
        "parameters": [
          {
            "description": "name that need to be deleted",
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "operationId": "user_delete",
        "security": [
          {
            "api_key": [
            ]
          }
        ],
        "description": "This can only be done by the logged in user.",
        "parameters": [
          {
            "description": "The name that needs to be deleted",
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "components": {
    "requestBodies": {
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateWithArrayRequest"
            }
          }
        },
        "required": true
      },
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    },
    "schemas": {
      "Order": {
        "title": "Pet Order",
        "description": "An order for a pets from the pet store",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "petId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "description": "Order Status",
            "type": "string",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          },
          "complete": {
            "type": "boolean",
            "default": false
          }
        },
        "xml": {
          "name": "Order"
        }
      },
      "Category": {
        "title": "Pet category",
        "description": "A category for a pet",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]+[a-zA-Z0-9\\\\.\\\\-_]*[a-zA-Z0-9]+$"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "User": {
        "title": "a User",
        "description": "A User who is purchasing from the pet store",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "description": "User Status",
            "type": "integer",
            "format": "int32"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Tag": {
        "title": "Pet Tag",
        "description": "A tag for a pet",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "Pet": {
        "title": "a Pet",
        "description": "A pet for sale in the pet store",
        "type": "object",
        "required": [
          "name",
          "photoUrls"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true
            },
            "items": {
              "type": "string"
            }
          },
          "status": {
            "description": "pet status in the store",
            "type": "string",
            "deprecated": true,
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml": {
          "name": "Pet"
        }
      },
      "ApiResponse": {
        "title": "An uploaded response",
        "description": "Describes the result of uploading an image resource",
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "PaginateRequest": {
        "type": "object",
        "properties": {
          "first": {
            "type": "integer"
          },
          "after": {
            "type": "string"
          }
        }
      },
      "UpdateWithFormRequest": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Updated name of the pet",
            "type": "string"
          },
          "status": {
            "description": "Updated status of the pet",
            "type": "string"
          }
        }
      },
      "UploadImageRequest": {
        "type": "object",
        "properties": {
          "additionalMetadata": {
            "description": "Additional data to pass to server",
            "type": "string"
          },
          "file": {
            "description": "file to upload",
            "type": "string",
            "format": "binary"
          }
        }
      },
      "CreateWithArrayRequest": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/User"
        }
      },
      "PaginateResponse": {
        "type": "object",
        "properties": {
          "edges": {
            "type": "object",
            "properties": {
              "node": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "pageInfo": {
            "type": "object",
            "properties": {
              "hasNextPage": {
                "type": "boolean"
              },
              "hasPreviousPage": {
                "type": "boolean"
              },
              "startCursor": {
                "type": "string"
              },
              "endCursor": {
                "type": "string"
              }
            }
          }
        }
      },
      "FindByStatusResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Pet"
        }
      },
      "FindByStatus200Response": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Pet"
        }
      },
      "FindByTagsResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Pet"
        }
      },
      "FindByTags200Response": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Pet"
        }
      },
      "GetInventoryResponse": {
        "type": "object",
        "additionalProperties": {
          "type": "integer",
          "format": "int32"
        }
      },
      "LoginResponse": {
        "type": "string"
      },
      "Login200Response": {
        "type": "string"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}"
`;

exports[`fix writes same file type json test 2`] = `""{\\n  \\"openapi\\": \\"3.0.0\\",\\n  \\"info\\": {\\n    \\"title\\": \\"OpenAPI Petstore\\",\\n    \\"description\\": \\"This is a sample server Petstore server. For this sample, you can use the api key \`special-key\` to test the authorization filters.\\",\\n    \\"version\\": \\"1.0.0\\",\\n    \\"license\\": {\\n      \\"name\\": \\"Apache-2.0\\",\\n      \\"url\\": \\"https://www.apache.org/licenses/LICENSE-2.0.html\\"\\n    }\\n  },\\n  \\"servers\\": [\\n    {\\n      \\"url\\": \\"http://petstore.swagger.io/v2\\"\\n    }\\n  ],\\n  \\"tags\\": [\\n    {\\n      \\"description\\": \\"Everything about your Pets\\",\\n      \\"name\\": \\"pet\\"\\n    },\\n    {\\n      \\"description\\": \\"Operations about user\\",\\n      \\"name\\": \\"user\\"\\n    },\\n    {\\n      \\"description\\": \\"Access to Petstore orders\\",\\n      \\"name\\": \\"store\\"\\n    },\\n    {\\n      \\"description\\": \\"miscellaneous namespace\\",\\n      \\"name\\": \\"miscellaneous\\"\\n    }\\n  ],\\n  \\"paths\\": {\\n    \\"/pagination\\": {\\n      \\"get\\": {\\n        \\"tags\\": [\\n          \\"miscellaneous\\"\\n        ],\\n        \\"summary\\": \\"Pagination sandbox\\",\\n        \\"operationId\\": \\"misc_paginate\\",\\n        \\"description\\": \\"Iterate through a bunch of items\\",\\n        \\"requestBody\\": {\\n          \\"content\\": {\\n            \\"application/json\\": {\\n              \\"schema\\": {\\n                \\"$ref\\": \\"#/components/schemas/PaginateRequest\\"\\n              }\\n            }\\n          }\\n        },\\n        \\"responses\\": {\\n          \\"200\\": {\\n            \\"description\\": \\"OK\\",\\n            \\"content\\": {\\n              \\"application/json\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/PaginateResponse\\"\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    },\\n    \\"/pet\\": {\\n      \\"post\\": {\\n        \\"tags\\": [\\n          \\"pet\\"\\n        ],\\n        \\"summary\\": \\"Add a new pet to the store\\",\\n        \\"operationId\\": \\"pet_add\\",\\n        \\"security\\": [\\n          {\\n            \\"petstore_auth\\": [\\n              \\"write:pets\\",\\n              \\"read:pets\\"\\n            ]\\n          }\\n        ],\\n        \\"description\\": \\"\\",\\n        \\"requestBody\\": {\\n          \\"$ref\\": \\"#/components/requestBodies/Pet\\"\\n        },\\n        \\"responses\\": {\\n          \\"200\\": {\\n            \\"description\\": \\"successful operation\\",\\n            \\"content\\": {\\n              \\"application/json\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/Pet\\"\\n                }\\n              },\\n              \\"application/xml\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/Pet\\"\\n                }\\n              }\\n            }\\n          },\\n          \\"405\\": {\\n            \\"description\\": \\"Invalid input\\"\\n          }\\n        }\\n      },\\n      \\"put\\": {\\n        \\"tags\\": [\\n          \\"pet\\"\\n        ],\\n        \\"summary\\": \\"Update an existing pet\\",\\n        \\"operationId\\": \\"pet_update\\",\\n        \\"security\\": [\\n          {\\n            \\"petstore_auth\\": [\\n              \\"write:pets\\",\\n              \\"read:pets\\"\\n            ]\\n          }\\n        ],\\n        \\"description\\": \\"\\",\\n        \\"requestBody\\": {\\n          \\"$ref\\": \\"#/components/requestBodies/Pet\\"\\n        },\\n        \\"responses\\": {\\n          \\"200\\": {\\n            \\"description\\": \\"successful operation\\",\\n            \\"content\\": {\\n              \\"application/json\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/Pet\\"\\n                }\\n              },\\n              \\"application/xml\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/Pet\\"\\n                }\\n              }\\n            }\\n          },\\n          \\"400\\": {\\n            \\"description\\": \\"Invalid ID supplied\\"\\n          },\\n          \\"404\\": {\\n            \\"description\\": \\"Pet not found\\"\\n          },\\n          \\"405\\": {\\n            \\"description\\": \\"Validation exception\\"\\n          }\\n        }\\n      }\\n    },\\n    \\"/pet/findByStatus\\": {\\n      \\"get\\": {\\n        \\"tags\\": [\\n          \\"pet\\"\\n        ],\\n        \\"summary\\": \\"Finds Pets by status\\",\\n        \\"operationId\\": \\"pet_findByStatus\\",\\n        \\"security\\": [\\n          {\\n            \\"petstore_auth\\": [\\n              \\"read:pets\\"\\n            ]\\n          }\\n        ],\\n        \\"description\\": \\"Multiple status values can be provided with comma separated strings\\",\\n        \\"parameters\\": [\\n          {\\n            \\"description\\": \\"Status values that need to be considered for filter\\",\\n            \\"name\\": \\"status\\",\\n            \\"in\\": \\"query\\",\\n            \\"required\\": true,\\n            \\"style\\": \\"form\\",\\n            \\"explode\\": false,\\n            \\"deprecated\\": true,\\n            \\"schema\\": {\\n              \\"type\\": \\"array\\",\\n              \\"items\\": {\\n                \\"type\\": \\"string\\",\\n                \\"enum\\": [\\n                  \\"available\\",\\n                  \\"pending\\",\\n                  \\"sold\\"\\n                ],\\n                \\"default\\": \\"available\\"\\n              }\\n            }\\n          }\\n        ],\\n        \\"responses\\": {\\n          \\"200\\": {\\n            \\"description\\": \\"successful operation\\",\\n            \\"content\\": {\\n              \\"application/json\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/FindByStatus200Response\\"\\n                }\\n              },\\n              \\"application/xml\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/FindByStatusResponse\\"\\n                }\\n              }\\n            }\\n          },\\n          \\"400\\": {\\n            \\"description\\": \\"Invalid status value\\"\\n          }\\n        }\\n      }\\n    },\\n    \\"/pet/findByTags\\": {\\n      \\"get\\": {\\n        \\"tags\\": [\\n          \\"pet\\"\\n        ],\\n        \\"summary\\": \\"Finds Pets by tags\\",\\n        \\"operationId\\": \\"pet_findByTags\\",\\n        \\"security\\": [\\n          {\\n            \\"petstore_auth\\": [\\n              \\"read:pets\\"\\n            ]\\n          }\\n        ],\\n        \\"description\\": \\"Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\\",\\n        \\"parameters\\": [\\n          {\\n            \\"description\\": \\"Tags to filter by\\",\\n            \\"name\\": \\"tags\\",\\n            \\"in\\": \\"query\\",\\n            \\"required\\": true,\\n            \\"style\\": \\"form\\",\\n            \\"explode\\": false,\\n            \\"schema\\": {\\n              \\"type\\": \\"array\\",\\n              \\"items\\": {\\n                \\"type\\": \\"string\\"\\n              }\\n            }\\n          }\\n        ],\\n        \\"responses\\": {\\n          \\"200\\": {\\n            \\"description\\": \\"successful operation\\",\\n            \\"content\\": {\\n              \\"application/json\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/FindByTags200Response\\"\\n                }\\n              },\\n              \\"application/xml\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/FindByTagsResponse\\"\\n                }\\n              }\\n            }\\n          },\\n          \\"400\\": {\\n            \\"description\\": \\"Invalid tag value\\"\\n          }\\n        },\\n        \\"deprecated\\": true\\n      }\\n    },\\n    \\"/pet/{petId}\\": {\\n      \\"get\\": {\\n        \\"tags\\": [\\n          \\"pet\\"\\n        ],\\n        \\"summary\\": \\"Find pet by ID\\",\\n        \\"operationId\\": \\"pet_getById\\",\\n        \\"security\\": [\\n          {\\n            \\"api_key\\": [\\n            ]\\n          }\\n        ],\\n        \\"description\\": \\"Returns a single pet\\",\\n        \\"parameters\\": [\\n          {\\n            \\"description\\": \\"ID of pet to return\\",\\n            \\"name\\": \\"petId\\",\\n            \\"in\\": \\"path\\",\\n            \\"required\\": true,\\n            \\"schema\\": {\\n              \\"type\\": \\"integer\\",\\n              \\"format\\": \\"int64\\"\\n            }\\n          }\\n        ],\\n        \\"responses\\": {\\n          \\"200\\": {\\n            \\"description\\": \\"successful operation\\",\\n            \\"content\\": {\\n              \\"application/json\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/Pet\\"\\n                }\\n              },\\n              \\"application/xml\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/Pet\\"\\n                }\\n              }\\n            }\\n          },\\n          \\"400\\": {\\n            \\"description\\": \\"Invalid ID supplied\\"\\n          },\\n          \\"404\\": {\\n            \\"description\\": \\"Pet not found\\"\\n          }\\n        }\\n      },\\n      \\"post\\": {\\n        \\"tags\\": [\\n          \\"pet\\"\\n        ],\\n        \\"summary\\": \\"Updates a pet in the store with form data\\",\\n        \\"operationId\\": \\"pet_updateWithForm\\",\\n        \\"security\\": [\\n          {\\n            \\"petstore_auth\\": [\\n              \\"write:pets\\",\\n              \\"read:pets\\"\\n            ]\\n          }\\n        ],\\n        \\"description\\": \\"\\",\\n        \\"parameters\\": [\\n          {\\n            \\"description\\": \\"ID of pet that needs to be updated\\",\\n            \\"name\\": \\"petId\\",\\n            \\"in\\": \\"path\\",\\n            \\"required\\": true,\\n            \\"schema\\": {\\n              \\"type\\": \\"integer\\",\\n              \\"format\\": \\"int64\\"\\n            }\\n          }\\n        ],\\n        \\"requestBody\\": {\\n          \\"content\\": {\\n            \\"application/x-www-form-urlencoded\\": {\\n              \\"schema\\": {\\n                \\"$ref\\": \\"#/components/schemas/UpdateWithFormRequest\\"\\n              }\\n            }\\n          }\\n        },\\n        \\"responses\\": {\\n          \\"default\\": {\\n            \\"description\\": \\"Invalid input\\"\\n          }\\n        }\\n      },\\n      \\"delete\\": {\\n        \\"tags\\": [\\n          \\"pet\\"\\n        ],\\n        \\"summary\\": \\"Deletes a pet\\",\\n        \\"operationId\\": \\"Pet_delete\\",\\n        \\"security\\": [\\n          {\\n            \\"petstore_auth\\": [\\n              \\"write:pets\\",\\n              \\"read:pets\\"\\n            ],\\n            \\"api_key\\": [\\n            ]\\n          }\\n        ],\\n        \\"description\\": \\"\\",\\n        \\"parameters\\": [\\n          {\\n            \\"description\\": \\"Pet id to delete\\",\\n            \\"name\\": \\"petId\\",\\n            \\"in\\": \\"path\\",\\n            \\"required\\": true,\\n            \\"schema\\": {\\n              \\"type\\": \\"integer\\",\\n              \\"format\\": \\"int64\\"\\n            }\\n          }\\n        ],\\n        \\"responses\\": {\\n          \\"default\\": {\\n            \\"description\\": \\"Invalid pet value\\"\\n          }\\n        }\\n      }\\n    },\\n    \\"/pet/{petId}/uploadImage\\": {\\n      \\"post\\": {\\n        \\"tags\\": [\\n          \\"pet\\"\\n        ],\\n        \\"summary\\": \\"uploads an image\\",\\n        \\"operationId\\": \\"pet_uploadImage\\",\\n        \\"security\\": [\\n          {\\n            \\"petstore_auth\\": [\\n              \\"write:pets\\",\\n              \\"read:pets\\"\\n            ]\\n          }\\n        ],\\n        \\"description\\": \\"\\",\\n        \\"parameters\\": [\\n          {\\n            \\"description\\": \\"ID of pet to update\\",\\n            \\"name\\": \\"petId\\",\\n            \\"in\\": \\"path\\",\\n            \\"required\\": true,\\n            \\"schema\\": {\\n              \\"type\\": \\"integer\\",\\n              \\"format\\": \\"int64\\"\\n            }\\n          }\\n        ],\\n        \\"requestBody\\": {\\n          \\"content\\": {\\n            \\"multipart/form-data\\": {\\n              \\"schema\\": {\\n                \\"$ref\\": \\"#/components/schemas/UploadImageRequest\\"\\n              }\\n            }\\n          }\\n        },\\n        \\"responses\\": {\\n          \\"200\\": {\\n            \\"description\\": \\"successful operation\\",\\n            \\"content\\": {\\n              \\"application/json\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/ApiResponse\\"\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    },\\n    \\"/store/inventory\\": {\\n      \\"get\\": {\\n        \\"tags\\": [\\n          \\"store\\"\\n        ],\\n        \\"summary\\": \\"Returns pet inventories by status\\",\\n        \\"operationId\\": \\"store_getInventory\\",\\n        \\"security\\": [\\n          {\\n            \\"api_key\\": [\\n            ]\\n          }\\n        ],\\n        \\"description\\": \\"Returns a map of status codes to quantities\\",\\n        \\"responses\\": {\\n          \\"200\\": {\\n            \\"description\\": \\"successful operation\\",\\n            \\"content\\": {\\n              \\"application/json\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/GetInventoryResponse\\"\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    },\\n    \\"/store/order\\": {\\n      \\"post\\": {\\n        \\"tags\\": [\\n          \\"store\\"\\n        ],\\n        \\"summary\\": \\"Place an order for a pet\\",\\n        \\"operationId\\": \\"store_placeOrder\\",\\n        \\"description\\": \\"\\",\\n        \\"requestBody\\": {\\n          \\"description\\": \\"order placed for purchasing the pet\\",\\n          \\"content\\": {\\n            \\"application/json\\": {\\n              \\"schema\\": {\\n                \\"$ref\\": \\"#/components/schemas/Order\\"\\n              }\\n            }\\n          },\\n          \\"required\\": true\\n        },\\n        \\"responses\\": {\\n          \\"200\\": {\\n            \\"description\\": \\"successful operation\\",\\n            \\"content\\": {\\n              \\"application/json\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/Order\\"\\n                }\\n              },\\n              \\"application/xml\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/Order\\"\\n                }\\n              }\\n            }\\n          },\\n          \\"400\\": {\\n            \\"description\\": \\"Invalid Order\\"\\n          }\\n        }\\n      }\\n    },\\n    \\"/store/order/{orderId}\\": {\\n      \\"get\\": {\\n        \\"tags\\": [\\n          \\"store\\"\\n        ],\\n        \\"summary\\": \\"Find purchase order by ID\\",\\n        \\"operationId\\": \\"store_getOrderById\\",\\n        \\"description\\": \\"For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions\\",\\n        \\"parameters\\": [\\n          {\\n            \\"description\\": \\"ID of pet that needs to be fetched\\",\\n            \\"name\\": \\"orderId\\",\\n            \\"in\\": \\"path\\",\\n            \\"required\\": true,\\n            \\"schema\\": {\\n              \\"type\\": \\"integer\\",\\n              \\"format\\": \\"int64\\",\\n              \\"minimum\\": 1,\\n              \\"maximum\\": 5\\n            }\\n          }\\n        ],\\n        \\"responses\\": {\\n          \\"200\\": {\\n            \\"description\\": \\"successful operation\\",\\n            \\"content\\": {\\n              \\"application/json\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/Order\\"\\n                }\\n              },\\n              \\"application/xml\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/Order\\"\\n                }\\n              }\\n            }\\n          },\\n          \\"400\\": {\\n            \\"description\\": \\"Invalid ID supplied\\"\\n          },\\n          \\"404\\": {\\n            \\"description\\": \\"Order not found\\"\\n          }\\n        }\\n      },\\n      \\"delete\\": {\\n        \\"tags\\": [\\n          \\"store\\"\\n        ],\\n        \\"summary\\": \\"Delete purchase order by ID\\",\\n        \\"operationId\\": \\"store_deleteOrder\\",\\n        \\"description\\": \\"For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors\\",\\n        \\"parameters\\": [\\n          {\\n            \\"description\\": \\"ID of the order that needs to be deleted\\",\\n            \\"name\\": \\"orderId\\",\\n            \\"in\\": \\"path\\",\\n            \\"required\\": true,\\n            \\"schema\\": {\\n              \\"type\\": \\"string\\"\\n            }\\n          }\\n        ],\\n        \\"responses\\": {\\n          \\"200\\": {\\n            \\"description\\": \\"OK\\"\\n          },\\n          \\"400\\": {\\n            \\"description\\": \\"Invalid ID supplied\\"\\n          },\\n          \\"404\\": {\\n            \\"description\\": \\"Order not found\\"\\n          }\\n        }\\n      }\\n    },\\n    \\"/user\\": {\\n      \\"post\\": {\\n        \\"tags\\": [\\n          \\"user\\"\\n        ],\\n        \\"summary\\": \\"Create user\\",\\n        \\"operationId\\": \\"user_create\\",\\n        \\"security\\": [\\n          {\\n            \\"api_key\\": [\\n            ]\\n          }\\n        ],\\n        \\"description\\": \\"This can only be done by the logged in user.\\",\\n        \\"requestBody\\": {\\n          \\"description\\": \\"Created user object\\",\\n          \\"content\\": {\\n            \\"application/json\\": {\\n              \\"schema\\": {\\n                \\"$ref\\": \\"#/components/schemas/User\\"\\n              }\\n            }\\n          },\\n          \\"required\\": true\\n        },\\n        \\"responses\\": {\\n          \\"default\\": {\\n            \\"description\\": \\"successful operation\\"\\n          }\\n        }\\n      }\\n    },\\n    \\"/user/createWithArray\\": {\\n      \\"post\\": {\\n        \\"tags\\": [\\n          \\"user\\"\\n        ],\\n        \\"summary\\": \\"Creates list of users with given input array\\",\\n        \\"operationId\\": \\"user_createWithArray\\",\\n        \\"security\\": [\\n          {\\n            \\"api_key\\": [\\n            ]\\n          }\\n        ],\\n        \\"description\\": \\"\\",\\n        \\"requestBody\\": {\\n          \\"$ref\\": \\"#/components/requestBodies/UserArray\\"\\n        },\\n        \\"responses\\": {\\n          \\"default\\": {\\n            \\"description\\": \\"successful operation\\"\\n          }\\n        }\\n      }\\n    },\\n    \\"/user/createWithList\\": {\\n      \\"post\\": {\\n        \\"tags\\": [\\n          \\"user\\"\\n        ],\\n        \\"summary\\": \\"Creates list of users with given input array\\",\\n        \\"operationId\\": \\"user_createWithList\\",\\n        \\"security\\": [\\n          {\\n            \\"api_key\\": [\\n            ]\\n          }\\n        ],\\n        \\"description\\": \\"\\",\\n        \\"requestBody\\": {\\n          \\"$ref\\": \\"#/components/requestBodies/UserArray\\"\\n        },\\n        \\"responses\\": {\\n          \\"default\\": {\\n            \\"description\\": \\"successful operation\\"\\n          }\\n        }\\n      }\\n    },\\n    \\"/user/login\\": {\\n      \\"get\\": {\\n        \\"tags\\": [\\n          \\"user\\"\\n        ],\\n        \\"summary\\": \\"Logs user into the system\\",\\n        \\"operationId\\": \\"user_login\\",\\n        \\"description\\": \\"\\",\\n        \\"parameters\\": [\\n          {\\n            \\"description\\": \\"The user name for login\\",\\n            \\"name\\": \\"username\\",\\n            \\"in\\": \\"query\\",\\n            \\"required\\": true,\\n            \\"schema\\": {\\n              \\"type\\": \\"string\\",\\n              \\"pattern\\": \\"^[a-zA-Z0-9]+[a-zA-Z0-9\\\\\\\\.\\\\\\\\-_]*[a-zA-Z0-9]+$\\"\\n            }\\n          },\\n          {\\n            \\"description\\": \\"The password for login in clear text\\",\\n            \\"name\\": \\"password\\",\\n            \\"in\\": \\"query\\",\\n            \\"required\\": true,\\n            \\"schema\\": {\\n              \\"type\\": \\"string\\"\\n            }\\n          }\\n        ],\\n        \\"responses\\": {\\n          \\"200\\": {\\n            \\"description\\": \\"successful operation\\",\\n            \\"headers\\": {\\n              \\"Set-Cookie\\": {\\n                \\"description\\": \\"Cookie authentication key for use with the \`api_key\` apiKey authentication.\\",\\n                \\"schema\\": {\\n                  \\"type\\": \\"string\\",\\n                  \\"example\\": \\"AUTH_KEY=abcde12345; Path=/; HttpOnly\\"\\n                }\\n              },\\n              \\"X-Rate-Limit\\": {\\n                \\"description\\": \\"calls per hour allowed by the user\\",\\n                \\"schema\\": {\\n                  \\"type\\": \\"integer\\",\\n                  \\"format\\": \\"int32\\"\\n                }\\n              },\\n              \\"X-Expires-After\\": {\\n                \\"description\\": \\"date in UTC when token expires\\",\\n                \\"schema\\": {\\n                  \\"type\\": \\"string\\",\\n                  \\"format\\": \\"date-time\\"\\n                }\\n              }\\n            },\\n            \\"content\\": {\\n              \\"application/json\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/Login200Response\\"\\n                }\\n              },\\n              \\"application/xml\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/LoginResponse\\"\\n                }\\n              }\\n            }\\n          },\\n          \\"400\\": {\\n            \\"description\\": \\"Invalid username/password supplied\\"\\n          }\\n        }\\n      }\\n    },\\n    \\"/user/logout\\": {\\n      \\"get\\": {\\n        \\"tags\\": [\\n          \\"user\\"\\n        ],\\n        \\"summary\\": \\"Logs out current logged in user session\\",\\n        \\"operationId\\": \\"user_logout\\",\\n        \\"security\\": [\\n          {\\n            \\"api_key\\": [\\n            ]\\n          }\\n        ],\\n        \\"description\\": \\"\\",\\n        \\"responses\\": {\\n          \\"default\\": {\\n            \\"description\\": \\"successful operation\\"\\n          }\\n        }\\n      }\\n    },\\n    \\"/user/{username}\\": {\\n      \\"get\\": {\\n        \\"tags\\": [\\n          \\"user\\"\\n        ],\\n        \\"summary\\": \\"Get user by user name\\",\\n        \\"operationId\\": \\"user_getByName\\",\\n        \\"description\\": \\"\\",\\n        \\"parameters\\": [\\n          {\\n            \\"description\\": \\"The name that needs to be fetched. Use user1 for testing.\\",\\n            \\"name\\": \\"username\\",\\n            \\"in\\": \\"path\\",\\n            \\"required\\": true,\\n            \\"schema\\": {\\n              \\"type\\": \\"string\\"\\n            }\\n          }\\n        ],\\n        \\"responses\\": {\\n          \\"200\\": {\\n            \\"description\\": \\"successful operation\\",\\n            \\"content\\": {\\n              \\"application/json\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/User\\"\\n                }\\n              },\\n              \\"application/xml\\": {\\n                \\"schema\\": {\\n                  \\"$ref\\": \\"#/components/schemas/User\\"\\n                }\\n              }\\n            }\\n          },\\n          \\"400\\": {\\n            \\"description\\": \\"Invalid username supplied\\"\\n          },\\n          \\"404\\": {\\n            \\"description\\": \\"User not found\\"\\n          }\\n        }\\n      },\\n      \\"put\\": {\\n        \\"tags\\": [\\n          \\"user\\"\\n        ],\\n        \\"summary\\": \\"Updated user\\",\\n        \\"operationId\\": \\"user_update\\",\\n        \\"security\\": [\\n          {\\n            \\"api_key\\": [\\n            ]\\n          }\\n        ],\\n        \\"description\\": \\"This can only be done by the logged in user.\\",\\n        \\"parameters\\": [\\n          {\\n            \\"description\\": \\"name that need to be deleted\\",\\n            \\"name\\": \\"username\\",\\n            \\"in\\": \\"path\\",\\n            \\"required\\": true,\\n            \\"schema\\": {\\n              \\"type\\": \\"string\\"\\n            }\\n          }\\n        ],\\n        \\"requestBody\\": {\\n          \\"description\\": \\"Updated user object\\",\\n          \\"content\\": {\\n            \\"application/json\\": {\\n              \\"schema\\": {\\n                \\"$ref\\": \\"#/components/schemas/User\\"\\n              }\\n            }\\n          },\\n          \\"required\\": true\\n        },\\n        \\"responses\\": {\\n          \\"200\\": {\\n            \\"description\\": \\"OK\\"\\n          },\\n          \\"400\\": {\\n            \\"description\\": \\"Invalid user supplied\\"\\n          },\\n          \\"404\\": {\\n            \\"description\\": \\"User not found\\"\\n          }\\n        }\\n      },\\n      \\"delete\\": {\\n        \\"tags\\": [\\n          \\"user\\"\\n        ],\\n        \\"summary\\": \\"Delete user\\",\\n        \\"operationId\\": \\"user_delete\\",\\n        \\"security\\": [\\n          {\\n            \\"api_key\\": [\\n            ]\\n          }\\n        ],\\n        \\"description\\": \\"This can only be done by the logged in user.\\",\\n        \\"parameters\\": [\\n          {\\n            \\"description\\": \\"The name that needs to be deleted\\",\\n            \\"name\\": \\"username\\",\\n            \\"in\\": \\"path\\",\\n            \\"required\\": true,\\n            \\"schema\\": {\\n              \\"type\\": \\"string\\"\\n            }\\n          }\\n        ],\\n        \\"responses\\": {\\n          \\"200\\": {\\n            \\"description\\": \\"OK\\"\\n          },\\n          \\"400\\": {\\n            \\"description\\": \\"Invalid username supplied\\"\\n          },\\n          \\"404\\": {\\n            \\"description\\": \\"User not found\\"\\n          }\\n        }\\n      }\\n    }\\n  },\\n  \\"components\\": {\\n    \\"requestBodies\\": {\\n      \\"UserArray\\": {\\n        \\"description\\": \\"List of user object\\",\\n        \\"content\\": {\\n          \\"application/json\\": {\\n            \\"schema\\": {\\n              \\"$ref\\": \\"#/components/schemas/CreateWithArrayRequest\\"\\n            }\\n          }\\n        },\\n        \\"required\\": true\\n      },\\n      \\"Pet\\": {\\n        \\"description\\": \\"Pet object that needs to be added to the store\\",\\n        \\"content\\": {\\n          \\"application/json\\": {\\n            \\"schema\\": {\\n              \\"$ref\\": \\"#/components/schemas/Pet\\"\\n            }\\n          },\\n          \\"application/xml\\": {\\n            \\"schema\\": {\\n              \\"$ref\\": \\"#/components/schemas/Pet\\"\\n            }\\n          }\\n        },\\n        \\"required\\": true\\n      }\\n    },\\n    \\"securitySchemes\\": {\\n      \\"petstore_auth\\": {\\n        \\"type\\": \\"oauth2\\",\\n        \\"flows\\": {\\n          \\"implicit\\": {\\n            \\"authorizationUrl\\": \\"http://petstore.swagger.io/api/oauth/dialog\\",\\n            \\"scopes\\": {\\n              \\"write:pets\\": \\"modify pets in your account\\",\\n              \\"read:pets\\": \\"read your pets\\"\\n            }\\n          }\\n        }\\n      },\\n      \\"api_key\\": {\\n        \\"type\\": \\"apiKey\\",\\n        \\"name\\": \\"api_key\\",\\n        \\"in\\": \\"header\\"\\n      }\\n    },\\n    \\"schemas\\": {\\n      \\"Order\\": {\\n        \\"title\\": \\"Pet Order\\",\\n        \\"description\\": \\"An order for a pets from the pet store\\",\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"id\\": {\\n            \\"type\\": \\"integer\\",\\n            \\"format\\": \\"int64\\"\\n          },\\n          \\"petId\\": {\\n            \\"type\\": \\"integer\\",\\n            \\"format\\": \\"int64\\"\\n          },\\n          \\"quantity\\": {\\n            \\"type\\": \\"integer\\",\\n            \\"format\\": \\"int32\\"\\n          },\\n          \\"shipDate\\": {\\n            \\"type\\": \\"string\\",\\n            \\"format\\": \\"date-time\\"\\n          },\\n          \\"status\\": {\\n            \\"description\\": \\"Order Status\\",\\n            \\"type\\": \\"string\\",\\n            \\"enum\\": [\\n              \\"placed\\",\\n              \\"approved\\",\\n              \\"delivered\\"\\n            ]\\n          },\\n          \\"complete\\": {\\n            \\"type\\": \\"boolean\\",\\n            \\"default\\": false\\n          }\\n        },\\n        \\"xml\\": {\\n          \\"name\\": \\"Order\\"\\n        }\\n      },\\n      \\"Category\\": {\\n        \\"title\\": \\"Pet category\\",\\n        \\"description\\": \\"A category for a pet\\",\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"id\\": {\\n            \\"type\\": \\"integer\\",\\n            \\"format\\": \\"int64\\"\\n          },\\n          \\"name\\": {\\n            \\"type\\": \\"string\\",\\n            \\"pattern\\": \\"^[a-zA-Z0-9]+[a-zA-Z0-9\\\\\\\\.\\\\\\\\-_]*[a-zA-Z0-9]+$\\"\\n          }\\n        },\\n        \\"xml\\": {\\n          \\"name\\": \\"Category\\"\\n        }\\n      },\\n      \\"User\\": {\\n        \\"title\\": \\"a User\\",\\n        \\"description\\": \\"A User who is purchasing from the pet store\\",\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"id\\": {\\n            \\"type\\": \\"integer\\",\\n            \\"format\\": \\"int64\\"\\n          },\\n          \\"username\\": {\\n            \\"type\\": \\"string\\"\\n          },\\n          \\"firstName\\": {\\n            \\"type\\": \\"string\\"\\n          },\\n          \\"lastName\\": {\\n            \\"type\\": \\"string\\"\\n          },\\n          \\"email\\": {\\n            \\"type\\": \\"string\\"\\n          },\\n          \\"password\\": {\\n            \\"type\\": \\"string\\"\\n          },\\n          \\"phone\\": {\\n            \\"type\\": \\"string\\"\\n          },\\n          \\"userStatus\\": {\\n            \\"description\\": \\"User Status\\",\\n            \\"type\\": \\"integer\\",\\n            \\"format\\": \\"int32\\"\\n          }\\n        },\\n        \\"xml\\": {\\n          \\"name\\": \\"User\\"\\n        }\\n      },\\n      \\"Tag\\": {\\n        \\"title\\": \\"Pet Tag\\",\\n        \\"description\\": \\"A tag for a pet\\",\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"id\\": {\\n            \\"type\\": \\"integer\\",\\n            \\"format\\": \\"int64\\"\\n          },\\n          \\"name\\": {\\n            \\"type\\": \\"string\\"\\n          }\\n        },\\n        \\"xml\\": {\\n          \\"name\\": \\"Tag\\"\\n        }\\n      },\\n      \\"Pet\\": {\\n        \\"title\\": \\"a Pet\\",\\n        \\"description\\": \\"A pet for sale in the pet store\\",\\n        \\"type\\": \\"object\\",\\n        \\"required\\": [\\n          \\"name\\",\\n          \\"photoUrls\\"\\n        ],\\n        \\"properties\\": {\\n          \\"tags\\": {\\n            \\"type\\": \\"array\\",\\n            \\"xml\\": {\\n              \\"name\\": \\"tag\\",\\n              \\"wrapped\\": true\\n            },\\n            \\"items\\": {\\n              \\"$ref\\": \\"#/components/schemas/Tag\\"\\n            }\\n          },\\n          \\"id\\": {\\n            \\"type\\": \\"integer\\",\\n            \\"format\\": \\"int64\\"\\n          },\\n          \\"category\\": {\\n            \\"$ref\\": \\"#/components/schemas/Category\\"\\n          },\\n          \\"name\\": {\\n            \\"type\\": \\"string\\",\\n            \\"example\\": \\"doggie\\"\\n          },\\n          \\"photoUrls\\": {\\n            \\"type\\": \\"array\\",\\n            \\"xml\\": {\\n              \\"name\\": \\"photoUrl\\",\\n              \\"wrapped\\": true\\n            },\\n            \\"items\\": {\\n              \\"type\\": \\"string\\"\\n            }\\n          },\\n          \\"status\\": {\\n            \\"description\\": \\"pet status in the store\\",\\n            \\"type\\": \\"string\\",\\n            \\"deprecated\\": true,\\n            \\"enum\\": [\\n              \\"available\\",\\n              \\"pending\\",\\n              \\"sold\\"\\n            ]\\n          }\\n        },\\n        \\"xml\\": {\\n          \\"name\\": \\"Pet\\"\\n        }\\n      },\\n      \\"ApiResponse\\": {\\n        \\"title\\": \\"An uploaded response\\",\\n        \\"description\\": \\"Describes the result of uploading an image resource\\",\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"code\\": {\\n            \\"type\\": \\"integer\\",\\n            \\"format\\": \\"int32\\"\\n          },\\n          \\"type\\": {\\n            \\"type\\": \\"string\\"\\n          },\\n          \\"message\\": {\\n            \\"type\\": \\"string\\"\\n          }\\n        }\\n      },\\n      \\"PaginateRequest\\": {\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"first\\": {\\n            \\"type\\": \\"integer\\"\\n          },\\n          \\"after\\": {\\n            \\"type\\": \\"string\\"\\n          }\\n        }\\n      },\\n      \\"UpdateWithFormRequest\\": {\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"name\\": {\\n            \\"description\\": \\"Updated name of the pet\\",\\n            \\"type\\": \\"string\\"\\n          },\\n          \\"status\\": {\\n            \\"description\\": \\"Updated status of the pet\\",\\n            \\"type\\": \\"string\\"\\n          }\\n        }\\n      },\\n      \\"UploadImageRequest\\": {\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"additionalMetadata\\": {\\n            \\"description\\": \\"Additional data to pass to server\\",\\n            \\"type\\": \\"string\\"\\n          },\\n          \\"file\\": {\\n            \\"description\\": \\"file to upload\\",\\n            \\"type\\": \\"string\\",\\n            \\"format\\": \\"binary\\"\\n          }\\n        }\\n      },\\n      \\"CreateWithArrayRequest\\": {\\n        \\"type\\": \\"array\\",\\n        \\"items\\": {\\n          \\"$ref\\": \\"#/components/schemas/User\\"\\n        }\\n      },\\n      \\"PaginateResponse\\": {\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"edges\\": {\\n            \\"type\\": \\"object\\",\\n            \\"properties\\": {\\n              \\"node\\": {\\n                \\"type\\": \\"object\\",\\n                \\"properties\\": {\\n                  \\"message\\": {\\n                    \\"type\\": \\"string\\"\\n                  }\\n                }\\n              }\\n            }\\n          },\\n          \\"pageInfo\\": {\\n            \\"type\\": \\"object\\",\\n            \\"properties\\": {\\n              \\"hasNextPage\\": {\\n                \\"type\\": \\"boolean\\"\\n              },\\n              \\"hasPreviousPage\\": {\\n                \\"type\\": \\"boolean\\"\\n              },\\n              \\"startCursor\\": {\\n                \\"type\\": \\"string\\"\\n              },\\n              \\"endCursor\\": {\\n                \\"type\\": \\"string\\"\\n              }\\n            }\\n          }\\n        }\\n      },\\n      \\"FindByStatusResponse\\": {\\n        \\"type\\": \\"array\\",\\n        \\"items\\": {\\n          \\"$ref\\": \\"#/components/schemas/Pet\\"\\n        }\\n      },\\n      \\"FindByStatus200Response\\": {\\n        \\"type\\": \\"array\\",\\n        \\"items\\": {\\n          \\"$ref\\": \\"#/components/schemas/Pet\\"\\n        }\\n      },\\n      \\"FindByTagsResponse\\": {\\n        \\"type\\": \\"array\\",\\n        \\"items\\": {\\n          \\"$ref\\": \\"#/components/schemas/Pet\\"\\n        }\\n      },\\n      \\"FindByTags200Response\\": {\\n        \\"type\\": \\"array\\",\\n        \\"items\\": {\\n          \\"$ref\\": \\"#/components/schemas/Pet\\"\\n        }\\n      },\\n      \\"GetInventoryResponse\\": {\\n        \\"type\\": \\"object\\",\\n        \\"additionalProperties\\": {\\n          \\"type\\": \\"integer\\",\\n          \\"format\\": \\"int32\\"\\n        }\\n      },\\n      \\"LoginResponse\\": {\\n        \\"type\\": \\"string\\"\\n      },\\n      \\"Login200Response\\": {\\n        \\"type\\": \\"string\\"\\n      }\\n    }\\n  },\\n  \\"externalDocs\\": {\\n    \\"description\\": \\"Find out more about Swagger\\",\\n    \\"url\\": \\"http://swagger.io\\"\\n  }\\n}""`;
