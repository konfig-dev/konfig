/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.konfigthis.api;

import ch.qos.logback.core.net.server.Client;
import com.konfigthis.model.AdditionalProperties;
import com.konfigthis.model.AwsPresignedUrl;
import com.konfigthis.model.GenerateBody;
import com.konfigthis.model.GeneratorConfig;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.commonmark.node.Code;
import org.openapitools.codegen.ClientOptInput;
import org.openapitools.codegen.DefaultGenerator;
import org.openapitools.codegen.api.TemplateDefinition;
import org.openapitools.codegen.config.CodegenConfigurator;
import org.openapitools.codegen.utils.CamelizeOption;
import org.openapitools.codegen.utils.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.FileSystemUtils;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;
import software.amazon.awssdk.services.s3.model.PutObjectResponse;
import software.amazon.awssdk.services.s3.presigner.S3Presigner;
import software.amazon.awssdk.services.s3.presigner.model.GetObjectPresignRequest;
import software.amazon.awssdk.services.s3.presigner.model.PresignedGetObjectRequest;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.*;
import java.util.stream.Collectors;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-11-05T10:28:00.101-07:00[America/Los_Angeles]")
@Validated
@Tag(name = "Generate", description = "Generate SDKs from an OpenAPI spec")
public interface GenerateApi {

    Logger logger = LoggerFactory.getLogger(GenerateApi.class);

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /generate : Generate SDKs
     *
     * @param generateBody Generation Configuration (optional)
     * @return Successful operation (status code 200)
     */
    @Operation(operationId = "generatePost", summary = "Generate SDKs", tags = {"Generate"}, responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AwsPresignedUrl.class))
            })
    })
    @RequestMapping(method = RequestMethod.POST, value = "/generate", produces = {"application/json"}, consumes = {
            "application/json"})
    default ResponseEntity<AwsPresignedUrl> generatePost(
            @Parameter(name = "GenerateBody", description = "Generation Configuration") @Valid @RequestBody(required = false) GenerateBody generateBody

    ) throws IOException {
        DefaultGenerator generator = new DefaultGenerator();

        // Create temporary directory for generation
        Path path = Paths.get(FileUtils.getTempDirectory().getAbsolutePath(), "openapi-generator-api",
                UUID.randomUUID().toString());
        File tmpDir = Files.createDirectories(path).toFile();
        logger.info("Temporary directory: {}", tmpDir.getAbsolutePath());

        logger.info(String.valueOf(generateBody.getConfig()));

        // Execute generation
        String dirName =
                Optional.ofNullable(generateBody.getConfig().getOutputDirectoryName()).orElse(generateBody.getConfig().getGeneratorName());
        generator.opts(generateClientOptInput(generateBody, tmpDir, dirName));

        // Don't generate .openapi-generator-ignore and other metadata files
        generator.setGenerateMetadata(false);

        generator.generate();

        // Tar the output
        File tarFile = tarFile(tmpDir, dirName);

        // Upload to S3 and get signed GetObjectURL
        Region region = Region.US_WEST_1;
        S3Client s3 = S3Client.builder().region(region).build();
        TimeZone tz = TimeZone.getTimeZone("UTC");
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'"); // Quoted "Z" to indicate UTC, no timezone offset
        df.setTimeZone(tz);
        String nowAsISO = df.format(new Date());
        String key = String.format("%s-%s.tar.gz", nowAsISO, UUID.randomUUID().toString());
        PutObjectResponse putObjectResponse = s3.putObject(PutObjectRequest.builder()
                .bucket("konfig-sdks")
                .key(key)
                .build(), software.amazon.awssdk.core.sync.RequestBody.fromFile(tarFile));
        S3Presigner s3Presigner = S3Presigner.builder().region(region).build();
        PresignedGetObjectRequest presignedGetObjectRequest = s3Presigner
                .presignGetObject(GetObjectPresignRequest.builder()
                        .getObjectRequest(b -> {
                            b.bucket("konfig-sdks");
                            b.key(key);
                        })
                        .signatureDuration(Duration.ofMinutes(10))
                        .build());

        // Cleanup
        FileSystemUtils.deleteRecursively(tmpDir);

        return new ResponseEntity<>(new AwsPresignedUrl().url(presignedGetObjectRequest.url().toString()).key(key),
                HttpStatus.OK);
    }

    default File tarFile(File tmpDir, String generatorName) throws IOException {
        File outputDir = outputDir(tmpDir, generatorName);
        File tarGzPath = new File(tmpDir, "archive.tar.gz");
        FileOutputStream fOut = new FileOutputStream(tarGzPath);
        BufferedOutputStream bOut = new BufferedOutputStream(fOut);
        GzipCompressorOutputStream gzOut = new GzipCompressorOutputStream(bOut);
        TarArchiveOutputStream tOut = new TarArchiveOutputStream(gzOut);

        // Enabling handling of entry names longer than 100 bytes
        tOut.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);

        addFileToTarGz(tOut, outputDir.getAbsolutePath(), "");
        tOut.finish();
        tOut.close();
        gzOut.close();
        bOut.close();
        fOut.close();
        return tarGzPath;
    }

    default void addFileToTarGz(TarArchiveOutputStream tOut, String path, String base) throws IOException {
        File f = new File(path);
        String entryName = base + f.getName();
        TarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);
        tOut.putArchiveEntry(tarEntry);

        if (f.isFile()) {
            IOUtils.copy(new FileInputStream(f), tOut);
            tOut.closeArchiveEntry();
        } else {
            tOut.closeArchiveEntry();
            File[] children = f.listFiles();
            if (children != null) {
                for (File child : children) {
                    addFileToTarGz(tOut, child.getAbsolutePath(), entryName + "/");
                }
            }
        }
    }

    default File outputDir(File tmpDir, String generatorName) {
        return new File(tmpDir + "/output", generatorName);
    }

    default ClientOptInput generateClientOptInput(GenerateBody body, File tmpDir, String dirName) throws IOException {
        CodegenConfigurator configurator = new CodegenConfigurator();
        configurator.setValidateSpec(body.getValidateSpec() == null ? true : body.getValidateSpec());
        configurator.setArtifactVersion(body.getConfig().getArtifactVersion());
        configurator.setGeneratorName(body.getConfig().getGeneratorName());
        configurator.setPackageName(body.getConfig().getPackageName());
        configurator.setGitHost(body.getConfig().getGitHost());
        configurator.setGitUserId(body.getConfig().getGitUserId());
        configurator.setGitRepoId(body.getConfig().getGitRepoId());
        configurator.setRemoveOperationIdPrefix(body.getConfig().getRemoveOperationIdPrefix());
        AdditionalProperties addnProp = body.getConfig().getAdditionalProperties();
        configurator.setAdditionalProperties(transformAdditionalPropertiesToMap(
                body.getConfig().getAdditionalProperties(), body.getConfig().getPackageName(), body.getConfig().getGeneratorName()));

        // Create folder for output
        File outputDir = outputDir(tmpDir, dirName);
        outputDir.mkdir();
        configurator.setOutputDir(outputDir.getAbsolutePath());

        // Put input spec into tmp file and set path
        File spec = new File(tmpDir.getAbsolutePath(), "spec.yml");
        FileWriter specWriter = new FileWriter(spec);
        specWriter.write(body.getSpec().getSrc());
        specWriter.close();
        configurator.setInputSpec(spec.getAbsolutePath());

        // Create tmp dir and put all templates in that file, generate/set
        // TemplateDefinitions
        File templateDir = new File(tmpDir, "templates");
        templateDir.mkdir();
        configurator.setTemplateDir(templateDir.getAbsolutePath());
        configurator.setValidateSpec(false);
        ClientOptInput clientOptInput = configurator.toClientOptInput();
        List<TemplateDefinition> templateDefinitions = new ArrayList<>();

        if (body.getConfig().getFiles() != null) {
            body.getConfig().getFiles().forEach((fileName, settings) -> {
                File templateFile = new File(templateDir, fileName);
                try {
                    FileWriter fileWriter = new FileWriter(templateFile);
                    fileWriter.write((settings.getSource()));
                    fileWriter.close();
                    templateDefinitions.add(new TemplateDefinition(fileName, settings.getDestinationFilename()));
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            });
        }

        clientOptInput.userDefinedTemplates(templateDefinitions);

        return clientOptInput;
    }

    default Map<String, Object> transformAdditionalPropertiesToMap(AdditionalProperties additionalProperties,
                                                                   String packageName, String generator) {
        Map<String, Object> map = new HashMap<>();
        if (generator.equals("ruby"))
            putIfPresent(map, "isFaraday", true);
        putIfPresent(map, "apiPackage", additionalProperties.getApiPackage());
        putIfPresent(map, "invokerPackage", additionalProperties.getInvokerPackage());
        if (additionalProperties.getInvokerPackage() != null)
            putIfPresent(map, "invokerPackageLowerCase", additionalProperties.getInvokerPackage().toLowerCase());
        putIfPresent(map, "gitRepoName", additionalProperties.getGitRepoName());
        putIfPresent(map, "modelPackage", additionalProperties.getModelPackage());
        putIfPresent(map, "artifactId", additionalProperties.getArtifactId());
        putIfPresent(map, "artifactUrl", additionalProperties.getArtifactUrl());
        putIfPresent(map, "groupId", additionalProperties.getGroupId());
        putIfPresent(map, "supportPhp7", additionalProperties.getSupportPhp7());
        putIfPresent(map, "projectName", additionalProperties.getProjectName());
        putIfPresent(map, "disallowAdditionalPropertiesIfNotPresent",
                additionalProperties.getDisallowAdditionalPropertiesIfNotPresent());
        putIfPresent(map, "packageVersion", additionalProperties.getPackageVersion());
        putIfPresent(map, "npmName", additionalProperties.getNpmName());
        putIfPresent(map, "gemName", additionalProperties.getGemName());
        putIfPresent(map, "gemVersion", additionalProperties.getGemVersion());
        putIfPresent(map, "npmVersion", additionalProperties.getNpmVersion());
        putIfPresent(map, "keepAllParametersOptional", additionalProperties.getKeepAllParametersOptional());
        putIfPresent(map, "podVersion", additionalProperties.getPodVersion());
        putIfPresent(map, "podAuthors", additionalProperties.getPodAuthors());
        putIfPresent(map, "podName", additionalProperties.getPodName());
        putIfPresent(map, "tagPriority", additionalProperties.getTagPriority());
        putIfPresent(map, "classPrefix", additionalProperties.getClassPrefix());
        putIfPresent(map, "outputDirectory", additionalProperties.getOutputDirectory());
        putIfPresent(map, "authorName", additionalProperties.getAuthorName());
        putIfPresent(map, "authorEmail", additionalProperties.getAuthorEmail());
        putIfPresent(map, "includeFetchAdapter", additionalProperties.getIncludeFetchAdapter());
        putIfPresent(map, "includeEventSourceParser", additionalProperties.getIncludeEventSourceParser());
        putIfPresent(map, "swiftPackagePath", additionalProperties.getSwiftPackagePath());
        putIfPresent(map, "apiDocumentationAuthenticationPartial", additionalProperties.getApiDocumentationAuthenticationPartial());
        putIfPresent(map, "readmeSnippet", additionalProperties.getReadmeSnippet());
        putIfPresent(map, "asyncReadmeSnippet", additionalProperties.getAsyncReadmeSnippet());
        putIfPresent(map, "readmeSupportingDescriptionSnippet", additionalProperties.getReadmeSupportingDescriptionSnippet());
        putIfPresent(map, "readmeDescriptionSnippet", additionalProperties.getReadmeDescriptionSnippet());
        putIfPresent(map, "objectPropertyNamingConvention", additionalProperties.getObjectPropertyNamingConvention());
        putIfPresent(map, "useCamelCase", additionalProperties.getObjectPropertyNamingConvention());
        if (additionalProperties.getObjectPropertyNamingConvention() != null) {
            putIfPresent(map, "useCamelCase", additionalProperties.getObjectPropertyNamingConvention().equals("camelCase"));
            putIfPresent(map, "useSnakeCase", additionalProperties.getObjectPropertyNamingConvention().equals("snake_case"));
        }
        putIfPresent(map, "setSkipSerializationToTrueByDefault", additionalProperties.getSetSkipSerializationToTrueByDefault());
        putIfPresent(map, "defaultTimeout", additionalProperties.getDefaultTimeout());
        putIfPresent(map, "composerPackageName", additionalProperties.getComposerPackageName());
        putIfPresent(map, "packageUrl", additionalProperties.getPackageUrl());
        putIfPresent(map, "moduleName", additionalProperties.getModuleName());
        putIfPresent(map, "removeKonfigBranding", additionalProperties.getRemoveKonfigBranding());
        putIfPresent(map, "omitInfoDescription", additionalProperties.getOmitInfoDescription());
        putIfPresent(map, "omitModelDocumentation", additionalProperties.getOmitModelDocumentation());
        putIfPresent(map, "omitApiDocumentation", additionalProperties.getOmitApiDocumentation());
        putIfPresent(map, "topLevelOperations", additionalProperties.getTopLevelOperations());
        putIfPresent(map, "packagistUsername", additionalProperties.getPackagistUsername());
        putIfPresent(map, "toStringReturnsJson", additionalProperties.getToStringReturnsJson());
        putIfPresent(map, "userAgent", additionalProperties.getUserAgent());
        putIfPresent(map, "targetFramework", "net7.0;net5.0;netstandard2.0");
        putIfPresent(map, "packageTitle", "https://konfigthis.com generated SDK");
        putIfPresent(map, "artifactDescription", "This library was generated by https://konfigthis.com");
        putIfPresent(map, "packageDescription", "This library was generated by https://konfigthis.com");
        putIfPresent(map, "packageAuthors", "Konfig");
        putIfPresent(map, "packageAuthor", "Konfig");
        putIfPresent(map, "packageCompany", "Konfig");
        putIfPresent(map, "packageAuthorHomepage", "https://konfigthis.com");
        putIfPresent(map, "packageProductName", "Konfig SDK");
        putIfPresent(map, "licenseId", "MIT");
        putIfPresent(map, "licenseName", "MIT");

        // https://github.com/OpenAPITools/openapi-generator/issues/9953
        putIfPresent(map, "removeMigrationProjectNameClass", true);

        putIfPresent(map, "structPrefix", true);
        putIfPresent(map, "licenseUrl", "https://opensource.org/licenses/MIT");
        putIfPresent(map, "hideGenerationTimestamp", true);
        putIfPresent(map, "goImportAlias", packageName);

        // For typescript-axios
        putIfPresent(map, "withSeparateModelsAndApi", true);
        putIfPresent(map, "useSingleRequestParameter", additionalProperties.getUseSingleRequestParameter());

        // For python & typescript-axios
        putIfPresent(map, "clientName", additionalProperties.getClientName());
        if (additionalProperties.getClientName() != null)
            putIfPresent(map, "clientNameLowercase", additionalProperties.getClientName().toLowerCase());
        putIfPresent(map, "clientStateIsOptional", additionalProperties.getClientStateIsOptional());
        putIfPresent(map, "clientState", additionalProperties.getClientState());
        if (additionalProperties.getClientState() != null)
            putIfPresent(map, "clientStateSetterGetterCamelCase", additionalProperties.getClientState().stream().map(state -> {
                Map<String, String> object = new HashMap<>();
                object.put("state", state);
                object.put("setter", "set" + StringUtils.camelize(state));
                object.put("getter", "get" + StringUtils.camelize(state));
                return object;
            }).collect(Collectors.toList())); // added for PHP setter in Configuration.php
        putIfPresent(map, "apiKeyAlias", additionalProperties.getApiKeyAlias());

        // https://openapi-generator.tech/docs/generators/go
        putIfPresent(map, "enumClassPrefix", true);
        return map;
    }

    default void putIfPresent(Map<String, Object> map, String key, Object value) {
        Optional.ofNullable(value).ifPresent((v) -> {
            map.put(key, v);
        });
    }

}
