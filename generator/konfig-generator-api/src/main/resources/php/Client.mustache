<?php

namespace {{invokerPackage}};

class Client
{
{{#apiInfo}}
    {{#apis}}
    {{#supportPhp7}}/** @var \{{apiPackage}}\{{classname}} */{{/supportPhp7}}
    public {{^supportPhp7}}readonly \{{apiPackage}}\{{classname}} {{/supportPhp7}}${{classNameCamelCase}};
    {{/apis}}

    /**
     * Constructor
     */
    public function __construct(
{{#hasOAuthMethods}}
{{#authMethods}}
{{#-first}}
        string $tokenUrl = '{{tokenUrl}}',
        string $clientId = null,
        string $clientSecret = null,
{{/-first}}
{{/authMethods}}
{{/hasOAuthMethods}}
        {{#clientState}}
        string ${{.}} = null,
        {{/clientState}}
        {{#apiKeyMethods}}
        string ${{{keyParamName}}} = null,
        {{/apiKeyMethods}}
        bool $verifySsl = null,
        string $host = '{{basePath}}',
        \{{invokerPackage}}\Configuration $config = null
    )
    {
        if ($config == null) {
            $config = new \{{invokerPackage}}\Configuration(
                {{#clientState}}
                {{.}}: ${{.}},
                {{/clientState}}
                {{#apiKeyMethods}}
                {{keyParamName}}: ${{keyParamName}},
                {{/apiKeyMethods}}
            );
            if ($host !== null) $config->setHost($host);
            if ($verifySsl !== null) $config->setVerifySsl($verifySsl);
{{#hasOAuthMethods}}
            if ($tokenUrl !== null) $config->setTokenUrl($tokenUrl);
            if ($clientId !== null) $config->setClientId($clientId);
            if ($clientSecret !== null) $config->setClientSecret($clientSecret);
{{/hasOAuthMethods}}
        }
        {{#apis}}
        $this->{{classNameCamelCase}} = new \{{apiPackage}}\{{classname}}($config);
        {{/apis}}
{{/apiInfo}}
    }
}
