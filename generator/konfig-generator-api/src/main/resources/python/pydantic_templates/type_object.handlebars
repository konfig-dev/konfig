{{#if hasVars}}
class {{classname}}(BaseModel):
    {{#each allVars}}
    {{#if required}}
    {{#if deprecated}}
    # WARNING: This property is deprecated
    {{/if}}
    {{#if description}}
    # {{{description}}}
    {{/if}}
  {{> pydantic_templates/type_property_name}}: {{> pydantic_templates/type_property_data_type}} = Field(alias='{{baseName}}')
    {{#unless optionalVars}}
    {{#unless @last}}

    {{/unless}}
    {{else}}

    {{/unless}}
    {{/if}}
    {{/each}}
    {{#each allVars}}
    {{#unless required}}
    {{#if deprecated}}
    # WARNING: This property is deprecated
    {{/if}}
    {{#if description}}
    # {{{description}}}
    {{/if}}
  {{> pydantic_templates/type_property_name}}: typing.Optional[{{> pydantic_templates/type_property_data_type}}] = Field(None, alias='{{baseName}}')
    {{#unless @last}}

    {{/unless}}
    {{/unless}}
    {{/each}}
    {{#unless requiredVars}}
    {{#unless optionalVars}}
    pass
    {{/unless}}
    {{/unless}}

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
{{/if}}
