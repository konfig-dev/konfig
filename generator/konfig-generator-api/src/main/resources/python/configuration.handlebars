# coding: utf-8

{{>partial_header}}

import copy
import logging
{{#unless asyncio}}
import multiprocessing
{{/unless}}
import sys
import urllib3
{{#if hasOAuthMethods}}
import json
import typing
import urllib.request
import urllib.parse
{{/if}}


import re
from urllib.parse import urlparse
from http import client as http_client
from {{packageName}}.exceptions_base import ApiValueError
from {{packageName}}.exceptions import ClientConfigurationError
from {{packageName}}.exceptions import InvalidHostConfigurationError


JSON_SCHEMA_VALIDATION_KEYWORDS = {
    'multipleOf', 'maximum', 'exclusiveMaximum',
    'minimum', 'exclusiveMinimum', 'maxLength',
    'minLength', 'pattern', 'maxItems', 'minItems',
    'uniqueItems', 'maxProperties', 'minProperties',
}

class Configuration(object):
    """NOTE:
{{> partial_class_header}}

    :param host: Base url
    :param api_key: Dict to store API key(s).
      Each entry in the dict specifies an API key.
      The dict key is the name of the security scheme in the OAS specification.
      The dict value is the API key secret.
    :param api_key_prefix: Dict to store API prefix (e.g. Bearer)
      The dict key is the name of the security scheme in the OAS specification.
      The dict value is an API key prefix when generating the auth data.
    :param username: Username for HTTP basic authentication
    :param password: Password for HTTP basic authentication
    :param discard_unknown_keys: Boolean value indicating whether to discard
      unknown properties. A server may send a response that includes additional
      properties that are not known by the client in the following scenarios:
      1. The OpenAPI document is incomplete, i.e. it does not match the server
         implementation.
      2. The client was generated using an older version of the OpenAPI document
         and the server has been upgraded since then.
      If a schema in the OpenAPI document defines the additionalProperties attribute,
      then all undeclared properties received by the server are injected into the
      additional properties map. In that case, there are undeclared properties, and
      nothing to discard.
    :param disabled_client_side_validations (string): Comma-separated list of
      JSON schema validation keywords to disable JSON schema structural validation
      rules. The following keywords may be specified: multipleOf, maximum,
      exclusiveMaximum, minimum, exclusiveMinimum, maxLength, minLength, pattern,
      maxItems, minItems.
      By default, the validation is performed for data generated locally by the client
      and data received from the server, independent of any validation performed by
      the server side. If the input data does not satisfy the JSON schema validation
      rules specified in the OpenAPI document, an exception is raised.
      If disabled_client_side_validations is set, structural validation is
      disabled. This can be useful to troubleshoot data validation problem, such as
      when the OpenAPI document validation rules do not match the actual API data
      received by the server.
{{#if hasHttpSignatureMethods}}
    :param signing_info: Configuration parameters for the HTTP signature security scheme.
        Must be an instance of {{{packageName}}}.signing.HttpSigningConfiguration
{{/if}}
    :param server_index: Index to servers configuration.
    :param server_variables: Mapping with string values to replace variables in
      templated server configuration. The validation of enums is performed for
      variables with defined enum values before.
    :param server_operation_index: Mapping from operation ID to an index to server
      configuration.
    :param server_operation_variables: Mapping from operation ID to a mapping with
      string values to replace variables in templated server configuration.
      The validation of enums is performed for variables with defined enum values before.

{{#if hasAuthMethods}}
    :Example:
{{#if hasApiKeyMethods}}

    API Key Authentication Example.
    Given the following security scheme in the OpenAPI specification:
      components:
        securitySchemes:
          cookieAuth:         # name for the security scheme
            type: apiKey
            in: cookie
            name: JSESSIONID  # cookie name

    You can programmatically set the cookie:

conf = {{{packageName}}}.Configuration(
    api_key={'cookieAuth': 'abc123'}
    api_key_prefix={'cookieAuth': 'JSESSIONID'}
)

    The following cookie will be added to the HTTP request:
       Cookie: JSESSIONID abc123
{{/if}}
{{#if hasHttpBasicMethods}}

    HTTP Basic Authentication Example.
    Given the following security scheme in the OpenAPI specification:
      components:
        securitySchemes:
          http_basic_auth:
            type: http
            scheme: basic

    Configure API client with HTTP basic authentication:

conf = {{{packageName}}}.Configuration(
    username='the-user',
    password='the-password',
)

{{/if}}
{{#if hasHttpSignatureMethods}}

    HTTP Signature Authentication Example.
    Given the following security scheme in the OpenAPI specification:
      components:
        securitySchemes:
          http_basic_auth:
            type: http
            scheme: signature

    Configure API client with HTTP signature authentication. Use the 'hs2019' signature scheme,
    sign the HTTP requests with the RSA-SSA-PSS signature algorithm, and set the expiration time
    of the signature to 5 minutes after the signature has been created.
    Note you can use the constants defined in the {{{packageName}}}.signing module, and you can
    also specify arbitrary HTTP headers to be included in the HTTP signature, except for the
    'Authorization' header, which is used to carry the signature.

    One may be tempted to sign all headers by default, but in practice it rarely works.
    This is beccause explicit proxies, transparent proxies, TLS termination endpoints or
    load balancers may add/modify/remove headers. Include the HTTP headers that you know
    are not going to be modified in transit.

conf = {{{packageName}}}.Configuration(
    signing_info = {{{packageName}}}.signing.HttpSigningConfiguration(
        key_id =                 'my-key-id',
        private_key_path =       'rsa.pem',
        signing_scheme =         {{{packageName}}}.signing.SCHEME_HS2019,
        signing_algorithm =      {{{packageName}}}.signing.ALGORITHM_RSASSA_PSS,
        signed_headers =         [{{{packageName}}}.signing.HEADER_REQUEST_TARGET,
                                    {{{packageName}}}.signing.HEADER_CREATED,
                                    {{{packageName}}}.signing.HEADER_EXPIRES,
                                    {{{packageName}}}.signing.HEADER_HOST,
                                    {{{packageName}}}.signing.HEADER_DATE,
                                    {{{packageName}}}.signing.HEADER_DIGEST,
                                    'Content-Type',
                                    'User-Agent'
                                    ],
        signature_max_validity = datetime.timedelta(minutes=5)
    )
)
{{/if}}
{{/if}}
    """

    _default = None

    def __init__(self, host=None,
                 {{#unless removeDefaultConfigurationParameters}}api_key=None, {{/unless}}api_key_prefix=None,
{{#each authMethods}}
    {{#if isBasicBearer}}
                 access_token=None,
    {{/if}}
{{/each}}
{{#if hasOAuthMethods}}
                 client_id=None, client_secret=None, token_url: typing.Optional[str] = None,
{{/if}}
{{#unless removeDefaultConfigurationParameters}}
                 username=None, password=None,
{{/unless}}
                 discard_unknown_keys=False,
{{#apiKeyMethods}}
                 {{> securityKeyName}}=None,
{{/apiKeyMethods}}
{{#each clientState}}
                 {{{.}}}=None,
{{/each}}
{{#each clientStateWithExamples}}
                 {{{name}}}=None,
{{/each}}
{{#each apiKeyAlias}}
                 {{{this}}}=None,
{{/each}}
                 disabled_client_side_validations="",
{{#if hasHttpSignatureMethods}}
                 signing_info=None,
{{/if}}
                 server_index=None, server_variables=None,
                 server_operation_index=None, server_operation_variables=None,
                 ):
        """Constructor
        """
        self.host = "{{{basePath}}}" if host is None else host
        """Default Base url
        """
        self.server_index = 0 if server_index is None and host is None else server_index
        self.server_operation_index = server_operation_index or {}
        """Default server index
        """
{{#each clientState}}
{{^clientStateIsOptional}}
        if {{{.}}} is None:
            raise Exception("{{{.}}} is required")
{{/clientStateIsOptional}}
        self.{{{.}}} = {{{.}}}
{{#if @last}}
        """Client State
        """
{{/if}}
{{/each}}
{{#each clientStateWithExamples}}
{{^clientStateIsOptional}}
        if {{{name}}} is None:
            raise Exception("{{{name}}} is required")
{{/clientStateIsOptional}}
        self.{{{name}}} = {{{name}}}
{{#if @last}}
        """Client State
        """
{{/if}}
{{/each}}
{{#if hasOAuthMethods}}
        if client_id is not None and client_secret is not None:
            self.oauth = OAuth(client_id=client_id, client_secret=client_secret)
        if token_url is not None and self.oauth is not None:
            self.oauth.token_url = token_url
        """OAuth2 Client Credentials
        """
{{/if}}
        self.server_variables = server_variables or {}
        self.server_operation_variables = server_operation_variables or {}
        """Default server variables
        """
        self.temp_folder_path = None
        """Temp file folder for downloading files
        """
        # Authentication Settings
        self.api_key = {}
{{#unless removeDefaultConfigurationParameters}}
        if api_key:
            {{#if hasApiKeyMethods}}
            if (isinstance(api_key, str)):
                self.api_key = {'{{apiKeyMethods.0.name}}': api_key}
            else:
                self.api_key = api_key
            {{else}}
            self.api_key = api_key
            {{/if}}
{{/unless}}
{{#with apiKeyMethods.[0]}}
{{#unless @root.hasMultipleApiKeys}}{{#if vendorExtensions.x-konfig-globally-required-security}}{{#unless removeDefaultConfigurationParameters}}
        else:
            raise ClientConfigurationError('API Key "{{{name}}}" is required')
{{/unless}}{{/if}}{{/unless}}
{{/with}}
{{#each apiKeyMethods}}
        if {{> securityKeyName}}:
            self.api_key['{{{name}}}'] = {{> securityKeyName}}
{{#unless @root.clientState}}{{#if vendorExtensions.x-konfig-globally-required-security}}
        {{#or @root.hasMultipleApiKeys removeDefaultConfigurationParameters}}else{{else}}elif api_key is None{{/or}}:
            raise ClientConfigurationError('API Key "{{{name}}}" is required')
{{/if}}{{else}}
{{#unless @root.hasMultipleApiKeys}}{{#unless removeDefaultConfigurationParameters}}
        elif api_key is None:
            raise ClientConfigurationError('API Key "{{{name}}}" is required')
{{/unless}}{{/unless}}
{{/unless}}
{{/each}}
{{#each apiKeyAlias}}
        if {{{this}}} is None:
            raise Exception("{{{this}}} is required")
        self.api_key['{{{@key}}}'] = {{{this}}}
{{/each}}
        """dict to store API key(s)
        """
        self.api_key_prefix = {}
        if api_key_prefix:
            self.api_key_prefix = api_key_prefix
        else:
            {{#each apiKeyMethods}}
            {{#if vendorExtensions.x-konfig-prefix}}
            self.api_key_prefix['{{{name}}}'] = "{{{vendorExtensions.x-konfig-prefix}}}"
            {{/if}}
            {{/each}}
            pass
        """dict to store API prefix (e.g. Bearer)
        """
        self.refresh_api_key_hook = None
        """function hook to refresh API key if expired
        """
{{#each authMethods}}
    {{#if isBasicBearer}}
        self.access_token = access_token
        """Token for HTTP Basic Bearer Authentication
        """
    {{/if}}
{{/each}}
{{#unless removeDefaultConfigurationParameters}}
        self.username = username
        """Username for HTTP basic authentication
        """
        self.password = password
        """Password for HTTP basic authentication
        """
{{/unless}}
        self.discard_unknown_keys = discard_unknown_keys
        self.disabled_client_side_validations = disabled_client_side_validations
{{#if hasHttpSignatureMethods}}
        if signing_info is not None:
            signing_info.host = host
        self.signing_info = signing_info
        """The HTTP signing configuration
        """
{{/if}}
{{#if hasOAuthMethods}}
        self.access_token = None
        """access token for OAuth/Bearer
        """
{{/if}}
{{#unless hasOAuthMethods}}
{{#if hasBearerMethods}}
        self.access_token = None
        """access token for OAuth/Bearer
        """
{{/if}}
{{/unless}}
        """Logging Settings
        """
        self.logger = logging.getLogger("{{packageName}}")
        # if no handler for logger, add a stream handler
        if not self.logger.handlers:
            self.logger.addHandler(logging.StreamHandler())
        self.logger_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        """Log format
        """
        self.debug = False
        """Debug switch
        """

        self.verify_ssl = True
        """SSL/TLS verification
           Set this to false to skip verifying SSL certificate when calling API
           from https server.
        """
        self.ssl_ca_cert = None
        """Set this to customize the certificate file to verify the peer.
        """
        self.cert_file = None
        """client certificate file
        """
        self.key_file = None
        """client key file
        """
        self.assert_hostname = None
        """Set this to True/False to enable/disable SSL hostname verification.
        """

        {{#if asyncio}}
        self.connection_pool_maxsize = 100
        """This value is passed to the aiohttp to limit simultaneous connections.
           Default values is 100, None means no-limit.
        """
        {{/if}}
        {{#unless asyncio}}
        self.connection_pool_maxsize = multiprocessing.cpu_count() * 5
        """urllib3 connection pool's maximum number of connections saved
           per pool. urllib3 uses 1 connection as default value, but this is
           not the best value when you are making a lot of possibly parallel
           requests to the same host, which is often the case here.
           cpu_count * 5 is used as default value to increase performance.
        """
        {{/unless}}

        self.proxy = None
        """Proxy URL
        """
        self.proxy_headers = None
        """Proxy headers
        """
        self.safe_chars_for_path_param = ''
        """Safe chars for path_param
        """
        self.retries = None
        """Adding retries to override urllib3 default value 3
        """
        # Enable client side validation
        self.client_side_validation = True

        # Options to pass down to the underlying urllib3 socket
        self.socket_options = None

    def __deepcopy__(self, memo):
        cls = self.__class__
        result = cls.__new__(cls)
        memo[id(self)] = result
        for k, v in self.__dict__.items():
            if k not in ('logger'):
                setattr(result, k, copy.deepcopy(v, memo))
        # shallow copy of loggers
        result.logger = copy.copy(self.logger)
        result.debug = self.debug
        return result

    def __setattr__(self, name, value):
        object.__setattr__(self, name, value)
        if name == 'disabled_client_side_validations':
            s = set(filter(None, value.split(',')))
            for v in s:
                if v not in JSON_SCHEMA_VALIDATION_KEYWORDS:
                    raise ApiValueError(
                        "Invalid keyword: '{0}''".format(v))
            self._disabled_client_side_validations = s
{{#if hasHttpSignatureMethods}}
        if name == "signing_info" and value is not None:
            # Ensure the host paramater from signing info is the same as
            # Configuration.host.
            value.host = self.host
{{/if}}

    @classmethod
    def set_default(cls, default):
        """Set default instance of configuration.

        It stores default configuration, which can be
        returned by get_default_copy method.

        :param default: object of Configuration
        """
        cls._default = copy.deepcopy(default)

    @classmethod
    def get_default_copy(cls):
        """Return new instance of configuration.

        This method returns newly created, based on default constructor,
        object of Configuration class or returns a copy of default
        configuration passed by the set_default method.

        :return: The configuration object.
        """
        if cls._default is not None:
            return copy.deepcopy(cls._default)
        return Configuration()

    @property
    def logger_file(self):
        """The logger file.

        If the logger_file is None, then add stream handler and remove file
        handler. Otherwise, add file handler and remove stream handler.

        :param value: The logger_file path.
        :type: str
        """
        return self.__logger_file

    @logger_file.setter
    def logger_file(self, value):
        """The logger file.

        If the logger_file is None, then add stream handler and remove file
        handler. Otherwise, add file handler and remove stream handler.

        :param value: The logger_file path.
        :type: str
        """
        self.__logger_file = value
        if self.__logger_file:
            # If set logging file, then add file handler to self.logger if one
            # does not already exist. Otherwise, do nothing.
            if not any(isinstance(handler, logging.FileHandler)
                          for handler in self.logger.handlers):
                 self.logger.addHandler(logging.FileHandler(self.__logger_file))

    @property
    def debug(self):
        """Debug status

        :param value: The debug status, True or False.
        :type: bool
        """
        return self.__debug

    @debug.setter
    def debug(self, value):
        """Debug status

        :param value: The debug status, True or False.
        :type: bool
        """
        self.__debug = value
        if self.__debug:
            # if debug status is True, turn on debug logging
            self.logger.setLevel(logging.DEBUG)
            # turn on http_client debug
            http_client.HTTPConnection.debuglevel = 1
        else:
            # if debug status is False, turn off debug logging,
            # setting log level to default `logging.WARNING`
            self.logger.setLevel(logging.WARNING)
            # turn off http_client debug
            http_client.HTTPConnection.debuglevel = 0

    @property
    def logger_format(self):
        """The logger format.

        The logger_formatter will be updated when sets logger_format.

        :param value: The format string.
        :type: str
        """
        return self.__logger_format

    @logger_format.setter
    def logger_format(self, value):
        """The logger format.

        The logger_formatter will be updated when sets logger_format.

        :param value: The format string.
        :type: str
        """
        self.__logger_format = value
        # set Formatter for all handlers in self.logger
        for handler in self.logger.handlers:
            handler.setFormatter(logging.Formatter(self.__logger_format))

    def get_api_key_with_prefix(self, identifier, alias=None):
        """Gets API key (with prefix if set).

        :param identifier: The identifier of apiKey.
        :param alias: The alternative identifier of apiKey.
        :return: The token for api key authentication.
        """
        if self.refresh_api_key_hook is not None:
            self.refresh_api_key_hook(self)
        key = self.api_key.get(identifier, self.api_key.get(alias) if alias is not None else None)
        if key:
            prefix = self.api_key_prefix.get(identifier)
            if prefix:
                return "%s%s" % (prefix, key)
            else:
                return key
{{#unless removeDefaultConfigurationParameters}}

    def get_basic_auth_token(self):
        """Gets HTTP basic authentication header (string).

        :return: The token for basic HTTP authentication.
        """
        username = ""
        if self.username is not None:
            username = self.username
        password = ""
        if self.password is not None:
            password = self.password
        return urllib3.util.make_headers(
            basic_auth=username + ':' + password
        ).get('authorization')
{{/unless}}

    def auth_settings(self):
        """Gets Auth Settings dict for api client.

        :return: The Auth Settings information dict.
        """
        auth = {}
{{#each authMethods}}
{{#if isApiKey}}
        if '{{name}}' in self.api_key{{#each vendorExtensions.x-auth-id-alias}} or '{{.}}' in self.api_key{{/each}}:
            auth['{{name}}'] = {
                'type': 'api_key',
                'in': {{#if isKeyInCookie}}'cookie'{{/if}}{{#if isKeyInHeader}}'header'{{/if}}{{#if isKeyInQuery}}'query'{{/if}},
                'key': '{{keyParamName}}',
                'value': self.get_api_key_with_prefix(
                    '{{name}}',{{#each vendorExtensions.x-auth-id-alias}}
                    alias='{{.}}',{{/each}}
                ),
            }
{{/if}}
{{#if isBasic}}
  {{#if isBasicBasic}}
        if self.username is not None and self.password is not None:
            auth['{{name}}'] = {
                'type': 'basic',
                'in': 'header',
                'key': 'Authorization',
                'value': self.get_basic_auth_token()
            }
  {{/if}}
  {{#if isBasicBearer}}
        if self.access_token is not None:
            auth['{{name}}'] = {
                'type': 'bearer',
                'in': 'header',
                {{#if bearerFormat}}
                'format': '{{{bearerFormat}}}',
                {{/if}}
                'key': 'Authorization',
                'value': 'Bearer ' + self.access_token
            }
  {{/if}}
  {{#if isHttpSignature}}
        if self.signing_info is not None:
            auth['{{name}}'] = {
                'type': 'http-signature',
                'in': 'header',
                'key': 'Authorization',
                'value': None  # Signature headers are calculated for every HTTP request
            }
  {{/if}}
{{/if}}
{{#if isOAuth}}
{{#if isApplication}}
        if self.oauth is not None:
            # Initialize
            if self.oauth.access_token is None:
                self.oauth.refresh_access_token()
            auth['{{name}}'] = {
                'type': 'oauth2-clientcredentials',
                'in': 'header',
                'key': 'Authorization',
                'value': 'Bearer ' + self.oauth.access_token
            }
{{/if}}
{{#unless isApplication}}
        if self.access_token is not None:
            auth['{{name}}'] = {
                'type': 'oauth2',
                'in': 'header',
                'key': 'Authorization',
                'value': 'Bearer ' + self.access_token
            }
{{/unless}}
{{/if}}
{{/each}}
        return auth

    def to_debug_report(self):
        """Gets the essential information for debugging.

        :return: The report for debugging.
        """
        return "Python SDK Debug Report:\n"\
               "OS: {env}\n"\
               "Python Version: {pyversion}\n"\
               "Version of the API: {{version}}\n"\
               "SDK Package Version: {{packageVersion}}".\
               format(env=sys.platform, pyversion=sys.version)

    def get_host_settings(self):
        """Gets an array of host settings

        :return: An array of host settings
        """
        return [
            {{#each servers}}
            {
                'url': "{{{url}}}",
                'description': "{{#unless description}}No description provided{{else}}{{{description}}}{{/unless}}",
                {{#each variables}}
                {{#if @first}}
                'variables': {
                {{/if}}
                    '{{{name}}}': {
                        'description': "{{#unless description}}No description provided{{else}}{{{description}}}{{/unless}}",
                        'default_value': "{{{defaultValue}}}",
                        {{#each enumValues}}
                        {{#if @first}}
                        'enum_values': [
                        {{/if}}
                            "{{{.}}}"{{#unless @last}},{{/unless}}
                        {{#if @last}}
                        ]
                        {{/if}}
                        {{/each}}
                        }{{#unless @last}},{{/unless}}
                {{#if @last}}
                    }
                {{/if}}
                {{/each}}
            }{{#unless @last}},{{/unless}}
            {{/each}}
        ]

    def get_host_from_settings(self, index, variables=None, servers=None):
        """Gets host URL based on the index and variables
        :param index: array index of the host settings
        :param variables: hash of variable and the corresponding value
        :param servers: an array of host settings or None
        :return: URL based on host settings
        """
        if index is None:
            return self._base_path

        variables = {} if variables is None else variables
        servers = self.get_host_settings() if servers is None else servers

        try:
            server = servers[index]
        except IndexError:
            raise ValueError(
                "Invalid index {0} when selecting the host settings. "
                "Must be less than {1}".format(index, len(servers)))

        url = server['url']

        # go through variables and replace placeholders
        for variable_name, variable in server.get('variables', {}).items():
            used_value = variables.get(
                variable_name, variable['default_value'])

            if 'enum_values' in variable \
                    and used_value not in variable['enum_values']:
                raise ValueError(
                    "The variable `{0}` in the host URL has invalid value "
                    "{1}. Must be {2}.".format(
                        variable_name, variables[variable_name],
                        variable['enum_values']))

            url = url.replace("{" + variable_name + "}", used_value)

        return url

    @property
    def host(self):
        """Return generated host."""
        return self.get_host_from_settings(self.server_index, variables=self.server_variables)

    @host.setter
    def host(self, value):
        """Fix base path."""
        self._base_path = check_url(value)
        self.server_index = None

DOMAIN_REGEX = re.compile(
    r'^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9](?::[0-9]{1,5})?$|^(?:[0-9]{1,3}\.){3}[0-9]{1,3}(?::[0-9]{1,5})?$'
)
def check_url(url: str) -> str:
    parsed = urlparse(url)
    if parsed.query != '':
        raise InvalidHostConfigurationError(url, "query string is not allowed")
    if parsed.fragment != '':
        raise InvalidHostConfigurationError(url, "fragment is not allowed")
    if parsed.scheme not in ["http", "https"]:
        raise InvalidHostConfigurationError(url, 'scheme must be "http" or "https"'.format(parsed.scheme))
    if (parsed.netloc == ''):
        raise InvalidHostConfigurationError(url, "host is not set")
    if not DOMAIN_REGEX.match(parsed.netloc):
        raise InvalidHostConfigurationError(url, "Invalid domain")
    if (url.endswith("/")):
        return url[:-1]
    return url

{{#if hasOAuthMethods}}
{{#with authMethods.0}}
class OAuth:
    def __init__(self, client_id: typing.AnyStr, client_secret: typing.AnyStr, token_url: str = "{{{tokenUrl}}}") -> None:
        self._client_id = client_id
        self._client_secret = client_secret
        self.token_url = token_url
        self.access_token = None

    def refresh_access_token(self) -> None:
        self.access_token = self.retrieve_access_token()

    def retrieve_access_token(self) -> typing.AnyStr:
        request = urllib.request.Request(self.token_url)
        request.add_header("Content-Type", "application/x-www-form-urlencoded")
        params = {
                "grant_type": "client_credentials",
                "client_id": self._client_id,
                "client_secret": self._client_secret
        }
        data = urllib.parse.urlencode(params).encode("utf-8")
        f = urllib.request.urlopen(request, data)
        return json.loads(f.read().decode("utf-8"))["access_token"]
{{/with}}
{{/if}}

