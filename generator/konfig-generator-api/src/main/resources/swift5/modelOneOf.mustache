public enum {{classname}}: {{#useVapor}}Content{{/useVapor}}{{^useVapor}}Codable, JSONEncodable{{#vendorExtensions.x-swift-hashable}}, Hashable{{/vendorExtensions.x-swift-hashable}}{{/useVapor}} {
    {{#oneOfNames}}
    case type{{name}}({{datatype}})
    {{/oneOfNames}}

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        {{#oneOfNames}}
        case .type{{name}}(let value):
            try container.encode(value)
        {{/oneOfNames}}
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        {{#oneOfNames}}
        {{#-first}}
        if let value = try? container.decode({{datatype}}.self) {
        {{/-first}}
        {{^-first}}
        } else if let value = try? container.decode({{datatype}}.self) {
        {{/-first}}
            self = .type{{name}}(value)
        {{/oneOfNames}}
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of {{classname}}"))
        }
    }
}
