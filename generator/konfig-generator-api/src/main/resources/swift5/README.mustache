{{#readmeHeader}}
<div align={{#leftAlignDescription}}"left"{{/leftAlignDescription}}{{^leftAlignDescription}}"center"{{/leftAlignDescription}}>

[![Visit {{{title}}}](./header.png)]({{{url}}})

# [{{{title}}}]({{{url}}})
{{^omitInfoDescription}}

{{{unescapedAppDescription}}}
{{/omitInfoDescription}}

{{> readme_badges}}

</div>
{{/readmeHeader}}
{{^readmeHeader}}
# Swift API Client for {{{projectName}}}

{{#appDescriptionWithNewLines}}
{{{.}}}
{{/appDescriptionWithNewLines}}
{{/readmeHeader}}

## Table of Contents

<!-- toc -->

## Installation

{{#useVapor}}
Add the following entry in your Package.swift:

> .package(path: "./{{{projectName}}}")

{{/useVapor}}
{{^useVapor}}
### CocoaPods

1. Add `source 'https://github.com/CocoaPods/Specs.git'` to your `Podfile`
2. Add `pod '{{{projectName}}}', '~> {{{podVersion}}}'` to your `Podfile`

Your `Podfile` should look like:
```ruby
# Podfile
source 'https://github.com/CocoaPods/Specs.git'

target 'Example' do
  pod '{{{projectName}}}', '~> {{{podVersion}}}'
end
```
3. Run `pod install`

```shell
‚ùØ pod install
Analyzing dependencies
Downloading dependencies
Installing {{{projectName}}} {{{podVersion}}}
Generating Pods project
Integrating client project
Pod installation complete! There is 1 dependency from the Podfile and 2 total pods installed.
```

{{/useVapor}}
## Getting Started

```swift
{{#readmeSnippet}}
{{{.}}}
{{/readmeSnippet}}
{{^readmeSnippet}}
import {{projectName}}
{{#authMethods}}
{{#isApiKey}}{{#isKeyInHeader}}
let apiKey = ProcessInfo.processInfo.environment["API_KEY"]!
{{{projectName}}}API.customHeaders = [
    "{{{keyParamName}}}": apiKey,
]
{{/isKeyInHeader}}{{/isApiKey}}
{{/authMethods}}
{{#apiInfo}}{{#apis}}{{#-first}}{{#operations}}{{#operation}}{{#-first}}
{{#allParams}}let {{paramName}} = {{{vendorExtensions.x-swift-example}}} // {{{dataType}}} | {{{description}}}{{^required}} (optional){{/required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}
{{/allParams}}

{{^usePromiseKit}}
{{^useRxSwift}}
{{^useVapor}}
{{#summary}}
// {{{.}}}
{{/summary}}
{{classname}}.{{{operationId}}}({{#allParams}}{{paramName}}: {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) { (response, error) in
    guard error == nil else {
        print(error!)
        return
    }

    if response != nil {
        dump(response)
    }
}
{{/useVapor}}
{{/useRxSwift}}
{{/usePromiseKit}}
{{#usePromiseKit}}
{{#summary}}
// {{{.}}}
{{/summary}}
{{classname}}.{{{operationId}}}({{#allParams}}{{paramName}}: {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}).then {
         // when the promise is fulfilled
     }.always {
         // regardless of whether the promise is fulfilled, or rejected
     }.catch { errorType in
         // when the promise is rejected
}
{{/usePromiseKit}}
{{#useRxSwift}}
// TODO RxSwift sample code not yet implemented. To contribute, please open a ticket via http://github.com/OpenAPITools/openapi-generator/issues/new
{{/useRxSwift}}
{{#useVapor}}
{{#summary}}
// {{{.}}}
{{/summary}}
{{classname}}.{{{operationId}}}({{#allParams}}{{paramName}}: {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}).whenComplete { result in
    switch result {
    case .failure(let error):
    // process error
    case .success(let response):
        switch response {
        // process decoded response value or raw ClientResponse
        {{#responses}}
        case .http{{code}}(let value, let raw):
        {{/responses}}
        {{^hasDefaultResponse}}
        case .http0(let value, let raw):
        {{/hasDefaultResponse}}
        }
    }
}
{{/useVapor}}
{{/-first}}{{/operation}}{{/operations}}{{/-first}}{{/apis}}{{/apiInfo}}
{{/readmeSnippet}}
```

{{^removeKonfigBranding}}
## Author
This TypeScript package is automatically generated by [Konfig](https://konfigthis.com)
{{/removeKonfigBranding}}
