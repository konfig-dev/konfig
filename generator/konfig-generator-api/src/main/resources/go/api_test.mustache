/*
{{#appName}}
{{{.}}}
{{/appName}}

Testing {{classname}}Service

*/

{{^removeKonfigBranding}}
// Code generated by Konfig (https://konfigthis.com);
{{/removeKonfigBranding}}

package {{packageName}}

import (
    "os"
    "testing"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    {{goImportAlias}} "{{gitHost}}/{{gitUserId}}/{{gitRepoId}}{{#isGoSubmodule}}/{{packageName}}{{/isGoSubmodule}}"
)

func Test_{{packageName}}_{{classname}}Service(t *testing.T) {

    configuration := {{goImportAlias}}.NewConfiguration()
    configuration.SetHost("http://127.0.0.1:4010")
    {{#authMethods}}
    {{#isApiKey}}
    configuration.Set{{nameInCamelCase}}("{{keyParamNameSnakeCaseUppercase}}")
    {{/isApiKey}}
    {{/authMethods}}
    client := {{goImportAlias}}.NewAPIClient(configuration)

{{#operations}}
{{#operation}}
    t.Run("Test {{classname}}Service {{{nickname}}}", func(t *testing.T) {

        request := client.{{classname}}.{{operationId}}()
        {{> api_doc_example_params}}

        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

{{/operation}}
{{/operations}}
}

func emptyFile(t *testing.T) *os.File {
	tempFile, err := os.CreateTemp("", "empty-file")
	if err != nil {
		t.Fatal(err) // Fail the test if we can't create the temporary file
	}
	t.Cleanup(func() {
		os.Remove(tempFile.Name()) // Clean up the file after the test
	})
	return tempFile
}