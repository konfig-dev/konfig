import React from "react";
import { HttpMethodsEnum } from "konfig-lib/dist/forEachOperation";
// @ts-ignore
import GettingStarted from "./_getting-started.mdx";
// @ts-ignore
import FirstRequest from "./_first-request.mdx"
import { SdkNew } from "@site/src/components/SdkNew";

export default function WallesterTypeScriptSdk() {
  return (
    <SdkNew
      sdkName="wallester-typescript-sdk"
      metaDescription={`Wallester is a Licensed white label VISA Card issuer and the payment institution specializing in offering transaction processing services on an "all-in-one" model. Various types of businesses can benefit from a wide range of diversified solutions and individual approaches that are offered. Be it debit, credit, virtual or loyalty cards, our modern API platform simplifies traditional card processing methods, allowing businesses to launch and integrate their latest card products in no time!`}
      company="Wallester"
      // Missing serviceName
      logo="https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/wallester/logo.png"
      companyKebabCase="wallester"
      clientNameCamelCase="wallester"
      homepage="wallester.com"
      lastUpdated={new Date("2024-04-16T19:21:46.323Z")}
      faviconUrl="https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/wallester/favicon.png"
      contactUrl="/v1/doc/#"
      contactEmail="operations@wallester.com"
      previewLinkImage="https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/wallester/imagePreview.jpg"
      GettingStarted={GettingStarted}
      FirstRequest={FirstRequest}
      categories={["card_issuing"]}
      methods={[
  {
    "url": "/host:port/v1/3d-secure-otp-event",
    "method": "threeDSecureOtpEventNotification",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "3D Secure OTP",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/account-adjustment-notification",
    "method": "notifyAccountAdjustment",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Account adjustment notification",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/account-to-account-transfer-notification",
    "method": "notifyAccountTransfer",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Account to Account transfer notification",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/activate-card-event",
    "method": "notifyCardActivation",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Activate card",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/apple-pay-incentive-notification-incomplete-provisioning-event",
    "method": "sendIncompleteProvisioningNotification",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Apple Pay incentive notification incomplete provisioning",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/apple-pay-incentive-notification-successful-transaction-event",
    "method": "sendApplePayIncentiveNotification",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Apple Pay incentive notification successful transaction",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/apple-pay-orange-flow-event",
    "method": "notifyAuthenticationOptions",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Apple pay orange flow",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/authorization-event",
    "method": "authorizeEvent",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Authorization",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/block-card-event",
    "method": "notifyCardBlocked",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Block card",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/cancel-fee-event",
    "method": "cancelFeeEvent",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Cancel fee",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/closed-card-event",
    "method": "notifyCardClosure",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Card closed",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/closing-card-event",
    "method": "notifyCardClosingStatus",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Card closing",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/complete-fee-event",
    "method": "completeFeeEventNotification",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Complete fee",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/create-card-event",
    "method": "triggerCardEventNotification",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Create card",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/create-fee-event",
    "method": "notifyNewFee",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Create fee",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/decision-request-authorization-event",
    "method": "authorizeDecisionRequest",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Decision request: Authorization",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/decision-request-balance-inquiry-authorization-event",
    "method": "balanceInquiryAuthorization",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Decision request: Balance inquiry authorization",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/dispatch-card-event",
    "method": "dispatchCardEvent",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Dispatch card",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/expire-card-event",
    "method": "expireCardEventNotification",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Expire card",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/initiate-action-event",
    "method": "initiateActionEvent",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Initiate action",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/kyc-check-event",
    "method": "kycCheckEventCreate",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "KYC Check",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/kyc-status-change-event",
    "method": "kycStatusChange",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "KYC status change",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/ordered-card-event",
    "method": "notifyCardOrder",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Ordered card",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/partial-authorization-event",
    "method": "partialAuthorizationEventPost",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Decision request: Partial authorization",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/personalize-card-event",
    "method": "notifyCardPersonalization",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Personalize card",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/release-authorization-event",
    "method": "releaseAuthorizationEvent",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Release authorization",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/renew-card-event",
    "method": "renewCardEventNotification",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Renew card",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/replace-card-event",
    "method": "cardReplaceEventNotification",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Replace card",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/reversal-authorization-event",
    "method": "reversalAuthorization",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Reversal authorization",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/transaction-clearing-event",
    "method": "triggerTransactionClearing",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Transaction clearing",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/update-fee-event",
    "method": "updateFeeEvent",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Update fee",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/host:port/v1/validate-event",
    "method": "validateEvent",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Webhooks",
    "typeScriptTag": "webhooks",
    "description": "Validate",
    "parameters": [
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "xRequestId",
        "schema": "string",
        "required": true,
        "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
        "example": "X-REQUEST-ID"
      },
      {
        "name": "data",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "event",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EVENT"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/account-adjustments",
    "method": "createAccountAdjustment",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Account-Adjustments",
    "typeScriptTag": "accountAdjustments",
    "description": "Create account adjustment",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "description",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "DESCRIPTION"
      },
      {
        "name": "account_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "external_id",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "amount",
        "schema": "number",
        "required": true,
        "description": "",
        "example": 0
      },
      {
        "name": "sender_name",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "allow_negative_balance",
        "schema": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/account-adjustments-by-external-id/{external_id}",
    "method": "getByExternalId",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Account-Adjustments",
    "typeScriptTag": "accountAdjustments",
    "description": "Get account adjustment by external ID",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "externalId",
        "schema": "string",
        "required": true,
        "description": "External ID",
        "example": "EXTERNAL_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/account-adjustments/{account_adjustment_id}",
    "method": "getInformation",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Account-Adjustments",
    "typeScriptTag": "accountAdjustments",
    "description": "Get account adjustment",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountAdjustmentId",
        "schema": "string",
        "required": true,
        "description": "Account adjustment ID",
        "example": "ACCOUNT_ADJUSTMENT_ID"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/account-payments",
    "method": "transferFunds",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Create account payment",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "description",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "DESCRIPTION"
      },
      {
        "name": "amount",
        "schema": "number",
        "required": true,
        "description": "",
        "example": 0
      },
      {
        "name": "from_account_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "FROM_ACCOUNT_ID"
      },
      {
        "name": "to_account_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TO_ACCOUNT_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts",
    "method": "searchList",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Search accounts",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "name",
        "schema": "string",
        "description": "Name"
      },
      {
        "name": "externalId",
        "schema": "string",
        "description": "External ID"
      },
      {
        "name": "isMain",
        "schema": "boolean",
        "description": "Is main account"
      },
      {
        "name": "exceedingCreditLimit",
        "schema": "boolean",
        "description": "Exceeding credit limit"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "orderDirection",
        "schema": "string",
        "description": "Direction to sort by: asc or desc",
        "default": "asc"
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "Field to sort by: created_at, updated_at, balance, blocked_amount, available_amount, name, status",
        "default": "created_at"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts",
    "method": "createNewAccount",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Create account",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "person_id",
        "schema": "string",
        "description": ""
      },
      {
        "name": "company_id",
        "schema": "string",
        "description": ""
      },
      {
        "name": "external_id",
        "schema": "string",
        "description": ""
      },
      {
        "name": "name",
        "schema": "string",
        "description": ""
      },
      {
        "name": "currency_code",
        "schema": "string",
        "description": ""
      },
      {
        "name": "credit_limit",
        "schema": "number",
        "description": ""
      },
      {
        "name": "used_credit",
        "schema": "number",
        "description": ""
      },
      {
        "name": "limits",
        "schema": "object",
        "description": ""
      },
      {
        "name": "top_up_details",
        "schema": "object",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts-by-external-id/{external_id}",
    "method": "getByExternalId",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Get account by external ID",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "externalId",
        "schema": "string",
        "required": true,
        "description": "External ID",
        "example": "EXTERNAL_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts-by-ids",
    "method": "getByIds",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Get accounts by IDs",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "ids",
        "schema": "array",
        "required": true,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts-exceeding-credit-limit",
    "method": "getExceedingCreditAccounts",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Get accounts exceeding credit limit",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}",
    "method": "getInformation",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Get account",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/account-adjustments/{account_adjustment_id}/external-id",
    "method": "updateExternalId",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Update account adjustment external ID",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "accountAdjustmentId",
        "schema": "string",
        "required": true,
        "description": "Account adjustment ID",
        "example": "ACCOUNT_ADJUSTMENT_ID"
      },
      {
        "name": "external_id",
        "schema": "string",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/authorizations",
    "method": "getAccountAuthorizations",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Authorizations",
    "typeScriptTag": "authorizations",
    "description": "Get account authorizations",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "fromDate",
        "schema": "string",
        "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "toDate",
        "schema": "string",
        "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/balance",
    "method": "adjustBalanceById",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Adjust account balance",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "description",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "DESCRIPTION"
      },
      {
        "name": "external_id",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "amount",
        "schema": "number",
        "required": true,
        "description": "",
        "example": 0
      },
      {
        "name": "sender_name",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "allow_negative_balance",
        "schema": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/cards",
    "method": "getCards",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Get account cards",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "cardStatuses",
        "schema": "string",
        "description": "CardStatuses is **repeated** query parameter to specify card statuses to return."
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/close",
    "method": "closeAccount",
    "httpMethod": HttpMethodsEnum.DELETE,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Close account",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/close",
    "method": "closeAccount",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Close account",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "close_reason",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "CLOSE_REASON"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/credit-limit",
    "method": "updateCreditLimit",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Update credit limit",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "description",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "DESCRIPTION"
      },
      {
        "name": "credit_limit",
        "schema": "number",
        "required": false,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/download-statement",
    "method": "downloadStatement",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Download account statement",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "fromDate",
        "schema": "string",
        "required": true,
        "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format",
        "example": "FROM_DATE"
      },
      {
        "name": "toDate",
        "schema": "string",
        "required": true,
        "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format",
        "example": "TO_DATE"
      },
      {
        "name": "timezone",
        "schema": "string",
        "description": "Timezone"
      },
      {
        "name": "languageCode",
        "schema": "string",
        "description": "Language code"
      },
      {
        "name": "statementFileType",
        "schema": "string",
        "required": true,
        "description": "Statement file type",
        "example": "STATEMENT_FILE_TYPE"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/external-id",
    "method": "updateExternalId",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Update account external ID",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "external_id",
        "schema": "string",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/history",
    "method": "getHistory",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Get account history",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "fromDate",
        "schema": "string",
        "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "toDate",
        "schema": "string",
        "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "isNotSystem",
        "schema": "boolean",
        "description": "Return only records not made by system"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/limits",
    "method": "updateLimits",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Update account limits",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "limits",
        "schema": "object",
        "required": true,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/limits-usage",
    "method": "getLimitsUsage",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Get account limits usage",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/name",
    "method": "updateName",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Update account name",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "name",
        "schema": "string",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/reopen",
    "method": "reopenAccount",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Reopen account",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/statement",
    "method": "getStatement",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Get account statement",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "fromDate",
        "schema": "string",
        "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "toDate",
        "schema": "string",
        "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "includeAuthorizations",
        "schema": "boolean",
        "description": "IncludeAuthorizations defines whether to include authorizations to account statement or not."
      },
      {
        "name": "includeTransactions",
        "schema": "boolean",
        "description": "IncludeTransactions defines whether to include transactions to account statement or not."
      },
      {
        "name": "includeAccountAdjustments",
        "schema": "boolean",
        "description": "IncludeAccountAdjustments defines whether to include account adjustments to account statement or not."
      },
      {
        "name": "includeFees",
        "schema": "boolean",
        "description": "IncludeFees defines whether to include fees to account statement or not."
      },
      {
        "name": "excludeDeclinedAuthorizations",
        "schema": "boolean",
        "description": "ExcludeDeclinedAuthorizations defines whether to exclude declined authorizations from account statement or not."
      },
      {
        "name": "excludeReversedAuthorizations",
        "schema": "boolean",
        "description": "ExcludeReversedAuthorizations defines whether to exclude reversed authorizations and reversals from account statement or not."
      },
      {
        "name": "excludeClearedAuthorizations",
        "schema": "boolean",
        "description": "ExcludeClearedAuthorizations defines whether to exclude cleared authorizations from account statement or not."
      },
      {
        "name": "excludePendingAuthorizations",
        "schema": "boolean",
        "description": "ExcludePendingAuthorizations defines whether to exclude pending authorizations from account statement or not."
      },
      {
        "name": "excludeStatusAuthorizations",
        "schema": "boolean",
        "description": "ExcludeStatusAuthorizations defines whether to exclude status authorizations from account statement or not."
      },
      {
        "name": "excludePendingFees",
        "schema": "boolean",
        "description": "ExcludePendingFees defines whether to exclude pending fees from account statement or not."
      },
      {
        "name": "excludeClearedFees",
        "schema": "boolean",
        "description": "ExcludeClearedFees defines whether to exclude cleared fees from account statement or not."
      },
      {
        "name": "excludeDeclinedFees",
        "schema": "boolean",
        "description": "ExcludeDeclinedFees defines whether to exclude declined fees from account statement or not."
      },
      {
        "name": "excludeFxFees",
        "schema": "boolean",
        "description": "ExcludeFXFees defines whether to exclude FX fees from account statement or not."
      },
      {
        "name": "mergeFees",
        "schema": "boolean",
        "description": "MergeFees defines whether to merge fees per authorization or not."
      },
      {
        "name": "searchKeyword",
        "schema": "string",
        "description": "Search keyword"
      },
      {
        "name": "statuses",
        "schema": "string",
        "description": "Statuses **repeated**"
      },
      {
        "name": "merchantCategoryCodes",
        "schema": "string",
        "description": "Merchant category code **repeated**"
      },
      {
        "name": "merchantCategoryTypes",
        "schema": "string",
        "description": "Merchant category types **repeated**"
      },
      {
        "name": "orderDirection",
        "schema": "string",
        "description": "Direction to sort by: asc or desc",
        "default": "desc"
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "Field to sort by",
        "default": "date"
      },
      {
        "name": "adjustmentType",
        "schema": "string",
        "description": "Field to filter account adjustments by type when **include_account_adjustments** is true"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/statement-by-cursor",
    "method": "getStatementByCursor",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Get account statement by cursor",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "cursor",
        "schema": "string",
        "required": true,
        "description": "Cursor is an object that stores the state of the last requested data in base64 format so that newer or older data can be requested.\nReceived in response to \"request by date\" or \"request by cursor\" (used with the move_forward parameter in pairs)",
        "example": "CURSOR"
      },
      {
        "name": "moveForward",
        "schema": "boolean",
        "description": "MoveForward is used as an auxiliary parameter to select newer or older data from the Cursor object.\nIf the default value is \"false\", the query returns older data (used with cursor parameter in pair)",
        "default": false
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/statement-by-date",
    "method": "getStatementByDate",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Get account statement by date",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_date parameter in pair)",
        "example": 0
      },
      {
        "name": "fromDate",
        "schema": "string",
        "required": true,
        "description": "FromDate defines a beginning date of requested data set (used with records_count parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format",
        "example": "FROM_DATE"
      },
      {
        "name": "includeAuthorizations",
        "schema": "boolean",
        "description": "IncludeAuthorizations defines whether to include authorizations to account statement or not."
      },
      {
        "name": "includeTransactions",
        "schema": "boolean",
        "description": "IncludeTransactions defines whether to include transactions to account statement or not."
      },
      {
        "name": "includeAccountAdjustments",
        "schema": "boolean",
        "description": "IncludeAccountAdjustments defines whether to include account adjustments to account statement or not."
      },
      {
        "name": "includeFees",
        "schema": "boolean",
        "description": "IncludeFees defines whether to include fees to account statement or not."
      },
      {
        "name": "excludeDeclinedAuthorizations",
        "schema": "boolean",
        "description": "ExcludeDeclinedAuthorizations defines whether to exclude declined authorizations from account statement or not."
      },
      {
        "name": "excludeReversedAuthorizations",
        "schema": "boolean",
        "description": "ExcludeReversedAuthorizations defines whether to exclude reversed authorizations and reversals from account statement or not."
      },
      {
        "name": "excludeClearedAuthorizations",
        "schema": "boolean",
        "description": "ExcludeClearedAuthorizations defines whether to exclude cleared authorizations from account statement or not."
      },
      {
        "name": "excludePendingAuthorizations",
        "schema": "boolean",
        "description": "ExcludePendingAuthorizations defines whether to exclude pending authorizations from account statement or not."
      },
      {
        "name": "excludeStatusAuthorizations",
        "schema": "boolean",
        "description": "ExcludeStatusAuthorizations defines whether to exclude status authorizations from account statement or not."
      },
      {
        "name": "excludePendingFees",
        "schema": "boolean",
        "description": "ExcludePendingFees defines whether to exclude pending fees from account statement or not."
      },
      {
        "name": "excludeClearedFees",
        "schema": "boolean",
        "description": "ExcludeClearedFees defines whether to exclude cleared fees from account statement or not."
      },
      {
        "name": "excludeDeclinedFees",
        "schema": "boolean",
        "description": "ExcludeDeclinedFees defines whether to exclude declined fees from account statement or not."
      },
      {
        "name": "excludeFxFees",
        "schema": "boolean",
        "description": "ExcludeFXFees defines whether to exclude FX fees from account statement or not."
      },
      {
        "name": "mergeFees",
        "schema": "boolean",
        "description": "MergeFees defines whether to merge fees per authorization or not."
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/top-up-details",
    "method": "updateTopUpDetails",
    "httpMethod": HttpMethodsEnum.PUT,
    "tag": "Account",
    "typeScriptTag": "account",
    "description": "Update account top up details",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "top_up_details",
        "schema": "object",
        "required": true,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/accounts/{account_id}/transactions",
    "method": "getAccountTransactions",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Transactions",
    "typeScriptTag": "transactions",
    "description": "Get account transactions",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      },
      {
        "name": "fromDate",
        "schema": "string",
        "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "toDate",
        "schema": "string",
        "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/authorizations/{authorization_id}",
    "method": "getAuthorizationInfo",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Authorizations",
    "typeScriptTag": "authorizations",
    "description": "Get authorization",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "authorizationId",
        "schema": "string",
        "required": true,
        "description": "Authorization ID",
        "example": "AUTHORIZATION_ID"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/authorizations/{authorization_id}/additional-info",
    "method": "getAdditionalInfo",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Authorizations",
    "typeScriptTag": "authorizations",
    "description": "Get authorization additional info",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "authorizationId",
        "schema": "string",
        "required": true,
        "description": "Authorization ID",
        "example": "AUTHORIZATION_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/authorizations/{authorization_id}/fees",
    "method": "getFeesById",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Fee",
    "typeScriptTag": "fee",
    "description": "Get fees by authorization ID",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "authorizationId",
        "schema": "string",
        "required": true,
        "description": "Authorization ID",
        "example": "AUTHORIZATION_ID"
      },
      {
        "name": "feeTypes",
        "schema": "string",
        "description": "Fee types is a **repeated** query parameter to specify fee types to return."
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/batch/cards/block",
    "method": "blockBatch",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Block cards batch",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      },
      {
        "name": "card_ids",
        "schema": "array",
        "required": true,
        "description": ""
      },
      {
        "name": "block_type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "BLOCK_TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/batch/cards/close",
    "method": "closeBatchCards",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Close cards batch",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      },
      {
        "name": "card_ids",
        "schema": "array",
        "required": true,
        "description": ""
      },
      {
        "name": "close_reason",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "CLOSE_REASON"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/batch/cards/fees",
    "method": "updateFeesBatch",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Update card fees batch",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "card_fees_batch",
        "schema": "array",
        "required": true,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/batch/cards/replace",
    "method": "updateBatchFees",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Replace cards batch",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "card_ids",
        "schema": "array",
        "required": true,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/batch/cards/unblock",
    "method": "unblockBatchCards",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Unblock cards batch",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      },
      {
        "name": "card_ids",
        "schema": "array",
        "required": true,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/batch/persons/deactivate",
    "method": "batchDeactivate",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Deactivate persons batch",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "person_ids",
        "schema": "array",
        "required": true,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/batch/persons/{person_id}/additional-infos",
    "method": "createAdditionalInfoBatch",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Create person additional info batch",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "person_additional_infos",
        "schema": "array",
        "required": true,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/batch/persons/{person_id}/additional-infos/delete",
    "method": "deleteAdditionalInfoBatch",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Delete person additional info batch",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "person_additional_info_ids",
        "schema": "array",
        "required": true,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/card-by-reference-number/{reference_number}",
    "method": "getByReferenceNumber",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get card by reference number",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "referenceNumber",
        "schema": "string",
        "required": true,
        "description": "Reference number",
        "example": "REFERENCE_NUMBER"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards",
    "method": "search",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Search cards",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "maskedCardNumber",
        "schema": "string",
        "description": "Masked card number to search"
      },
      {
        "name": "referenceNumber",
        "schema": "string",
        "description": "Reference number to search"
      },
      {
        "name": "externalId",
        "schema": "string",
        "description": "External ID"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "orderDirection",
        "schema": "string",
        "description": "Direction to sort by: asc or desc",
        "default": "asc"
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "OrderField is **repeated** query parameter to specify cards order by.",
        "default": "embossing_name"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards",
    "method": "registerNewCard",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Create card",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "sendNotification",
        "schema": "boolean",
        "description": "The flag specifies whether to send the event notification to a predefined client server.\nIf set to true, minimal webhook parameters (URL, basic authentication credentials) must be configured in the Wallester system to successfully send the event.\nIf set to false, no event notification will be sent even when event notifications are enabled by default."
      },
      {
        "name": "security",
        "schema": "object",
        "required": false,
        "description": ""
      },
      {
        "name": "predecessor_card_id",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "account_id",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "external_id",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      },
      {
        "name": "name",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "3d_secure_settings",
        "schema": "object",
        "required": false,
        "description": ""
      },
      {
        "name": "delivery_address",
        "schema": "object",
        "required": false,
        "description": ""
      },
      {
        "name": "limits",
        "schema": "object",
        "required": false,
        "description": ""
      },
      {
        "name": "personalization_product_code",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "carrier_type",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "expiry_days",
        "schema": "integer",
        "required": false,
        "description": ""
      },
      {
        "name": "expiry_days_round",
        "schema": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "encrypted_pin",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "embossing_name",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "is_disposable",
        "schema": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "separated_embossing_name",
        "schema": "object",
        "required": false,
        "description": ""
      },
      {
        "name": "embossing_company_name",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "card_fees",
        "schema": "array",
        "required": false,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards-by-external-id/{external_id}",
    "method": "getByExternalId",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get card by external ID",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "externalId",
        "schema": "string",
        "required": true,
        "description": "External ID",
        "example": "EXTERNAL_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards-by-last-digits/{last_four_digits}",
    "method": "getByLastFourDigits",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get cards by last 4 digits",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "lastFourDigits",
        "schema": "string",
        "required": true,
        "description": "Last 4 Digits",
        "example": "LAST_FOUR_DIGITS"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards-dispatch-methods",
    "method": "getDispatchMethods",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Cards dispatch methods",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "countryCode",
        "schema": "string",
        "required": true,
        "description": "Country code in ISO 3166-1 Alpha-3 code standard.",
        "example": "COUNTRY_CODE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/fee-waivers",
    "method": "updateWaivers",
    "httpMethod": HttpMethodsEnum.PUT,
    "tag": "Fee",
    "typeScriptTag": "fee",
    "description": "Update card fee waivers",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "card_fee_waivers",
        "schema": "array",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}",
    "method": "information",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get card",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/3d-secure",
    "method": "update3DSecureSettings",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Update 3D secure settings",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "type",
        "schema": "string",
        "description": ""
      },
      {
        "name": "mobile",
        "schema": "string",
        "description": ""
      },
      {
        "name": "language_code",
        "schema": "string",
        "description": ""
      },
      {
        "name": "password",
        "schema": "string",
        "description": ""
      },
      {
        "name": "email",
        "schema": "string",
        "description": ""
      },
      {
        "name": "out_of_band_enabled",
        "schema": "boolean",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/3d-secure/enrol",
    "method": "enrol3DSecure",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Enrol card for 3D secure",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/3d-secure/unenrol",
    "method": "unenrol3DSecure",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Unenrol card from 3D secure",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/3ds-password",
    "method": "send3DsPasswordBySms",
    "httpMethod": HttpMethodsEnum.PUT,
    "tag": "Reminders",
    "typeScriptTag": "reminders",
    "description": "Remind 3DS password",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/activate",
    "method": "activateCardById",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Activate card",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/activate-by-cvv",
    "method": "activateByCvvPatch",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Activate card by CVV",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "cvv",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "CVV"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/authorizations",
    "method": "getCardBlockingAuthorizations",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Authorizations",
    "typeScriptTag": "authorizations",
    "description": "Get card authorizations",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "fromDate",
        "schema": "string",
        "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "toDate",
        "schema": "string",
        "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/block",
    "method": "blockCard",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Block card",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "block_type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "BLOCK_TYPE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/close",
    "method": "closeCard",
    "httpMethod": HttpMethodsEnum.DELETE,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Close card",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/close",
    "method": "closeCard",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Close card",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "close_reason",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "CLOSE_REASON"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/delivery-address",
    "method": "updateDeliveryAddress",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Update card delivery address",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "delivery_address",
        "schema": "object",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/download-statement",
    "method": "downloadStatement",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Download card statement",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "fromDate",
        "schema": "string",
        "required": true,
        "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format",
        "example": "FROM_DATE"
      },
      {
        "name": "toDate",
        "schema": "string",
        "required": true,
        "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format",
        "example": "TO_DATE"
      },
      {
        "name": "timezone",
        "schema": "string",
        "description": "If provided, the date in statement will be in this timezone. If not provided, the timezone will be taken from the user.\nAll timezones could be received from the /v1/timezones endpoint."
      },
      {
        "name": "languageCode",
        "schema": "string",
        "description": "Language code"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/encrypted-3ds-password",
    "method": "getEncrypted3DsPassword",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get encrypted 3DS password by card ID",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "public_key",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "PUBLIC_KEY"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/encrypted-card-number",
    "method": "getEncryptedCardNumber",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get card encrypted card number",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "public_key",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "PUBLIC_KEY"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/encrypted-cvv2",
    "method": "getEncryptedCvv2",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get card encrypted CVV2",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "public_key",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "PUBLIC_KEY"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/encrypted-pin",
    "method": "getEncryptedPin",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get card encrypted PIN",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "public_key",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "PUBLIC_KEY"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/external-id",
    "method": "updateExternalId",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Update card external ID",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "external_id",
        "schema": "string",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/fee-waivers",
    "method": "getCardFeeWaivers",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Fee",
    "typeScriptTag": "fee",
    "description": "Get card fee waivers",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/fee-waivers/{fee_waiver_id}",
    "method": "deleteFeeWaiver",
    "httpMethod": HttpMethodsEnum.DELETE,
    "tag": "Fee",
    "typeScriptTag": "fee",
    "description": "Delete card fee waiver",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "feeWaiverId",
        "schema": "string",
        "required": true,
        "description": "Fee waiver ID",
        "example": "FEE_WAIVER_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/fee-waivers/{fee_waiver_id}",
    "method": "getFeeWaiverById",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Fee",
    "typeScriptTag": "fee",
    "description": "Get card fee waiver by ID",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "feeWaiverId",
        "schema": "string",
        "required": true,
        "description": "Fee waiver ID",
        "example": "FEE_WAIVER_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/fees",
    "method": "getFees",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get card fees",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/fees",
    "method": "updateFees",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Update card fees",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "card_fees",
        "schema": "array",
        "required": true,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/history",
    "method": "getHistory",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get card history",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "fromDate",
        "schema": "string",
        "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "toDate",
        "schema": "string",
        "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/is-card-renewal-allowed",
    "method": "checkRenewalStatus",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Is card renewal allowed",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/limits",
    "method": "getLimitsUsage",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get card limits usage",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/limits",
    "method": "updateLimits",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Update card limits",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "limits",
        "schema": "object",
        "required": true,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/link-to-account/{account_id}",
    "method": "linkToAccount",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Link card to account",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "accountId",
        "schema": "string",
        "required": true,
        "description": "Account ID",
        "example": "ACCOUNT_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/merchant-rules",
    "method": "getMerchantRules",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get card merchant rules",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "isWhiteList",
        "schema": "boolean",
        "description": "Is whitelist card merchant rule"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/merchant-rules",
    "method": "createMerchantRules",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Create card merchant rules",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "card_merchant_rules",
        "schema": "array",
        "required": true,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/merchant-rules/{merchant_rule_id}",
    "method": "deleteMerchantRule",
    "httpMethod": HttpMethodsEnum.DELETE,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Delete card merchant rule",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "merchantRuleId",
        "schema": "string",
        "required": true,
        "description": "Card Merchant Rule ID",
        "example": "MERCHANT_RULE_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/merchant-rules/{merchant_rule_id}",
    "method": "getMerchantRuleById",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get card merchant rule by ID",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "merchantRuleId",
        "schema": "string",
        "required": true,
        "description": "Card Merchant Rule ID",
        "example": "MERCHANT_RULE_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/name",
    "method": "updateNameOperation",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Update card name",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "name",
        "schema": "string",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/pin",
    "method": "changePin",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Change PIN code",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "encrypted_pin",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "ENCRYPTED_PIN"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/pin",
    "method": "sendPinBySms",
    "httpMethod": HttpMethodsEnum.PUT,
    "tag": "Reminders",
    "typeScriptTag": "reminders",
    "description": "Remind PIN",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/push-provisioning/apple-pay",
    "method": "pushProvisioningApplePay",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Token",
    "typeScriptTag": "token",
    "description": "Apple Pay push provisioning",
    "parameters": [
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "certificates",
        "schema": "array",
        "required": true,
        "description": ""
      },
      {
        "name": "nonce",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "NONCE"
      },
      {
        "name": "nonce_signature",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "NONCE_SIGNATURE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/push-provisioning/google-pay",
    "method": "pushProvisioningGooglePay",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Token",
    "typeScriptTag": "token",
    "description": "Google push provisioning",
    "parameters": [
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "client_wallet_account_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "CLIENT_WALLET_ACCOUNT_ID"
      },
      {
        "name": "client_device_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "CLIENT_DEVICE_ID"
      },
      {
        "name": "verify_cardholder",
        "schema": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/renew-automatically",
    "method": "renewAutomaticallyPatch",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Update card renew automatically",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "renew_automatically",
        "schema": "boolean",
        "required": true,
        "description": "",
        "example": true
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/replace",
    "method": "updateCardData",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Replace card",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/security",
    "method": "updateSecurity",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Update card security",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "contactless_enabled",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "withdrawal_enabled",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "internet_purchase_enabled",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "overall_limits_enabled",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "all_time_limits_enabled",
        "schema": "boolean",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/statement",
    "method": "getStatement",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get card statement",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "fromDate",
        "schema": "string",
        "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "toDate",
        "schema": "string",
        "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      },
      {
        "name": "includeAuthorizations",
        "schema": "boolean",
        "description": "IncludeAuthorizations defines whether to include authorizations to account statement or not."
      },
      {
        "name": "includeTransactions",
        "schema": "boolean",
        "description": "IncludeTransactions defines whether to include transactions to account statement or not."
      },
      {
        "name": "includeFees",
        "schema": "boolean",
        "description": "IncludeFees defines whether to include fees to account statement or not."
      },
      {
        "name": "excludeDeclinedAuthorizations",
        "schema": "boolean",
        "description": "ExcludeDeclinedAuthorizations defines whether to exclude declined authorizations from account statement or not."
      },
      {
        "name": "excludeReversedAuthorizations",
        "schema": "boolean",
        "description": "ExcludeReversedAuthorizations defines whether to exclude reversed authorizations and reversals from account statement or not."
      },
      {
        "name": "excludeClearedAuthorizations",
        "schema": "boolean",
        "description": "ExcludeClearedAuthorizations defines whether to exclude cleared authorizations from account statement or not."
      },
      {
        "name": "excludePendingAuthorizations",
        "schema": "boolean",
        "description": "ExcludePendingAuthorizations defines whether to exclude pending authorizations from account statement or not."
      },
      {
        "name": "excludeStatusAuthorizations",
        "schema": "boolean",
        "description": "ExcludeStatusAuthorizations defines whether to exclude status authorizations from account statement or not."
      },
      {
        "name": "excludePendingFees",
        "schema": "boolean",
        "description": "ExcludePendingFees defines whether to exclude pending fees from account statement or not."
      },
      {
        "name": "excludeClearedFees",
        "schema": "boolean",
        "description": "ExcludeClearedFees defines whether to exclude cleared fees from account statement or not."
      },
      {
        "name": "excludeDeclinedFees",
        "schema": "boolean",
        "description": "ExcludeDeclinedFees defines whether to exclude declined fees from account statement or not."
      },
      {
        "name": "mergeFees",
        "schema": "boolean",
        "description": "MergeFees defines whether to merge fees per authorization or not."
      },
      {
        "name": "searchKeyword",
        "schema": "string",
        "description": "Search keyword"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/sync-tokens",
    "method": "syncAndUpdate",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Token",
    "typeScriptTag": "token",
    "description": "Sync tokens",
    "parameters": [
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/tokens",
    "method": "getByCardId",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Token",
    "typeScriptTag": "token",
    "description": "Get tokens by card ID",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "Field to sort by: id, reference_id, card_id, card_metadata_profile_id, requestor_id, pan_reference_id,\ntype, status, expiration or created_at",
        "default": "created_at"
      },
      {
        "name": "orderDirection",
        "schema": "string",
        "description": "Direction to sort by: asc or desc",
        "default": "asc"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/transactions",
    "method": "getCardTransactions",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Transactions",
    "typeScriptTag": "transactions",
    "description": "Get card transactions",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "fromDate",
        "schema": "string",
        "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "toDate",
        "schema": "string",
        "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/unblock",
    "method": "unblockCard",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Unblock card",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/users",
    "method": "deleteUsers",
    "httpMethod": HttpMethodsEnum.DELETE,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Delete card users",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "userIds",
        "schema": "array",
        "required": true,
        "description": "User IDs"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/users",
    "method": "getUsers",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get card users",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "Field to sort by: first_name, last_name, mobile, email",
        "default": "mobile"
      },
      {
        "name": "orderDirection",
        "schema": "string",
        "description": "Direction to sort by: asc or desc",
        "default": "asc"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/cards/{card_id}/users",
    "method": "createUser",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Create card user",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      },
      {
        "name": "first_name",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "last_name",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "email",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "mobile",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "MOBILE"
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies",
    "method": "search",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Search companies",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "name",
        "schema": "string",
        "description": "Name"
      },
      {
        "name": "registrationNumber",
        "schema": "string",
        "required": true,
        "description": "Registration number",
        "example": "REGISTRATION_NUMBER"
      },
      {
        "name": "mobile",
        "schema": "string",
        "description": "Person phone or mobile to search"
      },
      {
        "name": "email",
        "schema": "string",
        "description": "Person email to search"
      },
      {
        "name": "statuses",
        "schema": "string",
        "description": "Statuses is **repeated** query parameter to specify company statuses to return."
      },
      {
        "name": "riskProfiles",
        "schema": "string",
        "description": "RiskProfiles is **repeated** query parameter to specify company risk profiles to return."
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "Field to sort by **repeated** (format <field_name> or <field_name>.<asc | desc> (asc by default))"
      },
      {
        "name": "orderDirection",
        "schema": "string",
        "description": "Direction to sort by: asc or desc (https://api-doc.wallester.com/",
        "default": "asc"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies",
    "method": "createNewCompany",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Create company",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "name",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "NAME"
      },
      {
        "name": "registration_number",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "REGISTRATION_NUMBER"
      },
      {
        "name": "registration_address",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "headquarter_address",
        "schema": "object",
        "required": true,
        "description": ""
      },
      {
        "name": "risk_profile",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "mobile",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "email",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "industry_type",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "date_of_incorporation",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "DATE_OF_INCORPORATION"
      },
      {
        "name": "is_sanctions_related",
        "schema": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "is_adverse_media_involved",
        "schema": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "preferred_language_code",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "vat_number",
        "schema": "string",
        "required": false,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}",
    "method": "deactivateCompany",
    "httpMethod": HttpMethodsEnum.DELETE,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Deactivate company",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}",
    "method": "getInformation",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Get company",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}",
    "method": "updateDetails",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Update company",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "name",
        "schema": "string",
        "description": ""
      },
      {
        "name": "registration_number",
        "schema": "string",
        "description": ""
      },
      {
        "name": "registration_address",
        "schema": "object",
        "description": ""
      },
      {
        "name": "headquarter_address",
        "schema": "object",
        "description": ""
      },
      {
        "name": "risk_profile",
        "schema": "string",
        "description": ""
      },
      {
        "name": "mobile",
        "schema": "string",
        "description": ""
      },
      {
        "name": "email",
        "schema": "string",
        "description": ""
      },
      {
        "name": "industry_type",
        "schema": "string",
        "description": ""
      },
      {
        "name": "date_of_incorporation",
        "schema": "string",
        "description": ""
      },
      {
        "name": "is_sanctions_related",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "is_adverse_media_involved",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "push_notifications_enabled",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "preferred_language_code",
        "schema": "string",
        "description": ""
      },
      {
        "name": "vat_number",
        "schema": "string",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/3ds-settings",
    "method": "delete3DsSettings",
    "httpMethod": HttpMethodsEnum.DELETE,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Delete company 3DS settings",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/3ds-settings",
    "method": "get3DsSettings",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Get company 3DS settings",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": "Person3DSSettingsResponse"
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/3ds-settings",
    "method": "update3DsSettings",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Update company 3DS settings",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "email",
        "schema": "string",
        "description": ""
      },
      {
        "name": "mobile",
        "schema": "string",
        "description": ""
      },
      {
        "name": "password",
        "schema": "string",
        "description": ""
      },
      {
        "name": "force_usage",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "card_default_settings",
        "schema": "boolean",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": "Person3DSSettingsResponse"
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/3ds-settings",
    "method": "create3DsSettings",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Create company 3DS settings",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "email",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "mobile",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "password",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "PASSWORD"
      },
      {
        "name": "force_usage",
        "schema": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "card_default_settings",
        "schema": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": "Person3DSSettingsResponse"
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/accounts",
    "method": "getAccounts",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Get company accounts",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "isActive",
        "schema": "boolean",
        "description": "Return only active accounts"
      },
      {
        "name": "accountStatuses",
        "schema": "string",
        "description": "AccountStatuses is **repeated** query parameter to specify account statuses to return."
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "Is a **repeated** query parameter to sort accounts to return. Sorting could be done by direct and backward order (asc or desc).\nDefault order direct \"asc\".\nFormat: <field_name> or <field_name>.<asc | desc> (order_field=status&order_field=created_at.desc)."
      },
      {
        "name": "balanceIsZero",
        "schema": "boolean",
        "description": "Excluding or only showing null balance"
      },
      {
        "name": "availableAmountIsZero",
        "schema": "boolean",
        "description": "Excluding or only showing null available amount"
      },
      {
        "name": "blockedAmountIsZero",
        "schema": "boolean",
        "description": "Excluding or only showing null blocked amount"
      },
      {
        "name": "accountName",
        "schema": "string",
        "description": "AccountName is a query parameter to specify account name to return."
      },
      {
        "name": "viban",
        "schema": "string",
        "description": "Account viban"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/cards",
    "method": "getCards",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Get company cards",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "cardStatuses",
        "schema": "string",
        "description": "CardStatuses is **repeated** query parameter to specify card statuses to return."
      },
      {
        "name": "cardTypes",
        "schema": "string",
        "description": "CardTypes is **repeated** query parameter to specify card types to return."
      },
      {
        "name": "fromExpiryDate",
        "schema": "string",
        "description": "FromExpiryDate defines a beginning expiry date of card.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "toExpiryDate",
        "schema": "string",
        "description": "ToExpiryDate defines an end expiry date of card.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "name",
        "schema": "string",
        "description": "Card name"
      },
      {
        "name": "maskedCardNumber",
        "schema": "string",
        "description": "Masked card number to search"
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "Field to sort by **repeated** (format <field_name> or <field_name>.<asc | desc> (asc by default))\nStatus field order is: \"Active\", \"Ordered\", \"Blocked\", \"Frozen\", \"Expired\", \"Closed\"."
      },
      {
        "name": "orderDirection",
        "schema": "string",
        "description": "Direction to sort by: asc or desc (https://api-doc.wallester.com/",
        "default": "asc"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/corporate-documents",
    "method": "addCorporateDocuments",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Add company corporate documents",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      },
      {
        "name": "file",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "FILE"
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/fcm-tokens",
    "method": "registerFcmToken",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Register FCM Token",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "device_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "DEVICE_ID"
      },
      {
        "name": "fcm_token",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "FCM_TOKEN"
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/fcm-tokens-by-device-id/{device_id}",
    "method": "deleteFcmToken",
    "httpMethod": HttpMethodsEnum.DELETE,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Delete FCM Token",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "deviceId",
        "schema": "string",
        "required": true,
        "description": "Device ID",
        "example": "DEVICE_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/fcm-tokens-by-device-id/{device_id}",
    "method": "getFcmTokenByDeviceId",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Get FCM Token",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "deviceId",
        "schema": "string",
        "required": true,
        "description": "Device ID",
        "example": "DEVICE_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/fcm-tokens-by-device-id/{device_id}/push-notifications-enabled",
    "method": "updatePushNotificationsEnabledForDevice",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Update push notifications enabled for device",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "deviceId",
        "schema": "string",
        "required": true,
        "description": "Device ID",
        "example": "DEVICE_ID"
      },
      {
        "name": "push_notifications_enabled",
        "schema": "boolean",
        "required": true,
        "description": "",
        "example": true
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/history",
    "method": "getHistory",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Get company history",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "fromDate",
        "schema": "string",
        "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "toDate",
        "schema": "string",
        "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/limits",
    "method": "updateLimits",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Update company limits",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "limits",
        "schema": "object",
        "required": true,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/push-notifications-enabled",
    "method": "updatePushNotificationsEnabled",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Update push notifications enabled for company",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "push_notifications_enabled",
        "schema": "boolean",
        "required": true,
        "description": "",
        "example": true
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/representatives",
    "method": "getRepresentatives",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Get company representatives",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/representatives",
    "method": "addRepresentatives",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Add company representatives",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "representatives",
        "schema": "array",
        "required": true,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/representatives/{representative_id}",
    "method": "removeRepresentative",
    "httpMethod": HttpMethodsEnum.DELETE,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Remove company representative",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "representativeId",
        "schema": "string",
        "required": true,
        "description": "Representative ID",
        "example": "REPRESENTATIVE_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/representatives/{representative_id}",
    "method": "getRepresentativeInfo",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Get company representative",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "representativeId",
        "schema": "string",
        "required": true,
        "description": "Representative ID",
        "example": "REPRESENTATIVE_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/representatives/{representative_id}",
    "method": "updateRepresentative",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Update company representative",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "representativeId",
        "schema": "string",
        "required": true,
        "description": "Representative ID",
        "example": "REPRESENTATIVE_ID"
      },
      {
        "name": "title",
        "schema": "string",
        "description": ""
      },
      {
        "name": "first_name",
        "schema": "string",
        "description": ""
      },
      {
        "name": "middle_name",
        "schema": "string",
        "description": ""
      },
      {
        "name": "last_name",
        "schema": "string",
        "description": ""
      },
      {
        "name": "position",
        "schema": "string",
        "description": ""
      },
      {
        "name": "is_member_of_the_board",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "is_representative",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "is_ultimate_beneficial_owner",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "birth_date",
        "schema": "string",
        "description": ""
      },
      {
        "name": "residence_country_code",
        "schema": "string",
        "description": ""
      },
      {
        "name": "is_sanctions_related",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "is_politically_exposed",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "is_adverse_media_involved",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "is_shareholder",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "percentage_owned",
        "schema": "number",
        "description": ""
      },
      {
        "name": "email",
        "schema": "string",
        "description": ""
      },
      {
        "name": "mobile",
        "schema": "string",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/representatives/{representative_id}/history",
    "method": "getRepresentativeHistory",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Get representative history",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "representativeId",
        "schema": "string",
        "required": true,
        "description": "Representative ID",
        "example": "REPRESENTATIVE_ID"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "description": "FromRecord defines a beginning record number of requested data set (can be used with records_count parameter in pair)"
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "description": "RecordsCount defines number of records of requested data set (can be used with from_record parameter in pair)"
      },
      {
        "name": "fromDate",
        "schema": "string",
        "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "toDate",
        "schema": "string",
        "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/representatives/{representative_id}/verification-link",
    "method": "sendVerificationLink",
    "httpMethod": HttpMethodsEnum.PUT,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Send representative verification link",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "representativeId",
        "schema": "string",
        "required": true,
        "description": "Representative ID",
        "example": "REPRESENTATIVE_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/submit-agreement",
    "method": "submitAgreement",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Submit company agreement",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "agreement_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "AGREEMENT_ID"
      },
      {
        "name": "signed_at",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "SIGNED_AT"
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/users",
    "method": "deleteUsers",
    "httpMethod": HttpMethodsEnum.DELETE,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Delete company users",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "userIds",
        "schema": "array",
        "required": true,
        "description": "User IDs"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/users",
    "method": "getUsers",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Get company users",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "Field to sort by: first_name, last_name, mobile, email",
        "default": "first_name"
      },
      {
        "name": "orderDirection",
        "schema": "string",
        "description": "Direction to sort by: asc or desc",
        "default": "asc"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/companies/{company_id}/users",
    "method": "createUser",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Company",
    "typeScriptTag": "company",
    "description": "Create company user",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "companyId",
        "schema": "string",
        "required": true,
        "description": "Company ID",
        "example": "COMPANY_ID"
      },
      {
        "name": "first_name",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "last_name",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "email",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "mobile",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "MOBILE"
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/expiring-cards",
    "method": "getExpiringCards",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get expiring cards",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "Field to sort by: masked_card_number, expiry_date",
        "default": "masked_card_number"
      },
      {
        "name": "orderDirection",
        "schema": "string",
        "description": "Direction to sort by: asc or desc",
        "default": "asc"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/extract-files",
    "method": "listDirectories",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Extract-Files",
    "typeScriptTag": "extractFiles",
    "description": "Get directories list",
    "parameters": [],
    "responses": [
      {
        "statusCode": "200",
        "description": "ExtractFilesDirectoriesResponse"
      }
    ]
  },
  {
    "url": "/v1/extract-files/{directory_name}",
    "method": "getFilesList",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Extract-Files",
    "typeScriptTag": "extractFiles",
    "description": "Get directory files list",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "directoryName",
        "schema": "string",
        "required": true,
        "description": "Directory name",
        "example": "DIRECTORY_NAME"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": "ExtractFilesListResponse"
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/extract-files/{directory_name}/{file_name}",
    "method": "downloadFile",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Extract-Files",
    "typeScriptTag": "extractFiles",
    "description": "Download file",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "directoryName",
        "schema": "string",
        "required": true,
        "description": "Directory name",
        "example": "DIRECTORY_NAME"
      },
      {
        "name": "fileName",
        "schema": "string",
        "required": true,
        "description": "File name",
        "example": "FILE_NAME"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/fees/{fee_id}",
    "method": "getFeeInformation",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Fee",
    "typeScriptTag": "fee",
    "description": "Get fee",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "feeId",
        "schema": "string",
        "required": true,
        "description": "Fee ID",
        "example": "FEE_ID"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/fraud-cases",
    "method": "listCases",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Fraud-Case",
    "typeScriptTag": "fraudCase",
    "description": "Get fraud cases",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "fromDate",
        "schema": "string",
        "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "toDate",
        "schema": "string",
        "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "Field to sort by **repeated** (format <field_name> or <field_name>.<asc | desc> (asc by default))"
      },
      {
        "name": "caseStatuses",
        "schema": "string",
        "description": "CaseStatuses is **repeated** query parameter to specify case statuses to return."
      },
      {
        "name": "riskStatuses",
        "schema": "string",
        "description": "RiskStatuses is **repeated** query parameter to specify risk statuses to return."
      },
      {
        "name": "riskZones",
        "schema": "string",
        "description": "RiskZones is **repeated** query parameter to specify risk zones to return."
      },
      {
        "name": "fromRiskScore",
        "schema": "integer",
        "description": "FromRiskScore defines a beginning risk score number of fraud case"
      },
      {
        "name": "toRiskScore",
        "schema": "integer",
        "description": "ToRiskScore defines an end risk score number of fraud case"
      },
      {
        "name": "cardOwnerIds",
        "schema": "array",
        "description": "Card owner IDs"
      },
      {
        "name": "merchantCountryCode",
        "schema": "string",
        "description": "Merchant country code"
      },
      {
        "name": "cardOwnerCountryCode",
        "schema": "string",
        "description": "Card owner country code"
      },
      {
        "name": "assignedToName",
        "schema": "string",
        "description": "Assigned to name parameter"
      },
      {
        "name": "scoring",
        "schema": "array",
        "description": "Scoring fields, repeated parameter"
      },
      {
        "name": "minimumScoring",
        "schema": "integer",
        "description": "Minimum scoring parameter"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/fraud-cases/card-owners",
    "method": "getCardOwners",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Fraud-Case",
    "typeScriptTag": "fraudCase",
    "description": "Get fraud cases card owners",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "fromDate",
        "schema": "string",
        "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "toDate",
        "schema": "string",
        "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "cardOwnerName",
        "schema": "string",
        "description": "CardOwnerName defines company name or person first name and last name"
      },
      {
        "name": "fromCasesCount",
        "schema": "integer",
        "description": "FromCasesCount defines a beginning cases count number"
      },
      {
        "name": "toCasesCount",
        "schema": "integer",
        "description": "ToCasesCount defines an end cases count number"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/fraud-cases/{fraud_case_id}",
    "method": "getCase",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Fraud-Case",
    "typeScriptTag": "fraudCase",
    "description": "Get fraud case",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "fraudCaseId",
        "schema": "string",
        "required": true,
        "description": "Fraud case ID",
        "example": "FRAUD_CASE_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/fraud-cases/{fraud_case_id}",
    "method": "updateCase",
    "httpMethod": HttpMethodsEnum.PUT,
    "tag": "Fraud-Case",
    "typeScriptTag": "fraudCase",
    "description": "Update fraud case",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "fraudCaseId",
        "schema": "string",
        "required": true,
        "description": "Fraud case ID",
        "example": "FRAUD_CASE_ID"
      },
      {
        "name": "description",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "case_status",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "CASE_STATUS"
      },
      {
        "name": "source",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "type",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "liability",
        "schema": "string",
        "required": false,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/fraud-cases/{fraud_case_id}/history",
    "method": "getHistory",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Fraud-Case",
    "typeScriptTag": "fraudCase",
    "description": "Get fraud case history",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "fraudCaseId",
        "schema": "string",
        "required": true,
        "description": "Fraud case ID",
        "example": "FRAUD_CASE_ID"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "fromDate",
        "schema": "string",
        "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "toDate",
        "schema": "string",
        "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "Field to sort by **repeated** (format <field_name> or <field_name>.<asc | desc> (asc by default))"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/kyc-checks",
    "method": "getAll",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "KYC-Check",
    "typeScriptTag": "kycCheck",
    "description": "Get KYC checks",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "Is a **repeated** query parameter to sort kyc checks to return. Sorting could be done by direct and backward order (asc or desc).\nDefault order direct \"asc\".\nFormat: <field_name> or <field_name>.<asc | desc> (order_field=status&order_field=created_at.desc).",
        "default": "created_at"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/kyc-checks",
    "method": "createNew",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "KYC-Check",
    "typeScriptTag": "kycCheck",
    "description": "Create KYC check",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "applicant_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "APPLICANT_ID"
      },
      {
        "name": "person_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "PERSON_ID"
      },
      {
        "name": "idv_result",
        "schema": "object",
        "required": false,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/kyc-checks/{kyc_check_id}",
    "method": "deleteCheck",
    "httpMethod": HttpMethodsEnum.DELETE,
    "tag": "KYC-Check",
    "typeScriptTag": "kycCheck",
    "description": "Delete KYC check",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "kycCheckId",
        "schema": "string",
        "required": true,
        "description": "KYC Check ID",
        "example": "KYC_CHECK_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/kyc-checks/{kyc_check_id}",
    "method": "getDetails",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "KYC-Check",
    "typeScriptTag": "kycCheck",
    "description": "Get KYC check",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "kycCheckId",
        "schema": "string",
        "required": true,
        "description": "KYC Check ID",
        "example": "KYC_CHECK_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/kyc-checks/{kyc_check_id}/initiate",
    "method": "initiateProcess",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "KYC-Check",
    "typeScriptTag": "kycCheck",
    "description": "Initiate KYC check",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "kycCheckId",
        "schema": "string",
        "required": true,
        "description": "KYC Check ID",
        "example": "KYC_CHECK_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/kyc-documents",
    "method": "uploadDocument",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "KYC-Document",
    "typeScriptTag": "kycDocument",
    "description": "Upload KYC documents",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "kyc_check_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "KYC_CHECK_ID"
      },
      {
        "name": "file",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "FILE"
      },
      {
        "name": "issuer",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "number",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      },
      {
        "name": "subtype",
        "schema": "string",
        "required": false,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/kyc-documents/{kyc_document_id}",
    "method": "getDetails",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "KYC-Document",
    "typeScriptTag": "kycDocument",
    "description": "Get KYC documents details",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "kycDocumentId",
        "schema": "string",
        "required": true,
        "description": "KYC Document ID",
        "example": "KYC_DOCUMENT_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/payment-documents",
    "method": "addDocuments",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Payment-Document",
    "typeScriptTag": "paymentDocument",
    "description": "Add payment documents",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "payment_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "PAYMENT_ID"
      },
      {
        "name": "payment_type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "PAYMENT_TYPE"
      },
      {
        "name": "payment_documents",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "PAYMENT_DOCUMENTS"
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/payment-documents/download",
    "method": "downloadFiles",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Payment-Document",
    "typeScriptTag": "paymentDocument",
    "description": "Download payment documents",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "paymentId",
        "schema": "string",
        "required": true,
        "description": "Payment ID",
        "example": "PAYMENT_ID"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/payment-documents/thumbnails",
    "method": "getThumbnail",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Payment-Document",
    "typeScriptTag": "paymentDocument",
    "description": "Get payment documents thumbnail",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "paymentId",
        "schema": "string",
        "required": true,
        "description": "Payment ID",
        "example": "PAYMENT_ID"
      },
      {
        "name": "paymentType",
        "schema": "string",
        "required": true,
        "description": "Payment type",
        "example": "PAYMENT_TYPE"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/payment-documents/{payment_document_id}",
    "method": "deleteDocument",
    "httpMethod": HttpMethodsEnum.DELETE,
    "tag": "Payment-Document",
    "typeScriptTag": "paymentDocument",
    "description": "Delete payment document",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "paymentDocumentId",
        "schema": "string",
        "required": true,
        "description": "PaymentDocument ID",
        "example": "PAYMENT_DOCUMENT_ID"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/payment-documents/{payment_document_id}",
    "method": "getDocument",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Payment-Document",
    "typeScriptTag": "paymentDocument",
    "description": "Get payment document",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "paymentDocumentId",
        "schema": "string",
        "required": true,
        "description": "PaymentDocument ID",
        "example": "PAYMENT_DOCUMENT_ID"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/payments/authorizations",
    "method": "getProductAuthorizations",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Authorizations",
    "typeScriptTag": "authorizations",
    "description": "Get product authorizations",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "OrderField is **repeated** query parameter to specify authorization payments order by.",
        "default": "created_at"
      },
      {
        "name": "orderDirection",
        "schema": "string",
        "description": "Direction to sort by: asc or desc",
        "default": "asc"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "fromDate",
        "schema": "string",
        "description": "FromDate defines a beginning date of requested data set (can be used in pair with to_date parameter).\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "toDate",
        "schema": "string",
        "description": "ToDate defines an end date of requested data set (can be used with from_date parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/payments/transactions",
    "method": "getProductTransactions",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Transactions",
    "typeScriptTag": "transactions",
    "description": "Get product transactions",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "OrderField is **repeated** query parameter to specify transaction payments order by.",
        "default": "created_at"
      },
      {
        "name": "orderDirection",
        "schema": "string",
        "description": "Direction to sort by: asc or desc",
        "default": "asc"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "dateField",
        "schema": "string",
        "description": "Field to get records by date: created_at, processed_at",
        "default": "created_at"
      },
      {
        "name": "fromDate",
        "schema": "string",
        "description": "FromDate defines a beginning date of requested data set (can be used in pair with to_date parameter).\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "toDate",
        "schema": "string",
        "description": "ToDate defines an end date of requested data set (can be used with from_date parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/pending-orders",
    "method": "listPendingOrders",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get pending orders",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "Field to sort by: masked_card_number, created_at, status",
        "default": "created_at"
      },
      {
        "name": "orderDirection",
        "schema": "string",
        "description": "Direction to sort by: asc or desc",
        "default": "asc"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons",
    "method": "search",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Search persons",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "firstName",
        "schema": "string",
        "description": "Person first name to search"
      },
      {
        "name": "lastName",
        "schema": "string",
        "description": "Person last name to search"
      },
      {
        "name": "personalNumber",
        "schema": "string",
        "description": "Person personal number to search"
      },
      {
        "name": "mobile",
        "schema": "string",
        "description": "Person phone or mobile to search"
      },
      {
        "name": "email",
        "schema": "string",
        "description": "Person email to search"
      },
      {
        "name": "externalId",
        "schema": "string",
        "description": "External ID"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "Field to sort by: first_name, last_name, personal_number, mobile, email, status, residence_country_code, updated_at",
        "default": "first_name"
      },
      {
        "name": "isActive",
        "schema": "boolean",
        "description": "Return only active persons",
        "default": false
      },
      {
        "name": "orderDirection",
        "schema": "string",
        "description": "Direction to sort by: asc or desc",
        "default": "asc"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons",
    "method": "createNew",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Create person",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "person",
        "schema": "object",
        "required": true,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons-by-external-id/{external_id}",
    "method": "getByExternalId",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Get person by external ID",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "externalId",
        "schema": "string",
        "required": true,
        "description": "External ID",
        "example": "EXTERNAL_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}",
    "method": "deactivate",
    "httpMethod": HttpMethodsEnum.DELETE,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Deactivate person",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}",
    "method": "getInformation",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Get person",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}",
    "method": "updatePatch",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Update person patch",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "title",
        "schema": "string",
        "description": ""
      },
      {
        "name": "personal_number",
        "schema": "string",
        "description": ""
      },
      {
        "name": "personal_number_issuer",
        "schema": "string",
        "description": ""
      },
      {
        "name": "first_name",
        "schema": "string",
        "description": ""
      },
      {
        "name": "middle_name",
        "schema": "string",
        "description": ""
      },
      {
        "name": "last_name",
        "schema": "string",
        "description": ""
      },
      {
        "name": "birth_date",
        "schema": "string",
        "description": ""
      },
      {
        "name": "birth_country_code",
        "schema": "string",
        "description": ""
      },
      {
        "name": "gender",
        "schema": "string",
        "description": ""
      },
      {
        "name": "mobile",
        "schema": "string",
        "description": ""
      },
      {
        "name": "email",
        "schema": "string",
        "description": ""
      },
      {
        "name": "external_id",
        "schema": "string",
        "description": ""
      },
      {
        "name": "residence_country_code",
        "schema": "string",
        "description": ""
      },
      {
        "name": "is_represented_by_someone_else",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "is_beneficial_owner",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "is_politically_exposed_person",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "politically_exposed_person_explanation",
        "schema": "string",
        "description": ""
      },
      {
        "name": "risk_profile",
        "schema": "string",
        "description": ""
      },
      {
        "name": "loyalty_number",
        "schema": "string",
        "description": ""
      },
      {
        "name": "document_number",
        "schema": "string",
        "description": ""
      },
      {
        "name": "address",
        "schema": "object",
        "description": ""
      },
      {
        "name": "is_sanctions_related",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "is_adverse_media_involved",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "push_notifications_enabled",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "preferred_language_code",
        "schema": "string",
        "description": ""
      },
      {
        "name": "expected_turnover",
        "schema": "string",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}",
    "method": "updateDetails",
    "httpMethod": HttpMethodsEnum.PUT,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Update person",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "person",
        "schema": "object",
        "required": true,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/3ds-settings",
    "method": "delete3DsSettings",
    "httpMethod": HttpMethodsEnum.DELETE,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Delete person 3DS settings",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/3ds-settings",
    "method": "get3DsSettings",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Get person 3DS settings",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": "Person3DSSettingsResponse"
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/3ds-settings",
    "method": "update3DsSettings",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Update person 3DS settings",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "email",
        "schema": "string",
        "description": ""
      },
      {
        "name": "mobile",
        "schema": "string",
        "description": ""
      },
      {
        "name": "password",
        "schema": "string",
        "description": ""
      },
      {
        "name": "force_usage",
        "schema": "boolean",
        "description": ""
      },
      {
        "name": "card_default_settings",
        "schema": "boolean",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": "Person3DSSettingsResponse"
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/3ds-settings",
    "method": "create3DsSettings",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Create person 3DS settings",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "email",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "mobile",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "password",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "PASSWORD"
      },
      {
        "name": "force_usage",
        "schema": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "card_default_settings",
        "schema": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": "Person3DSSettingsResponse"
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/accounts",
    "method": "getAccounts",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Get person accounts",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "isActive",
        "schema": "boolean",
        "description": "Return only active accounts"
      },
      {
        "name": "accountStatuses",
        "schema": "string",
        "description": "AccountStatuses is **repeated** query parameter to specify account statuses to return."
      },
      {
        "name": "accountName",
        "schema": "string",
        "description": "AccountName is a query parameter to specify account name to return."
      },
      {
        "name": "viban",
        "schema": "string",
        "description": "Viban is a query parameter to specify account Viban to return."
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/activate",
    "method": "activatePatch",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Activate person",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/activate-card",
    "method": "activateCardByLastFourDigits",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Activate card",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "last_four_digits",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "LAST_FOUR_DIGITS"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/additional-infos",
    "method": "getAdditionalInfos",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Get person additional infos",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/additional-infos/{person_additional_info_id}",
    "method": "deleteAdditionalInfo",
    "httpMethod": HttpMethodsEnum.DELETE,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Delete person additional info",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "personAdditionalInfoId",
        "schema": "string",
        "required": true,
        "description": "Person additional info ID",
        "example": "PERSON_ADDITIONAL_INFO_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/additional-infos/{person_additional_info_id}",
    "method": "getAdditionalInfo",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Get person additional info",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "personAdditionalInfoId",
        "schema": "string",
        "required": true,
        "description": "Person additional info ID",
        "example": "PERSON_ADDITIONAL_INFO_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/additional-infos/{person_additional_info_id}",
    "method": "updateAdditionalInfo",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Update person additional info",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "personAdditionalInfoId",
        "schema": "string",
        "required": true,
        "description": "Person additional info ID",
        "example": "PERSON_ADDITIONAL_INFO_ID"
      },
      {
        "name": "key",
        "schema": "string",
        "description": ""
      },
      {
        "name": "value",
        "schema": "string",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/card-blocks",
    "method": "getCardBlockLogs",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Get cards block logs",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "fromDate",
        "schema": "string",
        "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "toDate",
        "schema": "string",
        "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/cards",
    "method": "getCards",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Get person cards",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "Field to sort by: masked_card_number, expiry_date, type, status",
        "default": "masked_card_number"
      },
      {
        "name": "orderDirection",
        "schema": "string",
        "description": "Direction to sort by: asc or desc",
        "default": "asc"
      },
      {
        "name": "cardStatuses",
        "schema": "string",
        "description": "CardStatuses is **repeated** query parameter to specify card statuses to return."
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/fcm-tokens",
    "method": "registerFcmToken",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Register FCM Token",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "device_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "DEVICE_ID"
      },
      {
        "name": "fcm_token",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "FCM_TOKEN"
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/fcm-tokens-by-device-id/{device_id}",
    "method": "deleteFcmToken",
    "httpMethod": HttpMethodsEnum.DELETE,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Delete FCM Token",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "deviceId",
        "schema": "string",
        "required": true,
        "description": "Device ID",
        "example": "DEVICE_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/fcm-tokens-by-device-id/{device_id}",
    "method": "getFcmToken",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Get FCM Token",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "deviceId",
        "schema": "string",
        "required": true,
        "description": "Device ID",
        "example": "DEVICE_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/fcm-tokens-by-device-id/{device_id}/push-notifications-enabled",
    "method": "updatePushNotificationsEnabled",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Update push notifications enabled",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "deviceId",
        "schema": "string",
        "required": true,
        "description": "Device ID",
        "example": "DEVICE_ID"
      },
      {
        "name": "push_notifications_enabled",
        "schema": "boolean",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/fees-statements",
    "method": "getFeesStatement",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Get fees statement",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/history",
    "method": "getHistory",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Get person history",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "fromDate",
        "schema": "string",
        "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      },
      {
        "name": "toDate",
        "schema": "string",
        "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/onfido-check",
    "method": "createOnfidoCheck",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Create Onfido check",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/onfido-sdk-token",
    "method": "generateSdkToken",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Generate Onfido SDK token",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "ipAddress",
        "schema": "string",
        "description": "Person IP Address. Required if your Onfido integration versions less than: API v3.4, iOS SDK v25.1.1, Android SDK v12.3.0, Web SDK 8.3.0"
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/push-notifications-enabled",
    "method": "togglePushNotifications",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Update push notifications enabled",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "push_notifications_enabled",
        "schema": "boolean",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/users",
    "method": "deleteUser",
    "httpMethod": HttpMethodsEnum.DELETE,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Delete person users",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "userIds",
        "schema": "array",
        "required": true,
        "description": "User IDs"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/users",
    "method": "getUserList",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Get person users",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "Field to sort by: first_name, last_name, mobile, email",
        "default": "first_name"
      },
      {
        "name": "orderDirection",
        "schema": "string",
        "description": "Direction to sort by: asc or desc",
        "default": "asc"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/persons/{person_id}/users",
    "method": "createUser",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Person",
    "typeScriptTag": "person",
    "description": "Create person user",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personId",
        "schema": "string",
        "required": true,
        "description": "Person ID",
        "example": "PERSON_ID"
      },
      {
        "name": "first_name",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "FIRST_NAME"
      },
      {
        "name": "last_name",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "LAST_NAME"
      },
      {
        "name": "email",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "EMAIL"
      },
      {
        "name": "mobile",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "MOBILE"
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/product-cards",
    "method": "getList",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get list of cards",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "OrderField is **repeated** query parameter to specify cards order by.",
        "default": "embossing_name"
      },
      {
        "name": "orderDirection",
        "schema": "string",
        "description": "Direction to sort by: asc or desc",
        "default": "asc"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "isActive",
        "schema": "boolean",
        "description": "Return only active cards",
        "default": false
      },
      {
        "name": "cardStatuses",
        "schema": "string",
        "description": "CardStatuses is **repeated** query parameter to specify card statuses to return."
      },
      {
        "name": "blockTypes",
        "schema": "string",
        "description": "BlockTypes is **repeated** query parameter to specify card block types to return."
      },
      {
        "name": "accountIds",
        "schema": "string",
        "description": "AccountIDs is **repeated** query parameter with card account IDs"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/product-settings/about-company",
    "method": "getCompanyInfo",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Product",
    "typeScriptTag": "product",
    "description": "Company info",
    "parameters": [],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/product-settings/account-allowed-currencies",
    "method": "getAllowedCurrencies",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Product",
    "typeScriptTag": "product",
    "description": "Account allowed currencies",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/product-settings/account-limits",
    "method": "getAccountLimits",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Product",
    "typeScriptTag": "product",
    "description": "Account limits",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/product-settings/allowed-card-delivery-country-codes",
    "method": "getAllowedDeliveryCountries",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Product",
    "typeScriptTag": "product",
    "description": "Allowed card delivery countries",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/product-settings/card-limits",
    "method": "getCardLimits",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Product",
    "typeScriptTag": "product",
    "description": "Card limits",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/product-settings/embossing-name",
    "method": "getEmbossingNameSettings",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Product",
    "typeScriptTag": "product",
    "description": "Embossing name product settings",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/product-settings/mobile-application",
    "method": "getMobileApplicationSettings",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Product",
    "typeScriptTag": "product",
    "description": "Mobile application product settings",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/product-settings/personalization-product-codes",
    "method": "getPersonalizationProductCodes",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Product",
    "typeScriptTag": "product",
    "description": "Personalization product codes",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/product-settings/product-fees",
    "method": "getFees",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Product",
    "typeScriptTag": "product",
    "description": "Product fees",
    "parameters": [],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/products/card-designs",
    "method": "getCardDesignsByCodes",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Product",
    "typeScriptTag": "product",
    "description": "Card designs by personalization product codes",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "personalizationProductCode",
        "schema": "string",
        "required": true,
        "description": "PersonalizationProductCode **repeated**",
        "example": "PERSONALIZATION_PRODUCT_CODE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/reserved-settlement-balance",
    "method": "getReservedBalance",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Settlement",
    "typeScriptTag": "settlement",
    "description": "Get reserved settlement balance",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/search",
    "method": "searchAccountsAndPersons",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Other",
    "typeScriptTag": "other",
    "description": "Search",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "Person search allows to order fields by: full_name, residency_country_code, mobile, status, personal_id\n\nCard search allows to order fields by: embossing_name, masked_card_number, status, type, personalization_product_code, expiry_date"
      },
      {
        "name": "orderDirection",
        "schema": "string",
        "description": "Direction to sort by: asc or desc",
        "default": "asc"
      },
      {
        "name": "value",
        "schema": "string",
        "required": true,
        "description": "Search value",
        "example": "VALUE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/status",
    "method": "checkApiStatus",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Status",
    "typeScriptTag": "status",
    "description": "Get API status",
    "parameters": [],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/templates",
    "method": "getList",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Templates",
    "typeScriptTag": "templates",
    "description": "Get list of templates",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "orderField",
        "schema": "string",
        "description": "Field to sort by: message_type, delivery_type, language_code, body, subject, updated_at",
        "default": "message_type"
      },
      {
        "name": "orderDirection",
        "schema": "string",
        "description": "Direction to sort by: asc or desc",
        "default": "asc"
      },
      {
        "name": "fromRecord",
        "schema": "integer",
        "required": true,
        "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
        "example": 0
      },
      {
        "name": "recordsCount",
        "schema": "integer",
        "required": true,
        "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
        "example": 0
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/templates",
    "method": "createNewTemplate",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Templates",
    "typeScriptTag": "templates",
    "description": "Create template",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "message_type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "MESSAGE_TYPE"
      },
      {
        "name": "delivery_type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "DELIVERY_TYPE"
      },
      {
        "name": "language_code",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "LANGUAGE_CODE"
      },
      {
        "name": "body",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "BODY"
      },
      {
        "name": "subject",
        "schema": "string",
        "required": false,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/templates/{template_id}",
    "method": "deleteTemplate",
    "httpMethod": HttpMethodsEnum.DELETE,
    "tag": "Templates",
    "typeScriptTag": "templates",
    "description": "Delete template",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "templateId",
        "schema": "string",
        "required": true,
        "description": "Template ID",
        "example": "TEMPLATE_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/templates/{template_id}",
    "method": "getById",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Templates",
    "typeScriptTag": "templates",
    "description": "Get template",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "templateId",
        "schema": "string",
        "required": true,
        "description": "Template ID",
        "example": "TEMPLATE_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/templates/{template_id}",
    "method": "updateTemplate",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Templates",
    "typeScriptTag": "templates",
    "description": "Update template",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "templateId",
        "schema": "string",
        "required": true,
        "description": "Template ID",
        "example": "TEMPLATE_ID"
      },
      {
        "name": "message_type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "MESSAGE_TYPE"
      },
      {
        "name": "delivery_type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "DELIVERY_TYPE"
      },
      {
        "name": "language_code",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "LANGUAGE_CODE"
      },
      {
        "name": "body",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "BODY"
      },
      {
        "name": "subject",
        "schema": "string",
        "required": false,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/test/authorizations",
    "method": "createAuthorization",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Testing",
    "typeScriptTag": "testing",
    "description": "Create authorization",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "createMatchingTransactionAndPerformClearing",
        "schema": "boolean",
        "description": "CreateMatchingTransactionAndPerformClearing defines whether to create matching transaction and perform clearing or not.",
        "default": false
      },
      {
        "name": "card_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "CARD_ID"
      },
      {
        "name": "transaction_amount",
        "schema": "number",
        "required": true,
        "description": "",
        "example": 0
      },
      {
        "name": "transaction_currency_code",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TRANSACTION_CURRENCY_CODE"
      },
      {
        "name": "account_amount",
        "schema": "number",
        "required": true,
        "description": "",
        "example": 0
      },
      {
        "name": "account_currency_code",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "ACCOUNT_CURRENCY_CODE"
      },
      {
        "name": "merchant_category_code",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "MERCHANT_CATEGORY_CODE"
      },
      {
        "name": "merchant_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "MERCHANT_ID"
      },
      {
        "name": "merchant_name",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "MERCHANT_NAME"
      },
      {
        "name": "merchant_city",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "MERCHANT_CITY"
      },
      {
        "name": "merchant_country_code",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "MERCHANT_COUNTRY_CODE"
      },
      {
        "name": "terminal_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TERMINAL_ID"
      },
      {
        "name": "date",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "DATE"
      },
      {
        "name": "type",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TYPE"
      },
      {
        "name": "retrieval_reference_number",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "does_terminal_support_partial_approvals",
        "schema": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/test/cards/{card_id}/3ds-otp",
    "method": "send3DsOtpNotification",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Testing",
    "typeScriptTag": "testing",
    "description": "Send 3DS OTP",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "otp",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "OTP"
      },
      {
        "name": "merchant_name",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "MERCHANT_NAME"
      },
      {
        "name": "amount",
        "schema": "number",
        "required": true,
        "description": "",
        "example": 0
      },
      {
        "name": "currency_code",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "CURRENCY_CODE"
      },
      {
        "name": "purchase_date",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "PURCHASE_DATE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/test/cards/{card_id}/status",
    "method": "updateCardStatus",
    "httpMethod": HttpMethodsEnum.PATCH,
    "tag": "Testing",
    "typeScriptTag": "testing",
    "description": "Update card status",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "cardId",
        "schema": "string",
        "required": true,
        "description": "Card ID",
        "example": "CARD_ID"
      },
      {
        "name": "status",
        "schema": "string",
        "description": ""
      },
      {
        "name": "block_type",
        "schema": "string",
        "description": ""
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/test/no-access",
    "method": "handleNoAccessError",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Testing",
    "typeScriptTag": "testing",
    "description": "No Access",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      }
    ],
    "responses": [
      {
        "statusCode": "default",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/test/ping",
    "method": "jwtToken",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Testing",
    "typeScriptTag": "testing",
    "description": "Ping",
    "parameters": [
      {
        "name": "message",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "MESSAGE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/test/transactions",
    "method": "submitTransaction",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Testing",
    "typeScriptTag": "testing",
    "description": "Create transaction",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "card_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "CARD_ID"
      },
      {
        "name": "purchase_date",
        "schema": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "group",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "GROUP"
      },
      {
        "name": "transaction_amount",
        "schema": "number",
        "required": true,
        "description": "",
        "example": 0
      },
      {
        "name": "transaction_currency_code",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TRANSACTION_CURRENCY_CODE"
      },
      {
        "name": "account_amount",
        "schema": "number",
        "required": true,
        "description": "",
        "example": 0
      },
      {
        "name": "account_currency_code",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "ACCOUNT_CURRENCY_CODE"
      },
      {
        "name": "merchant_category_code",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "MERCHANT_CATEGORY_CODE"
      },
      {
        "name": "merchant_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "MERCHANT_ID"
      },
      {
        "name": "terminal_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TERMINAL_ID"
      },
      {
        "name": "merchant_name",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "MERCHANT_NAME"
      },
      {
        "name": "merchant_postal_code",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "MERCHANT_POSTAL_CODE",
        "default": "str"
      },
      {
        "name": "merchant_city",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "MERCHANT_CITY"
      },
      {
        "name": "merchant_country_code",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "MERCHANT_COUNTRY_CODE"
      },
      {
        "name": "acquirer_reference_number",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "ACQUIRER_REFERENCE_NUMBER"
      },
      {
        "name": "acquirer_business_id",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "ACQUIRER_BUSINESS_ID"
      },
      {
        "name": "transaction_code",
        "schema": "integer",
        "required": true,
        "description": "",
        "example": 0
      },
      {
        "name": "transaction_identifier",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "TRANSACTION_IDENTIFIER"
      },
      {
        "name": "processed_at",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "PROCESSED_AT"
      }
    ],
    "responses": [
      {
        "statusCode": "201",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/tokens/{token_id}",
    "method": "getById",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Token",
    "typeScriptTag": "token",
    "description": "Get token by token ID",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "tokenId",
        "schema": "string",
        "required": true,
        "description": "Token ID",
        "example": "TOKEN_ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/tokens/{token_id}/activate",
    "method": "activateToken",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Token",
    "typeScriptTag": "token",
    "description": "Activate token",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "tokenId",
        "schema": "string",
        "required": true,
        "description": "Token ID",
        "example": "TOKEN_ID"
      },
      {
        "name": "reason",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "REASON"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/tokens/{token_id}/deactivate",
    "method": "deactivateToken",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Token",
    "typeScriptTag": "token",
    "description": "Deactivate token",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "tokenId",
        "schema": "string",
        "required": true,
        "description": "Token ID",
        "example": "TOKEN_ID"
      },
      {
        "name": "reason",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "REASON"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/tokens/{token_id}/resume",
    "method": "resume",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Token",
    "typeScriptTag": "token",
    "description": "Resume token",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "tokenId",
        "schema": "string",
        "required": true,
        "description": "Token ID",
        "example": "TOKEN_ID"
      },
      {
        "name": "reason",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "REASON"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/tokens/{token_id}/suspend",
    "method": "suspendToken",
    "httpMethod": HttpMethodsEnum.POST,
    "tag": "Token",
    "typeScriptTag": "token",
    "description": "Suspend token",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "tokenId",
        "schema": "string",
        "required": true,
        "description": "Token ID",
        "example": "TOKEN_ID"
      },
      {
        "name": "reason",
        "schema": "string",
        "required": true,
        "description": "",
        "example": "REASON"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "415",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/transactions/summary",
    "method": "getSummary",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Transactions",
    "typeScriptTag": "transactions",
    "description": "Transactions summary",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "fromDate",
        "schema": "string",
        "required": true,
        "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format",
        "example": "FROM_DATE"
      },
      {
        "name": "toDate",
        "schema": "string",
        "required": true,
        "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format",
        "example": "TO_DATE"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/transactions/{transaction_id}",
    "method": "getInformation",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Transactions",
    "typeScriptTag": "transactions",
    "description": "Get transaction",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "transactionId",
        "schema": "string",
        "required": true,
        "description": "Transaction ID",
        "example": "TRANSACTION_ID"
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v1/transactions/{transaction_id}/fees",
    "method": "getByTransactionId",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Fee",
    "typeScriptTag": "fee",
    "description": "Get fees by transaction ID",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "transactionId",
        "schema": "string",
        "required": true,
        "description": "Transaction ID",
        "example": "TRANSACTION_ID"
      },
      {
        "name": "feeTypes",
        "schema": "string",
        "description": "Fee types is a **repeated** query parameter to specify fee types to return."
      },
      {
        "name": "companyId",
        "schema": "string",
        "description": "Filter by Company ID, cannot be used together with Person ID"
      },
      {
        "name": "personId",
        "schema": "string",
        "description": "Filter by Person ID, cannot be used together with Company ID"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  },
  {
    "url": "/v2/cards-by-hashed-card-number/{sha}",
    "method": "getByShaHashedCardNumber",
    "httpMethod": HttpMethodsEnum.GET,
    "tag": "Card",
    "typeScriptTag": "card",
    "description": "Get card by SHA hashed card number",
    "parameters": [
      {
        "name": "xProductCode",
        "schema": "string",
        "required": true,
        "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
        "example": "X-PRODUCT-CODE"
      },
      {
        "name": "xAuditSourceType",
        "schema": "string",
        "required": true,
        "description": "Type of the source system, possible values are Backend or SelfService",
        "example": "X-AUDIT-SOURCE-TYPE"
      },
      {
        "name": "xAuditUserId",
        "schema": "string",
        "required": true,
        "description": "ID of the user who initiated the request",
        "example": "X-AUDIT-USER-ID"
      },
      {
        "name": "authorization",
        "schema": "string",
        "required": true,
        "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
        "example": "AUTHORIZATION"
      },
      {
        "name": "sha",
        "schema": "string",
        "required": true,
        "description": "SHA hashed card number",
        "example": "SHA"
      }
    ],
    "responses": [
      {
        "statusCode": "200",
        "description": ""
      },
      {
        "statusCode": "400",
        "description": ""
      },
      {
        "statusCode": "401",
        "description": ""
      },
      {
        "statusCode": "403",
        "description": ""
      },
      {
        "statusCode": "422",
        "description": ""
      },
      {
        "statusCode": "500",
        "description": ""
      }
    ]
  }
]
    }
      language="TypeScript"
      apiTitle="Wallester"
      apiBaseUrl="https://localhost:8000"
      apiVersion="v1"
      endpoints={205}
      sdkMethods={248}
      schemas={552}
      parameters={1850}
      difficulty="Very Hard"
      openApiRaw="https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/wallester/openapi.yaml"
      openApiGitHubUi="https://github.com/konfig-sdks/openapi-examples/tree/HEAD/wallester/openapi.yaml"
      developerDocumentation="api-doc.wallester.com/"
    />
  );
}
  