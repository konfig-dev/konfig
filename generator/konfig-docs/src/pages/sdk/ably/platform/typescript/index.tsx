import React, { FormEventHandler, PropsWithChildren, useState } from "react";
import Layout from "@theme/Layout";
import type { HttpMethods } from "konfig-lib";
import { HttpMethodsEnum } from "konfig-lib/dist/forEachOperation";
// @ts-ignore
import Description from "./_description.mdx";
// @ts-ignore
import GettingStarted from "./_getting-started.mdx";
import clsx from "clsx";
import Head from "@docusaurus/Head";
import {
  IconAdjustments,
  IconApi,
  IconChevronDown,
  IconCodeDots,
  IconCube,
  IconInfoCircle,
  IconLink,
  IconPencil,
  IconPlayerPlay,
  TablerIconsProps,
} from "@tabler/icons-react";

export default function AblyTypeScriptSdk() {
  const metaDescription = `Ably provides a suite of APIs to build, extend, and deliver powerful digital experiences in realtime. Organizations like Toyota, Bloomberg, HubSpot, and Hopin depend on Ablyâ€™s platform to offload the growing complexity of business-critical realtime data synchronization at global scale.`;
  return (
    <Layout
      title="Ably API - TypeScript SDK and OpenAPI Specification"
      description={`Ably API TypeScript SDK, Documentation, and OpenAPI Specification - ${metaDescription}}`}
    >
      <Head>
        <link rel="icon" href="https://ably.com/favicon.ico" />
        <meta
          property="og:image"
          content="https://voltaire.ably.com/static/ably-generic@2x-53a7dd8e38ba16fd0190ec91150dad0a.jpeg"
        />
        <meta property="og:description" content={metaDescription} />
        <style>
          {`p {
            margin-bottom: 0px;
          }`}
        </style>
      </Head>
      <div className="bg-slate-100 border-b">
        <div className="py-8 bg-gradient-to-tl from-[var(--ifm-color-primary-darkest)] to-[var(--ifm-color-primary)]">
          <BigSection>
            <div className="p-8 w-fit bg-gradient-to-t ring-1 ring-slate-200 from-white to-slate-100 relative top-20 bg-white rounded-md shadow-xl">
              <img
                className="h-6 mb-4"
                src="https://voltaire.ably.com/static/ably-logo-46433d9937b94509fc62ef6dd6d94ff1.png"
                alt="Ably Logo"
              />
              <h1 className="flex gap-2 text-2xl lg:text-3xl mb-2">
                <span>ably-platform-typescript-sdk</span>
                <TsIcon className="h-5 w-5" />
              </h1>
              <div className="flex flex-wrap gap-x-3 gap-y-1 items-center text-xs sm:text-sm md:text-base">
                <div className="font-mono text-slate-500">1.1.0</div>
                <Dot />
                <div className="font-mono">
                  <a href="https://konfigthis.com" target="_blank">
                    SDK Generated by Konfig
                  </a>
                </div>
                <Dot />
                <div className="font-mono">
                  <a href="https://ably.com" target="_blank">
                    https://ably.com
                  </a>
                </div>
                <Dot />
                <div className="font-mono text-slate-500">
                  Last Updated 1 week ago
                </div>
              </div>
            </div>
          </BigSection>
        </div>
        <BigSection>
          <div className="flex flex-col pt-24 pb-10 lg:flex-row lg:gap-10 items-start justify-between">
            <div className="grow w-full">
              <SignupForm />
              <div className="text-slate-500 mb-1 text-sm font-bold">
                What is Ably?
              </div>
              <AboutSection>
                <AboutContentSection>
                  <AboutTitle>
                    <div className="flex items-center gap-2">
                      <IconInfoCircle size="1rem" className="text-slate-400" />
                      <div>About Ably</div>
                    </div>
                  </AboutTitle>
                  <p>{metaDescription}</p>
                </AboutContentSection>
                <AboutTitle>
                  <div className="flex items-center gap-2">
                    <IconApi size="1rem" className="text-slate-400" />
                    <div>About Ably's API</div>
                  </div>
                </AboutTitle>
                <Description />
              </AboutSection>
              <div className="text-slate-500 mb-1 text-sm font-bold">
                Integrating Ably's TypeScript SDK
              </div>
              <AboutSection>
                <AboutContentSection>
                  <AboutTitle>
                    <div className="flex items-center gap-2 mb-[-12px]">
                      <IconPlayerPlay size="1rem" className="text-slate-300" />
                      <div>SDK Initialization</div>
                    </div>
                  </AboutTitle>
                  <GettingStarted />
                </AboutContentSection>
                <AboutTitle>
                  <div className="flex items-center gap-2">
                    <IconCodeDots size="1rem" className="text-slate-300" />
                    <div>SDK Methods</div>
                  </div>
                </AboutTitle>
                <div className="space-y-4">
                  <SdkMethod
                    method="ably.status.getMetadataOfAllChannels"
                    url="https://rest.ably.io/channels"
                    description="Enumerate all active channels of the application"
                    httpMethod={HttpMethodsEnum.GET}
                  />
                  <SdkMethod
                    method="ably.publishing.publishMessagesToChannel"
                    url="https://rest.ably.io/channels/{channel_id}/messages"
                    description="Publish a message to the specified channel"
                    httpMethod={HttpMethodsEnum.POST}
                  />
                  <SdkMethod
                    method="ably.push.deletePushDeviceDetails"
                    url="https://rest.ably.io/push/channelSubscriptions"
                    description="Delete a device details object."
                    httpMethod={HttpMethodsEnum.DELETE}
                  />
                </div>
              </AboutSection>
            </div>
            <Sidebar />
          </div>
        </BigSection>
      </div>
    </Layout>
  );
}

function AboutContentSection({ children }: PropsWithChildren<{}>) {
  return <div className="mb-10">{children}</div>;
}

function SdkMethod({
  method,
  url,
  httpMethod,
  description,
}: {
  method: string;
  url: string;
  httpMethod: HttpMethods;
  description: string;
}) {
  const [expanded, setExpanded] = useState(false);
  return (
    <div
      className={clsx(
        "text-slate-700 ring-1 ring-slate-200  rounded-md block w-full overflow-x-auto px-3 py-2 transition-all text-xs lg:text-sm bg-slate-100 hover:bg-slate-50/50",
        {
          "bg-slate-50/50": expanded,
        },
        {
          "scale-[1.01] shadow-xl": expanded,
        }
      )}
    >
      <button
        className="w-full flex items-center"
        onClick={() => {
          setExpanded(!expanded);
        }}
      >
        <div className="grow">
          <div className="flex flex-col items-start">
            <h4
              className={clsx(
                "font-bold whitespace-nowrap mb-1 text-xs lg:text-sm font-mono text-slate-800"
              )}
            >
              {`${method}()`}
            </h4>
            <p className={clsx("mb-0")}>{description}</p>
          </div>
        </div>
        <IconChevronDown
          className={clsx("h-4 transition-transform", {
            "rotate-180": expanded,
          })}
        />
      </button>
      <div
        className={clsx("text-left w-full", {
          "h-0 overflow-hidden": !expanded,
          "h-auto": expanded,
        })}
      >
        <SdkMethodSection Icon={IconAdjustments} header="Parameter">
          <div className="space-y-2">
            <SdkMethodParameter
              name="prefix"
              schema="string"
              required
              description="Optionally limits the query to only those channels whose name starts with the given prefix"
            />
            <SdkMethodParameter
              name="by"
              schema="string"
              description="optionally specifies whether to return just channel names (by=id) or ChannelDetails (by=value)"
            />
          </div>
        </SdkMethodSection>
        <SdkMethodSection header="Response" Icon={IconCube}>
          <div className="space-y-2 w-full">
            <SdkMethodResponse statusCode="2XX" />
            <SdkMethodResponse
              statusCode="default"
              description="Returned error from failed REST."
            />
          </div>
        </SdkMethodSection>
        <SdkMethodSection header="Endpoint" Icon={IconLink}>
          <div className="flex items-center gap-2 mb-3">
            <HttpMethodBadge httpMethod={httpMethod} />
            <div className={clsx("font-mono")}>{url}</div>
          </div>
        </SdkMethodSection>
      </div>
    </div>
  );
}

function SdkMethodResponse({
  statusCode,
  description,
}: {
  statusCode: string;
  description?: string;
}) {
  return (
    <div
      className={clsx("p-2 w-full border rounded-md", {
        "bg-blue-50 border-blue-100 text-blue-600": statusCode.startsWith("2"),
        "bg-red-50 border-red-100 text-red-600": !statusCode.startsWith("2"),
      })}
    >
      <span className="font-semibold">{statusCode}</span>
      {description && <p className="mb-1">{description}</p>}
    </div>
  );
}

function SdkMethodParameter({
  name,
  schema,
  required,
  description,
}: PropsWithChildren<{
  name: string;
  schema: string;
  required?: boolean;
  description: string;
}>) {
  return (
    <div>
      <div className="flex flex-wrap gap-x-2 items-center">
        <SdkMethodParameterName>{name}</SdkMethodParameterName>
        <SdkMethodParameterSchema>{schema}</SdkMethodParameterSchema>
        {required && <SdkMethodParameterRequired />}
      </div>
      <p className="mt-1">{description}</p>
    </div>
  );
}

function SdkMethodParameterRequired() {
  return (
    <span className="font-mono text-red-600 p-1 rounded-md border-red-300 bg-red-100">
      required
    </span>
  );
}

function SdkMethodParameterName({ children }: PropsWithChildren<{}>) {
  return (
    <span
      className={clsx(
        "font-semibold p-1 rounded-md border font-mono bg-slate-200 text-slate-700 border-slate-400"
      )}
    >
      {children}
    </span>
  );
}

function SdkMethodParameterSchema({ children }: PropsWithChildren<{}>) {
  return <span className="font-mono">{children}</span>;
}

function SdkMethodSection({
  header,
  children,
  Icon,
}: PropsWithChildren<{
  header: string;
  Icon: (props: TablerIconsProps) => JSX.Element;
}>) {
  return (
    <div className="flex w-full gap-2 mt-6">
      <Icon className={clsx("shrink-0 h-4 text-slate-500")} />
      <div className="flex flex-col grow items-start">
        <SdkMethodHeader className="font-semibold font-sans mb-2 uppercase">
          {header}
        </SdkMethodHeader>
        <div className="text-xs w-full">{children}</div>
      </div>
    </div>
  );
}

function SdkMethodHeader({
  children,
  className,
}: PropsWithChildren<{
  className?: string;
}>) {
  return (
    <h5
      className={clsx(
        "font-bold whitespace-nowrap mb-1 text-xs font-mono text-slate-600",
        className
      )}
    >
      {children}
    </h5>
  );
}

function BigSection({ children }: PropsWithChildren<{}>) {
  return (
    <div className="mx-4 lg:mx-auto lg:w-[960px] xl:w-[1152px]">{children}</div>
  );
}

function AboutSection({ children }: PropsWithChildren<{}>) {
  return (
    <div className="mb-10 ring-1 ring-slate-200 bg-white rounded-md shadow-md p-8">
      {children}
    </div>
  );
}

function AboutTitle({ children }: PropsWithChildren<{}>) {
  return <h3 className="text-slate-500 uppercase text-xs mb-2">{children}</h3>;
}

function SignupForm() {
  const [email, setEmail] = useState("");
  const [signedUp, setSignedUp] = useState(false);
  const [signedUpEmail, setSignedUpEmail] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit: FormEventHandler = async (event) => {
    event.preventDefault();
    setLoading(true);

    const url =
      process.env.NODE_ENV === "development"
        ? "http://localhost:8911/sdkSignupForm"
        : "https://api.konfigthis.com/sdkSignupForm";

    try {
      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          email: email,
          company: "Ably",
          service: "platform",
          language: "TypeScript",
        }),
      });

      setLoading(false);

      if (!response.ok) {
        // handle error
      }

      setSignedUp(true);
      setSignedUpEmail(email);
    } catch (e) {
      // if error when calling fetch, set loading to false
      setLoading(false);
    }
  };

  return (
    <form
      onSubmit={handleSubmit}
      id="signup"
      className="p-8 rounded-md bg-emerald-50 ring-1 ring-emerald-300 transition-all hover:scale-[1.01] hover:shadow-lg shadow-md mb-8"
    >
      <div className="flex flex-col">
        <h2
          className={clsx("text-lg lg:text-xl text-emerald-900 font-bold", {
            "mb-3": !signedUp,
          })}
        >
          {signedUp
            ? "Thanks for signing up for access to Ably's TypeScript SDK!"
            : "Need a TypeScript SDK for Ably's API?"}
        </h2>
        {signedUp ? (
          <>
            <p>{`Your email, ${signedUpEmail}, has been successfully registered for access to the TypeScript SDK. We will notify you as soon as it is available.`}</p>
            <p className="mb-0">
              For inquiries or support, please contact us at{" "}
              <a href="mailto:sdks@konfigthis.com">sdks@konfigthis.com</a>
            </p>
          </>
        ) : null}
        {signedUp ? null : (
          <input
            type="email"
            name="email"
            className="border rounded-md px-2 py-1 w-full mb-2"
            placeholder="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
        )}
        {signedUp ? null : (
          <button
            type="submit"
            className="font-medium group flex gap-3 hover:gap-2 items-center transition-all bg-gradient-to-br text-white w-fit text-center px-3 py-2 from-emerald-600 to-emerald-800 rounded-md text-sm"
          >
            {loading ? (
              <LoadingIcon />
            ) : (
              <>
                <div>Sign up for access to Ably's TypeScript SDK</div>
                <IconPencil
                  size="1rem"
                  className="transition-all group-hover:text-emerald-50 text-emerald-300"
                />
              </>
            )}
          </button>
        )}
      </div>
    </form>
  );
}

function LoadingIcon() {
  return (
    <div role="status">
      <svg
        aria-hidden="true"
        className="w-4 h-4 text-gray-200 animate-spin dark:text-gray-600 fill-green-600"
        viewBox="0 0 100 101"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
          fill="currentColor"
        />
        <path
          d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
          fill="currentFill"
        />
      </svg>
      <span className="sr-only">Loading...</span>
    </div>
  );
}

function Sidebar() {
  return (
    <div className="top-20 sticky w-full lg:w-fit">
      <div className="flex gap-1 items-center mb-1">
        <IconInfoCircle className="h-4 shrink-0 text-slate-400" />
        <div className="text-slate-500 text-sm font-bold">More Info</div>
      </div>
      <div className="bg-white ring-1 ring-slate-200 shadow-md p-8 lg:py-4 lg:px-6 rounded-md">
        <SidebarSection>
          <SidebarSectionTitle>Service Name</SidebarSectionTitle>
          <SidebarSectionContent>platform</SidebarSectionContent>
        </SidebarSection>
        <SidebarSection>
          <SidebarSectionTitle>API Title</SidebarSectionTitle>
          <SidebarSectionContent>Platform API</SidebarSectionContent>
        </SidebarSection>
        <SidebarSection>
          <SidebarSectionTitle>API Base URL</SidebarSectionTitle>
          <SidebarSectionContent>
            <a href="https://rest.ably.io" target="_blank">
              https://rest.ably.io
            </a>
          </SidebarSectionContent>
        </SidebarSection>
        <SidebarSection>
          <SidebarSectionTitle>API Version</SidebarSectionTitle>
          <SidebarSectionContent>1.1.0</SidebarSectionContent>
        </SidebarSection>
        <SidebarSection>
          <div className="flex justify-between">
            <div className="w-1/2">
              <SidebarSectionTitle>Endpoints</SidebarSectionTitle>
              <SidebarSectionContent>14</SidebarSectionContent>
            </div>
            <div className="w-1/2">
              <SidebarSectionTitle>SDK Methods</SidebarSectionTitle>
              <SidebarSectionContent>36</SidebarSectionContent>
            </div>
          </div>
        </SidebarSection>
        <SidebarSection noBorder>
          <div className="flex justify-between">
            <div className="w-1/2">
              <SidebarSectionTitle>Schemas</SidebarSectionTitle>
              <SidebarSectionContent>14</SidebarSectionContent>
            </div>
            <div className="w-1/2">
              <SidebarSectionTitle>Parameters</SidebarSectionTitle>
              <SidebarSectionContent>42</SidebarSectionContent>
            </div>
          </div>
        </SidebarSection>
        <SidebarSection>
          <SidebarSectionTitle>
            <div className="flex items-end gap-1">
              <div>Difficulty</div>
              <a
                target="_blank"
                href="/sdk-difficulty"
                className="text-xs font-normal lowercase"
              >
                (What is this?)
              </a>
            </div>
          </SidebarSectionTitle>
          <SidebarSectionContent>
            <div className="text-red-500">Hard</div>
          </SidebarSectionContent>
        </SidebarSection>
        <SidebarSection>
          <SidebarSectionTitle>Homepage</SidebarSectionTitle>
          <SidebarSectionContent>
            <a href="https://ably.com/" target="_blank">
              https://ably.com/
            </a>
          </SidebarSectionContent>
        </SidebarSection>
        <SidebarSection>
          <SidebarSectionTitle>Contact URL</SidebarSectionTitle>
          <SidebarSectionContent>
            <a href="https://www.ably.io/contact" target="_blank">
              https://www.ably.io/contact
            </a>
          </SidebarSectionContent>
        </SidebarSection>
        <SidebarSection>
          <SidebarSectionTitle>Contact Email</SidebarSectionTitle>
          <SidebarSectionContent>
            <a href="mailto:support@ably.io">support@ably.io</a>
          </SidebarSectionContent>
        </SidebarSection>
        <SidebarSection>
          <SidebarSectionTitle>OpenAPI Specification</SidebarSectionTitle>
          <SidebarSectionContent>
            <a
              href={`https://raw.githubusercontent.com/ably/open-specs/main/definitions/platform-v1.yaml`}
              className="pr-4 mr-4 border-r-2"
              target="_blank"
            >
              Raw
            </a>
            <a
              href={`https://elements-demo.stoplight.io/?spec=https://raw.githubusercontent.com/ably/open-specs/main/definitions/platform-v1.yaml`}
              target="_blank"
            >
              UI
            </a>
          </SidebarSectionContent>
        </SidebarSection>
      </div>
    </div>
  );
}

function SidebarSection({
  children,
  noBorder,
}: PropsWithChildren<{ noBorder?: boolean }>) {
  return <div className={clsx("py-2 lg:py-3 mb-1")}>{children}</div>;
}

function SidebarSectionTitle({
  children,
  large,
}: PropsWithChildren<{ large?: boolean }>) {
  return (
    <h3
      className={clsx("mb-1 text-slate-500 uppercase text-xs", {
        "text-lg text-black": large,
      })}
    >
      {children}
    </h3>
  );
}

function SidebarSectionContent({ children }: PropsWithChildren<{}>) {
  return <div className="text font-semibold">{children}</div>;
}

function Dot() {
  return <div className="h-[3px] w-[3px] bg-slate-300 rounded-full" />;
}

function TsIcon(props: React.ComponentProps<"svg">) {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" {...props}>
      <path fill="#1976d2" d="M6 6h36v36H6z" />
      <path
        fill="#fff"
        d="M27.49 22H14.227v3.264h4.757V40h3.769V25.264h4.737zM39.194 26.084s-1.787-1.192-3.807-1.192-2.747.96-2.747 1.986c0 2.648 7.381 2.383 7.381 7.712 0 8.209-11.254 4.568-11.254 4.568V35.22s2.152 1.622 4.733 1.622 2.483-1.688 2.483-1.92c0-2.449-7.315-2.449-7.315-7.878 0-7.381 10.658-4.469 10.658-4.469l-.132 3.509z"
      />
    </svg>
  );
}

export function HttpMethodBadge({ httpMethod }: { httpMethod: HttpMethods }) {
  const color = httpMethodColor(httpMethod);
  return (
    <div
      className={clsx("px-2 text-xs rounded-xl uppercase font-semibold", {
        "bg-green-100 text-green-700 border border-green-300":
          color === "green",
        "bg-blue-100 text-blue-700 border border-blue-300": color === "blue",
        "bg-red-100 text-red-700 border border-red-300": color === "red",
        "bg-yellow-100 text-yellow-700 border border-yellow-300":
          color === "yellow",
        "bg-slate-100 text-slate-700 border border-slate-300":
          color === "slate",
      })}
    >
      {httpMethod}
    </div>
  );
}

function httpMethodColor(
  method: HttpMethods
): "green" | "blue" | "red" | "yellow" | "slate" {
  if (method === HttpMethodsEnum.GET) return "green";
  if (method === HttpMethodsEnum.POST) return "blue";
  if (method === HttpMethodsEnum.PUT) return "blue";
  if (method === HttpMethodsEnum.DELETE) return "red";
  if (method === HttpMethodsEnum.PATCH) return "yellow";
  if (method === HttpMethodsEnum.OPTIONS) return "yellow";
  if (method === HttpMethodsEnum.TRACE) return "yellow";
  return "slate";
}
