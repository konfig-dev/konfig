import React, { PropsWithChildren } from "react";
import Layout from "@theme/Layout";
import type { HttpMethods } from "konfig-lib";
import { HttpMethodsEnum } from "konfig-lib/dist/forEachOperation";
// @ts-ignore
import Description from "./_description.mdx";
// @ts-ignore
import GettingStarted from "./_getting-started.mdx";
import clsx from "clsx";
import Head from "@docusaurus/Head";
import {
  IconApi,
  IconBraces,
  IconCodeDots,
  IconInfoCircle,
  IconPencil,
  IconPlayerPlay,
} from "@tabler/icons-react";

export default function AblyTypeScriptSdk() {
  const metaDescription = `Ably provides a suite of APIs to build, extend, and deliver powerful digital experiences in realtime. Organizations like Toyota, Bloomberg, HubSpot, and Hopin depend on Ablyâ€™s platform to offload the growing complexity of business-critical realtime data synchronization at global scale.`;
  return (
    <Layout
      title="Ably API - TypeScript SDK and OpenAPI Specification"
      description={`Ably API TypeScript SDK, Documentation, and OpenAPI Specification - ${metaDescription}}`}
    >
      <Head>
        <link rel="icon" href="https://ably.com/favicon.ico" />
        <meta
          property="og:image"
          content="https://voltaire.ably.com/static/ably-generic@2x-53a7dd8e38ba16fd0190ec91150dad0a.jpeg"
        />
        <meta property="og:description" content={metaDescription} />
      </Head>
      <div className="bg-slate-100 border-b">
        <div className="py-8 bg-gradient-to-tl from-[var(--ifm-color-primary-darkest)] to-[var(--ifm-color-primary)]">
          <BigSection>
            <div className="p-8 w-fit bg-gradient-to-t ring-1 ring-slate-200 from-white to-slate-100 relative top-20 bg-white rounded-md shadow-xl">
              <img
                className="h-6 mb-4"
                src="https://voltaire.ably.com/static/ably-logo-46433d9937b94509fc62ef6dd6d94ff1.png"
                alt="Ably Logo"
              />
              <h1 className="flex gap-2 text-2xl lg:text-3xl mb-2">
                <span>ably-typescript-sdk</span>
                <TsIcon className="h-5 w-5" />
              </h1>
              <div className="flex flex-wrap gap-x-3 gap-y-1 items-center text-xs sm:text-sm md:text-base">
                <div className="font-mono text-slate-500">1.0.0</div>
                <Dot />
                <div className="font-mono">
                  <a href="https://konfigthis.com" target="_blank">
                    SDK Generated by Konfig
                  </a>
                </div>
                <Dot />
                <div className="font-mono">
                  <a href="https://ably.com" target="_blank">
                    https://ably.com
                  </a>
                </div>
                <Dot />
                <div className="font-mono text-slate-500">
                  Last Updated 1 week ago
                </div>
              </div>
            </div>
          </BigSection>
        </div>
        <BigSection>
          <div className="flex flex-col pt-24 pb-10 lg:flex-row lg:gap-10 items-start justify-between">
            <div className="grow w-full">
              <SignupForm />
              <div className="text-slate-500 mb-1 text-sm font-bold">
                What is Ably?
              </div>
              <AboutSection>
                <AboutContentSection>
                  <AboutTitle>
                    <div className="flex items-center gap-2">
                      <IconInfoCircle size="1rem" className="text-slate-400" />
                      <div>About Ably</div>
                    </div>
                  </AboutTitle>
                  <p>{metaDescription}</p>
                </AboutContentSection>
                <AboutTitle>
                  <div className="flex items-center gap-2">
                    <IconApi size="1rem" className="text-slate-400" />
                    <div>About Ably's API</div>
                  </div>
                </AboutTitle>
                <Description />
              </AboutSection>
              <div className="text-slate-500 mb-1 text-sm font-bold">
                Integrating Ably's TypeScript SDK
              </div>
              <AboutSection>
                <AboutContentSection>
                  <AboutTitle>
                    <div className="flex items-center gap-2 mb-[-12px]">
                      <IconPlayerPlay size="1rem" className="text-slate-300" />
                      <div>SDK Initialization</div>
                    </div>
                  </AboutTitle>
                  <GettingStarted />
                </AboutContentSection>
                <AboutTitle>
                  <div className="flex items-center gap-2">
                    <IconCodeDots size="1rem" className="text-slate-300" />
                    <div>SDK Methods</div>
                  </div>
                </AboutTitle>
                <div className="space-y-4">
                  <SdkMethod
                    method="ably.status.getMetadataOfAllChannels"
                    url="https://rest.ably.io/channels"
                    description="Enumerate all active channels of the application"
                    httpMethod={HttpMethodsEnum.GET}
                  />
                  <SdkMethod
                    method="ably.publishing.publishMessagesToChannel"
                    url="https://rest.ably.io/channels/{channel_id}/messages"
                    description="Publish a message to the specified channel"
                    httpMethod={HttpMethodsEnum.POST}
                  />
                  <SdkMethod
                    method="ably.push.deletePushDeviceDetails"
                    url="https://rest.ably.io/push/channelSubscriptions"
                    description="Delete a device details object."
                    httpMethod={HttpMethodsEnum.DELETE}
                  />
                </div>
              </AboutSection>
            </div>
            <Sidebar />
          </div>
        </BigSection>
      </div>
    </Layout>
  );
}

function AboutContentSection({ children }: PropsWithChildren<{}>) {
  return <div className="mb-10">{children}</div>;
}

function SdkMethod({
  method,
  url,
  httpMethod,
  description,
}: {
  method: string;
  url: string;
  httpMethod: HttpMethods;
  description: string;
}) {
  const color = httpMethodColor(httpMethod);
  return (
    <div
      className={clsx(
        "ring-1 rounded-md block w-full overflow-x-auto px-3 py-2",
        {
          "ring-green-100 bg-green-50/20": color === "green",
          "ring-blue-100 bg-blue-50/20": color === "blue",
          "ring-red-100 bg-red-50/20": color === "red",
          "ring-yellow-100 bg-yellow-50/20": color === "yellow",
          "ring-slate-100 bg-slate-50/20": color === "slate",
        }
      )}
    >
      <div className="flex w-fit gap-2">
        <IconBraces
          className={clsx("shrink-0 h-4", {
            "text-green-400": color === "green",
            "text-blue-400": color === "blue",
            "text-red-400": color === "red",
            "text-yellow-400": color === "yellow",
            "text-slate-400": color === "slate",
          })}
        />
        <div>
          <div
            className={clsx(
              "font-bold whitespace-nowrap mb-1 text-xs lg:text-sm font-mono",
              {
                "text-green-800": color === "green",
                "text-blue-800": color === "blue",
                "text-red-800": color === "red",
                "text-yellow-800": color === "yellow",
                "text-slate-800": color === "slate",
              }
            )}
          >
            {`${method}()`}
          </div>
          <div className="flex items-center gap-2 mb-3">
            <div
              className={clsx("font-medium font-mono text-xs", {
                "text-green-500": color === "green",
                "text-blue-500": color === "blue",
                "text-red-500": color === "red",
                "text-yellow-500": color === "yellow",
                "text-slate-500": color === "slate",
              })}
            >
              {url}
            </div>
            <HttpMethodBadge httpMethod={httpMethod} />
          </div>
          <p
            className={clsx("text-xs lg:text-sm mb-0", {
              "text-green-700": color === "green",
              "text-blue-700": color === "blue",
              "text-red-700": color === "red",
              "text-yellow-700": color === "yellow",
              "text-slate-700": color === "slate",
            })}
          >
            {description}
          </p>
        </div>
      </div>
    </div>
  );
}

function BigSection({ children }: PropsWithChildren<{}>) {
  return (
    <div className="mx-4 lg:mx-auto lg:w-[960px] xl:w-[1152px]">{children}</div>
  );
}

function AboutSection({ children }: PropsWithChildren<{}>) {
  return (
    <div className="mb-10 ring-1 ring-slate-200 bg-white rounded-md shadow-md p-8">
      {children}
    </div>
  );
}

function AboutTitle({ children }: PropsWithChildren<{}>) {
  return <h3 className="text-slate-500 uppercase text-xs mb-2">{children}</h3>;
}

function SignupForm() {
  return (
    <form
      id="signup"
      className="p-8 rounded-md bg-emerald-50 ring-1 ring-emerald-300 transition-all hover:scale-[1.01] hover:shadow-lg shadow-md mb-8"
    >
      <div className="flex flex-col">
        <h2 className="text-xl text-emerald-900 font-bold mb-3">
          Need a TypeScript SDK for Ably's API?
        </h2>
        <input
          type="email"
          pattern="[^@\s]+@[^@\s]+"
          name="email"
          autoFocus
          className="border rounded-md px-2 py-1 w-full mb-2"
          placeholder="Email"
        />
        <button
          type="submit"
          className="font-medium group flex gap-3 hover:gap-2 items-center transition-all bg-gradient-to-br text-white w-fit text-center px-3 py-2 from-emerald-600 to-emerald-800 rounded-md text-sm"
        >
          <div>Sign up for access to Ably's TypeScript SDK</div>
          <IconPencil
            size="1rem"
            className="transition-all group-hover:text-emerald-50 text-emerald-300"
          />
        </button>
      </div>
    </form>
  );
}

function Sidebar() {
  return (
    <div className="top-20 sticky w-full lg:w-fit">
      <div className="flex gap-1 items-center mb-1">
        <IconInfoCircle className="h-4 shrink-0 text-slate-400" />
        <div className="text-slate-500 text-sm font-bold">More Info</div>
      </div>
      <div className="bg-white ring-1 ring-slate-200 shadow-md p-8 lg:py-4 lg:px-6 rounded-md">
        <SidebarSection>
          <SidebarSectionTitle>API Title</SidebarSectionTitle>
          <SidebarSectionContent>Platform API</SidebarSectionContent>
        </SidebarSection>
        <SidebarSection>
          <SidebarSectionTitle>API Base URL</SidebarSectionTitle>
          <SidebarSectionContent>
            <a href="https://rest.ably.io" target="_blank">
              https://rest.ably.io
            </a>
          </SidebarSectionContent>
        </SidebarSection>
        <SidebarSection>
          <SidebarSectionTitle>API Version</SidebarSectionTitle>
          <SidebarSectionContent>1.1.14</SidebarSectionContent>
        </SidebarSection>
        <SidebarSection>
          <div className="flex justify-between">
            <div className="w-1/2">
              <SidebarSectionTitle>Endpoints</SidebarSectionTitle>
              <SidebarSectionContent>14</SidebarSectionContent>
            </div>
            <div className="w-1/2">
              <SidebarSectionTitle>SDK Methods</SidebarSectionTitle>
              <SidebarSectionContent>36</SidebarSectionContent>
            </div>
          </div>
        </SidebarSection>
        <SidebarSection noBorder>
          <div className="flex justify-between">
            <div className="w-1/2">
              <SidebarSectionTitle>Schemas</SidebarSectionTitle>
              <SidebarSectionContent>14</SidebarSectionContent>
            </div>
            <div className="w-1/2">
              <SidebarSectionTitle>Parameters</SidebarSectionTitle>
              <SidebarSectionContent>42</SidebarSectionContent>
            </div>
          </div>
        </SidebarSection>
        <SidebarSection>
          <SidebarSectionTitle>
            <div className="flex items-end gap-1">
              <div>Difficulty</div>
              <a
                target="_blank"
                href="/sdk-difficulty"
                className="text-xs font-normal lowercase"
              >
                (What is this?)
              </a>
            </div>
          </SidebarSectionTitle>
          <SidebarSectionContent>
            <div className="text-red-500">Hard</div>
          </SidebarSectionContent>
        </SidebarSection>
        <SidebarSection>
          <SidebarSectionTitle>Homepage</SidebarSectionTitle>
          <SidebarSectionContent>
            <a href="https://ably.com/" target="_blank">
              https://ably.com/
            </a>
          </SidebarSectionContent>
        </SidebarSection>
        <SidebarSection>
          <SidebarSectionTitle>Contact URL</SidebarSectionTitle>
          <SidebarSectionContent>
            <a href="https://www.ably.io/contact" target="_blank">
              https://www.ably.io/contact
            </a>
          </SidebarSectionContent>
        </SidebarSection>
        <SidebarSection>
          <SidebarSectionTitle>Contact Email</SidebarSectionTitle>
          <SidebarSectionContent>
            <a href="mailto:support@ably.io">support@ably.io</a>
          </SidebarSectionContent>
        </SidebarSection>
        <SidebarSection>
          <SidebarSectionTitle>OpenAPI Specification</SidebarSectionTitle>
          <SidebarSectionContent>
            <a
              href={`https://elements-demo.stoplight.io/?spec=https://raw.githubusercontent.com/ably/open-specs/main/definitions/platform-v1.yaml`}
              target="_blank"
            >
              Link
            </a>
          </SidebarSectionContent>
        </SidebarSection>
      </div>
    </div>
  );
}

function SidebarSection({
  children,
  noBorder,
}: PropsWithChildren<{ noBorder?: boolean }>) {
  return <div className={clsx("py-2 lg:py-3 mb-1")}>{children}</div>;
}

function SidebarSectionTitle({
  children,
  large,
}: PropsWithChildren<{ large?: boolean }>) {
  return (
    <h3
      className={clsx("mb-1 text-slate-500 uppercase text-xs", {
        "text-lg text-black": large,
      })}
    >
      {children}
    </h3>
  );
}

function SidebarSectionContent({ children }: PropsWithChildren<{}>) {
  return <div className="text font-semibold">{children}</div>;
}

function Dot() {
  return <div className="h-[3px] w-[3px] bg-slate-300 rounded-full" />;
}

function TsIcon(props: React.ComponentProps<"svg">) {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" {...props}>
      <path fill="#1976d2" d="M6 6h36v36H6z" />
      <path
        fill="#fff"
        d="M27.49 22H14.227v3.264h4.757V40h3.769V25.264h4.737zM39.194 26.084s-1.787-1.192-3.807-1.192-2.747.96-2.747 1.986c0 2.648 7.381 2.383 7.381 7.712 0 8.209-11.254 4.568-11.254 4.568V35.22s2.152 1.622 4.733 1.622 2.483-1.688 2.483-1.92c0-2.449-7.315-2.449-7.315-7.878 0-7.381 10.658-4.469 10.658-4.469l-.132 3.509z"
      />
    </svg>
  );
}

export function HttpMethodBadge({ httpMethod }: { httpMethod: HttpMethods }) {
  const color = httpMethodColor(httpMethod);
  return (
    <div
      className={clsx("px-2 text-xs rounded-xl uppercase font-semibold", {
        "bg-green-100 text-green-700 border border-green-300":
          color === "green",
        "bg-blue-100 text-blue-700 border border-blue-300": color === "blue",
        "bg-red-100 text-red-700 border border-red-300": color === "red",
        "bg-yellow-100 text-yellow-700 border border-yellow-300":
          color === "yellow",
        "bg-slate-100 text-slate-700 border border-slate-300":
          color === "slate",
      })}
    >
      {httpMethod}
    </div>
  );
}

function httpMethodColor(
  method: HttpMethods
): "green" | "blue" | "red" | "yellow" | "slate" {
  if (method === HttpMethodsEnum.GET) return "green";
  if (method === HttpMethodsEnum.POST) return "blue";
  if (method === HttpMethodsEnum.PUT) return "blue";
  if (method === HttpMethodsEnum.DELETE) return "red";
  if (method === HttpMethodsEnum.PATCH) return "yellow";
  if (method === HttpMethodsEnum.OPTIONS) return "yellow";
  if (method === HttpMethodsEnum.TRACE) return "yellow";
  return "slate";
}
