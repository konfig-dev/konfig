// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`deeply nested objects with file 1`] = `
"from pprint import pprint
from groundx import Groundx

groundx = Groundx(
    api_key="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
)

response = groundx.documents.upload_local([{
    "blob": open("file.txt", "rb"),
    "metadata": {
        "bucketId": 321,
        "fileName": "321",
        "fileType": "docx"
    }
}])
pprint(response.body)"
`;

exports[`example with boolean 1`] = `
"from pprint import pprint
from snaptrade_client import SnapTrade

snaptrade = SnapTrade(
    client_id="XXX",
    consumer_key="XXX"
)

response = snaptrade.authentication.login_snap_trade_user(
    user_id="321",
    user_secret="321",
    broker="fda",
    immediate_redirect=True
)
pprint(response.body)"
`;

exports[`example with inner object 1`] = `
"from pprint import pprint
from snaptrade_client import SnapTrade

snaptrade = SnapTrade(
    client_id="XXX",
    consumer_key="XXX"
)

response = snaptrade.options.get_option_strategy(
    account_id="fda321",
    user_id="321",
    user_secret="321",
    underlying_symbol_id="321",
    legs=[
        {
            "action": "SELL_TO_CLOSE",
            "option_symbol_id": "fda",
            "quantity": 321
        },
        {
            "action": "BUY_TO_OPEN",
            "option_symbol_id": "fda",
            "quantity": 1
        }
    ],
    strategy_type="CUSTOM"
)
pprint(response.body)"
`;

exports[`example with no form data but > 1 parameters 1`] = `
"from pprint import pprint
from snaptrade_client import SnapTrade

snaptrade = SnapTrade()

response = snaptrade.options.get_option_strategy()
pprint(response.body)"
`;

exports[`example with no setup 1`] = `
"from pprint import pprint
from snaptrade_client import SnapTrade

snaptrade = SnapTrade()

response = snaptrade.options.get_option_strategy()
pprint(response.body)"
`;

exports[`nested object property names should not be converted to snake_case 1`] = `
"from pprint import pprint
from groundx import Groundx

groundx = Groundx(
    api_key="api_key"
)

response = groundx.documents.upload_local([{
    "metadata": {
        "bucketId": 321321
    }
}])
pprint(response.body)"
`;

exports[`nested objects does not have empty properties 1`] = `
"from pprint import pprint
from groundx import Groundx

groundx = Groundx(
    api_key="XXXXX"
)

response = groundx.documents.upload_remote(
    documents=[
        {
            "bucketId": 1
        }
    ]
)
pprint(response.body)"
`;

exports[`request body with blob values 1`] = `
"from pprint import pprint
from groundx import Groundx

groundx = Groundx(
    api_key="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
)

response = groundx.documents.upload_local([{
    "blob": open("file_1.txt", "rb"),
    "metadata": {
        "bucketId": 321,
        "fileName": "321",
        "fileType": "txt",
        "callbackData": "321",
        "callbackUrl": "3213"
    }
}, {
    "blob": open("file_2.txt", "rb"),
    "metadata": {
        "bucketId": 321,
        "fileName": "321",
        "fileType": "txt"
    }
}])
pprint(response.body)"
`;

exports[`simple example 1`] = `
"from pprint import pprint
from snaptrade_client import SnapTrade

snaptrade = SnapTrade(
    client_id="XXX",
    consumer_key="XXX"
)

response = snaptrade.api_status.check()
pprint(response.body)"
`;

exports[`simple parameters example 1`] = `
"from pprint import pprint
from snaptrade_client import SnapTrade

snaptrade = SnapTrade(
    client_id="XXX",
    consumer_key="XXX"
)

response = snaptrade.authentication.register_snap_trade_user(
    user_id="321"
)
pprint(response.body)"
`;
