# coding: utf-8

"""
    FastAPI

    Arbitrarily execute Python code in IPython

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

import unittest
from unittest.mock import patch

from python_rce import PythonRce, Configuration
from pprint import pprint


class TestSessionsCreate(unittest.TestCase):
    """
    SessionsCreate unit test stubs
        Create Session
    """

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_simple(self):
        api = PythonRce(Configuration())
        session_create_response = api.session.create()
        print(session_create_response.body)
        session_id = session_create_response.body["session_id"]
        r1 = api.session.execute(session_id=session_id, code="test = 2")
        pprint(r1.body)
        r1 = api.session.execute(session_id=session_id, code="print(test)")
        pprint(r1.body)

    def test_pprint(self):
        api = PythonRce(Configuration())
        session_create_response = api.session.create()
        print(session_create_response.body)
        session_id = session_create_response.body["session_id"]
        r1 = api.session.execute(
            session_id=session_id, code="from pprint import pprint"
        )
        pprint(r1.body)
        r2 = api.session.execute(session_id=session_id, code="test = {1: 2}")
        pprint(r2.body)
        r3 = api.session.execute(session_id=session_id, code="pprint(test)")
        pprint(r3.body)

    def test_async(self):
        api = PythonRce(Configuration())
        session_create_response = api.session.create()
        print(session_create_response.body)
        session_id = session_create_response.body["session_id"]
        r = api.session.execute(
            session_id=session_id,
            code="""%autoawait""",
        )
        pprint(r.body)
        r1 = api.session.execute(
            session_id=session_id,
            code="""import aiohttp
from pprint import pprint
session = aiohttp.ClientSession()
result = session.get('https://api.github.com')
response = await result
pprint(await response.json())
            """,
        )
        pprint(r1.body)

    def test_kernels_do_not_have_access_to_each_others_memory(self):
        api = PythonRce(Configuration())
        s1 = api.session.create()
        s2 = api.session.create()
        api.session.execute(session_id=s1.body["session_id"], code="test = 2")
        r2 = api.session.execute(session_id=s2.body["session_id"], code="test")
        assert r2.body["error"] == "name 'test' is not defined"

    def test_setting_environment_variable(self):
        api = PythonRce(Configuration())
        s1 = api.session.create()
        api.session.execute(
            session_id=s1.body["session_id"],
            code="%set_env TEST=HELLO_WORLD",
        )
        r = api.session.execute(
            session_id=s1.body["session_id"],
            code="%env TEST",
        )
        assert "'HELLO_WORLD'\n" == r.body["output"]

    def test_snaptrade_getting_started(self):
        api = PythonRce(Configuration())
        snippets = [
            """from snaptrade_client import SnapTrade
from pprint import pprint
import uuid
import os
        """,
            """snaptrade = SnapTrade(
    consumer_key=os.environ["SNAPTRADE_CONSUMER_KEY"],
    client_id=os.environ["SNAPTRADE_CLIENT_ID"],
)

print("Successfully initiated client")
""",
            """api_response = snaptrade.api_status.check()
pprint(api_response.body)""",
            """user_id = str(uuid.uuid4())
register_response = snaptrade.authentication.register_snap_trade_user(
    user_id=user_id
)
pprint(register_response.body)

# Note: A user secret is only generated once. It's required to access
# resources for certain endpoints.
user_secret = register_response.body["userSecret"]""",
            """redirect_uri = snaptrade.authentication.login_snap_trade_user(
  user_id=user_id, user_secret=user_secret
)
print(redirect_uri.body)
""",
            """holdings = snaptrade.account_information.get_all_user_holdings(
    user_id=user_id, user_secret=user_secret
)
pprint(holdings.body)""",
            """deleted_response = snaptrade.authentication.delete_snap_trade_user(
    user_id=user_id
)
pprint(deleted_response.body)""",
        ]
        s = api.session.create()
        for snippet in snippets:
            r = api.session.execute(session_id=s.body["session_id"], code=snippet)
            assert r.body["result"] == "Success"
            pprint(r.body)


if __name__ == "__main__":
    unittest.main()
