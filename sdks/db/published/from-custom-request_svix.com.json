{
  "securitySchemes": {
    "HTTPBearer": {
      "type": "http",
      "scheme": "bearer",
      "bearerFormat": null,
      "description": "HTTP Bearer token passed in the `Authorization` header"
    }
  },
  "apiBaseUrl": "https://api.eu.svix.com/",
  "apiVersion": "1.21.0",
  "apiDescription": "Welcome to the Svix API documentation!\n\nUseful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)\n\n# Introduction\n\nThis is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).\n\n## Main concepts\n\nIn Svix you have four important entities you will be interacting with:\n\n- `messages`: these are the webhooks being sent. They can have contents and a few other properties.\n- `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform.\n- `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type).\n- `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.\n\n\n## Authentication\n\nGet your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).\n\n\n\n\n## Code samples\n\nThe code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).\n\n\n## Idempotency\n\nSvix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.\n\nTo perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.\n\nSvix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result for a period of up to 12 hours.\n\nPlease note that idempotency is only supported for `POST` requests.\n\n\n## Cross-Origin Resource Sharing\n\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n",
  "apiTitle": "Svix API",
  "endpoints": 40,
  "sdkMethods": 59,
  "schemas": 120,
  "parameters": 267,
  "originalCustomRequest": {
    "lambda": true
  },
  "customRequestSpecFilename": "svix.com.yaml",
  "difficultyScore": 185.75,
  "difficulty": "Medium",
  "company": "Svix",
  "sdkName": "svix-{language}-sdk",
  "clientName": "Svix",
  "metaDescription": "Svix is a platform that simplifies webhook processing for developers. By providing a reliable infrastructure and powerful tools, Svix enables developers to easily send and receive webhooks, ensuring seamless communication between services and applications.",
  "homepage": "svix.com",
  "categories": [
    "webhooks",
    "notifications",
    "automation",
    "developer_tools"
  ],
  "category": "Developer Tools",
  "methods": [
    {
      "url": "/api/v1/auth/app-portal-access/{app_id}",
      "method": "generateMagicLinks",
      "httpMethod": "post",
      "tag": "Authentication",
      "typeScriptTag": "authentication",
      "description": "Get Consumer App Portal Access",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "idempotencyKey",
          "schema": "string",
          "description": "The request's idempotency key"
        },
        {
          "name": "featureFlags",
          "schema": "array",
          "description": "",
          "example": []
        },
        {
          "name": "expiry",
          "schema": "integer",
          "description": "",
          "default": 604800
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/auth/dashboard-access/{app_id}",
      "method": "getMagicLinks",
      "httpMethod": "post",
      "tag": "Authentication",
      "typeScriptTag": "authentication",
      "description": "Dashboard Access",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "idempotencyKey",
          "schema": "string",
          "description": "The request's idempotency key"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/auth/logout",
      "method": "logoutToken",
      "httpMethod": "post",
      "tag": "Authentication",
      "typeScriptTag": "authentication",
      "description": "Logout",
      "parameters": [
        {
          "name": "idempotencyKey",
          "schema": "string",
          "description": "The request's idempotency key"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "no content"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/auth/app/{app_id}/expire-all",
      "method": "expireAllTokens",
      "httpMethod": "post",
      "tag": "Authentication",
      "typeScriptTag": "authentication",
      "description": "Expire All",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "idempotencyKey",
          "schema": "string",
          "description": "The request's idempotency key"
        },
        {
          "name": "expiry",
          "schema": "integer",
          "description": "",
          "example": 60
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "no content"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app",
      "method": "listAll",
      "httpMethod": "get",
      "tag": "Application",
      "typeScriptTag": "application",
      "description": "List Applications",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "Limit the number of returned items"
        },
        {
          "name": "iterator",
          "schema": "string",
          "description": "The iterator returned from a prior invocation",
          "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2"
        },
        {
          "name": "order",
          "schema": "string",
          "description": "The sorting order of the returned items"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app",
      "method": "createNewApplication",
      "httpMethod": "post",
      "tag": "Application",
      "typeScriptTag": "application",
      "description": "Create Application",
      "parameters": [
        {
          "name": "getIfExists",
          "schema": "boolean",
          "description": "Get an existing application, or create a new one if doesn't exist. It's two separate functions in the libs.",
          "default": false
        },
        {
          "name": "idempotencyKey",
          "schema": "string",
          "description": "The request's idempotency key"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "My first application"
        },
        {
          "name": "rateLimit",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "uid",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "unique-app-identifier"
        },
        {
          "name": "metadata",
          "schema": "object",
          "required": false,
          "description": "",
          "default": {}
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}",
      "method": "removeApp",
      "httpMethod": "delete",
      "tag": "Application",
      "typeScriptTag": "application",
      "description": "Delete Application",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "no content"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Application",
      "typeScriptTag": "application",
      "description": "Get Application",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}",
      "method": "partiallyUpdate",
      "httpMethod": "patch",
      "tag": "Application",
      "typeScriptTag": "application",
      "description": "Patch Application",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "rateLimit",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "uid",
          "schema": "string",
          "description": "",
          "example": "unique-app-identifier"
        },
        {
          "name": "metadata",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}",
      "method": "updateApplicationById",
      "httpMethod": "put",
      "tag": "Application",
      "typeScriptTag": "application",
      "description": "Update Application",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "My first application"
        },
        {
          "name": "rateLimit",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "uid",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "unique-app-identifier"
        },
        {
          "name": "metadata",
          "schema": "object",
          "required": false,
          "description": "",
          "default": {}
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/endpoint",
      "method": "listEndpoints",
      "httpMethod": "get",
      "tag": "Endpoint",
      "typeScriptTag": "endpoint",
      "description": "List Endpoints",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Limit the number of returned items"
        },
        {
          "name": "iterator",
          "schema": "string",
          "description": "The iterator returned from a prior invocation",
          "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
        },
        {
          "name": "order",
          "schema": "string",
          "description": "The sorting order of the returned items"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/endpoint",
      "method": "createOrUpdate",
      "httpMethod": "post",
      "tag": "Endpoint",
      "typeScriptTag": "endpoint",
      "description": "Create Endpoint",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "idempotencyKey",
          "schema": "string",
          "description": "The request's idempotency key"
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "An example endpoint name",
          "default": ""
        },
        {
          "name": "version",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1,
          "default": 1
        },
        {
          "name": "rateLimit",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "uid",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "unique-ep-identifier"
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "https://example.com/webhook/"
        },
        {
          "name": "disabled",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false,
          "default": false
        },
        {
          "name": "filterTypes",
          "schema": "array",
          "required": false,
          "description": "",
          "example": [
            "user.signup",
            "user.deleted"
          ]
        },
        {
          "name": "channels",
          "schema": "array",
          "required": false,
          "description": "",
          "example": [
            "project_123",
            "group_2"
          ]
        },
        {
          "name": "secret",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
        },
        {
          "name": "metadata",
          "schema": "object",
          "required": false,
          "description": "",
          "default": {}
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/endpoint/{endpoint_id}",
      "method": "remove",
      "httpMethod": "delete",
      "tag": "Endpoint",
      "typeScriptTag": "endpoint",
      "description": "Delete Endpoint",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "no content"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/endpoint/{endpoint_id}",
      "method": "getDetails",
      "httpMethod": "get",
      "tag": "Endpoint",
      "typeScriptTag": "endpoint",
      "description": "Get Endpoint",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/endpoint/{endpoint_id}",
      "method": "partiallyUpdate",
      "httpMethod": "patch",
      "tag": "Endpoint",
      "typeScriptTag": "endpoint",
      "description": "Patch Endpoint",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "version",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "rateLimit",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "uid",
          "schema": "string",
          "description": "",
          "example": "unique-ep-identifier"
        },
        {
          "name": "url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "disabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "filterTypes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "channels",
          "schema": "array",
          "description": ""
        },
        {
          "name": "secret",
          "schema": "string",
          "description": "",
          "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
        },
        {
          "name": "metadata",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/endpoint/{endpoint_id}",
      "method": "updateEndpointById",
      "httpMethod": "put",
      "tag": "Endpoint",
      "typeScriptTag": "endpoint",
      "description": "Update Endpoint",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "An example endpoint name",
          "default": ""
        },
        {
          "name": "version",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1,
          "default": 1
        },
        {
          "name": "rateLimit",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "uid",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "unique-ep-identifier"
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "https://example.com/webhook/"
        },
        {
          "name": "disabled",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false,
          "default": false
        },
        {
          "name": "filterTypes",
          "schema": "array",
          "required": false,
          "description": "",
          "example": [
            "user.signup",
            "user.deleted"
          ]
        },
        {
          "name": "channels",
          "schema": "array",
          "required": false,
          "description": "",
          "example": [
            "project_123",
            "group_2"
          ]
        },
        {
          "name": "metadata",
          "schema": "object",
          "required": false,
          "description": "",
          "default": {}
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret",
      "method": "getSigningSecret",
      "httpMethod": "get",
      "tag": "Endpoint",
      "typeScriptTag": "endpoint",
      "description": "Get Endpoint Secret",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate",
      "method": "rotateSecret",
      "httpMethod": "post",
      "tag": "Endpoint",
      "typeScriptTag": "endpoint",
      "description": "Rotate Endpoint Secret",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        },
        {
          "name": "idempotencyKey",
          "schema": "string",
          "description": "The request's idempotency key"
        },
        {
          "name": "key",
          "schema": "string",
          "description": "",
          "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
          "default": null
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "no content"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers",
      "method": "getHeaders",
      "httpMethod": "get",
      "tag": "Endpoint",
      "typeScriptTag": "endpoint",
      "description": "Get Endpoint Headers",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The value of the headers is returned in the `headers` field.\n\nSensitive headers that have been redacted are returned in the sensitive field."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers",
      "method": "partiallySetHeaders",
      "httpMethod": "patch",
      "tag": "Endpoint",
      "typeScriptTag": "endpoint",
      "description": "Patch Endpoint Headers",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        },
        {
          "name": "headers",
          "schema": "object",
          "required": true,
          "description": "",
          "example": {
            "X-Example": "123",
            "X-Foobar": "Bar"
          }
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "no content"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers",
      "method": "setWebhookHeaders",
      "httpMethod": "put",
      "tag": "Endpoint",
      "typeScriptTag": "endpoint",
      "description": "Update Endpoint Headers",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        },
        {
          "name": "headers",
          "schema": "object",
          "required": true,
          "description": "",
          "example": {
            "X-Example": "123",
            "X-Foobar": "Bar"
          }
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "no content"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing",
      "method": "replayMissingWebhooks",
      "httpMethod": "post",
      "tag": "Endpoint",
      "typeScriptTag": "endpoint",
      "description": "Replay Missing Webhooks",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        },
        {
          "name": "idempotencyKey",
          "schema": "string",
          "description": "The request's idempotency key"
        },
        {
          "name": "since",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "SINCE"
        },
        {
          "name": "until",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation",
      "method": "getTransformationCode",
      "httpMethod": "get",
      "tag": "Endpoint",
      "typeScriptTag": "endpoint",
      "description": "Get Endpoint Transformation",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation",
      "method": "setTransformationCode",
      "httpMethod": "patch",
      "tag": "Endpoint",
      "typeScriptTag": "endpoint",
      "description": "Set Endpoint Transformation",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        },
        {
          "name": "code",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "no content"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats",
      "method": "getStatistics",
      "httpMethod": "get",
      "tag": "Endpoint",
      "typeScriptTag": "endpoint",
      "description": "Endpoint Stats",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        },
        {
          "name": "since",
          "schema": "string",
          "description": "Filter the range to data starting from this date"
        },
        {
          "name": "until",
          "schema": "string",
          "description": "Filter the range to data ending by this date"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover",
      "method": "resendFailedMessages",
      "httpMethod": "post",
      "tag": "Endpoint",
      "typeScriptTag": "endpoint",
      "description": "Recover Failed Webhooks",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        },
        {
          "name": "idempotencyKey",
          "schema": "string",
          "description": "The request's idempotency key"
        },
        {
          "name": "since",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "SINCE"
        },
        {
          "name": "until",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example",
      "method": "sendExampleMessageType",
      "httpMethod": "post",
      "tag": "Endpoint",
      "typeScriptTag": "endpoint",
      "description": "Send Event Type Example Message",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        },
        {
          "name": "idempotencyKey",
          "schema": "string",
          "description": "The request's idempotency key"
        },
        {
          "name": "eventType",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "user.signup"
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/event-type",
      "method": "list",
      "httpMethod": "get",
      "tag": "Event Type",
      "typeScriptTag": "eventType",
      "description": "List Event Types",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "Limit the number of returned items"
        },
        {
          "name": "iterator",
          "schema": "string",
          "description": "The iterator returned from a prior invocation",
          "example": "user.signup"
        },
        {
          "name": "order",
          "schema": "string",
          "description": "The sorting order of the returned items"
        },
        {
          "name": "includeArchived",
          "schema": "boolean",
          "description": "When `true` archived (deleted but not expunged) items are included in the response",
          "default": false
        },
        {
          "name": "withContent",
          "schema": "boolean",
          "description": "When `true` the full item (including the schema) is included in the response",
          "default": false
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/event-type",
      "method": "createOrUpdate",
      "httpMethod": "post",
      "tag": "Event Type",
      "typeScriptTag": "eventType",
      "description": "Create Event Type",
      "parameters": [
        {
          "name": "idempotencyKey",
          "schema": "string",
          "description": "The request's idempotency key"
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "A user has signed up"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "user.signup"
        },
        {
          "name": "archived",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false,
          "default": false
        },
        {
          "name": "schemas",
          "schema": "object",
          "required": false,
          "description": "",
          "example": {
            "1": {
              "title": "Invoice Paid Event",
              "description": "An invoice was paid by a user",
              "properties": {
                "invoiceId": {
                  "description": "The invoice id",
                  "type": "string"
                },
                "userId": {
                  "description": "The user id",
                  "type": "string"
                }
              },
              "required": [
                "invoiceId",
                "userId"
              ],
              "type": "object"
            }
          }
        },
        {
          "name": "featureFlag",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "cool-new-feature"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/event-type/import/openapi",
      "method": "importFromOpenapi",
      "httpMethod": "post",
      "tag": "Event Type",
      "typeScriptTag": "eventType",
      "description": "Event Type Import From Openapi",
      "parameters": [
        {
          "name": "idempotencyKey",
          "schema": "string",
          "description": "The request's idempotency key"
        },
        {
          "name": "spec",
          "schema": "object",
          "description": "",
          "example": {
            "openapi": "3.1.0",
            "info": {
              "title": "Webhook Example",
              "version": "1.0.0"
            },
            "webhooks": {
              "pet.new": {
                "post": {
                  "requestBody": {
                    "description": "Information about a new pet in the system",
                    "content": {
                      "application/json": {
                        "schema": {
                          "properties": {
                            "id": {
                              "format": "int64",
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tag": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "name"
                          ]
                        }
                      }
                    }
                  },
                  "responses": {
                    "200": {
                      "description": "Return a 200 status to indicate that the data was received successfully"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "specRaw",
          "schema": "string",
          "description": "",
          "example": {
            "openapi": "3.1.0",
            "info": {
              "title": "Webhook Example",
              "version": "1.0.0"
            },
            "webhooks": {
              "pet.new": {
                "post": {
                  "requestBody": {
                    "description": "Information about a new pet in the system",
                    "content": {
                      "application/json": {
                        "schema": {
                          "properties": {
                            "id": {
                              "format": "int64",
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tag": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "name"
                          ]
                        }
                      }
                    }
                  },
                  "responses": {
                    "200": {
                      "description": "Return a 200 status to indicate that the data was received successfully"
                    }
                  }
                }
              }
            }
          }
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/event-type/{event_type_name}",
      "method": "archive",
      "httpMethod": "delete",
      "tag": "Event Type",
      "typeScriptTag": "eventType",
      "description": "Delete Event Type",
      "parameters": [
        {
          "name": "eventTypeName",
          "schema": "string",
          "required": true,
          "description": "The event type's name",
          "example": "user.signup"
        },
        {
          "name": "expunge",
          "schema": "boolean",
          "description": "By default event types are archived when \"deleted\". Passing this to `true` deletes them entirely.",
          "default": false
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "no content"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/event-type/{event_type_name}",
      "method": "getEventType",
      "httpMethod": "get",
      "tag": "Event Type",
      "typeScriptTag": "eventType",
      "description": "Get Event Type",
      "parameters": [
        {
          "name": "eventTypeName",
          "schema": "string",
          "required": true,
          "description": "The event type's name",
          "example": "user.signup"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/event-type/{event_type_name}",
      "method": "partiallyUpdateEventType",
      "httpMethod": "patch",
      "tag": "Event Type",
      "typeScriptTag": "eventType",
      "description": "Patch Event Type",
      "parameters": [
        {
          "name": "eventTypeName",
          "schema": "string",
          "required": true,
          "description": "The event type's name",
          "example": "user.signup"
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "archived",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "schemas",
          "schema": "object",
          "description": "",
          "example": {
            "title": "Invoice Paid Event",
            "description": "An invoice was paid by a user",
            "properties": {
              "invoiceId": {
                "description": "The invoice id",
                "type": "string"
              },
              "userId": {
                "description": "The user id",
                "type": "string"
              }
            },
            "required": [
              "invoiceId",
              "userId"
            ],
            "type": "object"
          }
        },
        {
          "name": "featureFlag",
          "schema": "string",
          "description": "",
          "example": "cool-new-feature"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/event-type/{event_type_name}",
      "method": "updateEventTypeName",
      "httpMethod": "put",
      "tag": "Event Type",
      "typeScriptTag": "eventType",
      "description": "Update Event Type",
      "parameters": [
        {
          "name": "eventTypeName",
          "schema": "string",
          "required": true,
          "description": "The event type's name",
          "example": "user.signup"
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "A user has signed up"
        },
        {
          "name": "archived",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false,
          "default": false
        },
        {
          "name": "schemas",
          "schema": "object",
          "required": false,
          "description": "",
          "example": {
            "1": {
              "title": "Invoice Paid Event",
              "description": "An invoice was paid by a user",
              "properties": {
                "invoiceId": {
                  "description": "The invoice id",
                  "type": "string"
                },
                "userId": {
                  "description": "The user id",
                  "type": "string"
                }
              },
              "required": [
                "invoiceId",
                "userId"
              ],
              "type": "object"
            }
          }
        },
        {
          "name": "featureFlag",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "cool-new-feature"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/msg",
      "method": "listAllMessages",
      "httpMethod": "get",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "List Messages",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Limit the number of returned items"
        },
        {
          "name": "iterator",
          "schema": "string",
          "description": "The iterator returned from a prior invocation",
          "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
        },
        {
          "name": "channel",
          "schema": "string",
          "description": "Filter response based on the channel",
          "example": "project_1337"
        },
        {
          "name": "before",
          "schema": "string",
          "description": "Only include items created before a certain date"
        },
        {
          "name": "after",
          "schema": "string",
          "description": "Only include items created after a certain date"
        },
        {
          "name": "withContent",
          "schema": "boolean",
          "description": "When `true` message payloads are included in the response",
          "default": true
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Filter messages matching the provided tag",
          "example": "project_1337"
        },
        {
          "name": "eventTypes",
          "schema": "array",
          "description": "Filter response based on the event type"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/msg",
      "method": "createNewMsg",
      "httpMethod": "post",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "Create Message",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "withContent",
          "schema": "boolean",
          "description": "When `true` message payloads are included in the response",
          "default": true
        },
        {
          "name": "idempotencyKey",
          "schema": "string",
          "description": "The request's idempotency key"
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": "",
          "example": [
            "my_tag",
            "other"
          ]
        },
        {
          "name": "eventId",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "unique-msg-identifier"
        },
        {
          "name": "eventType",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "user.signup"
        },
        {
          "name": "payload",
          "schema": "object",
          "required": true,
          "description": "",
          "example": {
            "email": "test@example.com",
            "type": "user.created",
            "username": "test_user"
          }
        },
        {
          "name": "channels",
          "schema": "array",
          "required": false,
          "description": "",
          "example": [
            "project_123",
            "group_2"
          ]
        },
        {
          "name": "payloadRetentionPeriod",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 90,
          "default": 90
        },
        {
          "name": "application",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "transformationsParams",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "413",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/msg/{msg_id}",
      "method": "getByIdOrEventId",
      "httpMethod": "get",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "Get Message",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "msgId",
          "schema": "string",
          "required": true,
          "description": "The msg's ID or UID",
          "example": "unique-msg-identifier"
        },
        {
          "name": "withContent",
          "schema": "boolean",
          "description": "When `true` message payloads are included in the response",
          "default": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/msg/{msg_id}/content",
      "method": "deletePayload",
      "httpMethod": "delete",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "Delete message payload",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "msgId",
          "schema": "string",
          "required": true,
          "description": "The msg's ID or UID",
          "example": "unique-msg-identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "no content"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}",
      "method": "listByEndpoint",
      "httpMethod": "get",
      "tag": "Message Attempt",
      "typeScriptTag": "messageAttempt",
      "description": "List Attempts By Endpoint",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "Limit the number of returned items"
        },
        {
          "name": "iterator",
          "schema": "string",
          "description": "The iterator returned from a prior invocation",
          "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2"
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "Filter response based on the delivery status"
        },
        {
          "name": "statusCodeClass",
          "schema": "integer",
          "description": "Filter response based on the HTTP status code"
        },
        {
          "name": "channel",
          "schema": "string",
          "description": "Filter response based on the channel",
          "example": "project_1337"
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Filter response based on the tag",
          "example": "project_1337"
        },
        {
          "name": "before",
          "schema": "string",
          "description": "Only include items created before a certain date"
        },
        {
          "name": "after",
          "schema": "string",
          "description": "Only include items created after a certain date"
        },
        {
          "name": "withContent",
          "schema": "boolean",
          "description": "When `true` attempt content is included in the response",
          "default": true
        },
        {
          "name": "withMsg",
          "schema": "boolean",
          "description": "When `true`, the message information is included in the response",
          "default": false
        },
        {
          "name": "eventTypes",
          "schema": "array",
          "description": "Filter response based on the event type"
        },
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/attempt/msg/{msg_id}",
      "method": "listByMsg",
      "httpMethod": "get",
      "tag": "Message Attempt",
      "typeScriptTag": "messageAttempt",
      "description": "List Attempts By Msg",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "Limit the number of returned items"
        },
        {
          "name": "iterator",
          "schema": "string",
          "description": "The iterator returned from a prior invocation",
          "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2"
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "Filter response based on the delivery status"
        },
        {
          "name": "statusCodeClass",
          "schema": "integer",
          "description": "Filter response based on the HTTP status code"
        },
        {
          "name": "channel",
          "schema": "string",
          "description": "Filter response based on the channel",
          "example": "project_1337"
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Filter response based on the tag",
          "example": "project_1337"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "description": "Filter the attempts based on the attempted endpoint",
          "example": "unique-ep-identifier"
        },
        {
          "name": "before",
          "schema": "string",
          "description": "Only include items created before a certain date"
        },
        {
          "name": "after",
          "schema": "string",
          "description": "Only include items created after a certain date"
        },
        {
          "name": "withContent",
          "schema": "boolean",
          "description": "When `true` attempt content is included in the response",
          "default": true
        },
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "msgId",
          "schema": "string",
          "required": true,
          "description": "The msg's ID or UID",
          "example": "unique-msg-identifier"
        },
        {
          "name": "eventTypes",
          "schema": "array",
          "description": "Filter response based on the event type"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg",
      "method": "listAttemptedMessages",
      "httpMethod": "get",
      "tag": "Message Attempt",
      "typeScriptTag": "messageAttempt",
      "description": "List Attempted Messages",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "Limit the number of returned items"
        },
        {
          "name": "iterator",
          "schema": "string",
          "description": "The iterator returned from a prior invocation",
          "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
        },
        {
          "name": "channel",
          "schema": "string",
          "description": "Filter response based on the channel",
          "example": "project_1337"
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Filter response based on the message tags",
          "example": "project_1337"
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "Filter response based on the delivery status"
        },
        {
          "name": "before",
          "schema": "string",
          "description": "Only include items created before a certain date"
        },
        {
          "name": "after",
          "schema": "string",
          "description": "Only include items created after a certain date"
        },
        {
          "name": "withContent",
          "schema": "boolean",
          "description": "When `true` message payloads are included in the response",
          "default": true
        },
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        },
        {
          "name": "eventTypes",
          "schema": "array",
          "description": "Filter response based on the event type"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/msg/{msg_id}/endpoint",
      "method": "listAttemptedDestinations",
      "httpMethod": "get",
      "tag": "Message Attempt",
      "typeScriptTag": "messageAttempt",
      "description": "List Attempted Destinations",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "Limit the number of returned items"
        },
        {
          "name": "iterator",
          "schema": "string",
          "description": "The iterator returned from a prior invocation",
          "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
        },
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "msgId",
          "schema": "string",
          "required": true,
          "description": "The msg's ID or UID",
          "example": "unique-msg-identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/attempt",
      "method": "listByEndpointDeprecated",
      "httpMethod": "get",
      "tag": "Message Attempt",
      "typeScriptTag": "messageAttempt",
      "description": "List Attempts For Endpoint",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "Limit the number of returned items"
        },
        {
          "name": "iterator",
          "schema": "string",
          "description": "The iterator returned from a prior invocation",
          "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2"
        },
        {
          "name": "channel",
          "schema": "string",
          "description": "Filter response based on the channel",
          "example": "project_1337"
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Filter response based on the tag",
          "example": "project_1337"
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "Filter response based on the delivery status"
        },
        {
          "name": "before",
          "schema": "string",
          "description": "Only include items created before a certain date"
        },
        {
          "name": "after",
          "schema": "string",
          "description": "Only include items created after a certain date"
        },
        {
          "name": "eventTypes",
          "schema": "array",
          "description": "Filter response based on the event type"
        },
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "msgId",
          "schema": "string",
          "required": true,
          "description": "The msg's ID or UID",
          "example": "unique-msg-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/msg/{msg_id}/attempt",
      "method": "listByMsgAttempt",
      "httpMethod": "get",
      "tag": "Message Attempt",
      "typeScriptTag": "messageAttempt",
      "description": "List Attempts",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "Limit the number of returned items"
        },
        {
          "name": "iterator",
          "schema": "string",
          "description": "The iterator returned from a prior invocation",
          "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "description": "Filter the attempts based on the attempted endpoint",
          "example": "unique-ep-identifier"
        },
        {
          "name": "channel",
          "schema": "string",
          "description": "Filter response based on the channel",
          "example": "project_1337"
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Filter response based on the tag",
          "example": "project_1337"
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "Filter response based on the delivery status"
        },
        {
          "name": "before",
          "schema": "string",
          "description": "Only include items created before a certain date"
        },
        {
          "name": "after",
          "schema": "string",
          "description": "Only include items created after a certain date"
        },
        {
          "name": "statusCodeClass",
          "schema": "integer",
          "description": "Filter response based on the HTTP status code"
        },
        {
          "name": "eventTypes",
          "schema": "array",
          "description": "Filter response based on the event type"
        },
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "msgId",
          "schema": "string",
          "required": true,
          "description": "The msg's ID or UID",
          "example": "unique-msg-identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}",
      "method": "getByAttempt",
      "httpMethod": "get",
      "tag": "Message Attempt",
      "typeScriptTag": "messageAttempt",
      "description": "Get Attempt",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "msgId",
          "schema": "string",
          "required": true,
          "description": "The msg's ID or UID",
          "example": "unique-msg-identifier"
        },
        {
          "name": "attemptId",
          "schema": "string",
          "required": true,
          "description": "The attempt's ID",
          "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content",
      "method": "deleteResponseBody",
      "httpMethod": "delete",
      "tag": "Message Attempt",
      "typeScriptTag": "messageAttempt",
      "description": "Delete attempt response body",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "msgId",
          "schema": "string",
          "required": true,
          "description": "The msg's ID or UID",
          "example": "unique-msg-identifier"
        },
        {
          "name": "attemptId",
          "schema": "string",
          "required": true,
          "description": "The attempt's ID",
          "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "no content"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend",
      "method": "resendWebhook",
      "httpMethod": "post",
      "tag": "Message Attempt",
      "typeScriptTag": "messageAttempt",
      "description": "Resend Webhook",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "msgId",
          "schema": "string",
          "required": true,
          "description": "The msg's ID or UID",
          "example": "unique-msg-identifier"
        },
        {
          "name": "endpointId",
          "schema": "string",
          "required": true,
          "description": "The ep's ID or UID",
          "example": "unique-ep-identifier"
        },
        {
          "name": "idempotencyKey",
          "schema": "string",
          "description": "The request's idempotency key"
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": "no content"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/stats/usage/app",
      "method": "calculateMessageDestinationsForApps",
      "httpMethod": "post",
      "tag": "Statistics",
      "typeScriptTag": "statistics",
      "description": "Aggregate App Stats",
      "parameters": [
        {
          "name": "idempotencyKey",
          "schema": "string",
          "description": "The request's idempotency key"
        },
        {
          "name": "since",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "SINCE"
        },
        {
          "name": "until",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "UNTIL"
        },
        {
          "name": "appIds",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/stats/usage/event-types",
      "method": "calculateEventTypesForApps",
      "httpMethod": "put",
      "tag": "Statistics",
      "typeScriptTag": "statistics",
      "description": "Aggregate Event Types",
      "parameters": [],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/integration",
      "method": "list",
      "httpMethod": "get",
      "tag": "Integration",
      "typeScriptTag": "integration",
      "description": "List Integrations",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Limit the number of returned items"
        },
        {
          "name": "iterator",
          "schema": "string",
          "description": "The iterator returned from a prior invocation",
          "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2"
        },
        {
          "name": "order",
          "schema": "string",
          "description": "The sorting order of the returned items"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/integration",
      "method": "createNewIntegration",
      "httpMethod": "post",
      "tag": "Integration",
      "typeScriptTag": "integration",
      "description": "Create Integration",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "idempotencyKey",
          "schema": "string",
          "description": "The request's idempotency key"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Example Integration"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/integration/{integ_id}",
      "method": "deleteById",
      "httpMethod": "delete",
      "tag": "Integration",
      "typeScriptTag": "integration",
      "description": "Delete Integration",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "integId",
          "schema": "string",
          "required": true,
          "description": "The integ's ID",
          "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "no content"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/integration/{integ_id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Integration",
      "typeScriptTag": "integration",
      "description": "Get Integration",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "integId",
          "schema": "string",
          "required": true,
          "description": "The integ's ID",
          "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/integration/{integ_id}",
      "method": "updateIntegrationById",
      "httpMethod": "put",
      "tag": "Integration",
      "typeScriptTag": "integration",
      "description": "Update Integration",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "integId",
          "schema": "string",
          "required": true,
          "description": "The integ's ID",
          "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Example Integration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/integration/{integ_id}/key/rotate",
      "method": "rotateKey",
      "httpMethod": "post",
      "tag": "Integration",
      "typeScriptTag": "integration",
      "description": "Rotate Integration Key",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "integId",
          "schema": "string",
          "required": true,
          "description": "The integ's ID",
          "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2"
        },
        {
          "name": "idempotencyKey",
          "schema": "string",
          "description": "The request's idempotency key"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/app/{app_id}/integration/{integ_id}/key",
      "method": "getKey",
      "httpMethod": "get",
      "tag": "Integration",
      "typeScriptTag": "integration",
      "description": "Get Integration Key",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app's ID or UID",
          "example": "unique-app-identifier"
        },
        {
          "name": "integId",
          "schema": "string",
          "required": true,
          "description": "The integ's ID",
          "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/background-task",
      "method": "getPastTasks",
      "httpMethod": "get",
      "tag": "Background Tasks",
      "typeScriptTag": "backgroundTasks",
      "description": "List Background Tasks",
      "parameters": [
        {
          "name": "status",
          "schema": "string",
          "description": "Filter the response based on the status"
        },
        {
          "name": "task",
          "schema": "string",
          "description": "Filter the response based on the type"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Limit the number of returned items"
        },
        {
          "name": "iterator",
          "schema": "string",
          "description": "The iterator returned from a prior invocation"
        },
        {
          "name": "order",
          "schema": "string",
          "description": "The sorting order of the returned items"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/background-task/{task_id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Background Tasks",
      "typeScriptTag": "backgroundTasks",
      "description": "Get Background Task",
      "parameters": [
        {
          "name": "taskId",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "TASK_ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/health",
      "method": "checkStatus",
      "httpMethod": "get",
      "tag": "Health",
      "typeScriptTag": "health",
      "description": "Health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "204",
          "description": "no content"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    }
  ],
  "repositoryDescription": "Svix is a platform that simplifies webhook processing for developers. By providing a reliable infrastructure and powerful tools, Svix enables developers to easily send and receive webhooks, ensuring seamless communication between services and applications. Svix's {language} SDK generated by Konfig (https://konfigthis.com/).",
  "logo": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/svix/logo.png",
  "openApiRaw": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/svix/openapi.yaml",
  "openApiGitHubUi": "https://github.com/konfig-sdks/openapi-examples/tree/HEAD/svix/openapi.yaml",
  "previewLinkImage": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/svix/imagePreview.png",
  "faviconUrl": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/svix/favicon.png",
  "clientNameCamelCase": "svix",
  "lastUpdated": "2024-08-20T23:26:58.174Z",
  "typescriptSdkUsageCode": "import { Svix } from 'svix-typescript-sdk';\n\nconst svix = new Svix({\n    // HTTP Bearer token passed in the `Authorization` header\n    httpBearer: \"HTTP_BEARER\"\n})",
  "typescriptSdkFirstRequestCode": "// Get Consumer App Portal Access\nconst generateMagicLinksResponse = svix.authentication.generateMagicLinks({\n    appId: \"unique-app-identifier\"\n    featureFlags: []\n    expiry: 604800\n})",
  "fixedSpecFileName": "svix-fixed-spec.yaml"
}