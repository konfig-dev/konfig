{
  "securitySchemes": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "in": "header",
      "name": "x-api-key"
    }
  },
  "apiBaseUrl": "https://api.textrequest.com/api/v3/",
  "apiVersion": "3.0.0",
  "apiDescription": "This page contains documentation for Text Request's v3 API. [Click here](https://www.textrequest.com/api/v2) for v2 documentation.\n\nThe Text Request API makes it easy to programmatically interact with your Text Request account. It provides the ability to **send messages**, **retrieve conversations**, **send payment requests**, **manage contacts, groups, dashboards, and users**, and **create and delete web hooks**. \n\nWeb hooks allow you to get notifications when **messages are sent**, **new messages are received**, **contacts are created**, **contacts are updated**, **payment requests are updated**, and when **location requests are received**.\n\n# Security\n\nAll calls to the Text Request API will be authenticated with an API key. All API keys will be transmitted in the request **x-api-key** header. \n  \n```\nx-api-key: 095E5113DE4142C28FB7815CC10BEB56\n```\n  \nFailure to specify an authorization header for any request will result in a HTTP `400 (Bad Request)` response.\n  \nYou can find your account's API key on your Text Request account:\n* Log into Text Request as an administrator\n* Click on the Integrations sidebar menu item\n* Choose the API tile near the top of the screen. If your account does not have api access, you can upgrade your account by clicking the \"Buy Now\" option on the API tile.\n* Copy your API Key from the box on-screen\n  \n# Error Handling\n  \n  In the event of a failed request, the API will return an appropriate HTTP response code. If the error is due to an invalid request, a human readable error will also be returned is the response's *message* property. For blatantly obvious errors (`404 (Not Found)` responses, for example), this may be left blank. \n  \n  Here's an example of an error response for an omitted field.\n  \n  ```\n  HTTP 400\n  \n  Response Body\n  \n  {\n    \"status\": 400,\n    \"errorCode\": null,\n    \"message\": \"A first name must be specified.\"\n  } \n  ```\n  \n  # Pagination for Returned Collections\n  \n  When querying a collection such as users or conversations, there may be thousands of results. To prevent responses from getting massively large, these collections are paginated. For any request to a resource that returns a collection, `page` and `page_size` querystring parameters may be specified to return a subset of entities.\n  \n  API endpoints that return a collection also include `meta` properties in the response, specifying **the returned page**, **the returned page size**, and **the total number of items in the collection**.\n  \n  Here's an example collection return, with the items represented by the ellipses (...):\n  \n  ```\n  HTTP 200\n  \n  Response Body\n  \n  {\n    \"items\": [\n      ...\n    ],\n    \"meta\": {\n        \"page\": 0,\n        \"page_size\": 100,\n        \"total_items\": 276\n    }\n  } \n  ```\n  \n  Here are the rules for how page, page_size, and link headers work:\n  \n  * If omitted, page = 0 and page_size = 100 is implied.\n  * If page or page_size is invalid (negative number or non-numeric), a HTTP `400 (Bad Request)` response is returned.\n  * If page * page_size is greater than the number of entities in the collection, the `items` array will be empty.\n  * Collection `GET` requests will always return the `page`, `page_size`, and `total_items` properties.\n  \n  # Web hook Payloads\n\n  Text Request has a variety of web hooks for hitting URLs you own if you want extra functionality in your own apps. Each webhook has a unique data payload that is sent whenever the trigger is set off. To see the payloads:\n  * Scroll down to the `POST /dashboards/{dashboard_id}/hooks` API call on this page\n  * Between the **Parameters** tab and the **Try it out** button, click the \"Callbacks\" tab\n  * Click to view the payload sent in any of these web hooks. The payload will be the same regardless of whether it's a `POST`, `PUT`, or `DELETE` request.\n\n  Web hooks can be created in the [web app](https://app.textrequest.com), or through the `POST` endpoint. Web hooks created by endpoints will not appear in the web app, but web hooks created in the web app will be seen by the `GET /dashboards/{dashboard_id}/hooks` api endpoint.\n\n  Now that security and pagination are out of the way, lets take a look at the endpoints. You can try out each endpoint from directly within your browser by clicking the Authorize button below and entering your Text Request API key.\n",
  "apiTitle": "Text Request API v3",
  "endpoints": 36,
  "sdkMethods": 67,
  "schemas": 65,
  "parameters": 215,
  "originalCustomRequest": {
    "type": "GET",
    "url": "https://www.textrequest.com/dist/swagger/apiv3docs.yml"
  },
  "customRequestSpecFilename": "textrequest.com.yaml",
  "difficultyScore": 150.75,
  "difficulty": "Medium",
  "company": "Text Request",
  "sdkName": "text-request-{language}-sdk",
  "clientName": "TextRequest",
  "metaDescription": "Text Request is the business texting platform built to ignite customer engagement. We've crafted plug-and-play messaging solutions to your everyday communication problems, so you can cut through the noise and connect with customers anytime, anywhere.\n\nText Request is designed to scale with you, from one person handling a few conversations, to thousands of employees sending millions of messages, to custom solutions built on our API.\n\nLearn more about how we help busy business leaders like you with conversational texting and customer engagement at textrequest.com.",
  "apiStatusUrls": "inherit",
  "homepage": "www.textrequest.com/",
  "developerDocumentation": "www.textrequest.com/api/v3",
  "categories": [
    "messaging",
    "communications",
    "platform",
    "text_embeddings",
    "mobile",
    "communications_software",
    "text_messaging",
    "sms_marketing",
    "business_texting",
    "customer_engagement"
  ],
  "category": "Social Media Marketing",
  "methods": [
    {
      "url": "/mms",
      "method": "postMmsAttachment",
      "httpMethod": "post",
      "tag": "Messages",
      "typeScriptTag": "messages",
      "description": "Post an MMS attachment to Text Request.",
      "parameters": [
        {
          "name": "file",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/messages",
      "method": "sendMessageWithLocationRequestCallback",
      "httpMethod": "post",
      "tag": "Messages",
      "typeScriptTag": "messages",
      "description": "Sends a message",
      "parameters": [
        {
          "name": "from",
          "schema": "string",
          "required": true,
          "description": "",
          "example": 4232180111
        },
        {
          "name": "to",
          "schema": "string",
          "required": true,
          "description": "",
          "example": 4239309346
        },
        {
          "name": "body",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Don't forget the Family and Friends sale at our Toledo location on 6-15-2021 at 8:00PM!"
        },
        {
          "name": "sender_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "Bill Cassidy"
        },
        {
          "name": "status_callback",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "enter-url-here"
        },
        {
          "name": "location_callback",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "enter-url-here"
        },
        {
          "name": "mms_media",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "authvia_conversation_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "geolocation_requested",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards",
      "method": "listAllDashboards",
      "httpMethod": "get",
      "tag": "Dashboard",
      "typeScriptTag": "dashboard",
      "description": "Get all dashboards in an account.",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "",
          "default": 0
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "description": "",
          "default": 100
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards",
      "method": "createNewDashboard",
      "httpMethod": "post",
      "tag": "Dashboard",
      "typeScriptTag": "dashboard",
      "description": "Create a new dashboard with the given name and phone number",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "John Doe's Line"
        },
        {
          "name": "phone",
          "schema": "string",
          "description": "",
          "example": "+1(https://www.textrequest.com/api/v3-123-4567"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}",
      "method": "deleteDashboardById",
      "httpMethod": "delete",
      "tag": "Dashboard",
      "typeScriptTag": "dashboard",
      "description": "Deletes the specified dashboard.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The dashboard was deleted."
        },
        {
          "statusCode": "400",
          "description": "Thrown if the dashboard id or phone number is invalid."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Thrown if no dashboard with that id exists in the account."
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}",
      "method": "getInfo",
      "httpMethod": "get",
      "tag": "Dashboard",
      "typeScriptTag": "dashboard",
      "description": "Get info on this specific dashboard",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}",
      "method": "updateName",
      "httpMethod": "put",
      "tag": "Dashboard",
      "typeScriptTag": "dashboard",
      "description": "Update a specific dashboard's name",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "John Doe's Line"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/provisioning",
      "method": "getProvisionedNumbers",
      "httpMethod": "get",
      "tag": "Dashboard",
      "typeScriptTag": "dashboard",
      "description": "Get available provisioned numbers for hosting with a dashboard",
      "parameters": [
        {
          "name": "areaCode",
          "schema": "integer",
          "required": true,
          "description": "Area code to search for provisioned numbers of",
          "example": 423
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/conversations",
      "method": "getAllDashboardMessages",
      "httpMethod": "get",
      "tag": "Conversations",
      "typeScriptTag": "conversations",
      "description": "Retrieves all conversations for this dashboard.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "tags",
          "schema": "string",
          "required": false,
          "description": "List or singular guid referencing the contact tags you want to filter by"
        },
        {
          "name": "showUnresolvedOnly",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "includeArchived",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search term for filtering conversations by phone number or display name. If the search term is less than a full name or phone number, the search will return all conversations that partially match it."
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "",
          "default": 0
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "description": "",
          "default": 100
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "204",
          "description": "No conversations exist in the provided dashboard.'"
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/contacts/{phone_number}/messages",
      "method": "getConversationMessagesByContactPhone",
      "httpMethod": "get",
      "tag": "Conversations",
      "typeScriptTag": "conversations",
      "description": "Get a conversation's messages by contact phone.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "phoneNumber",
          "schema": "string",
          "required": true,
          "description": "Phone number",
          "example": "PHONE_NUMBER"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "",
          "default": 0
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "description": "",
          "default": 100
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "204",
          "description": "No contact in the dashboard matches the provided number.'"
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/contacts/{phone_number}/messages",
      "method": "sendMessageToContact",
      "httpMethod": "post",
      "tag": "Conversations",
      "typeScriptTag": "conversations",
      "description": "Send a message to the contact with the given phone number",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "phoneNumber",
          "schema": "string",
          "required": true,
          "description": "Phone number",
          "example": "PHONE_NUMBER"
        },
        {
          "name": "body",
          "schema": "string",
          "description": "",
          "example": "I am reaching back out."
        },
        {
          "name": "sender_name",
          "schema": "string",
          "description": "",
          "example": "Bill Cassidy"
        },
        {
          "name": "status_callback",
          "schema": "string",
          "description": "",
          "example": "enter-url-here"
        },
        {
          "name": "location_callback",
          "schema": "string",
          "description": "",
          "example": "enter-url-here"
        },
        {
          "name": "mms_media",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/messages",
      "method": "getDashboardMessages",
      "httpMethod": "get",
      "tag": "Conversations",
      "typeScriptTag": "conversations",
      "description": "Get all messages for a dashboard.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": "Start date to filter messages in this dashboard by"
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "End date to filter messages in this dashboard by"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "",
          "default": 0
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "description": "",
          "default": 100
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "204",
          "description": "No contact in the dashboard matches the provided number.'"
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/contacts/{phone_number}/conversations/archive",
      "method": "archiveConversation",
      "httpMethod": "put",
      "tag": "Conversations",
      "typeScriptTag": "conversations",
      "description": "Archive a Conversation",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "phoneNumber",
          "schema": "string",
          "required": true,
          "description": "Phone number",
          "example": "PHONE_NUMBER"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Success. No content is returned."
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/contacts/{phone_number}/conversations/unarchive",
      "method": "unarchiveConversation",
      "httpMethod": "put",
      "tag": "Conversations",
      "typeScriptTag": "conversations",
      "description": "Unarchive a Conversation",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "phoneNumber",
          "schema": "string",
          "required": true,
          "description": "Phone number",
          "example": "PHONE_NUMBER"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Success. No content is returned."
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/messages/{message_id}/redact",
      "method": "redactMessage",
      "httpMethod": "put",
      "tag": "Messages",
      "typeScriptTag": "messages",
      "description": "Redact a message",
      "parameters": [
        {
          "name": "messageId",
          "schema": "string",
          "required": true,
          "description": "Id of message to redact",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Success. No content is returned."
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/messages/{message_id}/unredact",
      "method": "unredactMessage",
      "httpMethod": "put",
      "tag": "Messages",
      "typeScriptTag": "messages",
      "description": "Unredact a message",
      "parameters": [
        {
          "name": "messageId",
          "schema": "string",
          "required": true,
          "description": "Id of message to unredact",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Success. No content is returned."
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/contacts",
      "method": "getMatches",
      "httpMethod": "get",
      "tag": "Contacts",
      "typeScriptTag": "contacts",
      "description": "Retrieves all contacts that match the specified filtering criterion.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "contactPhoneNumber",
          "schema": "string",
          "required": false,
          "description": "The phone number that you're searching for. This uses \"starts with\" searching."
        },
        {
          "name": "lastMessageTimestampBeforeUtc",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "lastMessageTimestampAfterUtc",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "contactCreatedBefore",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "contactCreatedAfter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isResolved",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "hasMessageHistory",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isBlocked",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isArchived",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isSuppressed",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "hasOptedOut",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastMessageSentBefore",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "lastMessageSentAfter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "lastMessageReceivedBefore",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "lastMessageReceivedAfter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "string",
          "required": false,
          "description": "List or singular guid referencing the contact tags you want to filter by"
        },
        {
          "name": "groups",
          "schema": "string",
          "required": false,
          "description": "List or singular ids referencing the groups you want to filter by"
        },
        {
          "name": "customFieldId1",
          "schema": "string",
          "required": false,
          "description": "Id of custom field to filter by. Requires value for custom_field_value_1 to specify the desired custom field value"
        },
        {
          "name": "customFieldValue1",
          "schema": "string",
          "required": false,
          "description": "Filter value of the custom field specied in custom_field_id_1. Requires value for custom_field_id_1 to specify which custom field to filter by"
        },
        {
          "name": "customFieldId2",
          "schema": "string",
          "required": false,
          "description": "Id of custom field to filter by. Requires value for custom_field_value_2 to specify the desired custom field value"
        },
        {
          "name": "customFieldValue2",
          "schema": "string",
          "required": false,
          "description": "Filter value of the custom field specied in custom_field_id_2. Requires value for custom_field_id_2 to specify which custom field to filter by"
        },
        {
          "name": "customFieldId3",
          "schema": "string",
          "required": false,
          "description": "Id of custom field to filter by. Requires value for custom_field_value_3 to specify the desired custom field value"
        },
        {
          "name": "customFieldValue3",
          "schema": "string",
          "required": false,
          "description": "Filter value of the custom field specied in custom_field_id_3. Requires value for custom_field_id_3 to specify which custom field to filter by"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "",
          "default": 0
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "description": "",
          "default": 100
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/contacts",
      "method": "bulkUpdate",
      "httpMethod": "post",
      "tag": "Contacts",
      "typeScriptTag": "contacts",
      "description": "Bulk update contacts, updating contacts with matching phone numbers or creating new contacts for new phone numbers.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/contacts/{phone_number}",
      "method": "deleteByPhoneNumber",
      "httpMethod": "delete",
      "tag": "Contacts",
      "typeScriptTag": "contacts",
      "description": "Deletes the contact with the specified phone number.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "phoneNumber",
          "schema": "string",
          "required": true,
          "description": "Phone number",
          "example": "PHONE_NUMBER"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The contact was deleted."
        },
        {
          "statusCode": "400",
          "description": "Thrown if the dashboard id or phone number is invalid, or if the contact exists, but has a message history."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Thrown if no contact with the specified phone number exists in the dashboard."
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/contacts/{phone_number}",
      "method": "getByPhoneNumber",
      "httpMethod": "get",
      "tag": "Contacts",
      "typeScriptTag": "contacts",
      "description": "Retrieves the contact with the specified phone number.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "phoneNumber",
          "schema": "string",
          "required": true,
          "description": "Phone number",
          "example": "PHONE_NUMBER"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "204",
          "description": "No contact in the dashboard matches the provided number.'"
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/contacts/{phone_number}",
      "method": "createOrUpdateByPhoneNumber",
      "httpMethod": "post",
      "tag": "Contacts",
      "typeScriptTag": "contacts",
      "description": "Create or update a contact with the given phone number",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "phoneNumber",
          "schema": "string",
          "required": true,
          "description": "Phone number",
          "example": "PHONE_NUMBER"
        },
        {
          "name": "first_name",
          "schema": "string",
          "description": "",
          "example": "John"
        },
        {
          "name": "last_name",
          "schema": "string",
          "description": "",
          "example": "Smith"
        },
        {
          "name": "display_name",
          "schema": "string",
          "description": "",
          "example": "John Smith"
        },
        {
          "name": "is_suppressed",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "is_archived",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "is_blocked",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "suppressed_reason",
          "schema": "string",
          "description": "",
          "example": null
        },
        {
          "name": "note",
          "schema": "string",
          "description": "",
          "example": "Contact from newsletter."
        },
        {
          "name": "groups",
          "schema": "array",
          "description": ""
        },
        {
          "name": "contact_tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "custom_fields",
          "schema": "array",
          "description": ""
        },
        {
          "name": "is_resolved",
          "schema": "boolean",
          "description": "",
          "example": false
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/groups",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Groups",
      "typeScriptTag": "groups",
      "description": "Retrieves all groups.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "",
          "default": 0
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "description": "",
          "default": 100
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/groups",
      "method": "createNewGroup",
      "httpMethod": "post",
      "tag": "Groups",
      "typeScriptTag": "groups",
      "description": "Creates a new group",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Employees"
        },
        {
          "name": "notes",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "This list will hold all current employees."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/groups/{group_id}",
      "method": "deleteGroupById",
      "httpMethod": "delete",
      "tag": "Groups",
      "typeScriptTag": "groups",
      "description": "Deletes the group with the specified id.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "groupId",
          "schema": "integer",
          "required": true,
          "description": "Id of group",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The group was deleted."
        },
        {
          "statusCode": "400",
          "description": "Thrown if the dashboard id or group id is invalid."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Thrown if no group with that id exists in the dashboard."
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/groups/{group_id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Groups",
      "typeScriptTag": "groups",
      "description": "Retrieves the group with the specified id.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "groupId",
          "schema": "integer",
          "required": true,
          "description": "Id of group",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "204",
          "description": "No group in the dashboard matches the provided id."
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/groups/{group_id}",
      "method": "updateGroupName",
      "httpMethod": "put",
      "tag": "Groups",
      "typeScriptTag": "groups",
      "description": "Update a group with the given id",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "groupId",
          "schema": "integer",
          "required": true,
          "description": "Id of group",
          "example": 0
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Employees"
        },
        {
          "name": "notes",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "This list will hold all current employees."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/users",
      "method": "getAllUsers",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Retrieves all users.",
      "parameters": [
        {
          "name": "externalUserId",
          "schema": "string",
          "required": false,
          "description": "External User Id to filter the results by. The External User Id is a custom value that can only be set from within the API. Multiple users can have the same external user id."
        },
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": "User's email address to filter the results by. A user's email address cannot be changed. Only one user can exist in an account for an email address."
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "",
          "default": 0
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "description": "",
          "default": 100
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/users",
      "method": "createUser",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Creates a new user",
      "parameters": [
        {
          "name": "first_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "John"
        },
        {
          "name": "last_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "Doe"
        },
        {
          "name": "is_administrator",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "john.doe@wefixwindows.com"
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "8aw5vm232b4xkjdr"
        },
        {
          "name": "external_user_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "johndoe_1"
        },
        {
          "name": "permissions",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}",
      "method": "deleteUserWithPermissions",
      "httpMethod": "delete",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Deletes the user with the specified id",
      "parameters": [
        {
          "name": "userId",
          "schema": "integer",
          "required": true,
          "description": "Id of user",
          "example": 508
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user was deleted."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "No user in the account matches the provided id."
        }
      ]
    },
    {
      "url": "/users/{user_id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Retrieves the user with the specified id.",
      "parameters": [
        {
          "name": "userId",
          "schema": "integer",
          "required": true,
          "description": "Id of user",
          "example": 508
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "204",
          "description": "No user in the account matches the provided id."
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}",
      "method": "updateUserDetails",
      "httpMethod": "put",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Update a user with the given id",
      "parameters": [
        {
          "name": "userId",
          "schema": "integer",
          "required": true,
          "description": "Id of user",
          "example": 508
        },
        {
          "name": "first_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "John"
        },
        {
          "name": "last_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "Doe"
        },
        {
          "name": "is_administrator",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "external_user_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "johndoe_1"
        },
        {
          "name": "permissions",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/keywords",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Keywords",
      "typeScriptTag": "keywords",
      "description": "Retrieves all keywords.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "",
          "default": 0
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "description": "",
          "default": 100
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/keywords",
      "method": "createNewKeyword",
      "httpMethod": "post",
      "tag": "Keywords",
      "typeScriptTag": "keywords",
      "description": "Creates a new keyword",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "keyword_value",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Employees"
        },
        {
          "name": "response",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "This list will hold all current employees."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/keywords/{keyword_id}",
      "method": "deleteKeywordById",
      "httpMethod": "delete",
      "tag": "Keywords",
      "typeScriptTag": "keywords",
      "description": "Deletes the keywood with the specified id.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "keywordId",
          "schema": "integer",
          "required": true,
          "description": "Id of keyword",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The keyword was deleted."
        },
        {
          "statusCode": "400",
          "description": "Thrown if the dashboard id or keyword id is invalid."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Thrown if no keyword with that id exists in the dashboard."
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/keywords/{keyword_id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Keywords",
      "typeScriptTag": "keywords",
      "description": "Retrieves the keyword with the specified id.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "keywordId",
          "schema": "integer",
          "required": true,
          "description": "Id of keyword",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "204",
          "description": "No keyword in the dashboard matches the provided id."
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/keywords/{keyword_id}",
      "method": "updateKeywordById",
      "httpMethod": "put",
      "tag": "Keywords",
      "typeScriptTag": "keywords",
      "description": "Update the keyword with the given id",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "keywordId",
          "schema": "integer",
          "required": true,
          "description": "Id of keyword",
          "example": 0
        },
        {
          "name": "keyword_value",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Employees"
        },
        {
          "name": "response",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "This list will hold all current employees."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/tags",
      "method": "getAllDashboardTags",
      "httpMethod": "get",
      "tag": "Tags",
      "typeScriptTag": "tags",
      "description": "Retrieves all the tags for this dashboard.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "",
          "default": 0
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "description": "",
          "default": 100
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/tags",
      "method": "createNewTag",
      "httpMethod": "post",
      "tag": "Tags",
      "typeScriptTag": "tags",
      "description": "Creates a new tag",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "tag_color",
          "schema": "string",
          "description": "",
          "example": "#1EB1C4"
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "",
          "example": "Partners"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/tags/{tag_id}",
      "method": "deleteTagById",
      "httpMethod": "delete",
      "tag": "Tags",
      "typeScriptTag": "tags",
      "description": "Deletes the tag with the specified id.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "tagId",
          "schema": "string",
          "required": true,
          "description": "Id of tag",
          "example": "TAG_ID"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The tag was deleted."
        },
        {
          "statusCode": "400",
          "description": "Thrown if the dashboard id or tag id is invalid."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Thrown if no tag with that id exists in the dashboard."
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/tags/{tag_id}",
      "method": "getTagById",
      "httpMethod": "get",
      "tag": "Tags",
      "typeScriptTag": "tags",
      "description": "Retrieves the tag with the specified id.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "tagId",
          "schema": "string",
          "required": true,
          "description": "Id of tag",
          "example": "TAG_ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "204",
          "description": "No tag in the dashboard matches the provided id."
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/tags/{tag_id}",
      "method": "updateTagById",
      "httpMethod": "put",
      "tag": "Tags",
      "typeScriptTag": "tags",
      "description": "Update a tag with the given id",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "tagId",
          "schema": "string",
          "required": true,
          "description": "Id of tag",
          "example": "TAG_ID"
        },
        {
          "name": "tag_color",
          "schema": "string",
          "description": "",
          "example": "#1EB1C4"
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "",
          "example": "Partners"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/fields/{field_id}",
      "method": "deleteFieldById",
      "httpMethod": "delete",
      "tag": "Custom Fields",
      "typeScriptTag": "customFields",
      "description": "Deletes the field with the specified id.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "Id of field",
          "example": "f0d364d4-52e7-44a7-a1bb-b7ce0ccb5ead"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "Either the field was deleted, or no field with that guid existed in the dashboard."
        },
        {
          "statusCode": "400",
          "description": "Thrown if the dashboard id or field id is invalid, or if the field exists, but some contacts have a value for that field."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Thrown if no field with that id exists in the dashboard."
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/fields/{field_id}",
      "method": "getFieldById",
      "httpMethod": "get",
      "tag": "Custom Fields",
      "typeScriptTag": "customFields",
      "description": "Retrieves the custom field with the specified id.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "Id of field",
          "example": "f0d364d4-52e7-44a7-a1bb-b7ce0ccb5ead"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "204",
          "description": "No custom field in the dashboard matches the provided Guid."
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/fields/{field_id}",
      "method": "updateFieldName",
      "httpMethod": "put",
      "tag": "Custom Fields",
      "typeScriptTag": "customFields",
      "description": "Update a custom field's name",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "Id of field",
          "example": "f0d364d4-52e7-44a7-a1bb-b7ce0ccb5ead"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "Email"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/fields",
      "method": "getAllFields",
      "httpMethod": "get",
      "tag": "Custom Fields",
      "typeScriptTag": "customFields",
      "description": "Retrieves all custom fields.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/fields",
      "method": "createNewField",
      "httpMethod": "post",
      "tag": "Custom Fields",
      "typeScriptTag": "customFields",
      "description": "Create a new custom field.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "Email"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/payments",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Payments",
      "typeScriptTag": "payments",
      "description": "Retrieves all payments.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "referenceNumber",
          "schema": "string",
          "required": false,
          "description": "User-defined id defined when payments are created that can be used to quickly find payments. Reference numbers are not unique; many payments can have the same reference."
        },
        {
          "name": "phoneNumber",
          "schema": "string",
          "required": false,
          "description": "Phone number"
        },
        {
          "name": "sortType",
          "schema": "string",
          "required": false,
          "description": "Property to sort payments by.",
          "default": "date"
        },
        {
          "name": "sortDirection",
          "schema": "string",
          "required": false,
          "description": "Direction to sort payments in. Either greatest to smallest, or smallest to greatest.",
          "default": "desc"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "",
          "default": 0
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "description": "",
          "default": 100
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/payments",
      "method": "createNewPayment",
      "httpMethod": "post",
      "tag": "Payments",
      "typeScriptTag": "payments",
      "description": "Creates a new payment",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Housecall for plumbing services"
        },
        {
          "name": "message",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "Thank you for choosing Generic Plumbing! Please click the link below to pay the balance for today's appointment."
        },
        {
          "name": "customer_phone",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "321-654-7890"
        },
        {
          "name": "amount_requested",
          "schema": "number",
          "required": true,
          "description": "",
          "example": 220.5
        },
        {
          "name": "reference_number",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "receipt-chicago"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/payments/{payment_id}",
      "method": "getPaymentById",
      "httpMethod": "get",
      "tag": "Payments",
      "typeScriptTag": "payments",
      "description": "Retrieves the payment with the specified id.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "paymentId",
          "schema": "integer",
          "required": true,
          "description": "Id of payment",
          "example": 2510
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "204",
          "description": "No payment in the dashboard matches the provided id."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/payments/{payment_id}/mark_as_paid",
      "method": "markAsPaid",
      "httpMethod": "post",
      "tag": "Payments",
      "typeScriptTag": "payments",
      "description": "Mark a payment as paid",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "paymentId",
          "schema": "integer",
          "required": true,
          "description": "Id of payment",
          "example": 2510
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/payments/{payment_id}/resend",
      "method": "sendReminder",
      "httpMethod": "post",
      "tag": "Payments",
      "typeScriptTag": "payments",
      "description": "Send a follow-up text reminding the user to pay the specified payment.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "paymentId",
          "schema": "integer",
          "required": true,
          "description": "Id of payment",
          "example": 2510
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/payments/{payment_id}/cancel",
      "method": "cancelPayment",
      "httpMethod": "post",
      "tag": "Payments",
      "typeScriptTag": "payments",
      "description": "Cancels the specified payment.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "paymentId",
          "schema": "integer",
          "required": true,
          "description": "Id of payment",
          "example": 2510
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/activate_payments",
      "method": "activateDashboardPayments",
      "httpMethod": "post",
      "tag": "Payments",
      "typeScriptTag": "payments",
      "description": "Activates payments for a dashboard.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The activation was successful"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/reviews",
      "method": "getMatchingReviews",
      "httpMethod": "get",
      "tag": "Reviews",
      "typeScriptTag": "reviews",
      "description": "Retrieves all reviews that match the specified filtering criterion.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "startDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "endDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "",
          "default": 0
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "description": "",
          "default": 100
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/campaigns",
      "method": "getAllCampaigns",
      "httpMethod": "get",
      "tag": "Reviews",
      "typeScriptTag": "reviews",
      "description": "Retrieves all campaigns.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "includeArchived",
          "schema": "boolean",
          "description": "",
          "default": false
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "",
          "default": 0
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "description": "",
          "default": 100
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/campaigns/{campaign_id}",
      "method": "getCampaignById",
      "httpMethod": "get",
      "tag": "Reviews",
      "typeScriptTag": "reviews",
      "description": "Retrieves the campaign with the specified id.",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "campaignId",
          "schema": "integer",
          "required": true,
          "description": "Id of campaign",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "204",
          "description": "No campaign in the dashboard matches the provided id."
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/eventTypes",
      "method": "getAllTypes",
      "httpMethod": "get",
      "tag": "Webhooks",
      "typeScriptTag": "webhooks",
      "description": "Retrieve all available web hooks types",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/hooks",
      "method": "getAllForDashboard",
      "httpMethod": "get",
      "tag": "Webhooks",
      "typeScriptTag": "webhooks",
      "description": "Retrieve all web hooks for a dashboard",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "",
          "default": 0
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "description": "",
          "default": 100
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/hooks",
      "method": "registerNewWebhook",
      "httpMethod": "post",
      "tag": "Webhooks",
      "typeScriptTag": "webhooks",
      "description": "Register Web Hook",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "target_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "enter-url-here"
        },
        {
          "name": "event",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "msg_sent"
        },
        {
          "name": "http_verb",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "PUT",
          "default": "POST"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/dashboards/{dashboard_id}/hooks/{webhook_id}",
      "method": "deleteWebhookFromPhoneNumber",
      "httpMethod": "delete",
      "tag": "Webhooks",
      "typeScriptTag": "webhooks",
      "description": "Deletes a web hook",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "Id of dashboard",
          "example": 121
        },
        {
          "name": "webhookId",
          "schema": "integer",
          "required": true,
          "description": "Id of the web hook that you want to delete",
          "example": 56
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The webhook was deleted successfully."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    }
  ],
  "repositoryDescription": "Business texting platform for customer engagement. Plug-and-play solutions for communication. Scale from one person to thousands. Custom solutions available. Text Request's {language} SDK generated by Konfig (https://konfigthis.com/).",
  "logo": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/text-request/logo.png",
  "openApiRaw": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/text-request/openapi.yaml",
  "openApiGitHubUi": "https://github.com/konfig-sdks/openapi-examples/tree/HEAD/text-request/openapi.yaml",
  "previewLinkImage": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/text-request/imagePreview.webp",
  "faviconUrl": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/text-request/favicon.png",
  "clientNameCamelCase": "textRequest",
  "lastUpdated": "2024-04-16T19:21:46.323Z",
  "typescriptSdkUsageCode": "import { TextRequest } from 'text-request-typescript-sdk';\n\nconst textRequest = new TextRequest({\n    apiKeyAuth: \"X_API_KEY\"\n})",
  "typescriptSdkFirstRequestCode": "// Post an MMS attachment to Text Request.\nconst postMmsAttachmentResponse = textRequest.messages.postMmsAttachment()",
  "fixedSpecFileName": "text-request-fixed-spec.yaml"
}