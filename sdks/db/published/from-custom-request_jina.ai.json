{
  "securitySchemes": {
    "HTTPBearer": {
      "type": "http",
      "scheme": "bearer"
    }
  },
  "apiBaseUrl": "https://api.jina.ai",
  "apiVersion": "0.0.89",
  "apiDescription": "This is the UniversalAPI to access all the Jina embedding models",
  "apiTitle": "The Jina Embedding Serving API",
  "endpoints": 8,
  "sdkMethods": 8,
  "schemas": 20,
  "parameters": 18,
  "originalCustomRequest": {
    "type": "GET",
    "url": "https://api.jina.ai/openapi.json",
    "apiBaseUrl": "https://api.jina.ai"
  },
  "customRequestSpecFilename": "jina.ai.yaml",
  "difficultyScore": 22,
  "difficulty": "Very Easy",
  "company": "Jina AI",
  "sdkName": "jina-ai-{language}-sdk",
  "clientName": "JinaAi",
  "metaDescription": "Founded in February 2020, Jina AI has swiftly emerged as a global pioneer in multimodal AI technology. Within an impressive timeframe of 20 months, we have successfully raised $37.5M, marking our strong position in the AI industry. Our ground-breaking technology, open-sourced on GitHub, has empowered over 40,000 developers around the globe to seamlessly build and deploy sophisticated multimodal applications.\n\nIn 2023, we've made significant strides in advancing AI generation tools grounded on multimodal technology. This innovation has benefited over 250,000 users worldwide, catering to a plethora of unique business requirements. From facilitating business growth and enhancing operational efficiency to optimizing costs, Jina AI is dedicated to empowering businesses to excel in the multimodal era.",
  "apiStatusUrls": "inherit",
  "homepage": "jina.ai",
  "developerDocumentation": "api.jina.ai/redoc",
  "categories": [
    "artificial_intelligence",
    "open_source",
    "developer_tools",
    "machine_learning",
    "ai",
    "vector_search",
    "embedding"
  ],
  "category": "AI Tools",
  "methods": [
    {
      "url": "/v1/embeddings",
      "method": "createRepresentation",
      "httpMethod": "post",
      "tag": "embeddings",
      "typeScriptTag": "embeddings",
      "description": "Create Embedding",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Output of the embedding service"
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/bulk-embeddings",
      "method": "uploadFileAndGetEmbeddings",
      "httpMethod": "post",
      "tag": "bulk-embeddings",
      "typeScriptTag": "bulkEmbeddings",
      "description": "Start Bulk Embedding",
      "parameters": [
        {
          "name": "file",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "FILE"
        },
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "model",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "MODEL"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/bulk-embeddings/{job_id}",
      "method": "getJob",
      "httpMethod": "get",
      "tag": "bulk-embeddings",
      "typeScriptTag": "bulkEmbeddings",
      "description": "Retrieve Job",
      "parameters": [
        {
          "name": "jobId",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "JOB_ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/bulk-embeddings/{job_id}/download-result",
      "method": "downloadResultPost",
      "httpMethod": "post",
      "tag": "bulk-embeddings",
      "typeScriptTag": "bulkEmbeddings",
      "description": "Download Result",
      "parameters": [
        {
          "name": "jobId",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "JOB_ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/rerank",
      "method": "pairRanking",
      "httpMethod": "post",
      "tag": "rerank",
      "typeScriptTag": "rerank",
      "description": "Rank",
      "parameters": [
        {
          "name": "model",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "MODEL"
        },
        {
          "name": "query",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "documents",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "top_n",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "return_documents",
          "schema": "boolean",
          "required": false,
          "description": "",
          "default": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Output of the embedding service"
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/multi-vector",
      "method": "generateVectorRepresentations",
      "httpMethod": "post",
      "tag": "multi-vector",
      "typeScriptTag": "multiVector",
      "description": "Create Multi Vector",
      "parameters": [
        {
          "name": "model",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "MODEL"
        },
        {
          "name": "input",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "input_type",
          "schema": "string",
          "required": false,
          "description": "",
          "default": "document"
        },
        {
          "name": "encoding_format",
          "schema": "undefined",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Output of the embedding service"
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/multi-embeddings",
      "method": "generateEmbeddings",
      "httpMethod": "post",
      "tag": "multi-vector",
      "typeScriptTag": "multiVector",
      "description": "Create Multi Vector",
      "parameters": [
        {
          "name": "model",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "MODEL"
        },
        {
          "name": "input",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "input_type",
          "schema": "string",
          "required": false,
          "description": "",
          "default": "document"
        },
        {
          "name": "encoding_format",
          "schema": "undefined",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Output of the embedding service"
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/",
      "method": "checkStatus",
      "httpMethod": "get",
      "tag": "health",
      "typeScriptTag": "health",
      "description": "Get the health of Universal API service",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Pydantic BaseModel for Jina health check, used as the response model in REST app."
        }
      ]
    }
  ],
  "repositoryDescription": "Jina AI is a leading global pioneer in multimodal AI technology, founded in Feb 2020. Raised $37.5M in 20 months, open-sourced tech on GitHub for 40,000+ developers. Advancing AI generation tools benefiting 250,000+ users globally. Jina AI's {language} SDK generated by Konfig (https://konfigthis.com/).",
  "logo": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/jina-ai/logo.png",
  "openApiRaw": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/jina-ai/openapi.yaml",
  "openApiGitHubUi": "https://github.com/konfig-sdks/openapi-examples/tree/HEAD/jina-ai/openapi.yaml",
  "previewLinkImage": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/jina-ai/imagePreview.png",
  "faviconUrl": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/jina-ai/favicon.png",
  "clientNameCamelCase": "jinaAi",
  "lastUpdated": "2024-08-20T23:26:58.174Z",
  "typescriptSdkUsageCode": "import { JinaAi } from 'jina-ai-typescript-sdk';\n\nconst jinaAi = new JinaAi({\n    httpBearer: \"HTTP_BEARER\"\n})",
  "typescriptSdkFirstRequestCode": "// Create Embedding\nconst createRepresentationResponse = jinaAi.embeddings.createRepresentation()",
  "fixedSpecFileName": "jina-ai-fixed-spec.yaml"
}