{
  "securitySchemes": {
    "sec0": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "x-default": "Bearer",
      "x-bearer-format": ""
    }
  },
  "apiBaseUrl": "https://www.workable.com/api",
  "apiVersion": "3.8",
  "apiTitle": "public",
  "endpoints": 50,
  "sdkMethods": 55,
  "schemas": 158,
  "parameters": 141,
  "originalCustomRequest": {
    "lambda": true
  },
  "customRequestSpecFilename": "workable.com.yaml",
  "difficultyScore": 90.25,
  "difficulty": "Easy",
  "company": "Workable",
  "sdkName": "workable-{language}-sdk",
  "clientName": "Workable",
  "metaDescription": "Workable develops a cloud-based recruitment platform for companies to post jobs, track applicants and schedule interviews.",
  "apiStatusUrls": "inherit",
  "homepage": "workable.com",
  "developerDocumentation": "workable.readme.io/reference",
  "categories": [
    "recruiting",
    "hr",
    "applicant_tracking"
  ],
  "category": "HR Talent & Recruitment",
  "apiDescription": "Workable develops a cloud-based recruitment platform for companies to post jobs, track applicants and schedule interviews.",
  "methods": [
    {
      "url": "/accounts",
      "method": "listAccessible",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "/accounts",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/accounts/{subdomain}",
      "method": "getPublicJobs",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "api/accounts/:subdomain",
      "parameters": [
        {
          "name": "subdomain",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "SUBDOMAIN"
        },
        {
          "name": "details",
          "schema": "boolean",
          "description": "Includes description field for jobs",
          "default": false
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/members",
      "method": "listOfMembers",
      "httpMethod": "get",
      "tag": "Member",
      "typeScriptTag": "member",
      "description": "/members",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "Specifies the number of members to try and retrieve per page (optional)",
          "default": 50
        },
        {
          "name": "sinceId",
          "schema": "string",
          "description": "Returns results with an ID greater than or equal to the specified ID. (optional)"
        },
        {
          "name": "maxId",
          "schema": "string",
          "description": "Returns results with an ID less than or equal to the specified ID. (optional)"
        },
        {
          "name": "role",
          "schema": "string",
          "description": "Filters for members of the specified role. Can be `simple`, `admin` or `reviewer`"
        },
        {
          "name": "shortcode",
          "schema": "string",
          "description": "Filters for a specific job, only collaborators will be returned"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/recruiters",
      "method": "listExternalRecruiters",
      "httpMethod": "get",
      "tag": "Recruiter",
      "typeScriptTag": "recruiter",
      "description": "/recruiters",
      "parameters": [
        {
          "name": "shortcode",
          "schema": "string",
          "description": "The job's shortcode. If provided only recruiters collaborating on the correlated job will be returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/stages",
      "method": "collectionGet",
      "httpMethod": "get",
      "tag": "Stage",
      "typeScriptTag": "stage",
      "description": "/stages",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/departments",
      "method": "listDepartments",
      "httpMethod": "get",
      "tag": "Department",
      "typeScriptTag": "department",
      "description": "/departments",
      "parameters": [
        {
          "name": "subdomain",
          "schema": "string",
          "required": true,
          "description": "The account subdomain",
          "example": "SUBDOMAIN"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/legal_entities",
      "method": "entities",
      "httpMethod": "get",
      "description": "/legal_entities",
      "parameters": [
        {
          "name": "subdomain",
          "schema": "string",
          "required": true,
          "description": "The account subdomain",
          "example": "SUBDOMAIN"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/requisitions",
      "method": "list",
      "httpMethod": "get",
      "tag": "Requisition",
      "typeScriptTag": "requisition",
      "description": "/requisitions",
      "parameters": [
        {
          "name": "state",
          "schema": "string",
          "description": "Returns requisitions with the current state. Possible values (processing, draft, pending, approved, open, filled, rejected, cancelled, reserved, on_hold)."
        },
        {
          "name": "jobId",
          "schema": "string",
          "description": "Returns requisitions for the job with the specified ID."
        },
        {
          "name": "planDateFrom",
          "schema": "string",
          "description": "Returns requisitions with plan date after the specified month. Format is YYYY-MM (example: 2022-01)."
        },
        {
          "name": "planDateTo",
          "schema": "string",
          "description": "Returns requisitions with plan date before the specified month. Format is YYYY-MM (example: 2022-12)."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Specifies the number of requisitions to try and retrieve per page (optional)",
          "default": 50
        },
        {
          "name": "sinceId",
          "schema": "string",
          "description": "Returns results with an ID greater than or equal to the specified ID. (optional)"
        },
        {
          "name": "maxId",
          "schema": "string",
          "description": "Returns results with an ID less than or equal to the specified ID. (optional)"
        },
        {
          "name": "createdAfter",
          "schema": "string",
          "description": "Returns results created after the specified timestamp. (optional)"
        },
        {
          "name": "updatedAfter",
          "schema": "string",
          "description": "Returns results updated after the specified timestamp."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/requisitions/{code}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Requisition",
      "typeScriptTag": "requisition",
      "description": "/requisitions/:code",
      "parameters": [
        {
          "name": "code",
          "schema": "string",
          "required": true,
          "description": "The code of the requisition",
          "example": "CODE"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/requisitions/{code}/approve",
      "method": "approveRequisition",
      "httpMethod": "patch",
      "tag": "Requisition",
      "typeScriptTag": "requisition",
      "description": "/requisitions/:code/approve",
      "parameters": [
        {
          "name": "code",
          "schema": "string",
          "required": true,
          "description": "The code of the requisition",
          "example": "CODE"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/requisitions/{code}/reject",
      "method": "rejectRequest",
      "httpMethod": "patch",
      "tag": "Requisition",
      "typeScriptTag": "requisition",
      "description": "/requisitions/:code/reject",
      "parameters": [
        {
          "name": "code",
          "schema": "string",
          "required": true,
          "description": "The code of the requisition",
          "example": "CODE"
        },
        {
          "name": "rejection_reason",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/offers/{id}",
      "method": "get",
      "httpMethod": "get",
      "tag": "Offer",
      "typeScriptTag": "offer",
      "description": "/offers/:id",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the offer",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/offers/{id}/approve (COPY)",
      "method": "approveAction",
      "httpMethod": "patch",
      "tag": "Offer",
      "typeScriptTag": "offer",
      "description": "/offers/:id/approve",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the offer",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/offers/{id}/reject",
      "method": "rejectOffer",
      "httpMethod": "patch",
      "tag": "Offer",
      "typeScriptTag": "offer",
      "description": "/offers/:id/reject",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the offer",
          "example": "ID"
        },
        {
          "name": "rejection_reason",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/jobs",
      "method": "collectionGet",
      "httpMethod": "get",
      "tag": "Job",
      "typeScriptTag": "job",
      "description": "/jobs",
      "parameters": [
        {
          "name": "state",
          "schema": "string",
          "description": "Returns jobs with the current state. Possible values (draft, published, archived & closed)."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Specifies the number of jobs to try and retrieve per page (optional)",
          "default": 50
        },
        {
          "name": "sinceId",
          "schema": "string",
          "description": "Returns results with an ID greater than or equal to the specified ID. (optional)"
        },
        {
          "name": "maxId",
          "schema": "string",
          "description": "Returns results with an ID less than or equal to the specified ID. (optional)"
        },
        {
          "name": "createdAfter",
          "schema": "string",
          "description": "Returns results created after the specified timestamp. (optional)"
        },
        {
          "name": "updatedAfter",
          "schema": "string",
          "description": "Returns results updated after the specified timestamp."
        },
        {
          "name": "includeFields",
          "schema": "string",
          "description": "Includes additional fields in each job (description, full_description, requirements and benefits)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/jobs/{shortcode}",
      "method": "getDetails",
      "httpMethod": "get",
      "tag": "Job",
      "typeScriptTag": "job",
      "description": "/jobs/:shortcode",
      "parameters": [
        {
          "name": "shortcode",
          "schema": "string",
          "required": true,
          "description": "The job's shortcode",
          "example": "SHORTCODE"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/jobs/{shortcode}/activities",
      "method": "getActivityStream",
      "httpMethod": "get",
      "tag": "Job",
      "typeScriptTag": "job",
      "description": "/jobs/:shortcode/activities",
      "parameters": [
        {
          "name": "shortcode",
          "schema": "string",
          "required": true,
          "description": "The job's shortcode",
          "example": "SHORTCODE"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Specifies the number of members to try and retrieve per page (optional)",
          "default": 50
        },
        {
          "name": "sinceId",
          "schema": "string",
          "description": "Returns results with an ID greater than or equal to the specified ID. (optional)"
        },
        {
          "name": "maxId",
          "schema": "string",
          "description": "Returns results with an ID less than or equal to the specified ID. (optional)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/jobs/{shortcode}/application_form",
      "method": "form",
      "httpMethod": "get",
      "description": "/jobs/:shortcode/application_form",
      "parameters": [
        {
          "name": "shortcode",
          "schema": "string",
          "required": true,
          "description": "The job's shortcode",
          "example": "SHORTCODE"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/jobs/{shortcode}/questions",
      "method": "getQuestions",
      "httpMethod": "get",
      "tag": "Job",
      "typeScriptTag": "job",
      "description": "/jobs/:shortcode/questions",
      "parameters": [
        {
          "name": "shortcode",
          "schema": "string",
          "required": true,
          "description": "The job's shortcode",
          "example": "SHORTCODE"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/jobs/{shortcode}/stages",
      "method": "getStages",
      "httpMethod": "get",
      "tag": "Job",
      "typeScriptTag": "job",
      "description": "/jobs/:shortcode/stages",
      "parameters": [
        {
          "name": "shortcode",
          "schema": "string",
          "required": true,
          "description": "The job's shortcode",
          "example": "SHORTCODE"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/jobs/{shortcode}/custom_attributes",
      "method": "getCustomAttributes",
      "httpMethod": "get",
      "tag": "Job",
      "typeScriptTag": "job",
      "description": "/jobs/:shortcode/custom_attributes",
      "parameters": [
        {
          "name": "shortcode",
          "schema": "string",
          "required": true,
          "description": "The job's shortcode",
          "example": "SHORTCODE"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/jobs/{shortcode}/members",
      "method": "getMembers",
      "httpMethod": "get",
      "tag": "Member",
      "typeScriptTag": "member",
      "description": "/jobs/:shortcode/members",
      "parameters": [
        {
          "name": "shortcode",
          "schema": "string",
          "required": true,
          "description": "The job's shortcode",
          "example": "SHORTCODE"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/jobs/{shortcode}/recruiters",
      "method": "getRecruiters",
      "httpMethod": "get",
      "tag": "Job",
      "typeScriptTag": "job",
      "description": "/jobs/:shortcode/recruiters",
      "parameters": [
        {
          "name": "shortcode",
          "schema": "string",
          "required": true,
          "description": "The job's shortcode",
          "example": "SHORTCODE"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/candidates",
      "method": "listCandidates",
      "httpMethod": "get",
      "tag": "Candidate",
      "typeScriptTag": "candidate",
      "description": "/candidates",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "description": "The email of the candidate to filter by"
        },
        {
          "name": "shortcode",
          "schema": "string",
          "description": "The job's system generated code"
        },
        {
          "name": "stage",
          "schema": "string",
          "description": "The job's stage slug, can be retrieved from the `/stages` endpoint"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Specifies the number of candidates to try and retrieve per page"
        },
        {
          "name": "sinceId",
          "schema": "string",
          "description": "Returns results with an ID greater than or equal to the specified ID."
        },
        {
          "name": "maxId",
          "schema": "string",
          "description": "Returns results with an ID less than or equal to the specified ID."
        },
        {
          "name": "createdAfter",
          "schema": "string",
          "description": "Returns results created after the specified timestamp."
        },
        {
          "name": "updatedAfter",
          "schema": "string",
          "description": "Returns results updated after the specified timestamp."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/candidates",
      "method": "updatePartialCandidate",
      "httpMethod": "patch",
      "tag": "Candidate",
      "typeScriptTag": "candidate",
      "description": "/candidates/:id",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The candidate's id",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/jobs/{shortcode}/candidates",
      "method": "createCandidateAtJob",
      "httpMethod": "post",
      "tag": "Job",
      "typeScriptTag": "job",
      "description": "/candidates",
      "parameters": [
        {
          "name": "stage",
          "schema": "string",
          "description": "Depending on the value of the `sourced` flag, candidates are put into the `sourced` or `applied` stage. But you can set this if you want to create a candidate directly in another stage. Values can be retrieved from the `jobs/:shortcode/stages` endpoint"
        },
        {
          "name": "shortcode",
          "schema": "string",
          "required": true,
          "description": "The job's shortcode",
          "example": "SHORTCODE"
        },
        {
          "name": "RAW_BODY",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/talent_pool/{stage}/candidates",
      "method": "createCandidate",
      "httpMethod": "post",
      "tag": "Stage",
      "typeScriptTag": "stage",
      "description": "/talent_pool/candidates",
      "parameters": [
        {
          "name": "stage",
          "schema": "string",
          "description": "Depending on the value of the `sourced` flag, candidates are put into the `sourced` or `applied` stage. But you can set this if you want to create a candidate directly in another stage. Values can be retrieved from the `jobs/:shortcode/stages` endpoint"
        },
        {
          "name": "RAW_BODY",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/candidates/{id}",
      "method": "getCandidateById",
      "httpMethod": "get",
      "tag": "Candidate",
      "typeScriptTag": "candidate",
      "description": "/candidates/:id",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The candidates's id",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/candidates/{id}/activities",
      "method": "getActivityStream",
      "httpMethod": "get",
      "tag": "Candidate",
      "typeScriptTag": "candidate",
      "description": "/candidates/:id/activities",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The candidate's id",
          "example": "ID"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Specifies the number of activities to try and retrieve per page (optional)",
          "default": 50
        },
        {
          "name": "sinceId",
          "schema": "string",
          "description": "Returns results with an ID greater than or equal to the specified ID. (optional)"
        },
        {
          "name": "maxId",
          "schema": "string",
          "description": "Returns results with an ID less than or equal to the specified ID. (optional)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/candidates/{id}/offer",
      "method": "getOfferData",
      "httpMethod": "get",
      "tag": "Candidate",
      "typeScriptTag": "candidate",
      "description": "/candidates/:id/offer",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The candidate's id",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/candidates/{id}/comments",
      "method": "createComment",
      "httpMethod": "post",
      "tag": "Candidate",
      "typeScriptTag": "candidate",
      "description": "/candidates/:id/comments",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The candidate's id",
          "example": "ID"
        },
        {
          "name": "member_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "MEMBER_ID"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "COMMENT"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/candidates/{id}/tags",
      "method": "updateTags",
      "httpMethod": "put",
      "tag": "Candidate",
      "typeScriptTag": "candidate",
      "description": "/candidates/:id/tags",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The candidate's id",
          "example": "ID"
        },
        {
          "name": "tags",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/candidates/{id}/disqualify",
      "method": "disqualifyCandidate",
      "httpMethod": "post",
      "tag": "Candidate",
      "typeScriptTag": "candidate",
      "description": "/candidates/:id/disqualify",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The candidate's id",
          "example": "ID"
        },
        {
          "name": "member_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "MEMBER_ID"
        },
        {
          "name": "disqualification_reason",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/candidates/{id}/revert",
      "method": "revertDisqualification",
      "httpMethod": "post",
      "tag": "Candidate",
      "typeScriptTag": "candidate",
      "description": "/candidates/:id/revert",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The candidate's id",
          "example": "ID"
        },
        {
          "name": "member_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "MEMBER_ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/candidates/{id}/copy",
      "method": "copyToJob",
      "httpMethod": "post",
      "tag": "Candidate",
      "typeScriptTag": "candidate",
      "description": "/candidates/:id/copy",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The candidate's id",
          "example": "ID"
        },
        {
          "name": "member_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "MEMBER_ID"
        },
        {
          "name": "target_job_shortcode",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "TARGET_JOB_SHORTCODE"
        },
        {
          "name": "target_stage",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/candidates/{id}/relocate",
      "method": "relocateCandidateToJob",
      "httpMethod": "post",
      "tag": "Candidate",
      "typeScriptTag": "candidate",
      "description": "/candidates/:id/relocate",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The candidate's id",
          "example": "ID"
        },
        {
          "name": "member_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "MEMBER_ID"
        },
        {
          "name": "target_job_shortcode",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "TARGET_JOB_SHORTCODE"
        },
        {
          "name": "target_stage",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/candidates/{id}/move",
      "method": "moveToStage",
      "httpMethod": "post",
      "tag": "Candidate",
      "typeScriptTag": "candidate",
      "description": "/candidates/:id/move",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The candidate's id",
          "example": "ID"
        },
        {
          "name": "member_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "MEMBER_ID"
        },
        {
          "name": "target_stage",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "fill_reserved_requisition",
          "schema": "boolean",
          "required": false,
          "description": "",
          "default": false
        },
        {
          "name": "requisition",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/candidates/{id}/ratings",
      "method": "createRating",
      "httpMethod": "post",
      "tag": "Candidate",
      "typeScriptTag": "candidate",
      "description": "/candidates/:id/ratings",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The candidate's id",
          "example": "ID"
        },
        {
          "name": "member_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "MEMBER_ID"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "score",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/candidates/{id}/update_custom_attribute_value",
      "method": "updateCustomAttributeValue",
      "httpMethod": "patch",
      "tag": "Candidate",
      "typeScriptTag": "candidate",
      "description": "/candidates/:id/update_custom_attribute_value",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The candidate's id",
          "example": "ID"
        },
        {
          "name": "custom_attribute_key",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "CUSTOM_ATTRIBUTE_KEY"
        },
        {
          "name": "checked",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "value",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "file",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "file_url",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "date",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "choices",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/custom_attributes",
      "method": "attributes",
      "httpMethod": "get",
      "description": "/custom_attributes",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/events",
      "method": "collectionGet",
      "httpMethod": "get",
      "tag": "Event",
      "typeScriptTag": "event",
      "description": "/events",
      "parameters": [
        {
          "name": "type",
          "schema": "string",
          "description": "Returns events of the provided type. Available types are (call, interview & meeting)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Specifies the number of jobs to try and retrieve per page (optional)",
          "default": 50
        },
        {
          "name": "sinceId",
          "schema": "string",
          "description": "Returns results with an ID greater than or equal to the specified ID. (optional)"
        },
        {
          "name": "maxId",
          "schema": "string",
          "description": "Returns results with an ID less than or equal to the specified ID. (optional)"
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": "Returns events that are scheduled for after the specified date"
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "Returns events that are scheduled for before the specified date"
        },
        {
          "name": "candidateId",
          "schema": "string",
          "description": "Filters events for specified candidate"
        },
        {
          "name": "shortcode",
          "schema": "string",
          "description": "Filters events for specified job shortcode"
        },
        {
          "name": "memberId",
          "schema": "string",
          "description": "Filters events for specified member"
        },
        {
          "name": "context",
          "schema": "string",
          "description": "Specifies the source of the events fetched (applicable only for user tokens) `user`: Events the user is attending (default). `team`: All events that are for candidates in jobs the user is collaborating in. `all`: All scheduled events in the account for candidates the user has access to."
        },
        {
          "name": "includeCancelled",
          "schema": "boolean",
          "description": "When set `true` will also include cancelled events",
          "default": false
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/events/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Event",
      "typeScriptTag": "event",
      "description": "/events/:id",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The id of the event",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/employees",
      "method": "list",
      "httpMethod": "get",
      "tag": "Employee",
      "typeScriptTag": "employee",
      "description": "/employees",
      "parameters": [
        {
          "name": "subdomain",
          "schema": "string",
          "required": true,
          "description": "The account subdomain",
          "example": "SUBDOMAIN"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Limits the number of the returned results",
          "default": 10
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "Skips the first n entries. Using limit and offset one can navigate through the entire employee database",
          "default": 0
        },
        {
          "name": "query",
          "schema": "string",
          "description": "Query the list using firstname, lastname and email"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "description": "Optional query param to order by division or department"
        },
        {
          "name": "memberId",
          "schema": "string",
          "description": "Optional member_id that can be retrieved by GET /members. Needed to see information with elevated access."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/employees",
      "method": "createNewEmployee",
      "httpMethod": "post",
      "tag": "Employee",
      "typeScriptTag": "employee",
      "description": "/employees",
      "parameters": [
        {
          "name": "subdomain",
          "schema": "string",
          "required": true,
          "description": "The account subdomain",
          "example": "SUBDOMAIN"
        },
        {
          "name": "memberId",
          "schema": "string",
          "description": "Optional value, this can be retrieved by GET /members endpoint"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/employee_fields",
      "method": "fields",
      "httpMethod": "get",
      "description": "/employee_fields",
      "parameters": [
        {
          "name": "subdomain",
          "schema": "string",
          "required": true,
          "description": "The account subdomain",
          "example": "SUBDOMAIN"
        },
        {
          "name": "memberId",
          "schema": "string",
          "description": "Optional member id that can be derived from GET /members endpoint"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/employees/{id}",
      "method": "getDetails",
      "httpMethod": "get",
      "tag": "Employee",
      "typeScriptTag": "employee",
      "description": "/employees/:id",
      "parameters": [
        {
          "name": "subdomain",
          "schema": "string",
          "required": true,
          "description": "The account subdomain",
          "example": "SUBDOMAIN"
        },
        {
          "name": "memberId",
          "schema": "string",
          "description": "Optional member id for user tokens. Required for account tokens. Members endpoint GET /members"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The employee id",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/employees/{id}",
      "method": "updateExistingEmployee",
      "httpMethod": "patch",
      "tag": "Employee",
      "typeScriptTag": "employee",
      "description": "/employees/:id",
      "parameters": [
        {
          "name": "subdomain",
          "schema": "string",
          "required": true,
          "description": "The account subdomain",
          "example": "SUBDOMAIN"
        },
        {
          "name": "memberId",
          "schema": "string",
          "description": "Optional value, this can be retrieved by GET /members endpoint"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The employee id",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/employees/{id}/documents",
      "method": "getDocuments",
      "httpMethod": "get",
      "tag": "Employee",
      "typeScriptTag": "employee",
      "description": "/employees/:id/documents",
      "parameters": [
        {
          "name": "subdomain",
          "schema": "string",
          "required": true,
          "description": "The account subdomain",
          "example": "SUBDOMAIN"
        },
        {
          "name": "memberId",
          "schema": "string",
          "description": "Optional member id for user tokens. Required for account tokens. Members endpoint GET /members"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The employee id",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/employees/{id}/documents",
      "method": "uploadDocuments",
      "httpMethod": "post",
      "tag": "Employee",
      "typeScriptTag": "employee",
      "description": "/employees/:id/documents",
      "parameters": [
        {
          "name": "subdomain",
          "schema": "string",
          "required": true,
          "description": "The account subdomain",
          "example": "SUBDOMAIN"
        },
        {
          "name": "memberId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The employee id",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/work_schedules",
      "method": "schedules",
      "httpMethod": "get",
      "description": "/work_schedules",
      "parameters": [
        {
          "name": "subdomain",
          "schema": "string",
          "required": true,
          "description": "The account subdomain",
          "example": "SUBDOMAIN"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions",
      "method": "listAccessible",
      "httpMethod": "get",
      "tag": "Subscription",
      "typeScriptTag": "subscription",
      "description": "/subscriptions",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions",
      "method": "registerEventSubscription",
      "httpMethod": "post",
      "tag": "Subscription",
      "typeScriptTag": "subscription",
      "description": "/subscriptions",
      "parameters": [
        {
          "name": "target",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "TARGET"
        },
        {
          "name": "event",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "EVENT"
        },
        {
          "name": "args",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions/{id}",
      "method": "unsubscribeEvent",
      "httpMethod": "delete",
      "tag": "Subscription",
      "typeScriptTag": "subscription",
      "description": "/subscriptions/:id",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the webhook subscription",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/accounts/{subdomain}/locations",
      "method": "publicJobLocationsGet",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "api/accounts/:subdomain/locations",
      "parameters": [
        {
          "name": "subdomain",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "SUBDOMAIN"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/accounts/{subdomain}/departments",
      "method": "getDepartmentCollection",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "api/accounts/:subdomain/departments",
      "parameters": [
        {
          "name": "subdomain",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "SUBDOMAIN"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    }
  ],
  "repositoryDescription": "Workable develops a cloud-based recruitment platform for companies to post jobs, track applicants and schedule interviews. Workable's {language} SDK generated by Konfig (https://konfigthis.com/).",
  "logo": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/workable/logo.png",
  "openApiRaw": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/workable/openapi.yaml",
  "openApiGitHubUi": "https://github.com/konfig-sdks/openapi-examples/tree/HEAD/workable/openapi.yaml",
  "previewLinkImage": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/workable/imagePreview.png",
  "faviconUrl": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/workable/favicon.png",
  "clientNameCamelCase": "workable",
  "lastUpdated": "2024-08-21T00:16:39.755Z",
  "typescriptSdkUsageCode": "import { Workable } from 'workable-typescript-sdk';\n\nconst workable = new Workable({\n    sec0: \"AUTHORIZATION\"\n})",
  "typescriptSdkFirstRequestCode": "// /accounts\nconst listAccessibleResponse = workable.account.listAccessible()",
  "fixedSpecFileName": "workable-fixed-spec.yaml"
}