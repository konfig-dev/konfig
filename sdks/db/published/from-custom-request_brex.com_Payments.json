{
  "securitySchemes": {
    "OAuth2": {
      "type": "oauth2",
      "description": "OAuth2 security scheme",
      "flows": {
        "authorizationCode": {
          "authorizationUrl": "https://accounts-api.brex.com/oauth2/default/v1/authorize",
          "tokenUrl": "https://accounts-api.brex.com/oauth2/default/v1/token",
          "scopes": {
            "openid": "openid",
            "offline_access": "offline access",
            "vendors": "View and manage vendor data",
            "vendors.readonly": "View vendor data",
            "transfers": "View and manage transfer data",
            "transfers.readonly": "View transfer data",
            "incoming_transfers": "View and manage incoming transfer data",
            "linked_accounts.readonly": "View linked accounts"
          }
        }
      }
    }
  },
  "apiBaseUrl": "https://platform.brexapis.com",
  "apiVersion": "1.0",
  "apiDescription": "\nThe payments API allows you to initiate and manage payments and vendors from your Brex business accounts.\n",
  "apiTitle": "Payments API",
  "endpoints": 6,
  "sdkMethods": 10,
  "schemas": 58,
  "parameters": 34,
  "contactUrl": "https://brex.com",
  "contactEmail": "developer-access@brex.com",
  "originalCustomRequest": {
    "lambda": true
  },
  "customRequestSpecFilename": "brex.com_Payments.yaml",
  "difficultyScore": 47.5,
  "difficulty": "Easy",
  "company": "Brex",
  "serviceName": "Payments",
  "sdkName": "brex-payments-{language}-sdk",
  "clientName": "BrexPayments",
  "metaDescription": "Brex is the AI-powered spend platform. We transform finance teams from reactive no-sayers to proactive growth drivers. With Brex, companies spend with confidence by empowering employees to make smarter financial decisions from anywhere. Brex provides corporate cards, business accounts, and global payments, plus intuitive software for travel and expenses, that make it easy to plan and track all company spend in one place, in real time. Over 20,000 companies from startups to global enterprises — including DoorDash, Flexport, and Compass — use Brex to proactively control spend, reduce costs, and increase efficiency on a global scale.",
  "useNewPage": true,
  "apiStatusUrls": "inherit",
  "homepage": "brex.com",
  "developerDocumentation": "developer.brex.com/openapi/payments_api/",
  "categories": [
    "finance",
    "payments",
    "online_payments",
    "fintech",
    "automation",
    "global_payments",
    "travel_expenses",
    "banking"
  ],
  "methods": [
    {
      "url": "/v1/incoming_transfers",
      "method": "createIncomingTransfer",
      "httpMethod": "post",
      "tag": "Transfers",
      "typeScriptTag": "transfers",
      "description": "\nCreate incoming transfer\n",
      "parameters": [
        {
          "name": "idempotencyKey",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "IDEMPOTENCY-KEY"
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "DESCRIPTION"
        },
        {
          "name": "counterparty",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "receiving_account",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "amount",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/linked_accounts",
      "method": "list",
      "httpMethod": "get",
      "tag": "Linked Accounts",
      "typeScriptTag": "linkedAccounts",
      "description": "\nLists linked accounts\n",
      "parameters": [
        {
          "name": "cursor",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Bad request"
        },
        {
          "statusCode": "401",
          "description": "Unauthorized"
        },
        {
          "statusCode": "403",
          "description": "Forbidden"
        }
      ]
    },
    {
      "url": "/v1/transfers",
      "method": "list",
      "httpMethod": "get",
      "tag": "Transfers",
      "typeScriptTag": "transfers",
      "description": "\nLists transfers \n",
      "parameters": [
        {
          "name": "cursor",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Bad request"
        },
        {
          "statusCode": "401",
          "description": "Unauthorized"
        },
        {
          "statusCode": "403",
          "description": "Forbidden"
        },
        {
          "statusCode": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "url": "/v1/transfers",
      "method": "createTransfer",
      "httpMethod": "post",
      "tag": "Transfers",
      "typeScriptTag": "transfers",
      "description": "\nCreate transfer\n",
      "parameters": [
        {
          "name": "idempotencyKey",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "IDEMPOTENCY-KEY"
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "DESCRIPTION"
        },
        {
          "name": "counterparty",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "amount",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "external_memo",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "EXTERNAL_MEMO"
        },
        {
          "name": "originating_account",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "approval_type",
          "schema": "undefined",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/transfers/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Transfers",
      "typeScriptTag": "transfers",
      "description": "\nGet transfer\n",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Bad request"
        },
        {
          "statusCode": "401",
          "description": "Unauthorized"
        },
        {
          "statusCode": "403",
          "description": "Forbidden"
        },
        {
          "statusCode": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "url": "/v1/vendors",
      "method": "list",
      "httpMethod": "get",
      "tag": "Vendors",
      "typeScriptTag": "vendors",
      "description": "\nLists vendors \n",
      "parameters": [
        {
          "name": "cursor",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Bad request"
        },
        {
          "statusCode": "401",
          "description": "Unauthorized"
        },
        {
          "statusCode": "403",
          "description": "Forbidden"
        }
      ]
    },
    {
      "url": "/v1/vendors",
      "method": "createNewVendor",
      "httpMethod": "post",
      "tag": "Vendors",
      "typeScriptTag": "vendors",
      "description": "\nCreate vendor\n",
      "parameters": [
        {
          "name": "idempotencyKey",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "IDEMPOTENCY-KEY"
        },
        {
          "name": "company_name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "COMPANY_NAME"
        },
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "phone",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "payment_accounts",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/vendors/{id}",
      "method": "deleteVendorById",
      "httpMethod": "delete",
      "tag": "Vendors",
      "typeScriptTag": "vendors",
      "description": "\nDelete vendor.\n",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "deleteVendor 200 response"
        }
      ]
    },
    {
      "url": "/v1/vendors/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Vendors",
      "typeScriptTag": "vendors",
      "description": "\nGet vendor\n",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Bad request"
        },
        {
          "statusCode": "401",
          "description": "Unauthorized"
        },
        {
          "statusCode": "403",
          "description": "Forbidden"
        },
        {
          "statusCode": "500",
          "description": "Internal server error"
        }
      ]
    },
    {
      "url": "/v1/vendors/{id}",
      "method": "updateById",
      "httpMethod": "put",
      "tag": "Vendors",
      "typeScriptTag": "vendors",
      "description": "Update vendor",
      "parameters": [
        {
          "name": "idempotencyKey",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "ID"
        },
        {
          "name": "company_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "phone",
          "schema": "string",
          "description": ""
        },
        {
          "name": "payment_accounts",
          "schema": "array",
          "description": ""
        },
        {
          "name": "beneficiary_name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    }
  ],
  "repositoryDescription": "Brex empowers finance teams with AI-powered spend platform. Companies spend confidently with corporate cards, business accounts, global payments, and intuitive software. Over 20,000 companies use Brex for proactive spend control and efficiency. Brex's {language} SDK for Payments API generated by Konfig (https://konfigthis.com/).",
  "logo": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/brex/payments/logo.png",
  "openApiRaw": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/brex/payments/openapi.yaml",
  "openApiGitHubUi": "https://github.com/konfig-sdks/openapi-examples/tree/HEAD/brex/payments/openapi.yaml",
  "previewLinkImage": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/brex/payments/imagePreview.jpg",
  "faviconUrl": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/brex/payments/favicon.png",
  "clientNameCamelCase": "brexPayments",
  "lastUpdated": "2024-03-13T22:23:48.955Z",
  "typescriptSdkUsageCode": "import { BrexPayments } from 'brex-payments-typescript-sdk';\n\nconst brexPayments = new BrexPayments({\n    // OAuth2 security scheme\n    clientId: \"CLIENT_ID\",\n    clientSecret: \"CLIENT_SECRET\",\n    redirectUri: \"REDIRECT_URI\",\n})",
  "typescriptSdkFirstRequestCode": "// Create incoming transfer\nconst createIncomingTransferResponse = brexPayments.transfers.createIncomingTransfer({\n    idempotencyKey: \"IDEMPOTENCY-KEY\"\n    description: \"DESCRIPTION\"\n})",
  "fixedSpecFileName": "brex-payments-fixed-spec.yaml"
}