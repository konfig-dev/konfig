{
  "securitySchemes": {
    "Basic-Auth": {
      "type": "http",
      "scheme": "basic",
      "description": "The Data Pipelines API uses a basic authentication scheme with your API key. Because basic authorization typically expects a username and password combination, you'll use the API Key as the username and leave the password blank—base64 encoding your credentials in the format `API_key:`. \n"
    }
  },
  "apiBaseUrl": "https://cdp.customer.io/v1",
  "apiVersion": "1.0.0",
  "apiDescription": "This is a reference for the Data Pipelines API. In general, you'll consume this API through one of our source libraries—our JavaScript client library or any of our server packages. But you can also integrate directly with our REST API if you don't want to install one of our libraries or you want to support a source that we don't have a native integration with.\n\n**All endpoints begin with: `https://cdp.customer.io/v1`**\n\n<div class=\"fly-panel fly-light regionUS\">\n<div class=\"fly-panel-body us-server\">\n<p class=\"text--bold\">You're looking at our US regional endpoints</p>\n<p>The only difference in our US and European Union (EU) regions is the subdomain—e.g. <code>cdp-eu</code> for the EU region; there are no other differences between the two regions. If your account is based in the European Union (EU) data center, <a id='eu-anchor' onClick=\"anchorToRegion(this.id)\">click here</a> to show EU endpoints in our code samples and documentation below.</p>\n<p>If you don't know your region, you can <b>find your account region</b> on <a href=\"https://fly.customer.io/settings/privacy\">your account's privacy page</a>, or <a href=\"#operation/getRegion\">get your region using the API</a>.</p>\n</div>\n<div class=\"fly-panel-body eu-server\">\n<p class=\"text--bold\">You're looking at our EU regional endpoints</p>\n<p>The only difference in our US and European Union (EU) regions is the subdomain—e.g. <code>cdp</code> for our US region rather than <code>cdp-eu</code> for the EU; there are no other differences between the two regions. If your account is based in the European Union (EU) data center, you can <a id='us-anchor' onClick=\"anchorToRegion(this.id)\">click here</a> to to show US endpoints in our code samples and documentation below.</p>\n<p>If you don't know your region, you can <b>find your account region</b> on <a href=\"https://fly.customer.io/settings/privacy\">your account's privacy page</a>, or <a href=\"#operation/getRegion\">get your region using the API</a>.</p>\n</div></div>\n\n# API region\n\nWe host services in the United States (US) and European Union (EU, host subdomains are suffixed with `-eu`). Select the appropriate region for server addresses that apply to your region. \n\nIf you're in our EU region, you'll need to specify the EU URL when you initialize our server-side libraries. If you use our JavaScript client library, we'll set your region and route data/calls automatically.\n\n# Set up a REST API source\n\nAfter you add a Rest API source, you'll use endpoints at `https://cdp.customer.io/v1/{method}`\n\n1. Go to the <svg class=\"icon\"><use href=\"#connection\" /></svg> tab and click **Sources**.\n1. Click **Add Source**, pick **HTTP**, and click **Next**.\n1. Give the source a *Name* and copy your *API Key*. You'll use this key to authenticate with our API. If you don't copy the key now, you can always get it later from the *Settings* tab when you're done setting up your source. \n1. (Optional) Test your connection by sending a test call. You can copy your API key into an app like Postman or send a CURL request. If your request is successful, and then you click *Test Connection* we'll let you know if your request was successful and you've set up your HTTP implementation successfully.\n1. Click **Submit**.\n  \nNow you can connect your REST API source to destinations.\n\n# Try out our postman collection\n\nWe've generated a Postman collection with all of the endpoints organized as you'll find them on this page, with a starter environment (mainly to contain your API key). For our API endpoints, **your API key is your username and your password is blank**.\n\nYou'll notice that payloads on this page can contain significantly more information than the payloads that appear in our collection. We've limited our collections to the fields that you'll _typically_ use when you send calls to our APIs and libraries, so it's easier to get started. But you can add additional fields to payloads—like `context`, `integrations`, and so on—if you want.\n\nIf you fork this collection, you might want to disable the *Watch original collection* option. We automatically update our Postman collection whenever we release changes to our documentation, even if we don't change our APIs—which happens daily! Rather than being flooded with Postman notifications, you can check out our [Release Notes](https://customer.io/docs/api/cdp/) for updates to our APIs.\n\n<div class=\"postman-run-button\"\ndata-postman-action=\"collection/fork\"\ndata-postman-visibility=\"public\"\ndata-postman-var-1=\"23697545-287dd370-3d8b-4a71-80fe-75d6b7c7ff61\"\ndata-postman-collection-url=\"entityId=23697545-287dd370-3d8b-4a71-80fe-75d6b7c7ff61&entityType=collection&workspaceId=35e4a70d-66bd-4b3e-8a0c-57f9e32080dc\"\ndata-postman-param=\"env%5BCustomer.io%20Data%20Pipelines%20API%20Environment%5D=W3sia2V5IjoiY2RwX2FwaV91cmwiLCJ0eXBlIjoiZGVmYXVsdCIsInZhbHVlIjoiY2RwLmN1c3RvbWVyLmlvIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJ3cml0ZV9rZXkiLCJ0eXBlIjoic2VjcmV0IiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlfV0=\"></div>\n<script type=\"text/javascript\">\n  (function (p,o,s,t,m,a,n) {\n    !p[s] && (p[s] = function () { (p[t] || (p[t] = [])).push(arguments); });\n    !o.getElementById(s+t) && o.getElementsByTagName(\"head\")[0].appendChild((\n      (n = o.createElement(\"script\")),\n      (n.id = s+t), (n.async = 1), (n.src = m), n\n    ));\n  }(window, document, \"_pm\", \"PostmanRunObject\", \"https://run.pstmn.io/button.js\"));\n</script>\n\n# Authentication \n\nOur API uses basic authorization with an API Key provided when you set up a source. If you use Postman or another platform that helps you send API calls, this API key is the *Username*, and the *Password* is blank.\n\nOur sources are all authenticated using a **API Key** that we generate when you create a source.\n\n<SecurityDefinitions />\n\n# API limits\n\nA request is limited to 32KB. A batch request is limited to 500KB total and 32KB per call in the request. If a request exceeds these limits, you will receive a 200 response, but the request will not go through.\n\n# Backfilling data\n\nBy default, Customer.io records a `timestamp` when we receive requests. If you're sending data to Customer.io in real time, you don't need to worry about the timestamp.\n\nIf you want to backfill requests, you can send a `timestamp`—an ISO 8601 date-time string—telling us when the request occurred. This provides a way to log `track` and `page` calls when the activities _actually_ took place. \n\n# Schemas\n\nYou only need to populate a few fields when you send data to Customer.io. Our JavaScript client and server libraries populate additional information for each call, which you'll see when you look at individual events in Customer.io.\n\nThe information below shows the complete list of information reported to Customer.io with each event. \n\nSee the endpoints below this section for the much smaller list of fields you'll actually set when you invoke methods in our client and server-side libraries.\n\n## Identify Schema\n\nWhen you send an identify call, you'll typically include a `userId` and `traits`. Most other fields are populated by Customer.io—either by a source library or our servers.\n\nIf you provide an `anonymousId`, we'll attribute traits to an anonymous user. If you provide both an `anonymousId` and `userId`, we'll associate anonymous activity to the `userId`.\n\nTraits are the same as *Attributes* in Customer.io. If Customer.io Messaging is your destination, you'll see that traits map 1-to-1 with attributes. But not all systems call the things you know about people `traits` or `attributes`. You'll need to check with your destination to understand what your destination calls people-data!\n\n<SchemaDefinition schemaRef=\"#/components/schemas/identify\" />\n\n## Track Schema\n\nWhen you send a track call, you'll typically include the event name and additional properties you want to track. You can provide either an `anonymousId` or a `userId`. If you provide both, we attribute the activity to the `userId` and ignore the `anonymousId`.\n\nMost other fields are populated by Customer.io—either by a source library or our servers.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/track\" />\n\n## Page Schema\n\nA `page` call represents a pageview.\n\nPage events are automatically sent whenever you load our JavaScript library, which is typically every page. Customer.io automatically gathers the page name and URL, but you can pass additional properties, like the `category`. \n\nMost other fields are populated by Customer.io—either by a source library or our servers.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/page\" />\n\n## Screen Schema\n\nA `scren` call indicates that someone went to a screen in your mobile app.\n\nWe don't have mobile libraries supporting the `screen` method just yet, but we'll still accept calls with `type: \"screen\"` if you want to set up your own calls.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/screen\" />\n\n## Group Schema\n\nGroup events assign the identified person to a group. You'll typically pass the `groupId` that you want to associate a person with, and any `traits` that you want to assign to the group.\n\nMost other fields are populated by Customer.io—either by a source library or our servers.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/group\" />\n\n## Common fields\n\nThese are the fields that we augment incoming data with. The shape of this data may change depending on the type of call you make (identify, track, etc), and the source medium (client side javascript, mobile library, etc). We collect many of these values automatically, though you can override some of them. See individual methods below for information about which fields are accepted in requests.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/all_common_fields\" />\n\n## The Context object\n\nThese are fields that we collect automatically with requests—context for the request—but you can override these values.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/context\" />\n\n# Customer.io semantic event schemas\n\n```javascript\nanalytics.track(\"Device Created or Updated\", {\n  device: {\n    token: \"string\",\n    type: \"ios\"\n  }\n});\n```\n\nJourneys, our messaging automation tool, supports a number of actions that aren't immediately apparent from the API. For example, I can add a person using the `identify` function, but what if I want to remove a person? \n\nThat's what semantic events are for: they let you send `track` calls with a specific event name and payload to perform actions in Journeys. In general, the event names map directly to the thing you want to do: like `Create Device` or `Delete Person`.\n\n## Delete person\n\nRemove a person from your Customer.io environment. You might do this when someone cancels their subscription with you or otherwise leaves your service.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/delete_person\" />\n\n## Create or Update a Device\n\nAdd or update a device. If a device (represented by the `context.device.token`) exists, does not exist, we'll create it. If the device token already exists, we'll update the it.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/create_update_device\" />\n\n## Delete a Device\n\nDelete a device. You might do this when someone logs out of your app or otherwise removes a device.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/delete_device\" />\n\n## Delete a relationship\n\nRemove a relationship between a person and an object in Customer.io. This is basically the opposite of a `group` operation. Where objects represent things like accounts, companies, or online classes, you might delete a relationship when a person is no longer on an account, leaves a company, or drops a class.\n\nThis event requires a `groupId` and an `objectTypeId`. If you don't provide an `objectTypeId`, we'll assume it's `1`, but if the `groupId` with the associated objectTypeId` (defaulting to 1) does not exist, the event will _not_ remove a person from the group.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/relationship_deleted\" />\n\n## Delete a group (object)\n\nRemove a group (also called an \"object\") from Customer.io Journeys. Groups/objects represent things like accounts, companies, and online classes—non-people entities that people can be related to. You might delete a group when an account is closed, a company is acquired, or you stop offering a class.\n\nThis event requires a `groupId` and an `objectTypeId`. If you don't provide an `objectTypeId`, we'll assume it's `1`, but if the `groupId` with the associated `objectTypeId` (defaulting to 1) does not exist, the event will _not_ find and delete the `groupId`.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/group_deleted\" />\n\n## Suppress a person\n\nRemove a person from your Customer.io workspace _and_ prevent them from being added back to your workspace using the same identifier. In general you should **only send this event for compliance reasons**, like when someone invokes their right to be forgotten in accordance with GDPR or CAN-SPAM regulations.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/suppress_person\" />\n\n## Unsuppress a person\n\nAllow a userId to be added back to your Customer.io workspace. This does not restore information from a person you previously suppressed. It only allows you to add a person back to your workspace using the same identifier.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/unsuppress_person\" />\n\n## Report a message delivery\n\nReports delivery events for messages. In general, we use this event with our JavaScript snippet to report delivery events for in-app messages back to your Customer.io workspace.\n\nWhile Customer.io knows about messages that are sent, we use this event to determine when an in-app message is delivered, clicked, and so on. Each message contains a unique `deliveryId` that we trace back to the person, campaign/broadcast, and other items in your Customer.io workspace. \n\n<SchemaDefinition schemaRef=\"#/components/schemas/report_delivery_event\" />\n\n# A/B test event schemas\n\n ```javascript\nanalytics.track('Experiment Viewed', {\n  experiment_id: \"12345\",\n  experiment_name: \"Homepage Hero\",\n  variant_id: \"67890\",\n  variant_name: \"Hero B\"\n})\n```\nIf you `track` A/B tests, we recommend that you use the event name `Experiment Viewed` and `properties` listed below. Sending uniform events that conform to the schema defined here helps ensure that you can use any default actions that we set up for destinations that rely on A/B test events—now or with destinations we add in the future.\n\n<div style=\"height: 140px;\"></div>\n\n<SchemaDefinition schemaRef=\"#/components/schemas/experiment_viewed\" />\n\n# Ecommerce event schemas\n\n ```javascript\nanalytics.track('Product Viewed', {\n  product_id: \"coolshoes-123\"\n  sku: \"abc-123-xyz\"\n  category: \"shoes\"\n  name: \"Cool Shoes\"\n  brand: \"A Shoe Brand\"\n  variant: \"red\"\n  price: 139.99\n  quantity: 1\n  coupon: \"NEWUSER20\"\n  position: 3\n  url: \"https://www.example.com/product/123\"\n  image_url: \"https://www.example.com/product/123.jpg\"\n  currency: \"USD\"\n  value: 119.99\n})\n```\n\nWe've defined a set of `track` events that you can use to send ecommerce activity from your sources. Our default actions and data structures assume that you send ecommerce events in the shapes below. [Learn more about our ecommerce specification](https://customer.io/docs/api/cdp/).\n\nIf you send an event with a matching name and structure defined below (where the schemas below represents the `properties` object), destinations that rely on ecommerce events (like \"ad\" destinations) will already be set up with actions to handle your ecommerce source events. For example, sending the following `Product Viewed` event would automatically trigger an action in most of our \"ad\" destinations and handle all the fields in the event.\n\n**The title of each schema below is the name of the event you should pass in a `track` call**. \n\nWhile you can map ecommerce events however you want, we recommend that you use the events below to take advantage of our default actions and data structures. These events make it easy to send uniform data through data pipelines to your destinations.\n\n<div style=\"height: 140px;\"></div>\n\n## Products Searched\n\nSend `Products Searched` when a user searches for products.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/products_searched\" />\n\n## Product List Viewed\n\nSend the `Product List Viewed` event when a user views a product.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/product_viewed\" />\n\n## Product List Filtered\n\nSend the `Product List Filtered` event when a user filters a list of products.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/product_list_filtered\" />\n\n## Product Clicked\n\nSend the `Product Clicked` event when a user clicks a product.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/product_clicked\" />\n\n## Product Viewed\n\nSend the `Product Viewed` event when a user viewed a product. This might happen on a page, in a modal window, etc.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/product_clicked\" />\n\n## Product Added\n\nSend the `Product Added` event when a user adds a product to their cart.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/product_added\" />\n\n## Product Removed\n\nSend the `Product Removed` event when a user removes a product from their cart.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/product_removed\" />\n\n## Cart Viewed\n\nSend the `Cart Viewed` event when a user views their cart.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/cart_viewed\" />\n\n## Checkout Started\n\nSend the `Checkout Started` event when a user starts the checkout process.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/checkout_started\" />\n\n## Checkout Step Viewed\n\nSend the `Checkout Step Viewed` event when a user views a step in the checkout process.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/checkout_step_viewed\" />\n\n## Checkout Step Completed\n\nSend the `Checkout Step Completed` event when a user completes a step in the checkout process.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/checkout_step_completed\" />\n\n## Payment Info Entered\n\nSend the `Payment Info Entered` event when a user enters their payment information.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/payment_info_entered\" />\n\n## Order Completed\n\nSend the `Order Completed` event when a user completes an order.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/order_completed\" />\n\n## Order Updated\n\nSend the `Order Updated` event when a user updates an order.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/order_updated\" />\n\n## Order Refunded\n\nSend the `Order Refunded` event when you refund an order.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/order_refunded\" />\n\n## Order Cancelled\n\nSend the `Order Cancelled` event when a customer cancels an order.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/order_cancelled\" />\n\n## Promotion Viewed\n\nSend the `Promotion Viewed` event when a user views a promotion.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/promotion_viewed\" />\n\n## Promotion Clicked\n\nSend the `Promotion Clicked` event when a user clicks a promotion.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/promotion_clicked\" />\n\n## Coupon Entered\n\nSend the `Coupon Entered` event when a user enters a coupon.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/coupon_entered\" />\n\n## Coupon Applied\n\nSend the `Coupon Applied` event when you apply a coupon the customer entered to their order/transaction.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/coupon_applied\" />\n\n## Coupon Denied\n\nSend the `Coupon Denied` event when you deny a user's coupon. This might happen because the coupon code is invalid, expired, etc.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/coupon_denied\" />\n\n## Coupon Removed\n\nSend the `Coupon Removed` event when a user revmoes a coupon from their cart or order.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/coupon_removed\" />\n\n## Product Added to Wishlist\n\nSend the `Product Added to Wishlist` event when a user adds a product to their wishlist.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/product_added_to_wishlist\" />\n\n## Product Removed from Wishlist\n\nSend the `Product Removed from Wishlist` event when a user removes a product from their wishlist.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/product_removed_from_wishlist\" />\n\n## Wishlist Product Added to Cart\n\nSend the `Wishlist Product Added to Cart` event when a user adds a product from their wishlist to their cart.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/wishlist_product_added_to_cart\" />\n\n## Product Shared\n\nSend the `Product Shared` event when a user shares a product.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/product_shared\" />\n\n## Cart Shared\n\nSend the `Cart Shared` event when a user shares their cart.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/cart_shared\" />\n\n## Product Reviewed\n\nSend the `Product Reviewed` event when a user submits a review of a product.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/product_reviewed\" />    \n\n# Email event schemas\n\nIf you send events from an email service provider or another application that sends and tracks email, we recommend that you use events with the names and `properties` specified below. Sending uniform events that conform to the schemas defined here ensures that you can use any default actions that we set up for destinations that rely on email events—now or with destinations we add in the future.\n\n```json\n{\n  \"user_id\": \"020ba8yf4r\",\n  \"action\": \"track\",\n  \"event\": \"Email Delivered\",\n  \"context\": {\n    \"traits\": {\n      \"email\": \"cool.person@example.com\"\n    }\n  },\n  \"properties\": {\n    \"email_id\": \"18vzF7u3z\",\n    \"email_subject\": \"20% off: A token of our appreciation!\",\n    \"campaign_id\": \"abc123\",\n    \"campaign_name\": \"New Customer Discount\"\n  }\n}\n```\n\n<div style=\"height: 140px;\"></div>\n\n## Email Bounced\n\nThis event indicates that your email server/service provider couldn’t deliver a message to the recipient.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/email_event_bounced\" />\n\n## Email Delivered\n\n<SchemaDefinition schemaRef=\"#/components/schemas/email_event_delivered\" />    \n\n## Email Opened\n\n<SchemaDefinition schemaRef=\"#/components/schemas/email_event_opened\" />    \n\n## Email Link Clicked\n\n<SchemaDefinition schemaRef=\"#/components/schemas/email_event_link_clicked\" />    \n\n## Email Marked as Spam\n\n<SchemaDefinition schemaRef=\"#/components/schemas/email_event_marked_as_spam\" />    \n\n## Email Unsubscribed\n\n<SchemaDefinition schemaRef=\"#/components/schemas/email_event_unsubscribed\" />    \n\n# Live chat event schemas\n\n```javascript\nanalytics.track('Experiment Viewed', {\n  experiment_id: \"12345\",\n  experiment_name: \"Homepage Hero\",\n  variant_id: \"67890\",\n  variant_name: \"Hero B\"\n})\n```\nIf you send events from a live chat application, we recommend that you use events with the names and `properties` specified below. Sending uniform events that conform to the schemas defined here ensures that you can use any default actions that we set up for destinations that rely on Live Chat events—now or with destinations we add in the future.\n\n<div style=\"height: 140px;\"></div>\n\n## Live Chat Conversation Started\n\nSend this event when a user begins a conversation with you or your team (the \"agent\").\n\n<SchemaDefinition schemaRef=\"#/components/schemas/live_chat_conversation_started\" />\n\n## Live Chat Conversation Ended\n\nSend this event when you or a user ends a conversation.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/live_chat_conversation_ended\" />\n\n## Live Chat Message Sent\n\nSend this event when an agent sends a message to a customer/user.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/live_chat_message_sent\" />\n\n## Live Chat Message Received\n\nSend this event when you receive a message from a customer/user.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/live_chat_message_received\" />\n\n# Video events\n\n```javascript\nanalytics.track('Experiment Viewed', {\n  experiment_id: \"12345\",\n  experiment_name: \"Homepage Hero\",\n  variant_id: \"67890\",\n  variant_name: \"Hero B\"\n})\n```\nIf you send events from a live chat application, we recommend that you use events with the names and `properties` specified below. Sending uniform events that conform to the schemas defined here ensures that you can use any default actions that we set up for destinations that rely on Live Chat events—now or with destinations we add in the future.\n\n## Video playback started\n\nWhen a user presses Play; after the last user action required for playback to begin (for example, after user login/authentication).\n\n<SchemaDefinition schemaRef=\"#/components/schemas/video_playback_started\" />\n\n## Video playback paused\n\nWhen a user pauses playback.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/video_playback_paused\" />\n\n## Video playback interrupted\n  \nWhen a user is watching a video and playback is interrupted by an error, network loss, or buffering. With this event, you can send a `method` to indicate the reason for the interruption.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/video_playback_interrupted\" />\n\n## Video playback buffer started\n\nSend this event when playback begins buffering content or an ad.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/video_playback_buffer_started\" />\n\n## Video playback buffer completed\n\nSend this event when buffering finishes.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/video_playback_buffer_completed\" />\n\n## Video playback seek started\n\nSend this event when a user begins seeking to a new position in the video. Use `position` to show where the user begins seeking from and `seek_position` to capture where the user ends.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/video_playback_seek_started\" />\n\n## Video playback seek completed\n\nAfter a user manually seeks to a certain position of the content or ad in the playback. Pass in the position property to denote where the user desires to begin the playback from.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/video_playback_seek_completed\" />\n\n## Video playback resumed\n\nSend this event when a user resumes playback after they previously paused playback.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/video_playback_resumed\" />\n\n## Video playback completed\n\nSend this event when a user finishes a playback session.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/video_playback_completed\" />\n\n## Video playback exited\n\nSend this event when a user navigates away from a playback/stream (scrolls out of view, goes to a different page, etc).\n\n<SchemaDefinition schemaRef=\"#/components/schemas/video_playback_exited\" />\n\n## Video content started\n\nSend this event when a user begins watching a video content within a playback session.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/video_content_started\" />\n\n## Video content playing\n\nSend this event as a heartbeat on a regular interval to track how far into the video a person is (indicated by the `position`).\n\n<SchemaDefinition schemaRef=\"#/components/schemas/video_content_playing\" />\n\n## Video content completed\n\nSend this event when a user finishes watching a video content within a playback session—`position` and `total_length` are equal.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/video_content_completed\" />\n\n## Video ad started \n\nSend this event when a user begins watching an ad within a playback session.\n\n## Video ad playing\n\nSend this event as a heartbeat on a regular interval to track how far into the ad a person is (indicated by the `position`).\n\n<SchemaDefinition schemaRef=\"#/components/schemas/video_ad_playing\" />\n\n## Video ad completed\n\nSend this event when a user finishes watching an ad within a playback session—`position` and `total_length` are equal.\n",
  "apiTitle": "Data Pipelines API",
  "endpoints": 7,
  "sdkMethods": 7,
  "schemas": 173,
  "parameters": 6,
  "originalCustomRequest": {
    "lambda": true
  },
  "customRequestSpecFilename": "customer.io_DatePipelines.yaml",
  "difficultyScore": 96.5,
  "difficulty": "Easy",
  "company": "Customer.io",
  "serviceName": "Data Pipelines",
  "sdkName": "customer-io-data-pipelines-{language}-sdk",
  "clientName": "CustomerIoDataPipelines",
  "metaDescription": "Customer.io is a versatile marketing automation tool for sending relevant messages based on behavior across web and mobile products.\n\nImpersonal messages lead to bad experiences. That's why we use real-time data to help you deliver the right message, exactly when it's needed — like sending an event reminder over SMS or the perfect onboarding email.\n\nOur robust platform enables you to:\n- Automate your product messaging, with the ability to build, test, and send messages from one platform.\n- Create and manage newsletters, transactional messages, and behavioral messages\n- Do more with your behavior and data -- connect our powerful segmentation and automation engine with other apps to drive user behavior and save time.\n\nLearn more: https://customer.io",
  "apiStatusUrls": "inherit",
  "homepage": "customer.io/",
  "developerDocumentation": "customer.io/docs/api/cdp/",
  "categories": [
    "marketing",
    "big_data_analytics",
    "customer_data_platform"
  ],
  "category": "Marketing Automation",
  "methods": [
    {
      "url": "/identify",
      "method": "personTraitsAssignment",
      "httpMethod": "post",
      "tag": "Identification",
      "typeScriptTag": "identification",
      "description": "Identify",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A successful request returns an empty object response."
        }
      ]
    },
    {
      "url": "/track",
      "method": "eventSubmission",
      "httpMethod": "post",
      "tag": "Tracking",
      "typeScriptTag": "tracking",
      "description": "Track",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A successful request returns an empty object response."
        }
      ]
    },
    {
      "url": "/page",
      "method": "recordPageView",
      "httpMethod": "post",
      "tag": "Page",
      "typeScriptTag": "page",
      "description": "Page",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A successful request returns an empty object response."
        }
      ]
    },
    {
      "url": "/screen",
      "method": "eventCreate",
      "httpMethod": "post",
      "tag": "Screenshot",
      "typeScriptTag": "screenshot",
      "description": "Screen",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A successful request returns an empty object response."
        }
      ]
    },
    {
      "url": "/group",
      "method": "addPeopleToGroup",
      "httpMethod": "post",
      "tag": "Group",
      "typeScriptTag": "group",
      "description": "Group",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A successful request returns an empty object response."
        }
      ]
    },
    {
      "url": "/alias",
      "method": "reconcileIdentities",
      "httpMethod": "post",
      "tag": "Alias",
      "typeScriptTag": "alias",
      "description": "Alias",
      "parameters": [
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "previousId",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "PREVIOUSID"
        },
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "USERID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A successful request returns an empty object response."
        }
      ]
    },
    {
      "url": "/batch",
      "method": "executeRequests",
      "httpMethod": "post",
      "tag": "Batch",
      "typeScriptTag": "batch",
      "description": "Batch",
      "parameters": [
        {
          "name": "batch",
          "schema": "array",
          "description": ""
        },
        {
          "name": "context",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "integrations",
          "schema": "object",
          "description": "",
          "example": {
            "All": true,
            "Salesforce": false
          }
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A successful request returns an empty object response."
        }
      ]
    }
  ],
  "repositoryDescription": "Customer.io is a versatile marketing automation tool that uses real-time data to send relevant messages across web and mobile products, ensuring personalized and timely communication through automation and powerful segmentation. Customer.io's {language} SDK for Data Pipelines API generated by Konfig (https://konfigthis.com/).",
  "logo": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/customer-io/data-pipelines/logo.png",
  "openApiRaw": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/customer-io/data-pipelines/openapi.yaml",
  "openApiGitHubUi": "https://github.com/konfig-sdks/openapi-examples/tree/HEAD/customer-io/data-pipelines/openapi.yaml",
  "previewLinkImage": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/customer-io/data-pipelines/imagePreview.png",
  "faviconUrl": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/customer-io/data-pipelines/favicon.png",
  "clientNameCamelCase": "customerIoDataPipelines",
  "lastUpdated": "2024-04-16T19:21:46.323Z",
  "typescriptSdkUsageCode": "import { CustomerIoDataPipelines } from 'customer-io-data-pipelines-typescript-sdk';\n\nconst customerIoDataPipelines = new CustomerIoDataPipelines({\n    /*\n     * The Data Pipelines API uses a basic authentication scheme with your API key. Because basic authorization typically expects a username and password combination, you'll use the API Key as the username and leave the password blank—base64 encoding your credentials in the format `API_key:`. \n     * \n     */\n    username: \"USERNAME\",\n    password: \"PASSWORD\"\n})",
  "typescriptSdkFirstRequestCode": "// Identify\nconst personTraitsAssignmentResponse = customerIoDataPipelines.identification.personTraitsAssignment()",
  "fixedSpecFileName": "customer-io-data-pipelines-fixed-spec.yaml"
}