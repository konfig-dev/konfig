{
  "securitySchemes": {
    "bearer": {
      "type": "http",
      "scheme": "bearer",
      "bearerFormat": "bearer"
    },
    "oauth2": {
      "type": "oauth2",
      "flows": {
        "authorizationCode": {
          "authorizationUrl": "/oauth/authorize",
          "tokenUrl": "/oauth/access_token",
          "scopes": {
            "create": "Create new albums, channels, and so on",
            "delete": "Delete videos, albums, channels, and so on",
            "edit": "Edit existing videos, albums, channels, and so on",
            "email": "Access to email addresses",
            "interact": "Interact with Vimeo resources on a member's behalf, such as liking a video or following another member",
            "private": "Access private member data",
            "promo_codes": "Add, remove, and review Vimeo On Demand promotions",
            "public": "Access public member data",
            "purchase": "Purchase content",
            "purchased": "Access a member's Vimeo On Demand purchase history",
            "scim": "Manage users and team groups via the SCIM protocol",
            "stats": "Access video stats",
            "upload": "Upload videos",
            "video_files": "Access video files belonging to members with a PRO subscription or higher"
          }
        },
        "clientCredentials": {
          "tokenUrl": "/oauth/authorize/client",
          "scopes": {
            "create": "Create new albums, channels, and so on",
            "delete": "Delete videos, albums, channels, and so on",
            "edit": "Edit existing videos, albums, channels, and so on",
            "email": "Access to email addresses",
            "interact": "Interact with Vimeo resources on a member's behalf, such as liking a video or following another member",
            "private": "Access private member data",
            "promo_codes": "Add, remove, and review Vimeo On Demand promotions",
            "public": "Access public member data",
            "purchase": "Purchase content",
            "purchased": "Access a member's Vimeo On Demand purchase history",
            "scim": "Manage users and team groups via the SCIM protocol",
            "stats": "Access video stats",
            "upload": "Upload videos",
            "video_files": "Access video files belonging to members with a PRO subscription or higher"
          }
        }
      }
    }
  },
  "apiBaseUrl": "https://api.vimeo.com",
  "apiVersion": "3.4",
  "apiDescription": "Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.",
  "apiTitle": "Vimeo API",
  "endpoints": 269,
  "sdkMethods": 484,
  "schemas": 330,
  "parameters": 1763,
  "contactUrl": "https://developer.vimeo.com/help",
  "originalCustomRequest": {
    "lambda": true
  },
  "customRequestSpecFilename": "vimeo.com.yaml",
  "difficultyScore": 962.75,
  "difficulty": "Very Hard",
  "company": "Vimeo",
  "sdkName": "vimeo-{language}-sdk",
  "clientName": "Vimeo",
  "metaDescription": "Join the world's leading professional video platform and grow your business with easy-to-use, high-quality video creation, hosting, and marketing tools.",
  "homepage": "developer.vimeo.com",
  "categories": [
    "media"
  ],
  "methods": [
    {
      "url": "/",
      "method": "endpoints",
      "httpMethod": "get",
      "tag": "API Information\\Essentials",
      "typeScriptTag": "apiInformationEssentials",
      "description": "Get the API specification",
      "parameters": [
        {
          "name": "openapi",
          "schema": "boolean",
          "required": false,
          "description": "Return an OpenAPI specification.",
          "example": true
        },
        {
          "name": "version",
          "schema": "string",
          "required": false,
          "description": "Return an OpenAPI specification for the specified API version. This overwrites the **version** field provided in the **Accept** header.",
          "example": "3.4"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/albums/{album_id}/available_videos",
      "method": "listInShowcase",
      "httpMethod": "get",
      "tag": "Showcases\\Showcase videos",
      "typeScriptTag": "showcasesShowcaseVideos",
      "description": "Get all the user's videos that can be added to or removed from a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by date.\n * `default` - Sort the results by the default method.\n * `duration` - Sort the results by duration.\n * `last_user_action_event_date` - Sort the results by most recent user interaction.\n * `likes` - Sort the results by number of likes.\n * `modified_time` - Sort the results by last modification.\n * `plays` - Sort the results by number of plays.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories",
      "method": "categories",
      "httpMethod": "get",
      "tag": "Categories\\Essentials",
      "typeScriptTag": "categoriesEssentials",
      "description": "Get all categories",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{category}",
      "method": "category",
      "httpMethod": "get",
      "tag": "Categories\\Essentials",
      "typeScriptTag": "categoriesEssentials",
      "description": "Get a specific category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category.",
          "example": "animation"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{category}/channels",
      "method": "listInCategory",
      "httpMethod": "get",
      "tag": "Categories\\Channels",
      "typeScriptTag": "categoriesChannels",
      "description": "Get all the channels in a category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category.",
          "example": "animation"
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `followers` - Sort the results by number of followers.\n * `videos` - Sort the results by number of videos.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{category}/groups",
      "method": "getAllGroups",
      "httpMethod": "get",
      "tag": "Categories\\Groups",
      "typeScriptTag": "categoriesGroups",
      "description": "Get all the groups in a category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category.",
          "example": "animation"
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `members` - Sort the results by number of members.\n * `videos` - Sort the results by number of videos.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{category}/videos",
      "method": "listVideosInCategory",
      "httpMethod": "get",
      "tag": "Categories\\Videos",
      "typeScriptTag": "categoriesVideos",
      "description": "Get all the videos in a category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category.",
          "example": "animation"
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `conditional_featured` - Return featured videos.\n * `embeddable` - Return embeddable videos.\n"
        },
        {
          "name": "filterEmbeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
          "example": true
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by date.\n * `duration` - Sort the results by duration.\n * `featured` - Sort the results by featured status.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n * `relevant` - Sort the results by relevance.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{category}/videos/{video_id}",
      "method": "getVideoInCategory",
      "httpMethod": "get",
      "tag": "Categories\\Videos",
      "typeScriptTag": "categoriesVideos",
      "description": "Get a specific video in a category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category.",
          "example": "animation"
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 273576296
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels",
      "method": "channels",
      "httpMethod": "get",
      "tag": "Channels\\Essentials",
      "typeScriptTag": "channelsEssentials",
      "description": "Get all channels",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `featured` - Return featured channels.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n * `default` - Sort the results by creation date.\n * `followers` - Sort the results by number of followers.\n * `relevant` - Sort the results by relevance. This option is available for search queries only.\n * `videos` - Sort the results by number of videos.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels",
      "method": "channel",
      "httpMethod": "post",
      "tag": "Channels\\Essentials",
      "typeScriptTag": "channelsEssentials",
      "description": "Create a channel",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "We really love videos, and these are the videos we really, really love."
        },
        {
          "name": "link",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "staffpicks"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Vimeo Staff Picks"
        },
        {
          "name": "privacy",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "PRIVACY"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}",
      "method": "channel",
      "httpMethod": "delete",
      "tag": "Channels\\Essentials",
      "typeScriptTag": "channelsEssentials",
      "description": "Delete a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The channel was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}",
      "method": "channel",
      "httpMethod": "get",
      "tag": "Channels\\Essentials",
      "typeScriptTag": "channelsEssentials",
      "description": "Get a specific channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}",
      "method": "channel",
      "httpMethod": "patch",
      "tag": "Channels\\Essentials",
      "typeScriptTag": "channelsEssentials",
      "description": "Edit a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "We really love videos, and these are the videos we really, really love."
        },
        {
          "name": "link",
          "schema": "string",
          "description": "",
          "example": "staffpicks"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "Vimeo Staff Picks"
        },
        {
          "name": "privacy",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/categories",
      "method": "getBelongingCategories",
      "httpMethod": "get",
      "tag": "Channels\\Categories",
      "typeScriptTag": "channelsCategories",
      "description": "Get all the categories to which a channel belongs",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/categories",
      "method": "addChannelToMultipleCategories",
      "httpMethod": "put",
      "tag": "Channels\\Categories",
      "typeScriptTag": "channelsCategories",
      "description": "Add a channel to a list of categories",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "channels",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The channel was added to the categories."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/categories/{category}",
      "method": "removeChannelFromCategory",
      "httpMethod": "delete",
      "tag": "Channels\\Categories",
      "typeScriptTag": "channelsCategories",
      "description": "Remove a channel from a category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category.",
          "example": "animation"
        },
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The channel was removed."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/categories/{category}",
      "method": "channel",
      "httpMethod": "put",
      "tag": "Channels\\Categories",
      "typeScriptTag": "channelsCategories",
      "description": "Add a channel to a specific category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category.",
          "example": "animation"
        },
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The channel was added to the category."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/moderators",
      "method": "removeMultipleFromChannel",
      "httpMethod": "delete",
      "tag": "Channels\\Moderators",
      "typeScriptTag": "channelsModerators",
      "description": "Remove a list of moderators from a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "user_uri",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "/users/152184"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The moderators were removed."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/moderators",
      "method": "listByChannel",
      "httpMethod": "get",
      "tag": "Channels\\Moderators",
      "typeScriptTag": "channelsModerators",
      "description": "Get all the moderators of a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date added.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/moderators",
      "method": "replaceModerators",
      "httpMethod": "patch",
      "tag": "Channels\\Moderators",
      "typeScriptTag": "channelsModerators",
      "description": "Replace the moderators of a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "user_uri",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "/users/152184"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/moderators",
      "method": "bulkAddModerators",
      "httpMethod": "put",
      "tag": "Channels\\Moderators",
      "typeScriptTag": "channelsModerators",
      "description": "Add a list of moderators to a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The moderators were added."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/moderators/{user_id}",
      "method": "removeModerator",
      "httpMethod": "delete",
      "tag": "Channels\\Moderators",
      "typeScriptTag": "channelsModerators",
      "description": "Remove a specific moderator from a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The moderator was removed."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/moderators/{user_id}",
      "method": "getSpecificModerator",
      "httpMethod": "get",
      "tag": "Channels\\Moderators",
      "typeScriptTag": "channelsModerators",
      "description": "Get a specific moderator of a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/moderators/{user_id}",
      "method": "addModeratorToChannel",
      "httpMethod": "put",
      "tag": "Channels\\Moderators",
      "typeScriptTag": "channelsModerators",
      "description": "Add a specific moderator to a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK"
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/privacy/users",
      "method": "getAccessibleUsers",
      "httpMethod": "get",
      "tag": "Channels\\Private channel members",
      "typeScriptTag": "channelsPrivateChannelMembers",
      "description": "Get all the users who can access a private channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/privacy/users",
      "method": "permitUserAccess",
      "httpMethod": "put",
      "tag": "Channels\\Private channel members",
      "typeScriptTag": "channelsPrivateChannelMembers",
      "description": "Permit a list of users to access a private channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "users",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/privacy/users/{user_id}",
      "method": "restrictUserAccess",
      "httpMethod": "delete",
      "tag": "Channels\\Private channel members",
      "typeScriptTag": "channelsPrivateChannelMembers",
      "description": "Restrict a user from accessing a private channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user can't acceess the private channel."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/privacy/users/{user_id}",
      "method": "permitUserAccess",
      "httpMethod": "put",
      "tag": "Channels\\Private channel members",
      "typeScriptTag": "channelsPrivateChannelMembers",
      "description": "Permit a specific user to access a private channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The user can now view the private channel."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/tags",
      "method": "getAllChannelTags",
      "httpMethod": "get",
      "tag": "Channels\\Tags",
      "typeScriptTag": "channelsTags",
      "description": "Get all the tags that have been added to a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/tags",
      "method": "addMultipleTagsToChannel",
      "httpMethod": "put",
      "tag": "Channels\\Tags",
      "typeScriptTag": "channelsTags",
      "description": "Add a list of tags to a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "tag",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/tags/{word}",
      "method": "removeTagFromChannel",
      "httpMethod": "delete",
      "tag": "Channels\\Tags",
      "typeScriptTag": "channelsTags",
      "description": "Remove a tag from a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "word",
          "schema": "string",
          "required": true,
          "description": "The word to use as the tag.",
          "example": "awesome"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The tag was removed."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/tags/{word}",
      "method": "checkIfTagAddedToChannel",
      "httpMethod": "get",
      "tag": "Channels\\Tags",
      "typeScriptTag": "channelsTags",
      "description": "Check if a tag has been added to a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "word",
          "schema": "string",
          "required": true,
          "description": "The word to use as the tag.",
          "example": "awesome"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The tag has been added to the channel."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/tags/{word}",
      "method": "addTagToChannel",
      "httpMethod": "put",
      "tag": "Channels\\Tags",
      "typeScriptTag": "channelsTags",
      "description": "Add a specific tag to a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "word",
          "schema": "string",
          "required": true,
          "description": "The word to use as the tag.",
          "example": "awesome"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The tag was added."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/users",
      "method": "listChannelFollowers",
      "httpMethod": "get",
      "tag": "Channels\\Subscriptions and subscribers",
      "typeScriptTag": "channelsSubscriptionsAndSubscribers",
      "description": "Get all the followers of a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": true,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `moderators` - Return moderators.\n",
          "example": "FILTER"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by follow date.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos",
      "method": "removeMultipleFromChannel",
      "httpMethod": "delete",
      "tag": "Channels\\Videos",
      "typeScriptTag": "channelsVideos",
      "description": "Remove a list of videos from a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "video_uri",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "/videos/258684937"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The videos were removed."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos",
      "method": "listInChannel",
      "httpMethod": "get",
      "tag": "Channels\\Videos",
      "typeScriptTag": "channelsVideos",
      "description": "Get all the videos in a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "containingUri",
          "schema": "string",
          "required": false,
          "description": "The page that contains the video URI.",
          "example": "/videos/258684937"
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n"
        },
        {
          "name": "filterEmbeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
          "example": true
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `added` - Sort the results by date added.\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by creation date.\n * `default` - Use the default sorting method.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `manual` - Sort the results as the user has arranged them.\n * `modified_time` - Sort the results by last modification.\n * `plays` - Sort the results by number of plays.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "304",
          "description": "No videos have been added to this channel since the given `If-Modified-Since` header."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos",
      "method": "addMultipleToChannel",
      "httpMethod": "put",
      "tag": "Channels\\Videos",
      "typeScriptTag": "channelsVideos",
      "description": "Add a list of videos to a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "video_uri",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "/videos/258684937"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The videos were added."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}",
      "method": "removeSpecificVideo",
      "httpMethod": "delete",
      "tag": "Channels\\Videos",
      "typeScriptTag": "channelsVideos",
      "description": "Remove a specific video from a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was removed."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}",
      "method": "getSpecificVideoInChannel",
      "httpMethod": "get",
      "tag": "Channels\\Videos",
      "typeScriptTag": "channelsVideos",
      "description": "Get a specific video in a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}",
      "method": "addVideoToChannel",
      "httpMethod": "put",
      "tag": "Channels\\Videos",
      "typeScriptTag": "channelsVideos",
      "description": "Add a specific video to a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was added."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/comments",
      "method": "getAllReplies",
      "httpMethod": "get",
      "tag": "Videos\\Video comments",
      "typeScriptTag": "videosVideoComments",
      "description": "Get all the video comments on a video",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/comments",
      "method": "addNewComment",
      "httpMethod": "post",
      "tag": "Videos\\Video comments",
      "typeScriptTag": "videosVideoComments",
      "description": "Add a video comment to a video",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "text",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "I love this!"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/credits",
      "method": "getAllCreditedUsersInVideo",
      "httpMethod": "get",
      "tag": "Videos\\Credits",
      "typeScriptTag": "videosCredits",
      "description": "Get all the credited users in a video",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/credits",
      "method": "addUserCreditInVideo",
      "httpMethod": "post",
      "tag": "Videos\\Credits",
      "typeScriptTag": "videosCredits",
      "description": "Credit a user in a video",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "user@example.com"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Sam Doe"
        },
        {
          "name": "role",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Producer"
        },
        {
          "name": "user_uri",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "/users/152184"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/likes",
      "method": "getUsersWhoLikedVideo",
      "httpMethod": "get",
      "tag": "Likes\\Essentials",
      "typeScriptTag": "likesEssentials",
      "description": "Get all the users who have liked a video",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by join date.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/pictures",
      "method": "getAllByVideoId",
      "httpMethod": "get",
      "tag": "Videos\\Thumbnails",
      "typeScriptTag": "videosThumbnails",
      "description": "Get all the thumbnails of a video",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/pictures",
      "method": "addThumbnailToVideo",
      "httpMethod": "post",
      "tag": "Videos\\Thumbnails",
      "typeScriptTag": "videosThumbnails",
      "description": "Add a video thumbnail",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "time",
          "schema": "number",
          "description": "",
          "example": 300
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/privacy/users",
      "method": "listAccessibleUsers",
      "httpMethod": "get",
      "tag": "Videos\\Unlisted videos",
      "typeScriptTag": "videosUnlistedVideos",
      "description": "Get the users who can access an unlisted video",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/privacy/users",
      "method": "grantAccessToUsers",
      "httpMethod": "put",
      "tag": "Videos\\Unlisted videos",
      "typeScriptTag": "videosUnlistedVideos",
      "description": "Permit a list of users to access an unlisted video",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/texttracks",
      "method": "getAllTracks",
      "httpMethod": "get",
      "tag": "Videos\\Text tracks",
      "typeScriptTag": "videosTextTracks",
      "description": "Get all the text tracks of a video",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/texttracks",
      "method": "addTextTrackToVideo",
      "httpMethod": "post",
      "tag": "Videos\\Text tracks",
      "typeScriptTag": "videosTextTracks",
      "description": "Add a text track to a video",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "active",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "is_auto_generated",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "is_edited",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "language",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "en-US"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Commentary"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "TYPE"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/versions",
      "method": "getAllVideoVersions",
      "httpMethod": "get",
      "tag": "Videos\\Versions",
      "typeScriptTag": "videosVersions",
      "description": "Get all the versions of a video",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/contentratings",
      "method": "getAllContentRatings",
      "httpMethod": "get",
      "tag": "Videos\\Content ratings",
      "typeScriptTag": "videosContentRatings",
      "description": "Get all content ratings",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/creativecommons",
      "method": "getAllCcLicenses",
      "httpMethod": "get",
      "tag": "Videos\\Creative Commons",
      "typeScriptTag": "videosCreativeCommons",
      "description": "Get all Creative Commons licenses",
      "parameters": [
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/destination/{destination_id}",
      "method": "deleteDestination",
      "httpMethod": "delete",
      "tag": "Live\\Event destinations",
      "typeScriptTag": "liveEventDestinations",
      "description": "Delete a live event destination",
      "parameters": [
        {
          "name": "destinationId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event destination.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The event destination was deleted."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/destination/{destination_id}",
      "method": "getDestination",
      "httpMethod": "get",
      "tag": "Live\\Event destinations",
      "typeScriptTag": "liveEventDestinations",
      "description": "Get a live event destination",
      "parameters": [
        {
          "name": "destinationId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event destination.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/destination/{destination_id}",
      "method": "updateDestination",
      "httpMethod": "patch",
      "tag": "Live\\Event destinations",
      "typeScriptTag": "liveEventDestinations",
      "description": "Update a live event destination",
      "parameters": [
        {
          "name": "destinationId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event destination.",
          "example": 152184
        },
        {
          "name": "display_name",
          "schema": "string",
          "description": "",
          "example": "My channel"
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "privacy",
          "schema": "string",
          "description": "",
          "example": "public"
        },
        {
          "name": "provider_destination_id",
          "schema": "string",
          "description": "",
          "example": "bda55c6b3ba4"
        },
        {
          "name": "service_name",
          "schema": "string",
          "description": "",
          "example": "youtube"
        },
        {
          "name": "stream_key",
          "schema": "string",
          "description": "",
          "example": "da056692-ba63-4749-a6eb-a476a22b3acd"
        },
        {
          "name": "stream_url",
          "schema": "string",
          "description": "",
          "example": "rtmp://mycooldomain.com/live"
        },
        {
          "name": "type",
          "schema": "string",
          "description": "",
          "example": "channel"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups",
      "method": "groups",
      "httpMethod": "get",
      "tag": "Groups\\Essentials",
      "typeScriptTag": "groupsEssentials",
      "description": "Get all groups",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `featured` - Return featured groups.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n * `followers` - Sort the results by number of followers.\n * `relevant` - Sort the results by relevance. This option is available for search queries only.\n * `videos` - Sort the results by number of videos.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups",
      "method": "group",
      "httpMethod": "post",
      "tag": "Groups\\Essentials",
      "typeScriptTag": "groupsEssentials",
      "description": "Create a group",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "Want to participate in our weekly challenges? Join the group to receive messages and new challenges!"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Vimeo Weekend Challenge"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups/{group_id}",
      "method": "group",
      "httpMethod": "delete",
      "tag": "Groups\\Essentials",
      "typeScriptTag": "groupsEssentials",
      "description": "Delete a group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "number",
          "required": true,
          "description": "The ID of the group.",
          "example": 1108
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The group was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups/{group_id}",
      "method": "group",
      "httpMethod": "get",
      "tag": "Groups\\Essentials",
      "typeScriptTag": "groupsEssentials",
      "description": "Get a specific group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "number",
          "required": true,
          "description": "The ID of the group.",
          "example": 1108
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups/{group_id}/users",
      "method": "getGroupUsers",
      "httpMethod": "get",
      "tag": "Groups\\Users",
      "typeScriptTag": "groupsUsers",
      "description": "Get all the members of a group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "number",
          "required": true,
          "description": "The ID of the group.",
          "example": 1108
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `moderators` - Return group moderators.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups/{group_id}/videos",
      "method": "getAllGroupVideos",
      "httpMethod": "get",
      "tag": "Groups\\Videos",
      "typeScriptTag": "groupsVideos",
      "description": "Get all the videos in a group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "number",
          "required": true,
          "description": "The ID of the group.",
          "example": 1108
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n"
        },
        {
          "name": "filterEmbeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
          "example": true
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by creation date.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "304",
          "description": "No videos have been added to the group since the given `If-Modified-Since` header."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups/{group_id}/videos/{video_id}",
      "method": "removeFromGroup",
      "httpMethod": "delete",
      "tag": "Groups\\Videos",
      "typeScriptTag": "groupsVideos",
      "description": "Remove a video from a group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "number",
          "required": true,
          "description": "The ID of the group.",
          "example": 1108
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was removed."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups/{group_id}/videos/{video_id}",
      "method": "getSingleVideo",
      "httpMethod": "get",
      "tag": "Groups\\Videos",
      "typeScriptTag": "groupsVideos",
      "description": "Get a specific video in a group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "number",
          "required": true,
          "description": "The ID of the group.",
          "example": 1108
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups/{group_id}/videos/{video_id}",
      "method": "addToGroup",
      "httpMethod": "put",
      "tag": "Groups\\Videos",
      "typeScriptTag": "groupsVideos",
      "description": "Add a video to a group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "number",
          "required": true,
          "description": "The ID of the group.",
          "example": 1108
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "202",
          "description": "The video is in pending status."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/languages",
      "method": "languages",
      "httpMethod": "get",
      "tag": "Videos\\Languages",
      "typeScriptTag": "videosLanguages",
      "description": "Get all languages",
      "parameters": [
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `audiotracks` - Return languages that can be used for audio tracks.\n * `texttracks` - Return languages that can be used for text tracks.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events",
      "method": "deleteMultipleEvents",
      "httpMethod": "delete",
      "tag": "Live\\Essentials",
      "typeScriptTag": "liveEssentials",
      "description": "Delete a list of live events",
      "parameters": [
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "hunter1"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK"
        }
      ]
    },
    {
      "url": "/live_events",
      "method": "getUserLiveEvents",
      "httpMethod": "get",
      "tag": "Live\\Essentials",
      "typeScriptTag": "liveEssentials",
      "description": "Get all the live events that belong to the user",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `not_in_folder` - Show only events that aren't in a folder.\n * `not_in_showcase` - Show only events that aren't in a showcase.\n * `not_in_webinar` - Show only events that aren't in a webinar.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n"
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "The type of event to return.\n\nOption descriptions:\n * `all` - Return all events.\n * `one_time` - Return one-time events only.\n * `recurring` - Return recurring events only.\n",
          "example": "recurring"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events",
      "method": "createEvent",
      "httpMethod": "post",
      "tag": "Live\\Essentials",
      "typeScriptTag": "liveEssentials",
      "description": "Create a live event",
      "parameters": [
        {
          "name": "title",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Live Content"
        },
        {
          "name": "allow_share_link",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "auto_cc_enabled",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "auto_cc_keywords",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "commonly-used words,phrases,technical terms"
        },
        {
          "name": "auto_cc_lang",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "en-US"
        },
        {
          "name": "automatically_title_stream",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "chat_enabled",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "content_rating",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "dvr",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "embed",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "folder_uri",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "/users/67890/folder/12345"
        },
        {
          "name": "interaction_tools_settings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "low_latency",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "playlist_sort",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "added_first"
        },
        {
          "name": "rtmp_preview",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "schedule",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "scheduled_playback",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "stream_description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "In this episode, we interview a surprise guest"
        },
        {
          "name": "stream_embed",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "stream_password",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "hunter1"
        },
        {
          "name": "stream_privacy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "stream_title",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "Special Feature"
        },
        {
          "name": "time_zone",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "America/New_York"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events/{live_event_id}",
      "method": "deleteSpecificLiveEvent",
      "httpMethod": "delete",
      "tag": "Live\\Essentials",
      "typeScriptTag": "liveEssentials",
      "description": "Delete a specific live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The event was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events/{live_event_id}",
      "method": "getEventById",
      "httpMethod": "get",
      "tag": "Live\\Essentials",
      "typeScriptTag": "liveEssentials",
      "description": "Get a specific live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "The password of the event when the privacy is set to `password`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events/{live_event_id}",
      "method": "updateEventBelongingToAuthenticatedUser",
      "httpMethod": "patch",
      "tag": "Live\\Essentials",
      "typeScriptTag": "liveEssentials",
      "description": "Update a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "title",
          "schema": "string",
          "description": "",
          "example": "Live Content"
        },
        {
          "name": "auto_cc_enabled",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "auto_cc_keywords",
          "schema": "string",
          "description": ""
        },
        {
          "name": "auto_cc_language",
          "schema": "string",
          "description": "",
          "example": "en-US"
        },
        {
          "name": "automatically_title_stream",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "chat_enabled",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "content_rating",
          "schema": "array",
          "description": ""
        },
        {
          "name": "dvr",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "embed",
          "schema": "object",
          "description": ""
        },
        {
          "name": "interaction_tools_settings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "playlist_sort",
          "schema": "string",
          "description": "",
          "example": "added_first"
        },
        {
          "name": "schedule",
          "schema": "object",
          "description": ""
        },
        {
          "name": "scheduled_playback",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "stream_description",
          "schema": "string",
          "description": "",
          "example": "In this episode, we interview a surprise guest"
        },
        {
          "name": "stream_embed",
          "schema": "object",
          "description": ""
        },
        {
          "name": "stream_mode",
          "schema": "string",
          "description": "",
          "example": "live"
        },
        {
          "name": "stream_password",
          "schema": "string",
          "description": "",
          "example": "hunter1"
        },
        {
          "name": "stream_privacy",
          "schema": "object",
          "description": ""
        },
        {
          "name": "stream_title",
          "schema": "string",
          "description": "",
          "example": "Special Feature"
        },
        {
          "name": "time_zone",
          "schema": "string",
          "description": "",
          "example": "America/New_York"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events/{live_event_id}/activate",
      "method": "createRtmpLinks",
      "httpMethod": "post",
      "tag": "Live\\Event activation",
      "typeScriptTag": "liveEventActivation",
      "description": "Activate a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "cloud_composing_streaming",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "streaming_start_requested",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "503",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events/{live_event_id}/auto_cc",
      "method": "editPreference",
      "httpMethod": "patch",
      "tag": "Live\\Event automated closed captions",
      "typeScriptTag": "liveEventAutomatedClosedCaptions",
      "description": "Edit the automated closed captions preference of a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "auto_cc_enabled",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": true
        },
        {
          "name": "auto_cc_keywords",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "commonly-used words,phrases,technical terms"
        },
        {
          "name": "auto_cc_lang",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "en-US"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events/{live_event_id}/end",
      "method": "eventTermination",
      "httpMethod": "post",
      "tag": "Live\\Event end",
      "typeScriptTag": "liveEventEnd",
      "description": "End a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "clipId",
          "schema": "number",
          "required": false,
          "description": "The ID of the streamable video.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events/{live_event_id}/low_latency",
      "method": "toggleOption",
      "httpMethod": "patch",
      "tag": "Live\\Event low latency",
      "typeScriptTag": "liveEventLowLatency",
      "description": "Toggle the low-latency option of a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "low_latency",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events/{live_event_id}/pictures",
      "method": "getAllThumbnails",
      "httpMethod": "get",
      "tag": "Live\\Event thumbnails",
      "typeScriptTag": "liveEventThumbnails",
      "description": "Get all the thumbnails of a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events/{live_event_id}/pictures",
      "method": "createThumbnailForEvent",
      "httpMethod": "post",
      "tag": "Live\\Event thumbnails",
      "typeScriptTag": "liveEventThumbnails",
      "description": "Create a live event thumbnail",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events/{live_event_id}/pictures/{thumbnail_id}",
      "method": "deleteThumbnailForEvent",
      "httpMethod": "delete",
      "tag": "Live\\Event thumbnails",
      "typeScriptTag": "liveEventThumbnails",
      "description": "Delete a live event thumbnail",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "thumbnailId",
          "schema": "number",
          "required": true,
          "description": "The ID of the thumbnail.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The thumbnail was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events/{live_event_id}/pictures/{thumbnail_id}",
      "method": "getSpecificThumbnail",
      "httpMethod": "get",
      "tag": "Live\\Event thumbnails",
      "typeScriptTag": "liveEventThumbnails",
      "description": "Get a specific live event thumbnail",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "thumbnailId",
          "schema": "number",
          "required": true,
          "description": "The ID of the thumbnail.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events/{live_event_id}/pictures/{thumbnail_id}",
      "method": "editLiveEventThumbnail",
      "httpMethod": "patch",
      "tag": "Live\\Event thumbnails",
      "typeScriptTag": "liveEventThumbnails",
      "description": "Edit a live event thumbnail",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "thumbnailId",
          "schema": "number",
          "required": true,
          "description": "The ID of the thumbnail.",
          "example": 12345
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events/{live_event_id}/privacy/domains",
      "method": "getWhitelistDomains",
      "httpMethod": "get",
      "tag": "Live\\Embed privacy",
      "typeScriptTag": "liveEmbedPrivacy",
      "description": "Get all the domains on which a live event can be embedded",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events/{live_event_id}/privacy/domains",
      "method": "embedEventOnDomains",
      "httpMethod": "put",
      "tag": "Live\\Embed privacy",
      "typeScriptTag": "liveEmbedPrivacy",
      "description": "Embed a live event on one or more domains",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "allowed_domains",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The domains were added to the whitelist."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events/{live_event_id}/videos",
      "method": "removeMultipleVideos",
      "httpMethod": "delete",
      "tag": "Live\\Event videos",
      "typeScriptTag": "liveEventVideos",
      "description": "Remove a list of videos from a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "videos",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The videos were removed."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events/{live_event_id}/videos",
      "method": "listLiveEventVideos",
      "httpMethod": "get",
      "tag": "Live\\Event videos",
      "typeScriptTag": "liveEventVideos",
      "description": "Get all the videos in a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "containingUri",
          "schema": "string",
          "required": false,
          "description": "The page that contains the video URI.",
          "example": "/videos/258684937"
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable events.\n"
        },
        {
          "name": "filterEmbeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
          "example": true
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `added` - Sort the results by most recently added videos.\n * `alphabetical` - Sort the results alphabetically.\n * `arranged` - Sort the results in the order that the user has arranged the videos.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by creation date.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events/{live_event_id}/videos",
      "method": "addMultiple",
      "httpMethod": "post",
      "tag": "Live\\Event videos",
      "typeScriptTag": "liveEventVideos",
      "description": "Add a list of videos to a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "videos",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The videos were added."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_events/{live_event_id}/videos/{video_id}",
      "method": "specificEventVideo",
      "httpMethod": "get",
      "tag": "Live\\Event videos",
      "typeScriptTag": "liveEventVideos",
      "description": "Get a specific video in a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me",
      "method": "getUser",
      "httpMethod": "get",
      "tag": "Users\\Essentials",
      "typeScriptTag": "usersEssentials",
      "description": "Get the user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me",
      "method": "editVimeoAccount",
      "httpMethod": "patch",
      "tag": "Users\\Essentials",
      "typeScriptTag": "usersEssentials",
      "description": "Edit the user",
      "parameters": [
        {
          "name": "bio",
          "schema": "string",
          "description": "",
          "example": "This is where you will find videos and news updates from the staff"
        },
        {
          "name": "content_filter",
          "schema": "array",
          "description": ""
        },
        {
          "name": "gender",
          "schema": "string",
          "description": ""
        },
        {
          "name": "link",
          "schema": "string",
          "description": "",
          "example": "staff"
        },
        {
          "name": "location",
          "schema": "string",
          "description": "",
          "example": "New York City"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "Vimeo Staff"
        },
        {
          "name": "password",
          "schema": "string",
          "description": "",
          "example": "hunter1"
        },
        {
          "name": "videos",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums",
      "method": "getAllUserShowcases",
      "httpMethod": "get",
      "tag": "Showcases\\Essentials",
      "typeScriptTag": "showcasesEssentials",
      "description": "Get all the showcases that belong to the user",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date of creation.\n * `duration` - Sort the results by duration.\n * `videos` - Sort the results by the number of videos.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums",
      "method": "createUserShowcase",
      "httpMethod": "post",
      "tag": "Showcases\\Essentials",
      "typeScriptTag": "showcasesEssentials",
      "description": "Create a showcase",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "Vimeo holiday videos!"
        },
        {
          "name": "brand_color",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "ff66ee"
        },
        {
          "name": "hide_from_vimeo",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "hide_nav",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "hide_upcoming",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "layout",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Vimeo Holiday Videos!"
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "hunter1"
        },
        {
          "name": "privacy",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "review_mode",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "theme",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}",
      "method": "deleteShowcase",
      "httpMethod": "delete",
      "tag": "Showcases\\Essentials",
      "typeScriptTag": "showcasesEssentials",
      "description": "Delete a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The showcase was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}",
      "method": "getSpecificShowcase",
      "httpMethod": "get",
      "tag": "Showcases\\Essentials",
      "typeScriptTag": "showcasesEssentials",
      "description": "Get a specific showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}",
      "method": "editShowcase",
      "httpMethod": "patch",
      "tag": "Showcases\\Essentials",
      "typeScriptTag": "showcasesEssentials",
      "description": "Edit a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "Vimeo holiday videos!"
        },
        {
          "name": "brand_color",
          "schema": "string",
          "description": "",
          "example": "ff66ee"
        },
        {
          "name": "domain",
          "schema": "string",
          "description": "",
          "example": "mycustomdomain.com"
        },
        {
          "name": "hide_nav",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "hide_upcoming",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "layout",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "Vimeo Holiday Videos!"
        },
        {
          "name": "password",
          "schema": "string",
          "description": "",
          "example": "hunter1"
        },
        {
          "name": "privacy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "review_mode",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "sort",
          "schema": "string",
          "description": ""
        },
        {
          "name": "theme",
          "schema": "string",
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "description": "",
          "example": "my-custom-url"
        },
        {
          "name": "use_custom_domain",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}/videos",
      "method": "listInShowcase",
      "httpMethod": "get",
      "tag": "Showcases\\Showcase videos",
      "typeScriptTag": "showcasesShowcaseVideos",
      "description": "Get all the videos in a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "containingUri",
          "schema": "string",
          "required": false,
          "description": "The page containing the video URI.",
          "example": "/videos/258684937"
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Filter the results by the **embeddable** attribute.\n"
        },
        {
          "name": "filterEmbeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
          "example": true
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "The password of the showcase.",
          "example": "hunter1"
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by date.\n * `default` - Sort the results by the default method.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `manual` - Sort the results by their manual order.\n * `modified_time` - Sort the results by last modification.\n * `plays` - Sort the results by number of plays.\n"
        },
        {
          "name": "weakSearch",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video's name.",
          "example": false
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}/videos",
      "method": "replaceVideos",
      "httpMethod": "put",
      "tag": "Showcases\\Showcase videos",
      "typeScriptTag": "showcasesShowcaseVideos",
      "description": "Replace all the videos in a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "videos",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "/videos/258684937,/videos/273576296"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "The videos were added."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}/videos/{video_id}",
      "method": "removeFromShowcase",
      "httpMethod": "delete",
      "tag": "Showcases\\Showcase videos",
      "typeScriptTag": "showcasesShowcaseVideos",
      "description": "Remove a video from a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 196367152
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was removed."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}/videos/{video_id}",
      "method": "getSpecificVideoInShowcase",
      "httpMethod": "get",
      "tag": "Showcases\\Showcase videos",
      "typeScriptTag": "showcasesShowcaseVideos",
      "description": "Get a specific video in a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 196367152
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "The password of the showcase.",
          "example": "hunter1"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}/videos/{video_id}",
      "method": "addToShowcase",
      "httpMethod": "put",
      "tag": "Showcases\\Showcase videos",
      "typeScriptTag": "showcasesShowcaseVideos",
      "description": "Add a specific video to a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 196367152
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was added."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}/videos/{video_id}/set_album_thumbnail",
      "method": "createShowcaseThumbnail",
      "httpMethod": "post",
      "tag": "Showcases\\Showcase videos",
      "typeScriptTag": "showcasesShowcaseVideos",
      "description": "Create a thumbnail for a showcase from a showcase video",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 196367152
        },
        {
          "name": "time_code",
          "schema": "number",
          "description": "",
          "example": 300
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}/videos/{video_id}/set_featured_video",
      "method": "setFeaturedVideo",
      "httpMethod": "patch",
      "tag": "Showcases\\Showcase videos",
      "typeScriptTag": "showcasesShowcaseVideos",
      "description": "Set the featured video of a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 196367152
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/analytics",
      "method": "getUserMetrics",
      "httpMethod": "get",
      "tag": "Users\\Analytics",
      "typeScriptTag": "usersAnalytics",
      "description": "Get analytics for the user",
      "parameters": [
        {
          "name": "dimension",
          "schema": "string",
          "required": true,
          "description": "The data dimension by which to group the results.\n\nOption descriptions:\n * `country` - Group the results by country.\n * `device_type` - Group the results by device type.\n * `embed_domain` - Group the results by embed domain.\n * `total` - Group the results by the time range provided.\n * `video` - Group the results by video.\n",
          "example": "DIMENSION"
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filterContent",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of video, folder, or event URIs to filter.",
          "example": "/folder/1233456,/video/7890123,/folder/123"
        },
        {
          "name": "filterCountries",
          "schema": "array",
          "required": false,
          "description": "A comma-separated list of country codes in ISO-3166 format to filter on.",
          "example": "UK,US,IN"
        },
        {
          "name": "filterDeviceTypes",
          "schema": "array",
          "required": false,
          "description": "A comma-separated list of device types to filter on.",
          "example": "android,ios"
        },
        {
          "name": "filterEmbedDomains",
          "schema": "array",
          "required": false,
          "description": "A comma-separated list of domain names to filter on.",
          "example": "abc.com,xyz.com"
        },
        {
          "name": "filterStreamingTypes",
          "schema": "array",
          "required": false,
          "description": "A comma-separated list of streaming types to filter on.",
          "example": "live,video"
        },
        {
          "name": "from",
          "schema": "string",
          "required": true,
          "description": "The start date of the range of results in ISO 8601 format.",
          "example": "2021-05-30T00:00:00+00:00"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The maximum number of items returned from the request, up to a limit of 1000 items. The default value is `50`.",
          "example": 50
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `average_percent_watched` - Sort the results by mean seconds played.\n * `average_time_watched` - Sort the results by mean percentage played.\n * `comments` - Sort the results by the number of comments.\n * `country` - Sort the results by country.\n * `default` - Sort the results by the values of both the **dimension** and **time_interval** fields.\n * `device_type` - Sort the results by device type.\n * `downloads` - Sort the results by the number of downloads.\n * `embed_domain` - Sort the results by embed domain.\n * `finishes` - Sort the results by the number of complete plays.\n * `impressions` - Sort the results by the number of impressions.\n * `like` - Sort the results by the number of likes.\n * `time` - Sort the results by the value of the **start_date** field. This option is available only when the value of **time_interval** isn't `none`.\n * `total_time_watched` - Sort the results by total seconds played.\n * `unique_impressions` - Sort the results by unique impressions.\n * `unique_viewers` - Sort the results by unique viewers.\n * `video` - Sort the results by video ID.\n * `views` - Sort the results by the number of views.\n"
        },
        {
          "name": "timeInterval",
          "schema": "string",
          "required": false,
          "description": "The interval by which to aggregate the data according to the specified data dimension. The default value is `none`.\n\nOption descriptions:\n * `day` - Aggregate the results by day according to the specified data dimension.\n * `month` - Aggregate the results by month according to the specified data dimension.\n * `none` - The results are not aggregated by time interval.\n * `week` - Aggregate the results by week according to the specified data dimension.\n * `year` - Aggregate the results by year according to the specified data dimension.\n"
        },
        {
          "name": "to",
          "schema": "string",
          "required": true,
          "description": "The end date of the range of results in ISO 8601 format.",
          "example": "2021-06-30T23:59:59+00:00"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/appearances",
      "method": "getUserAppearances",
      "httpMethod": "get",
      "tag": "Videos\\Essentials",
      "typeScriptTag": "videosEssentials",
      "description": "Get all the videos in which the user appears",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n"
        },
        {
          "name": "filterEmbeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
          "example": true
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by date.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/categories",
      "method": "listFollowedCategories",
      "httpMethod": "get",
      "tag": "Categories\\Users",
      "typeScriptTag": "categoriesUsers",
      "description": "Get all the categories that the user follows",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `name` - Sort the results by name.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/categories/{category}",
      "method": "stopFollowingCategory",
      "httpMethod": "delete",
      "tag": "Categories\\Users",
      "typeScriptTag": "categoriesUsers",
      "description": "Cause the user to stop following a category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category.",
          "example": "animation"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user has stopped following the category."
        }
      ]
    },
    {
      "url": "/me/categories/{category}",
      "method": "checkFollowedCategory",
      "httpMethod": "get",
      "tag": "Categories\\Users",
      "typeScriptTag": "categoriesUsers",
      "description": "Check if the user follows a category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category.",
          "example": "animation"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user is following the category."
        }
      ]
    },
    {
      "url": "/me/categories/{category}",
      "method": "followCategory",
      "httpMethod": "put",
      "tag": "Categories\\Users",
      "typeScriptTag": "categoriesUsers",
      "description": "Cause the user to follow a specific category",
      "parameters": [
        {
          "name": "category",
          "schema": "number",
          "required": true,
          "description": "The name of the category.",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user is following the category."
        }
      ]
    },
    {
      "url": "/me/channels",
      "method": "getUserSubscriptions",
      "httpMethod": "get",
      "tag": "Channels\\Essentials",
      "typeScriptTag": "channelsEssentials",
      "description": "Get all the channels to which a user subscribes",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `moderated` - Return moderated channels.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n * `followers` - Sort the results by number of followers.\n * `videos` - Sort the results by number of videos.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "304",
          "description": "No channel has been followed since the given `If-Modified-Since` header."
        }
      ]
    },
    {
      "url": "/me/channels/{channel_id}",
      "method": "unsubscribeUserFromChannel",
      "httpMethod": "delete",
      "tag": "Channels\\Subscriptions and subscribers",
      "typeScriptTag": "channelsSubscriptionsAndSubscribers",
      "description": "Unsubscribe the user from a specific channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user is unsubscribed from the channel."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/channels/{channel_id}",
      "method": "checkIfUserFollowsChannel",
      "httpMethod": "get",
      "tag": "Channels\\Subscriptions and subscribers",
      "typeScriptTag": "channelsSubscriptionsAndSubscribers",
      "description": "Check if a user follows a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user follows the channel."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/channels/{channel_id}",
      "method": "subscribeUserToChannel",
      "httpMethod": "put",
      "tag": "Channels\\Subscriptions and subscribers",
      "typeScriptTag": "channelsSubscriptionsAndSubscribers",
      "description": "Subscribe the user to a specific channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user is subscribed to the channel."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/customlogos",
      "method": "list",
      "httpMethod": "get",
      "tag": "Embed Presets\\Custom logos",
      "typeScriptTag": "embedPresetsCustomLogos",
      "description": "Get all the custom logos that belong to the user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/customlogos",
      "method": "addUserLogo",
      "httpMethod": "post",
      "tag": "Embed Presets\\Custom logos",
      "typeScriptTag": "embedPresetsCustomLogos",
      "description": "Add a custom user logo",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/customlogos/{logo_id}",
      "method": "deleteUserLogo",
      "httpMethod": "delete",
      "tag": "Embed Presets\\Custom logos",
      "typeScriptTag": "embedPresetsCustomLogos",
      "description": "Delete a custom user logo",
      "parameters": [
        {
          "name": "logoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the custom logo.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The custom logo was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/customlogos/{logo_id}",
      "method": "getSpecificUserLogo",
      "httpMethod": "get",
      "tag": "Embed Presets\\Custom logos",
      "typeScriptTag": "embedPresetsCustomLogos",
      "description": "Get a specific custom user logo",
      "parameters": [
        {
          "name": "logoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the custom logo.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/destinations",
      "method": "getAllAvailableDestinations",
      "httpMethod": "get",
      "tag": "Live\\Event destinations",
      "typeScriptTag": "liveEventDestinations",
      "description": "Get all available live event destinations for the user to stream to",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The event destinations were returned."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/feed",
      "method": "getUserFeedVideos",
      "httpMethod": "get",
      "tag": "Users\\Feeds",
      "typeScriptTag": "usersFeeds",
      "description": "Get all the videos in the user's feed",
      "parameters": [
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "The pagination offset. We recommend that you use the pagination links in the feed response instead of working with this value directly. For more details, see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter).",
          "example": "280"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "The feed type.\n\nOption descriptions:\n * `appears` - Videos in which the user appears.\n * `category_featured` - Featured videos.\n * `channel` - Channel videos.\n * `facebook_feed` - Videos from the user's Facebook feed.\n * `following` - Videos from accounts that the user follows.\n * `group` - Group videos.\n * `likes` - Liked videos.\n * `ondemand_publish` - On Demand videos.\n * `share` - Shared videos.\n * `tagged_with` - Tagged videos.\n * `twitter_timeline` - Videos from the user's Twitter timeline.\n * `uploads` - Uploaded videos.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/followers",
      "method": "listAll",
      "httpMethod": "get",
      "tag": "Users\\Followers",
      "typeScriptTag": "usersFollowers",
      "description": "Get all the followers of the user",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date followed.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/following",
      "method": "listOfFollowingUsers",
      "httpMethod": "get",
      "tag": "Users\\Followers",
      "typeScriptTag": "usersFollowers",
      "description": "Get all the users that the user is following",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `online` - Return users who are currently online.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date followed.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/following",
      "method": "followMultipleUsers",
      "httpMethod": "post",
      "tag": "Users\\Followers",
      "typeScriptTag": "usersFollowers",
      "description": "Follow a list of users",
      "parameters": [
        {
          "name": "users",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The users were followed."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/following/{follow_user_id}",
      "method": "stopFollowingUser",
      "httpMethod": "delete",
      "tag": "Users\\Followers",
      "typeScriptTag": "usersFollowers",
      "description": "Unfollow a user",
      "parameters": [
        {
          "name": "followUserId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user to unfollow.",
          "example": 3766357
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user was unfollowed."
        }
      ]
    },
    {
      "url": "/me/following/{follow_user_id}",
      "method": "checkFollowingUser",
      "httpMethod": "get",
      "tag": "Users\\Followers",
      "typeScriptTag": "usersFollowers",
      "description": "Check if the user is following another user",
      "parameters": [
        {
          "name": "followUserId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user to follow.",
          "example": 3766357
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The authenticated user follows the specified user."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/following/{follow_user_id}",
      "method": "followSpecificUser",
      "httpMethod": "put",
      "tag": "Users\\Followers",
      "typeScriptTag": "usersFollowers",
      "description": "Follow a specific user",
      "parameters": [
        {
          "name": "followUserId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user to follow.",
          "example": 3766357
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user was followed."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/groups",
      "method": "getUserGroups",
      "httpMethod": "get",
      "tag": "Groups\\Users",
      "typeScriptTag": "groupsUsers",
      "description": "Get all the groups that the user has joined",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `moderated` - Return moderated groups.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n * `members` - Sort the results by number of members.\n * `videos` - Sort the results by number of videos.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/groups/{group_id}",
      "method": "removeUserFromGroup",
      "httpMethod": "delete",
      "tag": "Groups\\Subscriptions",
      "typeScriptTag": "groupsSubscriptions",
      "description": "Remove the user from a group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "number",
          "required": true,
          "description": "The ID of the group.",
          "example": 1108
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user was removed from the group."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/groups/{group_id}",
      "method": "checkUserJoinedGroup",
      "httpMethod": "get",
      "tag": "Groups\\Users",
      "typeScriptTag": "groupsUsers",
      "description": "Check if a user has joined a group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "number",
          "required": true,
          "description": "The ID of the group.",
          "example": 1108
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user belongs to the group."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/groups/{group_id}",
      "method": "addUserToGroup",
      "httpMethod": "put",
      "tag": "Groups\\Subscriptions",
      "typeScriptTag": "groupsSubscriptions",
      "description": "Add the user to a group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "number",
          "required": true,
          "description": "The ID of the group.",
          "example": 1108
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user joined the group."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/likes",
      "method": "getUserLikedVideos",
      "httpMethod": "get",
      "tag": "Likes\\Essentials",
      "typeScriptTag": "likesEssentials",
      "description": "Get all the videos that a user has liked",
      "parameters": [
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n"
        },
        {
          "name": "filterEmbeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
          "example": true
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by creation date.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/likes/{video_id}",
      "method": "unlikeVideo",
      "httpMethod": "delete",
      "tag": "Likes\\Essentials",
      "typeScriptTag": "likesEssentials",
      "description": "Cause a user to unlike a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was unliked."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/likes/{video_id}",
      "method": "checkUserLikedVideo",
      "httpMethod": "get",
      "tag": "Likes\\Essentials",
      "typeScriptTag": "likesEssentials",
      "description": "Check if the user has liked a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user has liked the video."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/likes/{video_id}",
      "method": "likeVideo",
      "httpMethod": "put",
      "tag": "Likes\\Essentials",
      "typeScriptTag": "likesEssentials",
      "description": "Cause the user to like a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was liked."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events",
      "method": "deleteMultipleEvents",
      "httpMethod": "delete",
      "tag": "Live\\Essentials",
      "typeScriptTag": "liveEssentials",
      "description": "Delete a list of live events",
      "parameters": [
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "hunter1"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK"
        }
      ]
    },
    {
      "url": "/me/live_events",
      "method": "getAllUserLiveEvents",
      "httpMethod": "get",
      "tag": "Live\\Essentials",
      "typeScriptTag": "liveEssentials",
      "description": "Get all the live events that belong to the user",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `not_in_folder` - Show only events that aren't in a folder.\n * `not_in_showcase` - Show only events that aren't in a showcase.\n * `not_in_webinar` - Show only events that aren't in a webinar.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n"
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "The type of event to return.\n\nOption descriptions:\n * `all` - Return all events.\n * `one_time` - Return one-time events only.\n * `recurring` - Return recurring events only.\n",
          "example": "recurring"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events",
      "method": "createLiveEvent",
      "httpMethod": "post",
      "tag": "Live\\Essentials",
      "typeScriptTag": "liveEssentials",
      "description": "Create a live event",
      "parameters": [
        {
          "name": "title",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Live Content"
        },
        {
          "name": "allow_share_link",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "auto_cc_enabled",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "auto_cc_keywords",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "commonly-used words,phrases,technical terms"
        },
        {
          "name": "auto_cc_lang",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "en-US"
        },
        {
          "name": "automatically_title_stream",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "chat_enabled",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "content_rating",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "dvr",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "embed",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "folder_uri",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "/users/67890/folder/12345"
        },
        {
          "name": "interaction_tools_settings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "low_latency",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "playlist_sort",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "added_first"
        },
        {
          "name": "rtmp_preview",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "schedule",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "scheduled_playback",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "stream_description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "In this episode, we interview a surprise guest"
        },
        {
          "name": "stream_embed",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "stream_password",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "hunter1"
        },
        {
          "name": "stream_privacy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "stream_title",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "Special Feature"
        },
        {
          "name": "time_zone",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "America/New_York"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}",
      "method": "deleteSingleEvent",
      "httpMethod": "delete",
      "tag": "Live\\Essentials",
      "typeScriptTag": "liveEssentials",
      "description": "Delete a specific live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The event was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}",
      "method": "getSpecificLiveEvent",
      "httpMethod": "get",
      "tag": "Live\\Essentials",
      "typeScriptTag": "liveEssentials",
      "description": "Get a specific live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "The password of the event when the privacy is set to `password`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}",
      "method": "updateEventBelongingToAuthenticatedUser",
      "httpMethod": "patch",
      "tag": "Live\\Essentials",
      "typeScriptTag": "liveEssentials",
      "description": "Update a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "title",
          "schema": "string",
          "description": "",
          "example": "Live Content"
        },
        {
          "name": "auto_cc_enabled",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "auto_cc_keywords",
          "schema": "string",
          "description": ""
        },
        {
          "name": "auto_cc_language",
          "schema": "string",
          "description": "",
          "example": "en-US"
        },
        {
          "name": "automatically_title_stream",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "chat_enabled",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "content_rating",
          "schema": "array",
          "description": ""
        },
        {
          "name": "dvr",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "embed",
          "schema": "object",
          "description": ""
        },
        {
          "name": "interaction_tools_settings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "playlist_sort",
          "schema": "string",
          "description": "",
          "example": "added_first"
        },
        {
          "name": "schedule",
          "schema": "object",
          "description": ""
        },
        {
          "name": "scheduled_playback",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "stream_description",
          "schema": "string",
          "description": "",
          "example": "In this episode, we interview a surprise guest"
        },
        {
          "name": "stream_embed",
          "schema": "object",
          "description": ""
        },
        {
          "name": "stream_mode",
          "schema": "string",
          "description": "",
          "example": "live"
        },
        {
          "name": "stream_password",
          "schema": "string",
          "description": "",
          "example": "hunter1"
        },
        {
          "name": "stream_privacy",
          "schema": "object",
          "description": ""
        },
        {
          "name": "stream_title",
          "schema": "string",
          "description": "",
          "example": "Special Feature"
        },
        {
          "name": "time_zone",
          "schema": "string",
          "description": "",
          "example": "America/New_York"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}/activate",
      "method": "createRtmpLinks",
      "httpMethod": "post",
      "tag": "Live\\Event activation",
      "typeScriptTag": "liveEventActivation",
      "description": "Activate a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "cloud_composing_streaming",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "streaming_start_requested",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "503",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}/auto_cc",
      "method": "editPreferenceForEvent",
      "httpMethod": "patch",
      "tag": "Live\\Event automated closed captions",
      "typeScriptTag": "liveEventAutomatedClosedCaptions",
      "description": "Edit the automated closed captions preference of a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "auto_cc_enabled",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": true
        },
        {
          "name": "auto_cc_keywords",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "commonly-used words,phrases,technical terms"
        },
        {
          "name": "auto_cc_lang",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "en-US"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}/destinations",
      "method": "listAllAvailableDestinations",
      "httpMethod": "get",
      "tag": "Live\\Event destinations",
      "typeScriptTag": "liveEventDestinations",
      "description": "Get all the destinations of a recurring live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}/destinations",
      "method": "createDestination",
      "httpMethod": "post",
      "tag": "Live\\Event destinations",
      "typeScriptTag": "liveEventDestinations",
      "description": "Create a live event destination",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "display_name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "My channel"
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "privacy",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "public"
        },
        {
          "name": "provider_destination_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "bda55c6b3ba4"
        },
        {
          "name": "provider_video_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "6817807391346708000"
        },
        {
          "name": "scheduled_at",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 1625754461
        },
        {
          "name": "service_name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "youtube"
        },
        {
          "name": "stream_key",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "da056692-ba63-4749-a6eb-a476a22b3acd"
        },
        {
          "name": "stream_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "rtmp://mycooldomain.com/live"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "channel"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}/end",
      "method": "eventTerminationAlt1",
      "httpMethod": "post",
      "tag": "Live\\Event end",
      "typeScriptTag": "liveEventEnd",
      "description": "End a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "clipId",
          "schema": "number",
          "required": false,
          "description": "The ID of the streamable video.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}/low_latency",
      "method": "toggleOption",
      "httpMethod": "patch",
      "tag": "Live\\Event low latency",
      "typeScriptTag": "liveEventLowLatency",
      "description": "Toggle the low-latency option of a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "low_latency",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}/m3u8_playback",
      "method": "getUrl",
      "httpMethod": "get",
      "tag": "Live\\Event M3U8 playback",
      "typeScriptTag": "liveEventM3U8Playback",
      "description": "Get an M3U8 playback URL for a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "maxFpsFhd",
          "schema": "number",
          "required": false,
          "description": "The requested maximum frames per second.",
          "example": 30
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The M3U8 playback URL was returned."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "503",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}/pictures",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Live\\Event thumbnails",
      "typeScriptTag": "liveEventThumbnails",
      "description": "Get all the thumbnails of a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}/pictures",
      "method": "addThumbnail",
      "httpMethod": "post",
      "tag": "Live\\Event thumbnails",
      "typeScriptTag": "liveEventThumbnails",
      "description": "Create a live event thumbnail",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}/pictures/{thumbnail_id}",
      "method": "deleteForEvent",
      "httpMethod": "delete",
      "tag": "Live\\Event thumbnails",
      "typeScriptTag": "liveEventThumbnails",
      "description": "Delete a live event thumbnail",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "thumbnailId",
          "schema": "number",
          "required": true,
          "description": "The ID of the thumbnail.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The thumbnail was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}/pictures/{thumbnail_id}",
      "method": "getSpecificThumbnail",
      "httpMethod": "get",
      "tag": "Live\\Event thumbnails",
      "typeScriptTag": "liveEventThumbnails",
      "description": "Get a specific live event thumbnail",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "thumbnailId",
          "schema": "number",
          "required": true,
          "description": "The ID of the thumbnail.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}/pictures/{thumbnail_id}",
      "method": "updateEventThumbnail",
      "httpMethod": "patch",
      "tag": "Live\\Event thumbnails",
      "typeScriptTag": "liveEventThumbnails",
      "description": "Edit a live event thumbnail",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "thumbnailId",
          "schema": "number",
          "required": true,
          "description": "The ID of the thumbnail.",
          "example": 12345
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}/privacy/domains",
      "method": "getWhitelistDomains",
      "httpMethod": "get",
      "tag": "Live\\Embed privacy",
      "typeScriptTag": "liveEmbedPrivacy",
      "description": "Get all the domains on which a live event can be embedded",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}/privacy/domains",
      "method": "embedEventOnDomains",
      "httpMethod": "put",
      "tag": "Live\\Embed privacy",
      "typeScriptTag": "liveEmbedPrivacy",
      "description": "Embed a live event on one or more domains",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "allowed_domains",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The domains were added to the whitelist."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}/videos",
      "method": "removeMultiple",
      "httpMethod": "delete",
      "tag": "Live\\Event videos",
      "typeScriptTag": "liveEventVideos",
      "description": "Remove a list of videos from a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "videos",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The videos were removed."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}/videos",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Live\\Event videos",
      "typeScriptTag": "liveEventVideos",
      "description": "Get all the videos in a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "containingUri",
          "schema": "string",
          "required": false,
          "description": "The page that contains the video URI.",
          "example": "/videos/258684937"
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable events.\n"
        },
        {
          "name": "filterEmbeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
          "example": true
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `added` - Sort the results by most recently added videos.\n * `alphabetical` - Sort the results alphabetically.\n * `arranged` - Sort the results in the order that the user has arranged the videos.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by creation date.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}/videos",
      "method": "uploadMultiple",
      "httpMethod": "post",
      "tag": "Live\\Event videos",
      "typeScriptTag": "liveEventVideos",
      "description": "Add a list of videos to a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "videos",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The videos were added."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/live_events/{live_event_id}/videos/{video_id}",
      "method": "specificVideo",
      "httpMethod": "get",
      "tag": "Live\\Event videos",
      "typeScriptTag": "liveEventVideos",
      "description": "Get a specific video in a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/ondemand/pages",
      "method": "getAllUserPages",
      "httpMethod": "get",
      "tag": "On Demand\\Essentials",
      "typeScriptTag": "onDemandEssentials",
      "description": "Get all the On Demand pages of the user",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The type of the page to return.\n\nOption descriptions:\n * `film` - The page type is a film.\n * `series` - The page type is a series.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `added` - Sort the results by most recently added page.\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `modified_time` - Sort the results by time of page modification.\n * `name` - Sort the results by page name.\n * `publish.time` - Sort the results by time of page publishing.\n * `rating` - Sort the results by content rating.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/ondemand/pages",
      "method": "createPage",
      "httpMethod": "post",
      "tag": "On Demand\\Essentials",
      "typeScriptTag": "onDemandEssentials",
      "description": "Create an On Demand page",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "DARBY FOREVER follows the fantasies of Darby, a shopgirl at \"Bobbins & Notions\"."
        },
        {
          "name": "accepted_currencies",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "buy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "content_rating",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "CONTENT_RATING"
        },
        {
          "name": "domain_link",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "https://example.com"
        },
        {
          "name": "episodes",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "link",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "darbyforever"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Darby Forever"
        },
        {
          "name": "rent",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "subscription",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "TYPE"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/ondemand/purchases",
      "method": "getAllUserPurchasesAndRentals",
      "httpMethod": "get",
      "tag": "On Demand\\Purchases and rentals",
      "typeScriptTag": "onDemandPurchasesAndRentals",
      "description": "Get all of the user's On Demand purchases and rentals",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The type of the On Demand video to filter on.\n\nOption descriptions:\n * `all` - Filter by all video types.\n * `expiring_soon` - Filter by videos that expire soon.\n * `film` - Filter by film.\n * `important` - Filter by pages that are about to expire.\n * `purchased` - Filter by purchased videos.\n * `rented` - Filter by rented videos.\n * `series` - Filter by series.\n * `subscription` - Filter by video subscription.\n * `unwatched` - Filter by unwatched videos.\n * `watched` - Filter by watched videos.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `added` - Sort the results by most recently added video.\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `name` - Sort the results by video name.\n * `purchase_time` - Sort the results by time of video purchase.\n * `rating` - Sort the results by content rating.\n * `release_date` - Sort the results by video release date.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/ondemand/purchases/{ondemand_id}",
      "method": "checkUserPurchasesAndRentals",
      "httpMethod": "get",
      "tag": "On Demand\\Purchases and rentals",
      "typeScriptTag": "onDemandPurchasesAndRentals",
      "description": "Check if a user has made a purchase or rental from an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/payment_methods",
      "method": "listPaymentMethods",
      "httpMethod": "get",
      "tag": "Payments\\Essentials",
      "typeScriptTag": "paymentsEssentials",
      "description": "Get a list of all payments service payment methods",
      "parameters": [
        {
          "name": "cardmemberName",
          "schema": "string",
          "required": false,
          "description": "The name of the card member.",
          "example": "John Doe"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "showDisabled",
          "schema": "boolean",
          "required": false,
          "description": "Whether to return disabled payment methods.",
          "example": false
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 12345
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/payment_methods/{payment_method_id}",
      "method": "getPaymentMethodInfo",
      "httpMethod": "get",
      "tag": "Payments\\Essentials",
      "typeScriptTag": "paymentsEssentials",
      "description": "Get information about a payments service payment method",
      "parameters": [
        {
          "name": "paymentMethodId",
          "schema": "string",
          "required": true,
          "description": "The ID of the payment method.",
          "example": "abc12345"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/pictures",
      "method": "list",
      "httpMethod": "get",
      "tag": "Users\\Pictures",
      "typeScriptTag": "usersPictures",
      "description": "Get all the pictures that belong to the user",
      "parameters": [
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/pictures",
      "method": "addPortraitImage",
      "httpMethod": "post",
      "tag": "Users\\Pictures",
      "typeScriptTag": "usersPictures",
      "description": "Add a picture to the user's account",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/pictures/{portraitset_id}",
      "method": "removePortraitImage",
      "httpMethod": "delete",
      "tag": "Users\\Pictures",
      "typeScriptTag": "usersPictures",
      "description": "Delete a picture from the user's account",
      "parameters": [
        {
          "name": "portraitsetId",
          "schema": "number",
          "required": true,
          "description": "The ID of the picture.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The portrait image was removed."
        }
      ]
    },
    {
      "url": "/me/pictures/{portraitset_id}",
      "method": "getSpecificPictureBelongingToUser",
      "httpMethod": "get",
      "tag": "Users\\Pictures",
      "typeScriptTag": "usersPictures",
      "description": "Get a specific picture that belongs to the user",
      "parameters": [
        {
          "name": "portraitsetId",
          "schema": "number",
          "required": true,
          "description": "The ID of the picture.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/pictures/{portraitset_id}",
      "method": "editPortraitImage",
      "httpMethod": "patch",
      "tag": "Users\\Pictures",
      "typeScriptTag": "usersPictures",
      "description": "Edit a picture in the user's account",
      "parameters": [
        {
          "name": "portraitsetId",
          "schema": "number",
          "required": true,
          "description": "The ID of the picture.",
          "example": 12345
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/portfolios",
      "method": "getAllUserPortfolios",
      "httpMethod": "get",
      "tag": "Portfolios\\Essentials",
      "typeScriptTag": "portfoliosEssentials",
      "description": "Get all the portfolios that belong to the user",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/portfolios/{portfolio_id}",
      "method": "getUserPortfolio",
      "httpMethod": "get",
      "tag": "Portfolios\\Essentials",
      "typeScriptTag": "portfoliosEssentials",
      "description": "Get a specific portfolio",
      "parameters": [
        {
          "name": "portfolioId",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/portfolios/{portfolio_id}/videos",
      "method": "getAllPortfolioVideos",
      "httpMethod": "get",
      "tag": "Portfolios\\Videos",
      "typeScriptTag": "portfoliosVideos",
      "description": "Get all the videos in a portfolio",
      "parameters": [
        {
          "name": "portfolioId",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio.",
          "example": 12345
        },
        {
          "name": "containingUri",
          "schema": "string",
          "required": false,
          "description": "The page that contains the video URI.",
          "example": "/videos/258684937"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n"
        },
        {
          "name": "filterEmbeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
          "example": true
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by creation date.\n * `default` - Use the default sorting method.\n * `likes` - Sort the results by number of likes.\n * `manual` - Sort the results by their user-specified order.\n * `plays` - Sort the results by number of plays.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/portfolios/{portfolio_id}/videos/{video_id}",
      "method": "removeFromPortfolio",
      "httpMethod": "delete",
      "tag": "Portfolios\\Videos",
      "typeScriptTag": "portfoliosVideos",
      "description": "Remove a video from a portfolio",
      "parameters": [
        {
          "name": "portfolioId",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was removed."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/portfolios/{portfolio_id}/videos/{video_id}",
      "method": "getSpecificVideo",
      "httpMethod": "get",
      "tag": "Portfolios\\Videos",
      "typeScriptTag": "portfoliosVideos",
      "description": "Get a specific video in a portfolio",
      "parameters": [
        {
          "name": "portfolioId",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/portfolios/{portfolio_id}/videos/{video_id}",
      "method": "putVideoToPortfolio",
      "httpMethod": "put",
      "tag": "Portfolios\\Videos",
      "typeScriptTag": "portfoliosVideos",
      "description": "Add a video to a portfolio",
      "parameters": [
        {
          "name": "portfolioId",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was added."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/presets",
      "method": "getAllUserCreatedEmbedPresets",
      "httpMethod": "get",
      "tag": "Embed Presets\\Essentials",
      "typeScriptTag": "embedPresetsEssentials",
      "description": "Get all the embed presets that a user has created",
      "parameters": [
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/presets",
      "method": "createPreset",
      "httpMethod": "post",
      "tag": "Embed Presets\\Essentials",
      "typeScriptTag": "embedPresetsEssentials",
      "description": "Create an embed preset",
      "parameters": [
        {
          "name": "embed",
          "schema": "object",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "New preset"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/presets/{preset_id}",
      "method": "getSpecificPreset",
      "httpMethod": "get",
      "tag": "Embed Presets\\Essentials",
      "typeScriptTag": "embedPresetsEssentials",
      "description": "Get a specific embed preset",
      "parameters": [
        {
          "name": "presetId",
          "schema": "number",
          "required": true,
          "description": "The ID of the preset.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/presets/{preset_id}",
      "method": "editPreset",
      "httpMethod": "patch",
      "tag": "Embed Presets\\Essentials",
      "typeScriptTag": "embedPresetsEssentials",
      "description": "Edit an embed preset",
      "parameters": [
        {
          "name": "presetId",
          "schema": "number",
          "required": true,
          "description": "The ID of the preset.",
          "example": 12345
        },
        {
          "name": "outro",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/presets/{preset_id}/videos",
      "method": "getSpecificPresetVideos",
      "httpMethod": "get",
      "tag": "Embed Presets\\Videos",
      "typeScriptTag": "embedPresetsVideos",
      "description": "Get all the videos that have a specific embed preset",
      "parameters": [
        {
          "name": "presetId",
          "schema": "number",
          "required": true,
          "description": "The ID of the embed preset.",
          "example": 12345
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects",
      "method": "getAllUserFolders",
      "httpMethod": "get",
      "tag": "Folders\\Essentials",
      "typeScriptTag": "foldersEssentials",
      "description": "Get all the folders that belong to the user",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `date` - Sort the results by date.\n * `default` - Use the default sort order.\n * `modified_time` - Sort the results by last modification.\n * `name` - Sort the results by name.\n * `pinned_on` - Sort the results by pinned timestamp.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects",
      "method": "createFolder",
      "httpMethod": "post",
      "tag": "Folders\\Essentials",
      "typeScriptTag": "foldersEssentials",
      "description": "Create a folder",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Rough cuts"
        },
        {
          "name": "parent_folder_uri",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "/users/12345/projects/6789"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects/{project_id}",
      "method": "deleteFolder",
      "httpMethod": "delete",
      "tag": "Folders\\Essentials",
      "typeScriptTag": "foldersEssentials",
      "description": "Delete a folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        },
        {
          "name": "shouldDeleteClips",
          "schema": "boolean",
          "required": false,
          "description": "Whether to delete all the videos in the folder along with the folder itself.",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The folder was deleted."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects/{project_id}",
      "method": "getSpecificFolder",
      "httpMethod": "get",
      "tag": "Folders\\Essentials",
      "typeScriptTag": "foldersEssentials",
      "description": "Get a specific folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects/{project_id}",
      "method": "editFolder",
      "httpMethod": "patch",
      "tag": "Folders\\Essentials",
      "typeScriptTag": "foldersEssentials",
      "description": "Edit a folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Rough cuts"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects/{project_id}/items",
      "method": "removeFromFolder",
      "httpMethod": "delete",
      "tag": "Folders\\Items",
      "typeScriptTag": "foldersItems",
      "description": "Remove items from a folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        },
        {
          "name": "shouldDeleteItems",
          "schema": "boolean",
          "required": false,
          "description": "Whether to delete the items when removing them from the folder.",
          "example": false
        },
        {
          "name": "uris",
          "schema": "string",
          "required": true,
          "description": "A comma-separated list of video or event URIs to remove.",
          "example": "/videos/258684937,/live_events/273576296"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The items were removed."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects/{project_id}/items",
      "method": "getFolderItems",
      "httpMethod": "get",
      "tag": "Folders\\Items",
      "typeScriptTag": "foldersItems",
      "description": "Get all the items in a folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `folder` - Filter the results by folder.\n * `live_event` - Filter the results by event.\n * `video` - Filter the results by video.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `default` - Use the default sort order.\n * `duration` - Sort the results by duration. Items without a duration, namely events and folders, are grouped by type in ascending alphabetical order, with events first.\n * `last_user_action_event_date` - Sort the results by the date of the last user action.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK"
        }
      ]
    },
    {
      "url": "/me/projects/{project_id}/videos",
      "method": "removeMultipleFromFolder",
      "httpMethod": "delete",
      "tag": "Folders\\Videos",
      "typeScriptTag": "foldersVideos",
      "description": "Remove a list of videos from a folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        },
        {
          "name": "shouldDeleteClips",
          "schema": "boolean",
          "required": false,
          "description": "Whether to delete the videos when removing them from the folder.",
          "example": false
        },
        {
          "name": "uris",
          "schema": "string",
          "required": true,
          "description": "A comma-separated list of the video URIs to remove.",
          "example": "/videos/258684937,/videos/273576296"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The videos were removed."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects/{project_id}/videos",
      "method": "getVideosInFolder",
      "httpMethod": "get",
      "tag": "Folders\\Videos",
      "typeScriptTag": "foldersVideos",
      "description": "Get all the videos in a folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filterTag",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of tags to filter on. All results must include at least one of these tags. The use of this parameter triggers a search.",
          "example": "abc,xyz"
        },
        {
          "name": "filterTagAllOf",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of tags to filter on. All results must include all of these tags. The use of this parameter triggers a search.",
          "example": "abc,xyz"
        },
        {
          "name": "filterTagExclude",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of tags to exclude. The use of this parameter triggers a search.",
          "example": "abc,xyz"
        },
        {
          "name": "includeSubfolders",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include subfolders.",
          "example": false
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "queryFields",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of fields to query over. The default value is `title,description,chapters,tags`.",
          "example": "title,description"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `default` - Use the default sort order.\n * `duration` - Sort the results by duration.\n * `last_user_action_event_date` - Sort the results by the date of the last user action.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects/{project_id}/videos",
      "method": "addMultipleToFolder",
      "httpMethod": "put",
      "tag": "Folders\\Videos",
      "typeScriptTag": "foldersVideos",
      "description": "Add a list of videos to a folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        },
        {
          "name": "uris",
          "schema": "string",
          "required": true,
          "description": "A comma-separated list of video URIs to add.",
          "example": "/videos/258684937,/videos/273576296"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The videos were added."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects/{project_id}/videos/{video_id}",
      "method": "removeSingleVideo",
      "httpMethod": "delete",
      "tag": "Folders\\Videos",
      "typeScriptTag": "foldersVideos",
      "description": "Remove a video from a folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was removed."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects/{project_id}/videos/{video_id}",
      "method": "addToFolder",
      "httpMethod": "put",
      "tag": "Folders\\Videos",
      "typeScriptTag": "foldersVideos",
      "description": "Add a video to a folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was added."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/videos",
      "method": "deleteUserVideos",
      "httpMethod": "delete",
      "tag": "Videos\\Essentials",
      "typeScriptTag": "videosEssentials",
      "description": "Delete a user's videos",
      "parameters": [
        {
          "name": "uris",
          "schema": "string",
          "required": true,
          "description": "A comma-separated list of the video URIs to delete.",
          "example": "/videos/258684937,/videos/258684546"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The videos were deleted."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/videos",
      "method": "getAllUserVideos",
      "httpMethod": "get",
      "tag": "Videos\\Essentials",
      "typeScriptTag": "videosEssentials",
      "description": "Get all the videos that the user has uploaded",
      "parameters": [
        {
          "name": "containingUri",
          "schema": "string",
          "required": false,
          "description": "The page that contains the video URI. The field is available only when not paired with **query**.",
          "example": "/videos/258684937"
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `app_only` - Return app-only videos.\n * `embeddable` - Return embeddable videos.\n * `featured` - Return featured videos.\n * `live` - Return only live videos.\n * `no_placeholder` - Return no placeholder videos.\n * `nolive` - Return no live videos.\n * `playable` - Return playable videos.\n * `screen_recorded` - Return screen-recorded videos.\n"
        },
        {
          "name": "filterEmbeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
          "example": true
        },
        {
          "name": "filterPlayable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by playable videos (`true`) or non-playable videos (`false`).",
          "example": true
        },
        {
          "name": "filterScreenRecorded",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by screen-recorded videos (`true`) or non-screen-recorded videos (`false`).",
          "example": true
        },
        {
          "name": "filterTag",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of tags to filter on. All results must include at least one of these tags.",
          "example": "abc,xyz"
        },
        {
          "name": "filterTagAllOf",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of tags to filter on. All results must include all of these tags.",
          "example": "abc,xyz"
        },
        {
          "name": "filterTagExclude",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of tags to exclude. All results must exclude all of these tags.",
          "example": "abc,xyz"
        },
        {
          "name": "includeTeamContent",
          "schema": "string",
          "required": false,
          "description": "Whether to include content from the user's teams when searching. _This field is deprecated._",
          "example": "true"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "queryFields",
          "schema": "array",
          "required": false,
          "description": "A comma-separated list of fields to query over. The default value is `title,description,chapters,tags`.\n\nOption descriptions:\n * `chapters` - Query by chapter titles that have been added to the video.\n * `description` - Query by the description of the video.\n * `tags` - Query by tag names that have been added to the video.\n * `title` - Query by the title of the video.\n",
          "example": "title,description"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically by title.\n * `date` - Sort the results by date.\n * `default` - Use the default sorting method.\n * `duration` - Sort the results by duration.\n * `last_user_action_event_date` - Sort the results by last user interaction. If a result hasn't had an interaction, the upload date is used instead.\n * `likes` - Sort the results by number of likes. To use this option, **direction** must be `desc`.\n * `modified_time` - Sort the results by last modification.\n * `plays` - Sort the results by number of plays. To use this option, **direction** must be `desc`.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "304",
          "description": "The authenticated user hasn't uploaded any videos since the given **If-Modified-Since** header."
        }
      ]
    },
    {
      "url": "/me/videos",
      "method": "beginVideoUploadProcess",
      "httpMethod": "post",
      "tag": "Videos\\Uploads",
      "typeScriptTag": "videosUploads",
      "description": "Upload a video",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "A celebration of 10 years of Staff Picks."
        },
        {
          "name": "content_rating",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "embed",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "embed_domains",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "folder_uri",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "/users/12345/folders/6789"
        },
        {
          "name": "hide_from_vimeo",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "license",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "locale",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "en_US"
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "Celebrating 10 Years of Staff Picks"
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "hunter1"
        },
        {
          "name": "privacy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "review_page",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "spatial",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "upload",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/videos/{video_id}",
      "method": "checkUserOwnsVideo",
      "httpMethod": "get",
      "tag": "Videos\\Essentials",
      "typeScriptTag": "videosEssentials",
      "description": "Check if the user owns a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/videos/{video_id}/destinations",
      "method": "getAllDestinations",
      "httpMethod": "get",
      "tag": "Live\\Event destinations",
      "typeScriptTag": "liveEventDestinations",
      "description": "Get all the destinations of a one-time live event",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/videos/{video_id}/destinations",
      "method": "createOneTimeLiveEventDestination",
      "httpMethod": "post",
      "tag": "Live\\Event destinations",
      "typeScriptTag": "liveEventDestinations",
      "description": "Create a one-time live event destination",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 12345
        },
        {
          "name": "display_name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "My channel"
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "privacy",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "public"
        },
        {
          "name": "provider_destination_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "bda55c6b3ba4"
        },
        {
          "name": "provider_video_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "6817807391346708000"
        },
        {
          "name": "scheduled_at",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 1625754461
        },
        {
          "name": "service_name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "youtube"
        },
        {
          "name": "stream_key",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "da056692-ba63-4749-a6eb-a476a22b3acd"
        },
        {
          "name": "stream_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "rtmp://mycooldomain.com/live"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "channel"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/videos/{video_id}/m3u8_playback",
      "method": "getPlaybackUrl",
      "httpMethod": "get",
      "tag": "Videos\\Live M3U8 playback",
      "typeScriptTag": "videosLiveM3U8Playback",
      "description": "Get an M3U8 playback URL for a one-time live event",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The M3U8 playback URL was returned."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/watched/videos",
      "method": "deleteEntireWatchHistory",
      "httpMethod": "delete",
      "tag": "Users\\Watch history",
      "typeScriptTag": "usersWatchHistory",
      "description": "Delete the user's watch history",
      "parameters": [],
      "responses": [
        {
          "statusCode": "204",
          "description": "The authenticated user's watch history was deleted."
        }
      ]
    },
    {
      "url": "/me/watched/videos",
      "method": "getWatchedVideos",
      "httpMethod": "get",
      "tag": "Users\\Watch history",
      "typeScriptTag": "usersWatchHistory",
      "description": "Get all the videos that a user has watched",
      "parameters": [
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/watched/videos/{video_id}",
      "method": "deleteSpecificVideo",
      "httpMethod": "delete",
      "tag": "Users\\Watch history",
      "typeScriptTag": "usersWatchHistory",
      "description": "Delete a specific video from the user's watch history",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was deleted from the authenticated user's watch history."
        }
      ]
    },
    {
      "url": "/me/watchlater",
      "method": "getVideosInQueue",
      "httpMethod": "get",
      "tag": "Watch Later Queue\\Essentials",
      "typeScriptTag": "watchLaterQueueEssentials",
      "description": "Get all the videos in the user's Watch Later queue",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n"
        },
        {
          "name": "filterEmbeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
          "example": true
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by date added.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "304",
          "description": "The user hasn't added any videos to their Watch Later queue since the given `If-Modified-Since` header."
        }
      ]
    },
    {
      "url": "/me/watchlater/{video_id}",
      "method": "removeVideoFromQueue",
      "httpMethod": "delete",
      "tag": "Watch Later Queue\\Essentials",
      "typeScriptTag": "watchLaterQueueEssentials",
      "description": "Remove a video from the user's Watch Later queue",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was removed."
        }
      ]
    },
    {
      "url": "/me/watchlater/{video_id}",
      "method": "checkVideoInQueue",
      "httpMethod": "get",
      "tag": "Watch Later Queue\\Essentials",
      "typeScriptTag": "watchLaterQueueEssentials",
      "description": "Check if the user has added a video to their Watch Later queue",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/watchlater/{video_id}",
      "method": "addVideoToQueue",
      "httpMethod": "put",
      "tag": "Watch Later Queue\\Essentials",
      "typeScriptTag": "watchLaterQueueEssentials",
      "description": "Add a video to the user's Watch Later queue",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was added."
        }
      ]
    },
    {
      "url": "/me/webinars",
      "method": "createWebinar",
      "httpMethod": "post",
      "tag": "Webinar\\Essentials",
      "typeScriptTag": "webinarEssentials",
      "description": "Create a webinar",
      "parameters": [
        {
          "name": "title",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Interviews Daily"
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "In this episode, we interview a surprise guest"
        },
        {
          "name": "email_settings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "folder_uri",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "gogo"
        },
        {
          "name": "privacy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "schedule",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "time_zone",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "America/New_York"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/webinars/{webinar_id}",
      "method": "getSpecificWebinar",
      "httpMethod": "get",
      "tag": "Webinar\\Essentials",
      "typeScriptTag": "webinarEssentials",
      "description": "Get a specific webinar",
      "parameters": [
        {
          "name": "webinarId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/webinars/{webinar_id}",
      "method": "updateWebinarBelongingToAuthenticatedUser",
      "httpMethod": "patch",
      "tag": "Webinar\\Essentials",
      "typeScriptTag": "webinarEssentials",
      "description": "Update a webinar",
      "parameters": [
        {
          "name": "webinarId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        },
        {
          "name": "title",
          "schema": "string",
          "description": "",
          "example": "Interviews Daily"
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "In this episode, we interview a surprise guest"
        },
        {
          "name": "email_settings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "description": "",
          "example": "gogo"
        },
        {
          "name": "privacy",
          "schema": "object",
          "description": ""
        },
        {
          "name": "schedule",
          "schema": "object",
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "description": "",
          "example": "started"
        },
        {
          "name": "time_zone",
          "schema": "string",
          "description": "",
          "example": "America/New_York"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/webinars/{webinar_id}/email_settings",
      "method": "getCustomizationData",
      "httpMethod": "get",
      "tag": "Webinar\\Emails",
      "typeScriptTag": "webinarEmails",
      "description": "Get customization email data for a webinar",
      "parameters": [
        {
          "name": "webinarId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/webinars/{webinar_id}/email_settings",
      "method": "customizePreferences",
      "httpMethod": "patch",
      "tag": "Webinar\\Emails",
      "typeScriptTag": "webinarEmails",
      "description": "Customize the email preferences of a webinar",
      "parameters": [
        {
          "name": "webinarId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        },
        {
          "name": "accent_color",
          "schema": "string",
          "description": "",
          "example": "#000fff"
        },
        {
          "name": "custom_link",
          "schema": "string",
          "description": "",
          "example": "https://xyz.com"
        },
        {
          "name": "email_event_reminder_24_hrs",
          "schema": "object",
          "description": ""
        },
        {
          "name": "email_post_event_thank_you",
          "schema": "object",
          "description": ""
        },
        {
          "name": "email_preferences",
          "schema": "object",
          "description": ""
        },
        {
          "name": "email_registration_confirmation",
          "schema": "object",
          "description": ""
        },
        {
          "name": "from",
          "schema": "string",
          "description": "",
          "example": "Vimeo"
        },
        {
          "name": "logo_uri",
          "schema": "string",
          "description": "",
          "example": "/users/123/team_logos_2343"
        },
        {
          "name": "reply_email",
          "schema": "string",
          "description": "",
          "example": "test@vimeo.com"
        },
        {
          "name": "sender_address",
          "schema": "string",
          "description": "",
          "example": "Bangalore, India"
        },
        {
          "name": "sender_policy_url",
          "schema": "string",
          "description": "",
          "example": "vimeo.com/policy"
        },
        {
          "name": "use_custom_link",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "use_reply_email",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "use_sender_address",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "use_sender_policy_url",
          "schema": "boolean",
          "description": "",
          "example": false
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/webinars/{webinar_id}/registrants",
      "method": "getUserRegistrationsByWebinarId",
      "httpMethod": "get",
      "tag": "Webinar\\Registrations",
      "typeScriptTag": "webinarRegistrations",
      "description": "Get user registration data associated with a webinar",
      "parameters": [
        {
          "name": "webinarId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `registration_date` - Sort the results by registration date.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/webinars/{webinar_id}/registrants",
      "method": "captureUserRegistrationList",
      "httpMethod": "put",
      "tag": "Webinar\\Registrations",
      "typeScriptTag": "webinarRegistrations",
      "description": "Capture the user registration list associated with a webinar",
      "parameters": [
        {
          "name": "webinarId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        },
        {
          "name": "registrants",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The webinar data was captured."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/webinars/{webinar_id}/registrants/{registrant_id}",
      "method": "deleteRegistrantRecord",
      "httpMethod": "delete",
      "tag": "Webinar\\Registrations",
      "typeScriptTag": "webinarRegistrations",
      "description": "Delete a registrant record associated with a webinar",
      "parameters": [
        {
          "name": "registrantId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar registrant.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        },
        {
          "name": "webinarId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The webinar registrant was deleted."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/webinars/{webinar_id}/registrants/{registrant_id}",
      "method": "updateUserRegistrationData",
      "httpMethod": "patch",
      "tag": "Webinar\\Registrations",
      "typeScriptTag": "webinarRegistrations",
      "description": "Update user registration data associated with a webinar",
      "parameters": [
        {
          "name": "registrantId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar registrant.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        },
        {
          "name": "webinarId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        },
        {
          "name": "is_blocked",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/oauth/access_token",
      "method": "oAuthCodeExchange",
      "httpMethod": "post",
      "tag": "Authentication Extras\\Exchange",
      "typeScriptTag": "authenticationExtrasExchange",
      "description": "Exchange an authorization code for an access token",
      "parameters": [
        {
          "name": "code",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "1234abcd"
        },
        {
          "name": "grant_type",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "GRANT_TYPE"
        },
        {
          "name": "redirect_uri",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "https://example.com"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/oauth/authorize/client",
      "method": "auth",
      "httpMethod": "post",
      "tag": "Authentication Extras\\Authenticate",
      "typeScriptTag": "authenticationExtrasAuthenticate",
      "description": "Authorize a client with OAuth",
      "parameters": [
        {
          "name": "grant_type",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "GRANT_TYPE"
        },
        {
          "name": "scope",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "public"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/oauth/authorize/vimeo_oauth1",
      "method": "oAuth1ToOAuth2",
      "httpMethod": "post",
      "tag": "Authentication Extras\\Convert",
      "typeScriptTag": "authenticationExtrasConvert",
      "description": "Convert an OAuth 1 access token to an OAuth 2 access token",
      "parameters": [
        {
          "name": "grant_type",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "GRANT_TYPE"
        },
        {
          "name": "token",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "58037c0078d5f54e15e638cc0dd882a570b13c50"
        },
        {
          "name": "token_secret",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "NTgwMzdjMDA3OGQ1ZjU0ZTE1ZTYzOGNjMGRkODgyYTU3MGIxM2M1MA=="
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/oauth/verify",
      "method": "token",
      "httpMethod": "get",
      "tag": "Authentication Extras\\Essentials",
      "typeScriptTag": "authenticationExtrasEssentials",
      "description": "Verify an OAuth 2 access token",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/genres",
      "method": "getAllGenres",
      "httpMethod": "get",
      "tag": "On Demand\\Genres",
      "typeScriptTag": "onDemandGenres",
      "description": "Get all On Demand genres",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/genres/{genre_id}",
      "method": "specificGenreGet",
      "httpMethod": "get",
      "tag": "On Demand\\Genres",
      "typeScriptTag": "onDemandGenres",
      "description": "Get a specific On Demand genre",
      "parameters": [
        {
          "name": "genreId",
          "schema": "string",
          "required": true,
          "description": "The ID of the genre.",
          "example": "animation"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/genres/{genre_id}/pages",
      "method": "getAllPagesInGenre",
      "httpMethod": "get",
      "tag": "On Demand\\Genres",
      "typeScriptTag": "onDemandGenres",
      "description": "Get all the On Demand pages in a genre",
      "parameters": [
        {
          "name": "genreId",
          "schema": "string",
          "required": true,
          "description": "The ID of the genre.",
          "example": "animation"
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `country` - Sort the results by country.\n * `my_region` - Sort the results by user's region.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `name` - Sort the results by name.\n * `publish.time` - Sort the results by time of publishing.\n * `videos` - Sort the results by video.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/genres/{genre_id}/pages/{ondemand_id}",
      "method": "getSpecificPageInGenre",
      "httpMethod": "get",
      "tag": "On Demand\\Genres",
      "typeScriptTag": "onDemandGenres",
      "description": "Get a specific On Demand page in a genre",
      "parameters": [
        {
          "name": "genreId",
          "schema": "string",
          "required": true,
          "description": "The ID of the genre.",
          "example": "animation"
        },
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}",
      "method": "deleteOnDemandPage",
      "httpMethod": "delete",
      "tag": "On Demand\\Essentials",
      "typeScriptTag": "onDemandEssentials",
      "description": "Delete an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The On Demand page was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}",
      "method": "vod",
      "httpMethod": "get",
      "tag": "On Demand\\Essentials",
      "typeScriptTag": "onDemandEssentials",
      "description": "Get a specific On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}",
      "method": "vod",
      "httpMethod": "patch",
      "tag": "On Demand\\Essentials",
      "typeScriptTag": "onDemandEssentials",
      "description": "Edit an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "link",
          "schema": "string",
          "description": "",
          "example": "darbyforever"
        },
        {
          "name": "preorder",
          "schema": "object",
          "description": ""
        },
        {
          "name": "publish",
          "schema": "object",
          "description": ""
        },
        {
          "name": "publish_when_ready",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/backgrounds",
      "method": "getAllBackgroundsOnPage",
      "httpMethod": "get",
      "tag": "On Demand\\Backgrounds",
      "typeScriptTag": "onDemandBackgrounds",
      "description": "Get all the backgrounds on an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/backgrounds",
      "method": "addBackgroundToPage",
      "httpMethod": "post",
      "tag": "On Demand\\Backgrounds",
      "typeScriptTag": "onDemandBackgrounds",
      "description": "Add a background to an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/backgrounds/{background_id}",
      "method": "deleteBackgroundFromPage",
      "httpMethod": "delete",
      "tag": "On Demand\\Backgrounds",
      "typeScriptTag": "onDemandBackgrounds",
      "description": "Delete a background on an On Demand page",
      "parameters": [
        {
          "name": "backgroundId",
          "schema": "number",
          "required": true,
          "description": "The ID of the background image.",
          "example": 12345
        },
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The background image was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/backgrounds/{background_id}",
      "method": "getSpecificBackground",
      "httpMethod": "get",
      "tag": "On Demand\\Backgrounds",
      "typeScriptTag": "onDemandBackgrounds",
      "description": "Get a specific background on an On Demand page",
      "parameters": [
        {
          "name": "backgroundId",
          "schema": "number",
          "required": true,
          "description": "The ID of the background image.",
          "example": 12345
        },
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/backgrounds/{background_id}",
      "method": "editBackgroundOnPage",
      "httpMethod": "patch",
      "tag": "On Demand\\Backgrounds",
      "typeScriptTag": "onDemandBackgrounds",
      "description": "Edit a background on an On Demand page",
      "parameters": [
        {
          "name": "backgroundId",
          "schema": "number",
          "required": true,
          "description": "The ID of the background image.",
          "example": 12345
        },
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/genres",
      "method": "getGenres",
      "httpMethod": "get",
      "tag": "On Demand\\Genres",
      "typeScriptTag": "onDemandGenres",
      "description": "Get all the genres of an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/genres/{genre_id}",
      "method": "removeGenreFromPage",
      "httpMethod": "delete",
      "tag": "On Demand\\Genres",
      "typeScriptTag": "onDemandGenres",
      "description": "Remove a genre from an On Demand page",
      "parameters": [
        {
          "name": "genreId",
          "schema": "string",
          "required": true,
          "description": "The ID of the genre.",
          "example": "animation"
        },
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The genre was removed."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/genres/{genre_id}",
      "method": "checkGenreAssociation",
      "httpMethod": "get",
      "tag": "On Demand\\Genres",
      "typeScriptTag": "onDemandGenres",
      "description": "Check whether an On Demand page belongs to a specific genre",
      "parameters": [
        {
          "name": "genreId",
          "schema": "string",
          "required": true,
          "description": "The ID of the genre.",
          "example": "animation"
        },
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/genres/{genre_id}",
      "method": "addGenreToPage",
      "httpMethod": "put",
      "tag": "On Demand\\Genres",
      "typeScriptTag": "onDemandGenres",
      "description": "Add a genre to an On Demand page",
      "parameters": [
        {
          "name": "genreId",
          "schema": "string",
          "required": true,
          "description": "The ID of the genre.",
          "example": "animation"
        },
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/likes",
      "method": "getAllUserLikes",
      "httpMethod": "get",
      "tag": "Likes\\Essentials",
      "typeScriptTag": "likesEssentials",
      "description": "Get all the users who have liked a video on an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `extra` - Consider extra content only.\n * `main` - Consider main content only.\n * `trailer` - Consider trailer content only.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by join date.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/pictures",
      "method": "getOnDemandPagePosters",
      "httpMethod": "get",
      "tag": "On Demand\\Posters",
      "typeScriptTag": "onDemandPosters",
      "description": "Get all the posters on an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/pictures",
      "method": "addPosterToPage",
      "httpMethod": "post",
      "tag": "On Demand\\Posters",
      "typeScriptTag": "onDemandPosters",
      "description": "Add a poster to an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/pictures/{poster_id}",
      "method": "getSpecificPoster",
      "httpMethod": "get",
      "tag": "On Demand\\Posters",
      "typeScriptTag": "onDemandPosters",
      "description": "Get a specific poster on an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "posterId",
          "schema": "number",
          "required": true,
          "description": "The ID of the poster.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/pictures/{poster_id}",
      "method": "updatePoster",
      "httpMethod": "patch",
      "tag": "On Demand\\Posters",
      "typeScriptTag": "onDemandPosters",
      "description": "Edit a poster on an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "posterId",
          "schema": "number",
          "required": true,
          "description": "The ID of the poster.",
          "example": 12345
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/promotions",
      "method": "getAllPagePromotions",
      "httpMethod": "get",
      "tag": "On Demand\\Promotions",
      "typeScriptTag": "onDemandPromotions",
      "description": "Get all the promotions on an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "filter",
          "schema": "string",
          "required": true,
          "description": "The type of filter to apply to the results.\n\nOption descriptions:\n * `batch` - Filter the results by the `batch` promotion.\n * `default` - Filter the results by the default promotion.\n * `single` - Filter the results by the `single` promotion.\n * `vip` - Filter the results by the `vip` promotion.\n",
          "example": "FILTER"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/promotions",
      "method": "addPromotionToPage",
      "httpMethod": "post",
      "tag": "On Demand\\Promotions",
      "typeScriptTag": "onDemandPromotions",
      "description": "Add a promotion to an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "access_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "code",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "sxsw2018"
        },
        {
          "name": "discount_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "download",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": true
        },
        {
          "name": "end_time",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "1526089920"
        },
        {
          "name": "label",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "sxsw"
        },
        {
          "name": "percent_off",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 50
        },
        {
          "name": "product_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "start_time",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "1526089920"
        },
        {
          "name": "stream_period",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "STREAM_PERIOD"
        },
        {
          "name": "total",
          "schema": "number",
          "required": true,
          "description": "",
          "example": 9
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "TYPE"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/promotions/{promotion_id}",
      "method": "deletePromotionOnPage",
      "httpMethod": "delete",
      "tag": "On Demand\\Promotions",
      "typeScriptTag": "onDemandPromotions",
      "description": "Delete a promotion on an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "promotionId",
          "schema": "number",
          "required": true,
          "description": "The ID of the promotion.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The promotion was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/promotions/{promotion_id}",
      "method": "specificPromotionGet",
      "httpMethod": "get",
      "tag": "On Demand\\Promotions",
      "typeScriptTag": "onDemandPromotions",
      "description": "Get a specific promotion on an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "promotionId",
          "schema": "number",
          "required": true,
          "description": "The ID of the promotion.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/promotions/{promotion_id}/codes",
      "method": "getAllPromotionCodes",
      "httpMethod": "get",
      "tag": "On Demand\\Promotions",
      "typeScriptTag": "onDemandPromotions",
      "description": "Get all the codes of a promotion on an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "promotionId",
          "schema": "number",
          "required": true,
          "description": "The ID of the promotion.",
          "example": 12345
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/regions",
      "method": "removeMultiple",
      "httpMethod": "delete",
      "tag": "On Demand\\Regions",
      "typeScriptTag": "onDemandRegions",
      "description": "Remove a list of regions from an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "countries",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/regions",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "On Demand\\Regions",
      "typeScriptTag": "onDemandRegions",
      "description": "Get all the regions on an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/regions",
      "method": "addMultiple",
      "httpMethod": "put",
      "tag": "On Demand\\Regions",
      "typeScriptTag": "onDemandRegions",
      "description": "Add a list of regions to an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "countries",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/regions/{country}",
      "method": "removeSpecificRegion",
      "httpMethod": "delete",
      "tag": "On Demand\\Regions",
      "typeScriptTag": "onDemandRegions",
      "description": "Remove a specific region from an On Demand page",
      "parameters": [
        {
          "name": "country",
          "schema": "string",
          "required": true,
          "description": "The country code of the region to remove.",
          "example": "US"
        },
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The region was removed."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/regions/{country}",
      "method": "getSpecificRegion",
      "httpMethod": "get",
      "tag": "On Demand\\Regions",
      "typeScriptTag": "onDemandRegions",
      "description": "Get a specific region on an On Demand page",
      "parameters": [
        {
          "name": "country",
          "schema": "string",
          "required": true,
          "description": "The country code of the region to return.",
          "example": "US"
        },
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/regions/{country}",
      "method": "addRegionToPage",
      "httpMethod": "put",
      "tag": "On Demand\\Regions",
      "typeScriptTag": "onDemandRegions",
      "description": "Add a specific region to an On Demand page",
      "parameters": [
        {
          "name": "country",
          "schema": "string",
          "required": true,
          "description": "The country code of the region to add.",
          "example": "US"
        },
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/seasons",
      "method": "listAll",
      "httpMethod": "get",
      "tag": "On Demand\\Seasons",
      "typeScriptTag": "onDemandSeasons",
      "description": "Get all the seasons on an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `viewable` - Filter by viewable seasons.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `date` - Sort the results by date.\n * `manual` - Sort the results manually.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/seasons/{season_id}",
      "method": "specificGet",
      "httpMethod": "get",
      "tag": "On Demand\\Seasons",
      "typeScriptTag": "onDemandSeasons",
      "description": "Get a specific season on an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "seasonId",
          "schema": "number",
          "required": true,
          "description": "The ID of the season.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/seasons/{season_id}/videos",
      "method": "getAllVideosInSeason",
      "httpMethod": "get",
      "tag": "On Demand\\Seasons",
      "typeScriptTag": "onDemandSeasons",
      "description": "Get all the videos in a season on an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "seasonId",
          "schema": "number",
          "required": true,
          "description": "The ID of the season.",
          "example": 12345
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `viewable` - Filter by viewable videos.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `date` - Sort the results by date.\n * `default` - Use the default sorting method.\n * `manual` - Sort the results manually.\n * `name` - Sort the results by name.\n * `purchase_time` - Sort the results by time of purchase.\n * `release_date` - Sort the results by release date.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/videos",
      "method": "getAllVideos",
      "httpMethod": "get",
      "tag": "On Demand\\Videos",
      "typeScriptTag": "onDemandVideos",
      "description": "Get all the videos on an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `all` - Filter for all videos.\n * `buy` - Filter for purchased videos.\n * `expiring_soon` - Filter for videos that expire soon.\n * `extra` - Filter for extra footage videos.\n * `main` - Filter for main videos.\n * `main.viewable` - Filter for videos that are both the main video and are viewable.\n * `rent` - Filter for rented videos.\n * `trailer` - Filter for trailer videos.\n * `unwatched` - Filter for unwatched videos.\n * `viewable` - Filter for videos that are viewable.\n * `watched` - Filter for watched videos.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `date` - Sort the results by date.\n * `default` - Use the default sorting method.\n * `episode` - Sort the results by episode.\n * `manual` - Sort the results manually.\n * `name` - Sort the results by name.\n * `purchase_time` - Sort the results by time of purchase.\n * `release_date` - Sort the results by release date.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/videos/{video_id}",
      "method": "removeFromPage",
      "httpMethod": "delete",
      "tag": "On Demand\\Videos",
      "typeScriptTag": "onDemandVideos",
      "description": "Remove a video from an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was removed."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/videos/{video_id}",
      "method": "specificVideoGet",
      "httpMethod": "get",
      "tag": "On Demand\\Videos",
      "typeScriptTag": "onDemandVideos",
      "description": "Get a specific video on an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/videos/{video_id}",
      "method": "addVideoToPage",
      "httpMethod": "put",
      "tag": "On Demand\\Videos",
      "typeScriptTag": "onDemandVideos",
      "description": "Add a video to an On Demand page",
      "parameters": [
        {
          "name": "ondemandId",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page.",
          "example": 61326
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 12345
        },
        {
          "name": "buy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "position",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 10
        },
        {
          "name": "release_year",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 2018
        },
        {
          "name": "rent",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "TYPE"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/regions",
      "method": "regions",
      "httpMethod": "get",
      "tag": "On Demand\\Regions",
      "typeScriptTag": "onDemandRegions",
      "description": "Get all the On Demand regions",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/regions/{country}",
      "method": "region",
      "httpMethod": "get",
      "tag": "On Demand\\Regions",
      "typeScriptTag": "onDemandRegions",
      "description": "Get a specific On Demand region",
      "parameters": [
        {
          "name": "country",
          "schema": "string",
          "required": true,
          "description": "The country code of the region to return.",
          "example": "US"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscription_plans/{tier}",
      "method": "plan",
      "httpMethod": "get",
      "tag": "Subscription Plans\\Essentials",
      "typeScriptTag": "subscriptionPlansEssentials",
      "description": "Get a single subscription plan",
      "parameters": [
        {
          "name": "tier",
          "schema": "string",
          "required": true,
          "description": "The type of subscription plan.\n\nOption descriptions:\n * `advanced` - The plan type is Vimeo Advanced.\n * `business` - The plan type is Vimeo Business.\n * `free` - The plan type is Vimeo Free.\n * `live_premium` - The plan type is Vimeo Premium.\n * `plus` - The plan type is Vimeo Plus.\n * `pro` - The plan type is Vimeo Pro.\n * `pro_unlimited` - The plan type is Vimeo Pro Unlimited.\n * `standard` - The plan type is Vimeo Standard.\n * `starter` - The plan type is Vimeo Starter.\n",
          "example": "pro"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK"
        }
      ]
    },
    {
      "url": "/tags/{word}",
      "method": "tag",
      "httpMethod": "get",
      "tag": "Tags\\Essentials",
      "typeScriptTag": "tagsEssentials",
      "description": "Get a tag",
      "parameters": [
        {
          "name": "word",
          "schema": "string",
          "required": true,
          "description": "The tag to return.",
          "example": "awesome"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/tags/{word}/videos",
      "method": "getAllByTag",
      "httpMethod": "get",
      "tag": "Videos\\Tags",
      "typeScriptTag": "videosTags",
      "description": "Get all the videos with a specific tag",
      "parameters": [
        {
          "name": "word",
          "schema": "string",
          "required": true,
          "description": "The tag word.",
          "example": "awesome"
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `created_time` - Sort the results by creation time.\n * `duration` - Sort the results by duration.\n * `name` - Sort the results by name.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/teammembers/{code}",
      "method": "getMembershipInformation",
      "httpMethod": "get",
      "tag": "Teams\\Members",
      "typeScriptTag": "teamsMembers",
      "description": "Get membership information about a team",
      "parameters": [
        {
          "name": "code",
          "schema": "string",
          "required": true,
          "description": "The code corresponding to the desired team. This value appears under `TeamUser` > `code`.",
          "example": "q3u4mrqoc3u4hcnqo34"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK"
        }
      ]
    },
    {
      "url": "/tokens",
      "method": "token",
      "httpMethod": "delete",
      "tag": "Authentication Extras\\Essentials",
      "typeScriptTag": "authenticationExtrasEssentials",
      "description": "Revoke the current access token",
      "parameters": [],
      "responses": [
        {
          "statusCode": "204",
          "description": "The token was revoked."
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/tutorial",
      "method": "tutorial",
      "httpMethod": "get",
      "tag": "Tutorial\\Essentials",
      "typeScriptTag": "tutorialEssentials",
      "description": "Get started with the Vimeo API",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK"
        }
      ]
    },
    {
      "url": "/users",
      "method": "users",
      "httpMethod": "get",
      "tag": "Users\\Search",
      "typeScriptTag": "usersSearch",
      "description": "Search for users",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n * `followers` - Sort the results by number of followers.\n * `relevant` - Sort the results by relevance.\n * `videos` - Sort the results by number of videos.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "503",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{owner_id}/folders/private_to_me",
      "method": "getUserPrivateToMeFolder",
      "httpMethod": "get",
      "tag": "Folders\\Essentials",
      "typeScriptTag": "foldersEssentials",
      "description": "Get a user's private-to-me folder",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "number",
          "required": true,
          "description": "The ID of the owner.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}",
      "method": "user",
      "httpMethod": "get",
      "tag": "Users\\Essentials",
      "typeScriptTag": "usersEssentials",
      "description": "Get the user",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}",
      "method": "user",
      "httpMethod": "patch",
      "tag": "Users\\Essentials",
      "typeScriptTag": "usersEssentials",
      "description": "Edit the user",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "bio",
          "schema": "string",
          "description": "",
          "example": "This is where you will find videos and news updates from the staff"
        },
        {
          "name": "content_filter",
          "schema": "array",
          "description": ""
        },
        {
          "name": "gender",
          "schema": "string",
          "description": ""
        },
        {
          "name": "link",
          "schema": "string",
          "description": "",
          "example": "staff"
        },
        {
          "name": "location",
          "schema": "string",
          "description": "",
          "example": "New York City"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "Vimeo Staff"
        },
        {
          "name": "password",
          "schema": "string",
          "description": "",
          "example": "hunter1"
        },
        {
          "name": "videos",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums",
      "method": "showcases",
      "httpMethod": "get",
      "tag": "Showcases\\Essentials",
      "typeScriptTag": "showcasesEssentials",
      "description": "Get all the showcases that belong to the user",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date of creation.\n * `duration` - Sort the results by duration.\n * `videos` - Sort the results by the number of videos.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums",
      "method": "showcases",
      "httpMethod": "patch",
      "tag": "Showcases\\Essentials",
      "typeScriptTag": "showcasesEssentials",
      "description": "Add videos and live events to showcases",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "albumItemUris",
          "schema": "string",
          "required": true,
          "description": "A comma-separated list of video or event URIs.",
          "example": "/videos/258684937,/live_events/273576296"
        },
        {
          "name": "albumUris",
          "schema": "string",
          "required": true,
          "description": "A comma-separated list of showcase URIs.",
          "example": "/showcases/258684873, /showcases/356684937"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The videos and events were added to the showcases."
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums",
      "method": "showcase",
      "httpMethod": "post",
      "tag": "Showcases\\Essentials",
      "typeScriptTag": "showcasesEssentials",
      "description": "Create a showcase",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "Vimeo holiday videos!"
        },
        {
          "name": "brand_color",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "ff66ee"
        },
        {
          "name": "hide_from_vimeo",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "hide_nav",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "hide_upcoming",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "layout",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Vimeo Holiday Videos!"
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "hunter1"
        },
        {
          "name": "privacy",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "review_mode",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "theme",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}",
      "method": "showcase",
      "httpMethod": "delete",
      "tag": "Showcases\\Essentials",
      "typeScriptTag": "showcasesEssentials",
      "description": "Delete a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The showcase was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}",
      "method": "showcase",
      "httpMethod": "get",
      "tag": "Showcases\\Essentials",
      "typeScriptTag": "showcasesEssentials",
      "description": "Get a specific showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}",
      "method": "showcase",
      "httpMethod": "patch",
      "tag": "Showcases\\Essentials",
      "typeScriptTag": "showcasesEssentials",
      "description": "Edit a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "Vimeo holiday videos!"
        },
        {
          "name": "brand_color",
          "schema": "string",
          "description": "",
          "example": "ff66ee"
        },
        {
          "name": "domain",
          "schema": "string",
          "description": "",
          "example": "mycustomdomain.com"
        },
        {
          "name": "hide_nav",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "hide_upcoming",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "layout",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "Vimeo Holiday Videos!"
        },
        {
          "name": "password",
          "schema": "string",
          "description": "",
          "example": "hunter1"
        },
        {
          "name": "privacy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "review_mode",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "sort",
          "schema": "string",
          "description": ""
        },
        {
          "name": "theme",
          "schema": "string",
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "description": "",
          "example": "my-custom-url"
        },
        {
          "name": "use_custom_domain",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/custom_thumbnails",
      "method": "list",
      "httpMethod": "get",
      "tag": "Showcases\\Custom showcase thumbnails",
      "typeScriptTag": "showcasesCustomShowcaseThumbnails",
      "description": "Get all the custom thumbnails of a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/custom_thumbnails",
      "method": "addCustomThumbnail",
      "httpMethod": "post",
      "tag": "Showcases\\Custom showcase thumbnails",
      "typeScriptTag": "showcasesCustomShowcaseThumbnails",
      "description": "Add a custom thumbnail to a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}",
      "method": "deleteCustomThumbnail",
      "httpMethod": "delete",
      "tag": "Showcases\\Custom showcase thumbnails",
      "typeScriptTag": "showcasesCustomShowcaseThumbnails",
      "description": "Delete a custom showcase thumbnail",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "thumbnailId",
          "schema": "number",
          "required": true,
          "description": "The ID of the custom thumbnail.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The custom thumbnail was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}",
      "method": "getSpecificThumbnail",
      "httpMethod": "get",
      "tag": "Showcases\\Custom showcase thumbnails",
      "typeScriptTag": "showcasesCustomShowcaseThumbnails",
      "description": "Get a specific custom showcase thumbnail",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "thumbnailId",
          "schema": "number",
          "required": true,
          "description": "The ID of the custom thumbnail.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}",
      "method": "replaceCustomThumbnail",
      "httpMethod": "patch",
      "tag": "Showcases\\Custom showcase thumbnails",
      "typeScriptTag": "showcasesCustomShowcaseThumbnails",
      "description": "Replace a custom showcase thumbnail",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "thumbnailId",
          "schema": "number",
          "required": true,
          "description": "The ID of the custom thumbnail.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/logos",
      "method": "listAllCustomLogos",
      "httpMethod": "get",
      "tag": "Showcases\\Custom showcase logos",
      "typeScriptTag": "showcasesCustomShowcaseLogos",
      "description": "Get all the custom logos of a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/logos",
      "method": "addCustomLogo",
      "httpMethod": "post",
      "tag": "Showcases\\Custom showcase logos",
      "typeScriptTag": "showcasesCustomShowcaseLogos",
      "description": "Add a custom logo to a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/logos/{logo_id}",
      "method": "deleteCustomLogo",
      "httpMethod": "delete",
      "tag": "Showcases\\Custom showcase logos",
      "typeScriptTag": "showcasesCustomShowcaseLogos",
      "description": "Delete a custom showcase logo",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "logoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the custom logo.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The custom logo was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/logos/{logo_id}",
      "method": "getSpecificLogo",
      "httpMethod": "get",
      "tag": "Showcases\\Custom showcase logos",
      "typeScriptTag": "showcasesCustomShowcaseLogos",
      "description": "Get a specific custom showcase logo",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "logoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the custom logo.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/logos/{logo_id}",
      "method": "replaceLogo",
      "httpMethod": "patch",
      "tag": "Showcases\\Custom showcase logos",
      "typeScriptTag": "showcasesCustomShowcaseLogos",
      "description": "Replace a custom showcase logo",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "logoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the custom logo.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/videos",
      "method": "getShowcaseVideos",
      "httpMethod": "get",
      "tag": "Showcases\\Showcase videos",
      "typeScriptTag": "showcasesShowcaseVideos",
      "description": "Get all the videos in a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "containingUri",
          "schema": "string",
          "required": false,
          "description": "The page containing the video URI.",
          "example": "/videos/258684937"
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Filter the results by the **embeddable** attribute.\n"
        },
        {
          "name": "filterEmbeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
          "example": true
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "The password of the showcase.",
          "example": "hunter1"
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by date.\n * `default` - Sort the results by the default method.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `manual` - Sort the results by their manual order.\n * `modified_time` - Sort the results by last modification.\n * `plays` - Sort the results by number of plays.\n"
        },
        {
          "name": "weakSearch",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video's name.",
          "example": false
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/videos",
      "method": "replaceShowcaseVideos",
      "httpMethod": "put",
      "tag": "Showcases\\Showcase videos",
      "typeScriptTag": "showcasesShowcaseVideos",
      "description": "Replace all the videos in a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videos",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "/videos/258684937,/videos/273576296"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "The videos were added."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/videos/{video_id}",
      "method": "removeVideoFromShowcase",
      "httpMethod": "delete",
      "tag": "Showcases\\Showcase videos",
      "typeScriptTag": "showcasesShowcaseVideos",
      "description": "Remove a video from a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 196367152
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was removed."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/videos/{video_id}",
      "method": "getSpecificVideoInShowcase",
      "httpMethod": "get",
      "tag": "Showcases\\Showcase videos",
      "typeScriptTag": "showcasesShowcaseVideos",
      "description": "Get a specific video in a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 3706071
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 196367152
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "The password of the showcase.",
          "example": "hunter1"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/videos/{video_id}",
      "method": "addToShowcase",
      "httpMethod": "put",
      "tag": "Showcases\\Showcase videos",
      "typeScriptTag": "showcasesShowcaseVideos",
      "description": "Add a specific video to a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 196367152
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was added."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/videos/{video_id}/set_album_thumbnail",
      "method": "createShowcaseThumbnail",
      "httpMethod": "post",
      "tag": "Showcases\\Showcase videos",
      "typeScriptTag": "showcasesShowcaseVideos",
      "description": "Create a thumbnail for a showcase from a showcase video",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 196367152
        },
        {
          "name": "time_code",
          "schema": "number",
          "description": "",
          "example": 300
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/videos/{video_id}/set_featured_video",
      "method": "setFeaturedVideo",
      "httpMethod": "patch",
      "tag": "Showcases\\Showcase videos",
      "typeScriptTag": "showcasesShowcaseVideos",
      "description": "Set the featured video of a showcase",
      "parameters": [
        {
          "name": "albumId",
          "schema": "number",
          "required": true,
          "description": "The ID of the showcase.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 196367152
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/analytics",
      "method": "getMetrics",
      "httpMethod": "get",
      "tag": "Users\\Analytics",
      "typeScriptTag": "usersAnalytics",
      "description": "Get analytics for the user",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 123456
        },
        {
          "name": "dimension",
          "schema": "string",
          "required": true,
          "description": "The data dimension by which to group the results.\n\nOption descriptions:\n * `country` - Group the results by country.\n * `device_type` - Group the results by device type.\n * `embed_domain` - Group the results by embed domain.\n * `total` - Group the results by the time range provided.\n * `video` - Group the results by video.\n",
          "example": "DIMENSION"
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filterContent",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of video, folder, or event URIs to filter.",
          "example": "/folder/1233456,/video/7890123,/folder/123"
        },
        {
          "name": "filterCountries",
          "schema": "array",
          "required": false,
          "description": "A comma-separated list of country codes in ISO-3166 format to filter on.",
          "example": "UK,US,IN"
        },
        {
          "name": "filterDeviceTypes",
          "schema": "array",
          "required": false,
          "description": "A comma-separated list of device types to filter on.",
          "example": "android,ios"
        },
        {
          "name": "filterEmbedDomains",
          "schema": "array",
          "required": false,
          "description": "A comma-separated list of domain names to filter on.",
          "example": "abc.com,xyz.com"
        },
        {
          "name": "filterStreamingTypes",
          "schema": "array",
          "required": false,
          "description": "A comma-separated list of streaming types to filter on.",
          "example": "live,video"
        },
        {
          "name": "from",
          "schema": "string",
          "required": true,
          "description": "The start date of the range of results in ISO 8601 format.",
          "example": "2021-05-30T00:00:00+00:00"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The maximum number of items returned from the request, up to a limit of 1000 items. The default value is `50`.",
          "example": 50
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `average_percent_watched` - Sort the results by mean seconds played.\n * `average_time_watched` - Sort the results by mean percentage played.\n * `comments` - Sort the results by the number of comments.\n * `country` - Sort the results by country.\n * `default` - Sort the results by the values of both the **dimension** and **time_interval** fields.\n * `device_type` - Sort the results by device type.\n * `downloads` - Sort the results by the number of downloads.\n * `embed_domain` - Sort the results by embed domain.\n * `finishes` - Sort the results by the number of complete plays.\n * `impressions` - Sort the results by the number of impressions.\n * `like` - Sort the results by the number of likes.\n * `time` - Sort the results by the value of the **start_date** field. This option is available only when the value of **time_interval** isn't `none`.\n * `total_time_watched` - Sort the results by total seconds played.\n * `unique_impressions` - Sort the results by unique impressions.\n * `unique_viewers` - Sort the results by unique viewers.\n * `video` - Sort the results by video ID.\n * `views` - Sort the results by the number of views.\n"
        },
        {
          "name": "timeInterval",
          "schema": "string",
          "required": false,
          "description": "The interval by which to aggregate the data according to the specified data dimension. The default value is `none`.\n\nOption descriptions:\n * `day` - Aggregate the results by day according to the specified data dimension.\n * `month` - Aggregate the results by month according to the specified data dimension.\n * `none` - The results are not aggregated by time interval.\n * `week` - Aggregate the results by week according to the specified data dimension.\n * `year` - Aggregate the results by year according to the specified data dimension.\n"
        },
        {
          "name": "to",
          "schema": "string",
          "required": true,
          "description": "The end date of the range of results in ISO 8601 format.",
          "example": "2021-06-30T23:59:59+00:00"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/appearances",
      "method": "appearances",
      "httpMethod": "get",
      "tag": "Videos\\Essentials",
      "typeScriptTag": "videosEssentials",
      "description": "Get all the videos in which the user appears",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n"
        },
        {
          "name": "filterEmbeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
          "example": true
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by date.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/categories",
      "method": "listFollowedCategories",
      "httpMethod": "get",
      "tag": "Categories\\Users",
      "typeScriptTag": "categoriesUsers",
      "description": "Get all the categories that the user follows",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `name` - Sort the results by name.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/categories/{category}",
      "method": "stopFollowingCategory",
      "httpMethod": "delete",
      "tag": "Categories\\Users",
      "typeScriptTag": "categoriesUsers",
      "description": "Cause the user to stop following a category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category.",
          "example": "animation"
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user has stopped following the category."
        }
      ]
    },
    {
      "url": "/users/{user_id}/categories/{category}",
      "method": "checkFollowedCategory",
      "httpMethod": "get",
      "tag": "Categories\\Users",
      "typeScriptTag": "categoriesUsers",
      "description": "Check if the user follows a category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category.",
          "example": "animation"
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user is following the category."
        }
      ]
    },
    {
      "url": "/users/{user_id}/categories/{category}",
      "method": "followSpecificCategory",
      "httpMethod": "put",
      "tag": "Categories\\Users",
      "typeScriptTag": "categoriesUsers",
      "description": "Cause the user to follow a specific category",
      "parameters": [
        {
          "name": "category",
          "schema": "number",
          "required": true,
          "description": "The name of the category.",
          "example": 0
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user is following the category."
        }
      ]
    },
    {
      "url": "/users/{user_id}/channels",
      "method": "getUserSubscriptions",
      "httpMethod": "get",
      "tag": "Channels\\Essentials",
      "typeScriptTag": "channelsEssentials",
      "description": "Get all the channels to which a user subscribes",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `moderated` - Return moderated channels.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n * `followers` - Sort the results by number of followers.\n * `videos` - Sort the results by number of videos.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "304",
          "description": "No channel has been followed since the given `If-Modified-Since` header."
        }
      ]
    },
    {
      "url": "/users/{user_id}/channels/{channel_id}",
      "method": "unsubscribeUserFromChannel",
      "httpMethod": "delete",
      "tag": "Channels\\Subscriptions and subscribers",
      "typeScriptTag": "channelsSubscriptionsAndSubscribers",
      "description": "Unsubscribe the user from a specific channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user is unsubscribed from the channel."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/channels/{channel_id}",
      "method": "checkUserFollowsChannel",
      "httpMethod": "get",
      "tag": "Channels\\Subscriptions and subscribers",
      "typeScriptTag": "channelsSubscriptionsAndSubscribers",
      "description": "Check if a user follows a channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user follows the channel."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/channels/{channel_id}",
      "method": "subscribeToChannel",
      "httpMethod": "put",
      "tag": "Channels\\Subscriptions and subscribers",
      "typeScriptTag": "channelsSubscriptionsAndSubscribers",
      "description": "Subscribe the user to a specific channel",
      "parameters": [
        {
          "name": "channelId",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel.",
          "example": 927
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user is subscribed to the channel."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/customlogos",
      "method": "listUserLogos",
      "httpMethod": "get",
      "tag": "Embed Presets\\Custom logos",
      "typeScriptTag": "embedPresetsCustomLogos",
      "description": "Get all the custom logos that belong to the user",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/customlogos",
      "method": "addUserLogo",
      "httpMethod": "post",
      "tag": "Embed Presets\\Custom logos",
      "typeScriptTag": "embedPresetsCustomLogos",
      "description": "Add a custom user logo",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/customlogos/{logo_id}",
      "method": "deleteUserLogo",
      "httpMethod": "delete",
      "tag": "Embed Presets\\Custom logos",
      "typeScriptTag": "embedPresetsCustomLogos",
      "description": "Delete a custom user logo",
      "parameters": [
        {
          "name": "logoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the custom logo.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The custom logo was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/customlogos/{logo_id}",
      "method": "getSpecificUserLogo",
      "httpMethod": "get",
      "tag": "Embed Presets\\Custom logos",
      "typeScriptTag": "embedPresetsCustomLogos",
      "description": "Get a specific custom user logo",
      "parameters": [
        {
          "name": "logoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the custom logo.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/destinations",
      "method": "listAvailableDestinations",
      "httpMethod": "get",
      "tag": "Live\\Event destinations",
      "typeScriptTag": "liveEventDestinations",
      "description": "Get all available live event destinations for the user to stream to",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The event destinations were returned."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/feed",
      "method": "feed",
      "httpMethod": "get",
      "tag": "Users\\Feeds",
      "typeScriptTag": "usersFeeds",
      "description": "Get all the videos in the user's feed",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "The pagination offset. We recommend that you use the pagination links in the feed response instead of working with this value directly. For more details, see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter).",
          "example": "280"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "The feed type.\n\nOption descriptions:\n * `appears` - Videos in which the user appears.\n * `category_featured` - Featured videos.\n * `channel` - Channel videos.\n * `facebook_feed` - Videos from the user's Facebook feed.\n * `following` - Videos from accounts that the user follows.\n * `group` - Group videos.\n * `likes` - Liked videos.\n * `ondemand_publish` - On Demand videos.\n * `share` - Shared videos.\n * `tagged_with` - Tagged videos.\n * `twitter_timeline` - Videos from the user's Twitter timeline.\n * `uploads` - Uploaded videos.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/followers",
      "method": "followers",
      "httpMethod": "get",
      "tag": "Users\\Followers",
      "typeScriptTag": "usersFollowers",
      "description": "Get all the followers of the user",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date followed.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/following",
      "method": "listOfFollowedUsers",
      "httpMethod": "get",
      "tag": "Users\\Followers",
      "typeScriptTag": "usersFollowers",
      "description": "Get all the users that the user is following",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `online` - Return users who are currently online.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date followed.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/following",
      "method": "users",
      "httpMethod": "post",
      "tag": "Users\\Followers",
      "typeScriptTag": "usersFollowers",
      "description": "Follow a list of users",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "users",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The users were followed."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/following/{follow_user_id}",
      "method": "user",
      "httpMethod": "delete",
      "tag": "Users\\Followers",
      "typeScriptTag": "usersFollowers",
      "description": "Unfollow a user",
      "parameters": [
        {
          "name": "followUserId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user to unfollow.",
          "example": 3766357
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user was unfollowed."
        }
      ]
    },
    {
      "url": "/users/{user_id}/following/{follow_user_id}",
      "method": "checkFollowingStatus",
      "httpMethod": "get",
      "tag": "Users\\Followers",
      "typeScriptTag": "usersFollowers",
      "description": "Check if the user is following another user",
      "parameters": [
        {
          "name": "followUserId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user to follow.",
          "example": 3766357
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The authenticated user follows the specified user."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/following/{follow_user_id}",
      "method": "user",
      "httpMethod": "put",
      "tag": "Users\\Followers",
      "typeScriptTag": "usersFollowers",
      "description": "Follow a specific user",
      "parameters": [
        {
          "name": "followUserId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user to follow.",
          "example": 3766357
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user was followed."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/groups",
      "method": "getUserGroupsList",
      "httpMethod": "get",
      "tag": "Groups\\Users",
      "typeScriptTag": "groupsUsers",
      "description": "Get all the groups that the user has joined",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `moderated` - Return moderated groups.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n * `members` - Sort the results by number of members.\n * `videos` - Sort the results by number of videos.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/groups/{group_id}",
      "method": "group",
      "httpMethod": "delete",
      "tag": "Groups\\Subscriptions",
      "typeScriptTag": "groupsSubscriptions",
      "description": "Remove the user from a group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "number",
          "required": true,
          "description": "The ID of the group.",
          "example": 1108
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user was removed from the group."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/groups/{group_id}",
      "method": "checkBelongGroup",
      "httpMethod": "get",
      "tag": "Groups\\Users",
      "typeScriptTag": "groupsUsers",
      "description": "Check if a user has joined a group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "number",
          "required": true,
          "description": "The ID of the group.",
          "example": 1108
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user belongs to the group."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/groups/{group_id}",
      "method": "group",
      "httpMethod": "put",
      "tag": "Groups\\Subscriptions",
      "typeScriptTag": "groupsSubscriptions",
      "description": "Add the user to a group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "number",
          "required": true,
          "description": "The ID of the group.",
          "example": 1108
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user joined the group."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/likes",
      "method": "likes",
      "httpMethod": "get",
      "tag": "Likes\\Essentials",
      "typeScriptTag": "likesEssentials",
      "description": "Get all the videos that a user has liked",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n"
        },
        {
          "name": "filterEmbeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
          "example": true
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by creation date.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/likes/{video_id}",
      "method": "video",
      "httpMethod": "delete",
      "tag": "Likes\\Essentials",
      "typeScriptTag": "likesEssentials",
      "description": "Cause a user to unlike a video",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was unliked."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/likes/{video_id}",
      "method": "checkVideoLikedByUser",
      "httpMethod": "get",
      "tag": "Likes\\Essentials",
      "typeScriptTag": "likesEssentials",
      "description": "Check if the user has liked a video",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user has liked the video."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/likes/{video_id}",
      "method": "video",
      "httpMethod": "put",
      "tag": "Likes\\Essentials",
      "typeScriptTag": "likesEssentials",
      "description": "Cause the user to like a video",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was liked."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events",
      "method": "deleteMultipleEvents",
      "httpMethod": "delete",
      "tag": "Live\\Essentials",
      "typeScriptTag": "liveEssentials",
      "description": "Delete a list of live events",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "hunter1"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK"
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events",
      "method": "getUserLiveEvents",
      "httpMethod": "get",
      "tag": "Live\\Essentials",
      "typeScriptTag": "liveEssentials",
      "description": "Get all the live events that belong to the user",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `not_in_folder` - Show only events that aren't in a folder.\n * `not_in_showcase` - Show only events that aren't in a showcase.\n * `not_in_webinar` - Show only events that aren't in a webinar.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n"
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "The type of event to return.\n\nOption descriptions:\n * `all` - Return all events.\n * `one_time` - Return one-time events only.\n * `recurring` - Return recurring events only.\n",
          "example": "recurring"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events",
      "method": "createEventForUser",
      "httpMethod": "post",
      "tag": "Live\\Essentials",
      "typeScriptTag": "liveEssentials",
      "description": "Create a live event",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "title",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Live Content"
        },
        {
          "name": "allow_share_link",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "auto_cc_enabled",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "auto_cc_keywords",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "commonly-used words,phrases,technical terms"
        },
        {
          "name": "auto_cc_lang",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "en-US"
        },
        {
          "name": "automatically_title_stream",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "chat_enabled",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "content_rating",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "dvr",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "embed",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "folder_uri",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "/users/67890/folder/12345"
        },
        {
          "name": "interaction_tools_settings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "low_latency",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "playlist_sort",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "added_first"
        },
        {
          "name": "rtmp_preview",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "schedule",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "scheduled_playback",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "stream_description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "In this episode, we interview a surprise guest"
        },
        {
          "name": "stream_embed",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "stream_password",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "hunter1"
        },
        {
          "name": "stream_privacy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "stream_title",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "Special Feature"
        },
        {
          "name": "time_zone",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "America/New_York"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}",
      "method": "deleteSpecificEvent",
      "httpMethod": "delete",
      "tag": "Live\\Essentials",
      "typeScriptTag": "liveEssentials",
      "description": "Delete a specific live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 0
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The event was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}",
      "method": "getEventById",
      "httpMethod": "get",
      "tag": "Live\\Essentials",
      "typeScriptTag": "liveEssentials",
      "description": "Get a specific live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "The password of the event when the privacy is set to `password`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}",
      "method": "updateEventBelongingToAuthenticatedUser",
      "httpMethod": "patch",
      "tag": "Live\\Essentials",
      "typeScriptTag": "liveEssentials",
      "description": "Update a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "title",
          "schema": "string",
          "description": "",
          "example": "Live Content"
        },
        {
          "name": "auto_cc_enabled",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "auto_cc_keywords",
          "schema": "string",
          "description": ""
        },
        {
          "name": "auto_cc_language",
          "schema": "string",
          "description": "",
          "example": "en-US"
        },
        {
          "name": "automatically_title_stream",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "chat_enabled",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "content_rating",
          "schema": "array",
          "description": ""
        },
        {
          "name": "dvr",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "embed",
          "schema": "object",
          "description": ""
        },
        {
          "name": "interaction_tools_settings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "playlist_sort",
          "schema": "string",
          "description": "",
          "example": "added_first"
        },
        {
          "name": "schedule",
          "schema": "object",
          "description": ""
        },
        {
          "name": "scheduled_playback",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "stream_description",
          "schema": "string",
          "description": "",
          "example": "In this episode, we interview a surprise guest"
        },
        {
          "name": "stream_embed",
          "schema": "object",
          "description": ""
        },
        {
          "name": "stream_mode",
          "schema": "string",
          "description": "",
          "example": "live"
        },
        {
          "name": "stream_password",
          "schema": "string",
          "description": "",
          "example": "hunter1"
        },
        {
          "name": "stream_privacy",
          "schema": "object",
          "description": ""
        },
        {
          "name": "stream_title",
          "schema": "string",
          "description": "",
          "example": "Special Feature"
        },
        {
          "name": "time_zone",
          "schema": "string",
          "description": "",
          "example": "America/New_York"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/activate",
      "method": "createRtmpLinks",
      "httpMethod": "post",
      "tag": "Live\\Event activation",
      "typeScriptTag": "liveEventActivation",
      "description": "Activate a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "cloud_composing_streaming",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "streaming_start_requested",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "503",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/auto_cc",
      "method": "editPreferenceForEvent",
      "httpMethod": "patch",
      "tag": "Live\\Event automated closed captions",
      "typeScriptTag": "liveEventAutomatedClosedCaptions",
      "description": "Edit the automated closed captions preference of a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "auto_cc_enabled",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": true
        },
        {
          "name": "auto_cc_keywords",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "commonly-used words,phrases,technical terms"
        },
        {
          "name": "auto_cc_lang",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "en-US"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/destinations",
      "method": "getAllAvailableDestinations",
      "httpMethod": "get",
      "tag": "Live\\Event destinations",
      "typeScriptTag": "liveEventDestinations",
      "description": "Get all the destinations of a recurring live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/destinations",
      "method": "createEventDestination",
      "httpMethod": "post",
      "tag": "Live\\Event destinations",
      "typeScriptTag": "liveEventDestinations",
      "description": "Create a live event destination",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "display_name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "My channel"
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "privacy",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "public"
        },
        {
          "name": "provider_destination_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "bda55c6b3ba4"
        },
        {
          "name": "provider_video_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "6817807391346708000"
        },
        {
          "name": "scheduled_at",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 1625754461
        },
        {
          "name": "service_name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "youtube"
        },
        {
          "name": "stream_key",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "da056692-ba63-4749-a6eb-a476a22b3acd"
        },
        {
          "name": "stream_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "rtmp://mycooldomain.com/live"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "channel"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/end",
      "method": "eventTerminationAlt2",
      "httpMethod": "post",
      "tag": "Live\\Event end",
      "typeScriptTag": "liveEventEnd",
      "description": "End a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "clipId",
          "schema": "number",
          "required": false,
          "description": "The ID of the streamable video.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/low_latency",
      "method": "toggleOption",
      "httpMethod": "patch",
      "tag": "Live\\Event low latency",
      "typeScriptTag": "liveEventLowLatency",
      "description": "Toggle the low-latency option of a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "low_latency",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/m3u8_playback",
      "method": "getUrlForEventStream",
      "httpMethod": "get",
      "tag": "Live\\Event M3U8 playback",
      "typeScriptTag": "liveEventM3U8Playback",
      "description": "Get an M3U8 playback URL for a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "maxFpsFhd",
          "schema": "number",
          "required": false,
          "description": "The requested maximum frames per second.",
          "example": 30
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The M3U8 playback URL was returned."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "503",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/ott_destination/{destination_id}",
      "method": "deleteOttDestination",
      "httpMethod": "delete",
      "tag": "Live\\Event destinations",
      "typeScriptTag": "liveEventDestinations",
      "description": "Delete a live event OTT destination",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The OTT destination was deleted."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/ott_destinations",
      "method": "getAllOttDestinations",
      "httpMethod": "get",
      "tag": "Live\\Event destinations",
      "typeScriptTag": "liveEventDestinations",
      "description": "Get all the OTT destinations of a recurring live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/ott_destinations",
      "method": "createOttDestination",
      "httpMethod": "post",
      "tag": "Live\\Event destinations",
      "typeScriptTag": "liveEventDestinations",
      "description": "Create a live event OTT destination",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/pictures",
      "method": "getAllThumbs",
      "httpMethod": "get",
      "tag": "Live\\Event thumbnails",
      "typeScriptTag": "liveEventThumbnails",
      "description": "Get all the thumbnails of a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/pictures",
      "method": "createThumbnailForEvent",
      "httpMethod": "post",
      "tag": "Live\\Event thumbnails",
      "typeScriptTag": "liveEventThumbnails",
      "description": "Create a live event thumbnail",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/pictures/{thumbnail_id}",
      "method": "deleteThumbnailForEvent",
      "httpMethod": "delete",
      "tag": "Live\\Event thumbnails",
      "typeScriptTag": "liveEventThumbnails",
      "description": "Delete a live event thumbnail",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "thumbnailId",
          "schema": "number",
          "required": true,
          "description": "The ID of the thumbnail.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The thumbnail was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/pictures/{thumbnail_id}",
      "method": "getSpecificThumbnail",
      "httpMethod": "get",
      "tag": "Live\\Event thumbnails",
      "typeScriptTag": "liveEventThumbnails",
      "description": "Get a specific live event thumbnail",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "thumbnailId",
          "schema": "number",
          "required": true,
          "description": "The ID of the thumbnail.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/pictures/{thumbnail_id}",
      "method": "editEventThumbnail",
      "httpMethod": "patch",
      "tag": "Live\\Event thumbnails",
      "typeScriptTag": "liveEventThumbnails",
      "description": "Edit a live event thumbnail",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "thumbnailId",
          "schema": "number",
          "required": true,
          "description": "The ID of the thumbnail.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/privacy/domains",
      "method": "getWhitelistDomains",
      "httpMethod": "get",
      "tag": "Live\\Embed privacy",
      "typeScriptTag": "liveEmbedPrivacy",
      "description": "Get all the domains on which a live event can be embedded",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/privacy/domains",
      "method": "embedEventOnDomains",
      "httpMethod": "put",
      "tag": "Live\\Embed privacy",
      "typeScriptTag": "liveEmbedPrivacy",
      "description": "Embed a live event on one or more domains",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "allowed_domains",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The domains were added to the whitelist."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/videos",
      "method": "removeMultiple",
      "httpMethod": "delete",
      "tag": "Live\\Event videos",
      "typeScriptTag": "liveEventVideos",
      "description": "Remove a list of videos from a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videos",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The videos were removed."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/videos",
      "method": "listAllVideosInEvent",
      "httpMethod": "get",
      "tag": "Live\\Event videos",
      "typeScriptTag": "liveEventVideos",
      "description": "Get all the videos in a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "containingUri",
          "schema": "string",
          "required": false,
          "description": "The page that contains the video URI.",
          "example": "/videos/258684937"
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable events.\n"
        },
        {
          "name": "filterEmbeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
          "example": true
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `added` - Sort the results by most recently added videos.\n * `alphabetical` - Sort the results alphabetically.\n * `arranged` - Sort the results in the order that the user has arranged the videos.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by creation date.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/videos",
      "method": "addMultipleVideos",
      "httpMethod": "post",
      "tag": "Live\\Event videos",
      "typeScriptTag": "liveEventVideos",
      "description": "Add a list of videos to a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videos",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The videos were added."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/live_events/{live_event_id}/videos/{video_id}",
      "method": "getSpecificVideo",
      "httpMethod": "get",
      "tag": "Live\\Event videos",
      "typeScriptTag": "liveEventVideos",
      "description": "Get a specific video in a live event",
      "parameters": [
        {
          "name": "liveEventId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/ondemand/pages",
      "method": "getAllUserPages",
      "httpMethod": "get",
      "tag": "On Demand\\Essentials",
      "typeScriptTag": "onDemandEssentials",
      "description": "Get all the On Demand pages of the user",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The type of the page to return.\n\nOption descriptions:\n * `film` - The page type is a film.\n * `series` - The page type is a series.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `added` - Sort the results by most recently added page.\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `modified_time` - Sort the results by time of page modification.\n * `name` - Sort the results by page name.\n * `publish.time` - Sort the results by time of page publishing.\n * `rating` - Sort the results by content rating.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/ondemand/pages",
      "method": "vod",
      "httpMethod": "post",
      "tag": "On Demand\\Essentials",
      "typeScriptTag": "onDemandEssentials",
      "description": "Create an On Demand page",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "DARBY FOREVER follows the fantasies of Darby, a shopgirl at \"Bobbins & Notions\"."
        },
        {
          "name": "accepted_currencies",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "buy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "content_rating",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "CONTENT_RATING"
        },
        {
          "name": "domain_link",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "https://example.com"
        },
        {
          "name": "episodes",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "link",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "darbyforever"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Darby Forever"
        },
        {
          "name": "rent",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "subscription",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "TYPE"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/ondemand/purchases",
      "method": "listUserPurchasesAndRentals",
      "httpMethod": "get",
      "tag": "On Demand\\Purchases and rentals",
      "typeScriptTag": "onDemandPurchasesAndRentals",
      "description": "Get all of the user's On Demand purchases and rentals",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The type of the On Demand video to filter on.\n\nOption descriptions:\n * `all` - Filter by all video types.\n * `expiring_soon` - Filter by videos that expire soon.\n * `film` - Filter by film.\n * `important` - Filter by pages that are about to expire.\n * `purchased` - Filter by purchased videos.\n * `rented` - Filter by rented videos.\n * `series` - Filter by series.\n * `subscription` - Filter by video subscription.\n * `unwatched` - Filter by unwatched videos.\n * `watched` - Filter by watched videos.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `added` - Sort the results by most recently added video.\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `name` - Sort the results by video name.\n * `purchase_time` - Sort the results by time of video purchase.\n * `rating` - Sort the results by content rating.\n * `release_date` - Sort the results by video release date.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/pictures",
      "method": "pictures",
      "httpMethod": "get",
      "tag": "Users\\Pictures",
      "typeScriptTag": "usersPictures",
      "description": "Get all the pictures that belong to the user",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/pictures",
      "method": "picture",
      "httpMethod": "post",
      "tag": "Users\\Pictures",
      "typeScriptTag": "usersPictures",
      "description": "Add a picture to the user's account",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/pictures/{portraitset_id}",
      "method": "picture",
      "httpMethod": "delete",
      "tag": "Users\\Pictures",
      "typeScriptTag": "usersPictures",
      "description": "Delete a picture from the user's account",
      "parameters": [
        {
          "name": "portraitsetId",
          "schema": "number",
          "required": true,
          "description": "The ID of the picture.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The portrait image was removed."
        }
      ]
    },
    {
      "url": "/users/{user_id}/pictures/{portraitset_id}",
      "method": "picture",
      "httpMethod": "get",
      "tag": "Users\\Pictures",
      "typeScriptTag": "usersPictures",
      "description": "Get a specific picture that belongs to the user",
      "parameters": [
        {
          "name": "portraitsetId",
          "schema": "number",
          "required": true,
          "description": "The ID of the picture.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/pictures/{portraitset_id}",
      "method": "picture",
      "httpMethod": "patch",
      "tag": "Users\\Pictures",
      "typeScriptTag": "usersPictures",
      "description": "Edit a picture in the user's account",
      "parameters": [
        {
          "name": "portraitsetId",
          "schema": "number",
          "required": true,
          "description": "The ID of the picture.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/portfolios",
      "method": "portfolios",
      "httpMethod": "get",
      "tag": "Portfolios\\Essentials",
      "typeScriptTag": "portfoliosEssentials",
      "description": "Get all the portfolios that belong to the user",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/portfolios/{portfolio_id}",
      "method": "portfolio",
      "httpMethod": "get",
      "tag": "Portfolios\\Essentials",
      "typeScriptTag": "portfoliosEssentials",
      "description": "Get a specific portfolio",
      "parameters": [
        {
          "name": "portfolioId",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/portfolios/{portfolio_id}/videos",
      "method": "getAllPortfolioVideos",
      "httpMethod": "get",
      "tag": "Portfolios\\Videos",
      "typeScriptTag": "portfoliosVideos",
      "description": "Get all the videos in a portfolio",
      "parameters": [
        {
          "name": "portfolioId",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "containingUri",
          "schema": "string",
          "required": false,
          "description": "The page that contains the video URI.",
          "example": "/videos/258684937"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n"
        },
        {
          "name": "filterEmbeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
          "example": true
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by creation date.\n * `default` - Use the default sorting method.\n * `likes` - Sort the results by number of likes.\n * `manual` - Sort the results by their user-specified order.\n * `plays` - Sort the results by number of plays.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}",
      "method": "removeFromPortfolioVideo",
      "httpMethod": "delete",
      "tag": "Portfolios\\Videos",
      "typeScriptTag": "portfoliosVideos",
      "description": "Remove a video from a portfolio",
      "parameters": [
        {
          "name": "portfolioId",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was removed."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}",
      "method": "getSpecificVideo",
      "httpMethod": "get",
      "tag": "Portfolios\\Videos",
      "typeScriptTag": "portfoliosVideos",
      "description": "Get a specific video in a portfolio",
      "parameters": [
        {
          "name": "portfolioId",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}",
      "method": "addVideoToPortfolio",
      "httpMethod": "put",
      "tag": "Portfolios\\Videos",
      "typeScriptTag": "portfoliosVideos",
      "description": "Add a video to a portfolio",
      "parameters": [
        {
          "name": "portfolioId",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was added."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/presets",
      "method": "getUserEmbedPresets",
      "httpMethod": "get",
      "tag": "Embed Presets\\Essentials",
      "typeScriptTag": "embedPresetsEssentials",
      "description": "Get all the embed presets that a user has created",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/presets",
      "method": "createEmbedPreset",
      "httpMethod": "post",
      "tag": "Embed Presets\\Essentials",
      "typeScriptTag": "embedPresetsEssentials",
      "description": "Create an embed preset",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "embed",
          "schema": "object",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "New preset"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/presets/{preset_id}",
      "method": "getSpecificEmbedPreset",
      "httpMethod": "get",
      "tag": "Embed Presets\\Essentials",
      "typeScriptTag": "embedPresetsEssentials",
      "description": "Get a specific embed preset",
      "parameters": [
        {
          "name": "presetId",
          "schema": "number",
          "required": true,
          "description": "The ID of the preset.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/presets/{preset_id}",
      "method": "editPreset",
      "httpMethod": "patch",
      "tag": "Embed Presets\\Essentials",
      "typeScriptTag": "embedPresetsEssentials",
      "description": "Edit an embed preset",
      "parameters": [
        {
          "name": "presetId",
          "schema": "number",
          "required": true,
          "description": "The ID of the preset.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "outro",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/presets/{preset_id}/videos",
      "method": "getPresetVideos",
      "httpMethod": "get",
      "tag": "Embed Presets\\Videos",
      "typeScriptTag": "embedPresetsVideos",
      "description": "Get all the videos that have a specific embed preset",
      "parameters": [
        {
          "name": "presetId",
          "schema": "number",
          "required": true,
          "description": "The ID of the embed preset.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects",
      "method": "projects",
      "httpMethod": "get",
      "tag": "Folders\\Essentials",
      "typeScriptTag": "foldersEssentials",
      "description": "Get all the folders that belong to the user",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `date` - Sort the results by date.\n * `default` - Use the default sort order.\n * `modified_time` - Sort the results by last modification.\n * `name` - Sort the results by name.\n * `pinned_on` - Sort the results by pinned timestamp.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects",
      "method": "project",
      "httpMethod": "post",
      "tag": "Folders\\Essentials",
      "typeScriptTag": "foldersEssentials",
      "description": "Create a folder",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Rough cuts"
        },
        {
          "name": "parent_folder_uri",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "/users/12345/projects/6789"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects/{project_id}",
      "method": "project",
      "httpMethod": "delete",
      "tag": "Folders\\Essentials",
      "typeScriptTag": "foldersEssentials",
      "description": "Delete a folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "shouldDeleteClips",
          "schema": "boolean",
          "required": false,
          "description": "Whether to delete all the videos in the folder along with the folder itself.",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The folder was deleted."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects/{project_id}",
      "method": "project",
      "httpMethod": "get",
      "tag": "Folders\\Essentials",
      "typeScriptTag": "foldersEssentials",
      "description": "Get a specific folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects/{project_id}",
      "method": "project",
      "httpMethod": "patch",
      "tag": "Folders\\Essentials",
      "typeScriptTag": "foldersEssentials",
      "description": "Edit a folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Rough cuts"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects/{project_id}/items",
      "method": "getFolderContents",
      "httpMethod": "get",
      "tag": "Folders\\Items",
      "typeScriptTag": "foldersItems",
      "description": "Get all the items in a folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `folder` - Filter the results by folder.\n * `live_event` - Filter the results by event.\n * `video` - Filter the results by video.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `default` - Use the default sort order.\n * `duration` - Sort the results by duration. Items without a duration, namely events and folders, are grouped by type in ascending alphabetical order, with events first.\n * `last_user_action_event_date` - Sort the results by the date of the last user action.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK"
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects/{project_id}/videos",
      "method": "removeMultipleVideosFromFolder",
      "httpMethod": "delete",
      "tag": "Folders\\Videos",
      "typeScriptTag": "foldersVideos",
      "description": "Remove a list of videos from a folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "shouldDeleteClips",
          "schema": "boolean",
          "required": false,
          "description": "Whether to delete the videos when removing them from the folder.",
          "example": false
        },
        {
          "name": "uris",
          "schema": "string",
          "required": true,
          "description": "A comma-separated list of the video URIs to remove.",
          "example": "/videos/258684937,/videos/273576296"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The videos were removed."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects/{project_id}/videos",
      "method": "getAllFolderVideos",
      "httpMethod": "get",
      "tag": "Folders\\Videos",
      "typeScriptTag": "foldersVideos",
      "description": "Get all the videos in a folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filterTag",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of tags to filter on. All results must include at least one of these tags. The use of this parameter triggers a search.",
          "example": "abc,xyz"
        },
        {
          "name": "filterTagAllOf",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of tags to filter on. All results must include all of these tags. The use of this parameter triggers a search.",
          "example": "abc,xyz"
        },
        {
          "name": "filterTagExclude",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of tags to exclude. The use of this parameter triggers a search.",
          "example": "abc,xyz"
        },
        {
          "name": "includeSubfolders",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include subfolders.",
          "example": false
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "queryFields",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of fields to query over. The default value is `title,description,chapters,tags`.",
          "example": "title,description"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `default` - Use the default sort order.\n * `duration` - Sort the results by duration.\n * `last_user_action_event_date` - Sort the results by the date of the last user action.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects/{project_id}/videos",
      "method": "addToFolderVideos",
      "httpMethod": "put",
      "tag": "Folders\\Videos",
      "typeScriptTag": "foldersVideos",
      "description": "Add a list of videos to a folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "uris",
          "schema": "string",
          "required": true,
          "description": "A comma-separated list of video URIs to add.",
          "example": "/videos/258684937,/videos/273576296"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The videos were added."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects/{project_id}/videos/{video_id}",
      "method": "removeFromFolderVideo",
      "httpMethod": "delete",
      "tag": "Folders\\Videos",
      "typeScriptTag": "foldersVideos",
      "description": "Remove a video from a folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was removed."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects/{project_id}/videos/{video_id}",
      "method": "addSingleFolderVideo",
      "httpMethod": "put",
      "tag": "Folders\\Videos",
      "typeScriptTag": "foldersVideos",
      "description": "Add a video to a folder",
      "parameters": [
        {
          "name": "projectId",
          "schema": "number",
          "required": true,
          "description": "The ID of the folder.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was added."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/team/role",
      "method": "getUserTeamRole",
      "httpMethod": "get",
      "tag": "Teams\\Members",
      "typeScriptTag": "teamsMembers",
      "description": "Get information about the user's role on a team",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the team owner.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK"
        }
      ]
    },
    {
      "url": "/users/{user_id}/team_users/{team_user_id}",
      "method": "getTeamMembershipInformation",
      "httpMethod": "get",
      "tag": "Teams\\Members",
      "typeScriptTag": "teamsMembers",
      "description": "Get membership information about a team",
      "parameters": [
        {
          "name": "teamUserId",
          "schema": "number",
          "required": true,
          "description": "The ID of the team user.",
          "example": 0
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the team owner.",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK"
        }
      ]
    },
    {
      "url": "/users/{user_id}/uploads/{upload_id}",
      "method": "completeStreamingUpload",
      "httpMethod": "delete",
      "tag": "Videos\\Uploads",
      "typeScriptTag": "videosUploads",
      "description": "Complete a streaming upload",
      "parameters": [
        {
          "name": "uploadId",
          "schema": "number",
          "required": true,
          "description": "The ID of the streaming upload.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "signature",
          "schema": "string",
          "required": true,
          "description": "The crypto signature of the completed upload.",
          "example": "cd89a20adde7a608f3331e71c37bdfa087bacbf3"
        },
        {
          "name": "videoFileId",
          "schema": "number",
          "required": true,
          "description": "The ID of the uploaded file.",
          "example": 1234
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "The streaming upload has been completed."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/uploads/{upload_id}",
      "method": "getUploadAttempt",
      "httpMethod": "get",
      "tag": "Videos\\Uploads",
      "typeScriptTag": "videosUploads",
      "description": "Get an upload attempt",
      "parameters": [
        {
          "name": "uploadId",
          "schema": "number",
          "required": true,
          "description": "The ID of the upload attempt.",
          "example": 12345
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/videos",
      "method": "videos",
      "httpMethod": "delete",
      "tag": "Videos\\Essentials",
      "typeScriptTag": "videosEssentials",
      "description": "Delete a user's videos",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "uris",
          "schema": "string",
          "required": true,
          "description": "A comma-separated list of the video URIs to delete.",
          "example": "/videos/258684937,/videos/258684546"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The videos were deleted."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/videos",
      "method": "videos",
      "httpMethod": "get",
      "tag": "Videos\\Essentials",
      "typeScriptTag": "videosEssentials",
      "description": "Get all the videos that the user has uploaded",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "containingUri",
          "schema": "string",
          "required": false,
          "description": "The page that contains the video URI. The field is available only when not paired with **query**.",
          "example": "/videos/258684937"
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `app_only` - Return app-only videos.\n * `embeddable` - Return embeddable videos.\n * `featured` - Return featured videos.\n * `live` - Return only live videos.\n * `no_placeholder` - Return no placeholder videos.\n * `nolive` - Return no live videos.\n * `playable` - Return playable videos.\n * `screen_recorded` - Return screen-recorded videos.\n"
        },
        {
          "name": "filterEmbeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
          "example": true
        },
        {
          "name": "filterPlayable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by playable videos (`true`) or non-playable videos (`false`).",
          "example": true
        },
        {
          "name": "filterScreenRecorded",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by screen-recorded videos (`true`) or non-screen-recorded videos (`false`).",
          "example": true
        },
        {
          "name": "filterTag",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of tags to filter on. All results must include at least one of these tags.",
          "example": "abc,xyz"
        },
        {
          "name": "filterTagAllOf",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of tags to filter on. All results must include all of these tags.",
          "example": "abc,xyz"
        },
        {
          "name": "filterTagExclude",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of tags to exclude. All results must exclude all of these tags.",
          "example": "abc,xyz"
        },
        {
          "name": "includeTeamContent",
          "schema": "string",
          "required": false,
          "description": "Whether to include content from the user's teams when searching. _This field is deprecated._",
          "example": "true"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "queryFields",
          "schema": "array",
          "required": false,
          "description": "A comma-separated list of fields to query over. The default value is `title,description,chapters,tags`.\n\nOption descriptions:\n * `chapters` - Query by chapter titles that have been added to the video.\n * `description` - Query by the description of the video.\n * `tags` - Query by tag names that have been added to the video.\n * `title` - Query by the title of the video.\n",
          "example": "title,description"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically by title.\n * `date` - Sort the results by date.\n * `default` - Use the default sorting method.\n * `duration` - Sort the results by duration.\n * `last_user_action_event_date` - Sort the results by last user interaction. If a result hasn't had an interaction, the upload date is used instead.\n * `likes` - Sort the results by number of likes. To use this option, **direction** must be `desc`.\n * `modified_time` - Sort the results by last modification.\n * `plays` - Sort the results by number of plays. To use this option, **direction** must be `desc`.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "304",
          "description": "The authenticated user hasn't uploaded any videos since the given **If-Modified-Since** header."
        }
      ]
    },
    {
      "url": "/users/{user_id}/videos",
      "method": "video",
      "httpMethod": "post",
      "tag": "Videos\\Uploads",
      "typeScriptTag": "videosUploads",
      "description": "Upload a video",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "A celebration of 10 years of Staff Picks."
        },
        {
          "name": "content_rating",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "embed",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "embed_domains",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "folder_uri",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "/users/12345/folders/6789"
        },
        {
          "name": "hide_from_vimeo",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "license",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "locale",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "en_US"
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "Celebrating 10 Years of Staff Picks"
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "hunter1"
        },
        {
          "name": "privacy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "review_page",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "spatial",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "upload",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/videos/{video_id}",
      "method": "checkUserOwnership",
      "httpMethod": "get",
      "tag": "Videos\\Essentials",
      "typeScriptTag": "videosEssentials",
      "description": "Check if the user owns a video",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/videos/{video_id}/destinations",
      "method": "getAllAvailableDestinations",
      "httpMethod": "get",
      "tag": "Live\\Event destinations",
      "typeScriptTag": "liveEventDestinations",
      "description": "Get all the destinations of a one-time live event",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/videos/{video_id}/destinations",
      "method": "createOneTimeLiveEventDestination",
      "httpMethod": "post",
      "tag": "Live\\Event destinations",
      "typeScriptTag": "liveEventDestinations",
      "description": "Create a one-time live event destination",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 12345
        },
        {
          "name": "display_name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "My channel"
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "privacy",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "public"
        },
        {
          "name": "provider_destination_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "bda55c6b3ba4"
        },
        {
          "name": "provider_video_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "6817807391346708000"
        },
        {
          "name": "scheduled_at",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 1625754461
        },
        {
          "name": "service_name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "youtube"
        },
        {
          "name": "stream_key",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "da056692-ba63-4749-a6eb-a476a22b3acd"
        },
        {
          "name": "stream_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "rtmp://mycooldomain.com/live"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "channel"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/videos/{video_id}/m3u8_playback",
      "method": "getPlaybackUrlForEventStream",
      "httpMethod": "get",
      "tag": "Videos\\Live M3U8 playback",
      "typeScriptTag": "videosLiveM3U8Playback",
      "description": "Get an M3U8 playback URL for a one-time live event",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 12345
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The M3U8 playback URL was returned."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/watchlater",
      "method": "listUserQueueVideos",
      "httpMethod": "get",
      "tag": "Watch Later Queue\\Essentials",
      "typeScriptTag": "watchLaterQueueEssentials",
      "description": "Get all the videos in the user's Watch Later queue",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n"
        },
        {
          "name": "filterEmbeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
          "example": true
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by date added.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "304",
          "description": "The user hasn't added any videos to their Watch Later queue since the given `If-Modified-Since` header."
        }
      ]
    },
    {
      "url": "/users/{user_id}/watchlater/{video_id}",
      "method": "removeVideoFromQueue",
      "httpMethod": "delete",
      "tag": "Watch Later Queue\\Essentials",
      "typeScriptTag": "watchLaterQueueEssentials",
      "description": "Remove a video from the user's Watch Later queue",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was removed."
        }
      ]
    },
    {
      "url": "/users/{user_id}/watchlater/{video_id}",
      "method": "checkVideoInQueue",
      "httpMethod": "get",
      "tag": "Watch Later Queue\\Essentials",
      "typeScriptTag": "watchLaterQueueEssentials",
      "description": "Check if the user has added a video to their Watch Later queue",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/watchlater/{video_id}",
      "method": "addVideoToQueue",
      "httpMethod": "put",
      "tag": "Watch Later Queue\\Essentials",
      "typeScriptTag": "watchLaterQueueEssentials",
      "description": "Add a video to the user's Watch Later queue",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was added."
        }
      ]
    },
    {
      "url": "/users/{user_id}/webinars",
      "method": "webinar",
      "httpMethod": "post",
      "tag": "Webinar\\Essentials",
      "typeScriptTag": "webinarEssentials",
      "description": "Create a webinar",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "title",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Interviews Daily"
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "In this episode, we interview a surprise guest"
        },
        {
          "name": "email_settings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "folder_uri",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "gogo"
        },
        {
          "name": "privacy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "schedule",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "time_zone",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "America/New_York"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/webinars/{webinar_id}",
      "method": "webinar",
      "httpMethod": "get",
      "tag": "Webinar\\Essentials",
      "typeScriptTag": "webinarEssentials",
      "description": "Get a specific webinar",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "webinarId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/webinars/{webinar_id}",
      "method": "webinar",
      "httpMethod": "patch",
      "tag": "Webinar\\Essentials",
      "typeScriptTag": "webinarEssentials",
      "description": "Update a webinar",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "webinarId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        },
        {
          "name": "title",
          "schema": "string",
          "description": "",
          "example": "Interviews Daily"
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "In this episode, we interview a surprise guest"
        },
        {
          "name": "email_settings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "description": "",
          "example": "gogo"
        },
        {
          "name": "privacy",
          "schema": "object",
          "description": ""
        },
        {
          "name": "schedule",
          "schema": "object",
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "description": "",
          "example": "started"
        },
        {
          "name": "time_zone",
          "schema": "string",
          "description": "",
          "example": "America/New_York"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/webinars/{webinar_id}/email_settings",
      "method": "getCustomizationData",
      "httpMethod": "get",
      "tag": "Webinar\\Emails",
      "typeScriptTag": "webinarEmails",
      "description": "Get customization email data for a webinar",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "webinarId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/webinars/{webinar_id}/email_settings",
      "method": "customizePreferences",
      "httpMethod": "patch",
      "tag": "Webinar\\Emails",
      "typeScriptTag": "webinarEmails",
      "description": "Customize the email preferences of a webinar",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "webinarId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        },
        {
          "name": "accent_color",
          "schema": "string",
          "description": "",
          "example": "#000fff"
        },
        {
          "name": "custom_link",
          "schema": "string",
          "description": "",
          "example": "https://xyz.com"
        },
        {
          "name": "email_event_reminder_24_hrs",
          "schema": "object",
          "description": ""
        },
        {
          "name": "email_post_event_thank_you",
          "schema": "object",
          "description": ""
        },
        {
          "name": "email_preferences",
          "schema": "object",
          "description": ""
        },
        {
          "name": "email_registration_confirmation",
          "schema": "object",
          "description": ""
        },
        {
          "name": "from",
          "schema": "string",
          "description": "",
          "example": "Vimeo"
        },
        {
          "name": "logo_uri",
          "schema": "string",
          "description": "",
          "example": "/users/123/team_logos_2343"
        },
        {
          "name": "reply_email",
          "schema": "string",
          "description": "",
          "example": "test@vimeo.com"
        },
        {
          "name": "sender_address",
          "schema": "string",
          "description": "",
          "example": "Bangalore, India"
        },
        {
          "name": "sender_policy_url",
          "schema": "string",
          "description": "",
          "example": "vimeo.com/policy"
        },
        {
          "name": "use_custom_link",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "use_reply_email",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "use_sender_address",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "use_sender_policy_url",
          "schema": "boolean",
          "description": "",
          "example": false
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/webinars/{webinar_id}/registrants",
      "method": "getUserRegistrationsByWebinarId",
      "httpMethod": "get",
      "tag": "Webinar\\Registrations",
      "typeScriptTag": "webinarRegistrations",
      "description": "Get user registration data associated with a webinar",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "webinarId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `registration_date` - Sort the results by registration date.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/webinars/{webinar_id}/registrants",
      "method": "captureUserRegistrationList",
      "httpMethod": "put",
      "tag": "Webinar\\Registrations",
      "typeScriptTag": "webinarRegistrations",
      "description": "Capture the user registration list associated with a webinar",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "webinarId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        },
        {
          "name": "registrants",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The webinar data was captured."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/webinars/{webinar_id}/registrants/{registrant_id}",
      "method": "deleteRegistrantRecord",
      "httpMethod": "delete",
      "tag": "Webinar\\Registrations",
      "typeScriptTag": "webinarRegistrations",
      "description": "Delete a registrant record associated with a webinar",
      "parameters": [
        {
          "name": "registrantId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar registrant.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "webinarId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The webinar registrant was deleted."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/webinars/{webinar_id}/registrants/{registrant_id}",
      "method": "updateUserRegistrationData",
      "httpMethod": "patch",
      "tag": "Webinar\\Registrations",
      "typeScriptTag": "webinarRegistrations",
      "description": "Update user registration data associated with a webinar",
      "parameters": [
        {
          "name": "registrantId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar registrant.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        },
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "webinarId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        },
        {
          "name": "is_blocked",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos",
      "method": "videos",
      "httpMethod": "get",
      "tag": "Videos\\Essentials",
      "typeScriptTag": "videosEssentials",
      "description": "Search for videos",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results. `CC` and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.\n\nOption descriptions:\n * `CC` - Return videos under any Creative Commons license.\n * `CC-BY` - Return CC BY, or attribution-only, videos.\n * `CC-BY-NC` - Return CC BY-NC, or Attribution-NonCommercial, videos.\n * `CC-BY-NC-ND` - Return CC BY-NC-ND, or Attribution-NonCommercial-NoDerivs, videos.\n * `CC-BY-NC-SA` - Return CC BY-NC-SA, or Attribution-NonCommercial-ShareAlike, videos.\n * `CC-BY-ND` - Return CC BY-ND, or Attribution-NoDerivs, videos.\n * `CC-BY-SA` - Return CC BY-SA, or Attribution-ShareAlike, videos.\n * `CC0` - Return CC0, or public domain, videos.\n * `categories` - Filter by categories.\n * `duration` - Filter by duration.\n * `in-progress` - Return in-progress videos.\n * `minimum_likes` - Filter by minimum likes.\n * `trending` - Return trending videos.\n * `upload_date` - Filter by upload date.\n"
        },
        {
          "name": "links",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of video URLs to find. Querying, filtering, and sorting aren't supported when using this field.",
          "example": "https://vimeo.com/122375452,https://vimeo.com/273576296"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": true,
          "description": "The search query.",
          "example": "staff picks"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by date.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n * `relevant` - Sort the results by relevance.\n"
        },
        {
          "name": "uris",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of video URIs to find. Querying, filtering, and sorting aren't supported when using this field.",
          "example": "/videos/122375452,/videos/273576296"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "503",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}",
      "method": "video",
      "httpMethod": "delete",
      "tag": "Videos\\Essentials",
      "typeScriptTag": "videosEssentials",
      "description": "Delete a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}",
      "method": "video",
      "httpMethod": "get",
      "tag": "Videos\\Essentials",
      "typeScriptTag": "videosEssentials",
      "description": "Get a specific video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}",
      "method": "video",
      "httpMethod": "patch",
      "tag": "Videos\\Essentials",
      "typeScriptTag": "videosEssentials",
      "description": "Edit a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "A celebration of 10 years of Staff Picks."
        },
        {
          "name": "content_rating",
          "schema": "array",
          "description": ""
        },
        {
          "name": "custom_url",
          "schema": "string",
          "description": "",
          "example": "puppies"
        },
        {
          "name": "embed",
          "schema": "object",
          "description": ""
        },
        {
          "name": "embed_domains",
          "schema": "array",
          "description": ""
        },
        {
          "name": "embed_domains_add",
          "schema": "array",
          "description": ""
        },
        {
          "name": "embed_domains_delete",
          "schema": "array",
          "description": ""
        },
        {
          "name": "hide_from_vimeo",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "license",
          "schema": "string",
          "description": ""
        },
        {
          "name": "locale",
          "schema": "string",
          "description": "",
          "example": "en-US"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "Celebrating 10 Years of Staff Picks"
        },
        {
          "name": "password",
          "schema": "string",
          "description": "",
          "example": "hunter1"
        },
        {
          "name": "privacy",
          "schema": "object",
          "description": ""
        },
        {
          "name": "review_page",
          "schema": "object",
          "description": ""
        },
        {
          "name": "spatial",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/albums",
      "method": "getAllContShowcases",
      "httpMethod": "get",
      "tag": "Videos\\Showcases",
      "typeScriptTag": "videosShowcases",
      "description": "Get all the showcases that contain a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/albums",
      "method": "addToMultipleShowcases",
      "httpMethod": "patch",
      "tag": "Videos\\Showcases",
      "typeScriptTag": "videosShowcases",
      "description": "Add or remove a video from a list of showcases",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "add",
          "schema": "array",
          "description": ""
        },
        {
          "name": "remove",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/animated_thumbsets",
      "method": "getAllSets",
      "httpMethod": "get",
      "tag": "Videos\\Animated thumbnails",
      "typeScriptTag": "videosAnimatedThumbnails",
      "description": "Get all the animated thumbnails of a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/animated_thumbsets",
      "method": "createSet",
      "httpMethod": "post",
      "tag": "Videos\\Animated thumbnails",
      "typeScriptTag": "videosAnimatedThumbnails",
      "description": "Create a set of animated thumbnails for a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "duration",
          "schema": "number",
          "required": true,
          "description": "",
          "example": 5
        },
        {
          "name": "start_time",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 2
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/animated_thumbsets/{picture_id}",
      "method": "deleteSet",
      "httpMethod": "delete",
      "tag": "Videos\\Animated thumbnails",
      "typeScriptTag": "videosAnimatedThumbnails",
      "description": "Delete a set of animated thumbnails for a video",
      "parameters": [
        {
          "name": "pictureId",
          "schema": "string",
          "required": true,
          "description": "The UUID of the set of animated thumbnails.",
          "example": "23f34-b34h4-34hb3"
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The set of animated thumbnails was deleted."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/animated_thumbsets/{picture_id}",
      "method": "specificSetGet",
      "httpMethod": "get",
      "tag": "Videos\\Animated thumbnails",
      "typeScriptTag": "videosAnimatedThumbnails",
      "description": "Get a specific set of animated thumbnails",
      "parameters": [
        {
          "name": "pictureId",
          "schema": "string",
          "required": true,
          "description": "The UUID of the set of animated thumbnails.",
          "example": "23few-h4hw4t-45j5"
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/animated_thumbsets/{picture_id}/status",
      "method": "getStatusOfSet",
      "httpMethod": "get",
      "tag": "Videos\\Animated thumbnails",
      "typeScriptTag": "videosAnimatedThumbnails",
      "description": "Get the status of a set of animated thumbnails",
      "parameters": [
        {
          "name": "pictureId",
          "schema": "string",
          "required": true,
          "description": "The UUID of the set of animated thumbnails.",
          "example": "23few-h4hw4t-45j5"
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/available_albums",
      "method": "listAvailableShowcases",
      "httpMethod": "get",
      "tag": "Showcases\\Showcase videos",
      "typeScriptTag": "showcasesShowcaseVideos",
      "description": "Get all the showcases to which the user can add or remove a specific video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/available_channels",
      "method": "getAccessibleChannels",
      "httpMethod": "get",
      "tag": "Channels\\Videos",
      "typeScriptTag": "channelsVideos",
      "description": "Get all the channels to which the user can add or remove a specific video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/categories",
      "method": "getAllVideoCategories",
      "httpMethod": "get",
      "tag": "Categories\\Videos",
      "typeScriptTag": "categoriesVideos",
      "description": "Get all the categories to which a video belongs",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/categories",
      "method": "setVideoCategories",
      "httpMethod": "put",
      "tag": "Categories\\Videos",
      "typeScriptTag": "categoriesVideos",
      "description": "Suggest categories for a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "category",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/chapters",
      "method": "chapters",
      "httpMethod": "get",
      "tag": "Videos\\Chapters",
      "typeScriptTag": "videosChapters",
      "description": "Get all the chapters of a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/chapters",
      "method": "chapter",
      "httpMethod": "post",
      "tag": "Videos\\Chapters",
      "typeScriptTag": "videosChapters",
      "description": "Add a chapter to a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "title",
          "schema": "string",
          "description": "",
          "example": "Chapter 1"
        },
        {
          "name": "active_thumbnail_uri",
          "schema": "string",
          "description": "",
          "example": "/videos/12345678/chapters/12345/pictures/24kjh4h4g38175db9f59fae9f7g9ekhg"
        },
        {
          "name": "thumbnail_uris",
          "schema": "array",
          "description": ""
        },
        {
          "name": "timecode",
          "schema": "number",
          "description": "",
          "example": 140
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/chapters/temporary/pictures",
      "method": "generateChapterThumbnail",
      "httpMethod": "post",
      "tag": "Videos\\Chapters",
      "typeScriptTag": "videosChapters",
      "description": "Generate an upload link or timecode-based thumbnail for an unsaved video chapter",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "timecode",
          "schema": "number",
          "description": "",
          "example": 140
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/chapters/temporary/pictures/{uid}",
      "method": "getSingleChapterThumbnail",
      "httpMethod": "get",
      "tag": "Videos\\Chapters",
      "typeScriptTag": "videosChapters",
      "description": "Get a single chapter thumbnail associated with an unsaved video chapter",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/chapters/{chapter_id}",
      "method": "chapter",
      "httpMethod": "delete",
      "tag": "Videos\\Chapters",
      "typeScriptTag": "videosChapters",
      "description": "Delete a chapter",
      "parameters": [
        {
          "name": "chapterId",
          "schema": "number",
          "required": true,
          "description": "The ID of the chapter.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The chapter was deleted."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/chapters/{chapter_id}",
      "method": "chapter",
      "httpMethod": "get",
      "tag": "Videos\\Chapters",
      "typeScriptTag": "videosChapters",
      "description": "Get a specific chapter",
      "parameters": [
        {
          "name": "chapterId",
          "schema": "number",
          "required": true,
          "description": "The ID of the chapter.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/chapters/{chapter_id}",
      "method": "chapter",
      "httpMethod": "patch",
      "tag": "Videos\\Chapters",
      "typeScriptTag": "videosChapters",
      "description": "Edit a chapter",
      "parameters": [
        {
          "name": "chapterId",
          "schema": "number",
          "required": true,
          "description": "The ID of the chapter.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "title",
          "schema": "string",
          "description": "",
          "example": "Chapter 1"
        },
        {
          "name": "active_thumbnail_uri",
          "schema": "string",
          "description": "",
          "example": "/videos/12345678/chapters/12345/pictures/24kjh4h4g38175db9f59fae9f7g9ekhg"
        },
        {
          "name": "timecode",
          "schema": "number",
          "description": "",
          "example": 140
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/chapters/{chapter_id}/pictures",
      "method": "getChapterThumbnails",
      "httpMethod": "get",
      "tag": "Videos\\Chapters",
      "typeScriptTag": "videosChapters",
      "description": "Get all the thumbnails associated with a saved video chapter",
      "parameters": [
        {
          "name": "chapterId",
          "schema": "number",
          "required": true,
          "description": "The ID of the chapter.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/chapters/{chapter_id}/pictures",
      "method": "generateChapterThumbnailOrUploadLink",
      "httpMethod": "post",
      "tag": "Videos\\Chapters",
      "typeScriptTag": "videosChapters",
      "description": "Generate an upload link or timecode-based thumbnail for a saved video chapter",
      "parameters": [
        {
          "name": "chapterId",
          "schema": "number",
          "required": true,
          "description": "The ID of the chapter.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "timecode",
          "schema": "number",
          "description": "",
          "example": 140
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/chapters/{chapter_id}/pictures/{uid}",
      "method": "deleteChapterThumbnail",
      "httpMethod": "delete",
      "tag": "Videos\\Chapters",
      "typeScriptTag": "videosChapters",
      "description": "Delete a chapter thumbnail",
      "parameters": [
        {
          "name": "chapterId",
          "schema": "number",
          "required": true,
          "description": "The ID of the chapter.",
          "example": 12345
        },
        {
          "name": "uid",
          "schema": "string",
          "required": true,
          "description": "The unique ID of the thumbnail.",
          "example": "24kjh4h4g38175db9f59fae9f7g9ekhg"
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The chapter thumbnail was deleted."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/chapters/{chapter_id}/pictures/{uid}",
      "method": "getSingleChapterThumbnail",
      "httpMethod": "get",
      "tag": "Videos\\Chapters",
      "typeScriptTag": "videosChapters",
      "description": "Get a single chapter thumbnail associated with a saved video chapter",
      "parameters": [
        {
          "name": "chapterId",
          "schema": "number",
          "required": true,
          "description": "The ID of the chapter.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/chapters/{chapter_id}/pictures/{uid}",
      "method": "setChapterThumbnailActive",
      "httpMethod": "patch",
      "tag": "Videos\\Chapters",
      "typeScriptTag": "videosChapters",
      "description": "Set a chapter thumbnail as active",
      "parameters": [
        {
          "name": "chapterId",
          "schema": "number",
          "required": true,
          "description": "The ID of the chapter.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/comments",
      "method": "comments",
      "httpMethod": "get",
      "tag": "Videos\\Video comments",
      "typeScriptTag": "videosVideoComments",
      "description": "Get all the video comments on a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/comments",
      "method": "comment",
      "httpMethod": "post",
      "tag": "Videos\\Video comments",
      "typeScriptTag": "videosVideoComments",
      "description": "Add a video comment to a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "text",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "I love this!"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/comments/{comment_id}",
      "method": "comment",
      "httpMethod": "delete",
      "tag": "Videos\\Video comments",
      "typeScriptTag": "videosVideoComments",
      "description": "Delete a video comment",
      "parameters": [
        {
          "name": "commentId",
          "schema": "number",
          "required": true,
          "description": "The ID of the comment.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The comment was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/comments/{comment_id}",
      "method": "comment",
      "httpMethod": "get",
      "tag": "Videos\\Video comments",
      "typeScriptTag": "videosVideoComments",
      "description": "Get a specific video comment",
      "parameters": [
        {
          "name": "commentId",
          "schema": "number",
          "required": true,
          "description": "The ID of the comment.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/comments/{comment_id}",
      "method": "comment",
      "httpMethod": "patch",
      "tag": "Videos\\Video comments",
      "typeScriptTag": "videosVideoComments",
      "description": "Edit a video comment",
      "parameters": [
        {
          "name": "commentId",
          "schema": "number",
          "required": true,
          "description": "The ID of the comment.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "text",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "I love this!"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/comments/{comment_id}/replies",
      "method": "getAllReplies",
      "httpMethod": "get",
      "tag": "Videos\\Video comments",
      "typeScriptTag": "videosVideoComments",
      "description": "Get all the replies to a video comment",
      "parameters": [
        {
          "name": "commentId",
          "schema": "number",
          "required": true,
          "description": "The ID of the comment.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/comments/{comment_id}/replies",
      "method": "createReply",
      "httpMethod": "post",
      "tag": "Videos\\Video comments",
      "typeScriptTag": "videosVideoComments",
      "description": "Add a reply to a video comment",
      "parameters": [
        {
          "name": "commentId",
          "schema": "number",
          "required": true,
          "description": "The ID of the comment.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "text",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "I love this!"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/credits",
      "method": "getAllCreditedUsersInVideo",
      "httpMethod": "get",
      "tag": "Videos\\Credits",
      "typeScriptTag": "videosCredits",
      "description": "Get all the credited users in a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/credits",
      "method": "addUserCredit",
      "httpMethod": "post",
      "tag": "Videos\\Credits",
      "typeScriptTag": "videosCredits",
      "description": "Credit a user in a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "user@example.com"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Sam Doe"
        },
        {
          "name": "role",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Producer"
        },
        {
          "name": "user_uri",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "/users/152184"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/credits/available_users",
      "method": "users",
      "httpMethod": "get",
      "tag": "Videos\\Credits",
      "typeScriptTag": "videosCredits",
      "description": "Get users who can be credited on a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results.",
          "example": "Stop motion"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date followed.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/credits/{credit_id}",
      "method": "deleteUserCredit",
      "httpMethod": "delete",
      "tag": "Videos\\Credits",
      "typeScriptTag": "videosCredits",
      "description": "Delete the credit for a user in a video",
      "parameters": [
        {
          "name": "creditId",
          "schema": "number",
          "required": true,
          "description": "The ID of the credit.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The credit was deleted."
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/credits/{credit_id}",
      "method": "getSpecificCreditedUser",
      "httpMethod": "get",
      "tag": "Videos\\Credits",
      "typeScriptTag": "videosCredits",
      "description": "Get a specific credited user in a video",
      "parameters": [
        {
          "name": "creditId",
          "schema": "number",
          "required": true,
          "description": "The ID of the credit.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/credits/{credit_id}",
      "method": "editUserCreditInVideo",
      "httpMethod": "patch",
      "tag": "Videos\\Credits",
      "typeScriptTag": "videosCredits",
      "description": "Edit the credit for a user in a video",
      "parameters": [
        {
          "name": "creditId",
          "schema": "number",
          "required": true,
          "description": "The ID of the credit.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "Sam Doe"
        },
        {
          "name": "role",
          "schema": "string",
          "description": "",
          "example": "Producer"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/fragments",
      "method": "fragments",
      "httpMethod": "delete",
      "tag": "Videos\\Fragments",
      "typeScriptTag": "videosFragments",
      "description": "Delete a video's fragments",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 699033361
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The fragments were deleted."
        }
      ]
    },
    {
      "url": "/videos/{video_id}/fragments",
      "method": "fragments",
      "httpMethod": "get",
      "tag": "Videos\\Fragments",
      "typeScriptTag": "videosFragments",
      "description": "Get all the fragments for a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 699033361
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/fragments",
      "method": "fragments",
      "httpMethod": "put",
      "tag": "Videos\\Fragments",
      "typeScriptTag": "videosFragments",
      "description": "Update a video's fragments",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 699033361
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The fragments were updated."
        }
      ]
    },
    {
      "url": "/videos/{video_id}/likes",
      "method": "getUserLikes",
      "httpMethod": "get",
      "tag": "Likes\\Essentials",
      "typeScriptTag": "likesEssentials",
      "description": "Get all the users who have liked a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
          "example": "asc"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by join date.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/pictures",
      "method": "getAllByVideoId",
      "httpMethod": "get",
      "tag": "Videos\\Thumbnails",
      "typeScriptTag": "videosThumbnails",
      "description": "Get all the thumbnails of a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/pictures",
      "method": "addThumbnailToVideo",
      "httpMethod": "post",
      "tag": "Videos\\Thumbnails",
      "typeScriptTag": "videosThumbnails",
      "description": "Add a video thumbnail",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "time",
          "schema": "number",
          "description": "",
          "example": 300
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/pictures/{picture_id}",
      "method": "deleteThumbnailFromVideo",
      "httpMethod": "delete",
      "tag": "Videos\\Thumbnails",
      "typeScriptTag": "videosThumbnails",
      "description": "Delete a video thumbnail",
      "parameters": [
        {
          "name": "pictureId",
          "schema": "number",
          "required": true,
          "description": "The ID of the thumbnail.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The thumbnail was deleted."
        }
      ]
    },
    {
      "url": "/videos/{video_id}/pictures/{picture_id}",
      "method": "getThumbnailFromVideo",
      "httpMethod": "get",
      "tag": "Videos\\Thumbnails",
      "typeScriptTag": "videosThumbnails",
      "description": "Get a specific video thumbnail",
      "parameters": [
        {
          "name": "pictureId",
          "schema": "number",
          "required": true,
          "description": "The ID of the thumbnail.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/pictures/{picture_id}",
      "method": "editThumbnailImage",
      "httpMethod": "patch",
      "tag": "Videos\\Thumbnails",
      "typeScriptTag": "videosThumbnails",
      "description": "Edit a video thumbnail",
      "parameters": [
        {
          "name": "pictureId",
          "schema": "number",
          "required": true,
          "description": "The ID of the thumbnail.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/presets/{preset_id}",
      "method": "removePresetFromVideo",
      "httpMethod": "delete",
      "tag": "Embed Presets\\Videos",
      "typeScriptTag": "embedPresetsVideos",
      "description": "Remove an embed preset from a video",
      "parameters": [
        {
          "name": "presetId",
          "schema": "number",
          "required": true,
          "description": "The ID of the embed preset.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The embed preset was removed."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/presets/{preset_id}",
      "method": "checkIfPresetAddedToVideo",
      "httpMethod": "get",
      "tag": "Embed Presets\\Videos",
      "typeScriptTag": "embedPresetsVideos",
      "description": "Check if an embed preset has been added to a video",
      "parameters": [
        {
          "name": "presetId",
          "schema": "number",
          "required": true,
          "description": "The ID of the embed preset.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The embed preset has been added to the video."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/presets/{preset_id}",
      "method": "addPresetToVideo",
      "httpMethod": "put",
      "tag": "Embed Presets\\Videos",
      "typeScriptTag": "embedPresetsVideos",
      "description": "Add an embed preset to a video",
      "parameters": [
        {
          "name": "presetId",
          "schema": "number",
          "required": true,
          "description": "The ID of the embed preset.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The embed preset was added to the video."
        }
      ]
    },
    {
      "url": "/videos/{video_id}/privacy/domains",
      "method": "listWhitelistDomains",
      "httpMethod": "get",
      "tag": "Videos\\Embed privacy",
      "typeScriptTag": "videosEmbedPrivacy",
      "description": "Get all the domains on a video's whitelist",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/privacy/domains/{domain}",
      "method": "removeDomainFromWhitelist",
      "httpMethod": "delete",
      "tag": "Videos\\Embed privacy",
      "typeScriptTag": "videosEmbedPrivacy",
      "description": "Remove a domain from a video's whitelist",
      "parameters": [
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "The domain name.",
          "example": "example.com"
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The domain was removed."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/privacy/domains/{domain}",
      "method": "addDomainToWhitelist",
      "httpMethod": "put",
      "tag": "Videos\\Embed privacy",
      "typeScriptTag": "videosEmbedPrivacy",
      "description": "Add a domain to a video's whitelist",
      "parameters": [
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "The domain name.",
          "example": "example.com"
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video is embeddable on the domain."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/privacy/users",
      "method": "listAccessibleUsers",
      "httpMethod": "get",
      "tag": "Videos\\Unlisted videos",
      "typeScriptTag": "videosUnlistedVideos",
      "description": "Get the users who can access an unlisted video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/privacy/users",
      "method": "grantAccessToUsers",
      "httpMethod": "put",
      "tag": "Videos\\Unlisted videos",
      "typeScriptTag": "videosUnlistedVideos",
      "description": "Permit a list of users to access an unlisted video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/privacy/users/{user_id}",
      "method": "restrictUserAccess",
      "httpMethod": "delete",
      "tag": "Videos\\Unlisted videos",
      "typeScriptTag": "videosUnlistedVideos",
      "description": "Restrict a user from viewing an unlisted video",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The user has been restricted from accessing the unlisted video."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/privacy/users/{user_id}",
      "method": "grantUserAccess",
      "httpMethod": "put",
      "tag": "Videos\\Unlisted videos",
      "typeScriptTag": "videosUnlistedVideos",
      "description": "Permit a single user to access an unlisted video",
      "parameters": [
        {
          "name": "userId",
          "schema": "number",
          "required": true,
          "description": "The ID of the user.",
          "example": 152184
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "204",
          "description": "The user can already access this unlisted video."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/sessions/status",
      "method": "getIngestStatus",
      "httpMethod": "get",
      "tag": "Live\\Event sessions",
      "typeScriptTag": "liveEventSessions",
      "description": "Get the ingest status of a one-time live event",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the event.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/tags",
      "method": "getVideoTags",
      "httpMethod": "get",
      "tag": "Videos\\Tags",
      "typeScriptTag": "videosTags",
      "description": "Get all the tags of a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/tags",
      "method": "addMultiple",
      "httpMethod": "put",
      "tag": "Videos\\Tags",
      "typeScriptTag": "videosTags",
      "description": "Add a list of tags to a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/tags/{word}",
      "method": "removeTag",
      "httpMethod": "delete",
      "tag": "Videos\\Tags",
      "typeScriptTag": "videosTags",
      "description": "Remove a tag from a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "word",
          "schema": "string",
          "required": true,
          "description": "The tag word.",
          "example": "awesome"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The tag was removed."
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/tags/{word}",
      "method": "checkTagVideo",
      "httpMethod": "get",
      "tag": "Videos\\Tags",
      "typeScriptTag": "videosTags",
      "description": "Check if a tag has been added to a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "word",
          "schema": "string",
          "required": true,
          "description": "The tag word.",
          "example": "awesome"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/tags/{word}",
      "method": "addTagToVideo",
      "httpMethod": "put",
      "tag": "Videos\\Tags",
      "typeScriptTag": "videosTags",
      "description": "Add a specific tag to a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "word",
          "schema": "string",
          "required": true,
          "description": "The tag word.",
          "example": "awesome"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/texttracks",
      "method": "getAllVideoTracks",
      "httpMethod": "get",
      "tag": "Videos\\Text tracks",
      "typeScriptTag": "videosTextTracks",
      "description": "Get all the text tracks of a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/texttracks",
      "method": "addTextTrack",
      "httpMethod": "post",
      "tag": "Videos\\Text tracks",
      "typeScriptTag": "videosTextTracks",
      "description": "Add a text track to a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "active",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": true
        },
        {
          "name": "is_auto_generated",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "is_edited",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "language",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "en-US"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Commentary"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "TYPE"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/texttracks/{texttrack_id}",
      "method": "deleteTextTrack",
      "httpMethod": "delete",
      "tag": "Videos\\Text tracks",
      "typeScriptTag": "videosTextTracks",
      "description": "Delete a text track",
      "parameters": [
        {
          "name": "texttrackId",
          "schema": "number",
          "required": true,
          "description": "The ID of the text track.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The text track was deleted."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/texttracks/{texttrack_id}",
      "method": "getSpecificTextTrack",
      "httpMethod": "get",
      "tag": "Videos\\Text tracks",
      "typeScriptTag": "videosTextTracks",
      "description": "Get a specific text track",
      "parameters": [
        {
          "name": "texttrackId",
          "schema": "number",
          "required": true,
          "description": "The ID of the text track.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/texttracks/{texttrack_id}",
      "method": "editTextTrack",
      "httpMethod": "patch",
      "tag": "Videos\\Text tracks",
      "typeScriptTag": "videosTextTracks",
      "description": "Edit a text track",
      "parameters": [
        {
          "name": "texttrackId",
          "schema": "number",
          "required": true,
          "description": "The ID of the text track.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "",
          "example": true
        },
        {
          "name": "language",
          "schema": "string",
          "description": "",
          "example": "en-US"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "Commentary"
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/timelinethumbnails",
      "method": "addThumbnailToVideo",
      "httpMethod": "post",
      "tag": "Embed Presets\\Timeline events",
      "typeScriptTag": "embedPresetsTimelineEvents",
      "description": "Add a timeline event thumbnail to a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/timelinethumbnails/{thumbnail_id}",
      "method": "getSingleThumbnail",
      "httpMethod": "get",
      "tag": "Embed Presets\\Timeline events",
      "typeScriptTag": "embedPresetsTimelineEvents",
      "description": "Get a timeline event thumbnail",
      "parameters": [
        {
          "name": "thumbnailId",
          "schema": "number",
          "required": true,
          "description": "The ID of the timeline event thumbnail.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/transcripts/{texttrack_id}",
      "method": "transcript",
      "httpMethod": "get",
      "tag": "Videos\\Transcripts",
      "typeScriptTag": "videosTranscripts",
      "description": "Get transcript segments",
      "parameters": [
        {
          "name": "texttrackId",
          "schema": "number",
          "required": true,
          "description": "The ID of the text track.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/trim",
      "method": "trim",
      "httpMethod": "get",
      "tag": "Videos\\Nondestructive trimming",
      "typeScriptTag": "videosNondestructiveTrimming",
      "description": "Get the status of a video's trim operation",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/trim",
      "method": "trim",
      "httpMethod": "post",
      "tag": "Videos\\Nondestructive trimming",
      "typeScriptTag": "videosNondestructiveTrimming",
      "description": "Start a trim operation for a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "trim_end",
          "schema": "string",
          "description": "",
          "example": "2.0"
        },
        {
          "name": "trim_start",
          "schema": "string",
          "description": "",
          "example": "1.0"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/versions",
      "method": "getAllVideoVersions",
      "httpMethod": "get",
      "tag": "Videos\\Versions",
      "typeScriptTag": "videosVersions",
      "description": "Get all the versions of a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/versions",
      "method": "addVideoVersion",
      "httpMethod": "post",
      "tag": "Videos\\Versions",
      "typeScriptTag": "videosVersions",
      "description": "Add a version to a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "file_name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "untitled.mp4"
        },
        {
          "name": "upload",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/versions/{version_id}",
      "method": "deleteVideoVersion",
      "httpMethod": "delete",
      "tag": "Videos\\Versions",
      "typeScriptTag": "videosVersions",
      "description": "Delete a video version",
      "parameters": [
        {
          "name": "versionId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video version.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "The video version was deleted."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/versions/{version_id}",
      "method": "getSpecificVersion",
      "httpMethod": "get",
      "tag": "Videos\\Versions",
      "typeScriptTag": "videosVersions",
      "description": "Get a specific video version",
      "parameters": [
        {
          "name": "versionId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video version.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/versions/{version_id}",
      "method": "editVideoVersion",
      "httpMethod": "patch",
      "tag": "Videos\\Versions",
      "typeScriptTag": "videosVersions",
      "description": "Edit a video version",
      "parameters": [
        {
          "name": "versionId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video version.",
          "example": 12345
        },
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "description with emoji"
        },
        {
          "name": "is_current",
          "schema": "boolean",
          "description": "",
          "example": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/videos",
      "method": "getRelatedVideos",
      "httpMethod": "get",
      "tag": "Videos\\Recommendations",
      "typeScriptTag": "videosRecommendations",
      "description": "Get all the related videos of a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "number",
          "required": true,
          "description": "The ID of the video.",
          "example": 258684937
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `related` - Return related videos.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show.",
          "example": 1
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100.",
          "example": 10
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/webinars/{webinar_id}",
      "method": "getSpecificWebinar",
      "httpMethod": "get",
      "tag": "Webinar\\Essentials",
      "typeScriptTag": "webinarEssentials",
      "description": "Get a specific webinar",
      "parameters": [
        {
          "name": "webinarId",
          "schema": "string",
          "required": true,
          "description": "The ID of the webinar.",
          "example": "f19bfa08-b266-4f20-bfce-db1d0719b52f"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    }
  ],
  "repositoryDescription": "Join the world's leading professional video platform and grow your business with easy-to-use, high-quality video creation, hosting, and marketing tools. Vimeo's {language} SDK generated by Konfig (https://konfigthis.com/).",
  "logo": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/vimeo/logo.avif",
  "openApiRaw": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/vimeo/openapi.yaml",
  "previewLinkImage": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/vimeo/imagePreview.png",
  "faviconUrl": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/vimeo/favicon.jpg",
  "clientNameCamelCase": "vimeo",
  "lastUpdated": "2024-03-13T01:24:30.233Z",
  "typescriptSdkUsageCode": "import { Vimeo } from 'vimeo-typescript-sdk';\n\nconst vimeo = new Vimeo({\n    token: \"TOKEN\",\n    clientId: \"CLIENT_ID\",\n    clientSecret: \"CLIENT_SECRET\",\n})",
  "typescriptSdkFirstRequestCode": "// Get the API specification\nconst endpointsResponse = vimeo.API Information\\Essentials.endpoints({\n    openapi: true\n    version: 3.4\n})",
  "fixedSpecFileName": "vimeo-fixed-spec.yaml"
}