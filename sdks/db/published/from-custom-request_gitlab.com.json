{
  "securitySchemes": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "in": "header",
      "name": "Private-Token"
    }
  },
  "apiBaseUrl": "https://www.gitlab.com/api/",
  "apiVersion": "v4",
  "apiDescription": "An OpenAPI definition for the GitLab REST API.\nFew API resources or endpoints are currently included.\nThe intent is to expand this to match the entire Markdown documentation of the API:\n<https://docs.gitlab.com/ee/api/>. Contributions are welcome.\n\nWhen viewing this on gitlab.com, you can test API calls directly from the browser\nagainst the `gitlab.com` instance, if you are logged in.\nThe feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie),\nso each request is made using your account.\n\nInstructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html)\n",
  "apiTitle": "GitLab API",
  "endpoints": 48,
  "sdkMethods": 73,
  "schemas": 59,
  "parameters": 248,
  "originalCustomRequest": {
    "type": "GET",
    "url": "https://gitlab.com/gitlab-org/gitlab/-/raw/master/doc/api/openapi/openapi.yaml"
  },
  "customRequestSpecFilename": "gitlab.com.yaml",
  "difficultyScore": 148,
  "difficulty": "Medium",
  "company": "GitLab",
  "sdkName": "git-lab-{language}-sdk",
  "clientName": "GitLab",
  "metaDescription": "GitLab is a complete DevOps platform, delivered as a single application, that provides teams a way to collaborate, build, and deploy their software. With GitLab, you can automate the entire DevOps lifecycle from planning and creating code to testing, releasing, and monitoring applications.",
  "homepage": "gitlab.com",
  "developerDocumentation": "docs.gitlab.com/ee/api/rest/",
  "categories": [
    "developer_tools",
    "automation",
    "collaboration",
    "version_control",
    "continuous_integration",
    "continuous_delivery"
  ],
  "methods": [
    {
      "url": "/api/v4/groups/{id}/badges/{badge_id}",
      "method": "removeFromGroup",
      "httpMethod": "delete",
      "tag": "badges",
      "typeScriptTag": "badges",
      "description": "Removes a badge from the group.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
          "example": "ID"
        },
        {
          "name": "badgeId",
          "schema": "integer",
          "required": true,
          "description": "The badge ID",
          "example": 0
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v4/groups/{id}/badges/{badge_id}",
      "method": "getGroupBadge",
      "httpMethod": "get",
      "tag": "badges",
      "typeScriptTag": "badges",
      "description": "Gets a badge of a group.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
          "example": "ID"
        },
        {
          "name": "badgeId",
          "schema": "integer",
          "required": true,
          "description": "The badge ID",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Badge model"
        }
      ]
    },
    {
      "url": "/api/v4/groups/{id}/badges/{badge_id}",
      "method": "updateGroupBadge",
      "httpMethod": "put",
      "tag": "badges",
      "typeScriptTag": "badges",
      "description": "Updates a badge of a group.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
          "example": "ID"
        },
        {
          "name": "badgeId",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 0
        },
        {
          "name": "link_url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "image_url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Badge model"
        }
      ]
    },
    {
      "url": "/api/v4/groups/{id}/badges",
      "method": "getList",
      "httpMethod": "get",
      "tag": "badges",
      "typeScriptTag": "badges",
      "description": "Gets a list of group badges viewable by the authenticated user.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
          "example": "ID"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "Current page number",
          "default": 1
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "Number of items per page",
          "default": 20
        },
        {
          "name": "name",
          "schema": "string",
          "description": "Name for the badge"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v4/groups/{id}/badges",
      "method": "addBadgeToGroup",
      "httpMethod": "post",
      "tag": "badges",
      "typeScriptTag": "badges",
      "description": "Adds a badge to a group.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
          "example": "ID"
        },
        {
          "name": "link_url",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "LINK_URL"
        },
        {
          "name": "image_url",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "IMAGE_URL"
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "API_Entities_Badge model"
        }
      ]
    },
    {
      "url": "/api/v4/groups/{id}/badges/render",
      "method": "previewBadgeFromGroup",
      "httpMethod": "get",
      "tag": "badges",
      "typeScriptTag": "badges",
      "description": "Preview a badge from a group.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
          "example": "ID"
        },
        {
          "name": "linkUrl",
          "schema": "string",
          "required": true,
          "description": "URL of the badge link",
          "example": "LINK_URL"
        },
        {
          "name": "imageUrl",
          "schema": "string",
          "required": true,
          "description": "URL of the badge image",
          "example": "IMAGE_URL"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_BasicBadgeDetails model"
        }
      ]
    },
    {
      "url": "/api/v4/groups/{id}/access_requests/{user_id}",
      "method": "denyAccessToUser",
      "httpMethod": "delete",
      "tag": "access_requests",
      "typeScriptTag": "accessRequests",
      "description": "Denies an access request for the given user.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the group owned by the authenticated user",
          "example": "ID"
        },
        {
          "name": "userId",
          "schema": "integer",
          "required": true,
          "description": "The user ID of the access requester",
          "example": 0
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v4/groups/{id}/access_requests/{user_id}/approve",
      "method": "approveForUser",
      "httpMethod": "put",
      "tag": "access_requests",
      "typeScriptTag": "accessRequests",
      "description": "Approves an access request for the given user.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the group owned by the authenticated user",
          "example": "ID"
        },
        {
          "name": "userId",
          "schema": "integer",
          "required": true,
          "description": "The user ID of the access requester",
          "example": 0
        },
        {
          "name": "access_level",
          "schema": "integer",
          "description": "",
          "default": 30
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_AccessRequester model"
        }
      ]
    },
    {
      "url": "/api/v4/groups/{id}/access_requests",
      "method": "getList",
      "httpMethod": "get",
      "tag": "access_requests",
      "typeScriptTag": "accessRequests",
      "description": "Gets a list of access requests for a group.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the group owned by the authenticated user",
          "example": "ID"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "Current page number",
          "default": 1
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "Number of items per page",
          "default": 20
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_AccessRequester model"
        }
      ]
    },
    {
      "url": "/api/v4/groups/{id}/access_requests",
      "method": "requestAccessToGroup",
      "httpMethod": "post",
      "tag": "access_requests",
      "typeScriptTag": "accessRequests",
      "description": "Requests access for the authenticated user to a group.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the group owned by the authenticated user",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_AccessRequester model"
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/repository/merged_branches",
      "method": "deleteMerged",
      "httpMethod": "delete",
      "tag": "branches",
      "typeScriptTag": "branches",
      "description": "Delete all merged branches",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project",
          "example": "ID"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v4/projects/{id}/repository/branches/{branch}",
      "method": "deleteBranch",
      "httpMethod": "delete",
      "tag": "branches",
      "typeScriptTag": "branches",
      "description": "Delete a branch",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project",
          "example": "ID"
        },
        {
          "name": "branch",
          "schema": "string",
          "required": true,
          "description": "The name of the branch",
          "example": "BRANCH"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v4/projects/{id}/repository/branches/{branch}",
      "method": "getSingleBranch",
      "httpMethod": "get",
      "tag": "branches",
      "typeScriptTag": "branches",
      "description": "Get a single repository branch",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project",
          "example": "ID"
        },
        {
          "name": "branch",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Branch model"
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/repository/branches/{branch}",
      "method": "checkIfExists",
      "httpMethod": "head",
      "tag": "branches",
      "typeScriptTag": "branches",
      "description": "Check if a branch exists",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project",
          "example": "ID"
        },
        {
          "name": "branch",
          "schema": "string",
          "required": true,
          "description": "The name of the branch",
          "example": "BRANCH"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v4/projects/{id}/repository/branches",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "branches",
      "typeScriptTag": "branches",
      "description": "Get a project repository branches",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project",
          "example": "ID"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "Current page number",
          "default": 1
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "Number of items per page",
          "default": 20
        },
        {
          "name": "search",
          "schema": "string",
          "description": "Return list of branches matching the search criteria"
        },
        {
          "name": "regex",
          "schema": "string",
          "description": "Return list of branches matching the regex"
        },
        {
          "name": "sort",
          "schema": "string",
          "description": "Return list of branches sorted by the given field"
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Name of branch to start the pagination from"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/repository/branches",
      "method": "createBranch",
      "httpMethod": "post",
      "tag": "branches",
      "typeScriptTag": "branches",
      "description": "Create branch",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project",
          "example": "ID"
        },
        {
          "name": "branch",
          "schema": "string",
          "required": true,
          "description": "The name of the branch",
          "example": "BRANCH"
        },
        {
          "name": "ref",
          "schema": "string",
          "required": true,
          "description": "Create branch from commit sha or existing branch",
          "example": "REF"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "API_Entities_Branch model"
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/repository/branches/{branch}/unprotect",
      "method": "unprotectBranch",
      "httpMethod": "put",
      "tag": "branches",
      "typeScriptTag": "branches",
      "description": "Unprotect a single branch",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project",
          "example": "ID"
        },
        {
          "name": "branch",
          "schema": "string",
          "required": true,
          "description": "The name of the branch",
          "example": "BRANCH"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Branch model"
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/repository/branches/{branch}/protect",
      "method": "protectBranch",
      "httpMethod": "put",
      "tag": "branches",
      "typeScriptTag": "branches",
      "description": "Protect a single branch",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project",
          "example": "ID"
        },
        {
          "name": "branch",
          "schema": "string",
          "required": true,
          "description": "The name of the branch",
          "example": "BRANCH"
        },
        {
          "name": "developers_can_push",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "developers_can_merge",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Branch model"
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/badges/{badge_id}",
      "method": "removeFromProject",
      "httpMethod": "delete",
      "tag": "badges",
      "typeScriptTag": "badges",
      "description": "Removes a badge from the project.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
          "example": "ID"
        },
        {
          "name": "badgeId",
          "schema": "integer",
          "required": true,
          "description": "The badge ID",
          "example": 0
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v4/projects/{id}/badges/{badge_id}",
      "method": "getProjectBadge",
      "httpMethod": "get",
      "tag": "badges",
      "typeScriptTag": "badges",
      "description": "Gets a badge of a project.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
          "example": "ID"
        },
        {
          "name": "badgeId",
          "schema": "integer",
          "required": true,
          "description": "The badge ID",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Badge model"
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/badges/{badge_id}",
      "method": "updateProjectBadge",
      "httpMethod": "put",
      "tag": "badges",
      "typeScriptTag": "badges",
      "description": "Updates a badge of a project.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
          "example": "ID"
        },
        {
          "name": "badgeId",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 0
        },
        {
          "name": "link_url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "image_url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Badge model"
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/badges",
      "method": "listViewableByAuthenticatedUser",
      "httpMethod": "get",
      "tag": "badges",
      "typeScriptTag": "badges",
      "description": "Gets a list of project badges viewable by the authenticated user.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
          "example": "ID"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "Current page number",
          "default": 1
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "Number of items per page",
          "default": 20
        },
        {
          "name": "name",
          "schema": "string",
          "description": "Name for the badge"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/badges",
      "method": "addProjectBadge",
      "httpMethod": "post",
      "tag": "badges",
      "typeScriptTag": "badges",
      "description": "Adds a badge to a project.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
          "example": "ID"
        },
        {
          "name": "link_url",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "LINK_URL"
        },
        {
          "name": "image_url",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "IMAGE_URL"
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "API_Entities_Badge model"
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/badges/render",
      "method": "renderPreviewFromProject",
      "httpMethod": "get",
      "tag": "badges",
      "typeScriptTag": "badges",
      "description": "Preview a badge from a project.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
          "example": "ID"
        },
        {
          "name": "linkUrl",
          "schema": "string",
          "required": true,
          "description": "URL of the badge link",
          "example": "LINK_URL"
        },
        {
          "name": "imageUrl",
          "schema": "string",
          "required": true,
          "description": "URL of the badge image",
          "example": "IMAGE_URL"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_BasicBadgeDetails model"
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/access_requests/{user_id}",
      "method": "denyAccessToUser",
      "httpMethod": "delete",
      "tag": "access_requests",
      "typeScriptTag": "accessRequests",
      "description": "Denies an access request for the given user.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user",
          "example": "ID"
        },
        {
          "name": "userId",
          "schema": "integer",
          "required": true,
          "description": "The user ID of the access requester",
          "example": 0
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v4/projects/{id}/access_requests/{user_id}/approve",
      "method": "approveForUser",
      "httpMethod": "put",
      "tag": "access_requests",
      "typeScriptTag": "accessRequests",
      "description": "Approves an access request for the given user.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user",
          "example": "ID"
        },
        {
          "name": "userId",
          "schema": "integer",
          "required": true,
          "description": "The user ID of the access requester",
          "example": 0
        },
        {
          "name": "access_level",
          "schema": "integer",
          "description": "",
          "default": 30
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_AccessRequester model"
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/access_requests",
      "method": "getList",
      "httpMethod": "get",
      "tag": "access_requests",
      "typeScriptTag": "accessRequests",
      "description": "Gets a list of access requests for a project.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user",
          "example": "ID"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "Current page number",
          "default": 1
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "Number of items per page",
          "default": 20
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_AccessRequester model"
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/access_requests",
      "method": "requestAccessToProject",
      "httpMethod": "post",
      "tag": "access_requests",
      "typeScriptTag": "accessRequests",
      "description": "Requests access for the authenticated user to a project.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project owned by the authenticated user",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_AccessRequester model"
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/alert_management_alerts/{alert_iid}/metric_images/{metric_image_id}",
      "method": "removeMetricImage",
      "httpMethod": "delete",
      "tag": "alert_management",
      "typeScriptTag": "alertManagement",
      "description": "Remove a metric image for an alert",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project",
          "example": "ID"
        },
        {
          "name": "alertIid",
          "schema": "integer",
          "required": true,
          "description": "The IID of the Alert",
          "example": 0
        },
        {
          "name": "metricImageId",
          "schema": "integer",
          "required": true,
          "description": "The ID of metric image",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "API_Entities_MetricImage model"
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/alert_management_alerts/{alert_iid}/metric_images/{metric_image_id}",
      "method": "updateMetricImage",
      "httpMethod": "put",
      "tag": "alert_management",
      "typeScriptTag": "alertManagement",
      "description": "Update a metric image for an alert",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project",
          "example": "ID"
        },
        {
          "name": "alertIid",
          "schema": "integer",
          "required": true,
          "description": "The IID of the Alert",
          "example": 0
        },
        {
          "name": "metricImageId",
          "schema": "integer",
          "required": true,
          "description": "The ID of metric image",
          "example": 0
        },
        {
          "name": "url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "url_text",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_MetricImage model"
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/alert_management_alerts/{alert_iid}/metric_images",
      "method": "getMetricImagesForAlert",
      "httpMethod": "get",
      "tag": "alert_management",
      "typeScriptTag": "alertManagement",
      "description": "Metric Images for alert",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project",
          "example": "ID"
        },
        {
          "name": "alertIid",
          "schema": "integer",
          "required": true,
          "description": "The IID of the Alert",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/alert_management_alerts/{alert_iid}/metric_images",
      "method": "uploadMetricImage",
      "httpMethod": "post",
      "tag": "alert_management",
      "typeScriptTag": "alertManagement",
      "description": "Upload a metric image for an alert",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project",
          "example": "ID"
        },
        {
          "name": "alertIid",
          "schema": "integer",
          "required": true,
          "description": "The IID of the Alert",
          "example": 0
        },
        {
          "name": "file",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "FILE"
        },
        {
          "name": "url",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "url_text",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_MetricImage model"
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/alert_management_alerts/{alert_iid}/metric_images/authorize",
      "method": "authorizeMetricImageUpload",
      "httpMethod": "post",
      "tag": "alert_management",
      "typeScriptTag": "alertManagement",
      "description": "Workhorse authorize metric image file upload",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or URL-encoded path of the project",
          "example": "ID"
        },
        {
          "name": "alertIid",
          "schema": "integer",
          "required": true,
          "description": "The IID of the Alert",
          "example": 0
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v4/admin/batched_background_migrations/{id}",
      "method": "getMigration",
      "httpMethod": "get",
      "tag": "batched_background_migrations",
      "typeScriptTag": "batchedBackgroundMigrations",
      "description": "Retrieve a batched background migration",
      "parameters": [
        {
          "name": "database",
          "schema": "string",
          "description": "The name of the database",
          "default": "main"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The batched background migration id",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_BatchedBackgroundMigration model"
        }
      ]
    },
    {
      "url": "/api/v4/admin/batched_background_migrations",
      "method": "list",
      "httpMethod": "get",
      "tag": "batched_background_migrations",
      "typeScriptTag": "batchedBackgroundMigrations",
      "description": "Get the list of batched background migrations",
      "parameters": [
        {
          "name": "database",
          "schema": "string",
          "description": "The name of the database, the default `main`",
          "default": "main"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v4/admin/batched_background_migrations/{id}/resume",
      "method": "resumeMigration",
      "httpMethod": "put",
      "tag": "batched_background_migrations",
      "typeScriptTag": "batchedBackgroundMigrations",
      "description": "Resume a batched background migration",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The batched background migration id",
          "example": 0
        },
        {
          "name": "database",
          "schema": "string",
          "description": "",
          "default": "main"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_BatchedBackgroundMigration model"
        }
      ]
    },
    {
      "url": "/api/v4/admin/batched_background_migrations/{id}/pause",
      "method": "pauseMigration",
      "httpMethod": "put",
      "tag": "batched_background_migrations",
      "typeScriptTag": "batchedBackgroundMigrations",
      "description": "Pause a batched background migration",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The batched background migration id",
          "example": 0
        },
        {
          "name": "database",
          "schema": "string",
          "description": "",
          "default": "main"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_BatchedBackgroundMigration model"
        }
      ]
    },
    {
      "url": "/api/v4/admin/ci/variables/{key}",
      "method": "deleteInstanceVariable",
      "httpMethod": "delete",
      "tag": "ci_variables",
      "typeScriptTag": "ciVariables",
      "description": "Delete an existing instance-level variable",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "The key of a variable",
          "example": "KEY"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "API_Entities_Ci_Variable model"
        }
      ]
    },
    {
      "url": "/api/v4/admin/ci/variables/{key}",
      "method": "getSpecificInstanceVariable",
      "httpMethod": "get",
      "tag": "ci_variables",
      "typeScriptTag": "ciVariables",
      "description": "Get the details of a specific instance-level variable",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "The key of a variable",
          "example": "KEY"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Ci_Variable model"
        }
      ]
    },
    {
      "url": "/api/v4/admin/ci/variables/{key}",
      "method": "updateInstanceVariable",
      "httpMethod": "put",
      "tag": "ci_variables",
      "typeScriptTag": "ciVariables",
      "description": "Update an instance-level variable",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "The key of a variable",
          "example": "KEY"
        },
        {
          "name": "value",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protected",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "masked",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "raw",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "variable_type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Ci_Variable model"
        }
      ]
    },
    {
      "url": "/api/v4/admin/ci/variables",
      "method": "listInstanceVariables",
      "httpMethod": "get",
      "tag": "ci_variables",
      "typeScriptTag": "ciVariables",
      "description": "List all instance-level variables",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "Current page number",
          "default": 1
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "Number of items per page",
          "default": 20
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Ci_Variable model"
        }
      ]
    },
    {
      "url": "/api/v4/admin/ci/variables",
      "method": "createNewInstanceVariable",
      "httpMethod": "post",
      "tag": "ci_variables",
      "typeScriptTag": "ciVariables",
      "description": "Create a new instance-level variable",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "KEY"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "VALUE"
        },
        {
          "name": "protected",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "masked",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "raw",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "variable_type",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "API_Entities_Ci_Variable model"
        }
      ]
    },
    {
      "url": "/api/v4/admin/databases/{database_name}/dictionary/tables/{table_name}",
      "method": "getDictionaryDetails",
      "httpMethod": "get",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "Retrieve dictionary details",
      "parameters": [
        {
          "name": "databaseName",
          "schema": "string",
          "required": true,
          "description": "The database name",
          "example": "DATABASE_NAME"
        },
        {
          "name": "tableName",
          "schema": "string",
          "required": true,
          "description": "The table name",
          "example": "TABLE_NAME"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Dictionary_Table model"
        }
      ]
    },
    {
      "url": "/api/v4/admin/clusters/{cluster_id}",
      "method": "deleteInstanceCluster",
      "httpMethod": "delete",
      "tag": "clusters",
      "typeScriptTag": "clusters",
      "description": "Delete instance cluster",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "integer",
          "required": true,
          "description": "The cluster ID",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": "API_Entities_Cluster model"
        }
      ]
    },
    {
      "url": "/api/v4/admin/clusters/{cluster_id}",
      "method": "getSingleInstanceCluster",
      "httpMethod": "get",
      "tag": "clusters",
      "typeScriptTag": "clusters",
      "description": "Get a single instance cluster",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "integer",
          "required": true,
          "description": "The cluster ID",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Cluster model"
        }
      ]
    },
    {
      "url": "/api/v4/admin/clusters/{cluster_id}",
      "method": "updateInstanceCluster",
      "httpMethod": "put",
      "tag": "clusters",
      "typeScriptTag": "clusters",
      "description": "Edit instance cluster",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "integer",
          "required": true,
          "description": "The cluster ID",
          "example": 0
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "environment_scope",
          "schema": "string",
          "description": ""
        },
        {
          "name": "namespace_per_environment",
          "schema": "boolean",
          "description": "",
          "default": true
        },
        {
          "name": "domain",
          "schema": "string",
          "description": ""
        },
        {
          "name": "management_project_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "managed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "platform_kubernetes_attributes[api_url]",
          "schema": "string",
          "description": ""
        },
        {
          "name": "platform_kubernetes_attributes[token]",
          "schema": "string",
          "description": ""
        },
        {
          "name": "platform_kubernetes_attributes[ca_cert]",
          "schema": "string",
          "description": ""
        },
        {
          "name": "platform_kubernetes_attributes[namespace]",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Cluster model"
        }
      ]
    },
    {
      "url": "/api/v4/admin/clusters/add",
      "method": "addExistingKubernetesInstanceCluster",
      "httpMethod": "post",
      "tag": "clusters",
      "typeScriptTag": "clusters",
      "description": "Add existing instance cluster",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "NAME"
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": false,
          "description": "",
          "default": true
        },
        {
          "name": "environment_scope",
          "schema": "string",
          "required": false,
          "description": "",
          "default": "*"
        },
        {
          "name": "namespace_per_environment",
          "schema": "boolean",
          "required": false,
          "description": "",
          "default": true
        },
        {
          "name": "domain",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "management_project_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "managed",
          "schema": "boolean",
          "required": false,
          "description": "",
          "default": true
        },
        {
          "name": "platform_kubernetes_attributes[api_url]",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "PLATFORM_KUBERNETES_ATTRIBUTES[API_URL]"
        },
        {
          "name": "platform_kubernetes_attributes[token]",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "PLATFORM_KUBERNETES_ATTRIBUTES[TOKEN]"
        },
        {
          "name": "platform_kubernetes_attributes[ca_cert]",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "platform_kubernetes_attributes[namespace]",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "platform_kubernetes_attributes[authorization_type]",
          "schema": "string",
          "required": false,
          "description": "",
          "default": "rbac"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "API_Entities_Cluster model"
        }
      ]
    },
    {
      "url": "/api/v4/admin/clusters",
      "method": "listInstanceClusters",
      "httpMethod": "get",
      "tag": "clusters",
      "typeScriptTag": "clusters",
      "description": "List instance clusters",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v4/admin/migrations/{timestamp}/mark",
      "method": "markAsExecuted",
      "httpMethod": "post",
      "tag": "migrations",
      "typeScriptTag": "migrations",
      "description": "Mark the migration as successfully executed",
      "parameters": [
        {
          "name": "timestamp",
          "schema": "integer",
          "required": true,
          "description": "The migration version timestamp",
          "example": 0
        },
        {
          "name": "database",
          "schema": "string",
          "description": "",
          "default": "main"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v4/applications/{id}",
      "method": "deleteSpecificApplication",
      "httpMethod": "delete",
      "tag": "applications",
      "typeScriptTag": "applications",
      "description": "Delete an application",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the application (not the application_id)",
          "example": 0
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v4/applications",
      "method": "listAllRegistered",
      "httpMethod": "get",
      "tag": "applications",
      "typeScriptTag": "applications",
      "description": "Get applications",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v4/applications",
      "method": "createNewApplication",
      "httpMethod": "post",
      "tag": "applications",
      "typeScriptTag": "applications",
      "description": "Create a new application",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "NAME"
        },
        {
          "name": "redirect_uri",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "REDIRECT_URI"
        },
        {
          "name": "scopes",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "SCOPES"
        },
        {
          "name": "confidential",
          "schema": "boolean",
          "required": false,
          "description": "",
          "default": true
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_ApplicationWithSecret model"
        }
      ]
    },
    {
      "url": "/api/v4/avatar",
      "method": "getUrlForUser",
      "httpMethod": "get",
      "tag": "avatar",
      "typeScriptTag": "avatar",
      "description": "Return avatar url for a user",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": "Public email address of the user",
          "example": "EMAIL"
        },
        {
          "name": "size",
          "schema": "integer",
          "description": "Single pixel dimension for Gravatar images"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Avatar model"
        }
      ]
    },
    {
      "url": "/api/v4/broadcast_messages/{id}",
      "method": "deleteMessage",
      "httpMethod": "delete",
      "tag": "broadcast_messages",
      "typeScriptTag": "broadcastMessages",
      "description": "Delete a broadcast message",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Broadcast message ID",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_BroadcastMessage model"
        }
      ]
    },
    {
      "url": "/api/v4/broadcast_messages/{id}",
      "method": "getSpecificMessage",
      "httpMethod": "get",
      "tag": "broadcast_messages",
      "typeScriptTag": "broadcastMessages",
      "description": "Get a specific broadcast message",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Broadcast message ID",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_BroadcastMessage model"
        }
      ]
    },
    {
      "url": "/api/v4/broadcast_messages/{id}",
      "method": "updateMessage",
      "httpMethod": "put",
      "tag": "broadcast_messages",
      "typeScriptTag": "broadcastMessages",
      "description": "Update a broadcast message",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Broadcast message ID",
          "example": 0
        },
        {
          "name": "message",
          "schema": "string",
          "description": ""
        },
        {
          "name": "starts_at",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ends_at",
          "schema": "string",
          "description": ""
        },
        {
          "name": "color",
          "schema": "string",
          "description": ""
        },
        {
          "name": "font",
          "schema": "string",
          "description": ""
        },
        {
          "name": "target_access_levels",
          "schema": "array",
          "description": ""
        },
        {
          "name": "target_path",
          "schema": "string",
          "description": ""
        },
        {
          "name": "broadcast_type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dismissable",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_BroadcastMessage model"
        }
      ]
    },
    {
      "url": "/api/v4/broadcast_messages",
      "method": "listAll",
      "httpMethod": "get",
      "tag": "broadcast_messages",
      "typeScriptTag": "broadcastMessages",
      "description": "Get all broadcast messages",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "Current page number",
          "default": 1
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "Number of items per page",
          "default": 20
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_BroadcastMessage model"
        }
      ]
    },
    {
      "url": "/api/v4/broadcast_messages",
      "method": "createMessage",
      "httpMethod": "post",
      "tag": "broadcast_messages",
      "typeScriptTag": "broadcastMessages",
      "description": "Create a broadcast message",
      "parameters": [
        {
          "name": "message",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "MESSAGE"
        },
        {
          "name": "starts_at",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ends_at",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "color",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "font",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "target_access_levels",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "target_path",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "broadcast_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "dismissable",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "API_Entities_BroadcastMessage model"
        }
      ]
    },
    {
      "url": "/api/v4/bulk_imports/{import_id}/entities/{entity_id}",
      "method": "getEntityDetails",
      "httpMethod": "get",
      "tag": "bulk_imports",
      "typeScriptTag": "bulkImports",
      "description": "Get GitLab Migration entity details",
      "parameters": [
        {
          "name": "importId",
          "schema": "integer",
          "required": true,
          "description": "The ID of user's GitLab Migration",
          "example": 0
        },
        {
          "name": "entityId",
          "schema": "integer",
          "required": true,
          "description": "The ID of GitLab Migration entity",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_BulkImports model"
        }
      ]
    },
    {
      "url": "/api/v4/bulk_imports/{import_id}/entities",
      "method": "listEntities",
      "httpMethod": "get",
      "tag": "bulk_imports",
      "typeScriptTag": "bulkImports",
      "description": "List GitLab Migration entities",
      "parameters": [
        {
          "name": "importId",
          "schema": "integer",
          "required": true,
          "description": "The ID of user's GitLab Migration",
          "example": 0
        },
        {
          "name": "status",
          "schema": "string",
          "description": "Return import entities with specified status"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "Current page number",
          "default": 1
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "Number of items per page",
          "default": 20
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v4/bulk_imports/{import_id}",
      "method": "getMigrationDetails",
      "httpMethod": "get",
      "tag": "bulk_imports",
      "typeScriptTag": "bulkImports",
      "description": "Get GitLab Migration details",
      "parameters": [
        {
          "name": "importId",
          "schema": "integer",
          "required": true,
          "description": "The ID of user's GitLab Migration",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_BulkImport model"
        }
      ]
    },
    {
      "url": "/api/v4/bulk_imports/entities",
      "method": "listEntities",
      "httpMethod": "get",
      "tag": "bulk_imports",
      "typeScriptTag": "bulkImports",
      "description": "List all GitLab Migrations' entities",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "Current page number",
          "default": 1
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "Number of items per page",
          "default": 20
        },
        {
          "name": "sort",
          "schema": "string",
          "description": "Return GitLab Migrations sorted in created by `asc` or `desc` order.",
          "default": "desc"
        },
        {
          "name": "status",
          "schema": "string",
          "description": "Return all GitLab Migrations' entities with specified status"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v4/bulk_imports",
      "method": "listMigrations",
      "httpMethod": "get",
      "tag": "bulk_imports",
      "typeScriptTag": "bulkImports",
      "description": "List all GitLab Migrations",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "Current page number",
          "default": 1
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "Number of items per page",
          "default": 20
        },
        {
          "name": "sort",
          "schema": "string",
          "description": "Return GitLab Migrations sorted in created by `asc` or `desc` order.",
          "default": "desc"
        },
        {
          "name": "status",
          "schema": "string",
          "description": "Return GitLab Migrations with specified status"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v4/bulk_imports",
      "method": "startNewMigration",
      "httpMethod": "post",
      "tag": "bulk_imports",
      "typeScriptTag": "bulkImports",
      "description": "Start a new GitLab Migration",
      "parameters": [
        {
          "name": "configuration[url]",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "CONFIGURATION[URL]"
        },
        {
          "name": "configuration[access_token]",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "CONFIGURATION[ACCESS_TOKEN]"
        },
        {
          "name": "entities[source_type]",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "entities[source_full_path]",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "entities[destination_namespace]",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "entities[destination_slug]",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "entities[destination_name]",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "entities[migrate_projects]",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_BulkImport model"
        }
      ]
    },
    {
      "url": "/api/v4/application/appearance",
      "method": "getCurrentAppearance",
      "httpMethod": "get",
      "tag": "application",
      "typeScriptTag": "application",
      "description": "Get the current appearance",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Appearance model"
        }
      ]
    },
    {
      "url": "/api/v4/application/appearance",
      "method": "modifyAppearance",
      "httpMethod": "put",
      "tag": "application",
      "typeScriptTag": "application",
      "description": "Modify appearance",
      "parameters": [
        {
          "name": "title",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "pwa_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "pwa_short_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "pwa_description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "logo",
          "schema": "string",
          "description": ""
        },
        {
          "name": "pwa_icon",
          "schema": "string",
          "description": ""
        },
        {
          "name": "header_logo",
          "schema": "string",
          "description": ""
        },
        {
          "name": "favicon",
          "schema": "string",
          "description": ""
        },
        {
          "name": "new_project_guidelines",
          "schema": "string",
          "description": ""
        },
        {
          "name": "profile_image_guidelines",
          "schema": "string",
          "description": ""
        },
        {
          "name": "header_message",
          "schema": "string",
          "description": ""
        },
        {
          "name": "footer_message",
          "schema": "string",
          "description": ""
        },
        {
          "name": "message_background_color",
          "schema": "string",
          "description": ""
        },
        {
          "name": "message_font_color",
          "schema": "string",
          "description": ""
        },
        {
          "name": "email_header_and_footer_enabled",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Appearance model"
        }
      ]
    },
    {
      "url": "/api/v4/application/plan_limits",
      "method": "getCurrentLimits",
      "httpMethod": "get",
      "tag": "plan_limits",
      "typeScriptTag": "planLimits",
      "description": "Get current plan limits",
      "parameters": [
        {
          "name": "planName",
          "schema": "string",
          "description": "Name of the plan to get the limits from. Default: default.",
          "default": "default"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_PlanLimit model"
        }
      ]
    },
    {
      "url": "/api/v4/application/plan_limits",
      "method": "modifyLimits",
      "httpMethod": "put",
      "tag": "plan_limits",
      "typeScriptTag": "planLimits",
      "description": "Change plan limits",
      "parameters": [
        {
          "name": "plan_name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "PLAN_NAME"
        },
        {
          "name": "ci_pipeline_size",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "ci_active_jobs",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "ci_project_subscriptions",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "ci_pipeline_schedules",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "ci_needs_size_limit",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "ci_registered_group_runners",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "ci_registered_project_runners",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "conan_max_file_size",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "enforcement_limit",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "generic_packages_max_file_size",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "helm_max_file_size",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "maven_max_file_size",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "notification_limit",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "npm_max_file_size",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "nuget_max_file_size",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "pypi_max_file_size",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "terraform_module_max_file_size",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "storage_size_limit",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "pipeline_hierarchy_size",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_PlanLimit model"
        }
      ]
    },
    {
      "url": "/api/v4/metadata",
      "method": "getInformation",
      "httpMethod": "get",
      "tag": "metadata",
      "typeScriptTag": "metadata",
      "description": "Retrieve metadata information for this GitLab instance",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Metadata model"
        }
      ]
    },
    {
      "url": "/api/v4/version",
      "method": "getVersionInformation",
      "httpMethod": "get",
      "tag": "metadata",
      "typeScriptTag": "metadata",
      "description": "Retrieves version information for the GitLab instance",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Metadata model"
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/jobs",
      "method": "listForProject",
      "httpMethod": "get",
      "tag": "jobs",
      "typeScriptTag": "jobs",
      "description": "List jobs for a project",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the project",
          "example": 0
        },
        {
          "name": "scope",
          "schema": "array",
          "required": false,
          "description": "Return all jobs with the specified statuses"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/jobs/{job_id}",
      "method": "getSingleById",
      "httpMethod": "get",
      "tag": "jobs",
      "typeScriptTag": "jobs",
      "description": "Get a single job by ID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the project",
          "example": 0
        },
        {
          "name": "jobId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the job",
          "example": 0
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API_Entities_Job model"
        }
      ]
    },
    {
      "url": "/api/v4/projects/{id}/jobs/{job_id}/play",
      "method": "runManualJob",
      "httpMethod": "post",
      "tag": "jobs",
      "typeScriptTag": "jobs",
      "description": "Run a manual job",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the project",
          "example": 0
        },
        {
          "name": "jobId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the manual job to run",
          "example": 0
        },
        {
          "name": "jobVariablesAttributes",
          "schema": "array",
          "required": false,
          "description": "An array containing the custom variables available to the job"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Job started successfully"
        }
      ]
    }
  ],
  "repositoryDescription": "GitLab is a complete DevOps platform, delivered as a single application, that provides teams a way to collaborate, build, and deploy their software. With GitLab, you can automate the entire DevOps lifecycle from planning and creating code to testing, releasing, and monitoring applications.",
  "logo": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/gitlab/logo.png",
  "openApiRaw": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/gitlab/openapi.yaml",
  "openApiGitHubUi": "https://github.com/konfig-sdks/openapi-examples/tree/HEAD/gitlab/openapi.yaml",
  "previewLinkImage": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/gitlab/imagePreview.png",
  "faviconUrl": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/gitlab/favicon.png",
  "clientNameCamelCase": "gitLab",
  "lastUpdated": "2024-03-13T02:25:22.175Z",
  "typescriptSdkUsageCode": "import { GitLab } from 'git-lab-typescript-sdk';\n\nconst gitLab = new GitLab({\n    apiKeyAuth: \"PRIVATE_TOKEN\",\n})",
  "typescriptSdkFirstRequestCode": "// Removes a badge from the group.\nconst removeFromGroupResponse = gitLab.badges.removeFromGroup({\n    id: \"ID\"\n    badgeId: 0\n})",
  "fixedSpecFileName": "git-lab-fixed-spec.yaml"
}