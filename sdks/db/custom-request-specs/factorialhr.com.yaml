openapi: 3.0.0
info:
  title: Factorial API
  description: >-
    Open Api Specifications available at
    [https://github.com/factorialco/oas](https://github.com/factorialco/oasLooking)


    Guides and support available at
    [https://help.factorialhr.com/integrations](https://help.factorialhr.com/integrations)


    # Authentication


    The public API provides two methods of authentication, ApiKeys and OAuth2.
    The following sections provide information regarding each one and their
    intent.


    ## OAuth2


    > OAuth2 is used to identify individual users, not applications or
    platforms.


    OAuth2 is available for authenticating to the public API and making requests
    via third parties **on behalf of a user**. All actions are authored on
    behalf of the user that creates the token. This means the intent is to be
    used mainly to do submit actions the actual user is performing on an
    alternative interface.


    To generate a token you will require opening an authorization dialog that
    returns a code, this code can then be exchanged for a token.


    ### Configuration


    In order to create an OAuth application, you must be an admin, head over to
    your [personal repository of OAuth
    applications](https://api.factorialhr.com/oauth/applications), click on `New
    application` and follow the creation process.


    The Factorial API enforces the same permissions at the user level than the
    Factorial web application. This means that Factorial API users will only be
    able to perform the same actions they are allowed to do in the Factorial
    platform.


    Next step will be to generate the Authorization Code you will need in order
    to generate an OAuth2 Token.


    ### OAuth2 Code Generation


    Should be generated via browser by opening the following url. The user
    should be already logged in to Factorial beforehand.


    `https://api.factorialhr.com/oauth/authorize?client_id=&redirect_uri=&response_type=code&scope=`


    YOUR_CLIENT_ID: OAuth2 Application Id

    REDIRECT_URI: OAuth2 Redirect URL


    #### State Parameter


    An optional query parameter called `state` can be added to the code
    generation url. Any string can be used and will be sent on the callback url.


    > Authorization protocols provide a `state` parameter that allows you to
    restore the previous state of your application. The `state` parameter
    preserves some state objects set by the client in the Authorization request
    and makes it available to the client in the response.


    ### OAuth2 Token Generation


    Once you have the authorization code, you can request their access token to
    Factorial.


    `curl -X POST 'https://api.factorialhr.com/oauth/token' -d
    'client_id=&client_secret=&code=&grant_type=authorization_code&redirect_uri='`


    YOUR_CLIENT_ID: OAuth2 Application Id

    YOUR_CLIENT_SECRET: OAuth2 Application Secret

    AUTHORIZATION_CODE: OAuth2 CODE

    REDIRECT_URI: OAuth2 Redirect URL


    > You can generate only one OAuth2 token per Code, that means that if you
    want to generate a new token for a Code that already have one you should
    refresh your token.


    Every time a new token is generated a refresh token is generated as well, so
    that you can use it on the OAuth2 Refresh Token, and an expire date is also
    provided.


    ### OAuth2 Refresh Token


    You can generate a new token under the same Code with a new expire date (you
    can do it as many times as you need). A refresh token is also returned here
    so that you can use it on the OAuth2 Refresh Token again.


    `curl -X POST 'https://api.factorialhr.com/oauth/token' -d
    'client_id=&client_secret=&refresh_token=&grant_type=refresh_token'`


    YOUR_CLIENT_ID: OAuth2 Application Id

    YOUR_CLIENT_SECRET: OAuth2 Application Secret

    REFRESH_TOKEN: OAuth2 Refresh Token


    ### OAuth2 Revoke Token


    You can revoke an access/refresh token if you do not want it to be active
    anylonger. This can happen in cases where you have refreshed your token and
    would like to revoke the previous token if you haven't used the new token
    yet, as using the new token automatically revokes the previous one.


    `curl -X POST 'https://api.factorialhr.com/oauth/revoke' -d
    'client_id=&client_secret=&token='`


    YOUR_CLIENT_ID: OAuth2 Application Id

    YOUR_CLIENT_SECRET: OAuth2 Application Secret

    TOKEN: OAuth2 Access/Refresh Token (whichever you wish to revoke)


    ### OAuth2 Token Usage


    The generated token is the credential for performing authenticated requests
    to Factorial. This token should be included in the Authorization header
    prefixed with the word Bearer and a separating space.

    As an example, if your token is `12345` then the header content should be
    `Bearer 12345`.


    ### Maintaining a persistent connection


    To maintain a persistent connection, you should not let the token expire.
    You can avoid this by simply refreshing your token before the expiration
    date. This will give you another token with a new expiration date, before
    that token expires you should refresh it again, and so on...

    If you want to do this automatically, you should provide something in your
    code that will help you perform the update every time the token expires.
    Otherwise, you would have to do the update manually and make sure you
    refresh your token before the expiration date to maintain the connection.


    ## ApiKeys


    > API keys are used to identify systems, not the individual users that
    access.


    ApiKeys have **TOTAL ACCESS** to everything and never expire. Its the
    creators responsibility to generate them and store them securely.


    ### Generation


    In the `Core>Keys` section of this documentation you can access the apis for
    managing this resource.


    ### Usage


    ApiKeys are a single string of symbols that must be added as a custom header
    on the request. The header name must be `x-api-key` and the key must be the
    value without any prefixes.


    ### Disclaimer


    ApiKey management require full admin permissions as the resource itself
    allows for full admin access to the entire platform on behalf of the company
    and not of a user, therefore any operations are not linked to any user in
    particular.


    # Development


    ## SDKs


    Coming soon


    ## Sandbox


    A sandbox/demo environment is available for testing integrations via public
    API calls. Developers can request provisioning with full access to a demo
    company where to test code before actually interacting with a production
    environment.


    Contact your account manager or account executive to request this
    environment and get OAuth2 credentials for generating tokens.


    Note: the domain for sandbox is different than that from production. Sandbox
    base domain is `http://api.demo.factorialhr.com`


    ## Postman


    Click the "Run in Postman" button to open the full list of endpoints on your
    Postman workspace as a Postman Collection.

    Inside the collection lookout for the Collection's Variables, configure your
    variables accordingly.


    ### Delegating Token Generation To Postman


    Coming soon


    # Changelog


    Coming soon


    # How to...


    ## Custom Fields


    Custom fields are useful when you want to add some fields that are not the
    default ones, to every employee of the company.


    For that, you have to create via Factorial App the base custom field in
    order to have all the employees with it. That option is available in
    customization, inside the company menu


    Once you have that, via API, you can [Create a value for a custom
    field](https://apidoc.factorialhr.com/#72f3f786-e37d-4e80-ada2-0beedd03b171)
    to each employee. You should know the custom field id in order to make that,
    you can check it by [getting a collection of custom
    fields](https://apidoc.factorialhr.com/#f98dae5a-a8d0-474e-a181-7e9603409b42)
  version: 1.0.0
x-readme:
  proxy-enabled: false
  explorer-enabled: true
servers:
  - url: https://api.factorialhr.com/api
  - url: https://api.demo.factorial.dev/api
security:
  - oauth2: []
tags:
  - name: Ats > Job Postings
    description: |-
      > ###### **What does it do?**
      > Used for managing ATS Job Postings
      > ###### **Is it related to other entities?**
      > Once a job posting is created candidates can apply for it.
      > ###### **Who can use it?**
      > It is scoped to the user credentials and company of that user
  - name: Ats > Candidates
    description: |-
      > ###### **What does it do?**
      > Used for managing ATS Candidates
      > ###### **Is it related to other entities?**
      > Candidates are going to be able to apply for job postings.
      > ###### **Who can use it?**
      > It is scoped to the user credentials and company of that user
  - name: Ats > Applications
    description: >-
      > ###### **What does it do?**

      > This endpoint allows a consumer to create and store Ats Applications in
      Factorial

      > ###### **Is it related to other entities?**

      > Applications are related wiht job postings and candidates

      > ###### **Who can use it?**

      > It is scoped to the user credentials and company of that user
  - name: Ats > Messages
    description: |-
      > ###### **What does it do?**
      > These endpoints allows to manage Ats Messages
      > ###### **Is it related to other entities?**
      > Messages are related wiht applications, job postings and candidates
      > ###### **Who can use it?**
      > It is scoped to the user credentials and company of that user
  - name: Core > Employees > V1
    description: >-
      > ###### **What does it do?**

      > Used for managing employees' information.

      > ###### **Is it related to other entities?**

      > This version contains employees information and also those that are
      related to the employee such as contracts. So it is data intensive, hard
      to maintain and not very efficient. This is addressed in version [V2]

      > ###### **Who can use it?**

      > Only\_`admins`\_can see all the employees' information,\_`regular
      users`\_will get a restricted version of the payload as a response based
      on the permission set by the admin
  - name: Core > Employees > V2
    description: >-
      > ###### **What does it do?**

      > Used for managing employees' information.

      > ###### **Is it related to other entities?**

      > This version contains strictly employees information. Hence it is not
      data intensive and easy to work with. We recommend using this version as
      V1 will be deprecated with time.

      > ###### **Who can use it?**

      > Only\_`admins`\_can see all the employees' information,\_`regular
      users`\_will get a restricted version of the payload as a response based
      on the permission set by the admin
  - name: Core > Webhooks
    description: >-
      > ### 📘

      >

      > "Knock knock on X outside Factorial when Y happens inside Factorial"


      > ### 🚧 Usage

      >

      > Webhooks can be used directly or via intermediary platforms or services.
      Using them directly requires technical knowledge.


      ## Factorial Webhooks


      > ### 🚧 URL

      >

      > The same URL can be used to get notifications for all events or
      different ones per event. Notice that if the same url for receiving
      notifications is used for all events, then distinguishing an event from
      another might be an issue.


      When an event happens inside Factorial, a POST request will be triggered
      to the associated event URL. If the request fails for any given reason, a
      retry will be performed shortly after.


      ## Payload


      Payloads per hook vary. The common factor will always be the id field for
      the related resource that triggered the webhook. Implementations should
      avoid relying on other fields.
  - name: Core > Webhooks > V2
  - name: Custom Fields > V2
    description: >-
      > ###### **What does it do?**


      > These endpoints will allow you to retrieve Custom Fields, get the values
      and create new ones.


      > ###### **Is it related to other entities?**


      > Custom Fields could be relateed to different field groups.


      > ###### **Who can use it?**


      >Everyone can use Custom Fields
  - name: Core > Files
  - name: Core > Files > Documents
    description: >-
      ###### **What does it do?**


      These endpoints will allow you to create, update, retrieve or delete
      documents for the company or an employee. You are also going to be able to
      request e-signatures from employees


      ###### **Is it related to other entities?**


      Documents are going to be created under you company, but also can be
      assign to an employee.


      ###### **Who can use it?**


      Only admins are able to create documents.
  - name: Core > Files > Folders
    description: >-
      ###### **What does it do?**


      These endpoints will allow you to create, update or retrieve folders


      ###### **Is it related to other entities?**


      Once you create folder you are going to be able to store documents inside
      them.


      ###### **Who can use it?**


      Everyone can create folders
  - name: Core > Locations
    description: |-
      ###### **What does it do?**

      These endpoints will allow you retrieve all locations or only one by ID

      ###### **Is it related to other entities?**

      It is related to the CompanyHolidays entity

      ###### **Who can use it?**

      Everyone can fetch locations
  - name: Core > Workplaces > V2
    description: >-
      ###### **What does it do?**


      These endpoints will allow you retrieve create, update, delete or retrieve
      workplaces for a company


      ###### **Is it related to other entities?**


      It is related to the CompanyHolidays entity


      ###### **Who can use it?**


      Only admins are able to manage workplaces
  - name: Core > Holidays
    description: |-
      > ###### **What does it do?**

      > These endpoints will allow you to retrieve Company Holidays

      > ###### **Is it related to other entities?**

      > Company holidays are going to be assign to employees.

      > ###### **Who can use it?**

      >Everyone can see company holidays
  - name: Core > Tasks
    description: >-
      > ###### **What does it do?**


      > These endpoints will allow you to create, update, retrieve or delete
      tasks


      > ###### **Is it related to other entities?**


      > Tasks entities are related to TaskFile entities.


      > ###### **Who can use it?**


      > Only admins are able to manage tasks
  - name: Core > Legal Entities
    description: |-
      > ###### **What does it do?**

      > These endpoints will allow you to retrieve Legal entities.

      > ###### **Is it related to other entities?**

      > Legal entities are related to the Company entity.
      > ###### **Who can use it?**
      > Admins can only use legal entities.
  - name: Core > Keys
    description: "> API keys are used to identify systems, not the individual users that access.\n\nKeys give total access to the Factorial platform and the operations performed with such are not linked/associated to any user in particular. Therefore their management and storage must be done with extreme caution.\n\nUnlike OAuth2 tokens, Keys dont have a TTL and therefore dont require regenerating the key. As long as the key is not deleted, it will keep working indefinitly.\n\nFor security reasons, when creating a key the code that is generated will only be displayed on the response of the creation. Administrators should copy and safely store such Key as it cant be recovered later. Listing keys will only show a hashed version of the key.\n\n### Usage\n\nApiKeys are a single string of symbols that must be added as a custom header on the request. The header name must be\_`x-api-key`\_and the key must be the value without any prefixes.\n\nIf a request is received with both oauth token and apikey, the api key will overrule the oauth as it has broader permissions.\n\n### Disclaimer\n\nApiKey management require full admin permissions as the resource itself allows for full admin access to the entire platform on behalf of the company and not of a user."
  - name: Core > Custom Fields
    description: >-
      > ###### **What does it do?**


      > These endpoints will allow you to retrieve Custom Fields, get the values
      and create new ones.


      > ###### **Is it related to other entities?**


      > Custom Fields could be relateed to different field groups.


      > ###### **Who can use it?**


      >Everyone can use Custom Fields
  - name: Core > Posts
    description: >-
      > ###### **What does it do?**


      > These endpoints will allow you to create, update, retrieve or delete
      Posts


      > ###### **Is it related to other entities?**


      > Once you create posts you are going to be able to add comments to it


      > ###### **Who can use it?**

      > Everyone can use Posts
  - name: Core > Teams
    description: >-
      > ###### **What does it do?**


      > These endpoints will allow you to create, update, retrieve or delete
      teams


      > ###### **Is it related to other entities?**


      > Once you create teams you are going to be able to assign employees to
      that teams.


      > ###### **Who can use it?**

      > Only admins are able to manage team
  - name: Core > Bulk
    description: >-
      > ###### **What does it do?**


      > These endpoints will allow you to retrieve employees and attendance in
      bulk


      > ###### **Is it related to other entities?**


      > It is realted to employees and attendance.

      > ###### **Who can use it?**


      > Only\_`admins`\_can see all the information,\_`regular users`\_will get
      a restricted version of the payload as a response based on the permission
      set by the admin
  - name: Core > Custom Tables
    description: >-
      > ###### **What does it do?**


      > These endpoints will allow you to manage Custom tables and it's values.
      Custom tables are a way to store custom data in a table format. It is a
      way to create your own data base to store data and associate that data to
      existing entities at Factorial.


      > ###### **Is it related to other entities?**


      > Custom tables are related to employees and company

      > ###### **Who can use it?**


      > Only\_`admins`\_can see all the information,\_`regular users`\_will get
      a restricted version of the payload as a response based on the permission
      set by the admin
  - name: Core > Events
    description: >-
      > ###### **What does it do?**


      > The Factorial Platform generates events for many operations. This
      endpoint provides the way of retrieving all events triggered. Whenever
      possible, the ID of the associated resource will be present, else null.


      > ###### **Is it related to other entities?**


      > Events can be related to any resource.


      > ###### **Who can use it?**


      > Audit Logs must be enabled on account and the request must be performed
      with administrative permissions.
  - name: Payroll > Family Situations
    description: >-
      > ###### **What does it do?**


      > This endpoint will allow FR market to manage family situations.You can
      assign new family situations to employees, update existing ones or just
      finding the family situation for an employee.


      > ###### **Is it related to other entities?**


      > Every family situation is related to an employee.


      > ###### **Who can use it?**


      > Every user with permissions to see create and update employee's personal
      info
  - name: Payroll > Contracts
    description: >-
      > ###### **What does it do?**


      > This endpoint will allow you to create, update delete or retrieve
      contract versions for employees.
        Contracts effective date can be from the past and also in the future


      > ###### **Is it related to other entities?**


      > Every contract version is associated with an employee.


      > ###### **Who can use it?**


      > Only admin users are able to manage contract versions
  - name: Payroll > Supplements
    description: >-
      > ###### **What does it do?**


      > This endpoint will allow you to create, update delete or retrieve
      supplements for employees.


      > ###### **Is it related to other entities?**


      > Every supplement is associated with an employee.


      > ###### **Who can use it?**


      > Only admin users are able to manage supplements
  - name: Payroll > Additional Compensations
    description: >-
      > ###### **What does it do?**


      > This endpoint will allow you to create, update delete or retrieve
      additional compensations for contract.


      > ###### **Is it related to other entities?**


      > Every compensation is associated with a contract.


      > ###### **Who can use it?**

      > Depending on permissions users are gonna be able to see, create, update
      and destroy compensations
  - name: Payroll Integrations > Codes
    description: |-
      > ###### **What does it do?**
      > Used for managing Payroll Integrations Codes
      > ###### **Is it related to other entities?**
      > You can retrieve Employee as well as PayrollIntegrationsCode objects.
      > ###### **Who can use it?**
      > TODO
  - name: Payroll > Taxonomies
    description: >-
      > ###### **What does it do?**

      > This endpoint will allow you to create, update delete or retrieve
      taxonomies.


      > ###### **Is it related to other entities?**


      > Every taxonomy is associated with a legal entity.


      > ###### **Who can use it?**

      > Depending on permissions users are gonna be able to see, create, update
      and destroy taxonomy
  - name: Time > Attendance > V1
    description: >-
      ###### **What does it do?**


      These endpoints will allow you to manage all shifts (time registries).
      From a single clock in and clock out , to getting all the shifts from the
      company.


      ###### **Is it related to other entities?**


      Shifts (time registries) are going to be always related to the employees.


      ###### **Who can use it?**


      Only admin users are able to get the shifts from all employees. Regular
      users will get a restricted version of the response based on the
      permission they have. Everyone is going to be able to clock in/clock out
      for themselves.
  - name: Time > Attendance > V2
    description: >-
      ###### **What does it do?**


      These endpoints will allow you to manage Attendance for your company.


      ###### **Is it related to other entities?**


      Attendance is going to be always related to the employees.


      ###### **Who can use it?**


      Only admin users are able to get attendances from all employees. Regular
      users will get a restricted version of the response based on the
      permission they have. Everyone is going to be able to create an attendance
      for themselves.
  - name: Time > Leaves > V1
    description: >-
      ###### **What does it do?**


      These endpoints will allow you to create, update, retrieve or delete
      leaves for employees.


      ###### **Is it related to other entities?**


      When creating a leave it should be associated to an employee and also a
      leave type must be selected, otherwise a default leave type is going to be
      applied.


      ###### **Who can use it?**


      Everyone are able to create leaves for themselves. Admin are able to
      create leaves for any employee as well.
  - name: Time > Leaves > V2
    description: >-
      ###### **What does it do?**


      These endpoints will allow you to create, update, retrieve or delete
      leaves for employees.


      ###### **Is it related to other entities?**


      When creating a leave it should be associated to an employee and also a
      leave type must be selected, otherwise a default leave type is going to be
      applied.


      ###### **Who can use it?**


      Everyone are able to create leaves for themselves. Admin are able to
      create leaves for any employee as well.
  - name: Time > Timeoff Policies
    description: |-
      ###### **What does it do?**

      These endpoints will allow you retrieve timeoff policies for a company.

      ###### **Is it related to other entities?**
      Timeoff policies are related to leaves
      ###### **Who can use it?**
      Everyone are able to retrieve time off policies.
  - name: Time > Leave Types
    description: >-
      ###### **What does it do?**


      This endpoint will allow you to create, update or retrieve custom leave
      types.


      ###### **Is it related to other entities?**


      Leave types are related to Leaves endpoints. Once you created your custom
      leave type you are going to be able to select it while creating a new
      leave for an employee.


      ###### **Who can use it?**


      Only admins are able to create custom leave types.
  - name: Time > Shift Management
    description: >-
      ###### **What does it do?**


      These endpoints will allow you to manage to shifts.


      ###### **Is it related to other entities?**


      Shifts are always related to an employee


      ###### **Who can use it?**


      Only admin users are able to get shifts from all employees. Regular users
      will get a restricted version of the response based on the permission they
      have.
  - name: Time > Breaks
    description: >-
      ###### **What does it do?**


      These endpoints will allow you to start and end breaks.


      ###### **Is it related to other entities?**


      Breaks are always related to an employee


      ###### **Who can use it?**


      Only employees are allowed to manage breaks for themselves (Only OAuth2
      supported)
  - name: Time > Breaks Configurations For Dates
    description: >-
      ###### **What does it do?**


      This endpoint will allow you to list Break Configurations for a range of
      dates. It's needed it for creating paid/custom break types using the
      public API.


      ###### **Is it related to other entities?**


      Breaks Configurations For Dates is related to Breaks and Employees


      ###### **Who can use it?**


      Only employees are allowed to manage for themselves (Only OAuth2
      supported)
  - name: Finance > Expenses
    description: >-
      ###### **What does it do?**


      These endpoints will allow you to get all expenses from a company


      ###### **Is it related to other entities?**


      Expenses are always related to an employee


      ###### **Who can use it?**


      Only employees are allowed to manage expenses for themselves but depending
      on their permissions they can see all company expenses (Only OAuth2
      supported)
paths:
  /v1/employees:
    get:
      tags:
        - Core > Employees > V1
      summary: Get employees from a company
      security:
        - oauth2: []
        - apikey: []
      description: >-
        Only `admins` can see all the employees' information, `regular users`
        will get a restricted version of the payload as a response based on the
        permission set by the admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
    post:
      tags:
        - Core > Employees > V1
      summary: Create employee
      description: Create employee
      security:
        - oauth2: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - first_name
                - last_name
              properties:
                email:
                  type: string
                  example: bob_stone@factorial.co
                first_name:
                  type: string
                  example: Bob
                last_name:
                  type: string
                  example: Stone
                birthday_on:
                  type: string
                  example: '2000-01-08'
                start_date:
                  type: string
                  example: '2022-01-08'
                regular_access_starts_on:
                  type: string
                  example: '2022-01-08'
                manager_id:
                  type: integer
                  example: 5
                role:
                  type: string
                  example: basic
                  enum:
                    - basic
                    - admin
                timeoff_manager_id:
                  type: integer
                  example: 5
                terminated_on:
                  type: string
                  example: '2022-01-08'
                termination_reason:
                  type: string
                  example: behaviour
                company_identifier:
                  type: string
                  example: 124ABC
                phone_number:
                  type: string
                  example: '622564089'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
  /v1/employees/{id}:
    get:
      tags:
        - Core > Employees > V1
      summary: Get employee
      description: >-
        Only admins can see all the employees' information, regular users will
        get a restricted version of the payload as a response based on the
        permission set by the admin
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
    put:
      tags:
        - Core > Employees > V1
      summary: Update employee
      description: Update employee
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: Bob
                last_name:
                  type: string
                  example: Stone
                manager_id:
                  type: integer
                  example: 5
                role:
                  type: string
                  example: basic
                  enum:
                    - basic
                    - admin
                timeoff_manager_id:
                  type: integer
                  example: 5
                company_identifier:
                  type: string
                  example: 124ABC
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
  /v1/employees/{id}/terminate:
    post:
      tags:
        - Core > Employees > V1
      summary: Terminate employee
      description: Terminate employee
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                terminated_on:
                  type: string
                  example: '1992-05-02'
                termination_reason:
                  type: string
                  example: Behaviour
                termination_assigned_manager_id:
                  type: integer
                  example: 5
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
  /v1/employees/{id}/unterminate:
    post:
      tags:
        - Core > Employees > V1
      summary: Unterminate employee
      description: Unterminate employee
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
  /v2/core/employees:
    get:
      tags:
        - Core > Employees > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Get employees from a company
      description: >-
        Only `admins` can see all the employees' information, `regular users`
        will get a restricted version of the payload as a response based on the
        permission set by the admin
      parameters:
        - name: full_text_name
          in: query
          schema:
            type: string
          description: Retrieves the list of employees by full names
          example: Bob Stone
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee_v2'
    post:
      tags:
        - Core > Employees > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Create employee
      description: Create employee
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - first_name
                - last_name
              properties:
                email:
                  type: string
                  example: bob_stone@factorial.co
                first_name:
                  type: string
                  example: Bob
                last_name:
                  type: string
                  example: Stone
                birthday_on:
                  type: string
                  example: '2000-01-08'
                role:
                  type: string
                  example: basic
                  enum:
                    - basic
                    - admin
                gender:
                  type: string
                  example: female
                  enum:
                    - male
                    - female
                identifier:
                  type: string
                  example: Y7729503E
                identifier_type:
                  type: string
                  example: nie
                  enum:
                    - dni
                    - nie
                    - passport
                nationality:
                  type: string
                  example: es
                bank_number:
                  type: string
                  example: ES09 4595 6109 8115 7760 8354
                country:
                  type: string
                  example: es
                city:
                  type: string
                  example: Barcelona
                state:
                  type: string
                  example: Barcelona
                postal_code:
                  type: string
                  example: '08007'
                address_line_1:
                  type: string
                  example: c/ Tallers 123
                address_line_2:
                  type: string
                  example: Atic 5
                swift_bic:
                  type: string
                  example: '1234567890'
                company_id:
                  type: integer
                  example: 5
                manager_id:
                  type: integer
                  example: 5
                location_id:
                  type: integer
                  example: 5
                timeoff_manager_id:
                  type: integer
                  example: 5
                legal_entity_id:
                  type: integer
                  example: 765
                company_identifier:
                  type: string
                  example: 124ABC
                phone_number:
                  type: string
                  example: '622564089'
                social_security_number:
                  type: string
                  example: '223948780514'
                tax_id:
                  type: string
                  example: '121232323'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee_v2'
  /v2/core/employees/{id}:
    get:
      tags:
        - Core > Employees > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Get employee
      description: >-
        Only admins can see all the employees' information, regular users will
        get a restricted version of the payload as a response based on the
        permission set by the admin
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee_v2'
    put:
      tags:
        - Core > Employees > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Update employee
      description: Update employee
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: bob_stone@factorial.co
                first_name:
                  type: string
                  example: Bob
                last_name:
                  type: string
                  example: Stone
                birthday_on:
                  type: string
                  example: '2000-01-08'
                role:
                  type: string
                  example: basic
                  enum:
                    - basic
                    - admin
                gender:
                  type: string
                  example: female
                  enum:
                    - male
                    - female
                identifier:
                  type: string
                  example: Y7729503E
                identifier_type:
                  type: string
                  example: nie
                  enum:
                    - dni
                    - nie
                    - passport
                nationality:
                  type: string
                  example: es
                bank_number:
                  type: string
                  example: ES09 4595 6109 8115 7760 8354
                country:
                  type: string
                  example: es
                city:
                  type: string
                  example: Barcelona
                state:
                  type: string
                  example: Barcelona
                postal_code:
                  type: string
                  example: '08007'
                address_line_1:
                  type: string
                  example: c/ Tallers 123
                address_line_2:
                  type: string
                  example: Atic 5
                swift_bic:
                  type: string
                  example: '1234567890'
                manager_id:
                  type: integer
                  example: 5
                location_id:
                  type: integer
                  example: 5
                timeoff_manager_id:
                  type: integer
                  example: 5
                phone_number:
                  type: string
                  example: '678901234'
                social_security_number:
                  type: integer
                  example: '223948780514'
                legal_entity_id:
                  type: integer
                  example: 235
                company_identifier:
                  type: string
                  example: 124ABC
                contact_name:
                  type: string
                  example: John
                contact_number:
                  type: string
                  example: '678901234'
                tax_id:
                  type: string
                  example: '121232323'
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee_v2'
  /v2/core/employees/{id}/invite:
    post:
      tags:
        - Core > Employees > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Invite employee
      description: >-
        When inviting an employee an email is sent to their email. You can
        resend the email as long as the employee has not accepted the invitation
        yet.
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee_v2'
  /v2/core/employees/{id}/email:
    put:
      tags:
        - Core > Employees > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Change employee email
      description: >-
        Changes the email only if the employee has not been confirmed and it
        does not exist another employee with the requested email.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: bob_stone1@factorial.co
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee_v2'
  /v2/core/employees/{id}/terminate:
    post:
      tags:
        - Core > Employees > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Terminate employee
      description: >-
        Set the termination date and other termination related parameters for an
        employee. The employee will finally terminate on the date provided.
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 5
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - terminated_on
              properties:
                terminated_on:
                  type: string
                  example: '2023-02-08'
                termination_reason:
                  type: string
                  example: a termination reason
                termination_reason_type:
                  type: string
                  enum:
                    - company
                    - employee
                    - others
                termination_assigned_manager_id:
                  type: integer
                  example: 5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee_v2'
  /v2/core/employees/{id}/unterminate:
    post:
      tags:
        - Core > Employees > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Unterminate employee
      description: Unterminate the employee
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee_v2'
  /v2/core/webhooks:
    get:
      tags:
        - Core > Webhooks > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Get a list of all subscribed webhooks for current user
      description: Get a list of all subscribed webhooks for current user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook_v2'
    post:
      tags:
        - Core > Webhooks > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Create a webhook
      description: >-
        > Creates a subscription for a determined webhook type. If webhook
        already exists, it just changes the target_url.

         ## Webhooks Types

        | **Subscription Type** | **Information** |

        | --- | --- |

        | Authentication::Events::AccessInvited | When creating a new employee,
        optionally you can send an invitation to create an account in Factorial.
        If you send an invitation, this event gets triggered. |

        | Employees::Events::EmployeeCreated | When creating a new employee,
        after submitting the form, this event gets triggered. |

        | Employees::Events::EmployeeUpdated| When updating personal protected
        employee information such has birthday, this event gets triggered. |

        | Employees::Events::EmployeeTerminated | When terminating an employee,
        after submitting the form, this event gets triggered |

        | Employees::Events::EmployeeUnterminated | When un terminating an
        employee, after submitting the form, this event gets triggered |

        | Attendance::Events::ClockIn | When the user clocks in and starts the
        timer, this event is triggered. |

        | Attendance::Events::ClockOut | When the user clocks out and stops the
        timer, this event is triggered |

        | Attendance::Events::AttendanceShiftCreated | When the user creates a
        shift, this event is triggered |

        | Attendance::Events::AttendanceShiftUpdated | When the user edits a
        shift, this event is triggered |

        | Attendance::Events::AttendanceShiftDeleted | When the user deletes a
        shift, this event is triggered |

        | Ats::Events::ApplicationCreated | When a candidate applies for a
        posting. |

        | Ats::Events::ApplicationUpdated | When a candidates application for a
        posting suffers changes. |

        | Ats::Events::JobPostingCreated | When a job posting is created. |

        | Ats::Events::JobPostingUpdated | When a job posting is updated. |

        | Ats::Events::JobPostingDeleted | When a job posting is deleted. |

        | Timeoff::Events::LeaveCreated | When a Timeoff Leave is created. |

        | Timeoff::Events::LeaveDestroyed | When a Timeoff Leave is destroyed. |

        | Timeoff::Events::LeaveUpdated | When a Timeoff Leave suffers any
        changes. |

        | Timeoff::Events::LeaveApproved | When a Timeoff Leave is explicitly
        approved. |

        | Timeoff::Events::LeaveRejected | When a Timeoff Leave is rejected. |

        | Documents::Events::Created | When a document is created. |

        | Tasks::Events::Created | When a task is created. |

        | Contracts::Events::ContractVersionCreated | When a contract version is
        created. |

        | Payroll::Events::SupplementCreated | When a payroll supplement is
        created. |

        | Payroll::Events::SupplementUpdated | When a payroll supplement is
        updated. |

        | Payroll::Events::SupplementDeleted | When a payroll supplement is
        deleted. |
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - subscription_type
                - target_url
              properties:
                subscription_type:
                  type: string
                  example: Employees::Events::EmployeeCreated
                target_url:
                  type: string
                  example: https://webhook.site/48103127-b1f6-3215-8f18-60fdbc013e3f
                name:
                  type: string
                  example: creating employee webhook
                challenge:
                  type: string
                  example: '9288376100399000'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook_v2'
  /v2/core/webhooks/{id}:
    put:
      tags:
        - Core > Webhooks > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Update a Webhook
      description: Update a Webook
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                target_url:
                  type: string
                  example: Employees::Events::EmployeeCreated
                name:
                  type: string
                  example: creating employee webhook
                challenge:
                  type: string
                  example: '9288376100399000'
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook_v2'
    delete:
      tags:
        - Core > Webhooks > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Delete a Webhook
      description: Delete a Webook
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook_v2'
  /v1/me:
    get:
      tags:
        - Core > Me
      summary: Get information about current user
      description: After token grant, get information of the token holder
      responses:
        '200':
          description: OK
  /v1/locations:
    get:
      tags:
        - Core > Locations
      security:
        - oauth2: []
        - apikey: []
      summary: Get all locations
      description: Get all locations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
  /v1/locations/{id}:
    get:
      tags:
        - Core > Locations
      security:
        - oauth2: []
        - apikey: []
      summary: Get a Location by ID
      description: Get a Location by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
  /v1/company_holidays:
    get:
      tags:
        - Core > Holidays
      security:
        - oauth2: []
        - apikey: []
      summary: Get all company holidays
      description: Get all company holidays
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompanyHoliday'
  /v1/company_holidays/{id}:
    get:
      tags:
        - Core > Holidays
      security:
        - oauth2: []
        - apikey: []
      summary: Get a company holiday by ID
      description: Get a company holiday by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyHoliday'
  /v1/core/teams:
    get:
      tags:
        - Core > Teams
      security:
        - oauth2: []
        - apikey: []
      summary: Get teams
      description: Get teams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
    post:
      tags:
        - Core > Teams
      security:
        - oauth2: []
        - apikey: []
      summary: Create a team
      description: Create a team with a given name
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: Management
                description:
                  type: string
                  example: Team description
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
  /v1/core/teams/{id}:
    get:
      tags:
        - Core > Teams
      security:
        - oauth2: []
        - apikey: []
      summary: Get a team by ID
      description: Get a team by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
    put:
      tags:
        - Core > Teams
      security:
        - oauth2: []
        - apikey: []
      summary: Update a team
      description: Update a team
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Management
                description:
                  type: string
                  example: Team description
                avatar:
                  type: string
                  example: >-
                    https://api.factorialhr.com/rails/active_storage/representations/redirect/bob.png
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    delete:
      tags:
        - Core > Teams
      security:
        - oauth2: []
        - apikey: []
      summary: Delete a team
      description: Delete a team
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
  /v1/core/teams/{id}/employees/{employee_id}:
    post:
      tags:
        - Core > Teams
      security:
        - oauth2: []
        - apikey: []
      summary: Assign an employee to a team
      description: Assign an employee to a team
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    put:
      tags:
        - Core > Teams
      security:
        - oauth2: []
        - apikey: []
      summary: Update an employee in a team
      description: Update an employee in a team
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                lead:
                  type: boolean
                  example: 'true'
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    delete:
      tags:
        - Core > Teams
      security:
        - oauth2: []
        - apikey: []
      summary: Unassign employee to team
      description: Unassign employee to team
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
  /v1/core/folders:
    get:
      tags:
        - Core > Files > Folders
      security:
        - oauth2: []
        - apikey: []
      summary: Get Folders
      description: Get Folders by given name and active status
      parameters:
        - name: name
          in: query
          schema:
            type: string
          description: Retrieves the list of folder by name
          example: payment
        - name: active
          in: query
          schema:
            type: boolean
          description: Retrieves the list of employees by active status
          example: 'true'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Folder'
    post:
      tags:
        - Core > Files > Folders
      security:
        - oauth2: []
        - apikey: []
      summary: Create a Folder
      description: Create a Folders with a given name and active status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: payment
                active:
                  type: boolean
                  example: 'true'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Folder'
  /v1/core/folders/{id}:
    get:
      tags:
        - Core > Files > Folders
      security:
        - oauth2: []
        - apikey: []
      summary: Get a Folder by ID
      description: Get a Folder by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
    put:
      tags:
        - Core > Files > Folders
      security:
        - oauth2: []
        - apikey: []
      summary: Update a folder
      description: Update a folder
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: payment
                active:
                  type: boolean
                  example: true
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
  /v1/core/documents:
    get:
      tags:
        - Core > Files > Documents
      security:
        - oauth2: []
        - apikey: []
      summary: Get a collection of Documents
      description: Get a collection of Documents given an employee or a folder
      parameters:
        - name: employee_id
          in: query
          schema:
            type: integer
          description: Retrieves the list of documents by employee id
          example: 1
        - name: folder_id
          in: query
          schema:
            type: integer
          description: Retrieves the list of documents by folder id
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
    post:
      tags:
        - Core > Files > Documents
      security:
        - oauth2: []
        - apikey: []
      summary: Create a Document
      description: Create a Document
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - filename
                - file
              properties:
                employee_id:
                  type: integer
                  example: 1
                folder_id:
                  type: integer
                  example: '1'
                request_esignature:
                  type: boolean
                  example: true
                filename:
                  type: string
                  example: payslip.pdf
                public:
                  type: boolean
                  example: true
                signees:
                  type: array
                  items:
                    type: integer
                    example: 1
                file:
                  type: string
                  format: binary
                  example: payslip.pdf
                is_pending_assignment:
                  type: boolean
                  example: false
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
  /v1/core/documents/{id}:
    get:
      tags:
        - Core > Files > Documents
      security:
        - oauth2: []
        - apikey: []
      summary: Get a Document by ID
      description: Get a Document by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
    put:
      tags:
        - Core > Files > Documents
      security:
        - oauth2: []
        - apikey: []
      summary: Update a Document by ID
      description: Update a Document by ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                public:
                  type: boolean
                  example: true
                employee_id:
                  type: integer
                  example: 1
                folder_id:
                  type: integer
                  example: 1
                request_esignature:
                  type: boolean
                  example: false
                signees:
                  type: array
                  items:
                    type: integer
                    example: 1
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
    delete:
      tags:
        - Core > Files > Documents
      security:
        - oauth2: []
        - apikey: []
      summary: Delete a Document by ID
      description: Delete a Document by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
  /v1/core/legal_entities:
    get:
      tags:
        - Core > Legal Entities
      security:
        - oauth2: []
        - apikey: []
      summary: Get a collection of Legal Entities
      description: Get a collection of Legal Entities
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LegalEntity'
  /v1/core/legal_entities/{id}:
    get:
      tags:
        - Core > Legal Entities
      security:
        - oauth2: []
        - apikey: []
      summary: Get a Legal Entity by ID
      description: Get a Legal Entity by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalEntity'
  /v1/core/keys:
    get:
      tags:
        - Core > Keys
      security:
        - oauth2: []
        - apikey: []
      summary: Get a collection of Keys
      description: Get a collection of Keys
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
    post:
      tags:
        - Core > Keys
      security:
        - oauth2: []
        - apikey: []
      summary: Create a Key
      description: Create a Key
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: 1
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyCreate'
  /v1/core/keys/{id}:
    delete:
      tags:
        - Core > Keys
      security:
        - oauth2: []
        - apikey: []
      summary: Delete an API Key by ID
      description: Delete an API Key by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
  /v1/core/tasks:
    get:
      tags:
        - Core > Tasks
      security:
        - oauth2: []
        - apikey: []
      summary: Get Tasks
      description: Get Tasks
      parameters:
        - name: assignee_id
          in: query
          schema:
            type: integer
          description: Retrieves the list of tasks by assignee
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      tags:
        - Core > Tasks
      security:
        - oauth2: []
        - apikey: []
      summary: Create a Task
      description: Create a Task
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: Upload information task
                due_on:
                  type: string
                  example: '2022-05-18'
                content:
                  type: string
                  example: >-
                    Update information due date to either following weekday or
                    following friday
                assignee_ids:
                  type: array
                  items:
                    type: integer
                    example: 3
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  /v1/core/tasks/{id}:
    get:
      tags:
        - Core > Tasks
      security:
        - oauth2: []
        - apikey: []
      summary: Get a Task by ID
      description: Get a Task by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    put:
      tags:
        - Core > Tasks
      security:
        - oauth2: []
        - apikey: []
      summary: Update a Task by ID
      description: Update a Task by ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                due_on:
                  type: string
                  example: '2022-05-18'
                name:
                  type: string
                  example: Upload information task
                content:
                  type: string
                  example: >-
                    Update information due date to either following weekday or
                    following friday
                assignee_ids:
                  type: array
                  items:
                    type: integer
                    example: 3
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    delete:
      tags:
        - Core > Tasks
      security:
        - oauth2: []
        - apikey: []
      summary: Delete a Task by ID
      description: Delete a Task by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  /v1/core/tasks/{id}/resolve:
    post:
      tags:
        - Core > Tasks
      security:
        - oauth2: []
        - apikey: []
      summary: Resolve Task by ID
      description: Resolve Task by ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                done:
                  type: boolean
                  example: true
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  /v1/core/tasks/{id}/copy:
    post:
      tags:
        - Core > Tasks
      security:
        - oauth2: []
        - apikey: []
      summary: Copy Task by ID
      description: Copy Task by ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Upload information task
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  /v1/core/tasks/{id}/files:
    get:
      tags:
        - Core > Tasks
      security:
        - oauth2: []
        - apikey: []
      summary: Get files from a Task
      description: Get files from a Task
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 15
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskFile'
    post:
      tags:
        - Core > Tasks
      security:
        - oauth2: []
        - apikey: []
      summary: Create a File in a Task
      description: Create a File in a Task
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  example: task_file.pdf
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 15
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  /v1/core/tasks/{task_id}/files/{id}:
    get:
      tags:
        - Core > Tasks
      security:
        - oauth2: []
        - apikey: []
      summary: Get a file from one Task
      description: Get files from one Task
      parameters:
        - name: task_id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 15
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskFile'
    post:
      tags:
        - Core > Tasks
      security:
        - oauth2: []
        - apikey: []
      summary: Delete a File in a Task
      description: Delete a File in a Task
      parameters:
        - name: task_id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 15
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskFile'
  /v1/time/shifts:
    get:
      tags:
        - Time > Attendance > V1
      security:
        - oauth2: []
        - apikey: []
      summary: Get shifts (time registries) from a company
      description: Get shifts (time registries) from a company
      parameters:
        - name: year
          in: query
          schema:
            type: string
          description: It should be valid year in the format `YYYY`
          example: '2022'
        - name: month
          in: query
          schema:
            type: string
          description: >-
            It should be valid month in the calendar ranging rom `01 to 12`. The
            month format is `MM`
          example: '11'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Shift'
  /v1/time/shifts/clock_in:
    post:
      tags:
        - Time > Attendance > V1
      security:
        - oauth2: []
        - apikey: []
      summary: Clock in
      description: >-
        Creates a shift (time registry) for the current user with the clock_in
        time of the request and nil clock_out
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - employee_id
                - now
              properties:
                employee_id:
                  type: integer
                  example: 5
                now:
                  type: string
                  example: '2019-01-01T12:12:01-02:00'
                observations:
                  type: string
                  example: New observation
                location_type:
                  type: string
                  example: office
                  enum:
                    - office
                    - business_trip
                    - work_from_home
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shift'
  /v1/time/shifts/clock_out:
    post:
      tags:
        - Time > Attendance > V1
      security:
        - oauth2: []
        - apikey: []
      summary: Clock out
      description: >-
        Updates a shift (time registry) for the current user with the clock_out
        time of the request. It will fail if the user wasn't previously clocked
        in.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - employee_id
                - now
              properties:
                employee_id:
                  type: integer
                  example: 5
                now:
                  type: string
                  example: '2019-01-01T12:12:01-02:00'
                observations:
                  type: string
                  example: Updated observation
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shift'
  /v1/time/shifts/toggle:
    post:
      tags:
        - Time > Attendance > V1
      security:
        - oauth2: []
        - apikey: []
      summary: Toggle
      description: >-
        Updates a shift (time registry) for the current user with the time of
        the request. It will clock out if the user wasn't previously clocked in.
        Else it will clock in.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - employee_id
                - now
              properties:
                employee_id:
                  type: integer
                  example: 5
                now:
                  type: string
                  example: '2019-01-01T12:12:01-02:00'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shift'
  /v1/time/shifts/{id}:
    put:
      tags:
        - Time > Attendance > V1
      security:
        - oauth2: []
        - apikey: []
      summary: Update Shift (time registry)
      description: Updates a shift (time registry).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - employee_id
                - now
              properties:
                clock_in:
                  type: string
                  example: '2019-01-01T12:12:01-02:00'
                clock_out:
                  type: string
                  example: '2019-01-01T12:12:01-02:00'
                observations:
                  type: string
                  example: First Shift
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 5
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shift'
    delete:
      tags:
        - Time > Attendance > V1
      security:
        - oauth2: []
        - apikey: []
      summary: Delete Shift (time registry)
      description: Delete Shift (time registry)
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shift'
  /v2/time/attendance:
    get:
      tags:
        - Time > Attendance > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Get attendance from a company
      description: Get attendance from a company
      parameters:
        - name: employee_ids[]
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Employees id array
          example:
            - 1
        - name: date_from
          in: query
          schema:
            type: string
          description: It should be a valid date following the format YYYY-MM-DD
          example: '2023-01-03'
        - name: date_to
          in: query
          schema:
            type: string
          description: It should be a valid date following the format YYYY-MM-DD
          example: '2023-01-04'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attendance'
    post:
      tags:
        - Time > Attendance > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Create Attendance
      description: Creates Attendance
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - employee_id
                - clock_in
                - clock_out
              properties:
                employee_id:
                  type: integer
                  example: 5
                clock_in:
                  type: string
                  example: '2019-01-01T12:12:01-02:00'
                clock_out:
                  type: string
                  example: '2019-01-01T14:12:01-02:00'
                observations:
                  type: string
                  example: First Attendance
                location_type:
                  type: string
                  example: office
                  enum:
                    - office
                    - business_trip
                    - work_from_home
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
  /v1/time/leave_types:
    get:
      tags:
        - Time > Leave Types
      security:
        - oauth2: []
        - apikey: []
      summary: Get Leave types
      description: Get Leave types from a company
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeaveType'
    post:
      tags:
        - Time > Leave Types
      security:
        - oauth2: []
        - apikey: []
      summary: Create a Leave Type
      description: Create a Leave Type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - color
              properties:
                name:
                  type: string
                  example: holiday
                color:
                  type: string
                  example: 07A2AD
                accrues:
                  type: boolean
                  example: true
                active:
                  type: boolean
                  example: true
                approval_required:
                  type: boolean
                  example: false
                attachment:
                  type: boolean
                  example: false
                visibility:
                  type: boolean
                  example: true
                workable:
                  type: boolean
                  example: false
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveType'
  /v1/time/leave_types/{id}:
    put:
      tags:
        - Time > Leave Types
      security:
        - oauth2: []
        - apikey: []
      summary: Update a Leave Type
      description: Update a Leave Type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - color
              properties:
                name:
                  type: string
                  example: Special appointment
                color:
                  type: string
                  example: FFFFFF
                accrues:
                  type: boolean
                  example: false
                active:
                  type: boolean
                  example: true
                approval_required:
                  type: boolean
                  example: false
                attachment:
                  type: boolean
                  example: true
                visibility:
                  type: boolean
                  example: true
                workable:
                  type: boolean
                  example: true
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 5
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveType'
  /v1/time/leaves:
    get:
      tags:
        - Time > Leaves > V1
      security:
        - oauth2: []
        - apikey: []
      summary: Get Leaves
      description: Get Leaves from a company
      parameters:
        - name: employee_ids[]
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Employees id array
          example:
            - 1
        - name: leave_type_ids[]
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Leave type id array
          example:
            - 1
        - name: from
          in: query
          schema:
            type: string
          description: It should be a valid date following the format YYYY-MM-DD
          example: '2023-01-03'
        - name: to
          in: query
          schema:
            type: string
          description: It should be a valid date following the format YYYY-MM-DD
          example: '2023-01-04'
        - name: include_leave_type
          in: query
          schema:
            type: boolean
            default: false
          description: Include leave type name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Leave'
    post:
      tags:
        - Time > Leaves > V1
      security:
        - oauth2: []
        - apikey: []
      summary: Create a Leave
      description: Creates a Leave
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - start_on
                - finish_on
                - employee_id
              properties:
                start_on:
                  type: string
                  example: '2022-03-03'
                finish_on:
                  type: string
                  example: '2022-03-03'
                employee_id:
                  type: integer
                  example: 5
                leave_type_id:
                  type: integer
                  example: 1
                description:
                  type: string
                  example: Medical appointment for 4 hours
                half_day:
                  type: string
                  example: end_of_day
                  enum:
                    - beggining_of_day
                    - end_of_day
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leave'
  /v1/time/leaves/{id}:
    get:
      tags:
        - Time > Leaves > V1
      security:
        - oauth2: []
        - apikey: []
      summary: Get a Leave by ID
      description: Get a Leave by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leave'
    put:
      tags:
        - Time > Leaves > V1
      security:
        - oauth2: []
        - apikey: []
      summary: Update a Leave
      description: Update a Leave
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: Medical appointment for 4 hours
                employee_id:
                  type: integer
                  example: 7
                finish_on:
                  type: integer
                  example: 5
                start_on:
                  type: string
                  example: basic
                half_day:
                  type: string
                  example: end_of_day
                  enum:
                    - beggining_of_day
                    - end_of_day
                leave_type_id:
                  type: integer
                  example: 3
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leave'
    delete:
      tags:
        - Time > Leaves > V1
      security:
        - oauth2: []
        - apikey: []
      summary: Delete a Leave by ID
      description: Delete a Leave by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leave'
  /v2/time/leaves:
    get:
      tags:
        - Time > Leaves > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Get Leaves
      description: Get Leaves from a company
      parameters:
        - name: employee_ids[]
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Employees id array
          example:
            - 1
        - name: leave_type_ids[]
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Leave type id array
          example:
            - 1
        - name: from
          in: query
          schema:
            type: string
          description: It should be a valid date following the format YYYY-MM-DD
          example: '2023-01-03'
        - name: to
          in: query
          schema:
            type: string
          description: It should be a valid date following the format YYYY-MM-DD
          example: '2023-01-04'
        - name: include_leave_type
          in: query
          schema:
            type: boolean
            default: false
          description: Include leave type name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Leave_v2'
    post:
      tags:
        - Time > Leaves > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Create a Leave
      description: Creates a Leave
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - start_on
                - finish_on
                - employee_id
              properties:
                start_on:
                  type: string
                  example: '2022-03-03'
                finish_on:
                  type: string
                  example: '2022-03-03'
                employee_id:
                  type: integer
                  example: 5
                leave_type_id:
                  type: integer
                  example: 1
                description:
                  type: string
                  example: Medical appointment for 4 hours
                half_day:
                  type: string
                  example: end_of_day
                  enum:
                    - beggining_of_day
                    - end_of_day
                start_time:
                  type: string
                  example: '14:00'
                hours_amount_in_cents:
                  type: integer
                  example: '400'
                medical_leave_type:
                  type: integer
                  example: '400'
                effective_on:
                  type: string
                  example: '2022-03-03'
                medical_discharge_reason:
                  type: string
                  example: medical appointment
                colegiate_number:
                  type: integer
                  example: 3
                has_previous_relapse:
                  type: boolean
                  example: false
                relapse_leave_id:
                  type: integer
                  example: 3
                relapse_on:
                  type: string
                  example: '2022-03-03'
                accident_on:
                  type: string
                  example: '2022-03-01'
                paternity_birth_on:
                  type: string
                  example: '2022-03-02'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leave'
  /v2/time/leaves/{id}:
    get:
      tags:
        - Time > Leaves > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Get a Leave by ID
      description: Get a Leave by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leave_v2'
    put:
      tags:
        - Time > Leaves > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Update a Leave
      description: Update a Leave
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: Medical appointment for 4 hours
                employee_id:
                  type: integer
                  example: 7
                finish_on:
                  type: string
                  example: '2022-03-03'
                start_on:
                  type: string
                  example: '2022-03-03'
                start_time:
                  type: string
                  example: '12:00'
                hour_amount_in_cents:
                  type: integer
                  example: 400
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leave_v2'
    delete:
      tags:
        - Time > Leaves > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Delete a Leave by ID
      description: Delete a Leave by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leave_v2'
  /v1/payroll/family_situation:
    get:
      tags:
        - Payroll > Family Situations
      security:
        - oauth2: []
        - apikey: []
      summary: Get all family situations - only FR employees
      description: Get all family situations - only FR employees
      parameters:
        - name: employee_id
          in: query
          schema:
            type: string
          description: Get all family situations given an employee
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FamilySituation'
    post:
      tags:
        - Payroll > Family Situations
      security:
        - oauth2: []
        - apikey: []
      summary: Create a Family Situation
      description: Create a Family Situation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - employee_id
                - civil_status
              properties:
                employee_id:
                  type: integer
                  example: 3
                civil_status:
                  type: string
                  example: married
                  enum:
                    - single
                    - cohabitating
                    - divorced
                    - married
                    - unknown
                    - civil_partnership
                    - separated
                    - widow
                    - not_applicable
                number_of_dependants:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FamilySituation'
  /v1/payroll/family_situation/{id}:
    put:
      tags:
        - Payroll > Family Situations
      security:
        - oauth2: []
        - apikey: []
      summary: Update a Family Situation
      description: Update a Family Situation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                employee_id:
                  type: integer
                  example: 3
                civil_status:
                  type: string
                  example: married
                  enum:
                    - single
                    - cohabitating
                    - divorced
                    - married
                    - unknown
                    - civil_partnership
                    - separated
                    - widow
                    - not_applicable
                number_of_dependants:
                  type: integer
                  example: 1
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FamilySituation'
  /v1/custom_fields:
    get:
      tags:
        - Core > Custom Fields
      summary: Get Custom Fields
      description: >-
        This endpoint allows you to fetch a collection of custom fields. The
        fields you receive in the response are governed by the `field_group` you
        supply in the body of your request.

        For now, there are 2 acceptable field groups:

         - `employees-questions` which refers to fields relating to an employee

         - `time-tracking-projects` which refers to fields relating to time tracking data

         - `contract-versions` which refers to fields relating to employee contract versions
      parameters:
        - name: field_group
          in: query
          schema:
            type: string
          description: >-
            Available options: employees-questions (Employee's fields)
            time-tracking-projects (Shift's project)' contract-versions
            (Contract versions)'
          example: employees-questions
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomField'
  /v1/custom_fields/values:
    get:
      tags:
        - Core > Custom Fields
      summary: Given a custom field, get the value for a specific instance
      description: Given a custom field, get the value for a specific instance
      parameters:
        - name: field_id
          in: query
          schema:
            type: integer
            description: Field Id
          example: 1
          required: true
        - name: instance_id
          in: query
          schema:
            type: integer
            description: Id of the model instance associated to the field
          example: 23
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomValue'
    post:
      tags:
        - Core > Custom Fields
      summary: Create a value for a custom field
      description: >-
        As described, a `Custom Field Value` can be thought of as an
        answer/response to a `Custom Field` these answers/responses belong to
        the entity that inputed the values e.g. an employee who answered the
        t-shirt size question by filling it out in their factorial dashboard.

        This endpoint allows you to create values for custom fields. It requires
        an `instance_id` which refers to the `id` of the entity that owns this
        `Custom Value` e.g. an Employee for which the `employee_id` will
        correspond to the `instance_id`. It also requires a `field_id` to
        reference the `Custom Field` which this value is related to.

        You can think of `Custom Fields` and `Custom Values` as questions and
        answers.
      parameters:
        - name: field_id
          in: query
          schema:
            type: integer
            description: The id of the field this value belongs to
          example: 1
          required: true
        - name: instance_id
          in: query
          schema:
            type: integer
            description: >-
              The id of the entity that 'created' this value e.g. an employee
              who fills out the answer to a question
          example: 23
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - value
              properties:
                value:
                  type: string
                  example: somelinktomyportfolio.com
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomValue'
  /v1/posts:
    get:
      tags:
        - Core > Posts
      security:
        - oauth2: []
        - apikey: []
      summary: Get Posts
      description: This endpoint allows you to fetch a collection of posts.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '500':
          description: Internal Server Error
    post:
      tags:
        - Core > Posts
      security:
        - oauth2: []
        - apikey: []
      summary: Create a Post
      description: Create a Post
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - posts_group_id
                - type
                - published_at
              properties:
                title:
                  type: string
                  example: New Post
                description:
                  type: string
                  example: description
                posts_group_id:
                  type: integer
                  example: 1
                type:
                  type: string
                  example: first_day
                  enum:
                    - event
                    - announcement
                    - first_day
                    - birthday
                    - workiversary
                published_at:
                  type: string
                  example: '2022-09-08T00:00:00.000Z'
                stars_at:
                  type: string
                  example: '2022-09-08T00:00:00.000Z'
                ends_at:
                  type: string
                  example: '2022-09-08T00:00:00.000Z'
                location:
                  type: string
                  example: Green park
                target_id:
                  type: integer
                  example: 1
                send_notifications:
                  type: boolean
                  example: true
                image:
                  type: string
                  format: binary
                allow_comments_and_reactions:
                  type: boolean
                  example: true
                attachments:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  /v1/posts/{id}:
    get:
      tags:
        - Core > Posts
      summary: Get Post
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    put:
      tags:
        - Core > Posts
      security:
        - oauth2: []
        - apikey: []
      summary: Create a Post
      description: Create a Post
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
                  example: 1
                title:
                  type: string
                  example: New Post
                description:
                  type: string
                  example: description
                stars_at:
                  type: string
                  example: '2022-09-08T00:00:00.000Z'
                location:
                  type: string
                  example: Green park
                send_notifications:
                  type: boolean
                  example: true
                delete_cover_image:
                  type: boolean
                  example: true
                image:
                  type: string
                  format: binary
                allow_comments_and_reactions:
                  type: boolean
                  example: true
                attachments:
                  type: string
                  format: binary
                deleted_attachments:
                  type: array
                  items:
                    type: integer
                    example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    delete:
      tags:
        - Core > Posts
      summary: Delete Post
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /v1/ats/job_postings:
    get:
      tags:
        - Ats > Job Postings
      security:
        - oauth2: []
        - apikey: []
      summary: Get all job postings
      description: >-
        This endpoint allows fetching all available Ats Job Postings, scoped to
        the user credentials and company of that user.
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum:
              - draft
              - published
              - unlisted
              - archived
              - cancelled
          description: Job posting status
          example: 3
        - name: team_id
          in: query
          schema:
            type: integer
          description: An id of any teams that the ats company has in Factorial
          example: 3
        - name: location_id
          in: query
          schema:
            type: string
          description: An id of any location associated with the ats company in Factorial
          example: 1
        - name: legal_entity_id
          in: query
          schema:
            type: integer
          description: An id of any legal entity associated with the company in Factorial
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AtsJobPosting'
    post:
      tags:
        - Ats > Job Postings
      security:
        - oauth2: []
        - apikey: []
      summary: Create a Job Posting
      description: This endpoint allows you create and store Ats Job Postings in Factorial.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - status
              properties:
                title:
                  type: string
                  example: Jr Software Developer
                description:
                  type: string
                  example: Full Stack Developer
                contract_type:
                  type: string
                  enum:
                    - indefinite
                    - temporary
                    - fixed_discontinued
                    - intern
                    - training
                  example: temporary
                remote:
                  type: boolean
                  example: true
                status:
                  type: string
                  enum:
                    - draft
                    - published
                    - unlisted
                    - archived
                    - cancelled
                  example: draft
                schedule_type:
                  type: string
                  enum:
                    - full_time
                    - part_time
                  example: full_time
                team_id:
                  type: integer
                  example: 1
                location_id:
                  type: integer
                  example: 3
                salary_format:
                  type: string
                  enum:
                    - range
                    - fixed_amount
                  example: range
                salary_from_amount_in_cents:
                  type: integer
                  example: 50000
                salary_to_amount_in_cents:
                  type: integer
                  example: 60000
                cv_requirement:
                  type: string
                  enum:
                    - mandatory
                    - optional
                    - do_not_ask
                  example: mandatory
                cover_letter_requirement:
                  type: string
                  enum:
                    - mandatory
                    - optional
                    - do_not_ask
                  example: mandatory
                phone_requirement:
                  type: string
                  enum:
                    - mandatory
                    - optional
                    - do_not_ask
                  example: mandatory
                photo_requirement:
                  type: string
                  enum:
                    - mandatory
                    - optional
                    - do_not_ask
                  example: mandatory
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtsJobPosting'
  /v1/ats/job_postings/{id}:
    put:
      tags:
        - Ats > Job Postings
      security:
        - oauth2: []
        - apikey: []
      summary: Update a Job Posting
      description: Update a Job Posting
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Developer
                description:
                  type: string
                  example: Full Stack Developer
                contract_type:
                  type: string
                  enum:
                    - indefinite
                    - temporary
                    - fixed_discontinued
                    - intern
                    - training
                  example: temporary
                remote:
                  type: boolean
                  example: true
                status:
                  type: string
                  enum:
                    - draft
                    - published
                    - unlisted
                    - archived
                    - cancelled
                  example: draft
                schedule_type:
                  type: string
                  enum:
                    - full_time
                    - part_time
                  example: full_time
                team_id:
                  type: integer
                  example: 1
                location_id:
                  type: integer
                  example: 3
                salary_format:
                  type: string
                  enum:
                    - range
                    - fixed_amount
                  example: range
                salary_from_amount_in_cents:
                  type: integer
                  example: 50000
                salary_to_amount_in_cents:
                  type: integer
                  example: 60000
                cv_requirement:
                  type: string
                  enum:
                    - mandatory
                    - optional
                    - do_not_ask
                  example: mandatory
                cover_letter_requirement:
                  type: string
                  enum:
                    - mandatory
                    - optional
                    - do_not_ask
                  example: mandatory
                phone_requirement:
                  type: string
                  enum:
                    - mandatory
                    - optional
                    - do_not_ask
                  example: mandatory
                photo_requirement:
                  type: string
                  enum:
                    - mandatory
                    - optional
                    - do_not_ask
                  example: mandatory
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtsJobPosting'
    delete:
      tags:
        - Ats > Job Postings
      security:
        - oauth2: []
        - apikey: []
      summary: Delete a Job Posting
      description: Deletes an existing job posting
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtsJobPosting'
  /v1/ats/job_postings/{id}/duplicate:
    post:
      tags:
        - Ats > Job Postings
      security:
        - oauth2: []
        - apikey: []
      summary: Duplicate a Job Posting
      description: >-
        Make a duplicate of a job posting. The only parameter required for this
        operation is the id of the posting you wish to duplicate.

        One thing to note about this operation is that the id of the resulting
        posting will be different from the original, the title will have Copy
        appended to it, so if your origin title was Don't buy a the title of the
        duplicate will be Don't buy a Copy in addition to this, the status of
        the duplicate will default to draft. All this being said, kindly inspect
        the duplicate and ensure you get it into your desired state.
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtsJobPosting'
  /v1/ats/candidates:
    get:
      tags:
        - Ats > Candidates
      security:
        - oauth2: []
        - apikey: []
      summary: Get all candidates
      description: >-
        Fetch candidates data from Factorial. When using administrator-level API
        Credentials, all candidates associated with a company will be returned.
        When using non-admin level API credentials, only candidates that applied
        to a job for which the user is a hiring manager will be returned.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AtsCandidate'
    post:
      tags:
        - Ats > Candidates
      security:
        - oauth2: []
        - apikey: []
      summary: Create a candidate
      description: Create candidates related to a particular company in an ATS
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - first_name
                - last_name
                - email
              properties:
                first_name:
                  type: string
                  example: Bob
                last_name:
                  type: string
                  example: Stone
                email:
                  type: string
                  example: bob_stone@factorial.co
                source:
                  type: string
                  enum:
                    - indeed
                    - linkedin
                    - JobTarget
                    - manually_added
                    - organic
                    - jobposting
                    - JOIN
                  example: indeed
                medium:
                  type: string
                  example: LinkedIn
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtsCandidate'
  /v1/ats/candidates/{id}:
    put:
      tags:
        - Ats > Candidates
      security:
        - oauth2: []
        - apikey: []
      summary: Update candidate
      description: Update ATS Candidates data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: Bob
                last_name:
                  type: string
                  example: Stone
                email:
                  type: string
                  example: bob_stone@factorial.co
                talent_pool:
                  type: boolean
                  example: true
                consent_to_talent_pool:
                  type: boolean
                  example: false
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtsCandidate'
    delete:
      tags:
        - Ats > Candidates
      security:
        - oauth2: []
        - apikey: []
      summary: Delete a Candidate
      description: Deletes an existing candidate
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtsCandidate'
  /v1/payroll/contract_versions:
    get:
      tags:
        - Payroll > Contracts
      security:
        - oauth2: []
        - apikey: []
      summary: Get all contract versions
      description: Get all contract Versions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContractVersion'
    post:
      tags:
        - Payroll > Contracts
      security:
        - oauth2: []
        - apikey: []
      summary: Create contract versions
      description: Create contract Versions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                effective_on:
                  type: string
                  example: '2022-04-22'
                employee_id:
                  type: integer
                  example: 5
                starts_on:
                  type: string
                  example: '2021-04-22'
                ends_on:
                  type: string
                  example: '2023-04-22'
                working_hours_frequency:
                  type: string
                  enum:
                    - week
                    - day
                    - month
                    - year
                  example: week
                working_week_days:
                  type: string
                  example: friday,tuesday,saturday
                working_hours:
                  type: integer
                  example: 800
                salary_frequency:
                  type: string
                  enum:
                    - yearly
                    - monthly
                    - weekly
                    - hourly
                    - daily
                  example: yearly
                salary_amount:
                  type: integer
                  example: 5000000
                job_title:
                  type: string
                  example: Jr Software Developer
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractVersion'
  /v1/payroll/contract_versions/{id}:
    put:
      tags:
        - Payroll > Contracts
      security:
        - oauth2: []
        - apikey: []
      summary: Update contract version
      description: Update contract Version
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - effective_on
              properties:
                effective_on:
                  type: string
                  example: '2022-04-22'
                employee_id:
                  type: integer
                  example: 5
                starts_on:
                  type: string
                  example: '2021-04-22'
                ends_on:
                  type: string
                  example: '2023-04-22'
                working_hours_frequency:
                  type: string
                  enum:
                    - week
                    - day
                    - month
                    - year
                  example: week
                working_week_days:
                  type: string
                  example: friday,tuesday,saturday
                working_hours:
                  type: integer
                  example: 800
                salary_frequency:
                  type: string
                  enum:
                    - yearly
                    - monthly
                    - weekly
                    - hourly
                    - daily
                  example: yearly
                salary_amount:
                  type: integer
                  example: 5000000
                job_title:
                  type: string
                  example: Jr Software Developer
                es_cotization_group:
                  type: integer
                  example: 1
                  description: the cotization group id for Spain contracts
                  nullable: true
                es_professional_category_id:
                  type: integer
                  example: 2
                  description: the professional category id for Spain contracts
                  nullable: true
                es_education_level_id:
                  type: integer
                  example: 4
                  description: the education level id for Spain contracts
                  nullable: true
                es_contract_type_id:
                  type: integer
                  example: 2
                  description: the contract type id for Spain contracts
                  nullable: true
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractVersion'
    delete:
      tags:
        - Payroll > Contracts
      security:
        - oauth2: []
        - apikey: []
      summary: Delete contract version
      description: Delete contract Version
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractVersion'
  /v1/payroll/reference_contracts:
    get:
      tags:
        - Payroll > Contracts
      security:
        - oauth2: []
        - apikey: []
      summary: Get all reference contracts
      description: >-
        The reference contract is the contract that applies today. If no
        contract applies today, we will return the nearest upcoming contract. If
        there are no upcoming contracts, we will provide the most recent past
        contract.
      parameters:
        - name: employee_ids[]
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Employees id array
          example:
            - 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContractVersion'
  /v1/payroll/supplements:
    get:
      tags:
        - Payroll > Supplements
      security:
        - oauth2: []
        - apikey: []
      summary: Get all supplements
      description: Get all supplements
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Supplement'
    post:
      tags:
        - Payroll > Supplements
      security:
        - oauth2: []
        - apikey: []
      summary: Create supplements
      description: Create supplements
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                employee_id:
                  type: integer
                  example: 5
                amount_in_cents:
                  type: integer
                  example: 23333
                effective_on:
                  type: string
                  example: '2023-04-22'
                contracts_taxonomy_id:
                  type: integer
                  example: 2
                payroll_policy_period_id:
                  type: integer
                  example: 3
                unit:
                  type: string
                  example: usd
                contracts_compensation_id:
                  type: integer
                  example: 3
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplement'
  /v1/payroll/supplements/{id}:
    put:
      tags:
        - Payroll > Supplements
      security:
        - oauth2: []
        - apikey: []
      summary: Update supplements
      description: Update supplements
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                employee_id:
                  type: integer
                  example: 5
                amount_in_cents:
                  type: integer
                  example: 23333
                effective_on:
                  type: string
                  example: '2023-04-22'
                contracts_taxonomy_id:
                  type: integer
                  example: 2
                payroll_policy_period_id:
                  type: integer
                  example: 3
                unit:
                  type: string
                  example: usd
                contracts_compensation_id:
                  type: integer
                  example: 3
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplement'
    delete:
      tags:
        - Payroll > Supplements
      security:
        - oauth2: []
        - apikey: []
      summary: Delete supplements
      description: Delete supplements
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplement'
  /v2/payroll_integrations/codes:
    get:
      tags:
        - Payroll Integrations > Codes
      security:
        - oauth2: []
        - apikey: []
      summary: Get all codes for a specific Integration
      description: >-
        This endpoint allows fetching all available Codes, scoped to the
        integration name
      parameters:
        - name: integration
          in: query
          schema:
            type: string
            enum:
              - a3innuva
              - a3nom
              - silae
              - datev
              - zuccheti
              - kombo
              - parieh
          description: Payroll Integration name
          example: a3innuva
        - name: code
          in: query
          schema:
            type: string
          description: >-
            Unique identifier to relate Factorial with different payroll
            softwares
          example: TEST_CODE
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Code'
    post:
      tags:
        - Payroll Integrations > Codes
      security:
        - oauth2: []
        - apikey: []
      summary: Create a Payroll Integration Code
      description: >-
        This endpoint allows you create and store Payroll Integrations Codes in
        Factorial.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - code
                - codeable_id
                - codeable_type
                - integration
              properties:
                code:
                  type: string
                  example: TEST_CODE
                codeable_id:
                  type: integer
                  example: 12
                codeable_type:
                  type: string
                  enum:
                    - Company
                    - Employee
                    - CompanyCodeEnabled
                    - CompanyDbFile
                    - LegalEntity
                    - CompanyTentantId
                    - WorkplaceCodeEnabled
                    - ContractsCompensationsTaxonomy
                    - TimeoffLeaveType
                    - Location
                    - Bookkeper
                    - ValidFrom
                  example: Employee
                integration:
                  type: string
                  enum:
                    - a3innuva
                    - a3nom
                    - silae
                    - datev
                    - zuccheti
                    - kombo
                    - parieh
                  example: temporary
                forfait_jours:
                  type: boolean
                  example: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
  /v2/payroll_integrations/codes/{id}:
    patch:
      tags:
        - Payroll Integrations > Codes
      security:
        - oauth2: []
        - apikey: []
      summary: Update a Payroll Integration Code
      description: Update a Payroll Integration Code
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 3
                code:
                  type: string
                  example: TEST_CODE
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
    delete:
      tags:
        - Payroll Integrations > Codes
      security:
        - oauth2: []
        - apikey: []
      summary: Delete a Payroll Integration Code
      description: Deletes an existing payroll code
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
  /v2/payroll_integrations/codes/{id}/find_employee:
    get:
      tags:
        - Payroll Integrations > Codes
      security:
        - oauth2: []
        - apikey: []
      summary: Find Employee assigned to a Payroll Integration Code
      description: >-
        This endpoint allows fetching an Employee through a Payroll Integration
        Code
      parameters:
        - name: integration
          in: query
          schema:
            type: string
            enum:
              - a3innuva
              - a3nom
              - silae
              - datev
              - zuccheti
              - kombo
              - parieh
          description: Payroll Integration name
          example: a3innuva
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee_v2'
  /v1/time/shifts_management:
    get:
      tags:
        - Time > Shift Management
      security:
        - oauth2: []
        - apikey: []
      summary: Get all shifts from a company
      description: By default, it returns all the shifts for the current week
      parameters:
        - name: employee_id
          in: query
          schema:
            type: integer
          description: Employee ID to find shifts from
          example: 5
        - name: employee_ids%5B%5D
          in: query
          schema:
            type: array
            items:
              type: integer
              example:
                - 5
          description: Employee IDs to find shifts from
        - name: start_at
          in: query
          schema:
            type: string
          description: Start date to find shifts from
          example: '2023-07-24'
        - name: end_at
          in: query
          schema:
            type: string
          description: End date to find shifts to
          example: '2023-07-30'
        - name: only_published
          in: query
          schema:
            type: boolean
          description: To return only published shifts
          example: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShiftManagement'
    post:
      tags:
        - Time > Shift Management
      security:
        - oauth2: []
        - apikey: []
      summary: Create a shift
      description: Create a shift
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - start_at
                - end_at
                - employee_id
              properties:
                start_at:
                  type: string
                  example: '2022-06-23T11:00:00.000+00:00'
                end_at:
                  type: string
                  example: '2022-06-23T17:00:00.000+00:00'
                employee_id:
                  type: integer
                  example: 3
                notes:
                  type: string
                  example: Note 2
                location_id:
                  type: integer
                  example: 1
                work_area_id:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftManagement'
  /v1/time/shifts_management/publish:
    post:
      tags:
        - Time > Shift Management
      security:
        - oauth2: []
        - apikey: []
      summary: Publish shifts inside time range
      description: Publish shifts inside time range
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_at:
                  type: string
                  example: '2022-06-23T11:00:00.000+00:00'
                end_at:
                  type: string
                  example: '2022-06-23T17:00:00.000+00:00'
                employee_ids:
                  type: array
                  items:
                    type: integer
                    example: 1
                send_notification:
                  type: boolean
                  example: false
      responses:
        '201':
          description: Created
  /v1/time/shifts_management/{id}/locations:
    put:
      tags:
        - Time > Shift Management
      security:
        - oauth2: []
        - apikey: []
      summary: Update shift location
      description: Update shift location
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                location_id:
                  type: integer
                  example: 2
                work_area_id:
                  type: integer
                  example: 3
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftManagement'
  /v1/time/shifts_management/{id}/notes:
    put:
      tags:
        - Time > Shift Management
      security:
        - oauth2: []
        - apikey: []
      summary: Update shift notes
      description: Update shift notes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                notes:
                  type: string
                  example: Note 1
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftManagement'
  /v1/time/shifts_management/{id}:
    get:
      tags:
        - Time > Shift Management
      security:
        - oauth2: []
        - apikey: []
      summary: Get Shift
      description: Get Shift
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftManagement'
    delete:
      tags:
        - Time > Shift Management
      security:
        - oauth2: []
        - apikey: []
      summary: Delete Shift
      description: Delete Shift
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftManagement'
  /v1/time/breaks/start:
    post:
      tags:
        - Time > Breaks
      security:
        - oauth2: []
        - apikey: []
      summary: Start a break
      description: Start a break
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - employee_id
                - now
              properties:
                now:
                  type: string
                  example: '2022-06-23T11:00:00.000+00:00'
                employee_id:
                  type: integer
                  example: 3
                observations:
                  type: string
                  example: New break observation
                time_settings_break_configuration_id:
                  nullable: true
                  type: integer
                  example: 1
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
  /v1/time/breaks/end:
    post:
      tags:
        - Time > Breaks
      summary: End a break
      security:
        - oauth2: []
        - apikey: []
      description: End a break
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - employee_id
                - now
              properties:
                now:
                  type: string
                  example: '2022-06-23T11:00:00.000+00:00'
                employee_id:
                  type: integer
                  example: 3
                observations:
                  type: string
                  example: Updated break observation
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
  /v1/time/breaks:
    post:
      tags:
        - Time > Breaks
      security:
        - oauth2: []
        - apikey: []
      summary: Create a break
      description: Creates a break with the break_start and break_end time
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - employee_id
                - break_start
                - break_end
              properties:
                employee_id:
                  type: integer
                  example: 5
                break_start:
                  type: string
                  example: '2022-06-23T12:12:01-02:00'
                break_end:
                  type: string
                  example: '2022-06-23T13:12:01-02:00'
                observations:
                  type: string
                  example: New observation
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
  /v1/time/break_configurations_for_dates:
    get:
      tags:
        - Time > Breaks Configurations For Dates
      security:
        - oauth2: []
        - apikey: []
      summary: Get break configurations from a employee in a date range
      description: >-
        List all the posible break configurations to be used optionally in the
        break start
      parameters:
        - name: start_at
          in: query
          schema:
            type: string
          example: '2023-09-30'
        - name: end_at
          in: query
          schema:
            type: string
          example: '2023-09-30'
        - name: employee_id
          in: query
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BreakConfigurationsForDate'
  /v1/ats/applications:
    post:
      tags:
        - Ats > Applications
      security:
        - oauth2: []
        - apikey: []
      summary: Creates an application
      description: >-
        This endpoint allows a consumer to create and store Ats Applications in
        Factorial
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - ats_job_posting_id
                - source
              properties:
                ats_job_posting_id:
                  type: integer
                  example: 1
                source:
                  type: string
                  enum:
                    - indeed
                    - linkedin
                    - JobTarget
                    - manually_added
                    - organic
                    - jobposting
                    - JOIN
                  example: indeed
                medium:
                  type: string
                  example: LinkedIn
                ats_candidate_id:
                  type: integer
                  example: 2
                cover_letter:
                  type: string
                  example: ''
                first_name:
                  type: string
                  example: Bob
                last_name:
                  type: string
                  example: Stone
                phone:
                  type: string
                  example: '1134124214'
                email:
                  type: string
                  example: bob_stone@factorial.co
                cv:
                  type: string
                  format: binary
                  example: cv.pdf
                photo:
                  type: string
                  format: binary
                  example: photo.jpg
                answers:
                  type: array
                  items:
                    type: object
                    properties:
                      ats_question_id:
                        type: number
                        example: 1
                      value:
                        anyOf:
                          - type: string
                            example: Spain
                          - type: array
                            items:
                              type: string
                            example:
                              - Barcelona
                              - Madrid
                          - type: string
                            format: binary
                            example: cv.pdf
                    required:
                      - ats_question_id
                      - value
                  example:
                    - ats_question_id: 10
                      value: 'Yes'
                    - ats_question_id: 11
                      value:
                        - Barcelona
                        - Madrid
                    - ats_question_id: 12
                      value: cv.pdf
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtsApplication'
  /v1/ats/applications/{id}:
    put:
      tags:
        - Ats > Applications
      security:
        - oauth2: []
        - apikey: []
      summary: Update application
      description: Update ATS Application data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ats_application_phase_id:
                  type: integer
                  example: 1
                qualified:
                  type: boolean
                  example: true
                first_name:
                  type: string
                  example: Bob
                last_name:
                  type: string
                  example: Stone
                phone:
                  type: string
                  example: '1134124214'
                email:
                  type: string
                  example: bob_stone@factorial.co
                personal_url:
                  type: string
                  example: www.linkedin.com/awesome
                disqualified_reason:
                  type: string
                  example: not_a_fit
                  enum:
                    - not_a_fit
                    - self_disqualified
                    - salary
                    - other_reason
                    - underqualified
                    - offer_not_accepted
                    - other_offer
                    - no_response
                cv:
                  type: string
                  format: binary
                  example: cv.pdf
                photo:
                  type: string
                  format: binary
                  example: photo.jpeg
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtsApplication'
  /v1/ats/messages:
    get:
      tags:
        - Ats > Messages
      security:
        - oauth2: []
        - apikey: []
      summary: Get all ATS Messages
      description: Get all ATS Messages
      parameters:
        - name: conversation_id
          in: query
          schema:
            type: string
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AtsMessage'
    post:
      tags:
        - Ats > Messages
      security:
        - oauth2: []
        - apikey: []
      summary: Creates an ats messsage
      description: >-
        This endpoint allows you create and store Ats Messages in Factorial,
        while using your own user interface to display them.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - job_application_id
                - content
              properties:
                job_application_id:
                  type: integer
                  example: 1
                content:
                  type: string
                  example: Message 1
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtsMessage'
  /v2/core/bulk/employee:
    post:
      tags:
        - Core > Bulk
      security:
        - oauth2: []
        - apikey: []
      summary: Get Bulk Employees
      description: This endpoint allows you retrieve bulk employees V2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee_v2'
  /v2/core/bulk/attendance:
    post:
      tags:
        - Core > Bulk
      security:
        - oauth2: []
        - apikey: []
      summary: Get Bulk Attendance
      description: This endpoint allows you retrieve bulk attendance V2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attendance'
  /v2/core/bulk/contract_version:
    post:
      tags:
        - Core > Bulk
      security:
        - oauth2: []
        - apikey: []
      summary: Get Bulk Contract Versions
      description: This endpoint allows you retrieve bulk contract versions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContractVersion'
  /v1/core/custom/tables:
    get:
      tags:
        - Core > Custom Tables
      security:
        - oauth2: []
        - apikey: []
      summary: Get Custom Tables
      description: This endpoint allows you to retrieve Custom Tables
      parameters:
        - name: topic_name
          in: query
          schema:
            type: string
          description: Filters by topic_name
          example: employee
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomResource'
    post:
      tags:
        - Core > Custom Tables
      security:
        - oauth2: []
        - apikey: []
      summary: Creates a custom table
      description: This endpoint is used to create and store custom table
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: Kudos
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomResource'
  /v1/core/custom/tables/{id}:
    get:
      tags:
        - Core > Custom Tables
      security:
        - oauth2: []
        - apikey: []
      summary: Get Custom Table
      description: This endpoint allows you retrieve a Custom Table
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomResource'
  /v1/core/custom/tables/{id}/fields:
    get:
      tags:
        - Core > Custom Tables
      security:
        - oauth2: []
        - apikey: []
      summary: Get Custom Table Fields
      description: This endpoint allows you retrieve Custom Table Fields
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: Custom Table ID (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomHeader'
    post:
      tags:
        - Core > Custom Tables
      security:
        - oauth2: []
        - apikey: []
      summary: Creates a custom table field
      description: >-
        This endpoint is used to create and store custom fields on custom
        tables. See custom fields v2 for more information.
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: Custom Table ID (Required)
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
                  example: 86
                  description: The id of the custom table
                custom_field:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    label:
                      type: string
                      example: employee
                    identifier:
                      type: string
                      example: label-1
                    position:
                      type: integer
                      example: 90773647
                    required:
                      type: boolean
                      example: false
                    field_type:
                      type: string
                      example: text
                    min_value:
                      type: integer
                      example: -439653
                    max_value:
                      type: integer
                      example: 47114499
                    slug_id:
                      type: integer
                      example: 47114499
                    slug_name:
                      type: string
                      example: text
                    choice_options:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        label:
                          type: string
                          example: Shirt Size
                        value:
                          type: string
                          example: L
                        is_active:
                          type: boolean
                          example: false
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomField_v2'
  /v1/core/custom/tables/{id}/values/{employee_id}:
    get:
      tags:
        - Core > Custom Tables
      security:
        - oauth2: []
        - apikey: []
      summary: Get Custom Table Fields
      description: This endpoint allows you retrieve Custom Table Values for an employee
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: (Required)
          example: 1
        - name: employee_id
          in: path
          schema:
            type: integer
          required: true
          description: (Required)
          example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomResourceValue'
    post:
      tags:
        - Core > Custom Tables
      security:
        - oauth2: []
        - apikey: []
      summary: Creates a custom table value
      description: >-
        This endpoint is used to create and store custom values on custom fields
        used in custom tables. See custom values for more information.
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: (Required)
          example: 1
        - name: employee_id
          in: path
          schema:
            type: integer
          required: true
          description: (Required)
          example: 3
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - emloyee_id
              properties:
                id:
                  type: integer
                  example: 86
                  description: The id of the custom table
                emloyee_id:
                  type: integer
                  example: 10
                  description: >-
                    The id of the employee whos custom value we are creating for
                    custom resource
                table_values:
                  type: array
                  items:
                    type: object
                    required:
                      - id
                      - value
                    properties:
                      id:
                        type: integer
                        example: 1
                        description: The id of the table custom field
                      value:
                        type: string
                        example: This is a custom value for a custom field
                        description: The value of the custom field
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomResourceValue'
  /v1/core/events:
    get:
      tags:
        - Core > Events
      security:
        - oauth2: []
        - apikey: []
      summary: Get triggered events
      description: Get triggered events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /v1/core/webhooks:
    get:
      tags:
        - Core > Webhooks
      security:
        - oauth2: []
        - apikey: []
      summary: Get a list of all subscribed webhooks for current user
      description: Get a list of all subscribed webhooks for current user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook'
    post:
      tags:
        - Core > Webhooks
      security:
        - oauth2: []
        - apikey: []
      summary: Create a webhook
      description: >-
        > Creates a subscription for a determined webhook type. If webhook
        already exists, it just changes the target_url.

         ## Webhooks Types

        | **Type** | **Information** |

        | --- | --- |

        | employee_invited | When creating a new employee, optionally you can
        send an invitation to create an account in Factorial. If you send an
        invitation, this event gets triggered. |

        | employee_created | When creating a new employee, after submitting the
        form, this event gets triggered. |

        | employee_updated| When updating personal protected employee
        information such has birthday, this event gets triggered. |

        | employee_terminated | When terminating an employee, after submitting
        the form, this event gets triggered |

        | employee_unterminated | When un terminating an employee, after
        submitting the form, this event gets triggered |

        | attendance_clockin | When the user clocks in and starts the timer,
        this event is triggered. |

        | attendance_clockout | When the user clocks out and stops the timer,
        this event is triggered |

        | attendance_shift_created | When the user creates a shift, this event
        is triggered |

        | attendance_shift_updated | When the user edits a shift, this event is
        triggered |

        | attendance_shift_deleted | When the user deletes a shift, this event
        is triggered |

        | ats_application_created | When a candidate applies for a posting. |

        | ats_application_updated | When a candidates application for a posting
        suffers changes. |

        | ats_job_posting_created | When a job posting is created. |

        | ats_job_posting_updated | When a job posting is updated. |

        | ats_job_posting_deleted | When a job posting is deleted. |

        | timeoff_leave_created | When a Timeoff Leave is created. |

        | timeoff_leave_destroyed | When a Timeoff Leave is destroyed. |

        | timeoff_leave_updated | When a Timeoff Leave suffers any changes. |

        | timeoff_leave_approved | When a Timeoff Leave is explicitly approved.
        |

        | timeoff_leave_rejected | When a Timeoff Leave is rejected. |

        | shift_management_shift_destroyed | When a single Shift Management
        Shift is destroyed. |

        | shift_management_shift_bulk_destroyed | When Shift Management Shifts
        are destroyed in bulk. |

        | document_created | When a document is created. |

        | task_created | When a task is created. |

        | contract_version_created | When a contract version is created. |
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - target_url
              properties:
                type:
                  type: string
                  example: employee_created
                target_url:
                  type: string
                  example: https://webhook.site/48103127-b1f6-3215-8f18-60fdbc013e3f
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook'
  /v1/core/webhooks/{id}:
    delete:
      tags:
        - Core > Webhooks
      security:
        - oauth2: []
        - apikey: []
      summary: Delete a Webhook
      description: Delete a Webhook
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook'
  /v1/time/policies:
    get:
      tags:
        - Time > Timeoff Policies
      security:
        - oauth2: []
        - apikey: []
      summary: Get Time off Policies
      description: This endpoint allows you to retrieve time off policies for a company
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Policy'
  /v1/time/policies/{id}:
    get:
      tags:
        - Time > Timeoff Policies
      security:
        - oauth2: []
        - apikey: []
      summary: Get a Time off Policy
      description: This endpoint allows you to retrieve a time off policy for a company
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
  /v1/finance/expenses:
    get:
      tags:
        - Finance > Expenses
      summary: Get Expenses
      description: This endpoint allows you to retrieve expenses for a company
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expense'
      deprecated: true
  /v1/finance/expenses/{id}:
    get:
      tags:
        - Finance > Expenses
      summary: Get an expense
      description: This endpoint allows you to retrieve an expense by id
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
      deprecated: true
  /v1/payroll/compensations:
    get:
      tags:
        - Payroll > Additional Compensations
      security:
        - oauth2: []
        - apikey: []
      summary: Get Compensations
      description: This endpoint allows you to retrieve compensations for a company
      parameters:
        - name: ids
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Compensations id array
          example:
            - 1
        - name: contract_version_ids
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Contract versions id array
          example:
            - 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Compensation'
    post:
      tags:
        - Payroll > Additional Compensations
      security:
        - oauth2: []
        - apikey: []
      summary: Create a compensation
      description: Creates a compensation for a contract.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - contract_version_id
              properties:
                contract_version_id:
                  type: integer
                  example: 2
                contracts_taxonomy_id:
                  type: integer
                  example: 2
                description:
                  type: string
                  example: Meal 2
                compensation_type:
                  type: string
                  example: fixed
                  enum:
                    - fixed
                    - up_to
                amount:
                  type: integer
                  example: 2112
                unit:
                  type: string
                  example: money
                  enum:
                    - money
                    - units
                sync_with_supplements:
                  type: boolean
                  example: true
                payroll_policy_id:
                  type: integer
                  example: 2
                recurrence_count:
                  type: integer
                  example: 2
                starts_on:
                  type: string
                  example: '2022-08-02'
                recurrence:
                  type: string
                  example: monthly
                  enum:
                    - monthly
                    - every_2_months
                    - every_3_months
                    - every_4_months
                    - every_5_months
                    - every_6_months
                    - every_7_months
                    - every_8_months
                    - every_9_months
                    - every_10_months
                    - every_11_months
                    - every_12_months
                first_payment_on:
                  type: string
                  example: '2022-08-02'
                calculation:
                  type: string
                  example: current_period
                  enum:
                    - current_period
                    - previous_period'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Compensation'
  /v1/payroll/compensations/{id}:
    get:
      tags:
        - Payroll > Additional Compensations
      security:
        - oauth2: []
        - apikey: []
      summary: Get a compensation
      description: This endpoint allows you to retrieve a compensation by id
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Compensation'
    put:
      tags:
        - Payroll > Additional Compensations
      security:
        - oauth2: []
        - apikey: []
      summary: Updates a compensation
      description: Updates a compensation for a contract.
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                contracts_taxonomy_id:
                  type: integer
                  example: 2
                description:
                  type: string
                  example: Meal 2
                compensation_type:
                  type: string
                  example: fixed
                  enum:
                    - fixed
                    - up_to
                amount:
                  type: integer
                  example: 2112
                unit:
                  type: string
                  example: money
                  enum:
                    - money
                    - units
                sync_with_supplements:
                  type: boolean
                  example: true
                payroll_policy_id:
                  type: integer
                  example: 2
                recurrence_count:
                  type: integer
                  example: 2
                starts_on:
                  type: string
                  example: '2022-08-02'
                recurrence:
                  type: string
                  example: monthly
                  enum:
                    - monthly
                    - every_2_months
                    - every_3_months
                    - every_4_months
                    - every_5_months
                    - every_6_months
                    - every_7_months
                    - every_8_months
                    - every_9_months
                    - every_10_months
                    - every_11_months
                    - every_12_months
                first_payment_on:
                  type: string
                  example: '2022-08-02'
                calculation:
                  type: string
                  example: current_period
                  enum:
                    - current_period
                    - previous_period'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Compensation'
    delete:
      tags:
        - Payroll > Additional Compensations
      security:
        - oauth2: []
        - apikey: []
      summary: Delete a Compensation
      description: Delete a compensation
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Compensation'
  /v1/payroll/taxonomies:
    get:
      tags:
        - Payroll > Taxonomies
      security:
        - oauth2: []
        - apikey: []
      summary: Get Taxonomies
      description: This endpoint allows you to retrieve taxonomies for a company
      parameters:
        - name: ids
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Taxonomies id array
          example:
            - 1
        - name: legal_entity_ids
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Legal Entities id array
          example:
            - 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Taxonomy'
  /v1/payroll/taxonomies/{id}:
    get:
      tags:
        - Payroll > Taxonomies
      security:
        - oauth2: []
        - apikey: []
      summary: Get a taxonomy
      description: This endpoint allows you to retrieve a taxonomy by id
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Taxonomy'
  /v2/core/workplaces:
    get:
      tags:
        - Core > Workplaces > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Get all workplaces
      description: This endpoint allows you to retrieve all workplaces for a company
      parameters:
        - name: ids
          in: query
          schema:
            type: string
          description: Workplaces id comma separated values
          example: 1,2
        - name: employee_ids
          in: query
          schema:
            type: string
          description: Employees id comma separated values
          example: 1,2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workplace'
    post:
      tags:
        - Core > Workplaces > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Create a workplace
      description: Creates a workplace for a company
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - country
                - timezone
              properties:
                name:
                  type: string
                  example: First Workspace
                country:
                  type: string
                  example: es
                state:
                  type: string
                  example: CT
                city:
                  type: string
                  example: Barcelona
                address_line_1:
                  type: string
                  example: Swatch strasse 3
                address_line_2:
                  type: string
                  example: Atiquen terceren
                postal_code:
                  type: string
                  example: C1231
                phone_number:
                  type: string
                  example: '55555555'
                company_id:
                  type: integer
                  example: 2
                legal_entity_id:
                  type: integer
                  example: 2
                main:
                  type: boolean
                  example: true
                latitude:
                  type: number
                  format: float
                  example: 41.39612
                longitude:
                  type: number
                  format: float
                  example: 2.19123
                timezone:
                  type: string
                  example: etc/UTC
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workplace'
  /v2/core/workplaces/{id}:
    get:
      tags:
        - Core > Workplaces > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Get a workplace
      description: This endpoint allows you to retrieve a workplace by id
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workplace'
    put:
      tags:
        - Core > Workplaces > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Updates a workplace
      description: Updates a workplace of a company
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: First Workspace
                country:
                  type: string
                  example: es
                state:
                  type: string
                  example: CT
                city:
                  type: string
                  example: Barcelona
                address_line_1:
                  type: string
                  example: Swatch strasse 3
                address_line_2:
                  type: string
                  example: Atiquen terceren
                postal_code:
                  type: string
                  example: C1231
                phone_number:
                  type: string
                  example: '55555555'
                payroll_policy_id:
                  type: integer
                  example: 2
                main:
                  type: boolean
                  example: true
                timezone:
                  type: string
                  example: etc/UTC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workplace'
    delete:
      tags:
        - Core > Workplaces > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Delete a workplace
      description: Delete a workplace
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workplace'
  /v2/custom_fields/fields:
    get:
      tags:
        - Custom Fields > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Get custom fields
      description: >-
        This endpoint allows you to retrieve custom fields by id, label, slug
        name, slug name. You receive fields tagged in the response by a slug.

        For now, there is one acceptable slug name:

         - `employees-questions` which refers to fields relating to an employee

         You can filter by:

         - id: You can query a field by its id. For example `T-shirt size` identifier is 4. you can search the custom field by the id 4.
         - label: you can query a field by its label for example `T shirt size`
         - slug_name: You can use the available slug `employees-questions` in the `slug_name` field to filter fields that belong to this slug.
         - slug_id: It is the identifier of the slug_name. You can use the id of a slug to query custom fields by its id instead of its name.
      parameters:
        - name: id
          in: query
          schema:
            type: integer
          example: 1
        - name: label
          in: query
          schema:
            type: string
          example: tshirt size
        - name: slug_id
          in: query
          schema:
            type: integer
          example: 1
        - name: slug_name
          in: query
          schema:
            type: string
          example: employees-questions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomField_v2'
    post:
      tags:
        - Custom Fields > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Create a custom field
      description: >-
        This endpoint allows you to create custom fields you must provide these
        parameters

        - label: custom field visible name for example `T shirt size` -
        slug_name: the resource that you want to save the custom field, for
        example to save `t-shirt size` field in employee you must use
        `employees-questions` value - field_type: the kind of field value you
        want to store: text (input), long text (text area), number (input
        number) or single choice (select input) - required: You can set if the
        field is mandatory - visible: You can set the roles can see the field
        (own, reportees, team leader or everybody) - editable: You can set the
        roles can edit the field (own, reportees, team leader or everybody) -
        choice_options: You can provide an array of choices to set the options
        of a single choice field
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - label
                - slug_name
                - field_type
                - required
                - visible
                - editable
              properties:
                label:
                  type: string
                  example: t shirt
                slug_name:
                  type: string
                  example: employees-questions
                field_type:
                  type: string
                  example: text
                  enum:
                    - text
                    - long_text
                    - number
                    - single_choice
                min_value:
                  type: integer
                  example: 1
                max_value:
                  type: integer
                  example: 100
                required:
                  type: boolean
                  example: true
                editable:
                  type: string
                  example: text
                  enum:
                    - owned
                    - reportees
                    - team_leader
                    - everybody
                visible:
                  type: string
                  example: text
                  enum:
                    - owned
                    - reportees
                    - team_leader
                    - everybody
                choice_options:
                  type: array
                  items:
                    type: object
                    properties:
                      label:
                        type: string
                        example: red
                      is_active:
                        type: boolean
                        example: 'true'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomField_v2'
  /v2/custom_fields/fields/{id}:
    delete:
      tags:
        - Custom Fields > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Delete a custom field
      description: Delete a custom field by its id
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: (Required)
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomField_v2'
  /v2/custom_fields/values:
    get:
      tags:
        - Custom Fields > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Get custom field values
      description: >-
        This endpoint allows you to retrieve custom fields by id, label, slug
        name, slug name. You receive fields tagged in the response by a slug.

        For now, there is one acceptable slug name:

         - `employees-questions` which refers to fields relating to an employee

         You can filter by:

         - id: You can query a field value by its id. For example identity card value `12345678Z` identifier is 4. you can search the custom field by the id 4.
         - value: You can query a field by value. For example an employee have a custom field which is "Computer" and it's value is "PC" you can search it by this value.
         - slug_name: You can use the available slug `employees-questions` in the `slug_name` field to filter custom field values that belong to this slug.
         - slug_id: It is the identifier of the slug_name. You can use the id of a slug to query custom fields values by its slug id instead of its slug name.
         - field_id: You can use the available field id to filter custom field values that belong to this field.
         - employee_ids: You can use the available employee ids to filter custom field values that belong to these employees.
      parameters:
        - name: id
          in: query
          schema:
            type: integer
          example: 1
        - name: slug_id
          in: query
          schema:
            type: integer
          example: 1
        - name: field_id
          in: query
          schema:
            type: integer
          example: 1
        - name: slug_name
          in: query
          schema:
            type: string
          example: employees-questions
        - name: field_value
          in: query
          schema:
            type: string
          example: red
        - name: employee_ids[]
          in: query
          schema:
            type: array
            items:
              type: integer
          description: Employees id array
          example:
            - 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomValue_v2'
  /v2/custom_fields/values/{id}:
    put:
      tags:
        - Custom Fields > V2
      security:
        - oauth2: []
        - apikey: []
      summary: Update custom field value
      description: This endpoint allows you to update custom fields values
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: (Required)
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - label
                - slug_name
                - field_type
                - required
                - visible
                - editable
              properties:
                value:
                  type: string
                  example: l
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomField_v2'
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /oauth/authorize
          tokenUrl: /oauth/token
          refreshUrl: /oauth/token
          scopes:
            read: Required for all operations
            write: Required for write operations
    apikey:
      type: apiKey
      in: header
      name: x-api-key
  schemas:
    Employee:
      type: object
      properties:
        id:
          type: integer
          example: 5
        email:
          type: string
          example: bob_stone@factorial.co
        login_email:
          type: string
          example: bob_stone@factorial.co
        first_name:
          type: string
          example: Bob
        last_name:
          type: string
          example: Stone
        full_name:
          type: string
          example: Bob Stone
        birthday_on:
          type: string
          example: '2000-06-23'
        role:
          type: string
          example: basic
          enum:
            - basic
            - admin
        terminated_on:
          type: string
          example: '2023-06-23'
        gender:
          type: string
          example: female
          enum:
            - male
            - female
        nationality:
          type: string
          example: es
        bank_number:
          type: string
          example: ES09 4595 6109 8115 7760 8354
        country:
          type: string
          example: es
        city:
          type: string
          example: Barcelona
        state:
          type: string
          example: Barcelona
        postal_code:
          type: string
          example: '08007'
        address_line_1:
          type: string
          example: c/ Tallers 123
        address_line_2:
          type: string
          example: Atic 5
        identifier:
          type: string
          example: 82649834R
        identifier_type:
          type: string
          example: dni
        company_id:
          type: integer
          example: 5
        legal_entity_id:
          type: integer
          example: 5
        manager_id:
          type: integer
          example: 5
        timeoff_manager_id:
          type: integer
          example: 5
        regular_access_starts_on:
          type: string
          example: '2022-06-23'
        phone_number:
          type: string
          example: '9322222222222'
        social_security_number:
          type: string
          example: '223948780514'
        start_date:
          type: string
          example: '2022-06-23'
        location_id:
          type: integer
          example: 1
        team_ids:
          type: array
          items:
            type: integer
        company_holiday_ids:
          type: array
          items:
            type: integer
        avatar:
          type: string
          example: >-
            https://api.factorialhr.com/rails/active_storage/representations/redirect/bob.png
        company_identifier:
          type: string
          example: 124ABC
        hiring:
          type: object
          properties:
            base_compensation_amount_in_cents:
              type: integer
              example: 50000
            base_compensation_type:
              type: string
              example: yearly
              enum:
                - yearly
                - monthly
                - weekly
                - hourly
    Employee_v2:
      type: object
      properties:
        id:
          type: integer
          example: 5
        first_name:
          type: string
          example: Bob
        last_name:
          type: string
          example: Stone
        full_name:
          type: string
          example: Bob Stone
        email:
          type: string
          example: bob_stone@factorial.co
        login_email:
          type: string
          example: bob_stone@factorial.co
        birthday_on:
          type: string
          example: '2000-01-08'
        terminated_on:
          type: string
          example: '2022-01-08'
        termination_reason:
          type: string
          example: Behaviour
        termination_observations:
          type: string
          example: Behaviour
        identifier:
          type: string
          example: 82649834R
        identifier_type:
          type: string
          example: dni
        gender:
          type: string
          example: female
          enum:
            - male
            - female
        nationality:
          type: string
          example: es
        bank_number:
          type: string
          example: ES09 4595 6109 8115 7760 8354
        country:
          type: string
          example: es
        city:
          type: string
          example: Barcelona
        state:
          type: string
          example: Barcelona
        postal_code:
          type: string
          example: '08007'
        address_line_1:
          type: string
          example: c/ Tallers 123
        address_line_2:
          type: string
          example: Atic 5
        swift_bic:
          type: string
          example: '1234567890'
        company_id:
          type: integer
          example: 5
        legal_entity_id:
          type: integer
          example: 5
        created_at:
          type: string
          example: '2022-06-24T18:39:03.515Z'
        updated_at:
          type: string
          example: '2022-06-24T18:39:03.515Z'
        manager_id:
          type: integer
          example: 5
        location_id:
          type: integer
          example: 5
        timeoff_manager_id:
          type: integer
          example: 5
        social_security_number:
          type: string
          example: '223948780514'
        tax_id:
          type: string
          example: '121232323'
        timeoff_policy_id:
          type: integer
          example: 1
        team_ids:
          type: array
          items:
            type: integer
            example: 1
        phone_number:
          type: string
          example: '9322222222222'
        company_identifier:
          type: string
          example: 124ABC
    Team:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Management
        employee_ids:
          type: array
          items:
            type: integer
            example:
              - 1
        lead_ids:
          type: array
          items:
            type: integer
            example:
              - 1
              - 2
    Document:
      type: object
      properties:
        id:
          type: integer
          example: 1
        employee_id:
          type: integer
          example: 1
        company_id:
          type: integer
          example: 1
        folder_id:
          type: integer
          example: 1
        url:
          type: string
          example: https:/factorial-api/documents/payslip.pdf
        filename:
          type: string
          example: payslip.pdf
        public:
          type: boolean
          example: true
        created_at:
          type: string
          example: '2022-06-23T16:02:22.000Z'
        updated_at:
          type: string
          example: '2022-06-23T16:02:22.000Z'
    Folder:
      type: object
      properties:
        id:
          type: integer
          example: 1
        company_id:
          type: integer
          example: 1
        name:
          type: string
          example: payment
        active:
          type: boolean
          example: true
        created_at:
          type: string
          example: '2022-06-23T16:02:22.000Z'
        updated_at:
          type: string
          example: '2022-06-23T16:02:22.000Z'
    Task:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Upload information task
        content:
          type: string
          example: >-
            Update information due date to either following weekday or following
            friday
        due_on:
          type: string
          example: '2022-05-18'
        assignee_ids:
          type: array
          items:
            type: integer
            example:
              - 3
              - 19
        completed_at:
          type: string
          example: '2022-12-13T16:17:56.000Z'
    TaskFile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        task_id:
          type: integer
          example: 15
        filename:
          type: string
          example: task_file.pdf
        path:
          type: string
          example: https:/factorial-api/task_files/task_file.pdf
    Location:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Zurich Office
        country:
          type: string
          example: ch
        phone_number:
          type: string
          example: '5555555555'
        state:
          type: string
          example: ZH
        city:
          type: string
          example: Zürich
        address_line_1:
          type: string
          example: Swatch strasse 3
        address_line_2:
          type: string
          example: Atiquen terceren
        postal_code:
          type: string
          example: '04221'
        timezone:
          type: string
          example: CEST
        company_holidays_ids:
          type: array
          items:
            type: integer
            example:
              - 6
              - 55
    ApiKey:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Company Api Key
        token_digest:
          type: string
          example: 069cf78dd2a3********************67c1fcfb38bdb1e1bf5c3a1e451499848f
        created_at:
          type: string
          example: '2022-06-24T18:39:03.515Z'
    ApiKeyCreate:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Fingerprint Device Door 1
        token:
          type: string
          example: 066629642c451273a3921bb4hehbe107b044c94z45be7772f8e1c7a9b5617325
    CustomResource:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: First Custom Table
        created_at:
          type: string
          example: '2022-06-24T18:39:03.515Z'
        topic_name:
          type: string
          example: employee
        custom_resources_topic_id:
          type: integer
          example: 1
        reportable:
          type: boolean
          example: false
        hidden:
          type: boolean
          example: true
    Shift:
      type: object
      properties:
        id:
          type: integer
          example: 1
        day:
          type: integer
          example: 23
        month:
          type: integer
          example: 6
        year:
          type: integer
          example: 2022
        clock_in:
          type: string
          example: '18:00'
        clock_out:
          type: string
          example: '20:00'
        employee_id:
          type: integer
          example: 4
        observations:
          type: string
          example: New Observation
        location_type:
          type: string
          example: office
          enum:
            - office
            - business_trip
            - work_from_home
        in_location_latitude:
          type: number
          format: float
          example: -34.8601369070693
        in_location_longitude:
          type: number
          format: float
          example: 56.0008344819525
        in_location_accuracy:
          type: number
          format: float
          example: 1.4
        out_location_latitude:
          type: number
          format: float
          example: -34.8601369070693
        out_location_longitude:
          type: number
          format: float
          example: 56.0008344819525
        out_location_accuracy:
          type: number
          format: float
          example: 1.4
    Access:
      type: object
      properties:
        email:
          type: string
          example: hellen@factorial.co
        full_name:
          type: string
          example: Hellen Factorial
        first_name:
          type: string
          example: Hellen
        last_name:
          type: string
          example: Factorial
        employee_id:
          type: integer
          example: 8
        role:
          type: string
          example: manager
    EmployeeWebhook:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: Hellen
        last_name:
          type: string
          example: Factorial
        email:
          type: string
          example: hellen@factorial.co
        invited_on:
          type: string
          example: '2022-06-24T18:39:03.515Z'
    AtsApplication:
      type: object
      properties:
        id:
          type: integer
          example: 1
        ats_candidate_id:
          type: integer
          example: 2
        ats_job_posting_id:
          type: integer
          example: 3
        ats_application_phase_id:
          type: integer
          example: 3
        ats_application_phase_name:
          type: string
          example: Hired
        ats_application_phase_type:
          type: string
          example: hired
        ats_job_posting_title:
          type: string
          example: Software Engineer
        conversation_id:
          type: integer
          example: 5
        cover_letter:
          type: string
          example: This is a cover letter
        cv:
          type: object
          properties:
            file:
              type: string
              example: /applications/1/cv_file
            content_type:
              type: string
              example: application/pdf
            filename:
              type: string
              example: candidate.pdf
            size:
              type: integer
              example: 29516
            created_at:
              type: string
              example: '2022-06-24T18:39:03.515Z'
        photo:
          type: string
          example: photo.jpeg
        disqualified_reason:
          type: string
          example: not_a_fit
        email:
          type: string
          example: bob.stone@factorial.co
        first_name:
          type: string
          example: Bob
        full_name:
          type: string
          example: Bob Stone
        last_name:
          type: string
          example: Stone
        medium:
          type: string
          example: organic
        personal_url:
          type: string
          example: www.linkedin.com/awesome
        phone:
          type: string
          example: '666666666'
        qualified:
          type: boolean
          example: true
        rating_average:
          type: integer
          example: 5
        source:
          type: string
          example: manually_added
        talent_pool:
          type: boolean
          example: false
        created_at:
          type: string
          example: '2022-06-24T18:39:03.515Z'
        answers:
          type: array
          items:
            $ref: '#/components/schemas/AtsAnswer'
    AtsMessage:
      type: object
      properties:
        id:
          type: integer
          example: 1
        conversation_id:
          type: integer
          example: 2
        content:
          type: string
          example: Cv is missing
        sent_by_type:
          type: string
          example: User
        sent_at:
          type: string
          example: '2022-06-24T18:39:03.515Z'
        sent_by_id:
          type: integer
          example: 2
        attachments:
          type: array
          items:
            type: string
    AtsJobPosting:
      type: object
      properties:
        id:
          type: integer
          example: 1
        creation_date:
          type: string
          example: '2022-06-24T18:39:03.515Z'
        title:
          type: string
          example: 'A wonderful job '
        description:
          type: string
          example: The most wonderful job in the whoooole world
        remote:
          type: boolean
          example: true
        status:
          type: string
          example: published
        schedule_type:
          type: string
          example: full_time
        team_id:
          type: integer
          example: 1
        location_id:
          type: integer
          example: 1
        legal_entity_id:
          type: integer
          example: 1
        ats_company_id:
          type: integer
          example: 3
        salary_format:
          type: string
          example: fixed_amount
        salary_from_amount_in_cents:
          type: integer
          example: 600000
        salary_to_amount_in_cents:
          type: integer
          example: 600000
        cv_requirement:
          type: string
          example: mandatory
        cover_letter_requirement:
          type: string
          example: mandatory
        phone_requirement:
          type: string
          example: mandatory
        photo_requirement:
          type: string
          example: mandatory
        questions:
          type: array
          items:
            $ref: '#/components/schemas/AtsQuestion'
          example:
            - id: 1
              label: Why do you want to work with us?
              position: 0
              mandatory: true
              question_type: long_text
              ats_job_posting_id: 1
              created_at: '2022-06-24T18:39:03.515Z'
              updated_at: '2022-06-24T18:39:03.515Z'
            - id: 2
              label: Linkedin profile url
              position: 1
              mandatory: true
              question_type: text
              ats_job_posting_id: 1
              created_at: '2022-06-24T18:39:03.515Z'
              updated_at: '2022-06-24T18:39:03.515Z'
            - id: 3
              label: Are you willing yo relocate?
              position: 0
              mandatory: true
              question_type: single_choice
              options:
                - 'Yes'
                - 'No'
              ats_job_posting_id: 1
              created_at: '2022-06-24T18:39:03.515Z'
              updated_at: '2022-06-24T18:39:03.515Z'
            - id: 4
              label: Which office do you prefer?
              position: 0
              mandatory: false
              question_type: multiple_choice
              options:
                - Barcelona
                - Madrid
                - Amsterdam
              ats_job_posting_id: 1
              created_at: '2022-06-24T18:39:03.515Z'
              updated_at: '2022-06-24T18:39:03.515Z'
            - id: 5
              label: Attach your language certificate
              position: 0
              mandatory: false
              question_type: file
              ats_job_posting_id: 1
              created_at: '2022-06-24T18:39:03.515Z'
              updated_at: '2022-06-24T18:39:03.515Z'
    AtsQuestion:
      type: object
      properties:
        id:
          type: number
          example: 1337
        label:
          type: string
          example: Are you willing to relocate to Barcelona?
        position:
          type: number
          example: 0
        mandatory:
          type: boolean
          example: false
        question_type:
          type: string
          enum:
            - file
            - single_choice
            - multiple_choice
            - text
            - long_text
          example: single_choice
        options:
          type: array
          items:
            type: string
          example:
            - 'Yes'
            - 'No'
        ats_job_posting_id:
          type: number
          example: 1
        created_at:
          type: string
          example: '2022-06-24T18:39:03.515Z'
        updated_at:
          type: string
          example: '2022-06-24T18:39:03.515Z'
      required:
        - id
        - label
        - position
        - mandatory
        - question_type
        - ats_job_posting_id
        - created_at
        - updated_at
    AtsAnswer:
      type: object
      properties:
        id:
          type: number
          example: 10
        ats_question_id:
          type: number
          example: 1
        ats_application_id:
          type: number
          example: 2
        value:
          anyOf:
            - type: string
              example: Spain
            - type: array
              items:
                type: string
              example:
                - Barcelona
                - Madrid
            - type: object
              properties:
                filename:
                  type: string
                  example: my_porfolio.pdf
                url:
                  type: string
                  example: /path/to/the/file/my_porfolio.pdf
                byte_size:
                  type: number
                  example: 1024
                content_type:
                  type: string
                  example: application/pdf
              required:
                - filename
                - url
                - byte_size
                - content_type
      required:
        - id
        - ats_question_id
        - value
    LegalEntity:
      type: object
      properties:
        id:
          type: integer
          example: 1
        city:
          type: string
          example: Barcelona
        state:
          type: string
          example: Catalunia
        postal_code:
          type: string
          example: '04221'
        address_line_1:
          type: string
          example: Swatch strasse 3
        address_line_2:
          type: string
          example: Atiquen terceren
        country:
          type: string
          example: España
        company_id:
          type: integer
          example: 1
        legal_name:
          type: string
          example: Factorial
        tax_identification_number:
          type: string
          example: S0794867B
        currency:
          type: string
          example: EUR
    CustomField:
      type: object
      properties:
        id:
          type: integer
          example: 1
        label:
          type: string
          example: employee
        position:
          type: integer
          example: 90773647
        required:
          type: boolean
          example: false
        field_type:
          type: string
          example: text
        min_value:
          type: integer
          example: -439653
        max_value:
          type: integer
          example: 47114499
        choice_options:
          type: object
          properties:
            id:
              type: integer
              example: 1
            label:
              type: string
              example: Shirt Size
            value:
              type: string
              example: L
            is_active:
              type: boolean
              example: false
    CustomField_v2:
      type: object
      properties:
        id:
          type: integer
          example: 1
        label:
          type: string
          example: employee
        identifier:
          type: string
          example: label-1
        position:
          type: integer
          example: 90773647
        required:
          type: boolean
          example: false
        field_type:
          type: string
          example: text
        min_value:
          type: integer
          example: -439653
        max_value:
          type: integer
          example: 47114499
        slug_id:
          type: integer
          example: 47114499
        slug_name:
          type: string
          example: text
        choice_options:
          type: object
          properties:
            id:
              type: integer
              example: 1
            label:
              type: string
              example: Shirt Size
            value:
              type: string
              example: L
            is_active:
              type: boolean
              example: false
    Post:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: New Post
        description:
          type: string
          example: This is available until sunday
        type:
          type: string
          example: first_day
          enum:
            - event
            - announcement
            - first_day
            - birthday
            - workiversary
        allow_comments_and_reactions:
          type: boolean
          example: true
        location:
          type: string
          example: Green park
        published_at:
          type: string
          example: '2022-09-08T00:00:00.000Z'
        starts_at:
          type: string
          example: 2022-010-08T00:00:00.000Z
        ends_at:
          type: string
          example: '2022-10-09T00:00:00.000Z'
        created_at:
          type: string
          example: '2022-09-08T15:41:54.000Z'
        updated_at:
          type: string
          example: '2022-09-08T15:41:54.000Z'
        visits_count:
          type: integer
          example: 0
        comments_count:
          type: integer
          example: 0
        reactions_count:
          type: integer
          example: 0
        cover_image_url:
          type: string
          example: test-cover-image-jpg.com
        author_id:
          type: integer
          example: 1
        posts_group_id:
          type: integer
          example: 1
        target_id:
          type: integer
          example: 1
    LeaveType:
      type: object
      properties:
        id:
          type: integer
          example: 1
        accrues:
          type: boolean
          example: true
        active:
          type: boolean
          example: true
        approval_required:
          type: boolean
          example: false
        attachment:
          type: boolean
          example: false
        color:
          type: string
          example: 07A2AD
        identifier:
          type: string
          example: Holiday Leave Type
        name:
          type: string
          example: holiday
        visibility:
          type: boolean
          example: true
        workable:
          type: boolean
          example: false
    Leave:
      type: object
      properties:
        id:
          type: integer
          example: 1
        approved:
          type: boolean
          example: true
        description:
          type: string
          example: Medical appointment for 4 hours
        employee_id:
          type: integer
          example: 7
        finish_on:
          type: string
          example: '2022-03-03'
        half_day:
          type: string
          example: end_of_day
          enum:
            - beggining_of_day
            - end_of_day
        leave_type_id:
          type: integer
          example: 3
        start_on:
          type: string
          example: '2022-03-03'
        employee_full_name:
          type: string
          example: Hellen Factorial
        leave_type_name:
          type: string
          example: Medical appointment
        hours_amount_in_cents:
          type: integer
          example: '400'
    Leave_v2:
      type: object
      properties:
        id:
          type: integer
          example: 1
        approved:
          type: boolean
          example: true
        description:
          type: string
          example: Medical appointment for 4 hours
        employee_id:
          type: integer
          example: 7
        start_on:
          type: string
          example: '2022-04-29T12:00:00.000+00:00'
        finish_on:
          type: string
          example: '2022-04-29T16:00:00.000+00:00'
        half_day:
          type: string
          example: end_of_day
          enum:
            - beggining_of_day
            - end_of_day
        leave_type_id:
          type: integer
          example: 3
        leave_type_name:
          type: string
          example: Medical appointment
        employee_full_name:
          type: string
          example: Hellen Factorial
    Policy:
      type: object
      properties:
        id:
          type: integer
          example: 1
        main:
          type: boolean
          example: true
        name:
          type: string
          example: Holiday Policy
        default_allowance_id:
          type: integer
          example: 3
        description:
          type: string
          example: Hellen
        allowance_incidences:
          type: integer
          example: 0
    CompanyHoliday:
      type: object
      properties:
        id:
          type: integer
          example: 1
        summary:
          type: string
          example: A holiday set aside for team building.
        description:
          type: string
          example: Company event in our corporate headquartes at 9:00hs
        date:
          type: string
          example: '2006-09-10'
        half_day:
          type: string
          example: end_of_day
          enum:
            - beggining_of_day
            - end_of_day
        location_id:
          type: integer
          example: 17
    CustomValue:
      type: object
      properties:
        id:
          type: integer
          example: 1
        label:
          type: string
          example: Shirt Size
        value:
          type: string
          example: S
        field_id:
          type: integer
          example: 5
        required:
          type: boolean
          example: true
        instance_id:
          type: integer
          example: 1
    CustomValue_v2:
      type: object
      properties:
        id:
          type: integer
          example: 1
        label:
          type: string
          example: Shirt Size
        value:
          type: string
          example: S
        field_id:
          type: integer
          example: 5
        slug_id:
          type: integer
          example: 5
        slug_name:
          type: string
          example: employees questions
        required:
          type: boolean
          example: true
        instance_id:
          type: integer
          example: 1
    CustomResourceValue:
      type: object
      properties:
        '1':
          type: string
          example: Excellent
        '2':
          type: string
          example: Good
        id:
          type: integer
          example: 1
        employee_id:
          type: integer
          example: 3
    Company:
      type: object
      properties:
        id:
          type: integer
          example: 1
        gdpr_tos:
          type: boolean
          example: true
        legal_name:
          type: string
          example: Company Test SL
        locale:
          type: string
          example: en
        logo:
          type: string
          example: >-
            https://api.factorialhr.com/rails/active_storage/representations/redirect/e689/logo.png
        name:
          type: string
          example: Company Test
        onboarded_on:
          type: string
          example: '2022-06-23'
        subscription_plan:
          type: string
          example: free
        tin:
          type: string
          example: B66823530
        to_be_deleted:
          type: boolean
          example: false
        tos:
          type: boolean
          example: true
    Attendance:
      type: object
      properties:
        id:
          type: integer
          example: 1
        employee_id:
          type: integer
          example: 5
        clock_in:
          type: string
          example: '2022-06-23T18:00:33.000Z'
        clock_out:
          type: string
          example: '2022-06-23T20:00:33.000Z'
        observations:
          type: string
          example: First shift
        location_type:
          type: string
          example: office
          enum:
            - office
            - business_trip
            - work_from_home
        half_day:
          type: string
          example: beginning_of_day
          enum:
            - beginning_of_day
            - end_of_day
        in_location_latitude:
          type: number
          format: float
          example: -34.8601369070693
        in_location_longitude:
          type: number
          format: float
          example: 56.0008344819525
        in_location_accuracy:
          type: number
          format: float
          example: 1.4
        out_location_latitude:
          type: number
          format: float
          example: -34.8601369070693
        out_location_longitude:
          type: number
          format: float
          example: 56.0008344819525
        out_location_accuracy:
          type: number
          format: float
          example: 1.4
        workable:
          type: boolean
          example: false
        automatic_clock_in:
          type: boolean
          example: false
        automatic_clock_out:
          type: boolean
          example: false
        time_settings_break_configuration_id:
          nullable: true
          type: integer
          example: 1
    BreakConfigurationsForDate:
      type: object
      properties:
        date:
          type: string
          example: '2023-09-30'
        break_configurations:
          type: array
          items:
            $ref: '#/components/schemas/BreakConfiguration'
    BreakConfiguration:
      type: object
      properties:
        time_settings_break_configuration_id:
          type: integer
          example: 1
        name:
          type: string
          example: Coffee
        paid:
          type: boolean
          example: true
    InstallationSettings:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              leave_types:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    value:
                      type: string
              additional_compensation_types:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    value:
                      type: string
    Forbidden:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
    CustomHeader:
      type: object
      properties:
        id:
          type: integer
          example: 1
        label:
          type: string
          example: Shirt Size
        position:
          type: integer
          example: 1
    Webhook:
      type: object
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          example: employee_created
        target_url:
          type: string
          example: https://webhook.site/48103127-b1f6-3215-8f18-60fdbc013e3f
        company_id:
          type: integer
          example: 1
    Webhook_v2:
      type: object
      properties:
        id:
          type: integer
          example: 1
        subscription_type:
          type: string
          example: Employees::Events::EmployeeCreated
        name:
          type: string
          example: creating employee webhook
        challenge:
          type: string
          example: '9288376100399000'
        target_url:
          type: string
          example: https://webhook.site/48103127-b1f6-3215-8f18-60fdbc013e3f
        company_id:
          type: integer
          example: 1
    LeaveWebhook:
      type: object
      properties:
        id:
          type: integer
          example: 1
        approved:
          type: boolean
          example: true
        employee_id:
          type: integer
          example: 5
        start_on:
          type: string
          example: '2022-04-29T12:00:00.000+00:00'
        finish_on:
          type: string
          example: '2022-04-29T16:00:00.000+00:00'
        half_day:
          type: string
          example: end_of_day
          enum:
            - beggining_of_day
            - end_of_day
        leave_type_id:
          type: integer
          example: 3
    FamilySituation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        employee_id:
          type: integer
          example: 3
        civil_status:
          type: string
          example: married
          enum:
            - single
            - cohabitating
            - divorced
            - married
            - unknown
            - civil_partnership
            - separated
            - widow
            - not_applicable
        number_of_dependants:
          type: integer
          example: 1
    Event:
      type: object
      properties:
        id:
          type: string
          example: dfc5126-1a65-4cfa-b8ef-3988e22d89b3
        type:
          type: string
          example: Timeoff::Events::TimeoffPolicyCreated
        name:
          type: string
          example: Time-off policy created
        datetime:
          type: string
          example: '2021-09-20T10:56:06.620Z'
        resource_id:
          type: integer
          example: 1
    Supplement:
      type: object
      properties:
        id:
          type: integer
          example: 1
        employee_id:
          type: integer
          example: 2
        contracts_compensation_id:
          type: integer
          example: 5
        contracts_taxonomy_id:
          type: integer
          example: 5
        amount_in_cents:
          type: integer
          example: 30000
        unit:
          type: string
          example: usd
        effective_on:
          type: string
          example: '2022-03-13'
        updated_at:
          type: string
          example: '2022-03-15'
        description_entity:
          type: string
          example: Performance supplement
        created_by_access_id:
          type: integer
          example: 6
        payroll_policy_period_id:
          type: integer
          example: 2
    Code:
      type: object
      properties:
        id:
          type: integer
          example: 1
        codeable_id:
          type: integer
          example: 12
        integration:
          type: string
          example: a3nom
        codeable_type:
          type: string
          example: Employee
        code:
          type: string
          example: TEST_CODE
        company_id:
          type: integer
          example: 1
        forfait_jours:
          type: boolean
          example: false
    HiringVersion:
      type: object
      properties:
        id:
          type: integer
          example: 1
        effective_on:
          type: string
          example: '2022-03-13'
        employee_id:
          type: integer
          example: 2
        base_compensation_amount_in_cents:
          type: integer
          example: 500000
        base_compensation_type:
          type: string
          example: normal
        start_date:
          type: string
          example: '2022-03-19'
        end_date:
          type: string
          example: '2023-03-19'
        job_title:
          type: string
          example: Software Engineer
        working_hours_in_cents:
          type: integer
          example: 800
        working_period_unit:
          type: integer
          example: 8
    ContractVersion:
      type: object
      properties:
        id:
          type: integer
          example: 1
        employee_id:
          type: integer
          example: 2
        country:
          type: string
          example: es
        job_title:
          type: string
          example: Software Engineer
        role:
          type: string
          example: Backend Engineer
        level:
          type: string
          example: Junior
        effective_on:
          type: string
          example: '2022-02-13'
        starts_on:
          type: string
          example: '2022-02-19'
        ends_on:
          type: string
          example: '2023-02-19'
        has_payroll:
          type: boolean
          example: true
        salary_amount:
          type: integer
          example: 45000
        salary_frequency:
          type: string
          example: monthly
        working_week_days:
          type: string
          example: null
        working_hours:
          type: integer
          example: 8
        working_hours_frequency:
          type: string
          example: null
        es_has_teleworking_contract:
          type: boolean
          example: true
        es_cotization_group:
          type: integer
          example: 2
        es_contract_observations:
          type: string
          example: 8
        es_job_description:
          type: string
          example: Junior software engineer
        es_trial_period_ends_on:
          type: string
          example: null
        es_contract_type_id:
          type: integer
          example: 1
        es_working_day_type_id:
          type: integer
          example: 8
        es_education_level_id:
          type: integer
          example: 2
        es_professional_category_id:
          type: integer
          example: 15
        fr_employee_type:
          type: string
          example: null
        fr_forfait_jours:
          type: boolean
          example: false
        fr_jours_par_an:
          type: integer
          example: null
        fr_coefficient:
          type: integer
          example: null
        fr_contract_type_id:
          type: integer
          example: null
        fr_level_id:
          type: integer
          example: null
        fr_step_id:
          type: integer
          example: null
        fr_mutual_id:
          type: integer
          example: null
        fr_professional_category_id:
          type: integer
          example: null
        fr_work_type_id:
          type: integer
          example: null
        compensation_ids:
          type: array
          items:
            type: integer
            example:
              - 1
        created_at:
          type: string
          example: '2022-06-24T18:39:03.515Z'
        updated_at:
          type: string
          example: '2022-06-24T18:39:03.515Z'
    AtsCandidate:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: Bob
        last_name:
          type: string
          example: Stone
        full_name:
          type: string
          example: Bob Stone
        email:
          type: string
          example: bob_stone@factorial.co
        talent_pool:
          type: boolean
          example: true
        created_at:
          type: string
          example: '2021-12-28T13:17:58.000Z'
        updated_at:
          type: string
          example: '2021-12-28T13:17:58.000Z'
        source:
          type: string
          example: mannually added
        medium:
          type: string
          example: LinkedIn
    ShiftManagement:
      type: object
      properties:
        id:
          type: integer
          example: 1
        employee_id:
          type: integer
          example: 5
        start_at:
          type: string
          example: '2022-06-23T11:00:00.000+00:00'
        end_at:
          type: string
          example: '2022-06-23T17:00:00.000+00:00'
        state:
          type: string
          enum:
            - published, draft
          example: published
        notes:
          type: string
          example: Notes
        location_id:
          type: integer
          example: 2
        work_area_id:
          type: integer
          example: 2
        extra_hours:
          type: boolean
          example: false
    Expense:
      type: object
      properties:
        id:
          type: integer
          example: 1
        employee_id:
          type: integer
          example: 5
        company_id:
          type: integer
          example: 1
        merchant_name:
          type: string
          example: Expense 1
        category:
          type: string
          example: '4551'
        creation_type:
          type: string
          example: manual
        reference:
          type: string
          example: D34
        amount:
          type: integer
          example: 2000
        vat_amount:
          type: integer
          example: 2
        currency:
          type: string
          example: eur
        status:
          type: string
          enum:
            - draft
            - published
          example: draft
        description:
          type: string
          example: Meal
        effective_on:
          type: string
          example: '2022-07-25T12:51:16.000Z'
        status_updated_at:
          type: string
          example: '2022-07-25T12:51:16.000Z'
        files:
          type: array
          items:
            type: string
            example: https://factorial-api/expenses/meals.pdf
    Compensation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        contract_version_id:
          type: integer
          example: 5
        description:
          type: string
          example: Meals tuesday
        compensation_type:
          type: string
          example: fixed
          enum:
            - fixed
            - up_to
        amount:
          type: integer
          example: 123
        recurrence:
          type: string
          example: monthly
          enum:
            - monthly
            - every_2_months
            - every_3_months
            - every_4_months
            - every_5_months
            - every_6_months
            - every_7_months
            - every_8_months
            - every_9_months
            - every_10_months
            - every_11_months
            - every_12_months
        first_payment_on:
          type: string
          example: '2022-08-02'
        sync_with_supplements:
          type: boolean
          example: true
        contracts_taxonomy_id:
          type: integer
          example: 2
        payroll_policy_id:
          type: integer
          example: 2
        recurrence_count:
          type: integer
          example: 2
        starts_on:
          type: string
          example: '2022-08-02'
        unit:
          type: string
          example: money
          enum:
            - money
            - units
        calculation:
          type: string
          example: current_period
          enum:
            - current_period
            - previous_period'
    Workplace:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: First Workplace
        country:
          type: string
          example: es
        state:
          type: string
          example: CT
        city:
          type: string
          example: Barcelona
        address_line_1:
          type: string
          example: Swatch strasse 3
        address_line_2:
          type: string
          example: Atiquen terceren
        postal_code:
          type: string
          example: C1231
        phone_number:
          type: string
          example: '55555555'
        company_id:
          type: integer
          example: 2
        payroll_policy_id:
          type: integer
          example: 2
        main:
          type: boolean
          example: true
        timezone:
          type: string
          example: etc/UTC
    Taxonomy:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Taxonomy 1
        archived:
          type: boolean
          example: false
        default:
          type: boolean
          example: true
        legal_entity_id:
          type: integer
          example: 2
_id: 6308963fa95be1003673e2ec
