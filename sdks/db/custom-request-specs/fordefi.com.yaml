openapi: 3.1.0
info:
  title: Fordefi API
  version: 0.2.0
servers:
  - url: https://api.fordefi.com/
    description: Production
paths:
  /api/v1/blockchains:
    get:
      tags:
        - Blockchains
      summary: List Chains
      description: Get a list of all supported blockchains.
      operationId: list_chains_api_v1_blockchains_get
      parameters:
        - name: chain_types
          in: query
          required: false
          schema:
            title: Chain Types
            type: array
            items:
              $ref: '#/components/schemas/ChainType'
        - name: only_interacted_with
          in: query
          required: false
          schema:
            type: boolean
            default: false
            title: Only Interacted With
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBlockchainsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/blockchains/suggested-fees:
    get:
      tags:
        - Blockchains
      summary: Get Suggested Fees
      description: Get the suggested fees in a specific network.
      operationId: get_suggested_fees_api_v1_blockchains_suggested_fees_get
      parameters:
        - name: chains
          in: query
          required: false
          schema:
            title: Chains
            type: array
            items:
              $ref: '#/components/schemas/ChainUniqueId'
        - name: chain_types
          in: query
          required: false
          schema:
            title: Chain Types
            type: array
            items:
              $ref: '#/components/schemas/ChainType'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSuggestedFeesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/users:
    get:
      tags:
        - Users
      summary: List Users
      description: Get a list of users in the organization.
      operationId: list_users_api_v1_users_get
      parameters:
        - name: sort_by
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserSortableFields'
            title: Sort By
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: The page number to fetch.
            default: 1
            title: Page
          description: The page number to fetch.
        - name: size
          in: query
          required: false
          schema:
            type: integer
            maximum: 400
            minimum: 1
            description: The number of items per page.
            default: 50
            title: Size
          description: The number of items per page.
        - name: types
          in: query
          required: false
          schema:
            description: The types of the users to filter on.
            title: Types
            type: array
            items:
              $ref: '#/components/schemas/UserType'
          description: The types of the users to filter on.
        - name: roles
          in: query
          required: false
          schema:
            description: The roles of the users to filter on.
            title: Roles
            type: array
            items:
              $ref: '#/components/schemas/UserRole'
          description: The roles of the users to filter on.
        - name: states
          in: query
          required: false
          schema:
            description: >-
              The states of the users to filter on.  Is one of:
              <ul><li>`active`: The user can perform all actions in the Fordefi
              platform.<li>`onboarding`: The user has been approved but still
              needs to activate the account.<li>`pending_approval`: The user has
              been invited but not yet approved.<li>`deleted`: The user has been
              deleted.</ul>
            title: States
            type: array
            items:
              $ref: '#/components/schemas/UserState'
          description: >-
            The states of the users to filter on.  Is one of: <ul><li>`active`:
            The user can perform all actions in the Fordefi
            platform.<li>`onboarding`: The user has been approved but still
            needs to activate the account.<li>`pending_approval`: The user has
            been invited but not yet approved.<li>`deleted`: The user has been
            deleted.</ul>
        - name: include_deleted
          in: query
          required: false
          schema:
            default: false
            title: Include Deleted
            type: boolean
        - name: name
          in: query
          required: false
          schema:
            title: Name
            type: string
        - name: email
          in: query
          required: false
          schema:
            title: Email
            type: string
        - name: search
          in: query
          required: false
          schema:
            title: Search
            type: string
        - name: user_ids
          in: query
          required: false
          schema:
            description: The unique identifiers of the users.
            title: User Ids
            type: array
            items:
              type: string
              format: uuid
          description: The unique identifiers of the users.
        - name: external_id
          in: query
          required: false
          schema:
            title: External Id
            type: string
        - name: group_ids
          in: query
          required: false
          schema:
            description: The unique identifiers of the user groups.
            title: Group Ids
            type: array
            items:
              type: string
              format: uuid
          description: The unique identifiers of the user groups.
        - name: group_ids__not
          in: query
          required: false
          schema:
            description: The unique identifiers of the user groups to exclude.
            title: Group Ids  Not
            type: array
            items:
              type: string
              format: uuid
          description: The unique identifiers of the user groups to exclude.
        - name: states_on_groups
          in: query
          required: false
          schema:
            description: >-
              The states of the user groups to filter group_ids on. Is one of:
              <ul><li>`active`: The user group is active.<li>`pending_addition`:
              The user is pending to be added to the
              group.<li>`pending_removal`: The user is pending to be removed
              from the group.</ul>
            title: States On Groups
            type: array
            items:
              $ref: '#/components/schemas/UserStateOnGroup'
          description: >-
            The states of the user groups to filter group_ids on. Is one of:
            <ul><li>`active`: The user group is active.<li>`pending_addition`:
            The user is pending to be added to the group.<li>`pending_removal`:
            The user is pending to be removed from the group.</ul>
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/users/{id}:
    get:
      tags:
        - Users
      summary: Get User
      description: Gets the user that corresponds to the given ID.
      operationId: get_user_api_v1_users__id__get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the user to retrieve.
            title: Id
          description: ID of the user to retrieve.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/user-groups:
    get:
      tags:
        - User Groups
      summary: List User Groups
      description: Get a list of user groups
      operationId: list_user_groups_api_v1_user_groups_get
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: The page number to fetch.
            default: 1
            title: Page
          description: The page number to fetch.
        - name: size
          in: query
          required: false
          schema:
            type: integer
            maximum: 100
            minimum: 1
            description: The number of items per page.
            default: 50
            title: Size
          description: The number of items per page.
        - name: states
          in: query
          required: false
          schema:
            title: States
            type: array
            items:
              $ref: '#/components/schemas/UserGroupState'
        - name: user_group_ids
          in: query
          required: false
          schema:
            title: User Group Ids
            type: array
            items:
              type: string
              format: uuid
        - name: user_ids
          in: query
          required: false
          schema:
            title: User Ids
            type: array
            items:
              type: string
              format: uuid
        - name: modified_by
          in: query
          required: false
          schema:
            title: Modified By
            type: array
            items:
              type: string
              format: uuid
        - name: name
          in: query
          required: false
          schema:
            title: Name
            type: string
            minLength: 1
        - name: search
          in: query
          required: false
          schema:
            title: Search
            type: string
            minLength: 1
        - name: sort_by
          in: query
          required: false
          schema:
            title: Sort By
            type: array
            items:
              $ref: '#/components/schemas/UserGroupSortableFields'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserGroupsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/user-groups/{id}:
    get:
      tags:
        - User Groups
      summary: Get User Group
      description: Retrieve user group details
      operationId: get_user_group_api_v1_user_groups__id__get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the user group to retrieve.
            title: Id
          description: ID of the user group to retrieve.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/vaults:
    get:
      tags:
        - Vaults
      summary: List Vaults
      description: Get a list of all vaults in an organization.
      operationId: list_vaults_api_v1_vaults_get
      parameters:
        - name: sort_by
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/VaultSortableFields'
            title: Sort By
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: The page number to fetch.
            default: 1
            title: Page
          description: The page number to fetch.
        - name: size
          in: query
          required: false
          schema:
            type: integer
            maximum: 100
            minimum: 1
            description: The number of items per page.
            default: 50
            title: Size
          description: The number of items per page.
        - name: vault_ids
          in: query
          required: false
          schema:
            description: Vault IDs to filter on.
            title: Vault Ids
            type: array
            items:
              type: string
              format: uuid
          description: Vault IDs to filter on.
        - name: search
          in: query
          required: false
          schema:
            title: Search
            type: string
        - name: vault_types
          in: query
          required: false
          schema:
            description: Vault types to filter on.
            title: Vault Types
            type: array
            items:
              $ref: '#/components/schemas/VaultType'
          description: Vault types to filter on.
        - name: vault_states
          in: query
          required: false
          schema:
            description: Vault states to filter on.
            title: Vault States
            type: array
            items:
              $ref: '#/components/schemas/VaultState'
          description: Vault states to filter on.
        - name: keyset_ids
          in: query
          required: false
          schema:
            description: List of keyset IDs to filter on.
            title: Keyset Ids
            type: array
            items:
              type: string
              format: uuid
          description: List of keyset IDs to filter on.
        - name: key_holder_ids
          in: query
          required: false
          schema:
            description: List of key holder IDs to filter on.
            title: Key Holder Ids
            type: array
            items:
              type: string
              format: uuid
          description: List of key holder IDs to filter on.
        - name: vault_group_ids
          in: query
          required: false
          schema:
            description: >-
              List of vault group IDs to filter on. Filter applies to current
              and pending vault groups.
            title: Vault Group Ids
            type: array
            items:
              type: string
              format: uuid
          description: >-
            List of vault group IDs to filter on. Filter applies to current and
            pending vault groups.
        - name: exclude_vault_group_ids
          in: query
          required: false
          schema:
            description: List of vault group IDs to exclude.
            title: Exclude Vault Group Ids
            type: array
            items:
              type: string
              format: uuid
          description: List of vault group IDs to exclude.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVaultsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
    post:
      tags:
        - Vaults
      summary: Create Vault
      description: Create a new vault.
      operationId: create_vault_api_v1_vaults_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVaultRequest'
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVaultResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/DefinedPreconditionError_CreateVaultErrorType_
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '409':
          description: Already Exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/vaults/export:
    get:
      tags:
        - Vaults
      summary: Export Vaults With Assets
      description: Get a CSV-format list of balances of all vaults and their assets.
      operationId: export_vaults_with_assets_api_v1_vaults_export_get
      parameters:
        - name: vaults_ids
          in: query
          required: false
          schema:
            description: Vault IDs to filter on.
            title: Vaults Ids
            type: array
            items:
              type: string
              format: uuid
          description: Vault IDs to filter on.
      responses:
        '200':
          description: Exported vaults in CSV format
          content:
            text/csv:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/vaults/{id}:
    get:
      tags:
        - Vaults
      summary: Get Vault
      description: Retrieve vault details.
      operationId: get_vault_api_v1_vaults__id__get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the vault to retrieve.
            title: Id
          description: ID of the vault to retrieve.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVaultResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/vaults/{id}/assets/{asset_id}:
    get:
      tags:
        - Vaults
      summary: Get Vault Asset
      description: Get a specific asset in a vault.
      operationId: get_vault_asset_api_v1_vaults__id__assets__asset_id__get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the vault to retrieve.
            title: Id
          description: ID of the vault to retrieve.
        - name: asset_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the asset to retrieve.
            title: Asset Id
          description: ID of the asset to retrieve.
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: The page number to fetch.
            default: 1
            title: Page
          description: The page number to fetch.
        - name: size
          in: query
          required: false
          schema:
            type: integer
            maximum: 100
            minimum: 1
            description: The number of items per page.
            default: 50
            title: Size
          description: The number of items per page.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOwnedAssetResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/vaults/{id}/assets:
    get:
      tags:
        - Vaults
      summary: Get Vault Assets
      description: Get a list of all assets in a vault.
      operationId: get_vault_assets_api_v1_vaults__id__assets_get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the vault to retrieve.
            title: Id
          description: ID of the vault to retrieve.
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: The page number to fetch.
            default: 1
            title: Page
          description: The page number to fetch.
        - name: size
          in: query
          required: false
          schema:
            type: integer
            maximum: 100
            minimum: 1
            description: The number of items per page.
            default: 50
            title: Size
          description: The number of items per page.
        - name: chains
          in: query
          required: false
          schema:
            title: Chains
            type: array
            items:
              $ref: '#/components/schemas/ChainUniqueId'
        - name: asset_ids
          in: query
          required: false
          schema:
            title: Asset Ids
            type: array
            items:
              type: string
              format: uuid
        - name: is_hidden
          in: query
          required: false
          schema:
            title: Is Hidden
            type: boolean
        - name: search
          in: query
          required: false
          schema:
            title: Search
            type: string
        - name: sort_by
          in: query
          required: false
          schema:
            title: Sort By
            type: array
            items:
              $ref: '#/components/schemas/OwnedAssetsSortableFields'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOwnedAssetsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/vaults/{id}/name:
    put:
      tags:
        - Vaults
      summary: Rename Vault
      description: Rename an existing vault.
      operationId: rename_vault_api_v1_vaults__id__name_put
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the vault to rename.
            title: Id
          description: ID of the vault to rename.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameVaultRequest'
      responses:
        '204':
          description: Successful Response
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '409':
          description: Already Exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/vaults/{id}/addresses:
    post:
      tags:
        - Vaults
      summary: Create Address
      description: Create a new address.
      operationId: create_address_api_v1_vaults__id__addresses_post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the vault to create address in.
            title: Id
          description: ID of the vault to create address in.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVaultAddressRequest'
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVaultAddressResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/DefinedPreconditionError_CreateVaultAddressErrorType_
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
    get:
      tags:
        - Vaults
      summary: List Vault Addresses
      description: Get a list of all addresses in a vault.
      operationId: list_vault_addresses_api_v1_vaults__id__addresses_get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the vault.
            title: Id
          description: ID of the vault.
        - name: sort_by
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/VaultAddressSortableFields'
            title: Sort By
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: The page number to fetch.
            default: 1
            title: Page
          description: The page number to fetch.
        - name: size
          in: query
          required: false
          schema:
            type: integer
            maximum: 100
            minimum: 1
            description: The number of items per page.
            default: 50
            title: Size
          description: The number of items per page.
        - name: search
          in: query
          required: false
          schema:
            title: Search
            type: string
        - name: addresses
          in: query
          required: false
          schema:
            description: List of addresses to filter on.
            title: Addresses
            type: array
            items:
              type: string
          description: List of addresses to filter on.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVaultAddressesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/vaults/addresses/{id}/name:
    put:
      tags:
        - Vaults
      summary: Rename Vault Address
      description: Rename an existing vault address.
      operationId: rename_vault_address_api_v1_vaults_addresses__id__name_put
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the vault address to rename.
            title: Id
          description: ID of the vault address to rename.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameVaultRequest'
      responses:
        '204':
          description: Successful Response
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '409':
          description: Already Exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/vault-groups:
    get:
      tags:
        - Vault Groups
      summary: List Vault Groups
      description: Get a list of vault groups in the organization.
      operationId: list_vault_groups_api_v1_vault_groups_get
      parameters:
        - name: sort_by
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/VaultGroupSortableFields'
            title: Sort By
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: The page number to fetch.
            default: 1
            title: Page
          description: The page number to fetch.
        - name: size
          in: query
          required: false
          schema:
            type: integer
            maximum: 100
            minimum: 1
            description: The number of items per page.
            default: 50
            title: Size
          description: The number of items per page.
        - name: vault_group_ids
          in: query
          required: false
          schema:
            description: Vault group IDs to filter on.
            title: Vault Group Ids
            type: array
            items:
              type: string
              format: uuid
          description: Vault group IDs to filter on.
        - name: search
          in: query
          required: false
          schema:
            title: Search
            type: string
        - name: access_level
          in: query
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/ListVaultGroupsFilterByAccessLevel'
            default: view
            title: Access Level
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVaultGroupsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/assets/owned-assets/{id}:
    get:
      tags:
        - Assets
      summary: Get Owned Asset
      description: Get a a specific asset owned by an organization.
      operationId: get_owned_asset_api_v1_assets_owned_assets__id__get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the asset to retrieve.
            title: Id
          description: ID of the asset to retrieve.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOwnedAssetResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/assets/owned-assets:
    get:
      tags:
        - Assets
      summary: List Owned Assets
      description: Get a list of all assets owned by an organization.
      operationId: list_owned_assets_api_v1_assets_owned_assets_get
      parameters:
        - name: chains
          in: query
          required: false
          schema:
            title: Chains
            type: array
            items:
              $ref: '#/components/schemas/ChainUniqueId'
        - name: asset_ids
          in: query
          required: false
          schema:
            title: Asset Ids
            type: array
            items:
              type: string
              format: uuid
        - name: is_hidden
          in: query
          required: false
          schema:
            title: Is Hidden
            type: boolean
        - name: search
          in: query
          required: false
          schema:
            title: Search
            type: string
        - name: vault_ids
          in: query
          required: false
          schema:
            title: Vault Ids
            type: array
            items:
              type: string
              format: uuid
        - name: end_user_ids
          in: query
          required: false
          schema:
            title: End User Ids
            type: array
            items:
              type: string
              format: uuid
        - name: sort_by
          in: query
          required: false
          schema:
            title: Sort By
            type: array
            items:
              $ref: '#/components/schemas/OwnedAssetsSortableFields'
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: The page number to fetch.
            default: 1
            title: Page
          description: The page number to fetch.
        - name: size
          in: query
          required: false
          schema:
            type: integer
            maximum: 100
            minimum: 1
            description: The number of items per page.
            default: 50
            title: Size
          description: The number of items per page.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOwnedAssetsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/assets:
    put:
      tags:
        - Assets
      summary: Update Asset Configuration
      description: Update the asset's configuration under the entire organization.
      operationId: update_asset_configuration_api_v1_assets_put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAssetConfiguration'
        required: true
      responses:
        '204':
          description: Successful Response
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/assets/prices:
    post:
      tags:
        - Assets
      summary: Fetch Asset Prices
      description: Fetch the prices of assets.
      operationId: fetch_asset_prices_api_v1_assets_prices_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchAssetPricesRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchAssetPricesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/transactions/export:
    get:
      tags:
        - Transactions
      summary: Export Transactions
      description: Get a CSV-format list of transactions.
      operationId: export_transactions_api_v1_transactions_export_get
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            description: The amount of transactions to export, 1000 if not set.
            default: 1000
            title: Limit
          description: The amount of transactions to export, 1000 if not set.
        - name: created_before
          in: query
          required: false
          schema:
            title: Created Before
            type: string
            format: date-time
        - name: created_after
          in: query
          required: false
          schema:
            title: Created After
            type: string
            format: date-time
        - name: modified_after
          in: query
          required: false
          schema:
            title: Modified After
            type: string
            format: date-time
        - name: vault_ids
          in: query
          required: false
          schema:
            description: >-
              The filter applies both to transactions that have been signed by
              the vault and also to transactions that have interacted with the
              vault. 
            title: Vault Ids
            type: array
            items:
              type: string
              format: uuid
          description: >-
            The filter applies both to transactions that have been signed by the
            vault and also to transactions that have interacted with the vault. 
        - name: chains
          in: query
          required: false
          schema:
            title: Chains
            type: array
            items:
              $ref: '#/components/schemas/ChainUniqueId'
        - name: initiator_ids
          in: query
          required: false
          schema:
            title: Initiator Ids
            type: array
            items:
              type: string
              format: uuid
        - name: types
          in: query
          required: false
          schema:
            title: Types
            type: array
            items:
              $ref: '#/components/schemas/TransactionType'
        - name: sub_types
          in: query
          required: false
          schema:
            title: Sub Types
            type: array
            items:
              $ref: '#/components/schemas/TransactionSubType'
        - name: signer_types
          in: query
          required: false
          schema:
            title: Signer Types
            type: array
            items:
              $ref: '#/components/schemas/SignerType'
        - name: transaction_ids
          in: query
          required: false
          schema:
            title: Transaction Ids
            type: array
            items:
              type: string
              format: uuid
        - name: end_user_ids
          in: query
          required: false
          schema:
            title: End User Ids
            type: array
            items:
              type: string
              format: uuid
        - name: direction
          in: query
          required: false
          schema:
            title: Direction
            $ref: '#/components/schemas/TransactionDirection'
      responses:
        '200':
          description: Exported transactions in CSV format
          content:
            text/csv:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/transactions/{id}:
    get:
      tags:
        - Transactions
      summary: Get Transaction
      description: Retrieve transaction details.
      operationId: get_transaction_api_v1_transactions__id__get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the transaction to retrieve.
            title: Id
          description: ID of the transaction to retrieve.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTransactionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/transactions:
    get:
      tags:
        - Transactions
      summary: List Transactions
      description: Get a list of all transactions in an organization.
      operationId: list_transactions_api_v1_transactions_get
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: The page number to fetch.
            default: 1
            title: Page
          description: The page number to fetch.
        - name: size
          in: query
          required: false
          schema:
            type: integer
            maximum: 100
            minimum: 1
            description: The number of items per page.
            default: 50
            title: Size
          description: The number of items per page.
        - name: created_before
          in: query
          required: false
          schema:
            title: Created Before
            type: string
            format: date-time
        - name: created_after
          in: query
          required: false
          schema:
            title: Created After
            type: string
            format: date-time
        - name: modified_after
          in: query
          required: false
          schema:
            title: Modified After
            type: string
            format: date-time
        - name: vault_ids
          in: query
          required: false
          schema:
            description: >-
              The filter applies both to transactions that have been signed by
              the vault and also to transactions that have interacted with the
              vault. 
            title: Vault Ids
            type: array
            items:
              type: string
              format: uuid
          description: >-
            The filter applies both to transactions that have been signed by the
            vault and also to transactions that have interacted with the vault. 
        - name: chains
          in: query
          required: false
          schema:
            title: Chains
            type: array
            items:
              $ref: '#/components/schemas/ChainUniqueId'
        - name: initiator_ids
          in: query
          required: false
          schema:
            title: Initiator Ids
            type: array
            items:
              type: string
              format: uuid
        - name: types
          in: query
          required: false
          schema:
            title: Types
            type: array
            items:
              $ref: '#/components/schemas/TransactionType'
        - name: sub_types
          in: query
          required: false
          schema:
            title: Sub Types
            type: array
            items:
              $ref: '#/components/schemas/TransactionSubType'
        - name: signer_types
          in: query
          required: false
          schema:
            title: Signer Types
            type: array
            items:
              $ref: '#/components/schemas/SignerType'
        - name: transaction_ids
          in: query
          required: false
          schema:
            title: Transaction Ids
            type: array
            items:
              type: string
              format: uuid
        - name: end_user_ids
          in: query
          required: false
          schema:
            title: End User Ids
            type: array
            items:
              type: string
              format: uuid
        - name: direction
          in: query
          required: false
          schema:
            title: Direction
            $ref: '#/components/schemas/TransactionDirection'
        - name: states
          in: query
          required: false
          schema:
            description: >-
              State of the transaction. Can be one of:<ul> <li>`pending`</li>
              <li>`finalized`, which can be one of: <ul><li>`completed` </li>
              <li>`aborted` </li>  <li>`error_pushing_to_blockchain` </li>
              <li>`reverted`  </li> <li>`accelerated` </li>  <li>`canceled`
              </li>  </ul><li>`approved` </li> </ul>
            title: States
            type: array
            items:
              $ref: '#/components/schemas/TransactionState'
          description: >-
            State of the transaction. Can be one of:<ul> <li>`pending`</li>
            <li>`finalized`, which can be one of: <ul><li>`completed` </li>
            <li>`aborted` </li>  <li>`error_pushing_to_blockchain` </li>
            <li>`reverted`  </li> <li>`accelerated` </li>  <li>`canceled` </li> 
            </ul><li>`approved` </li> </ul>
        - name: is_hidden
          in: query
          required: false
          schema:
            title: Is Hidden
            type: boolean
        - name: include_full_response
          in: query
          required: false
          schema:
            type: boolean
            default: true
            title: Include Full Response
        - name: sort_by
          in: query
          required: false
          schema:
            title: Sort By
            type: array
            items:
              $ref: '#/components/schemas/TransactionSortableFields'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTransactionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
    post:
      tags:
        - Transactions
      summary: Create Transaction
      description: Create a new transaction.
      operationId: create_transaction_api_v1_transactions_post
      parameters:
        - name: x-signature
          in: header
          required: false
          schema:
            description: >-
              Signature of the body. Base64 encoded string. If the request is
              made programatically by an API user, signing of the request is
              required and is intended to protect you from malicious backends. 
            title: X-Signature
            type: string
            example: SGVsbG8=
          description: >-
            Signature of the body. Base64 encoded string. If the request is made
            programatically by an API user, signing of the request is required
            and is intended to protect you from malicious backends. 
        - name: x-timestamp
          in: header
          required: false
          schema:
            description: >-
              Timestamp of the signature. Integer. Specify an Epoch date. If the
              request is made programatically by an API user, the timestamp of
              the request is required and is intended to protect you from replay
              attacks.
            title: X-Timestamp
            type: integer
          description: >-
            Timestamp of the signature. Integer. Specify an Epoch date. If the
            request is made programatically by an API user, the timestamp of the
            request is required and is intended to protect you from replay
            attacks.
        - name: x-idempotence-id
          in: header
          required: false
          schema:
            description: Optional idempotence ID of a transaction.
            title: X-Idempotence-Id
            type: string
            format: uuid
          description: Optional idempotence ID of a transaction.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequest'
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTransactionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/DefinedPreconditionError_CreateTransactionErrorType_
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/transactions/{id}/approve:
    post:
      tags:
        - Transactions
      summary: Approve Transaction
      description: >-
        Approve a transaction.


        A transaction awaits approval when the caller API user has been
        specified as a

        potential approver in the policy and the transaction

        is in the `waiting_for_approval` state.
      operationId: approve_transaction_api_v1_transactions__id__approve_post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the transaction to approve.
            title: Id
          description: ID of the transaction to approve.
      responses:
        '204':
          description: Successful Response
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/DefinedPreconditionError_ApproveTransactionErrorType_
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/transactions/{id}/abort:
    post:
      tags:
        - Transactions
      summary: Abort Transaction
      description: >-
        Abort a transaction.


        Abort is possible only for a transaction that is in one of the following
        states:
           <ul>
           <li>Waiting for approval
           <li>Approved
           </ul>

        The aborting user must be one of the following:

        <ul>

        <li>The user who created the transaction

        <li>An admin

        <li>A legitimate approver

        </ul>


        API users can abort only the transactions they created.
      operationId: abort_transaction_api_v1_transactions__id__abort_post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the transaction to abort.
            title: Id
          description: ID of the transaction to abort.
      responses:
        '204':
          description: Successful Response
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/DefinedPreconditionError_AbortTransactionErrorType_
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/transactions/{id}/release:
    post:
      tags:
        - Transactions
      summary: Release Transaction
      description: Release a transaction.
      operationId: release_transaction_api_v1_transactions__id__release_post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the transaction to release.
            title: Id
          description: ID of the transaction to release.
        - name: x-signature
          in: header
          required: false
          schema:
            description: >-
              Signature of the body. Base64 encoded string. If the request is
              made programatically by an API user, signing of the request is
              required and is intended to protect you from malicious backends. 
            title: X-Signature
            type: string
            example: SGVsbG8=
          description: >-
            Signature of the body. Base64 encoded string. If the request is made
            programatically by an API user, signing of the request is required
            and is intended to protect you from malicious backends. 
        - name: x-timestamp
          in: header
          required: false
          schema:
            description: >-
              Timestamp of the signature. Integer. Specify an Epoch date. If the
              request is made programatically by an API user, the timestamp of
              the request is required and is intended to protect you from replay
              attacks.
            title: X-Timestamp
            type: integer
          description: >-
            Timestamp of the signature. Integer. Specify an Epoch date. If the
            request is made programatically by an API user, the timestamp of the
            request is required and is intended to protect you from replay
            attacks.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseTransactionRequest'
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseTransactionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/DefinedPreconditionError_ReleaseTransactionErrorType_
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/transactions/describe:
    post:
      tags:
        - Transactions
      summary: Describe Transaction
      description: >-
        Get the current blockchain fee price and estimate the total transaction
        fee.
      operationId: describe_transaction_api_v1_transactions_describe_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeTransactionRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeTransactionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/DefinedPreconditionError_CreateTransactionErrorType_
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/transactions/predict:
    post:
      tags:
        - Transactions
      summary: Predict Transaction
      description: >-
        Simulate the transaction and show the exact token's balance change, in
        addition to the fee estimation.
      operationId: predict_transaction_api_v1_transactions_predict_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PredictTransactionRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictTransactionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/DefinedPreconditionError_PredictTransactionErrorType_
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/transactions/{id}/update-spam-state:
    put:
      tags:
        - Transactions
      summary: Update Transaction Spam State
      description: Update transaction's spam state.
      operationId: >-
        update_transaction_spam_state_api_v1_transactions__id__update_spam_state_put
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the transaction to update spam state.
            title: Id
          description: ID of the transaction to update spam state.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTransactionSpamStateRequest'
      responses:
        '204':
          description: Successful Response
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/addressbook/contacts:
    get:
      tags:
        - Address Book
      summary: List Contacts
      description: Get a list of all contacts in an organization.
      operationId: list_contacts_api_v1_addressbook_contacts_get
      parameters:
        - name: sort_by
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ContactSortableFields'
            title: Sort By
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: The page number to fetch.
            default: 1
            title: Page
          description: The page number to fetch.
        - name: size
          in: query
          required: false
          schema:
            type: integer
            maximum: 100
            minimum: 1
            description: The number of items per page.
            default: 50
            title: Size
          description: The number of items per page.
        - name: contact_ids
          in: query
          required: false
          schema:
            description: The contact IDs to filter by.
            title: Contact Ids
            type: array
            items:
              type: string
              format: uuid
          description: The contact IDs to filter by.
        - name: search
          in: query
          required: false
          schema:
            title: Search
            type: string
        - name: states
          in: query
          required: false
          schema:
            description: The states to filter by.
            title: States
            type: array
            items:
              $ref: '#/components/schemas/AddressBookContactState'
          description: The states to filter by.
        - name: chain_types
          in: query
          required: false
          schema:
            description: The chain types to filter by.
            title: Chain Types
            type: array
            items:
              $ref: '#/components/schemas/ChainType'
          description: The chain types to filter by.
        - name: chains
          in: query
          required: false
          schema:
            description: The chain unique ids to filter by.
            title: Chains
            type: array
            items:
              $ref: '#/components/schemas/ChainUniqueId'
          description: The chain unique ids to filter by.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAddressBookContactResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/webhooks/test:
    post:
      tags:
        - Webhooks
      summary: Test Webhook
      description: Test a webhook.
      operationId: test_webhook_api_v1_webhooks_test_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestWebhookRequest'
        required: true
      responses:
        '204':
          description: Successful Response
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/DefinedPreconditionError_TestWebhookErrorType_
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
      callbacks:
        webhook_event:
          '{$request.body.url}':
            post:
              tags:
                - Webhooks
              summary: Webhook Event
              operationId: webhook_event__request_body_url__post
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/WebhookEvent'
                required: true
              responses:
                '200':
                  description: Successful Response
                  content:
                    application/json:
                      schema: {}
                '422':
                  description: Validation Error
  /api/v1/webhooks/trigger/transaction/{id}:
    post:
      tags:
        - Webhooks
      summary: Trigger Transaction Webhook
      description: Trigger transaction create and latest state via webhooks.
      operationId: >-
        trigger_transaction_webhook_api_v1_webhooks_trigger_transaction__id__post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the transaction to send events for.
            title: Id
          description: ID of the transaction to send events for.
      responses:
        '204':
          description: Successful Response
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/keysets:
    get:
      tags:
        - Keysets
      summary: List Keysets
      description: Get a list of all keysets.
      operationId: list_keysets_api_v1_keysets_get
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: The page number to fetch.
            default: 1
            title: Page
          description: The page number to fetch.
        - name: size
          in: query
          required: false
          schema:
            type: integer
            maximum: 100
            minimum: 1
            description: The number of items per page.
            default: 50
            title: Size
          description: The number of items per page.
        - name: keyset_ids
          in: query
          required: false
          schema:
            title: Keyset Ids
            type: array
            items:
              type: string
              format: uuid
        - name: user_ids
          in: query
          required: false
          schema:
            title: User Ids
            type: array
            items:
              type: string
              format: uuid
        - name: scopes
          in: query
          required: false
          schema:
            title: Scopes
            type: array
            items:
              $ref: '#/components/schemas/KeysetScope'
        - name: search
          in: query
          required: false
          schema:
            title: Search
            type: string
        - name: sort_by
          in: query
          required: false
          schema:
            title: Sort By
            type: array
            items:
              $ref: '#/components/schemas/KeysetSortableFields'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListKeysetsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
    post:
      tags:
        - Keysets
      summary: Create Keyset
      description: Create a new keyset.
      operationId: create_keyset_api_v1_keysets_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKeysetRequest'
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateKeysetResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/DefinedPreconditionError_CreateKeysetErrorType_
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '409':
          description: Already Exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/keysets/{id}:
    get:
      tags:
        - Keysets
      summary: Get Keyset
      description: Retrieve keyset details.
      operationId: get_keyset_api_v1_keysets__id__get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the keyset to retrieve.
            title: Id
          description: ID of the keyset to retrieve.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetKeysetResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/end-users:
    get:
      tags:
        - End Users
      summary: List End Users
      description: Get a list of end users in the organization.
      operationId: list_end_users_api_v1_end_users_get
      parameters:
        - name: sort_by
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/EndUserSortableFields'
            title: Sort By
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: The page number to fetch.
            default: 1
            title: Page
          description: The page number to fetch.
        - name: size
          in: query
          required: false
          schema:
            type: integer
            maximum: 100
            minimum: 1
            description: The number of items per page.
            default: 50
            title: Size
          description: The number of items per page.
        - name: search
          in: query
          required: false
          schema:
            title: Search
            type: string
        - name: user_ids
          in: query
          required: false
          schema:
            description: The unique identifiers of the users.
            title: User Ids
            type: array
            items:
              type: string
              format: uuid
          description: The unique identifiers of the users.
        - name: external_id
          in: query
          required: false
          schema:
            title: External Id
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEndUsersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
    post:
      tags:
        - End Users
      summary: Create End User
      description: Create a new end user.
      operationId: create_end_user_api_v1_end_users_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEndUserRequest'
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEndUserResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/DefinedPreconditionError_CreateEndUserErrorType_
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '409':
          description: Already Exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/end-users/{id}:
    get:
      tags:
        - End Users
      summary: Get End User
      description: Gets the end user that corresponds to the given ID.
      operationId: get_end_user_api_v1_end_users__id__get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the end user to retrieve.
            title: Id
          description: ID of the end user to retrieve.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEndUserResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/authorization-tokens:
    post:
      tags:
        - Authorization Tokens
      summary: Issue Authorization Token
      description: Issue authorization token for an end user.
      operationId: issue_authorization_token_api_v1_authorization_tokens_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueAuthTokenRequest'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueAuthTokenResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/DefinedPreconditionError_IssueEndUserAuthTokenErrorType_
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
    get:
      tags:
        - Authorization Tokens
      summary: List Authorization Tokens
      description: List authorization tokens of end users.
      operationId: list_authorization_tokens_api_v1_authorization_tokens_get
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: The page number to fetch.
            default: 1
            title: Page
          description: The page number to fetch.
        - name: size
          in: query
          required: false
          schema:
            type: integer
            maximum: 100
            minimum: 1
            description: The number of items per page.
            default: 50
            title: Size
          description: The number of items per page.
        - name: user_ids
          in: query
          required: false
          schema:
            description: The unique identifiers of the users.
            title: User Ids
            type: array
            items:
              type: string
              format: uuid
          description: The unique identifiers of the users.
        - name: user_types
          in: query
          required: false
          schema:
            description: User types to filter. Only end users are currently supported.
            title: User Types
            type: array
            items:
              const: end_user
          description: User types to filter. Only end users are currently supported.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAuthTokensResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
  /api/v1/authorization-tokens/{id}:
    delete:
      tags:
        - Authorization Tokens
      summary: Delete Authorization Token
      description: Delete authorization token of an end user.
      operationId: delete_authorization_token_api_v1_authorization_tokens__id__delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the authorization token to delete.
            title: Id
          description: ID of the authorization token to delete.
      responses:
        '204':
          description: Successful Response
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedError'
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '403':
          description: Forbidden User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceError'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
components:
  schemas:
    AbortTransactionErrorType:
      type: string
      enum:
        - invalid_transaction_state
        - non_managed_transaction
        - transactions_already_aborted
        - transaction_is_in_batch
      title: AbortTransactionErrorType
    ActionSigner:
      properties:
        user:
          allOf:
            - $ref: '#/components/schemas/UserRef'
          description: Possible signer user
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: When the signer received/signed the action
        has_signed:
          type: boolean
          title: Has Signed
          description: Whether the signer signed the action
      type: object
      required:
        - user
        - modified_at
        - has_signed
      title: ActionSigner
      description: Represents a single signer in an action
    ActionSigningRequest:
      properties:
        signers:
          items:
            $ref: '#/components/schemas/ActionSigner'
          type: array
          title: Signers
          description: >-
            A list of required signers. A signer can be a person or an API
            Signer.
      type: object
      required:
        - signers
      title: ActionSigningRequest
      description: Represents a device sign request for an action in the Foredefi platform
    AddressBookContact:
      oneOf:
        - $ref: '#/components/schemas/CosmosAddressBookContact'
        - $ref: '#/components/schemas/EVMAddressBookContact'
        - $ref: '#/components/schemas/SolanaAddressBookContact'
        - $ref: '#/components/schemas/UtxoAddressBookContact'
      title: AddressBookContact
      description: Represents a contact in the Fordefi platform
      discriminator:
        propertyName: chain_type
        mapping:
          cosmos: '#/components/schemas/CosmosAddressBookContact'
          evm: '#/components/schemas/EVMAddressBookContact'
          solana: '#/components/schemas/SolanaAddressBookContact'
          utxo: '#/components/schemas/UtxoAddressBookContact'
    AddressBookContactChangeReason:
      type: string
      enum:
        - creation
        - modification
      title: AddressBookContactChangeReason
    AddressBookContactChanges:
      properties:
        is_being_edited:
          type: boolean
          title: Is Being Edited
          description: '`True` if the contact is being edited, `False` otherwise.'
          deprecated: true
        change_request_id:
          title: Change Request Id
          description: The change request ID of the contact.
          type: string
          format: uuid
        change_request_reason:
          allOf:
            - $ref: '#/components/schemas/AddressBookContactChangeReason'
          description: The reason for the change request.
      type: object
      required:
        - is_being_edited
        - change_request_reason
      title: AddressBookContactChanges
      description: Represents pending changes for a contact in the Fordefi platform
    AddressBookContactState:
      type: string
      enum:
        - pending
        - active
        - deleted
      title: AddressBookContactState
    AddressLookupTableState:
      properties:
        addresses:
          items:
            $ref: '#/components/schemas/EnrichedSolanaAddress'
          type: array
          title: Addresses
          description: The addresses that are stored in the table.
        authority:
          description: The authority address which must sign for each modification.
          $ref: '#/components/schemas/EnrichedSolanaAddress'
        deactivation_slot:
          type: string
          pattern: ^0*[1-9]\d*$
          title: Deactivation Slot
          description: >-
            The table can be closed when the deactivation slot is no longer the
            recent slot.
          example: '1000000000000000000'
        last_extended_slot:
          type: string
          pattern: ^0*[1-9]\d*$
          title: Last Extended Slot
          description: >-
            The number of the last slot in which a change constitutes an
            extension of the table.
          example: '1000000000000000000'
        last_extended_slot_start_index:
          type: string
          pattern: ^\d+$
          title: Last Extended Slot Start Index
          description: >-
            The start index where the table was last extended from during the
            `last_extended_slot`.
          example: '1000000000000000000'
      type: object
      required:
        - addresses
        - deactivation_slot
        - last_extended_slot
        - last_extended_slot_start_index
      title: AddressLookupTableState
    AllowanceDetails:
      properties:
        type:
          const: allowance
          title: Type
          description: 'A transaction involving an allowance. '
        spender:
          $ref: '#/components/schemas/EnrichedEvmAddress'
      type: object
      required:
        - type
        - spender
      title: AllowanceDetails
    AllowanceEffect:
      oneOf:
        - $ref: '#/components/schemas/Erc20AllowanceChange'
        - $ref: '#/components/schemas/Erc721AllowanceChange'
        - $ref: '#/components/schemas/Erc721AllowanceForAllChange'
        - $ref: '#/components/schemas/Erc1155AllowanceForAllChange'
      title: AllowanceEffect
      discriminator:
        propertyName: type
        mapping:
          erc1155_for_all: '#/components/schemas/Erc1155AllowanceForAllChange'
          erc20: '#/components/schemas/Erc20AllowanceChange'
          erc721: '#/components/schemas/Erc721AllowanceChange'
          erc721_for_all: '#/components/schemas/Erc721AllowanceForAllChange'
    AminoMessage:
      properties:
        type:
          type: string
          title: Type
          description: Message type.
        value:
          type: string
          title: Value
          description: Message value.
      type: object
      required:
        - type
        - value
      title: AminoMessage
    AminoMessagesList:
      properties:
        format:
          const: amino
          title: Format
        messages:
          items:
            $ref: '#/components/schemas/AminoMessage'
          type: array
          title: Messages
          description: List of messages in amino format.
      type: object
      required:
        - format
        - messages
      title: AminoMessagesList
    AminoRequestData:
      properties:
        format:
          const: amino
          title: Format
        messages:
          items:
            $ref: '#/components/schemas/AminoMessage'
          type: array
          title: Messages
          description: List of messages in amino format.
        memo:
          title: Memo
          description: Transaction memo.
          default: ''
          type: string
        std_fee:
          allOf:
            - $ref: '#/components/schemas/StdFeeRequest'
          description: Fee info for this transaction.
        timeout_height:
          type: integer
          minimum: 0
          title: Timeout Height
          description: Timeout height for this transaction.
          default: 0
      type: object
      required:
        - format
        - messages
        - std_fee
      title: AminoRequestData
    AminoSignDoc:
      properties:
        format:
          const: amino
          title: Format
        sign_doc:
          allOf:
            - $ref: '#/components/schemas/StdSignDoc'
          description: Sign doc for amino format.
      type: object
      required:
        - format
        - sign_doc
      title: AminoSignDoc
    ApiSigner:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        user_type:
          const: api_signer
          title: User Type
          description: The type of the user.
        name:
          type: string
          title: Name
          description: The name of the user.
          example: John Doe
        state:
          type: string
          enum:
            - active
            - onboarding
            - deleted
          title: State
          description: >-
            The state of the user. Is one of: <ul><li>`active`: The user can
            perform all actions in the Fordefi platform.<li>`onboarding`: The
            user has been approved but still needs to activate the
            account.<li>`deleted`: The user has been deleted.</ul>
        last_keep_alive_at:
          title: Last Keep Alive At
          description: The last date and time when API Signer sent a keep-alive.
          type: string
          format: date-time
      type: object
      required:
        - id
        - created_at
        - modified_at
        - user_type
        - name
        - state
      title: ApiSigner
      description: Represents an API Signer in the Fordefi platform.
    ApiSignerRef:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the user in the Fordefi platform.
        user_type:
          const: api_signer
          title: User Type
          description: The type of the user.
        name:
          type: string
          title: Name
          description: The name of the user.
        state:
          type: string
          enum:
            - active
            - onboarding
            - deleted
          title: State
          description: The state of the user.
      type: object
      required:
        - id
        - user_type
        - name
        - state
      title: ApiSignerRef
    ApiUser:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        user_type:
          const: api_user
          title: User Type
          description: The type of the user.
        name:
          type: string
          title: Name
          description: The name of the user.
          example: John Doe
        state:
          type: string
          enum:
            - active
            - deleted
          title: State
          description: >-
            The state of the user. Is one of: <ul><li>`active`: The user can
            perform all actions in the Fordefi platform.<li>`deleted`: The user
            has been deleted.</ul>
        role:
          allOf:
            - $ref: '#/components/schemas/UserRole'
          description: The role of the user.
        user_groups:
          title: User Groups
          description: The groups the user belongs to.
          items:
            $ref: '#/components/schemas/UserGroupRef'
          type: array
        pending_addition_to_user_groups:
          title: Pending Addition To User Groups
          description: The groups the user is pending to be added to.
          items:
            $ref: '#/components/schemas/UserGroupRef'
          type: array
        pending_removal_from_user_groups:
          title: Pending Removal From User Groups
          description: The groups the user is pending to be removed from.
          items:
            $ref: '#/components/schemas/UserGroupRef'
          type: array
      type: object
      required:
        - id
        - created_at
        - modified_at
        - user_type
        - name
        - state
        - role
      title: ApiUser
      description: Represents an API user in the Fordefi platform.
    ApiUserRef:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the user in the Fordefi platform.
        user_type:
          const: api_user
          title: User Type
          description: The type of the user.
        name:
          type: string
          title: Name
          description: The name of the user.
        state:
          type: string
          enum:
            - active
            - deleted
          title: State
          description: The state of the user.
        role:
          allOf:
            - $ref: '#/components/schemas/UserRole'
          description: The role of the user.
      type: object
      required:
        - id
        - user_type
        - name
        - state
        - role
      title: ApiUserRef
    ApprovalDecision:
      type: string
      enum:
        - pending
        - approve
        - not_participated
      title: ApprovalDecision
      description: Represents a decision state of a single approver
    ApprovalRequest:
      properties:
        state:
          allOf:
            - $ref: '#/components/schemas/ApprovalRequestState'
          description: The state of the approval request.
        quorum_size:
          type: integer
          title: Quorum Size
          description: The number of approvers required to approve the transaction.
        approvers:
          items:
            $ref: '#/components/schemas/RequestApprover'
          type: array
          title: Approvers
          description: A list of the possible approvers.
        approval_groups:
          title: Approval Groups
          description: A list of the possible approvers from different groups.
          items:
            $ref: '#/components/schemas/ApprovalRequestGroup'
          type: array
        error_message:
          title: Error Message
          description: The error message if the request failed.
          type: string
      type: object
      required:
        - state
        - quorum_size
        - approvers
      title: ApprovalRequest
      description: Represents an approval request for an action in the Fordefi platform
    ApprovalRequestGroup:
      properties:
        quorum_size:
          type: integer
          title: Quorum Size
          description: The number of approvers required to approve the transaction.
        approvers:
          items:
            $ref: '#/components/schemas/RequestApprover'
          type: array
          title: Approvers
          description: A list of the possible approvers.
      type: object
      required:
        - quorum_size
        - approvers
      title: ApprovalRequestGroup
    ApprovalRequestState:
      type: string
      enum:
        - created
        - approved
        - insufficient_approvers
        - auto_approved
        - failed
      title: ApprovalRequestState
      description: Represents the whole approval request state
    ApprovalState:
      type: string
      enum:
        - pending
        - approved
        - unauthorized
        - not_participated
      title: ApprovalState
      description: Represents an approval state of a single approver
    ApproveTransactionErrorType:
      type: string
      enum:
        - invalid_transaction_state
        - non_managed_transaction
      title: ApproveTransactionErrorType
    Asset:
      oneOf:
        - $ref: '#/components/schemas/CosmosAsset'
        - $ref: '#/components/schemas/EvmAsset'
        - $ref: '#/components/schemas/SolanaAsset'
        - $ref: '#/components/schemas/UtxoAsset'
      title: Asset
      discriminator:
        propertyName: type
        mapping:
          cosmos_asset: '#/components/schemas/CosmosAsset'
          evm_asset: '#/components/schemas/EvmAsset'
          solana_asset: '#/components/schemas/SolanaAsset'
          utxo_asset: '#/components/schemas/UtxoAsset'
    AssetIdentifierRequest:
      oneOf:
        - $ref: '#/components/schemas/CosmosAssetIdentifierRequest'
        - $ref: '#/components/schemas/EvmAssetIdentifierRequest'
        - $ref: '#/components/schemas/SolanaAssetIdentifierRequest'
        - $ref: '#/components/schemas/UtxoAssetIdentifierRequest'
      title: AssetIdentifierRequest
      discriminator:
        propertyName: type
        mapping:
          cosmos: '#/components/schemas/CosmosAssetIdentifierRequest'
          evm: '#/components/schemas/EvmAssetIdentifierRequest'
          solana: '#/components/schemas/SolanaAssetIdentifierRequest'
          utxo: '#/components/schemas/UtxoAssetIdentifierRequest'
    AuthToken:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        user_id:
          type: string
          format: uuid
          title: User Id
          description: ID of the end user the authorization token is issued for.
        expired_at:
          type: string
          format: date-time
          title: Expired At
          description: Token expiration time.
        user_type:
          const: end_user
          title: User Type
          description: Type of the user the authorization token is issued for.
      type: object
      required:
        - id
        - created_at
        - modified_at
        - user_id
        - expired_at
        - user_type
      title: AuthToken
    Balances:
      properties:
        mined:
          type: string
          pattern: ^\d+$
          title: Mined
          description: The cryptocurrency mined balance of the asset.
          example: '1000000000000000000'
        pending_incoming:
          type: string
          pattern: ^\d+$
          title: Pending Incoming
          description: The cryptocurrency pending balance of the asset.
          example: '1000000000000000000'
      type: object
      required:
        - mined
        - pending_incoming
      title: Balances
      description: The cryptocurrency balances of the asset.
    BaseError:
      properties:
        title:
          type: string
          title: Title
          description: Human-readable error message.
        detail:
          type: string
          title: Detail
          description: Detailed error message.
        request_id:
          title: Request Id
          description: Request ID - for debugging purposes.
          type: string
      type: object
      required:
        - title
        - detail
      title: BaseError
    BatchData:
      properties:
        batch_id:
          type: string
          format: uuid
          title: Batch Id
          description: The unique identifier of the batch.
        index_in_batch:
          type: integer
          title: Index In Batch
          description: Index of transaction in the batch.
        batch_size:
          type: integer
          title: Batch Size
          description: The number of transactions in the batch.
      type: object
      required:
        - batch_id
        - index_in_batch
        - batch_size
      title: BatchData
    BinaryHashPayload:
      properties:
        format:
          const: hash_binary
          title: Format
          description: ''
        hash_binary:
          type: string
          minLength: 1
          title: Hash Binary
          description: >-
            The payload to sign, according to the standard ECDSA binary
            representation, encoded in base64 format. Reference:
            https://www.rfc-editor.org/rfc/rfc6979#section-2.3.2
          example: SGVsbG8=
      type: object
      required:
        - format
        - hash_binary
      title: BinaryHashPayload
    BitcoinVaultCreateAddressType:
      type: string
      enum:
        - legacy
        - segwit
      title: BitcoinVaultCreateAddressType
    BlackBoxSignature:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        managed_transaction_data:
          allOf:
            - $ref: '#/components/schemas/ManagedTransactionData'
          description: >-
            Managed transaction data. Presented if the transaction was initiated
            from the Fordefi system itself, in contrast to unmanaged
            transactions (which are, for example, transfers of funds into a
            vault visible to Fordefi). 
        signatures:
          items:
            $ref: '#/components/schemas/Signature'
          type: array
          title: Signatures
          description: The transaction signatures.
        note:
          title: Note
          description: An optional transaction note.
          type: string
        spam_state:
          allOf:
            - $ref: '#/components/schemas/TransactionSpamState'
          description: >-
            `automatically_set` if the transaction was automatically set as spam
            by Fordefi, `manually_set` if the transaction was manually set as
            spam by a user, and `unset` if the transaction was not set as spam.
          default: unset
        direction:
          allOf:
            - $ref: '#/components/schemas/TransactionDirection'
          description: The direction of the transaction.
        type:
          const: black_box_signature
          title: Type
          description: Black Box signature type.
        state:
          allOf:
            - $ref: '#/components/schemas/BlackBoxSignatureState'
          description: The state of the black box signature.
        state_changes:
          items:
            $ref: '#/components/schemas/BlackBoxSignatureStateChange'
          type: array
          title: State Changes
          description: The state changes of the black box signature.
        payload:
          type: string
          minLength: 1
          title: Payload
          description: The payload requested to be signed, represented in base64 format.
          example: SGVsbG8=
        vault:
          allOf:
            - $ref: '#/components/schemas/VaultRef'
          description: The vault whose key has been used for signing.
        details:
          oneOf:
            - $ref: '#/components/schemas/BlackBoxSignatureEcdsaStarkDetails'
            - $ref: '#/components/schemas/BlackBoxSignatureEcdsaSecp256k1Details'
          title: Details
          discriminator:
            propertyName: type
            mapping:
              ecdsa_secp256k1: '#/components/schemas/BlackBoxSignatureEcdsaSecp256k1Details'
              ecdsa_stark: '#/components/schemas/BlackBoxSignatureEcdsaStarkDetails'
      type: object
      required:
        - id
        - created_at
        - modified_at
        - managed_transaction_data
        - signatures
        - direction
        - type
        - state
        - state_changes
        - payload
        - vault
        - details
      title: BlackBoxSignature
    BlackBoxSignatureEcdsaSecp256k1Details:
      properties:
        signature:
          description: The ECDSA signature.
          $ref: '#/components/schemas/EcdsaSignature'
        hash_binary:
          type: string
          minLength: 1
          title: Hash Binary
          description: >-
            The payload to sign, according to the standard ECDSA binary
            representation, encoded in base64 format. Reference:
            https://www.rfc-editor.org/rfc/rfc6979#section-2.3.2
          example: SGVsbG8=
        hash_integer:
          type: string
          pattern: ^0[xX][a-fA-F0-9]+$
          title: Hash Integer
          description: The payload to sign, as a big-endian integer.
        type:
          const: ecdsa_secp256k1
          title: Type
          description: ECDSA over the secp256k1 curve signature.
      type: object
      required:
        - hash_binary
        - hash_integer
        - type
      title: BlackBoxSignatureEcdsaSecp256k1Details
    BlackBoxSignatureEcdsaStarkDetails:
      properties:
        signature:
          description: The ECDSA signature.
          $ref: '#/components/schemas/EcdsaSignature'
        hash_binary:
          type: string
          minLength: 1
          title: Hash Binary
          description: >-
            The payload to sign, according to the standard ECDSA binary
            representation, encoded in base64 format. Reference:
            https://www.rfc-editor.org/rfc/rfc6979#section-2.3.2
          example: SGVsbG8=
        hash_integer:
          type: string
          pattern: ^0[xX][a-fA-F0-9]+$
          title: Hash Integer
          description: The payload to sign, as a big-endian integer.
        type:
          const: ecdsa_stark
          title: Type
          description: ECDSA over the Stark curve signature.
      type: object
      required:
        - hash_binary
        - hash_integer
        - type
      title: BlackBoxSignatureEcdsaStarkDetails
    BlackBoxSignatureState:
      type: string
      enum:
        - waiting_for_approval
        - approved
        - signed
        - completed
        - error_signing
        - aborted
      title: BlackBoxSignatureState
    BlackBoxSignatureStateChange:
      properties:
        changed_at:
          type: string
          format: date-time
          title: Changed At
          description: The date and time when the state was changed.
        previous_state:
          description: The previous state of the black box signature.
          $ref: '#/components/schemas/BlackBoxSignatureState'
        new_state:
          allOf:
            - $ref: '#/components/schemas/BlackBoxSignatureState'
          description: The new state of the black box signature.
      type: object
      required:
        - changed_at
        - new_state
      title: BlackBoxSignatureStateChange
    BlackBoxVault:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        name:
          type: string
          title: Name
          description: The name of the vault.
        created_by:
          allOf:
            - $ref: '#/components/schemas/UserRef'
          description: Details of the vault creator.
        derivation_path:
          type: string
          title: Derivation Path
          description: The BIP 44 derivation path of the vault.
          deprecated: true
          example: m/44/60/0/0/0
        public_key_compressed:
          type: string
          title: Public Key Compressed
          description: >-
            The compressed public key of the vault. As defined in the SEC1
            standard: https://www.secg.org/SEC1-Ver-1.0.pdf.
          example: SGVsbG8=
        derivation_info:
          allOf:
            - $ref: '#/components/schemas/VaultDerivationInfo'
          description: The derivation info of the vault.
        keyset:
          allOf:
            - $ref: '#/components/schemas/KeysetRef'
          description: The keyset of the vault.
        key_holder:
          description: >-
            The user who owns the keyset of the vault. If not provided, the
            vault is owned by the organization.
          $ref: '#/components/schemas/EndUserRef'
        vault_group:
          allOf:
            - $ref: '#/components/schemas/VaultGroupRef'
          description: The vault group this vault belongs to.
        pending_vault_group_action:
          title: Pending Vault Group Action
          description: Details of pending vault movement to another vault group.
          oneOf:
            - $ref: '#/components/schemas/PendingVaultGroupActionAdd'
            - $ref: '#/components/schemas/PendingVaultGroupActionRemove'
          discriminator:
            propertyName: type
            mapping:
              add: '#/components/schemas/PendingVaultGroupActionAdd'
              remove: '#/components/schemas/PendingVaultGroupActionRemove'
        state:
          allOf:
            - $ref: '#/components/schemas/VaultState'
          description: State of the vault.
        type:
          const: black_box
          title: Type
          description: Black Box vault type.
        details:
          oneOf:
            - $ref: '#/components/schemas/EcdsaStarkBlackBoxVault'
            - $ref: '#/components/schemas/EcdsaSecp256k1BlackBoxVault'
          title: Details
          discriminator:
            propertyName: type
            mapping:
              ecdsa_secp256k1: '#/components/schemas/EcdsaSecp256k1BlackBoxVault'
              ecdsa_stark: '#/components/schemas/EcdsaStarkBlackBoxVault'
      type: object
      required:
        - id
        - created_at
        - modified_at
        - name
        - created_by
        - derivation_path
        - public_key_compressed
        - derivation_info
        - keyset
        - vault_group
        - state
        - type
        - details
      title: BlackBoxVault
      description: Represents a Black Box vault in the Fordefi platform
    BlockchainExplorer:
      properties:
        transaction_url:
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
          title: Transaction Url
          example: https://etherscan.io/tx/
        address_url:
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
          title: Address Url
          example: https://etherscan.io/address/
        root_url:
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
          title: Root Url
          example: https://etherscan.io/
        transaction_format_url:
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
          title: Transaction Format Url
          example: https://etherscan.io/tx/%s
        address_format_url:
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
          title: Address Format Url
          example: https://etherscan.io/address/%s
      type: object
      required:
        - transaction_url
        - address_url
        - root_url
        - transaction_format_url
        - address_format_url
      title: BlockchainExplorer
      description: A blockchain explorer entry point.
    BridgeDetails:
      properties:
        type:
          const: cross_chain_bridge
          title: Type
          description: >-
            A transaction involving the transfer of funds from one blockchain to
            another.
        bridge_effect:
          allOf:
            - $ref: '#/components/schemas/EvmBridgeEffect'
          description: The bridge effects of the transaction.
      type: object
      required:
        - type
        - bridge_effect
      title: BridgeDetails
    ChainType:
      type: string
      enum:
        - cosmos
        - evm
        - solana
        - utxo
      title: ChainType
    ChainUniqueId:
      type: string
      enum:
        - cosmos_akashnet-2
        - cosmos_archway-1
        - cosmos_axelar-dojo-1
        - cosmos_celestia
        - cosmos_cosmoshub-4
        - cosmos_dydx-mainnet-1
        - cosmos_dydx-testnet-4
        - cosmos_dymension_1100-1
        - cosmos_noble-1
        - cosmos_osmosis-1
        - cosmos_pacific-1
        - cosmos_stride-1
        - evm_1
        - evm_5
        - evm_10
        - evm_56
        - evm_100
        - evm_137
        - evm_169
        - evm_250
        - evm_324
        - evm_1030
        - evm_1100
        - evm_1101
        - evm_2222
        - evm_4200
        - evm_5000
        - evm_7700
        - evm_8453
        - evm_17000
        - evm_80001
        - evm_42161
        - evm_43114
        - evm_59144
        - evm_81457
        - evm_11155111
        - evm_arbitrum_mainnet
        - evm_avalanche_chain
        - evm_base_mainnet
        - evm_blast_mainnet
        - evm_bsc_mainnet
        - evm_canto_mainnet
        - evm_conflux_mainnet
        - evm_dymension_mainnet
        - evm_ethereum_goerli
        - evm_ethereum_holesky
        - evm_ethereum_mainnet
        - evm_ethereum_sepolia
        - evm_fantom_mainnet
        - evm_gnosis_mainnet
        - evm_kava_mainnet
        - evm_linea_mainnet
        - evm_optimism_mainnet
        - evm_manta_pacific_mainnet
        - evm_mantle_mainnet
        - evm_merlin_mainnet
        - evm_polygon_mainnet
        - evm_polygon_mumbai
        - evm_polygon_zkevm_mainnet
        - evm_zksync_era_mainnet
        - solana_mainnet
        - solana_devnet
        - bitcoin_mainnet
        - bitcoin_testnet
      title: ChainUniqueId
    ContactRef:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: >-
            The unique identifier of the address book contact in the Fordefi
            platform.
        name:
          type: string
          title: Name
          description: The name of the contact.
        address_ref:
          oneOf:
            - $ref: '#/components/schemas/CosmosAddressBookContactAddressRef'
            - $ref: '#/components/schemas/EVMAddressBookContactAddressRef'
            - $ref: '#/components/schemas/SolanaAddressBookContactAddressRef'
            - $ref: '#/components/schemas/UtxoAddressBookContactAddressRef'
          title: Address Ref
          discriminator:
            propertyName: chain_type
            mapping:
              cosmos: '#/components/schemas/CosmosAddressBookContactAddressRef'
              evm: '#/components/schemas/EVMAddressBookContactAddressRef'
              solana: '#/components/schemas/SolanaAddressBookContactAddressRef'
              utxo: '#/components/schemas/UtxoAddressBookContactAddressRef'
      type: object
      required:
        - id
        - name
        - address_ref
      title: ContactRef
      description: >-
        Represents a reference to an address book contact in the Fordefi
        platform.
    ContactSortableFields:
      type: string
      enum:
        - created_at_asc
        - created_at_desc
        - modified_at_asc
        - modified_at_desc
        - name_asc
        - name_desc
      title: ContactSortableFields
    ContractCallDetails:
      properties:
        type:
          const: contract_call
          title: Type
          description: A transaction involving a generic call to a smart contract.
      type: object
      required:
        - type
      title: ContractCallDetails
    CosmosAddressBookContact:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        name:
          type: string
          title: Name
          description: The name of the contact.
        modified_by:
          allOf:
            - $ref: '#/components/schemas/UserRef'
          description: Address last modifier.
        state:
          allOf:
            - $ref: '#/components/schemas/AddressBookContactState'
          description: The state of the contact.
        groups:
          items:
            $ref: '#/components/schemas/GroupRef'
          type: array
          title: Groups
          description: List of contact's groups.
        pending_changes:
          description: Pending changes for the contact.
          $ref: '#/components/schemas/AddressBookContactChanges'
        chain_type:
          const: cosmos
          title: Chain Type
          description: The type of the chain.
        address:
          type: string
          title: Address
          description: The address on the cosmos chain.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosChain'
          description: The chain the contact belongs to.
      type: object
      required:
        - id
        - created_at
        - modified_at
        - name
        - modified_by
        - state
        - groups
        - chain_type
        - address
        - chain
      title: CosmosAddressBookContact
      description: Represents a contact in the Fordefi platform
    CosmosAddressBookContactAddressRef:
      properties:
        chain_type:
          const: cosmos
          title: Chain Type
          description: The type of the chain.
        address:
          type: string
          title: Address
          description: The address on the cosmos chain.
          example: cosmos1tdk0g5d4ry9lq0erejttyufqcvwpqdj6tdql38
        chain:
          allOf:
            - $ref: '#/components/schemas/CosmosChain'
          description: The chain the contact belongs to.
      type: object
      required:
        - chain_type
        - address
        - chain
      title: CosmosAddressBookContactAddressRef
    CosmosArbitraryMessageRequest:
      properties:
        type:
          const: arbitrary_message_type
          title: Type
          description: Arbitrary message standard.
        chain:
          allOf:
            - $ref: '#/components/schemas/CosmosChainUniqueId'
          description: The details of the chain of the native asset.
        data:
          allOf:
            - $ref: '#/components/schemas/CosmosMessageData'
          description: The message to be signed.
      type: object
      required:
        - type
        - chain
        - data
      title: CosmosArbitraryMessageRequest
    CosmosAsset:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The asset ID.
        decimals:
          type: integer
          minimum: 0
          title: Decimals
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
        name:
          type: string
          title: Name
          description: The name of the asset.
        symbol:
          type: string
          title: Symbol
          description: The symbol (ticker) of the asset.
        hidden:
          type: boolean
          title: Hidden
          description: '`True` if this asset was set to be hidden, `False` otherwise.'
        verified:
          type: boolean
          title: Verified
          description: '`True` if this asset is verified by Fordefi, `False` otherwise.'
        asset_identifier:
          allOf:
            - $ref: '#/components/schemas/EnrichedAssetIdentifier'
          description: The asset identifier.
        metadata_uri:
          title: Metadata Uri
          description: The URI of the asset metadata.
          type: string
        type:
          const: cosmos_asset
          title: Type
          description: Cosmos asset type.
          deprecated: true
        details:
          anyOf:
            - $ref: '#/components/schemas/CosmosNativeAsset'
            - $ref: '#/components/schemas/CosmosTokenAsset'
          title: Details
          deprecated: true
      type: object
      required:
        - id
        - decimals
        - name
        - symbol
        - hidden
        - verified
        - asset_identifier
        - type
        - details
      title: CosmosAsset
    CosmosAssetIdentifierRequest:
      properties:
        type:
          const: cosmos
          title: Type
          description: Cosmos asset identifier type.
        details:
          oneOf:
            - $ref: '#/components/schemas/CosmosNativeAssetIdentifierRequest'
            - $ref: '#/components/schemas/CosmosTokenAssetIdentifierRequest'
          title: Details
          discriminator:
            propertyName: type
            mapping:
              native: '#/components/schemas/CosmosNativeAssetIdentifierRequest'
              token: '#/components/schemas/CosmosTokenAssetIdentifierRequest'
      type: object
      required:
        - type
        - details
      title: CosmosAssetIdentifierRequest
    CosmosBalanceChangeEffect:
      oneOf:
        - $ref: '#/components/schemas/CosmosNativeBalanceChange'
        - $ref: '#/components/schemas/CosmosTokenBalanceChange'
      title: CosmosBalanceChangeEffect
      discriminator:
        propertyName: type
        mapping:
          native: '#/components/schemas/CosmosNativeBalanceChange'
          token: '#/components/schemas/CosmosTokenBalanceChange'
    CosmosBech32Prefix:
      type: string
      enum:
        - akash
        - archway
        - axelar
        - celestia
        - cosmos
        - dydx
        - dym
        - inj
        - noble
        - osmo
        - sei
        - stride
      title: CosmosBech32Prefix
    CosmosBechAddress:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/CosmosChainUniqueId'
          description: The Cosmos chain.
        address:
          type: string
          title: Address
          description: The address as bech32
          example: cosmos1tdk0g5d4ry9lq0erejttyufqcvwpqdj6tdql38
      type: object
      required:
        - chain
        - address
      title: CosmosBechAddress
    CosmosBechAddressEnrichedChain:
      properties:
        address:
          type: string
          title: Address
          description: The address as bech32
        chain:
          description: The Cosmos chain.
          deprecated: true
          $ref: '#/components/schemas/CosmosChainUniqueId'
        enriched_chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosChain'
          description: Enriched chain of the address.
      type: object
      required:
        - address
        - enriched_chain
      title: CosmosBechAddressEnrichedChain
    CosmosChain:
      properties:
        chain_type:
          const: cosmos
          title: Chain Type
          description: The type of the chain.
        unique_id:
          allOf:
            - $ref: '#/components/schemas/CosmosChainUniqueId'
          description: The Cosmos chain unique id.
      type: object
      required:
        - chain_type
        - unique_id
      title: CosmosChain
    CosmosChainUniqueId:
      type: string
      enum:
        - cosmos_akashnet-2
        - cosmos_archway-1
        - cosmos_axelar-dojo-1
        - cosmos_celestia
        - cosmos_cosmoshub-4
        - cosmos_dydx-mainnet-1
        - cosmos_dydx-testnet-4
        - cosmos_dymension_1100-1
        - cosmos_noble-1
        - cosmos_osmosis-1
        - cosmos_pacific-1
        - cosmos_stride-1
      title: CosmosChainUniqueId
    CosmosCoinWithAmount:
      properties:
        coin_with_amount:
          oneOf:
            - $ref: '#/components/schemas/CosmosNativeCoinWithAmount'
            - $ref: '#/components/schemas/CosmosTokenWithAmount'
          title: Coin With Amount
          description: The coin info.
          discriminator:
            propertyName: type
            mapping:
              native: '#/components/schemas/CosmosNativeCoinWithAmount'
              token: '#/components/schemas/CosmosTokenWithAmount'
      type: object
      required:
        - coin_with_amount
      title: CosmosCoinWithAmount
    CosmosEffects:
      properties:
        balance_changes:
          items:
            $ref: '#/components/schemas/CosmosBalanceChangeEffect'
          type: array
          title: Balance Changes
          description: The aggregated balance changes of addresses.
        transfers:
          items:
            $ref: '#/components/schemas/CosmosTransferEffect'
          type: array
          title: Transfers
          description: The transfer events of the transaction.
      type: object
      required:
        - balance_changes
        - transfers
      title: CosmosEffects
    CosmosGasDebit:
      properties:
        gas_used:
          type: string
          pattern: ^\d+$
          title: Gas Used
          description: Gas used while processing the transaction.
          example: '1000000000000000000'
        total_fee:
          items:
            $ref: '#/components/schemas/CosmosCoinWithAmount'
          type: array
          title: Total Fee
          description: The total fee paid.
        fiat_prices:
          items:
            $ref: '#/components/schemas/Price'
          type: array
          title: Fiat Prices
          description: The prices of the coins used to pay the fee.
      type: object
      required:
        - gas_used
        - total_fee
        - fiat_prices
      title: CosmosGasDebit
    CosmosMessage:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        managed_transaction_data:
          description: >-
            Managed transaction data. Presented if the transaction was initiated
            from the Fordefi system itself, in contrast to unmanaged
            transactions (which are, for example, transfers of funds into a
            vault visible to Fordefi). 
          $ref: '#/components/schemas/ManagedTransactionData'
        signatures:
          items:
            $ref: '#/components/schemas/Signature'
          type: array
          title: Signatures
          description: The transaction signatures.
        note:
          title: Note
          description: An optional transaction note.
          type: string
        spam_state:
          allOf:
            - $ref: '#/components/schemas/TransactionSpamState'
          description: >-
            `automatically_set` if the transaction was automatically set as spam
            by Fordefi, `manually_set` if the transaction was manually set as
            spam by a user, and `unset` if the transaction was not set as spam.
          default: unset
        direction:
          allOf:
            - $ref: '#/components/schemas/TransactionDirection'
          description: The direction of the transaction.
        type:
          const: cosmos_message
          title: Type
          description: Cosmos message type.
        cosmos_message_type:
          allOf:
            - $ref: '#/components/schemas/CosmosMessageType'
          description: The type of the Cosmos message.
        state:
          allOf:
            - $ref: '#/components/schemas/CosmosMessageState'
          description: The state of the message.
        state_changes:
          items:
            $ref: '#/components/schemas/CosmosMessageStateChange'
          type: array
          title: State Changes
          description: The state changes of the message.
        data:
          allOf:
            - $ref: '#/components/schemas/CosmosMessageData'
          description: >-
            The raw data of the message, encoded in base64 if bytes, else plain
            string.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosChain'
          description: The details of the chain that this message is on.
      type: object
      required:
        - id
        - created_at
        - modified_at
        - signatures
        - direction
        - type
        - cosmos_message_type
        - state
        - state_changes
        - data
        - chain
      title: CosmosMessage
    CosmosMessageBase64Data:
      properties:
        type:
          const: base64
          title: Type
          description: The type of the Cosmos message data.
        data:
          type: string
          title: Data
          description: The data encoded in base64.
          example: SGVsbG8=
      type: object
      required:
        - type
        - data
      title: CosmosMessageBase64Data
    CosmosMessageData:
      oneOf:
        - $ref: '#/components/schemas/CosmosMessageStrData'
        - $ref: '#/components/schemas/CosmosMessageBase64Data'
      title: CosmosMessageData
      discriminator:
        propertyName: type
        mapping:
          base64: '#/components/schemas/CosmosMessageBase64Data'
          string: '#/components/schemas/CosmosMessageStrData'
    CosmosMessageState:
      type: string
      enum:
        - waiting_for_approval
        - approved
        - signed
        - completed
        - error_signing
        - aborted
      title: CosmosMessageState
    CosmosMessageStateChange:
      properties:
        changed_at:
          type: string
          format: date-time
          title: Changed At
          description: The date and time when the state was changed.
        previous_state:
          description: The previous state of the message.
          $ref: '#/components/schemas/CosmosMessageState'
        new_state:
          allOf:
            - $ref: '#/components/schemas/CosmosMessageState'
          description: The new state of the message.
      type: object
      required:
        - changed_at
        - new_state
      title: CosmosMessageStateChange
    CosmosMessageStrData:
      properties:
        type:
          const: string
          title: Type
          description: The type of the Cosmos message data.
        data:
          type: string
          title: Data
          description: The data as plain string.
      type: object
      required:
        - type
        - data
      title: CosmosMessageStrData
    CosmosMessageType:
      type: string
      const: arbitrary_message_type
      title: CosmosMessageType
    CosmosMultipleMessagesTransactionDetails:
      properties:
        transaction_data:
          allOf:
            - $ref: '#/components/schemas/MessagesList'
          description: List of transaction's messages.
        type:
          const: messages
          title: Type
          description: A transaction of multiple messages.
      type: object
      required:
        - transaction_data
        - type
      title: CosmosMultipleMessagesTransactionDetails
    CosmosNativeAsset:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosChain'
          description: The details of the chain of the native asset.
        type:
          const: cosmos_native_asset
          title: Type
          description: Cosmos asset type.
      type: object
      required:
        - chain
        - type
      title: CosmosNativeAsset
    CosmosNativeAssetIdentifierRequest:
      properties:
        type:
          const: native
          title: Type
          description: Cosmos asset identifier type.
        chain:
          allOf:
            - $ref: '#/components/schemas/CosmosChainUniqueId'
          description: The unique id of the chain of the asset.
      type: object
      required:
        - type
        - chain
      title: CosmosNativeAssetIdentifierRequest
    CosmosNativeBalanceChange:
      properties:
        owner:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosBechAddress'
          description: The address affected by the balance change.
        diff:
          type: string
          pattern: ^-?\d+$
          title: Diff
          description: >-
            The amount of native currency that was added or deducted from the
            owner's balance. If the amount was deducted, the value is negative;
            if the amount was added, the value is positive.
          example: '1000000000000000000'
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
        type:
          const: native
          title: Type
        coin_info:
          allOf:
            - $ref: '#/components/schemas/CosmosNativeCoinInfo'
          description: The native coin that was added or deducted from the owner's balance.
      type: object
      required:
        - owner
        - diff
        - type
        - coin_info
      title: CosmosNativeBalanceChange
    CosmosNativeCoin:
      properties:
        name:
          type: string
          title: Name
          description: The name of the coin.
        symbol:
          type: string
          title: Symbol
          description: The symbol of the coin.
        display:
          title: Display
          description: The display string of the coin.
          default: ''
          deprecated: true
          type: string
        description:
          title: Description
          description: The description of the coin.
          default: ''
          deprecated: true
          type: string
        base_denom:
          type: string
          title: Base Denom
          description: The base denom of the coin.
        denom:
          type: string
          title: Denom
          description: The denom of the coin.
        decimals:
          type: integer
          title: Decimals
          description: The decimals relative to the base coin.
        logo_url:
          title: Logo Url
          description: The coin logo url.
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
        explorer_url:
          title: Explorer Url
          description: The explorer url of the coin.
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
        type:
          const: native
          title: Type
      type: object
      required:
        - name
        - symbol
        - base_denom
        - denom
        - decimals
        - type
      title: CosmosNativeCoin
    CosmosNativeCoinInfo:
      properties:
        is_verified:
          type: boolean
          title: Is Verified
          description: '`True` if the contract is verified, `False` otherwise.'
        coin:
          $ref: '#/components/schemas/CosmosNativeCoin'
      type: object
      required:
        - is_verified
        - coin
      title: CosmosNativeCoinInfo
    CosmosNativeCoinWithAmount:
      properties:
        amount:
          type: string
          pattern: ^\d+$
          title: Amount
          description: The amount of the coin in base unit (for example uatom).
          example: '1000000000000000000'
        type:
          const: native
          title: Type
        coin:
          allOf:
            - $ref: '#/components/schemas/CosmosNativeCoin'
          description: The coin.
      type: object
      required:
        - amount
        - type
        - coin
      title: CosmosNativeCoinWithAmount
    CosmosNativeTransfer:
      properties:
        from:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosBechAddress'
          description: The sender of the transfer.
        to:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosBechAddress'
          description: The receiver of the transfer.
        amount:
          type: string
          pattern: ^\d+$
          title: Amount
          description: The amount of the transfer.
          example: '1000000000000000000'
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
        type:
          const: native
          title: Type
        coin_info:
          allOf:
            - $ref: '#/components/schemas/CosmosNativeCoinInfo'
          description: The native coin that was transferred.
      type: object
      required:
        - from
        - to
        - amount
        - type
        - coin_info
      title: CosmosNativeTransfer
    CosmosNativeTransferDetails:
      properties:
        transaction_data:
          allOf:
            - $ref: '#/components/schemas/MessagesList'
          description: List of transaction's messages.
        direction:
          allOf:
            - $ref: '#/components/schemas/TransferDirection'
          description: The direction of the movement of funds, in case of a transfer.
          deprecated: true
        sender:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosBechAddress'
          description: The sender.
        recipient:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosBechAddress'
          description: The recipient.
        is_internal:
          title: Is Internal
          description: >-
            Is this transfer an internal transfer between two vaults. None if
            the transaction is incoming.
          type: boolean
        type:
          const: native_transfer
          title: Type
          description: >-
            A transaction involving a native transfer from one address to
            another.
      type: object
      required:
        - transaction_data
        - direction
        - sender
        - recipient
        - type
      title: CosmosNativeTransferDetails
    CosmosSuggestedFees:
      properties:
        type:
          const: cosmos
          title: Type
          description: The type of the chain.
        chain_unique_id:
          allOf:
            - $ref: '#/components/schemas/CosmosChainUniqueId'
          description: The cosmos chain unique id.
        fee_per_signature:
          title: Fee Per Signature
          description: The fee paid for each signature in the transaction.
          type: number
      type: object
      required:
        - type
        - chain_unique_id
      title: CosmosSuggestedFees
    CosmosToken:
      properties:
        name:
          type: string
          title: Name
          description: The name of the coin.
        symbol:
          type: string
          title: Symbol
          description: The symbol of the coin.
        display:
          title: Display
          description: The display string of the coin.
          default: ''
          deprecated: true
          type: string
        description:
          title: Description
          description: The description of the coin.
          default: ''
          deprecated: true
          type: string
        base_denom:
          type: string
          title: Base Denom
          description: The base denom of the coin.
        denom:
          type: string
          title: Denom
          description: The denom of the coin.
        decimals:
          type: integer
          title: Decimals
          description: The decimals relative to the base coin.
        logo_url:
          title: Logo Url
          description: The coin logo url.
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
        explorer_url:
          title: Explorer Url
          description: The explorer url of the coin.
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
        type:
          const: token
          title: Type
      type: object
      required:
        - name
        - symbol
        - base_denom
        - denom
        - decimals
        - type
      title: CosmosToken
    CosmosTokenAsset:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosChain'
          description: The details of the chain of the native asset.
        type:
          const: cosmos_token_asset
          title: Type
          description: Cosmos asset type.
      type: object
      required:
        - chain
        - type
      title: CosmosTokenAsset
    CosmosTokenAssetIdentifierRequest:
      properties:
        type:
          const: token
          title: Type
          description: Token asset identifier type.
        chain:
          allOf:
            - $ref: '#/components/schemas/CosmosChainUniqueId'
          description: The unique id of the chain of the asset.
        denom:
          type: string
          title: Denom
          description: The denom of the asset.
      type: object
      required:
        - type
        - chain
        - denom
      title: CosmosTokenAssetIdentifierRequest
    CosmosTokenBalanceChange:
      properties:
        owner:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosBechAddress'
          description: The address affected by the balance change.
        diff:
          type: string
          pattern: ^-?\d+$
          title: Diff
          description: >-
            The amount of native currency that was added or deducted from the
            owner's balance. If the amount was deducted, the value is negative;
            if the amount was added, the value is positive.
          example: '1000000000000000000'
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
        type:
          const: token
          title: Type
        coin_info:
          allOf:
            - $ref: '#/components/schemas/CosmosTokenInfo'
          description: The coin that was added or deducted from the owner's balance.
      type: object
      required:
        - owner
        - diff
        - type
        - coin_info
      title: CosmosTokenBalanceChange
    CosmosTokenInfo:
      properties:
        is_verified:
          type: boolean
          title: Is Verified
          description: '`True` if the contract is verified, `False` otherwise.'
        coin:
          $ref: '#/components/schemas/CosmosToken'
      type: object
      required:
        - is_verified
        - coin
      title: CosmosTokenInfo
    CosmosTokenTransfer:
      properties:
        from:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosBechAddress'
          description: The sender of the transfer.
        to:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosBechAddress'
          description: The receiver of the transfer.
        amount:
          type: string
          pattern: ^\d+$
          title: Amount
          description: The amount of the transfer.
          example: '1000000000000000000'
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
        type:
          const: token
          title: Type
        coin_info:
          allOf:
            - $ref: '#/components/schemas/CosmosTokenInfo'
          description: The coin that was transferred.
      type: object
      required:
        - from
        - to
        - amount
        - type
        - coin_info
      title: CosmosTokenTransfer
    CosmosTokenTransferDetails:
      properties:
        transaction_data:
          allOf:
            - $ref: '#/components/schemas/MessagesList'
          description: List of transaction's messages.
        direction:
          allOf:
            - $ref: '#/components/schemas/TransferDirection'
          description: The direction of the movement of funds, in case of a transfer.
          deprecated: true
        sender:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosBechAddress'
          description: The sender.
        recipient:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosBechAddress'
          description: The recipient.
        is_internal:
          title: Is Internal
          description: >-
            Is this transfer an internal transfer between two vaults. None if
            the transaction is incoming.
          type: boolean
        type:
          const: token_transfer
          title: Type
          description: >-
            A transaction involving a token transfer from one address to
            another.
      type: object
      required:
        - transaction_data
        - direction
        - sender
        - recipient
        - type
      title: CosmosTokenTransferDetails
    CosmosTokenWithAmount:
      properties:
        amount:
          type: string
          pattern: ^\d+$
          title: Amount
          description: The amount of the coin in base unit (for example uatom).
          example: '1000000000000000000'
        type:
          const: token
          title: Type
        coin:
          allOf:
            - $ref: '#/components/schemas/CosmosToken'
          description: The coin.
      type: object
      required:
        - amount
        - type
        - coin
      title: CosmosTokenWithAmount
    CosmosTransaction:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        managed_transaction_data:
          description: >-
            Managed transaction data. Presented if the transaction was initiated
            from the Fordefi system itself, in contrast to unmanaged
            transactions (which are, for example, transfers of funds into a
            vault visible to Fordefi). 
          $ref: '#/components/schemas/ManagedTransactionData'
        signatures:
          items:
            $ref: '#/components/schemas/Signature'
          type: array
          title: Signatures
          description: The transaction signatures.
        note:
          title: Note
          description: An optional transaction note.
          type: string
        spam_state:
          allOf:
            - $ref: '#/components/schemas/TransactionSpamState'
          description: >-
            `automatically_set` if the transaction was automatically set as spam
            by Fordefi, `manually_set` if the transaction was manually set as
            spam by a user, and `unset` if the transaction was not set as spam.
          default: unset
        direction:
          allOf:
            - $ref: '#/components/schemas/TransactionDirection'
          description: The direction of the transaction.
        cosmos_transaction_type_details:
          allOf:
            - $ref: '#/components/schemas/CosmosTransactionTypeDetails'
          description: Transaction details
        memo:
          type: string
          title: Memo
          description: Transaction memo.
          default: ''
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosChain'
          description: The details of the chain this transaction is on
        from:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosBechAddress'
          description: The address that originated the transaction.
          deprecated: true
        sender:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosBechAddress'
          description: The address that originated the transaction.
        type:
          const: cosmos_transaction
          title: Type
          description: The type of the transaction.
        hash:
          title: Hash
          description: The hash of the transaction.
          type: string
          maxLength: 64
          minLength: 64
          pattern: ^[a-fA-F0-9]+$
          example: 12BE33E7F1B6CA644CC006FB8CBD0C4C7C95B1072DA90E9F4C39CB837072BBF5
        explorer_url:
          title: Explorer Url
          description: The URL of this transaction in a blockchain explorer.
          example: >-
            https://www.mintscan.io/cosmos/txs/65A22C9050C8A29DE15CD8D0D08C847766B734403008C428C3148A23137ED3EF
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
        state:
          allOf:
            - $ref: '#/components/schemas/CosmosTransactionState'
          description: The state of the transaction.
        state_changes:
          items:
            $ref: '#/components/schemas/CosmosTransactionStateChange'
          type: array
          title: State Changes
          description: The state changes of the transaction.
        signers_info:
          items:
            $ref: '#/components/schemas/SignerInfo'
          type: array
          title: Signers Info
          description: List of signers info.
        expected_result:
          description: The expected result of the transaction in case it is mined.
          $ref: '#/components/schemas/CosmosTransactionResult'
        mined_result:
          description: The result of the transaction after it was mined.
          $ref: '#/components/schemas/CosmosTransactionResult'
        sign_doc:
          description: The signed document of the transaction.
          $ref: '#/components/schemas/SignDoc'
      type: object
      required:
        - id
        - created_at
        - modified_at
        - signatures
        - direction
        - cosmos_transaction_type_details
        - chain
        - from
        - sender
        - type
        - state
        - state_changes
        - signers_info
      title: CosmosTransaction
    CosmosTransactionResult:
      properties:
        message:
          title: Message
          description: In case of error, the message describes what failed.
          type: string
        gas_debit:
          allOf:
            - $ref: '#/components/schemas/CosmosGasDebit'
          description: The gas debit of the transaction.
        effects:
          allOf:
            - $ref: '#/components/schemas/CosmosEffects'
          description: The effects of the transaction.
      type: object
      required:
        - gas_debit
        - effects
      title: CosmosTransactionResult
    CosmosTransactionState:
      type: string
      enum:
        - waiting_for_approval
        - approved
        - signed
        - pushed_to_blockchain
        - mined
        - completed
        - aborted
        - error_pushing_to_blockchain
        - mined_reverted
        - completed_reverted
        - stuck
      title: CosmosTransactionState
    CosmosTransactionStateChange:
      properties:
        changed_at:
          type: string
          format: date-time
          title: Changed At
          description: The date and time when the state was changed.
        previous_state:
          description: The previous state of the transaction.
          $ref: '#/components/schemas/CosmosTransactionState'
        new_state:
          allOf:
            - $ref: '#/components/schemas/CosmosTransactionState'
          description: The new state of the transaction.
      type: object
      required:
        - changed_at
        - new_state
      title: CosmosTransactionStateChange
    CosmosTransactionType:
      type: string
      enum:
        - messages
        - native_transfer
        - token_transfer
      title: CosmosTransactionType
    CosmosTransactionTypeDetails:
      oneOf:
        - $ref: '#/components/schemas/CosmosMultipleMessagesTransactionDetails'
        - $ref: '#/components/schemas/CosmosNativeTransferDetails'
        - $ref: '#/components/schemas/CosmosTokenTransferDetails'
      title: CosmosTransactionTypeDetails
      discriminator:
        propertyName: type
        mapping:
          messages: '#/components/schemas/CosmosMultipleMessagesTransactionDetails'
          native_transfer: '#/components/schemas/CosmosNativeTransferDetails'
          token_transfer: '#/components/schemas/CosmosTokenTransferDetails'
    CosmosTransferEffect:
      oneOf:
        - $ref: '#/components/schemas/CosmosNativeTransfer'
        - $ref: '#/components/schemas/CosmosTokenTransfer'
      title: CosmosTransferEffect
      discriminator:
        propertyName: type
        mapping:
          native: '#/components/schemas/CosmosNativeTransfer'
          token: '#/components/schemas/CosmosTokenTransfer'
    CosmosTransferToAddressRequest:
      properties:
        type:
          const: address
          title: Type
        address:
          allOf:
            - $ref: '#/components/schemas/CosmosBechAddress'
          description: The cosmos bech32 to transfer to.
      type: object
      required:
        - type
        - address
      title: CosmosTransferToAddressRequest
    CosmosTransferToVaultIdRequest:
      properties:
        type:
          const: vault_id
          title: Type
        vault_id:
          type: string
          format: uuid
          title: Vault Id
          description: The ID of the vault to transfer to.
      type: object
      required:
        - type
        - vault_id
      title: CosmosTransferToVaultIdRequest
    CosmosVault:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        name:
          type: string
          title: Name
          description: The name of the vault.
        created_by:
          allOf:
            - $ref: '#/components/schemas/UserRef'
          description: Details of the vault creator.
        derivation_path:
          type: string
          title: Derivation Path
          description: The BIP 44 derivation path of the vault.
          deprecated: true
          example: m/44/60/0/0/0
        public_key_compressed:
          type: string
          title: Public Key Compressed
          description: >-
            The compressed public key of the vault. As defined in the SEC1
            standard: https://www.secg.org/SEC1-Ver-1.0.pdf.
          example: SGVsbG8=
        derivation_info:
          allOf:
            - $ref: '#/components/schemas/VaultDerivationInfo'
          description: The derivation info of the vault.
        keyset:
          allOf:
            - $ref: '#/components/schemas/KeysetRef'
          description: The keyset of the vault.
        key_holder:
          description: >-
            The user who owns the keyset of the vault. If not provided, the
            vault is owned by the organization.
          $ref: '#/components/schemas/EndUserRef'
        vault_group:
          allOf:
            - $ref: '#/components/schemas/VaultGroupRef'
          description: The vault group this vault belongs to.
        pending_vault_group_action:
          title: Pending Vault Group Action
          description: Details of pending vault movement to another vault group.
          oneOf:
            - $ref: '#/components/schemas/PendingVaultGroupActionAdd'
            - $ref: '#/components/schemas/PendingVaultGroupActionRemove'
          discriminator:
            propertyName: type
            mapping:
              add: '#/components/schemas/PendingVaultGroupActionAdd'
              remove: '#/components/schemas/PendingVaultGroupActionRemove'
        state:
          allOf:
            - $ref: '#/components/schemas/VaultState'
          description: State of the vault.
        type:
          const: cosmos
          title: Type
          description: Cosmos vault type.
        main_address:
          type: string
          maxLength: 40
          minLength: 40
          pattern: ^[a-fA-F0-9]+$
          title: Main Address
          description: >-
            The address of the vault on Cosmos chains (hex representation
            without chain prefix).
          example: DBCE78FD2D006A3BAC2C548D93271ABA3D63F01E
        evm_address:
          type: string
          pattern: ^[a-fA-F0-9]+$
          title: Evm Address
          description: >-
            The address of the vault on Cosmos chains that uses ethermint public
            key format, (hex representation without 0x).
        chains_addresses:
          items:
            $ref: '#/components/schemas/CosmosBechAddressEnrichedChain'
          type: array
          title: Chains Addresses
          description: >-
            List of addresses of the vault on each chain (bech32 format) with
            chain info.
      type: object
      required:
        - id
        - created_at
        - modified_at
        - name
        - created_by
        - derivation_path
        - public_key_compressed
        - derivation_info
        - keyset
        - vault_group
        - state
        - type
        - main_address
        - evm_address
        - chains_addresses
      title: CosmosVault
      description: Represents a Cosmos vault in the Fordefi platform
    CreateBlackBoxSignatureRequest:
      properties:
        vault_id:
          type: string
          format: uuid
          title: Vault Id
          description: The unique identifier of the vault.
        note:
          title: Note
          description: An optional transaction note.
          type: string
        signer_type:
          allOf:
            - $ref: '#/components/schemas/SignerType'
          description: >-
            The signer of the transaction. Can be: <ul><li>`initiator`: The
            creator of the transaction (default).<li>`api_signer`: A service
            that you run on your own network or cloud environment.
            <li>`end_user`: A mobile device using Fordefi's SDK.</ul>
          default: initiator
        type:
          const: black_box_signature
          title: Type
          description: Black Box signature type.
        details:
          oneOf:
            - $ref: '#/components/schemas/BinaryHashPayload'
            - $ref: '#/components/schemas/IntegerHashPayload'
          title: Details
          discriminator:
            propertyName: format
            mapping:
              hash_binary: '#/components/schemas/BinaryHashPayload'
              hash_integer: '#/components/schemas/IntegerHashPayload'
      type: object
      required:
        - vault_id
        - type
        - details
      title: CreateBlackBoxSignatureRequest
    CreateBlackBoxVaultRequest:
      properties:
        name:
          type: string
          minLength: 1
          title: Name
          description: The name of the vault.
        keyset_id:
          title: Keyset Id
          description: >-
            The keyset id of the vault. This field is required for end-user
            vault creation, otherwise, it's optional. If not provided, the
            organization's default keyset will be used.
          type: string
          format: uuid
        vault_group_id:
          title: Vault Group Id
          description: >-
            The group to add this vault to. If not provided, the vault will be
            created in the Default vault group.
          type: string
          format: uuid
        type:
          const: black_box
          title: Type
          description: Black Box vault type.
        key_type:
          type: string
          enum:
            - ecdsa_stark
            - ecdsa_secp256k1
          title: Key Type
          description: >-
            The key type of the signing scheme used by the vault. Can be: <ul>  
            <li>`ecdsa_stark`</li>   <li>`ecdsa_secp256k1`</li></ul>
      type: object
      required:
        - name
        - type
        - key_type
      title: CreateBlackBoxVaultRequest
    CreateCosmosMessageRequest:
      properties:
        vault_id:
          type: string
          format: uuid
          title: Vault Id
          description: The unique identifier of the vault.
        note:
          title: Note
          description: An optional transaction note.
          type: string
        signer_type:
          allOf:
            - $ref: '#/components/schemas/SignerType'
          description: >-
            The signer of the transaction. Can be: <ul><li>`initiator`: The
            creator of the transaction (default).<li>`api_signer`: A service
            that you run on your own network or cloud environment.
            <li>`end_user`: A mobile device using Fordefi's SDK.</ul>
          default: initiator
        type:
          const: cosmos_message
          title: Type
          description: Cosmos message type.
        details:
          $ref: '#/components/schemas/CosmosArbitraryMessageRequest'
      type: object
      required:
        - vault_id
        - type
        - details
      title: CreateCosmosMessageRequest
    CreateCosmosTransactionRequest:
      properties:
        vault_id:
          type: string
          format: uuid
          title: Vault Id
          description: The unique identifier of the vault.
        note:
          title: Note
          description: An optional transaction note.
          type: string
        signer_type:
          allOf:
            - $ref: '#/components/schemas/SignerType'
          description: >-
            The signer of the transaction. Can be: <ul><li>`initiator`: The
            creator of the transaction (default).<li>`api_signer`: A service
            that you run on your own network or cloud environment.
            <li>`end_user`: A mobile device using Fordefi's SDK.</ul>
          default: initiator
        type:
          const: cosmos_transaction
          title: Type
          description: Cosmos transaction type.
        details:
          oneOf:
            - $ref: '#/components/schemas/TypedCosmosRawTransactionRequest'
            - $ref: '#/components/schemas/TypedCosmosTransferRequest'
          title: Details
          description: Transaction details.
          discriminator:
            propertyName: type
            mapping:
              cosmos_raw_transaction: '#/components/schemas/TypedCosmosRawTransactionRequest'
              cosmos_transfer: '#/components/schemas/TypedCosmosTransferRequest'
      type: object
      required:
        - vault_id
        - type
        - details
      title: CreateCosmosTransactionRequest
    CreateCosmosTransferRequestExplicitValue:
      properties:
        type:
          const: value
          title: Type
        value:
          type: string
          pattern: ^\d+$
          title: Value
          description: The explicit number of units of currency to transfer.
          example: '1000000000000000000'
      type: object
      required:
        - type
        - value
      title: CreateCosmosTransferRequestExplicitValue
    CreateCosmosTransferRequestMaxValue:
      properties:
        type:
          const: max
          title: Type
          description: The maximum available currency to transfer.
      type: object
      required:
        - type
      title: CreateCosmosTransferRequestMaxValue
    CreateCosmosVaultRequest:
      properties:
        name:
          type: string
          minLength: 1
          title: Name
          description: The name of the vault.
        keyset_id:
          title: Keyset Id
          description: >-
            The keyset id of the vault. This field is required for end-user
            vault creation, otherwise, it's optional. If not provided, the
            organization's default keyset will be used.
          type: string
          format: uuid
        vault_group_id:
          title: Vault Group Id
          description: >-
            The group to add this vault to. If not provided, the vault will be
            created in the Default vault group.
          type: string
          format: uuid
        type:
          const: cosmos
          title: Type
          description: Cosmos vault type.
      type: object
      required:
        - name
        - type
      title: CreateCosmosVaultRequest
    CreateEndUserErrorType:
      type: string
      enum:
        - unsupported_organization
        - backup_not_ready
      title: CreateEndUserErrorType
    CreateEndUserRequest:
      properties:
        external_id:
          type: string
          title: External Id
          description: The ID that you assign to an end user.
      type: object
      required:
        - external_id
      title: CreateEndUserRequest
    CreateEndUserResponse:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        external_id:
          type: string
          title: External Id
          description: The ID that you assigned to the end user.
          example: user|1234
        last_login_at:
          type: string
          format: date-time
          title: Last Login At
          description: The timestamp when the end user last logged into the mobile SDK.
      type: object
      required:
        - id
        - created_at
        - modified_at
        - external_id
        - last_login_at
      title: CreateEndUserResponse
    CreateEvmMessageRequest:
      properties:
        vault_id:
          type: string
          format: uuid
          title: Vault Id
          description: The unique identifier of the vault.
        note:
          title: Note
          description: An optional transaction note.
          type: string
        signer_type:
          allOf:
            - $ref: '#/components/schemas/SignerType'
          description: >-
            The signer of the transaction. Can be: <ul><li>`initiator`: The
            creator of the transaction (default).<li>`api_signer`: A service
            that you run on your own network or cloud environment.
            <li>`end_user`: A mobile device using Fordefi's SDK.</ul>
          default: initiator
        type:
          const: evm_message
          title: Type
          description: EVM message type.
        details:
          oneOf:
            - $ref: '#/components/schemas/CreateEvmTypedMessageRequest'
            - $ref: '#/components/schemas/CreateEvmPersonalMessageRequest'
          title: Details
          discriminator:
            propertyName: type
            mapping:
              personal_message_type: '#/components/schemas/CreateEvmPersonalMessageRequest'
              typed_message_type: '#/components/schemas/CreateEvmTypedMessageRequest'
      type: object
      required:
        - vault_id
        - type
        - details
      title: CreateEvmMessageRequest
    CreateEvmPersonalMessageRequest:
      properties:
        type:
          const: personal_message_type
          title: Type
          description: Personal message standard.
        chain:
          allOf:
            - $ref: '#/components/schemas/EvmChainRequest'
          description: >-
            The EVM chain that this message is intended for. Specify either the
            chain ID (for example `1` for `ethereum_mainnet`) or the chain name
            (for example, `ethereum_goerli`).
        raw_data:
          type: string
          minLength: 1
          title: Raw Data
          description: >-
            The raw data of the message to be signed, provided as a string or
            hex-encoded.
      type: object
      required:
        - type
        - chain
        - raw_data
      title: CreateEvmPersonalMessageRequest
    CreateEvmRawTransactionRequest:
      properties:
        type:
          const: evm_raw_transaction
          title: Type
          description: >-
            An EVM raw transaction receives raw data and is for general
            transactions.
        use_secure_node:
          type: boolean
          title: Use Secure Node
          description: >-
            Use a secure node to send the transaction. By using a secure node,
            you avoid maximal extractable value (MEV) attacks.
          default: false
        gas:
          oneOf:
            - $ref: '#/components/schemas/GasPriorityRequest'
            - $ref: '#/components/schemas/CustomGasRequest'
          title: Gas
          description: >-
            The gas details of the transaction. The details depend on which
            option you choose:<ul><li>Gas Priority or <li>Custom Gas Request
            </ul>
          discriminator:
            propertyName: type
            mapping:
              custom: '#/components/schemas/CustomGasRequest'
              priority: '#/components/schemas/GasPriorityRequest'
        fail_on_prediction_failure:
          type: boolean
          title: Fail On Prediction Failure
          description: >-
            `True` if transaction creation should fail in case prediction
            failed, `False` otherwise.
          default: true
        skip_prediction:
          type: boolean
          title: Skip Prediction
          description: >-
            `True` to create a transaction without prediction, `False`
            otherwise.
          default: false
        push_mode:
          allOf:
            - $ref: '#/components/schemas/PushMode'
          description: >-
            The push mode of the transaction. It can be one of the
            following:<ul><li>`auto`: The transaction is pushed automatically by
            Fordefi. <li>`manual`: The transaction should be pushed manually by
            the user using a 3rd party.</ul> 
          default: auto
        funder:
          title: Funder
          description: >-
            The unique identifier of the vault that pays the fee for this
            transaction.
          type: string
          format: uuid
        chain:
          allOf:
            - $ref: '#/components/schemas/EvmChainRequest'
          description: >-
            The chain that this transaction is on. Specify either the chain ID
            (for example `evm.1` for `ethereum_mainnet`) or the chain name (for
            example, `evm.ethereum_goerli`).
        to:
          type: string
          maxLength: 42
          minLength: 42
          pattern: ^0[xX][a-fA-F0-9]+$
          title: To
          description: The recipient of the transaction.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        value:
          type: string
          pattern: ^\d+$
          title: Value
          description: The value of the transaction.
          example: '1000000000000000000'
        data:
          description: >-
            The format of the data request. The following formats are
            available:<ul><li>Base64 raw data<li>Hex raw data<li>Smart contract
            call of method and arguments
          $ref: '#/components/schemas/EvmDataRequest'
      type: object
      required:
        - type
        - gas
        - chain
        - to
        - value
      title: CreateEvmRawTransactionRequest
    CreateEvmRevokeAllowanceRequest:
      properties:
        type:
          const: evm_revoke_allowance
          title: Type
          description: >-
            An EVM revoke allowance transaction is for revoking a spender's
            allowance for a specific token.
        use_secure_node:
          type: boolean
          title: Use Secure Node
          description: >-
            Use a secure node to send the transaction. By using a secure node,
            you avoid maximal extractable value (MEV) attacks.
          default: false
        gas:
          oneOf:
            - $ref: '#/components/schemas/GasPriorityRequest'
            - $ref: '#/components/schemas/CustomGasRequest'
          title: Gas
          description: >-
            The gas details of the transaction. The details depend on which
            option you choose:<ul><li>Gas Priority or <li>Custom Gas Request
            </ul>
          discriminator:
            propertyName: type
            mapping:
              custom: '#/components/schemas/CustomGasRequest'
              priority: '#/components/schemas/GasPriorityRequest'
        fail_on_prediction_failure:
          type: boolean
          title: Fail On Prediction Failure
          description: >-
            `True` if transaction creation should fail in case prediction
            failed, `False` otherwise.
          default: true
        skip_prediction:
          type: boolean
          title: Skip Prediction
          description: >-
            `True` to create a transaction without prediction, `False`
            otherwise.
          default: false
        push_mode:
          allOf:
            - $ref: '#/components/schemas/PushMode'
          description: >-
            The push mode of the transaction. It can be one of the
            following:<ul><li>`auto`: The transaction is pushed automatically by
            Fordefi. <li>`manual`: The transaction should be pushed manually by
            the user using a 3rd party.</ul> 
          default: auto
        funder:
          title: Funder
          description: >-
            The unique identifier of the vault that pays the fee for this
            transaction.
          type: string
          format: uuid
        chain:
          allOf:
            - $ref: '#/components/schemas/EvmChainRequest'
          description: >-
            The chain that this transaction is on. Specify either the chain ID
            (for example `evm.1` for `ethereum_mainnet`) or the chain name (for
            example, `evm.ethereum_goerli`).
        token:
          type: string
          maxLength: 42
          minLength: 42
          pattern: ^0[xX][a-fA-F0-9]+$
          title: Token
          description: The ERC-20 token contract for which to revoke allowance.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        spender:
          type: string
          maxLength: 42
          minLength: 42
          pattern: ^0[xX][a-fA-F0-9]+$
          title: Spender
          description: >-
            The EOA or contract address of the spender for whom to revoke
            allowance.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
      type: object
      required:
        - type
        - gas
        - chain
        - token
        - spender
      title: CreateEvmRevokeAllowanceRequest
    CreateEvmTransactionRequest:
      properties:
        vault_id:
          type: string
          format: uuid
          title: Vault Id
          description: The unique identifier of the vault.
        note:
          title: Note
          description: An optional transaction note.
          type: string
        signer_type:
          allOf:
            - $ref: '#/components/schemas/SignerType'
          description: >-
            The signer of the transaction. Can be: <ul><li>`initiator`: The
            creator of the transaction (default).<li>`api_signer`: A service
            that you run on your own network or cloud environment.
            <li>`end_user`: A mobile device using Fordefi's SDK.</ul>
          default: initiator
        type:
          const: evm_transaction
          title: Type
          description: EVM transaction type.
        details:
          oneOf:
            - $ref: '#/components/schemas/CreateEvmRawTransactionRequest'
            - $ref: '#/components/schemas/CreateEvmTransferRequest'
            - $ref: '#/components/schemas/CreateEvmRevokeAllowanceRequest'
          title: Details
          discriminator:
            propertyName: type
            mapping:
              evm_raw_transaction: '#/components/schemas/CreateEvmRawTransactionRequest'
              evm_revoke_allowance: '#/components/schemas/CreateEvmRevokeAllowanceRequest'
              evm_transfer: '#/components/schemas/CreateEvmTransferRequest'
      type: object
      required:
        - vault_id
        - type
        - details
      title: CreateEvmTransactionRequest
    CreateEvmTransferRequest:
      properties:
        type:
          const: evm_transfer
          title: Type
          description: >-
            An EVM transfer transaction is for transferring native currency or a
            token.
        use_secure_node:
          type: boolean
          title: Use Secure Node
          description: >-
            Use a secure node to send the transaction. By using a secure node,
            you avoid maximal extractable value (MEV) attacks.
          default: false
        gas:
          oneOf:
            - $ref: '#/components/schemas/GasPriorityRequest'
            - $ref: '#/components/schemas/CustomGasRequest'
          title: Gas
          description: >-
            The gas details of the transaction. The details depend on which
            option you choose:<ul><li>Gas Priority or <li>Custom Gas Request
            </ul>
          discriminator:
            propertyName: type
            mapping:
              custom: '#/components/schemas/CustomGasRequest'
              priority: '#/components/schemas/GasPriorityRequest'
        fail_on_prediction_failure:
          type: boolean
          title: Fail On Prediction Failure
          description: >-
            `True` if transaction creation should fail in case prediction
            failed, `False` otherwise.
          default: true
        skip_prediction:
          type: boolean
          title: Skip Prediction
          description: >-
            `True` to create a transaction without prediction, `False`
            otherwise.
          default: false
        push_mode:
          allOf:
            - $ref: '#/components/schemas/PushMode'
          description: >-
            The push mode of the transaction. It can be one of the
            following:<ul><li>`auto`: The transaction is pushed automatically by
            Fordefi. <li>`manual`: The transaction should be pushed manually by
            the user using a 3rd party.</ul> 
          default: auto
        funder:
          title: Funder
          description: >-
            The unique identifier of the vault that pays the fee for this
            transaction.
          type: string
          format: uuid
        to:
          anyOf:
            - type: string
              maxLength: 42
              minLength: 42
              pattern: ^0[xX][a-fA-F0-9]+$
              example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
            - type: string
              format: uuid
          title: To
          description: >-
            The recipient of the transfer. Specify either a general address (a
            hex string of length 42 characters) or the ID of another vault (a
            UUID string).
        chain:
          description: >-
            The chain that this transaction is on. Specify either the chain ID
            (for example `evm.1` for `ethereum_mainnet`) or the chain name (for
            example, `evm.ethereum_goerli`).
          deprecated: true
          $ref: '#/components/schemas/EvmChainRequest'
        token:
          title: Token
          description: >-
            The ERC-20 token contract (a hex string of length 42 characters) to
            transfer. If you do not specify a value for `token`, the assumption
            is that you are transferring units in the native currency of the
            chain.
          deprecated: true
          type: string
          maxLength: 42
          minLength: 42
          pattern: ^0[xX][a-fA-F0-9]+$
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        asset_identifier:
          description: The asset to be transfered.
          $ref: '#/components/schemas/EvmAssetIdentifierRequest'
        value:
          oneOf:
            - $ref: '#/components/schemas/CreateEvmTransferRequestExplicitValue'
            - $ref: '#/components/schemas/CreateEvmTransferRequestMaxValue'
          title: Value
          description: 'Specify one of the following: <ul><li>`value`<li>`max`</ul>'
          discriminator:
            propertyName: type
            mapping:
              max: '#/components/schemas/CreateEvmTransferRequestMaxValue'
              value: '#/components/schemas/CreateEvmTransferRequestExplicitValue'
      type: object
      required:
        - type
        - gas
        - to
        - value
      title: CreateEvmTransferRequest
    CreateEvmTransferRequestExplicitValue:
      properties:
        type:
          const: value
          title: Type
        value:
          type: string
          pattern: ^\d+$
          title: Value
          description: The explicit number of units of currency to transfer.
          example: '1000000000000000000'
      type: object
      required:
        - type
        - value
      title: CreateEvmTransferRequestExplicitValue
    CreateEvmTransferRequestMaxValue:
      properties:
        type:
          const: max
          title: Type
          description: >-
            The maximum available currency to transfer. <ul><li>In the case of
            an ERC-20 token contract, the full balance is transferred.<li>In the
            case of native currency, the full balance less the minimum gas fee
            is transferred.</ul>
      type: object
      required:
        - type
      title: CreateEvmTransferRequestMaxValue
    CreateEvmTypedMessageRequest:
      properties:
        type:
          const: typed_message_type
          title: Type
          description: Typed message standard.
        chain:
          allOf:
            - $ref: '#/components/schemas/EvmChainRequest'
          description: >-
            The EVM chain that this message is intended for. Specify either the
            chain ID (for example `1` for `ethereum_mainnet`) or the chain name
            (for example, `ethereum_goerli`).
        raw_data:
          type: string
          minLength: 1
          title: Raw Data
          description: >-
            The raw data of the message to be signed, provided as a string or
            hex-encoded.
      type: object
      required:
        - type
        - chain
        - raw_data
      title: CreateEvmTypedMessageRequest
    CreateEvmVaultRequest:
      properties:
        name:
          type: string
          minLength: 1
          title: Name
          description: The name of the vault.
        keyset_id:
          title: Keyset Id
          description: >-
            The keyset id of the vault. This field is required for end-user
            vault creation, otherwise, it's optional. If not provided, the
            organization's default keyset will be used.
          type: string
          format: uuid
        vault_group_id:
          title: Vault Group Id
          description: >-
            The group to add this vault to. If not provided, the vault will be
            created in the Default vault group.
          type: string
          format: uuid
        type:
          const: evm
          title: Type
          description: EVM vault type.
      type: object
      required:
        - name
        - type
      title: CreateEvmVaultRequest
    CreateKeysetErrorType:
      type: string
      enum:
        - cannot_create_keyset_for_user_id
        - cannot_create_keyset_for_user_type
      title: CreateKeysetErrorType
    CreateKeysetRequest:
      properties:
        user_id:
          type: string
          format: uuid
          title: User Id
          description: End user ID
        name:
          type: string
          minLength: 1
          title: Name
          description: Keyset name
      type: object
      required:
        - user_id
        - name
      title: CreateKeysetRequest
    CreateKeysetResponse:
      oneOf:
        - $ref: '#/components/schemas/OrganizationKeyset'
        - $ref: '#/components/schemas/UserKeyset'
      title: CreateKeysetResponse
      discriminator:
        propertyName: scope
        mapping:
          organization: '#/components/schemas/OrganizationKeyset'
          user: '#/components/schemas/UserKeyset'
    CreateSolanaMessageRequest:
      properties:
        vault_id:
          type: string
          format: uuid
          title: Vault Id
          description: The unique identifier of the vault.
        note:
          title: Note
          description: An optional transaction note.
          type: string
        signer_type:
          allOf:
            - $ref: '#/components/schemas/SignerType'
          description: >-
            The signer of the transaction. Can be: <ul><li>`initiator`: The
            creator of the transaction (default).<li>`api_signer`: A service
            that you run on your own network or cloud environment.
            <li>`end_user`: A mobile device using Fordefi's SDK.</ul>
          default: initiator
        type:
          const: solana_message
          title: Type
          description: Solana message type.
        details:
          $ref: '#/components/schemas/SolanaPersonalMessageRequest'
      type: object
      required:
        - vault_id
        - type
        - details
      title: CreateSolanaMessageRequest
    CreateSolanaRawTransactionRequest:
      properties:
        version:
          allOf:
            - $ref: '#/components/schemas/SolanaMessageVersion'
          description: The version of the transaction message.
        instructions:
          items:
            $ref: '#/components/schemas/SolanaCompiledInstructionRequest'
          type: array
          title: Instructions
          description: The instructions of the transaction.
        accounts:
          items:
            $ref: '#/components/schemas/SolanaTransactionAccountRequest'
          type: array
          title: Accounts
          description: Accounts used in the transaction.
        address_table_lookups:
          items:
            $ref: '#/components/schemas/SolanaMessageAddressTableLookupRequest'
          type: array
          title: Address Table Lookups
          description: Lookup tables of accounts used in the transaction.
        signatures:
          title: Signatures
          description: Any partial signatures on the transaction.
          items:
            $ref: '#/components/schemas/SolanaTransactionSignaturesRequest'
          type: array
        recent_blockhash:
          title: Recent Blockhash
          description: The transaction nonce (a recently processed blockhash).
          type: string
          maxLength: 44
          minLength: 32
          pattern: ^[a-km-zA-HJ-NP-Z1-9]+$
          example: 4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZAMdL4VZHirAn
        type:
          const: solana_raw_transaction
          title: Type
          description: A Solana raw transaction is for any operation.
        fail_on_prediction_failure:
          type: boolean
          title: Fail On Prediction Failure
          description: >-
            `True` if the request should fail in case simulation failed, `False`
            otherwise.
          default: true
        push_mode:
          allOf:
            - $ref: '#/components/schemas/PushMode'
          description: >-
            The push mode of the transaction. It can be one of the
            following:<ul><li>`auto`: The transaction is pushed automatically by
            Fordefi. <li>`manual`: The transaction should be pushed manually by
            the user using a 3rd party.</ul> 
          default: auto
        skip_prediction:
          type: boolean
          title: Skip Prediction
          description: >-
            `True` to create a transaction without prediction, `False`
            otherwise.
          default: false
        chain:
          $ref: '#/components/schemas/SolanaChainUniqueId'
      type: object
      required:
        - version
        - instructions
        - accounts
        - address_table_lookups
        - type
        - chain
      title: CreateSolanaRawTransactionRequest
    CreateSolanaTransactionRequest:
      properties:
        vault_id:
          type: string
          format: uuid
          title: Vault Id
          description: The unique identifier of the vault.
        note:
          title: Note
          description: An optional transaction note.
          type: string
        signer_type:
          allOf:
            - $ref: '#/components/schemas/SignerType'
          description: >-
            The signer of the transaction. Can be: <ul><li>`initiator`: The
            creator of the transaction (default).<li>`api_signer`: A service
            that you run on your own network or cloud environment.
            <li>`end_user`: A mobile device using Fordefi's SDK.</ul>
          default: initiator
        type:
          const: solana_transaction
          title: Type
          description: Solana transaction type.
        details:
          oneOf:
            - $ref: '#/components/schemas/CreateSolanaTransferRequest'
            - $ref: '#/components/schemas/CreateSolanaRawTransactionRequest'
          title: Details
          discriminator:
            propertyName: type
            mapping:
              solana_raw_transaction: '#/components/schemas/CreateSolanaRawTransactionRequest'
              solana_transfer: '#/components/schemas/CreateSolanaTransferRequest'
      type: object
      required:
        - vault_id
        - type
        - details
      title: CreateSolanaTransactionRequest
    CreateSolanaTransferRequest:
      properties:
        type:
          const: solana_transfer
          title: Type
          description: >-
            A Solana transfer transaction is for transferring native currency or
            a token.
        fail_on_prediction_failure:
          type: boolean
          title: Fail On Prediction Failure
          description: >-
            `True` if the request should fail in case simulation failed, `False`
            otherwise.
          default: true
        push_mode:
          allOf:
            - $ref: '#/components/schemas/PushMode'
          description: >-
            The push mode of the transaction. It can be one of the
            following:<ul><li>`auto`: The transaction is pushed automatically by
            Fordefi. <li>`manual`: The transaction should be pushed manually by
            the user using a 3rd party.</ul> 
          default: auto
        skip_prediction:
          type: boolean
          title: Skip Prediction
          description: >-
            `True` to create a transaction without prediction, `False`
            otherwise.
          default: false
        to:
          anyOf:
            - type: string
              maxLength: 44
              minLength: 32
              pattern: ^[a-km-zA-HJ-NP-Z1-9]+$
              example: 4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA
            - type: string
              format: uuid
          title: To
          description: >-
            The recipient of the transfer. Specify either a general address (a
            base58 string) or the id of another vault (a UUID string).
        value:
          oneOf:
            - $ref: '#/components/schemas/CreateSolanaTransferRequestExplicitAmount'
            - $ref: '#/components/schemas/CreateSolanaTransferRequestMaxAmount'
          title: Value
          description: The number of units of currency to transfer.
          discriminator:
            propertyName: type
            mapping:
              max: '#/components/schemas/CreateSolanaTransferRequestMaxAmount'
              value: '#/components/schemas/CreateSolanaTransferRequestExplicitAmount'
        asset_identifier:
          allOf:
            - $ref: '#/components/schemas/SolanaAssetIdentifierRequest'
          description: The Solana asset identifier to transfer.
      type: object
      required:
        - type
        - to
        - value
        - asset_identifier
      title: CreateSolanaTransferRequest
    CreateSolanaTransferRequestExplicitAmount:
      properties:
        type:
          const: value
          title: Type
        value:
          type: string
          pattern: ^\d+$
          title: Value
          description: The amount of the transfer.
          example: '1000000000000000000'
      type: object
      required:
        - type
        - value
      title: CreateSolanaTransferRequestExplicitAmount
    CreateSolanaTransferRequestMaxAmount:
      properties:
        type:
          const: max
          title: Type
      type: object
      required:
        - type
      title: CreateSolanaTransferRequestMaxAmount
    CreateSolanaVaultRequest:
      properties:
        name:
          type: string
          minLength: 1
          title: Name
          description: The name of the vault.
        keyset_id:
          title: Keyset Id
          description: >-
            The keyset id of the vault. This field is required for end-user
            vault creation, otherwise, it's optional. If not provided, the
            organization's default keyset will be used.
          type: string
          format: uuid
        vault_group_id:
          title: Vault Group Id
          description: >-
            The group to add this vault to. If not provided, the vault will be
            created in the Default vault group.
          type: string
          format: uuid
        type:
          const: solana
          title: Type
          description: Solana vault type.
      type: object
      required:
        - name
        - type
      title: CreateSolanaVaultRequest
    CreateTransactionErrorType:
      type: string
      enum:
        - reverted_transaction
        - partial_signed_raw_request
        - blocked_by_policy
        - transaction_contains_restricted_addresses
        - vault_not_found
        - missing_signed_raw_request
        - redundant_signed_raw_request
        - transfer_to_self
        - transaction_to_non_contract
        - insecure_stark_key_derivation
        - invalid_signed_raw_request
        - invalid_signer_type
        - invalid_evm_message
        - invalid_evm_transaction_data
        - insufficient_funds
        - vault_type_mismatch
        - invalid_creator_type
        - invalid_recipient
        - dust_not_allowed
        - invalid_gas_type
        - insufficient_approvers
        - funding_blocked_by_policy
        - funder_not_allowed_for_transaction_type
        - origin_vault_used_as_funder
        - mixed_secure_and_non_secure_transactions
        - invalid_push_mode
        - chain_does_not_support_secure_node
        - invalid_solana_secret_key
      title: CreateTransactionErrorType
    CreateTransactionRequest:
      oneOf:
        - $ref: '#/components/schemas/CreateBlackBoxSignatureRequest'
        - $ref: '#/components/schemas/CreateCosmosTransactionRequest'
        - $ref: '#/components/schemas/CreateCosmosMessageRequest'
        - $ref: '#/components/schemas/CreateEvmMessageRequest'
        - $ref: '#/components/schemas/CreateEvmTransactionRequest'
        - $ref: '#/components/schemas/CreateSolanaMessageRequest'
        - $ref: '#/components/schemas/CreateSolanaTransactionRequest'
        - $ref: '#/components/schemas/CreateUtxoTransactionRequest'
      title: CreateTransactionRequest
      discriminator:
        propertyName: type
        mapping:
          black_box_signature: '#/components/schemas/CreateBlackBoxSignatureRequest'
          cosmos_message: '#/components/schemas/CreateCosmosMessageRequest'
          cosmos_transaction: '#/components/schemas/CreateCosmosTransactionRequest'
          evm_message: '#/components/schemas/CreateEvmMessageRequest'
          evm_transaction: '#/components/schemas/CreateEvmTransactionRequest'
          solana_message: '#/components/schemas/CreateSolanaMessageRequest'
          solana_transaction: '#/components/schemas/CreateSolanaTransactionRequest'
          utxo_transaction: '#/components/schemas/CreateUtxoTransactionRequest'
    CreateTransactionResponse:
      oneOf:
        - $ref: '#/components/schemas/BlackBoxSignature'
        - $ref: '#/components/schemas/CosmosTransaction'
        - $ref: '#/components/schemas/CosmosMessage'
        - $ref: '#/components/schemas/EvmMessage'
        - $ref: '#/components/schemas/EvmTransaction'
        - $ref: '#/components/schemas/SolanaMessage'
        - $ref: '#/components/schemas/SolanaTransaction'
        - $ref: '#/components/schemas/UtxoTransaction'
      title: CreateTransactionResponse
      discriminator:
        propertyName: type
        mapping:
          black_box_signature: '#/components/schemas/BlackBoxSignature'
          cosmos_message: '#/components/schemas/CosmosMessage'
          cosmos_transaction: '#/components/schemas/CosmosTransaction'
          evm_message: '#/components/schemas/EvmMessage'
          evm_transaction: '#/components/schemas/EvmTransaction'
          solana_message: '#/components/schemas/SolanaMessage'
          solana_transaction: '#/components/schemas/SolanaTransaction'
          utxo_transaction: '#/components/schemas/UtxoTransaction'
    CreateUtxoTransactionRequest:
      properties:
        vault_id:
          type: string
          format: uuid
          title: Vault Id
          description: The unique identifier of the vault.
        note:
          title: Note
          description: An optional transaction note.
          type: string
        signer_type:
          allOf:
            - $ref: '#/components/schemas/SignerType'
          description: >-
            The signer of the transaction. Can be: <ul><li>`initiator`: The
            creator of the transaction (default).<li>`api_signer`: A service
            that you run on your own network or cloud environment.
            <li>`end_user`: A mobile device using Fordefi's SDK.</ul>
          default: initiator
        type:
          const: utxo_transaction
          title: Type
          description: UTXO transaction type.
        details:
          allOf:
            - $ref: '#/components/schemas/TransactionDetailsUtxoTransferRequest'
          description: Transaction details.
      type: object
      required:
        - vault_id
        - type
        - details
      title: CreateUtxoTransactionRequest
    CreateUtxoVaultAddressRequest:
      properties:
        name:
          title: Name
          description: The name of the address.
          type: string
          minLength: 1
        address_type:
          allOf:
            - $ref: '#/components/schemas/BitcoinVaultCreateAddressType'
          description: The type of the address.
          default: segwit
      type: object
      title: CreateUtxoVaultAddressRequest
    CreateUtxoVaultRequest:
      properties:
        name:
          type: string
          minLength: 1
          title: Name
          description: The name of the vault.
        keyset_id:
          title: Keyset Id
          description: >-
            The keyset id of the vault. This field is required for end-user
            vault creation, otherwise, it's optional. If not provided, the
            organization's default keyset will be used.
          type: string
          format: uuid
        vault_group_id:
          title: Vault Group Id
          description: >-
            The group to add this vault to. If not provided, the vault will be
            created in the Default vault group.
          type: string
          format: uuid
        type:
          const: utxo
          title: Type
          description: UTXO vault type.
        chain:
          allOf:
            - $ref: '#/components/schemas/UtxoChainUniqueId'
          description: The UTXO chain type.
      type: object
      required:
        - name
        - type
        - chain
      title: CreateUtxoVaultRequest
    CreateVaultAddressErrorType:
      type: string
      const: invalid_vault_type
      title: CreateVaultAddressErrorType
    CreateVaultAddressRequest:
      allOf:
        - $ref: '#/components/schemas/CreateUtxoVaultAddressRequest'
      title: CreateVaultAddressRequest
    CreateVaultAddressResponse:
      allOf:
        - $ref: '#/components/schemas/UtxoVaultAddress'
      title: CreateVaultAddressResponse
    CreateVaultErrorType:
      type: string
      enum:
        - cosmos_not_supported
        - max_vaults_reached
        - mpc_key_is_missing
        - keyset_is_missing
        - user_keyset_is_required_for_organization
        - keyset_not_ready
      title: CreateVaultErrorType
    CreateVaultRequest:
      oneOf:
        - $ref: '#/components/schemas/CreateBlackBoxVaultRequest'
        - $ref: '#/components/schemas/CreateCosmosVaultRequest'
        - $ref: '#/components/schemas/CreateEvmVaultRequest'
        - $ref: '#/components/schemas/CreateSolanaVaultRequest'
        - $ref: '#/components/schemas/CreateUtxoVaultRequest'
      title: CreateVaultRequest
      discriminator:
        propertyName: type
        mapping:
          black_box: '#/components/schemas/CreateBlackBoxVaultRequest'
          cosmos: '#/components/schemas/CreateCosmosVaultRequest'
          evm: '#/components/schemas/CreateEvmVaultRequest'
          solana: '#/components/schemas/CreateSolanaVaultRequest'
          utxo: '#/components/schemas/CreateUtxoVaultRequest'
    CreateVaultResponse:
      oneOf:
        - $ref: '#/components/schemas/BlackBoxVault'
        - $ref: '#/components/schemas/CosmosVault'
        - $ref: '#/components/schemas/EvmVault'
        - $ref: '#/components/schemas/SolanaVault'
        - $ref: '#/components/schemas/UtxoVault'
      title: CreateVaultResponse
      discriminator:
        propertyName: type
        mapping:
          black_box: '#/components/schemas/BlackBoxVault'
          cosmos: '#/components/schemas/CosmosVault'
          evm: '#/components/schemas/EvmVault'
          solana: '#/components/schemas/SolanaVault'
          utxo: '#/components/schemas/UtxoVault'
    CustomFeeRequest:
      properties:
        type:
          const: custom
          title: Type
        fee_per_byte:
          type: string
          pattern: ^0*[1-9]\d*$
          title: Fee Per Byte
          description: The fee per byte.
          example: '1000000000000000000'
      type: object
      required:
        - type
        - fee_per_byte
      title: CustomFeeRequest
    CustomGasRequest:
      properties:
        gas_limit:
          title: Gas Limit
          description: >-
            The gas limit of the transaction, that is, the number of gas units
            you are willing to use for mining the transaction.
          type: string
          pattern: ^0*[1-9]\d*$
          example: '1000000000000000000'
        type:
          const: custom
          title: Type
        details:
          oneOf:
            - $ref: '#/components/schemas/LegacyGasRequest'
            - $ref: '#/components/schemas/DynamicGasRequest'
          title: Details
          description: >-
            Using the Custom Gas Request option, you specify `gas_limit`, as
            well as the following gas details: <ul><li>If you choose `legacy`
            (meaning a chain where gas price can specified exactly), you must
            specify only the `price` of a gas unit. <li>If you choose `dynamic`
            (meaning a chain where gas price can be determined dynamically), you
            must specify two additional values:
            <ul><li>`max_priority_fee_per_gas`, the maximum tip amount for
            mining your transaction <li> `max_fee_per_gas`, the maximum amount
            you are willing to pay for the fee (ultimately, either you'll pay
            this amount, or less, depending on the network base fee). </ul>
          discriminator:
            propertyName: type
            mapping:
              dynamic: '#/components/schemas/DynamicGasRequest'
              legacy: '#/components/schemas/LegacyGasRequest'
      type: object
      required:
        - type
        - details
      title: CustomGasRequest
    Dapp:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of this DApp.
        name:
          type: string
          title: Name
          description: The name of the DApp.
        url:
          title: Url
          description: The URL of the DApp.
          type: string
          minLength: 1
          format: uri
        logo_url:
          title: Logo Url
          description: The logo URL of the DApp.
          type: string
          minLength: 1
          format: uri
      type: object
      required:
        - id
        - name
      title: Dapp
    DefinedPreconditionError_AbortTransactionErrorType_:
      properties:
        title:
          type: string
          title: Title
          description: Human-readable error message.
        detail:
          type: string
          title: Detail
          description: Detailed error message.
        request_id:
          title: Request Id
          description: Request ID - for debugging purposes.
          type: string
        system_error_code:
          title: System Error Code
          description: An additional system error code in Fordefi.
          type: string
        error_type:
          $ref: '#/components/schemas/AbortTransactionErrorType'
      type: object
      required:
        - title
        - detail
      title: DefinedPreconditionError[AbortTransactionErrorType]
    DefinedPreconditionError_ApproveTransactionErrorType_:
      properties:
        title:
          type: string
          title: Title
          description: Human-readable error message.
        detail:
          type: string
          title: Detail
          description: Detailed error message.
        request_id:
          title: Request Id
          description: Request ID - for debugging purposes.
          type: string
        system_error_code:
          title: System Error Code
          description: An additional system error code in Fordefi.
          type: string
        error_type:
          $ref: '#/components/schemas/ApproveTransactionErrorType'
      type: object
      required:
        - title
        - detail
      title: DefinedPreconditionError[ApproveTransactionErrorType]
    DefinedPreconditionError_CreateEndUserErrorType_:
      properties:
        title:
          type: string
          title: Title
          description: Human-readable error message.
        detail:
          type: string
          title: Detail
          description: Detailed error message.
        request_id:
          title: Request Id
          description: Request ID - for debugging purposes.
          type: string
        system_error_code:
          title: System Error Code
          description: An additional system error code in Fordefi.
          type: string
        error_type:
          $ref: '#/components/schemas/CreateEndUserErrorType'
      type: object
      required:
        - title
        - detail
      title: DefinedPreconditionError[CreateEndUserErrorType]
    DefinedPreconditionError_CreateKeysetErrorType_:
      properties:
        title:
          type: string
          title: Title
          description: Human-readable error message.
        detail:
          type: string
          title: Detail
          description: Detailed error message.
        request_id:
          title: Request Id
          description: Request ID - for debugging purposes.
          type: string
        system_error_code:
          title: System Error Code
          description: An additional system error code in Fordefi.
          type: string
        error_type:
          $ref: '#/components/schemas/CreateKeysetErrorType'
      type: object
      required:
        - title
        - detail
      title: DefinedPreconditionError[CreateKeysetErrorType]
    DefinedPreconditionError_CreateTransactionErrorType_:
      properties:
        title:
          type: string
          title: Title
          description: Human-readable error message.
        detail:
          type: string
          title: Detail
          description: Detailed error message.
        request_id:
          title: Request Id
          description: Request ID - for debugging purposes.
          type: string
        system_error_code:
          title: System Error Code
          description: An additional system error code in Fordefi.
          type: string
        error_type:
          $ref: '#/components/schemas/CreateTransactionErrorType'
      type: object
      required:
        - title
        - detail
      title: DefinedPreconditionError[CreateTransactionErrorType]
    DefinedPreconditionError_CreateVaultAddressErrorType_:
      properties:
        title:
          type: string
          title: Title
          description: Human-readable error message.
        detail:
          type: string
          title: Detail
          description: Detailed error message.
        request_id:
          title: Request Id
          description: Request ID - for debugging purposes.
          type: string
        system_error_code:
          title: System Error Code
          description: An additional system error code in Fordefi.
          type: string
        error_type:
          $ref: '#/components/schemas/CreateVaultAddressErrorType'
      type: object
      required:
        - title
        - detail
      title: DefinedPreconditionError[CreateVaultAddressErrorType]
    DefinedPreconditionError_CreateVaultErrorType_:
      properties:
        title:
          type: string
          title: Title
          description: Human-readable error message.
        detail:
          type: string
          title: Detail
          description: Detailed error message.
        request_id:
          title: Request Id
          description: Request ID - for debugging purposes.
          type: string
        system_error_code:
          title: System Error Code
          description: An additional system error code in Fordefi.
          type: string
        error_type:
          $ref: '#/components/schemas/CreateVaultErrorType'
      type: object
      required:
        - title
        - detail
      title: DefinedPreconditionError[CreateVaultErrorType]
    DefinedPreconditionError_IssueEndUserAuthTokenErrorType_:
      properties:
        title:
          type: string
          title: Title
          description: Human-readable error message.
        detail:
          type: string
          title: Detail
          description: Detailed error message.
        request_id:
          title: Request Id
          description: Request ID - for debugging purposes.
          type: string
        system_error_code:
          title: System Error Code
          description: An additional system error code in Fordefi.
          type: string
        error_type:
          $ref: '#/components/schemas/IssueEndUserAuthTokenErrorType'
      type: object
      required:
        - title
        - detail
      title: DefinedPreconditionError[IssueEndUserAuthTokenErrorType]
    DefinedPreconditionError_PredictTransactionErrorType_:
      properties:
        title:
          type: string
          title: Title
          description: Human-readable error message.
        detail:
          type: string
          title: Detail
          description: Detailed error message.
        request_id:
          title: Request Id
          description: Request ID - for debugging purposes.
          type: string
        system_error_code:
          title: System Error Code
          description: An additional system error code in Fordefi.
          type: string
        error_type:
          $ref: '#/components/schemas/PredictTransactionErrorType'
      type: object
      required:
        - title
        - detail
      title: DefinedPreconditionError[PredictTransactionErrorType]
    DefinedPreconditionError_ReleaseTransactionErrorType_:
      properties:
        title:
          type: string
          title: Title
          description: Human-readable error message.
        detail:
          type: string
          title: Detail
          description: Detailed error message.
        request_id:
          title: Request Id
          description: Request ID - for debugging purposes.
          type: string
        system_error_code:
          title: System Error Code
          description: An additional system error code in Fordefi.
          type: string
        error_type:
          $ref: '#/components/schemas/ReleaseTransactionErrorType'
      type: object
      required:
        - title
        - detail
      title: DefinedPreconditionError[ReleaseTransactionErrorType]
    DefinedPreconditionError_TestWebhookErrorType_:
      properties:
        title:
          type: string
          title: Title
          description: Human-readable error message.
        detail:
          type: string
          title: Detail
          description: Detailed error message.
        request_id:
          title: Request Id
          description: Request ID - for debugging purposes.
          type: string
        system_error_code:
          title: System Error Code
          description: An additional system error code in Fordefi.
          type: string
        error_type:
          $ref: '#/components/schemas/TestWebhookErrorType'
      type: object
      required:
        - title
        - detail
      title: DefinedPreconditionError[TestWebhookErrorType]
    DescribeTransactionRequest:
      oneOf:
        - $ref: '#/components/schemas/TransactionDetailsCosmosTransactionRequest'
        - $ref: '#/components/schemas/TransactionDetailsCosmosMessageRequest'
        - $ref: '#/components/schemas/TransactionDetailsEvmMessageRequest'
        - $ref: '#/components/schemas/TransactionDetailsEvmTransactionRequest'
        - $ref: '#/components/schemas/TransactionDetailsSolanaMessageRequest'
        - $ref: '#/components/schemas/TransactionDetailsSolanaTransactionRequest'
      title: DescribeTransactionRequest
      discriminator:
        propertyName: type
        mapping:
          cosmos_message: '#/components/schemas/TransactionDetailsCosmosMessageRequest'
          cosmos_transaction: '#/components/schemas/TransactionDetailsCosmosTransactionRequest'
          evm_message: '#/components/schemas/TransactionDetailsEvmMessageRequest'
          evm_transaction: '#/components/schemas/TransactionDetailsEvmTransactionRequest'
          solana_message: '#/components/schemas/TransactionDetailsSolanaMessageRequest'
          solana_transaction: '#/components/schemas/TransactionDetailsSolanaTransactionRequest'
    DescribeTransactionResponse:
      oneOf:
        - $ref: '#/components/schemas/DescribedCosmosTransaction'
        - $ref: '#/components/schemas/DescribedCosmosMessage'
        - $ref: '#/components/schemas/DescribedEvmMessage'
        - $ref: '#/components/schemas/DescribedEvmTransaction'
        - $ref: '#/components/schemas/DescribedSolanaMessage'
        - $ref: '#/components/schemas/DescribedSolanaTransaction'
      title: DescribeTransactionResponse
      discriminator:
        propertyName: type
        mapping:
          cosmos_message: '#/components/schemas/DescribedCosmosMessage'
          cosmos_transaction: '#/components/schemas/DescribedCosmosTransaction'
          evm_message: '#/components/schemas/DescribedEvmMessage'
          evm_transaction: '#/components/schemas/DescribedEvmTransaction'
          solana_message: '#/components/schemas/DescribedSolanaMessage'
          solana_transaction: '#/components/schemas/DescribedSolanaTransaction'
    DescribedCosmosMessage:
      properties:
        type:
          const: cosmos_message
          title: Type
          description: The type of the transaction.
        vault:
          allOf:
            - $ref: '#/components/schemas/VaultRef'
          description: The vault creating the message.
        cosmos_message_type:
          allOf:
            - $ref: '#/components/schemas/CosmosMessageType'
          description: The type of the Cosmos message.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosChain'
          description: The details of the chain that this message is on.
        data:
          allOf:
            - $ref: '#/components/schemas/CosmosMessageData'
          description: The message to be signed.
      type: object
      required:
        - type
        - vault
        - cosmos_message_type
        - chain
        - data
      title: DescribedCosmosMessage
    DescribedCosmosTransaction:
      properties:
        type:
          const: cosmos_transaction
          title: Type
          description: The type of the transaction.
        cosmos_transaction_type_details:
          allOf:
            - $ref: '#/components/schemas/CosmosTransactionTypeDetails'
          description: Transaction details
        memo:
          title: Memo
          description: Transaction memo.
          default: ''
          type: string
        sender:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosBechAddress'
          description: The sender.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosChain'
          description: The details of the chain this transaction is on
        gas_debit:
          allOf:
            - $ref: '#/components/schemas/CosmosGasDebit'
          description: The gas debit of the transaction.
        suggested_fees:
          allOf:
            - $ref: '#/components/schemas/CosmosSuggestedFees'
          description: The suggested fees.
      type: object
      required:
        - type
        - cosmos_transaction_type_details
        - sender
        - chain
        - gas_debit
        - suggested_fees
      title: DescribedCosmosTransaction
    DescribedEvmMessage:
      properties:
        type:
          const: evm_message
          title: Type
          description: The type of the transaction.
        vault:
          allOf:
            - $ref: '#/components/schemas/VaultRef'
          description: The vault creating the message.
        evm_message_type:
          allOf:
            - $ref: '#/components/schemas/EvmMessageType'
          description: The type of the EVM message.
        typed_data:
          title: Typed Data
          description: The typed data of the messages.
          oneOf:
            - $ref: '#/components/schemas/UnknownTypedMessageEvmMessage'
            - $ref: '#/components/schemas/PermitTypedMessageEvmMessage'
            - $ref: '#/components/schemas/Permit2TypedMessageEvmMessage'
          discriminator:
            propertyName: type
            mapping:
              permit: '#/components/schemas/PermitTypedMessageEvmMessage'
              permit2: '#/components/schemas/Permit2TypedMessageEvmMessage'
              unknown: '#/components/schemas/UnknownTypedMessageEvmMessage'
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmChain'
          description: The details of the chain that this message is on.
        raw_data:
          type: string
          title: Raw Data
          description: The raw data of the message.
      type: object
      required:
        - type
        - vault
        - evm_message_type
        - chain
        - raw_data
      title: DescribedEvmMessage
    DescribedEvmTransaction:
      properties:
        type:
          const: evm_transaction
          title: Type
          description: The type of the transaction.
        evm_transaction_type_details:
          oneOf:
            - $ref: '#/components/schemas/EvmNativeTransferDetails'
            - $ref: '#/components/schemas/TokenTransferDetails'
            - $ref: '#/components/schemas/AllowanceDetails'
            - $ref: '#/components/schemas/ContractCallDetails'
            - $ref: '#/components/schemas/BridgeDetails'
          title: Evm Transaction Type Details
          description: Details of EVM transaction based on its type.
          discriminator:
            propertyName: type
            mapping:
              allowance: '#/components/schemas/AllowanceDetails'
              contract_call: '#/components/schemas/ContractCallDetails'
              cross_chain_bridge: '#/components/schemas/BridgeDetails'
              native_transfer: '#/components/schemas/EvmNativeTransferDetails'
              token_transfer: '#/components/schemas/TokenTransferDetails'
        parsed_data:
          allOf:
            - $ref: '#/components/schemas/EvmTransactionParsedData'
          description: The parsed data of the transaction.
        gas_limit:
          title: Gas Limit
          description: The gas limit.
          deprecated: true
          type: string
          pattern: ^0*[1-9]\d*$
          example: '1000000000000000000'
        gas_estimation:
          description: The gas estimation.
          $ref: '#/components/schemas/EvmGasEstimation'
        suggested_fees:
          allOf:
            - $ref: '#/components/schemas/EvmSuggestedFees'
          description: The suggested fees.
        from:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The sender of the transaction.
        to:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The recipient of the transaction.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmChain'
          description: The details of the chain this transaction is on
        hex_data:
          title: Hex Data
          description: >-
            The hex data of the contract call, as a serialized method-call with
            its arguments.
          type: string
          pattern: ^0[xX][a-fA-F0-9]+$
      type: object
      required:
        - type
        - evm_transaction_type_details
        - parsed_data
        - suggested_fees
        - from
        - to
        - chain
      title: DescribedEvmTransaction
    DescribedSolanaMessage:
      properties:
        type:
          const: solana_message
          title: Type
          description: The type of the transaction.
        vault:
          allOf:
            - $ref: '#/components/schemas/VaultRef'
          description: The vault creating the message.
        solana_message_type:
          allOf:
            - $ref: '#/components/schemas/SolanaMessageType'
          description: The type of the Solana message.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaChain'
          description: The details of the chain that this message is on.
        raw_data:
          type: string
          title: Raw Data
          description: The message.
      type: object
      required:
        - type
        - vault
        - solana_message_type
        - chain
        - raw_data
      title: DescribedSolanaMessage
    DescribedSolanaTransaction:
      properties:
        type:
          const: solana_transaction
          title: Type
          description: The type of the transaction.
        solana_transaction_type_details:
          oneOf:
            - $ref: '#/components/schemas/SolanaNativeTransferDetails'
            - $ref: '#/components/schemas/SolanaTokenTransferDetails'
            - $ref: '#/components/schemas/SolanaRawTransactionDetails'
          title: Solana Transaction Type Details
          description: Details of Solana transaction based on its type.
          discriminator:
            propertyName: type
            mapping:
              native_transfer: '#/components/schemas/SolanaNativeTransferDetails'
              raw_transaction: '#/components/schemas/SolanaRawTransactionDetails'
              token_transfer: '#/components/schemas/SolanaTokenTransferDetails'
        sender:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaAddress'
          description: The sender of the transaction.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaChain'
          description: The details of the chain this transaction is on
        fee:
          type: string
          pattern: ^0*[1-9]\d*$
          title: Fee
          description: The fee of the transaction (in lamports).
          deprecated: true
          example: '1000000000000000000'
        enriched_fee:
          allOf:
            - $ref: '#/components/schemas/SolanaFee'
          description: The fee of the transaction.
        suggested_fees:
          allOf:
            - $ref: '#/components/schemas/SolanaSuggestedFees'
          description: The suggested fees.
        instructions:
          items:
            $ref: '#/components/schemas/SolanaCompiledInstruction'
          type: array
          title: Instructions
          description: The instructions of the transaction.
      type: object
      required:
        - type
        - solana_transaction_type_details
        - sender
        - chain
        - fee
        - enriched_fee
        - suggested_fees
        - instructions
      title: DescribedSolanaTransaction
    DirectMessage:
      properties:
        type:
          type: string
          title: Type
          description: Message type.
        value:
          type: string
          title: Value
          description: Message bytes, encoded in base64 format.
          example: SGVsbG8=
      type: object
      required:
        - type
        - value
      title: DirectMessage
    DirectMessagesList:
      properties:
        format:
          const: direct
          title: Format
        messages:
          items:
            $ref: '#/components/schemas/DirectMessage'
          type: array
          title: Messages
          description: List of messages in direct format.
      type: object
      required:
        - format
        - messages
      title: DirectMessagesList
    DirectRequestData:
      properties:
        format:
          const: direct
          title: Format
        body:
          type: string
          title: Body
          description: Body bytes, encoded in base64 format.
          example: SGVsbG8=
        auth_info:
          type: string
          title: Auth Info
          description: AuthInfo bytes, encoded in base64 format.
          example: SGVsbG8=
        account_number:
          title: Account Number
          description: Account number of signer.
          type: string
          pattern: ^\d+$
          example: '1000000000000000000'
      type: object
      required:
        - format
        - body
        - auth_info
      title: DirectRequestData
    DirectSignDoc:
      properties:
        format:
          const: direct
          title: Format
        body:
          type: string
          title: Body
          description: Body bytes, encoded in base64 format.
          example: SGVsbG8=
        auth_info:
          type: string
          title: Auth Info
          description: Auth info bytes, encoded in base64 format.
          example: SGVsbG8=
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosChain'
          description: The chain the transaction is signed on.
        account_number:
          type: string
          pattern: ^\d+$
          title: Account Number
          description: The account number.
          example: '1000000000000000000'
        signed_body:
          type: string
          title: Signed Body
          description: >-
            Actual body bytes that were used when signing the transaction,
            encoded in base64 format.
          example: SGVsbG8=
        signed_auth_info:
          type: string
          title: Signed Auth Info
          description: >-
            Actual auth info that was used when signing the transaction, encoded
            in base64 format.
          example: SGVsbG8=
      type: object
      required:
        - format
        - body
        - auth_info
        - chain
        - account_number
        - signed_body
        - signed_auth_info
      title: DirectSignDoc
    DynamicGas:
      properties:
        max_priority_fee_per_gas:
          type: string
          pattern: ^\d+$
          title: Max Priority Fee Per Gas
          description: The maximum tip amount for mining the transaction.
          example: '1000000000000000000'
        max_fee_per_gas:
          type: string
          pattern: ^\d+$
          title: Max Fee Per Gas
          description: The maximum amount paid for the fee.
          example: '1000000000000000000'
        priority:
          allOf:
            - $ref: '#/components/schemas/GasPriorityLevel'
          description: The gas priority.
        limit:
          type: string
          pattern: ^\d+$
          title: Limit
          description: The gas limit.
          example: '1000000000000000000'
        type:
          const: dynamic
          title: Type
          description: The type of gas data.
      type: object
      required:
        - max_priority_fee_per_gas
        - max_fee_per_gas
        - priority
        - limit
        - type
      title: DynamicGas
    DynamicGasFields:
      properties:
        max_priority_fee_per_gas:
          type: string
          pattern: ^\d+$
          title: Max Priority Fee Per Gas
          description: The maximum tip amount for mining the transaction.
          example: '1000000000000000000'
        max_fee_per_gas:
          type: string
          pattern: ^\d+$
          title: Max Fee Per Gas
          description: The maximum amount paid for the fee.
          example: '1000000000000000000'
      type: object
      required:
        - max_priority_fee_per_gas
        - max_fee_per_gas
      title: DynamicGasFields
    DynamicGasRequest:
      properties:
        type:
          const: dynamic
          title: Type
          description: The type of gas data.
        max_priority_fee_per_gas:
          type: string
          pattern: ^\d+$
          title: Max Priority Fee Per Gas
          description: Max priority fee per gas.
          example: '1000000000000000000'
        max_fee_per_gas:
          type: string
          pattern: ^0*[1-9]\d*$
          title: Max Fee Per Gas
          description: Max fee per gas.
          example: '1000000000000000000'
      type: object
      required:
        - type
        - max_priority_fee_per_gas
        - max_fee_per_gas
      title: DynamicGasRequest
    EVMAddressBookContact:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        name:
          type: string
          title: Name
          description: The name of the contact.
        modified_by:
          allOf:
            - $ref: '#/components/schemas/UserRef'
          description: Address last modifier.
        state:
          allOf:
            - $ref: '#/components/schemas/AddressBookContactState'
          description: The state of the contact.
        groups:
          items:
            $ref: '#/components/schemas/GroupRef'
          type: array
          title: Groups
          description: List of contact's groups.
        pending_changes:
          description: Pending changes for the contact.
          $ref: '#/components/schemas/AddressBookContactChanges'
        chain_type:
          const: evm
          title: Chain Type
          description: The type of the chain.
        address:
          type: string
          maxLength: 42
          minLength: 42
          pattern: ^0[xX][a-fA-F0-9]+$
          title: Address
          description: TThe address of the contact.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        chains:
          items:
            $ref: '#/components/schemas/EnrichedEvmChain'
          type: array
          title: Chains
          description: The chains the contact belongs to.
      type: object
      required:
        - id
        - created_at
        - modified_at
        - name
        - modified_by
        - state
        - groups
        - chain_type
        - address
        - chains
      title: EVMAddressBookContact
    EVMAddressBookContactAddressRef:
      properties:
        chain_type:
          const: evm
          title: Chain Type
          description: The type of the chain.
        address:
          type: string
          maxLength: 42
          minLength: 42
          pattern: ^0[xX][a-fA-F0-9]+$
          title: Address
          description: The address of the contact.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        chains:
          items:
            $ref: '#/components/schemas/EvmChain'
          type: array
          title: Chains
          description: The chains the contact belongs to.
      type: object
      required:
        - chain_type
        - address
        - chains
      title: EVMAddressBookContactAddressRef
    EcdsaSecp256k1BlackBoxVault:
      properties:
        type:
          const: ecdsa_secp256k1
          title: Type
          description: ECDSA over the secp256k1 curve signing scheme.
      type: object
      required:
        - type
      title: EcdsaSecp256k1BlackBoxVault
    EcdsaSignature:
      properties:
        r:
          type: string
          pattern: ^0[xX][a-fA-F0-9]+$
          title: R
          description: >-
            The x-coordinate of the point on the curve, represented in hex
            format.
        s:
          type: string
          pattern: ^0[xX][a-fA-F0-9]+$
          title: S
          description: >-
            The scalar, known as the "signature proof", represented in hex
            format.
        v:
          type: integer
          title: V
          description: The recovery id, only relevant for Ethereum signtures.
      type: object
      required:
        - r
        - s
        - v
      title: EcdsaSignature
    EcdsaStarkBlackBoxVault:
      properties:
        type:
          const: ecdsa_stark
          title: Type
          description: ECDSA over the Stark curve signing scheme.
        public_key:
          type: string
          maxLength: 66
          pattern: ^0[xX][a-fA-F0-9]+$
          title: Public Key
          description: The stark public key, represented in hex format.
          deprecated: true
          example: '0x19c78df8f4ff31e78de58575487ce1eaf19922ad9b8a714e61a441c12e0c8b2'
        stark_key:
          type: string
          maxLength: 66
          pattern: ^0[xX][a-fA-F0-9]+$
          title: Stark Key
          description: The stark public key, represented in hex format.
          example: '0x19c78df8f4ff31e78de58575487ce1eaf19922ad9b8a714e61a441c12e0c8b2'
      type: object
      required:
        - type
        - public_key
        - stark_key
      title: EcdsaStarkBlackBoxVault
    EncryptedDeviceSharesBackup:
      properties:
        id:
          title: Id
          description: The ID of the backup. Not provided for organization keysets.
          type: string
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The time the backup was created.
        ecdsa:
          title: Ecdsa
          description: Device ECDSA encrypted share
          type: string
          example: SGVsbG8=
        eddsa:
          title: Eddsa
          description: Device EdDSA encrypted share
          type: string
          example: SGVsbG8=
        ecdsa_stark:
          title: Ecdsa Stark
          description: Device ECDSA stark encrypted share
          type: string
          example: SGVsbG8=
      type: object
      required:
        - created_at
      title: EncryptedDeviceSharesBackup
    EndUser:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        external_id:
          type: string
          title: External Id
          description: The ID that you assigned to the end user.
          example: user|1234
        last_login_at:
          type: string
          format: date-time
          title: Last Login At
          description: The timestamp when the end user last logged into the mobile SDK.
      type: object
      required:
        - id
        - created_at
        - modified_at
        - external_id
        - last_login_at
      title: EndUser
      description: Represents an end user in the Fordefi platform.
    EndUserRef:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the user in the Fordefi platform.
        user_type:
          const: end_user
          title: User Type
          description: The type of the user.
        external_id:
          type: string
          title: External Id
          description: External id of the user.
          example: user|1234
        state:
          type: string
          enum:
            - active
            - deleted
          title: State
          description: The state of the user.
      type: object
      required:
        - id
        - user_type
        - external_id
        - state
      title: EndUserRef
    EndUserSortableFields:
      type: string
      enum:
        - created_asc
        - created_desc
        - end_user_last_login_asc
        - end_user_last_login_desc
      title: EndUserSortableFields
    EnrichedAssetIdentifier:
      oneOf:
        - $ref: '#/components/schemas/EnrichedCosmosAssetIdentifier'
        - $ref: '#/components/schemas/EnrichedEvmAssetIdentifier'
        - $ref: '#/components/schemas/EnrichedSolanaAssetIdentifier'
        - $ref: '#/components/schemas/EnrichedUtxoAssetIdentifier'
      title: EnrichedAssetIdentifier
      discriminator:
        propertyName: type
        mapping:
          cosmos: '#/components/schemas/EnrichedCosmosAssetIdentifier'
          evm: '#/components/schemas/EnrichedEvmAssetIdentifier'
          solana: '#/components/schemas/EnrichedSolanaAssetIdentifier'
          utxo: '#/components/schemas/EnrichedUtxoAssetIdentifier'
    EnrichedChain:
      oneOf:
        - $ref: '#/components/schemas/EnrichedCosmosChain'
        - $ref: '#/components/schemas/EnrichedEvmChain'
        - $ref: '#/components/schemas/EnrichedSolanaChain'
        - $ref: '#/components/schemas/EnrichedUtxoChain'
      title: EnrichedChain
      description: A blockchain with metadata.
      discriminator:
        propertyName: chain_type
        mapping:
          cosmos: '#/components/schemas/EnrichedCosmosChain'
          evm: '#/components/schemas/EnrichedEvmChain'
          solana: '#/components/schemas/EnrichedSolanaChain'
          utxo: '#/components/schemas/EnrichedUtxoChain'
    EnrichedCosmosAssetIdentifier:
      properties:
        type:
          const: cosmos
          title: Type
          description: Asset identifier type.
        details:
          oneOf:
            - $ref: '#/components/schemas/EnrichedCosmosNativeAssetIdentifier'
            - $ref: '#/components/schemas/EnrichedCosmosTokenAssetIdentifier'
          title: Details
          discriminator:
            propertyName: type
            mapping:
              native: '#/components/schemas/EnrichedCosmosNativeAssetIdentifier'
              token: '#/components/schemas/EnrichedCosmosTokenAssetIdentifier'
      type: object
      required:
        - type
        - details
      title: EnrichedCosmosAssetIdentifier
    EnrichedCosmosBechAddress:
      properties:
        vault:
          description: The vault corresponding to this address.
          $ref: '#/components/schemas/VaultRef'
        explorer_url:
          title: Explorer Url
          description: >-
            The URL of a blockchain explorer that provides real-time information
            about the address.
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
        contact:
          description: The contact details of this address.
          $ref: '#/components/schemas/ContactRef'
        address:
          allOf:
            - $ref: '#/components/schemas/CosmosBechAddress'
          description: The Bech32 address.
      type: object
      required:
        - address
      title: EnrichedCosmosBechAddress
    EnrichedCosmosChain:
      properties:
        chain_type:
          const: cosmos
          title: Chain Type
          description: The type of the chain.
        unique_id:
          allOf:
            - $ref: '#/components/schemas/CosmosChainUniqueId'
          description: The Cosmos chain unique id.
        name:
          type: string
          minLength: 1
          title: Name
          description: The full blockchain name.
        native_currency_symbol:
          type: string
          minLength: 1
          title: Native Currency Symbol
          description: The native currency symbol.
          example: ETH
        native_currency_name:
          type: string
          minLength: 1
          title: Native Currency Name
          description: The native currency name.
          example: Ether
        blockchain_explorer:
          $ref: '#/components/schemas/BlockchainExplorer'
        base_denom:
          type: string
          title: Base Denom
          description: The base denom of the chain.
        bech32_prefix:
          allOf:
            - $ref: '#/components/schemas/CosmosBech32Prefix'
          description: The bech32 prefix for addresses on the chain.
      type: object
      required:
        - chain_type
        - unique_id
        - name
        - native_currency_symbol
        - native_currency_name
        - blockchain_explorer
        - base_denom
        - bech32_prefix
      title: EnrichedCosmosChain
    EnrichedCosmosNativeAssetIdentifier:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosChain'
          description: The details of the chain of the asset.
        type:
          const: native
          title: Type
          description: Cosmos native asset type.
        coin:
          allOf:
            - $ref: '#/components/schemas/CosmosNativeCoin'
          description: The details of the coin.
      type: object
      required:
        - chain
        - type
        - coin
      title: EnrichedCosmosNativeAssetIdentifier
    EnrichedCosmosTokenAssetIdentifier:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosChain'
          description: The details of the chain of the asset.
        type:
          const: token
          title: Type
          description: Cosmos token asset type.
        coin:
          allOf:
            - $ref: '#/components/schemas/CosmosToken'
          description: The details of the coin.
      type: object
      required:
        - chain
        - type
        - coin
      title: EnrichedCosmosTokenAssetIdentifier
    EnrichedEvmAddress:
      properties:
        vault:
          description: The vault corresponding to this address.
          $ref: '#/components/schemas/VaultRef'
        explorer_url:
          title: Explorer Url
          description: >-
            The URL of a blockchain explorer that provides real-time information
            about the address.
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
        contact:
          description: The contact details of this address.
          $ref: '#/components/schemas/ContactRef'
        address:
          type: string
          maxLength: 42
          minLength: 42
          pattern: ^0[xX][a-fA-F0-9]+$
          title: Address
          description: The EVM address.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        contract:
          description: The contract details corresponding to this address.
          $ref: '#/components/schemas/EvmContractMetadata'
      type: object
      required:
        - address
      title: EnrichedEvmAddress
    EnrichedEvmAssetIdentifier:
      properties:
        type:
          const: evm
          title: Type
          description: Asset identifier type.
        details:
          oneOf:
            - $ref: '#/components/schemas/EnrichedEvmNativeAssetIdentifier'
            - $ref: '#/components/schemas/EnrichedEvmErc20AssetIdentifier'
            - $ref: '#/components/schemas/EnrichedEvmErc721AssetIdentifier'
            - $ref: '#/components/schemas/EnrichedEvmErc1155AssetIdentifier'
          title: Details
          discriminator:
            propertyName: type
            mapping:
              erc1155: '#/components/schemas/EnrichedEvmErc1155AssetIdentifier'
              erc20: '#/components/schemas/EnrichedEvmErc20AssetIdentifier'
              erc721: '#/components/schemas/EnrichedEvmErc721AssetIdentifier'
              native: '#/components/schemas/EnrichedEvmNativeAssetIdentifier'
      type: object
      required:
        - type
        - details
      title: EnrichedEvmAssetIdentifier
    EnrichedEvmChain:
      properties:
        chain_type:
          const: evm
          title: Chain Type
          description: The type of the chain.
        named_chain_id:
          allOf:
            - $ref: '#/components/schemas/EvmChainName'
          description: The EVM chain name.
        chain_id:
          allOf:
            - $ref: '#/components/schemas/EvmChainId'
          description: >-
            The EVM chain id. <ul>
            <li>1=`ethereum_mainnet`<li>5=`ethereum_goerli`<li>10=`optimism_mainnet`<li>56=`bsc_mainnet`<li>100=`gnosis_mainnet`<li>137=`polygon`<li>169=`manta_pacific_mainnet`<li>250=`fantom_mainnet`<li>324=`zksync_era_mainnet`<li>1030=`conflux_espace_mainnet`<li>1100=`dymension_mainnet`<li>1101=`polygon_zkevm_mainnet`<li>2222=`kava_mainnet`<li>4200=`merlin_mainnet`<li>5000=`mantle_mainnet`<li>7700=`canto_mainnet`<li>8453=`base_mainnet`<li>17000=`holesky_mainnet`<li>80001=`polygon_mumbai`<li>42161=`arbitrum_mainnet`<li>43114=`avalanche_mainnet`<li>59144=`linea_mainnet`<li>81457=`blast_mainnet`<li>11155111=`ethereum_sepolia`</ul>
        unique_id:
          allOf:
            - $ref: '#/components/schemas/EvmChainUniqueId'
          description: The EVM chain unique id.
        name:
          type: string
          minLength: 1
          title: Name
          description: The full blockchain name.
        native_currency_symbol:
          type: string
          minLength: 1
          title: Native Currency Symbol
          description: The native currency symbol.
          example: ETH
        native_currency_name:
          type: string
          minLength: 1
          title: Native Currency Name
          description: The native currency name.
          example: Ether
        blockchain_explorer:
          $ref: '#/components/schemas/BlockchainExplorer'
        gas_type:
          allOf:
            - $ref: '#/components/schemas/GasType'
          description: The type of gas used by the chain.
        supports_secure_node:
          type: boolean
          title: Supports Secure Node
          description: '`True` if the chain supports secure nodes, `False` otherwise.'
          default: false
      type: object
      required:
        - chain_type
        - named_chain_id
        - chain_id
        - unique_id
        - name
        - native_currency_symbol
        - native_currency_name
        - blockchain_explorer
        - gas_type
      title: EnrichedEvmChain
    EnrichedEvmErc1155AssetIdentifier:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmChain'
          description: The details of the chain of the native asset.
        type:
          const: erc1155
          title: Type
          description: EVM asset identifier type.
        token:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The ERC-1155 token contract.
        token_id:
          type: string
          pattern: ^\d+$
          title: Token Id
          description: The token id of the ERC-1155 token.
          example: '1000000000000000000'
      type: object
      required:
        - chain
        - type
        - token
        - token_id
      title: EnrichedEvmErc1155AssetIdentifier
    EnrichedEvmErc20AssetIdentifier:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmChain'
          description: The details of the chain of the native asset.
        type:
          const: erc20
          title: Type
          description: EVM asset identifier type.
        token:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The ERC-20 token contract.
      type: object
      required:
        - chain
        - type
        - token
      title: EnrichedEvmErc20AssetIdentifier
    EnrichedEvmErc721AssetIdentifier:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmChain'
          description: The details of the chain of the native asset.
        type:
          const: erc721
          title: Type
          description: EVM asset identifier type.
        token:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The ERC-721 token contract.
        token_id:
          type: string
          pattern: ^\d+$
          title: Token Id
          description: The token id of the ERC-721 token.
          example: '1000000000000000000'
      type: object
      required:
        - chain
        - type
        - token
        - token_id
      title: EnrichedEvmErc721AssetIdentifier
    EnrichedEvmNativeAssetIdentifier:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmChain'
          description: The details of the chain of the native asset.
        type:
          const: native
          title: Type
          description: EVM asset identifier type.
      type: object
      required:
        - chain
        - type
      title: EnrichedEvmNativeAssetIdentifier
    EnrichedSolanaAddress:
      properties:
        vault:
          description: The vault corresponding to this address.
          $ref: '#/components/schemas/VaultRef'
        explorer_url:
          title: Explorer Url
          description: >-
            The URL of a blockchain explorer that provides real-time information
            about the address.
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
        contact:
          description: The contact details of this address.
          $ref: '#/components/schemas/ContactRef'
        address:
          type: string
          maxLength: 44
          minLength: 32
          pattern: ^[a-km-zA-HJ-NP-Z1-9]+$
          title: Address
          description: The Solana address represented in Base58 format.
          example: 4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA
        contract:
          description: The details of the contract corresponding to this address.
          $ref: '#/components/schemas/SolanaContractMetadata'
      type: object
      required:
        - address
      title: EnrichedSolanaAddress
    EnrichedSolanaAssetIdentifier:
      properties:
        type:
          const: solana
          title: Type
          description: Asset identifier type.
        details:
          oneOf:
            - $ref: '#/components/schemas/EnrichedSolanaNativeAssetIdentifier'
            - $ref: '#/components/schemas/EnrichedSolanaSplTokenAssetIdentifier'
          title: Details
          discriminator:
            propertyName: type
            mapping:
              native: '#/components/schemas/EnrichedSolanaNativeAssetIdentifier'
              spl_token: '#/components/schemas/EnrichedSolanaSplTokenAssetIdentifier'
      type: object
      required:
        - type
        - details
      title: EnrichedSolanaAssetIdentifier
    EnrichedSolanaChain:
      properties:
        chain_type:
          const: solana
          title: Chain Type
          description: The type of the chain.
        unique_id:
          allOf:
            - $ref: '#/components/schemas/SolanaChainUniqueId'
          description: The type of the Solana-based chain.
        name:
          type: string
          minLength: 1
          title: Name
          description: The full blockchain name.
        native_currency_symbol:
          type: string
          minLength: 1
          title: Native Currency Symbol
          description: The native currency symbol.
          example: ETH
        native_currency_name:
          type: string
          minLength: 1
          title: Native Currency Name
          description: The native currency name.
          example: Ether
        blockchain_explorer:
          $ref: '#/components/schemas/BlockchainExplorer'
      type: object
      required:
        - chain_type
        - unique_id
        - name
        - native_currency_symbol
        - native_currency_name
        - blockchain_explorer
      title: EnrichedSolanaChain
    EnrichedSolanaNativeAssetIdentifier:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaChain'
          description: The details of the chain of the native asset.
        type:
          const: native
          title: Type
          description: Solana asset type.
      type: object
      required:
        - chain
        - type
      title: EnrichedSolanaNativeAssetIdentifier
    EnrichedSolanaSplTokenAssetIdentifier:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaChain'
          description: The details of the chain of the native asset.
        type:
          const: spl_token
          title: Type
          description: Solana asset type.
        token:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaAddress'
          description: The SPL token minter address.
      type: object
      required:
        - chain
        - type
        - token
      title: EnrichedSolanaSplTokenAssetIdentifier
    EnrichedUtxoAddress:
      properties:
        vault:
          description: The vault corresponding to this address.
          $ref: '#/components/schemas/VaultRef'
        explorer_url:
          title: Explorer Url
          description: >-
            The URL of a blockchain explorer that provides real-time information
            about the address.
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
        contact:
          description: The contact details of this address.
          $ref: '#/components/schemas/ContactRef'
        address:
          allOf:
            - $ref: '#/components/schemas/UtxoAddress'
          description: The UTXO address.
        vault_address:
          description: The vault address corresponding to this address.
          $ref: '#/components/schemas/VaultAddressRef'
      type: object
      required:
        - address
      title: EnrichedUtxoAddress
    EnrichedUtxoAssetIdentifier:
      properties:
        type:
          const: utxo
          title: Type
          description: Asset identifier type.
        details:
          $ref: '#/components/schemas/EnrichedUtxoNativeAssetIdentifier'
      type: object
      required:
        - type
        - details
      title: EnrichedUtxoAssetIdentifier
    EnrichedUtxoChain:
      properties:
        chain_type:
          const: utxo
          title: Chain Type
          description: The type of the chain.
        unique_id:
          allOf:
            - $ref: '#/components/schemas/UtxoChainUniqueId'
          description: The UTXO chain unique ID.
        name:
          type: string
          minLength: 1
          title: Name
          description: The full blockchain name.
        native_currency_symbol:
          type: string
          minLength: 1
          title: Native Currency Symbol
          description: The native currency symbol.
          example: ETH
        native_currency_name:
          type: string
          minLength: 1
          title: Native Currency Name
          description: The native currency name.
          example: Ether
        blockchain_explorer:
          $ref: '#/components/schemas/BlockchainExplorer'
      type: object
      required:
        - chain_type
        - unique_id
        - name
        - native_currency_symbol
        - native_currency_name
        - blockchain_explorer
      title: EnrichedUtxoChain
    EnrichedUtxoNativeAssetIdentifier:
      properties:
        type:
          const: native
          title: Type
          description: UTXO asset type.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedUtxoChain'
          description: The details of the chain of the native asset.
      type: object
      required:
        - type
        - chain
      title: EnrichedUtxoNativeAssetIdentifier
    Erc1155:
      properties:
        address:
          allOf:
            - $ref: '#/components/schemas/EvmAddress'
          description: The token address
        name:
          type: string
          title: Name
          description: The token name
        symbol:
          type: string
          title: Symbol
          description: The token symbol or ticker
        type:
          const: erc1155
          title: Type
          description: The type of the token
      type: object
      required:
        - address
        - name
        - symbol
        - type
      title: Erc1155
    Erc1155AllowanceForAllChange:
      properties:
        type:
          const: erc1155_for_all
          title: Type
        owner:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The owner giving the allowance.
        operator:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The operator receiving the allowance.
        approved:
          type: boolean
          title: Approved
          description: >-
            `True` if the operator is approved to spend the tokens, `False`
            otherwise.
        token_contract:
          allOf:
            - $ref: '#/components/schemas/Erc1155Contract'
          description: The address of the ERC-1155 token.
      type: object
      required:
        - type
        - owner
        - operator
        - approved
        - token_contract
      title: Erc1155AllowanceForAllChange
    Erc1155BalanceChange:
      properties:
        type:
          const: erc1155
          title: Type
        owner:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The address effected by the balance change.
        token_id:
          type: string
          pattern: ^\d+$
          title: Token Id
          description: The token ID that's being transfered.
          example: '1000000000000000000'
        diff:
          type: string
          pattern: ^-?\d+$
          title: Diff
          description: >-
            The number of tokens that were added to or deducted from the owner's
            balance.
          example: '1000000000000000000'
        token_contract:
          allOf:
            - $ref: '#/components/schemas/Erc1155Contract'
          description: The address of the ERC-1155 token.
      type: object
      required:
        - type
        - owner
        - token_id
        - diff
        - token_contract
      title: Erc1155BalanceChange
    Erc1155Contract:
      properties:
        name:
          title: Name
          description: The name of the contract.
          type: string
        dapp:
          description: The DApp details of the contract.
          $ref: '#/components/schemas/Dapp'
        is_verified:
          type: boolean
          title: Is Verified
          description: '`True` if the contract is verified, `False` otherwise.'
        token:
          allOf:
            - $ref: '#/components/schemas/Erc1155'
          description: The token details of the contract.
      type: object
      required:
        - is_verified
        - token
      title: Erc1155Contract
    Erc1155Transfer:
      properties:
        type:
          const: erc1155
          title: Type
        from:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The sender of the ERC-1155 transfer.
        to:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The receiver of the ERC-1155 transfer.
        token_id:
          type: string
          pattern: ^\d+$
          title: Token Id
          description: The token ID that's being transferred.
          example: '1000000000000000000'
        amount:
          type: string
          pattern: ^\d+$
          title: Amount
          description: The amount of the ERC-1155 transfer.
          example: '1000000000000000000'
        token_contract:
          allOf:
            - $ref: '#/components/schemas/Erc1155Contract'
          description: The address of the ERC-1155 token.
      type: object
      required:
        - type
        - from
        - to
        - token_id
        - amount
        - token_contract
      title: Erc1155Transfer
    Erc20:
      properties:
        address:
          allOf:
            - $ref: '#/components/schemas/EvmAddress'
          description: The token address
        name:
          type: string
          title: Name
          description: The token name
        symbol:
          type: string
          title: Symbol
          description: The token symbol or ticker
        type:
          const: erc20
          title: Type
          description: The type of the token
        decimals:
          type: integer
          title: Decimals
          description: The token decimals
        logo_url:
          title: Logo Url
          description: The token logo url
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
      type: object
      required:
        - address
        - name
        - symbol
        - type
        - decimals
      title: Erc20
      description: An ERC-20 token.
    Erc20AllowanceChange:
      properties:
        type:
          const: erc20
          title: Type
        owner:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The owner giving the allowance.
        spender:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The spender receiving the allowance.
        amount:
          type: string
          pattern: ^\d+$
          title: Amount
          description: The amount of allowance.
          example: '1000000000000000000'
        token_contract:
          allOf:
            - $ref: '#/components/schemas/Erc20Contract'
          description: The ERC-20 token contract.
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - type
        - owner
        - spender
        - amount
        - token_contract
      title: Erc20AllowanceChange
    Erc20BalanceChange:
      properties:
        type:
          const: erc20
          title: Type
        owner:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The address effected by the balance change.
        diff:
          type: string
          pattern: ^-?\d+$
          title: Diff
          description: >-
            The number of tokens that were added to or deducted from the owner's
            balance.
          example: '1000000000000000000'
        token_contract:
          allOf:
            - $ref: '#/components/schemas/Erc20Contract'
          description: The ERC-20 token contract.
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - type
        - owner
        - diff
        - token_contract
      title: Erc20BalanceChange
    Erc20Contract:
      properties:
        name:
          title: Name
          description: The name of the contract.
          type: string
        dapp:
          description: The DApp details of the contract.
          $ref: '#/components/schemas/Dapp'
        is_verified:
          type: boolean
          title: Is Verified
          description: '`True` if the contract is verified, `False` otherwise.'
        token:
          allOf:
            - $ref: '#/components/schemas/Erc20'
          description: The token details of the contract.
      type: object
      required:
        - is_verified
        - token
      title: Erc20Contract
    Erc20Transfer:
      properties:
        type:
          const: erc20
          title: Type
        from:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The sender of the ERC-20 transfer.
        to:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The receiver of the ERC-20 transfer.
        amount:
          type: string
          pattern: ^\d+$
          title: Amount
          description: The amount of the ERC-20 transfer.
          example: '1000000000000000000'
        token_contract:
          allOf:
            - $ref: '#/components/schemas/Erc20Contract'
          description: The ERC-20 token contract.
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - type
        - from
        - to
        - amount
        - token_contract
      title: Erc20Transfer
    Erc721:
      properties:
        address:
          allOf:
            - $ref: '#/components/schemas/EvmAddress'
          description: The token address
        name:
          type: string
          title: Name
          description: The token name
        symbol:
          type: string
          title: Symbol
          description: The token symbol or ticker
        type:
          const: erc721
          title: Type
          description: The type of the token
      type: object
      required:
        - address
        - name
        - symbol
        - type
      title: Erc721
    Erc721AllowanceChange:
      properties:
        type:
          const: erc721
          title: Type
        owner:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The owner giving the allowance.
        operator:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The operator receiving the allowance.
        token_id:
          type: string
          pattern: ^\d+$
          title: Token Id
          description: The token ID that's being approved.
          example: '1000000000000000000'
        token_contract:
          allOf:
            - $ref: '#/components/schemas/Erc721Contract'
          description: The address of the ERC-721 token.
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - type
        - owner
        - operator
        - token_id
        - token_contract
      title: Erc721AllowanceChange
    Erc721AllowanceForAllChange:
      properties:
        type:
          const: erc721_for_all
          title: Type
        owner:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The owner giving the allowance.
        operator:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The operator receiving the allowance.
        approved:
          type: boolean
          title: Approved
          description: >-
            `True` if the operator is approved to spend the tokens, `False'
            otherwise.
        token_contract:
          allOf:
            - $ref: '#/components/schemas/Erc721Contract'
          description: The address of the ERC-721 token.
      type: object
      required:
        - type
        - owner
        - operator
        - approved
        - token_contract
      title: Erc721AllowanceForAllChange
    Erc721Contract:
      properties:
        name:
          title: Name
          description: The name of the contract.
          type: string
        dapp:
          description: The DApp details of the contract.
          $ref: '#/components/schemas/Dapp'
        is_verified:
          type: boolean
          title: Is Verified
          description: '`True` if the contract is verified, `False` otherwise.'
        token:
          allOf:
            - $ref: '#/components/schemas/Erc721'
          description: The token details of the contract.
      type: object
      required:
        - is_verified
        - token
      title: Erc721Contract
    Erc721OwnershipChange:
      properties:
        type:
          const: erc721
          title: Type
        owner:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The address effected by the balance change.
        token_id:
          type: string
          pattern: ^\d+$
          title: Token Id
          description: The token ID that's being transfered.
          example: '1000000000000000000'
        owned:
          type: boolean
          title: Owned
          description: '`True` if this token is owned, `False` otherwise.'
        token_contract:
          allOf:
            - $ref: '#/components/schemas/Erc721Contract'
          description: The address of the ERC-721 token.
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - type
        - owner
        - token_id
        - owned
        - token_contract
      title: Erc721OwnershipChange
    Erc721Transfer:
      properties:
        type:
          const: erc721
          title: Type
        from:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The sender of the erc721 transfer.
        to:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The receiver of the erc721 transfer.
        token_id:
          type: string
          pattern: ^\d+$
          title: Token Id
          description: The token ID that's being transferred.
          example: '1000000000000000000'
        token_contract:
          allOf:
            - $ref: '#/components/schemas/Erc721Contract'
          description: The address of the ERC-721 token.
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - type
        - from
        - to
        - token_id
        - token_contract
      title: Erc721Transfer
    EvmAddress:
      properties:
        chain:
          $ref: '#/components/schemas/EvmChain'
        hex_repr:
          type: string
          maxLength: 42
          minLength: 42
          pattern: ^0[xX][a-fA-F0-9]+$
          title: Hex Repr
          description: Hexadecimal representation of the address in the chain.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
      type: object
      required:
        - chain
        - hex_repr
      title: EvmAddress
      description: Address represents an EVM blockchain address.
    EvmAddressRequest:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EvmChainUniqueId'
          description: The chain details this address is of.
        hex_repr:
          type: string
          maxLength: 42
          minLength: 42
          pattern: ^0[xX][a-fA-F0-9]+$
          title: Hex Repr
          description: Hexadecimal representation of the address in the chain.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
      type: object
      required:
        - chain
        - hex_repr
      title: EvmAddressRequest
      description: Address represents a blockchain address.
    EvmAsset:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The asset ID.
        decimals:
          type: integer
          minimum: 0
          title: Decimals
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
        name:
          type: string
          title: Name
          description: The name of the asset.
        symbol:
          type: string
          title: Symbol
          description: The symbol (ticker) of the asset.
        hidden:
          type: boolean
          title: Hidden
          description: '`True` if this asset was set to be hidden, `False` otherwise.'
        verified:
          type: boolean
          title: Verified
          description: '`True` if this asset is verified by Fordefi, `False` otherwise.'
        asset_identifier:
          allOf:
            - $ref: '#/components/schemas/EnrichedAssetIdentifier'
          description: The asset identifier.
        metadata_uri:
          title: Metadata Uri
          description: The URI of the asset metadata.
          type: string
        type:
          const: evm_asset
          title: Type
          description: EVM asset type.
          deprecated: true
        details:
          oneOf:
            - $ref: '#/components/schemas/EvmNativeAsset'
            - $ref: '#/components/schemas/EvmErc20Asset'
            - $ref: '#/components/schemas/EvmErc721Asset'
            - $ref: '#/components/schemas/EvmErc1155Asset'
          title: Details
          deprecated: true
          discriminator:
            propertyName: type
            mapping:
              evm_erc1155_asset: '#/components/schemas/EvmErc1155Asset'
              evm_erc20_asset: '#/components/schemas/EvmErc20Asset'
              evm_erc721_asset: '#/components/schemas/EvmErc721Asset'
              evm_native_asset: '#/components/schemas/EvmNativeAsset'
      type: object
      required:
        - id
        - decimals
        - name
        - symbol
        - hidden
        - verified
        - asset_identifier
        - type
        - details
      title: EvmAsset
    EvmAssetIdentifierRequest:
      properties:
        type:
          const: evm
          title: Type
          description: Asset identifier type.
        details:
          oneOf:
            - $ref: '#/components/schemas/EvmNativeAssetIdentifierRequest'
            - $ref: '#/components/schemas/EvmErc20AssetIdentifierRequest'
            - $ref: '#/components/schemas/EvmErc721AssetIdentifierRequest'
            - $ref: '#/components/schemas/EvmErc1155AssetIdentifierRequest'
          title: Details
          discriminator:
            propertyName: type
            mapping:
              erc1155: '#/components/schemas/EvmErc1155AssetIdentifierRequest'
              erc20: '#/components/schemas/EvmErc20AssetIdentifierRequest'
              erc721: '#/components/schemas/EvmErc721AssetIdentifierRequest'
              native: '#/components/schemas/EvmNativeAssetIdentifierRequest'
      type: object
      required:
        - type
        - details
      title: EvmAssetIdentifierRequest
    EvmBalanceChangeEffect:
      oneOf:
        - $ref: '#/components/schemas/EvmNativeCurrencyBalanceChange'
        - $ref: '#/components/schemas/Erc20BalanceChange'
        - $ref: '#/components/schemas/Erc721OwnershipChange'
        - $ref: '#/components/schemas/Erc1155BalanceChange'
      title: EvmBalanceChangeEffect
      discriminator:
        propertyName: type
        mapping:
          erc1155: '#/components/schemas/Erc1155BalanceChange'
          erc20: '#/components/schemas/Erc20BalanceChange'
          erc721: '#/components/schemas/Erc721OwnershipChange'
          native: '#/components/schemas/EvmNativeCurrencyBalanceChange'
    EvmBlockData:
      properties:
        number:
          type: integer
          title: Number
          description: The block number.
        hash:
          type: string
          maxLength: 66
          minLength: 66
          pattern: ^0[xX][a-fA-F0-9]+$
          title: Hash
          description: The block hash.
          example: '0x780f21260f89d610f24eed21b34d29229611a37e0003e83dd0da91981d7131ae'
        mined_at:
          type: string
          format: date-time
          title: Mined At
          description: The date and time when this block was mined.
      type: object
      required:
        - number
        - hash
        - mined_at
      title: EvmBlockData
    EvmBridgeEffect:
      properties:
        bridge_name:
          type: string
          title: Bridge Name
          description: The name of the bridge.
        source:
          oneOf:
            - $ref: '#/components/schemas/EvmBridgeEffectSourceNative'
            - $ref: '#/components/schemas/EvmBridgeEffectSourceErc20'
          title: Source
          description: The source details of the bridge transaction.
          discriminator:
            propertyName: type
            mapping:
              erc20: '#/components/schemas/EvmBridgeEffectSourceErc20'
              native: '#/components/schemas/EvmBridgeEffectSourceNative'
        destination:
          oneOf:
            - $ref: '#/components/schemas/EvmBridgeEffectKnownDestination'
            - $ref: '#/components/schemas/EvmBridgeEffectUnknownDestination'
          title: Destination
          description: The source details of the bridge transaction.
          discriminator:
            propertyName: type
            mapping:
              known_target_chain: '#/components/schemas/EvmBridgeEffectKnownDestination'
              unknown_target_chain: '#/components/schemas/EvmBridgeEffectUnknownDestination'
        amount:
          type: string
          pattern: ^\d+$
          title: Amount
          description: The amount of the bridge transaction.
          example: '1000000000000000000'
      type: object
      required:
        - bridge_name
        - source
        - destination
        - amount
      title: EvmBridgeEffect
    EvmBridgeEffectKnownDestination:
      properties:
        type:
          const: known_target_chain
          title: Type
          description: The type of the effect destination.
        dest_address:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The destination address of the bridge transaction.
        dest_chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmChain'
          description: The destination chain of the bridge transaction.
      type: object
      required:
        - type
        - dest_address
        - dest_chain
      title: EvmBridgeEffectKnownDestination
    EvmBridgeEffectSourceErc20:
      properties:
        type:
          const: erc20
          title: Type
          description: The type of bridge effect.
        source_address:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The source address of the bridge transaction.
        token:
          allOf:
            - $ref: '#/components/schemas/Erc20'
          description: The ERC-20 token being transferred in the bridge transaction.
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - type
        - source_address
        - token
      title: EvmBridgeEffectSourceErc20
    EvmBridgeEffectSourceNative:
      properties:
        type:
          const: native
          title: Type
          description: The type of bridge effect.
        source_address:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The source address of the bridge transaction.
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - type
        - source_address
      title: EvmBridgeEffectSourceNative
    EvmBridgeEffectUnknownDestination:
      properties:
        type:
          const: unknown_target_chain
          title: Type
          description: The type of the effect destination.
        dest_address:
          title: Dest Address
          description: The destination address of the bridge transaction.
          type: string
        dest_chain:
          type: string
          title: Dest Chain
          description: The destination chain of the bridge transaction.
      type: object
      required:
        - type
        - dest_chain
      title: EvmBridgeEffectUnknownDestination
    EvmChain:
      properties:
        chain_type:
          const: evm
          title: Chain Type
          description: The type of the chain.
        named_chain_id:
          allOf:
            - $ref: '#/components/schemas/EvmChainName'
          description: The EVM chain name.
        chain_id:
          allOf:
            - $ref: '#/components/schemas/EvmChainId'
          description: >-
            The EVM chain id. <ul>
            <li>1=`ethereum_mainnet`<li>5=`ethereum_goerli`<li>10=`optimism_mainnet`<li>56=`bsc_mainnet`<li>100=`gnosis_mainnet`<li>137=`polygon`<li>169=`manta_pacific_mainnet`<li>250=`fantom_mainnet`<li>324=`zksync_era_mainnet`<li>1030=`conflux_espace_mainnet`<li>1100=`dymension_mainnet`<li>1101=`polygon_zkevm_mainnet`<li>2222=`kava_mainnet`<li>4200=`merlin_mainnet`<li>5000=`mantle_mainnet`<li>7700=`canto_mainnet`<li>8453=`base_mainnet`<li>17000=`holesky_mainnet`<li>80001=`polygon_mumbai`<li>42161=`arbitrum_mainnet`<li>43114=`avalanche_mainnet`<li>59144=`linea_mainnet`<li>81457=`blast_mainnet`<li>11155111=`ethereum_sepolia`</ul>
        unique_id:
          allOf:
            - $ref: '#/components/schemas/EvmChainUniqueId'
          description: The EVM chain unique id.
      type: object
      required:
        - chain_type
        - named_chain_id
        - chain_id
        - unique_id
      title: EvmChain
    EvmChainId:
      type: integer
      enum:
        - 1
        - 5
        - 10
        - 56
        - 100
        - 137
        - 169
        - 250
        - 324
        - 1030
        - 1100
        - 1101
        - 2222
        - 4200
        - 5000
        - 7700
        - 8453
        - 17000
        - 80001
        - 42161
        - 43114
        - 59144
        - 81457
        - 11155111
      title: EvmChainId
    EvmChainName:
      type: string
      enum:
        - arbitrum_mainnet
        - avalanche_chain
        - base_mainnet
        - blast_mainnet
        - bsc_mainnet
        - canto_mainnet
        - conflux_mainnet
        - dymension_mainnet
        - ethereum_goerli
        - ethereum_holesky
        - ethereum_mainnet
        - ethereum_sepolia
        - fantom_mainnet
        - gnosis_mainnet
        - kava_mainnet
        - linea_mainnet
        - optimism_mainnet
        - manta_pacific_mainnet
        - mantle_mainnet
        - merlin_mainnet
        - polygon_mainnet
        - polygon_mumbai
        - polygon_zkevm_mainnet
        - zksync_era_mainnet
      title: EvmChainName
    EvmChainRequest:
      anyOf:
        - $ref: '#/components/schemas/EvmChainName'
        - $ref: '#/components/schemas/EvmChainId'
        - $ref: '#/components/schemas/EvmChainUniqueId'
      title: EvmChainRequest
    EvmChainUniqueId:
      type: string
      enum:
        - evm_1
        - evm_5
        - evm_10
        - evm_56
        - evm_100
        - evm_137
        - evm_169
        - evm_250
        - evm_324
        - evm_1030
        - evm_1100
        - evm_1101
        - evm_2222
        - evm_4200
        - evm_5000
        - evm_7700
        - evm_8453
        - evm_17000
        - evm_80001
        - evm_42161
        - evm_43114
        - evm_59144
        - evm_81457
        - evm_11155111
        - evm_arbitrum_mainnet
        - evm_avalanche_chain
        - evm_base_mainnet
        - evm_blast_mainnet
        - evm_bsc_mainnet
        - evm_canto_mainnet
        - evm_conflux_mainnet
        - evm_dymension_mainnet
        - evm_ethereum_goerli
        - evm_ethereum_holesky
        - evm_ethereum_mainnet
        - evm_ethereum_sepolia
        - evm_fantom_mainnet
        - evm_gnosis_mainnet
        - evm_kava_mainnet
        - evm_linea_mainnet
        - evm_optimism_mainnet
        - evm_manta_pacific_mainnet
        - evm_mantle_mainnet
        - evm_merlin_mainnet
        - evm_polygon_mainnet
        - evm_polygon_mumbai
        - evm_polygon_zkevm_mainnet
        - evm_zksync_era_mainnet
      title: EvmChainUniqueId
    EvmContractMetadata:
      properties:
        name:
          title: Name
          description: The name of the contract.
          type: string
        dapp:
          description: The DApp details of the contract.
          $ref: '#/components/schemas/Dapp'
        is_verified:
          type: boolean
          title: Is Verified
          description: '`True` if the contract is verified, `False` otherwise.'
        token:
          title: Token
          description: The token details of the contract.
          oneOf:
            - $ref: '#/components/schemas/Erc20'
            - $ref: '#/components/schemas/Erc721'
            - $ref: '#/components/schemas/Erc1155'
          discriminator:
            propertyName: type
            mapping:
              erc1155: '#/components/schemas/Erc1155'
              erc20: '#/components/schemas/Erc20'
              erc721: '#/components/schemas/Erc721'
      type: object
      required:
        - is_verified
      title: EvmContractMetadata
    EvmDataRequest:
      oneOf:
        - $ref: '#/components/schemas/EvmDataRequestBase64'
        - $ref: '#/components/schemas/EvmDataRequestFullDetails'
        - $ref: '#/components/schemas/EvmDataRequestHex'
      title: EvmDataRequest
      discriminator:
        propertyName: type
        mapping:
          base64: '#/components/schemas/EvmDataRequestBase64'
          full_details: '#/components/schemas/EvmDataRequestFullDetails'
          hex: '#/components/schemas/EvmDataRequestHex'
    EvmDataRequestBase64:
      properties:
        type:
          const: base64
          title: Type
          description: Base64 raw format.
        raw_data:
          type: string
          title: Raw Data
          description: >-
            The base64 raw data of the transaction, as a serialized method-call
            with its arguments. See [data field format for transactions on
            Ethereum](https://ethereum.org/en/developers/docs/transactions/#the-data-field).
          example: SGVsbG8=
      type: object
      required:
        - type
        - raw_data
      title: EvmDataRequestBase64
    EvmDataRequestFullDetails:
      properties:
        type:
          const: full_details
          title: Type
          description: Method-and-arguments format.
        method_name:
          type: string
          title: Method Name
          description: The method to call in the smart contract.
        method_arguments:
          type: object
          title: Method Arguments
          description: The arguments to pass into the method, as `key:value` pairs.
      type: object
      required:
        - type
        - method_name
        - method_arguments
      title: EvmDataRequestFullDetails
    EvmDataRequestHex:
      properties:
        type:
          const: hex
          title: Type
          description: Hex raw format.
        hex_data:
          type: string
          pattern: ^0[xX][a-fA-F0-9]+$
          title: Hex Data
          description: >-
            The hex data of the contract call, as a serialized method-call with
            its arguments.See [data field format for transactions on
            Ethereum](https://ethereum.org/en/developers/docs/transactions/#the-data-field).
      type: object
      required:
        - type
        - hex_data
      title: EvmDataRequestHex
    EvmDynamicSuggestedFees:
      properties:
        type:
          const: dynamic
          title: Type
        low:
          allOf:
            - $ref: '#/components/schemas/DynamicGasFields'
          description: The low suggested gas fees.
        medium:
          allOf:
            - $ref: '#/components/schemas/DynamicGasFields'
          description: The medium suggested gas fees.
        high:
          allOf:
            - $ref: '#/components/schemas/DynamicGasFields'
          description: The high suggested gas fees.
      type: object
      required:
        - type
        - low
        - medium
        - high
      title: EvmDynamicSuggestedFees
    EvmEffects:
      properties:
        balance_changes:
          items:
            $ref: '#/components/schemas/EvmBalanceChangeEffect'
          type: array
          title: Balance Changes
          description: >-
            The aggregated balance changes at the addresses that are involved in
            the transaction. Values are indicated for all currency components of
            the transactions: native, ERC-20, ERC-721, and ERC-1155.
        transfers:
          items:
            $ref: '#/components/schemas/EvmTransferEffect'
          type: array
          title: Transfers
          description: The transfer events of the transaction.
        allowances:
          items:
            $ref: '#/components/schemas/AllowanceEffect'
          type: array
          title: Allowances
          description: The allowance events of the transaction.
        bridge:
          items:
            $ref: '#/components/schemas/EvmBridgeEffect'
          type: array
          title: Bridge
          description: The bridge effects of the transaction.
      type: object
      required:
        - balance_changes
        - transfers
        - allowances
        - bridge
      title: EvmEffects
    EvmErc1155Asset:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmChain'
          description: The details of the chain.
        type:
          const: evm_erc1155_asset
          title: Type
          description: EVM asset type.
        token:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The address of the ERC-1155 token.
        token_id:
          type: string
          pattern: ^\d+$
          title: Token Id
          description: The token id of the ERC-1155 token.
          example: '1000000000000000000'
      type: object
      required:
        - chain
        - type
        - token
        - token_id
      title: EvmErc1155Asset
    EvmErc1155AssetIdentifierRequest:
      properties:
        type:
          const: erc1155
          title: Type
          description: EVM asset identifier type.
        token:
          allOf:
            - $ref: '#/components/schemas/EvmAddressRequest'
          description: The ERC-1155 token contract.
        token_id:
          type: string
          pattern: ^\d+$
          title: Token Id
          description: The token id of the ERC-1155 token.
          example: '1000000000000000000'
      type: object
      required:
        - type
        - token
        - token_id
      title: EvmErc1155AssetIdentifierRequest
    EvmErc20Asset:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmChain'
          description: The details of the chain.
        type:
          const: evm_erc20_asset
          title: Type
          description: EVM asset type.
        token:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The ERC-20 token contract.
      type: object
      required:
        - chain
        - type
        - token
      title: EvmErc20Asset
    EvmErc20AssetIdentifierRequest:
      properties:
        type:
          const: erc20
          title: Type
          description: EVM asset identifier type.
        token:
          allOf:
            - $ref: '#/components/schemas/EvmAddressRequest'
          description: The ERC-20 token contract.
      type: object
      required:
        - type
        - token
      title: EvmErc20AssetIdentifierRequest
    EvmErc721Asset:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmChain'
          description: The details of the chain.
        type:
          const: evm_erc721_asset
          title: Type
          description: EVM asset type.
        token:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The address of the ERC-721 token.
        token_id:
          type: string
          pattern: ^\d+$
          title: Token Id
          description: The token ID of the ERC-721 token.
          example: '1000000000000000000'
      type: object
      required:
        - chain
        - type
        - token
        - token_id
      title: EvmErc721Asset
    EvmErc721AssetIdentifierRequest:
      properties:
        type:
          const: erc721
          title: Type
          description: EVM asset identifier type.
        token:
          allOf:
            - $ref: '#/components/schemas/EvmAddressRequest'
          description: The ERC-721 token contract.
        token_id:
          type: string
          pattern: ^\d+$
          title: Token Id
          description: The token id of the ERC-721 token.
          example: '1000000000000000000'
      type: object
      required:
        - type
        - token
        - token_id
      title: EvmErc721AssetIdentifierRequest
    EvmGasEstimation:
      properties:
        gas_limit:
          type: string
          pattern: ^0*[1-9]\d*$
          title: Gas Limit
          description: The gas limit.
          example: '1000000000000000000'
        fiat_price:
          description: The price of the asset used to pay the fee.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - gas_limit
      title: EvmGasEstimation
    EvmLegacySuggestedFees:
      properties:
        type:
          const: legacy
          title: Type
        low:
          allOf:
            - $ref: '#/components/schemas/LegacyGasFields'
          description: The low suggested gas fees.
        medium:
          allOf:
            - $ref: '#/components/schemas/LegacyGasFields'
          description: The medium suggested gas fees.
        high:
          allOf:
            - $ref: '#/components/schemas/LegacyGasFields'
          description: The high suggested gas fees.
      type: object
      required:
        - type
        - low
        - medium
        - high
      title: EvmLegacySuggestedFees
    EvmMessage:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        managed_transaction_data:
          description: >-
            Managed transaction data. Presented if the transaction was initiated
            from the Fordefi system itself, in contrast to unmanaged
            transactions (which are, for example, transfers of funds into a
            vault visible to Fordefi). 
          $ref: '#/components/schemas/ManagedTransactionData'
        signatures:
          items:
            $ref: '#/components/schemas/Signature'
          type: array
          title: Signatures
          description: The transaction signatures.
        note:
          title: Note
          description: An optional transaction note.
          type: string
        spam_state:
          allOf:
            - $ref: '#/components/schemas/TransactionSpamState'
          description: >-
            `automatically_set` if the transaction was automatically set as spam
            by Fordefi, `manually_set` if the transaction was manually set as
            spam by a user, and `unset` if the transaction was not set as spam.
          default: unset
        direction:
          allOf:
            - $ref: '#/components/schemas/TransactionDirection'
          description: The direction of the transaction.
        type:
          const: evm_message
          title: Type
          description: EVM message type.
        evm_message_type:
          allOf:
            - $ref: '#/components/schemas/EvmMessageType'
          description: The type of the EVM message.
        state:
          allOf:
            - $ref: '#/components/schemas/EvmMessageState'
          description: The state of the message.
        state_changes:
          items:
            $ref: '#/components/schemas/EvmMessageStateChange'
          type: array
          title: State Changes
          description: The state changes of the message.
        raw_data:
          type: string
          title: Raw Data
          description: The raw data of the message.
        typed_data:
          title: Typed Data
          description: The typed data of the message.
          oneOf:
            - $ref: '#/components/schemas/UnknownTypedMessageEvmMessage'
            - $ref: '#/components/schemas/PermitTypedMessageEvmMessage'
            - $ref: '#/components/schemas/Permit2TypedMessageEvmMessage'
          discriminator:
            propertyName: type
            mapping:
              permit: '#/components/schemas/PermitTypedMessageEvmMessage'
              permit2: '#/components/schemas/Permit2TypedMessageEvmMessage'
              unknown: '#/components/schemas/UnknownTypedMessageEvmMessage'
        vault:
          allOf:
            - $ref: '#/components/schemas/VaultRef'
          description: The vault creating the message.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmChain'
          description: The details of the chain that this message is on.
      type: object
      required:
        - id
        - created_at
        - modified_at
        - signatures
        - direction
        - type
        - evm_message_type
        - state
        - state_changes
        - raw_data
        - vault
        - chain
      title: EvmMessage
    EvmMessageDomainData:
      properties:
        name:
          title: Name
          description: The name
          type: string
        version:
          title: Version
          description: The version
          type: string
        chain_id:
          description: The chain id
          $ref: '#/components/schemas/EvmChainId'
        verifying_contract:
          description: The verifying contract
          $ref: '#/components/schemas/EnrichedEvmAddress'
        salt:
          title: Salt
          description: The salt
          type: string
          example: SGVsbG8=
      type: object
      title: EvmMessageDomainData
    EvmMessageState:
      type: string
      enum:
        - waiting_for_approval
        - approved
        - signed
        - completed
        - error_signing
        - aborted
      title: EvmMessageState
    EvmMessageStateChange:
      properties:
        changed_at:
          type: string
          format: date-time
          title: Changed At
          description: The date and time when the state was changed.
        prices:
          allOf:
            - $ref: '#/components/schemas/EvmPrices'
          description: The prices at the time the state was changed.
          deprecated: true
        asset_prices:
          items:
            $ref: '#/components/schemas/PricedAsset'
          type: array
          title: Asset Prices
          description: The prices at the time the state was changed.
        previous_state:
          description: The previous state of the message.
          $ref: '#/components/schemas/EvmMessageState'
        new_state:
          allOf:
            - $ref: '#/components/schemas/EvmMessageState'
          description: The new state of the message.
      type: object
      required:
        - changed_at
        - prices
        - asset_prices
        - new_state
      title: EvmMessageStateChange
    EvmMessageType:
      type: string
      enum:
        - personal_message_type
        - typed_message_type
      title: EvmMessageType
    EvmNativeAsset:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmChain'
          description: The details of the chain.
        type:
          const: evm_native_asset
          title: Type
          description: EVM asset type.
      type: object
      required:
        - chain
        - type
      title: EvmNativeAsset
    EvmNativeAssetIdentifierRequest:
      properties:
        type:
          const: native
          title: Type
          description: EVM asset identifier type.
        chain:
          allOf:
            - $ref: '#/components/schemas/EvmChainUniqueId'
          description: The details of the chain of the native asset.
      type: object
      required:
        - type
        - chain
      title: EvmNativeAssetIdentifierRequest
    EvmNativeCurrencyBalanceChange:
      properties:
        type:
          const: native
          title: Type
        address:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The address affected by the balance change.
        diff:
          type: string
          pattern: ^-?\d+$
          title: Diff
          description: >-
            The amount of native currency that was added or deducted from the
            owner's balance. If the amount was deducted, the value is negative;
            if the amount was added, the value is positive.
          example: '1000000000000000000'
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - type
        - address
        - diff
      title: EvmNativeCurrencyBalanceChange
    EvmNativeCurrencyTransfer:
      properties:
        type:
          const: native
          title: Type
        from:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The sender of the transfer.
        to:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The receiver of the transfer.
        amount:
          type: string
          pattern: ^\d+$
          title: Amount
          description: The amount of the transfer.
          example: '1000000000000000000'
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - type
        - from
        - to
        - amount
      title: EvmNativeCurrencyTransfer
    EvmNativeTransferDetails:
      properties:
        type:
          const: native_transfer
          title: Type
          description: >-
            A transaction involving the transfer of native currency from one
            address to another. 
        direction:
          allOf:
            - $ref: '#/components/schemas/TransferDirection'
          description: The direction of the movement of funds, in case of a transfer.
          deprecated: true
        is_internal:
          title: Is Internal
          description: >-
            Is this transfer an internal transfer between two vaults. None if
            the transaction is incoming.
          type: boolean
      type: object
      required:
        - type
        - direction
      title: EvmNativeTransferDetails
    EvmPrices:
      properties:
        native_currency_price:
          description: The price of the native currency.
          $ref: '#/components/schemas/Price'
        token_prices:
          items:
            $ref: '#/components/schemas/PricedErc20'
          type: array
          title: Token Prices
          description: The price of the tokens.
      type: object
      required:
        - token_prices
      title: EvmPrices
    EvmReversion:
      properties:
        state:
          allOf:
            - $ref: '#/components/schemas/EvmReversionState'
          description: >-
            The state of the reversion. Is one of the
            following:<ul><li>`not_reverted`: No reversion, meaning, completed
            successfully.<li>`unknown_revert`: Fordefi does not know the reason
            for the reversion.<li>`contract_asserted`: The smart contract
            originally made an assertion that was later rejected and the
            transaction was halted. <li>`out_of_gas`: Gas is insufficient for
            the transaction. <li>`max_fee_less_than_block_base_fee`: The input
            parameter `max_fee_per_gas` (under custom gas details) is lower than
            the current base fee of the block, so the miner cannot include the
            transaction in the block. <li>`base_fee_exceeds_gas_limit`: The base
            fee that is always paid is set to 21000 gas units in Ethereum. If a
            gas limit that's lower than that was set, the transaction is
            rejected.<li>`insufficient_funds_gas_and_value`: A transaction was
            sent for which there were insufficient funds.<li>`invalid_input`: A
            general error that might occur for many different reasons, usually
            because of issues on the Fordefi side and not on the
            client's.<li>`transaction_rejected`: As for
            `invalid_input`.<li>`gas_limit_exceeds_block_limit`: There's a limit
            on gas consumption for the whole block, which no single transaction
            can pass.</ul>
        reason:
          title: Reason
          description: The reason for the reversion (additional information).
          type: string
      type: object
      required:
        - state
      title: EvmReversion
    EvmReversionState:
      type: string
      enum:
        - not_reverted
        - unknown_revert
        - contract_asserted
        - out_of_gas
        - max_fee_less_than_block_base_fee
        - base_fee_exceeds_gas_limit
        - insufficient_funds_gas_and_value
        - invalid_input
        - transaction_rejected
        - gas_limit_exceeds_block_limit
      title: EvmReversionState
    EvmSuggestedFees:
      properties:
        type:
          const: evm
          title: Type
          description: The type of the chain.
        fees:
          oneOf:
            - $ref: '#/components/schemas/EvmLegacySuggestedFees'
            - $ref: '#/components/schemas/EvmDynamicSuggestedFees'
          title: Fees
          description: The suggested gas fees.
          discriminator:
            propertyName: type
            mapping:
              dynamic: '#/components/schemas/EvmDynamicSuggestedFees'
              legacy: '#/components/schemas/EvmLegacySuggestedFees'
        chain_unique_id:
          allOf:
            - $ref: '#/components/schemas/EvmChainUniqueId'
          description: The EVM chain unique id.
      type: object
      required:
        - type
        - fees
        - chain_unique_id
      title: EvmSuggestedFees
    EvmTransaction:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        managed_transaction_data:
          description: >-
            Managed transaction data. Presented if the transaction was initiated
            from the Fordefi system itself, in contrast to unmanaged
            transactions (which are, for example, transfers of funds into a
            vault visible to Fordefi). 
          $ref: '#/components/schemas/ManagedTransactionData'
        signatures:
          items:
            $ref: '#/components/schemas/Signature'
          type: array
          title: Signatures
          description: The transaction signatures.
        note:
          title: Note
          description: An optional transaction note.
          type: string
        spam_state:
          allOf:
            - $ref: '#/components/schemas/TransactionSpamState'
          description: >-
            `automatically_set` if the transaction was automatically set as spam
            by Fordefi, `manually_set` if the transaction was manually set as
            spam by a user, and `unset` if the transaction was not set as spam.
          default: unset
        direction:
          allOf:
            - $ref: '#/components/schemas/TransactionDirection'
          description: The direction of the transaction.
        type:
          const: evm_transaction
          title: Type
          description: EVM transaction type.
        evm_transaction_type_details:
          oneOf:
            - $ref: '#/components/schemas/EvmNativeTransferDetails'
            - $ref: '#/components/schemas/TokenTransferDetails'
            - $ref: '#/components/schemas/AllowanceDetails'
            - $ref: '#/components/schemas/ContractCallDetails'
            - $ref: '#/components/schemas/BridgeDetails'
          title: Evm Transaction Type Details
          description: Details of EVM transaction based on its type.
          discriminator:
            propertyName: type
            mapping:
              allowance: '#/components/schemas/AllowanceDetails'
              contract_call: '#/components/schemas/ContractCallDetails'
              cross_chain_bridge: '#/components/schemas/BridgeDetails'
              native_transfer: '#/components/schemas/EvmNativeTransferDetails'
              token_transfer: '#/components/schemas/TokenTransferDetails'
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmChain'
          description: The details of the chain this transaction is on
        from:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The sender of the transaction.
        to:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The recipient of the transaction.
        value:
          type: string
          pattern: ^\d+$
          title: Value
          description: The value of the transaction.
          example: '1000000000000000000'
        data:
          type: string
          title: Data
          description: >-
            The Base64 data of the contract call, as a serialized method-call
            with its arguments. See [data field format for transactions on
            Ethereum](https://ethereum.org/en/developers/docs/transactions/#the-data-field).
          example: SGVsbG8=
        hex_data:
          title: Hex Data
          description: >-
            The hex data of the contract call, as a serialized method-call with
            its arguments.
          type: string
          pattern: ^0[xX][a-fA-F0-9]+$
        parsed_data:
          allOf:
            - $ref: '#/components/schemas/EvmTransactionParsedData'
          description: The parsed data of the transaction.
        hash:
          title: Hash
          description: The hash of the transaction.
          type: string
          maxLength: 66
          minLength: 66
          pattern: ^0[xX][a-fA-F0-9]+$
          example: '0x780f21260f89d610f24eed21b34d29229611a37e0003e83dd0da91981d7131ae'
        nonce:
          title: Nonce
          description: The nonce of the transaction.
          type: integer
        block:
          description: Details of the block the transaction was mined in.
          $ref: '#/components/schemas/EvmBlockData'
        expected_result:
          description: The expected (simulated) result of the transaction.
          $ref: '#/components/schemas/EvmTransactionResult'
        simulation_status_result:
          description: Whether simulation succeeded, reverted or failed.
          $ref: '#/components/schemas/SimulationStatusResult'
        mined_result:
          description: The result of the transaction after it was mined.
          $ref: '#/components/schemas/EvmTransactionResult'
        gas_submitted:
          oneOf:
            - $ref: '#/components/schemas/LegacyGas'
            - $ref: '#/components/schemas/DynamicGas'
          title: Gas Submitted
          description: The gas details submitted for the transaction.
          discriminator:
            propertyName: type
            mapping:
              dynamic: '#/components/schemas/DynamicGas'
              legacy: '#/components/schemas/LegacyGas'
        state:
          allOf:
            - $ref: '#/components/schemas/EvmTransactionState'
          description: >-
            The current status of the transaction. Can be one of the following:
            <ul><li>`waiting_for_approval`: If a transaction has not been
            auto-approved, it waits in this state until it has received all the
            required approvals.<li>`approved`: The transaction moves into this
            state on approval. Then, a notification is sent to the mobile device
            of the creator of the transaction for signing or to the API Signer
            (depending on the flow that was defined). The transaction remains in
            this state until it is signed.<li>`pushed_to_blockchain`: Once
            signed, the transaction is pushed to the blockchain, awaiting
            mining. From that moment, control of the transaction passes from
            Fordefi to the blockchain. This status resolves into one of the
            following: `completed`, `reverted`, `stuck`.<li>`completed`: The
            transaction was successfully mined into the
            blockchain.<li>`reverted`: The transaction was mined into the
            blockchain and was then reverted.<li>`stuck`: The transaction did
            not reach `completed` or `reverted` after 24
            hours.<li>`error_pushing_to_blockchain`: Failed to push the
            transaction to the blockchain.<li>`aborted`: Either the transaction
            was not approved or the transaction was approved but the creator
            aborted the process.</ul> For more information about statuses in the
            transaction lifecycle, see: [Transaction
            Lifecycle](https://docs.fordefi.com/docs/transaction-lifecycle). 
        state_changes:
          items:
            $ref: '#/components/schemas/EvmTransactionStateChange'
          type: array
          title: State Changes
          description: The state changes of the transaction.
        parent_transaction_id:
          title: Parent Transaction Id
          description: >-
            The unique identifier of the parent transaction. Parent and child
            transactions form in cases where a transaction become stuck and is
            then either canceled or accelerated. If, for example, the original
            transaction (`t1`) is the parent and the related, adjustment
            transaction is the child (`t2`), then relative to itself, the parent
            field of `t1` is `null` and the child field is `t2_id`. Compare with
            field `child_transaction_id`.
          type: string
          format: uuid
        child_transaction_id:
          title: Child Transaction Id
          description: >-
            The unique identifier of the child transaction. Compare with field
            `parent_transaction_id`. Relative to itself, the parent field of
            transaction `t2` would aquire the identifier `t1_id` and the child
            field of `t2` would be `null`. 
          type: string
          format: uuid
        funding_for_transaction_id:
          title: Funding For Transaction Id
          description: Funding transaction ID.
          type: string
          format: uuid
        funded_by_transaction_id:
          title: Funded By Transaction Id
          description: Funded transaction ID.
          type: string
          format: uuid
        funded_by_vault:
          description: Funding vault.
          $ref: '#/components/schemas/VaultRef'
        current_preceding_pushed_to_blockchain_transaction_id:
          title: Current Preceding Pushed To Blockchain Transaction Id
          description: >-
            The unique identifier of the transaction that was pushed to the
            blockchain, In case this transaction is QUEUED.
          type: string
          format: uuid
        is_cancelation:
          type: boolean
          title: Is Cancelation
          description: >-
            `True` if this transaction is a cancelation of a previous
            transaction, `False` otherwise. 
        is_acceleration:
          type: boolean
          title: Is Acceleration
          description: >-
            `True` if this transaction is an acceleration of a previous
            transaction, `False` otherwise.
        use_secure_node:
          type: boolean
          title: Use Secure Node
          description: >-
            `True` if Fordefi sends this transaction through a secure node,
            `False` otherwise. By using a secure node, you avoid maximal
            extractable value (MEV) attacks.
        explorer_url:
          title: Explorer Url
          description: The URL of this transaction in a blockchain explorer.
          example: https://etherscan.io/tx/0x123
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
        raw_transaction:
          title: Raw Transaction
          description: The raw transaction data, encoded as a hex string.
          type: string
          pattern: ^0[xX][a-fA-F0-9]+$
      type: object
      required:
        - id
        - created_at
        - modified_at
        - signatures
        - direction
        - type
        - evm_transaction_type_details
        - chain
        - from
        - to
        - value
        - data
        - parsed_data
        - gas_submitted
        - state
        - state_changes
        - is_cancelation
        - is_acceleration
        - use_secure_node
      title: EvmTransaction
    EvmTransactionMethodArgument:
      properties:
        name:
          type: string
          title: Name
          description: The name of the argument.
        type:
          type: string
          title: Type
          description: The type of the argument.
        value:
          type: string
          title: Value
          description: The value of the argument.
        enriched_address:
          description: Details of the address if it is an address.
          $ref: '#/components/schemas/EnrichedEvmAddress'
      type: object
      required:
        - name
        - type
        - value
      title: EvmTransactionMethodArgument
    EvmTransactionParsedData:
      properties:
        method:
          type: string
          title: Method
          description: The method name, in case of contract call.
        method_arguments:
          items:
            $ref: '#/components/schemas/EvmTransactionMethodArgument'
          type: array
          title: Method Arguments
          description: The method arguments, in case of contract call.
      type: object
      required:
        - method
        - method_arguments
      title: EvmTransactionParsedData
    EvmTransactionResult:
      properties:
        reversion:
          allOf:
            - $ref: '#/components/schemas/EvmReversion'
          description: Details whether the transaction was reverted or not.
        gas_debit:
          allOf:
            - $ref: '#/components/schemas/GasDebit'
          description: The gas debit of the transaction.
        effects:
          allOf:
            - $ref: '#/components/schemas/EvmEffects'
          description: >-
            The effects (outcomes) of the transaction. A single transaction can
            have multiple effects, for example, a transferral of native funds:
            moving X ETH from Y to Z (here the effect will have a sender,
            receiver and amount). A more complex example is a transfer of a
            token, moving X USDC from X to Z (here, the effects are sender,
            receiver, amount, and token). 
      type: object
      required:
        - reversion
        - gas_debit
        - effects
      title: EvmTransactionResult
    EvmTransactionState:
      type: string
      enum:
        - waiting_for_approval
        - approved
        - signed
        - pushed_to_blockchain
        - queued
        - mined
        - completed
        - aborting
        - dropped
        - aborted
        - error_signing
        - error_pushing_to_blockchain
        - mined_reverted
        - completed_reverted
        - stuck
        - accelerating
        - canceling
        - accelerated
        - cancelled
      title: EvmTransactionState
    EvmTransactionStateChange:
      properties:
        changed_at:
          type: string
          format: date-time
          title: Changed At
          description: The date and time when the state was changed.
        prices:
          allOf:
            - $ref: '#/components/schemas/EvmPrices'
          description: The prices at the time the state was changed.
          deprecated: true
        asset_prices:
          items:
            $ref: '#/components/schemas/PricedAsset'
          type: array
          title: Asset Prices
          description: The prices at the time the state was changed.
        previous_state:
          description: The previous state of the transaction.
          $ref: '#/components/schemas/EvmTransactionState'
        new_state:
          allOf:
            - $ref: '#/components/schemas/EvmTransactionState'
          description: The new state of the transaction.
      type: object
      required:
        - changed_at
        - prices
        - asset_prices
        - new_state
      title: EvmTransactionStateChange
    EvmTransactionType:
      type: string
      enum:
        - native_transfer
        - token_transfer
        - allowance
        - contract_call
        - cross_chain_bridge
      title: EvmTransactionType
    EvmTransferEffect:
      oneOf:
        - $ref: '#/components/schemas/EvmNativeCurrencyTransfer'
        - $ref: '#/components/schemas/Erc20Transfer'
        - $ref: '#/components/schemas/Erc721Transfer'
        - $ref: '#/components/schemas/Erc1155Transfer'
      title: EvmTransferEffect
      discriminator:
        propertyName: type
        mapping:
          erc1155: '#/components/schemas/Erc1155Transfer'
          erc20: '#/components/schemas/Erc20Transfer'
          erc721: '#/components/schemas/Erc721Transfer'
          native: '#/components/schemas/EvmNativeCurrencyTransfer'
    EvmVault:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        name:
          type: string
          title: Name
          description: The name of the vault.
        created_by:
          allOf:
            - $ref: '#/components/schemas/UserRef'
          description: Details of the vault creator.
        derivation_path:
          type: string
          title: Derivation Path
          description: The BIP 44 derivation path of the vault.
          deprecated: true
          example: m/44/60/0/0/0
        public_key_compressed:
          type: string
          title: Public Key Compressed
          description: >-
            The compressed public key of the vault. As defined in the SEC1
            standard: https://www.secg.org/SEC1-Ver-1.0.pdf.
          example: SGVsbG8=
        derivation_info:
          allOf:
            - $ref: '#/components/schemas/VaultDerivationInfo'
          description: The derivation info of the vault.
        keyset:
          allOf:
            - $ref: '#/components/schemas/KeysetRef'
          description: The keyset of the vault.
        key_holder:
          description: >-
            The user who owns the keyset of the vault. If not provided, the
            vault is owned by the organization.
          $ref: '#/components/schemas/EndUserRef'
        vault_group:
          allOf:
            - $ref: '#/components/schemas/VaultGroupRef'
          description: The vault group this vault belongs to.
        pending_vault_group_action:
          title: Pending Vault Group Action
          description: Details of pending vault movement to another vault group.
          oneOf:
            - $ref: '#/components/schemas/PendingVaultGroupActionAdd'
            - $ref: '#/components/schemas/PendingVaultGroupActionRemove'
          discriminator:
            propertyName: type
            mapping:
              add: '#/components/schemas/PendingVaultGroupActionAdd'
              remove: '#/components/schemas/PendingVaultGroupActionRemove'
        state:
          allOf:
            - $ref: '#/components/schemas/VaultState'
          description: State of the vault.
        type:
          const: evm
          title: Type
          description: EVM vault type.
        address:
          type: string
          maxLength: 42
          minLength: 42
          pattern: ^0[xX][a-fA-F0-9]+$
          title: Address
          description: The address of the vault on EVM chain types.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
      type: object
      required:
        - id
        - created_at
        - modified_at
        - name
        - created_by
        - derivation_path
        - public_key_compressed
        - derivation_info
        - keyset
        - vault_group
        - state
        - type
        - address
      title: EvmVault
      description: Represents an EVM vault in the Fordefi platform
    FeePriorityLevel:
      type: string
      enum:
        - custom
        - low
        - medium
        - high
      title: FeePriorityLevel
    FeePriorityLevelRequest:
      type: string
      enum:
        - low
        - medium
        - high
      title: FeePriorityLevelRequest
    FeePriorityRequest:
      properties:
        type:
          const: priority
          title: Type
        priority_level:
          allOf:
            - $ref: '#/components/schemas/FeePriorityLevelRequest'
          description: The priority level of the fee.
      type: object
      required:
        - type
        - priority_level
      title: FeePriorityRequest
    FetchAssetPricesRequest:
      properties:
        asset_identifiers:
          items:
            $ref: '#/components/schemas/AssetIdentifierRequest'
          type: array
          minItems: 1
          title: Asset Identifiers
          description: The assets to price.
      type: object
      required:
        - asset_identifiers
      title: FetchAssetPricesRequest
    FetchAssetPricesResponse:
      properties:
        priced_assets:
          items:
            $ref: '#/components/schemas/PricedAsset'
          type: array
          title: Priced Assets
          description: The priced assets.
      type: object
      required:
        - priced_assets
      title: FetchAssetPricesResponse
    FiatCurrency:
      properties:
        currency_symbol:
          allOf:
            - $ref: '#/components/schemas/FiatCurrencySymbol'
          description: The symbol of the fiat currency.
        decimals:
          type: integer
          minimum: 0
          title: Decimals
          description: The number of decimals in the fiat currency.
      type: object
      required:
        - currency_symbol
        - decimals
      title: FiatCurrency
    FiatCurrencySymbol:
      type: string
      const: usd
      title: FiatCurrencySymbol
      description: FiatCurrencySymbol
    GasDebit:
      properties:
        gas_used:
          type: string
          pattern: ^\d+$
          title: Gas Used
          description: The amount of gas used.
          example: '1000000000000000000'
        gas_price:
          type: string
          pattern: ^\d+$
          title: Gas Price
          description: The gas price.
          example: '1000000000000000000'
        total_fee:
          type: string
          pattern: ^\d+$
          title: Total Fee
          description: The total fee taken (`gas_used` * `gas_price`).
          example: '1000000000000000000'
        fiat_price:
          description: The price of the asset used to pay the fee.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - gas_used
        - gas_price
        - total_fee
      title: GasDebit
    GasPriorityLevel:
      type: string
      enum:
        - custom
        - low
        - medium
        - high
      title: GasPriorityLevel
    GasPriorityLevelRequest:
      type: string
      enum:
        - low
        - medium
        - high
      title: GasPriorityLevelRequest
    GasPriorityRequest:
      properties:
        gas_limit:
          title: Gas Limit
          description: >-
            The gas limit of the transaction, that is, the number of gas units
            you are willing to use for mining the transaction.
          type: string
          pattern: ^0*[1-9]\d*$
          example: '1000000000000000000'
        type:
          const: priority
          title: Type
        priority_level:
          allOf:
            - $ref: '#/components/schemas/GasPriorityLevelRequest'
          description: >-
            Using the Gas Priority option, you allocate gas according to
            `gas_limit` and `priority_level`, the range of fee you are willing
            to add: low, medium, or high. Fordefi then does its best to achieve
            success, based on these parameters.
      type: object
      required:
        - type
        - priority_level
      title: GasPriorityRequest
    GasType:
      type: string
      enum:
        - dynamic
        - legacy
      title: GasType
    GetEndUserResponse:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        external_id:
          type: string
          title: External Id
          description: The ID that you assigned to the end user.
          example: user|1234
        last_login_at:
          type: string
          format: date-time
          title: Last Login At
          description: The timestamp when the end user last logged into the mobile SDK.
      type: object
      required:
        - id
        - created_at
        - modified_at
        - external_id
        - last_login_at
      title: GetEndUserResponse
    GetKeysetResponse:
      oneOf:
        - $ref: '#/components/schemas/OrganizationKeyset'
        - $ref: '#/components/schemas/UserKeyset'
      title: GetKeysetResponse
      discriminator:
        propertyName: scope
        mapping:
          organization: '#/components/schemas/OrganizationKeyset'
          user: '#/components/schemas/UserKeyset'
    GetOwnedAssetResponse:
      allOf:
        - $ref: '#/components/schemas/OwnedAsset'
      title: GetOwnedAssetResponse
    GetSuggestedFeesResponse:
      properties:
        suggested_fees:
          additionalProperties:
            $ref: '#/components/schemas/SuggestedFees'
          type: object
          title: Suggested Fees
      type: object
      required:
        - suggested_fees
      title: GetSuggestedFeesResponse
    GetTransactionResponse:
      oneOf:
        - $ref: '#/components/schemas/BlackBoxSignature'
        - $ref: '#/components/schemas/CosmosTransaction'
        - $ref: '#/components/schemas/CosmosMessage'
        - $ref: '#/components/schemas/EvmMessage'
        - $ref: '#/components/schemas/EvmTransaction'
        - $ref: '#/components/schemas/SolanaMessage'
        - $ref: '#/components/schemas/SolanaTransaction'
        - $ref: '#/components/schemas/UtxoTransaction'
      title: GetTransactionResponse
      discriminator:
        propertyName: type
        mapping:
          black_box_signature: '#/components/schemas/BlackBoxSignature'
          cosmos_message: '#/components/schemas/CosmosMessage'
          cosmos_transaction: '#/components/schemas/CosmosTransaction'
          evm_message: '#/components/schemas/EvmMessage'
          evm_transaction: '#/components/schemas/EvmTransaction'
          solana_message: '#/components/schemas/SolanaMessage'
          solana_transaction: '#/components/schemas/SolanaTransaction'
          utxo_transaction: '#/components/schemas/UtxoTransaction'
    GetUserGroupResponse:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        name:
          type: string
          minLength: 1
          title: Name
          description: The name of the user group.
        users_count:
          type: integer
          minimum: 0
          title: Users Count
          description: The number of users in the group.
        state:
          allOf:
            - $ref: '#/components/schemas/UserGroupState'
          description: The state of the user group.
        modified_by:
          allOf:
            - $ref: '#/components/schemas/UserRef'
          description: Group last modifier.
        proposed_change:
          description: The change proposal for the group.
          $ref: '#/components/schemas/UserGroupChangeRequest'
      type: object
      required:
        - id
        - created_at
        - modified_at
        - name
        - users_count
        - state
        - modified_by
      title: GetUserGroupResponse
    GetUserResponse:
      oneOf:
        - $ref: '#/components/schemas/Person'
        - $ref: '#/components/schemas/ApiUser'
        - $ref: '#/components/schemas/ApiSigner'
      title: GetUserResponse
      discriminator:
        propertyName: user_type
        mapping:
          api_signer: '#/components/schemas/ApiSigner'
          api_user: '#/components/schemas/ApiUser'
          person: '#/components/schemas/Person'
    GetVaultResponse:
      oneOf:
        - $ref: '#/components/schemas/BlackBoxVault'
        - $ref: '#/components/schemas/CosmosVault'
        - $ref: '#/components/schemas/EvmVault'
        - $ref: '#/components/schemas/SolanaVault'
        - $ref: '#/components/schemas/UtxoVault'
      title: GetVaultResponse
      discriminator:
        propertyName: type
        mapping:
          black_box: '#/components/schemas/BlackBoxVault'
          cosmos: '#/components/schemas/CosmosVault'
          evm: '#/components/schemas/EvmVault'
          solana: '#/components/schemas/SolanaVault'
          utxo: '#/components/schemas/UtxoVault'
    GroupRef:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: >-
            The unique identifier of the address book group in the Fordefi
            platform.
        name:
          type: string
          title: Name
          description: The name of the group.
        contacts_count:
          type: integer
          title: Contacts Count
          description: The number of contacts in the group.
      type: object
      required:
        - id
        - name
        - contacts_count
      title: GroupRef
      description: Represents a reference to an address book group in the Fordefi platform.
    GroupUserRef:
      oneOf:
        - $ref: '#/components/schemas/PersonRef'
        - $ref: '#/components/schemas/ApiUserRef'
      title: GroupUserRef
      description: Represents a reference to a group user in the Fordefi platform
      discriminator:
        propertyName: user_type
        mapping:
          api_user: '#/components/schemas/ApiUserRef'
          person: '#/components/schemas/PersonRef'
    InstructionError:
      properties:
        error_type:
          type: string
          title: Error Type
          description: The type of the error of the instruction.
        instruction_index:
          type: integer
          title: Instruction Index
          description: The index of the instruction.
        error_description:
          title: Error Description
          description: The description of the error of the instruction.
          type: string
      type: object
      required:
        - error_type
        - instruction_index
      title: InstructionError
    IntegerHashPayload:
      properties:
        format:
          const: hash_integer
          title: Format
          description: ''
        hash_integer:
          type: string
          pattern: ^0[xX][a-fA-F0-9]+$
          title: Hash Integer
          description: The payload to sign, as a big-endian integer.
      type: object
      required:
        - format
        - hash_integer
      title: IntegerHashPayload
    IssueAuthTokenRequest:
      allOf:
        - $ref: '#/components/schemas/IssueEndUserAuthTokenRequest'
      title: IssueAuthTokenRequest
    IssueAuthTokenResponse:
      allOf:
        - $ref: '#/components/schemas/IssueEndUserAuthTokenResponse'
      title: IssueAuthTokenResponse
    IssueEndUserAuthTokenErrorType:
      type: string
      const: cannot_issue_token_for_user_type
      title: IssueEndUserAuthTokenErrorType
    IssueEndUserAuthTokenRequest:
      properties:
        user_type:
          const: end_user
          title: User Type
          description: The type of the user.
        user_id:
          type: string
          format: uuid
          title: User Id
          description: ID of the end user to issue the authorization token for.
      type: object
      required:
        - user_type
        - user_id
      title: IssueEndUserAuthTokenRequest
    IssueEndUserAuthTokenResponse:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        user_id:
          type: string
          format: uuid
          title: User Id
          description: ID of the end user the authorization token is issued for.
        expired_at:
          type: string
          format: date-time
          title: Expired At
          description: Token expiration time.
        user_type:
          const: end_user
          title: User Type
          description: The type of the user.
        access_token:
          type: string
          title: Access Token
          description: New access token for the user.
      type: object
      required:
        - id
        - created_at
        - modified_at
        - user_id
        - expired_at
        - user_type
        - access_token
      title: IssueEndUserAuthTokenResponse
    KeyShares:
      properties:
        device:
          title: Device
          description: Device latest encrypted share for the key.
          type: string
          example: SGVsbG8=
        platform:
          title: Platform
          description: >-
            Platform encrypted shares for the key. Whether it contains one or
            two shares depends on the backup type.
          items:
            type: string
            example: SGVsbG8=
          type: array
      type: object
      title: KeyShares
    KeyType:
      type: string
      enum:
        - ecdsa_secp256k1
        - eddsa_ed25519
        - ecdsa_stark
      title: KeyType
    Keyset:
      oneOf:
        - $ref: '#/components/schemas/OrganizationKeyset'
        - $ref: '#/components/schemas/UserKeyset'
      title: Keyset
      description: Represents a keyset in the Fordefi platform
      discriminator:
        propertyName: scope
        mapping:
          organization: '#/components/schemas/OrganizationKeyset'
          user: '#/components/schemas/UserKeyset'
    KeysetKey:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The ID of the key.
        xpub:
          type: string
          title: Xpub
          description: >-
            The xpub encoding of the key. For more details, see
            https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#serialization-format
        encrypted_shares:
          allOf:
            - $ref: '#/components/schemas/KeyShares'
          description: Encrypted shares for the key.
        chain_code:
          type: string
          title: Chain Code
          description: The chain code of the key. It is used to derive child keys.
          example: SGVsbG8=
      type: object
      required:
        - id
        - xpub
        - encrypted_shares
        - chain_code
      title: KeysetKey
    KeysetRef:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the keyset in the Fordefi platform.
        name:
          type: string
          minLength: 1
          title: Name
          description: The name of the keyset.
        scope:
          allOf:
            - $ref: '#/components/schemas/KeysetScope'
          description: The scope of the keyset.
      type: object
      required:
        - id
        - name
        - scope
      title: KeysetRef
      description: Represents a reference to a keyset in the Fordefi platform
    KeysetScope:
      type: string
      enum:
        - organization
        - user
      title: KeysetScope
      description: Represents a keyset scope in the Fordefi platform
    KeysetSortableFields:
      type: string
      enum:
        - created_at_asc
        - created_at_desc
        - name_asc
        - name_desc
        - user_id_asc
        - user_id_desc
      title: KeysetSortableFields
    LegacyGas:
      properties:
        price:
          type: string
          pattern: ^\d+$
          title: Price
          description: The price of a gas unit.
          example: '1000000000000000000'
        priority:
          allOf:
            - $ref: '#/components/schemas/GasPriorityLevel'
          description: The gas priority.
        limit:
          type: string
          pattern: ^\d+$
          title: Limit
          description: The gas limit.
          example: '1000000000000000000'
        type:
          const: legacy
          title: Type
          description: The type of gas data.
      type: object
      required:
        - price
        - priority
        - limit
        - type
      title: LegacyGas
    LegacyGasFields:
      properties:
        price:
          type: string
          pattern: ^\d+$
          title: Price
          description: The price of a gas unit.
          example: '1000000000000000000'
      type: object
      required:
        - price
      title: LegacyGasFields
    LegacyGasRequest:
      properties:
        type:
          const: legacy
          title: Type
          description: The type of gas data.
        price:
          type: string
          pattern: ^0*[1-9]\d*$
          title: Price
          description: The price of a gas unit.
          example: '1000000000000000000'
      type: object
      required:
        - type
        - price
      title: LegacyGasRequest
    ListAddressBookContactResponse:
      properties:
        total:
          type: integer
          title: Total
        page:
          type: integer
          title: Page
        size:
          type: integer
          title: Size
        contacts:
          items:
            $ref: '#/components/schemas/AddressBookContact'
          type: array
          title: Contacts
      type: object
      required:
        - total
        - page
        - size
        - contacts
      title: ListAddressBookContactResponse
    ListAuthTokensResponse:
      properties:
        total:
          type: integer
          title: Total
        page:
          type: integer
          title: Page
        size:
          type: integer
          title: Size
        auth_tokens:
          items:
            $ref: '#/components/schemas/AuthToken'
          type: array
          title: Auth Tokens
          description: Authorization tokens list.
      type: object
      required:
        - total
        - page
        - size
        - auth_tokens
      title: ListAuthTokensResponse
    ListBlockchainsResponse:
      properties:
        chains:
          items:
            $ref: '#/components/schemas/EnrichedChain'
          type: array
          title: Chains
      type: object
      required:
        - chains
      title: ListBlockchainsResponse
      description: A list of blockchains.
    ListEndUsersResponse:
      properties:
        total:
          type: integer
          title: Total
        page:
          type: integer
          title: Page
        size:
          type: integer
          title: Size
        end_users:
          items:
            $ref: '#/components/schemas/EndUser'
          type: array
          title: End Users
      type: object
      required:
        - total
        - page
        - size
        - end_users
      title: ListEndUsersResponse
    ListKeysetsResponse:
      properties:
        total:
          type: integer
          title: Total
        page:
          type: integer
          title: Page
        size:
          type: integer
          title: Size
        keysets:
          items:
            $ref: '#/components/schemas/Keyset'
          type: array
          title: Keysets
      type: object
      required:
        - total
        - page
        - size
        - keysets
      title: ListKeysetsResponse
    ListOwnedAssetsResponse:
      properties:
        total:
          type: integer
          title: Total
        page:
          type: integer
          title: Page
        size:
          type: integer
          title: Size
        owned_assets:
          items:
            $ref: '#/components/schemas/OwnedAsset'
          type: array
          title: Owned Assets
      type: object
      required:
        - total
        - page
        - size
        - owned_assets
      title: ListOwnedAssetsResponse
    ListTransactionResponse:
      properties:
        total:
          type: integer
          title: Total
        page:
          type: integer
          title: Page
        size:
          type: integer
          title: Size
        transactions:
          items:
            $ref: '#/components/schemas/Transaction'
          type: array
          title: Transactions
      type: object
      required:
        - total
        - page
        - size
        - transactions
      title: ListTransactionResponse
    ListUserGroupsResponse:
      properties:
        total:
          type: integer
          title: Total
        page:
          type: integer
          title: Page
        size:
          type: integer
          title: Size
        user_groups:
          items:
            $ref: '#/components/schemas/UserGroup'
          type: array
          title: User Groups
      type: object
      required:
        - total
        - page
        - size
        - user_groups
      title: ListUserGroupsResponse
    ListUsersResponse:
      properties:
        total:
          type: integer
          title: Total
        page:
          type: integer
          title: Page
        size:
          type: integer
          title: Size
        users:
          items:
            $ref: '#/components/schemas/User'
          type: array
          title: Users
      type: object
      required:
        - total
        - page
        - size
        - users
      title: ListUsersResponse
    ListVaultAddressesResponse:
      properties:
        total:
          type: integer
          title: Total
        page:
          type: integer
          title: Page
        size:
          type: integer
          title: Size
        addresses:
          items:
            $ref: '#/components/schemas/UtxoVaultAddress'
          type: array
          title: Addresses
      type: object
      required:
        - total
        - page
        - size
        - addresses
      title: ListVaultAddressesResponse
    ListVaultGroupsFilterByAccessLevel:
      type: string
      enum:
        - view
        - create_edit
        - all
      title: ListVaultGroupsFilterByAccessLevel
    ListVaultGroupsResponse:
      properties:
        total:
          type: integer
          title: Total
        page:
          type: integer
          title: Page
        size:
          type: integer
          title: Size
        vault_groups:
          items:
            $ref: '#/components/schemas/VaultGroup'
          type: array
          title: Vault Groups
      type: object
      required:
        - total
        - page
        - size
        - vault_groups
      title: ListVaultGroupsResponse
    ListVaultsResponse:
      properties:
        total:
          type: integer
          title: Total
        page:
          type: integer
          title: Page
        size:
          type: integer
          title: Size
        vaults:
          items:
            $ref: '#/components/schemas/Vault'
          type: array
          title: Vaults
      type: object
      required:
        - total
        - page
        - size
        - vaults
      title: ListVaultsResponse
    ManagedTransactionData:
      properties:
        created_by:
          allOf:
            - $ref: '#/components/schemas/UserRef'
          description: The user who created the transaction.
        aborted_by:
          description: >-
            The user who aborted the transaction, `null` if the transaction was
            not aborted.
          $ref: '#/components/schemas/UserRef'
        device_signing_request:
          $ref: '#/components/schemas/ActionSigningRequest'
        approval_request:
          description: The approval request.
          $ref: '#/components/schemas/ApprovalRequest'
        policy_match:
          description: The policy match.
          $ref: '#/components/schemas/PolicyMatch'
        signed_create_request:
          $ref: '#/components/schemas/SignedRawData'
        signer_type:
          allOf:
            - $ref: '#/components/schemas/SignerType'
          description: >-
            The type of signer of the transaction. Can be one of the following:
            <ul><li>`initiator`: The creator of the transaction (default).
            <li>`api_signer`: An API Signer - a service that you run on your own
            network or cloud environment. <li>`end_user`: An end user - a
            signature by a mobile device with a third-party app that uses
            Fordefi's Mobile SDK. </ul>In the case of `initiator`, a
            notification is expected to be sent to the initiator's mobile device
            for approval of the transaction. <br><br>Currently, only
            `api_signer` is supported for API calls.
        risks:
          items:
            $ref: '#/components/schemas/TransactionRisk'
          type: array
          title: Risks
          description: The list of risks associated with this transaction.
        error_pushing_to_blockchain_message:
          title: Error Pushing To Blockchain Message
          description: >-
            The translated error message received from the node if it was
            rejected by it.
          type: string
        original_error_pushing_to_blockchain_message:
          title: Original Error Pushing To Blockchain Message
          description: The error message received from the node if it was rejected by it.
          type: string
        vault:
          allOf:
            - $ref: '#/components/schemas/VaultRef'
          description: The vault creating the transaction.
        idempotence_id:
          title: Idempotence Id
          description: Optional idempotence ID of a transaction.
          type: string
          format: uuid
        has_current_user_vault_permissions:
          type: boolean
          title: Has Current User Vault Permissions
          description: >-
            Does current user has permissions to the origin vault according to
            its vault group permissions.
        batch_data:
          description: Batch data if the transaction is part of a batch.
          $ref: '#/components/schemas/BatchData'
        push_mode:
          description: >-
            The push mode of the transaction. It can be one of the
            following:<ul><li>`auto`: The transaction is pushed automatically by
            Fordefi. <li>`manual`: The transaction should be pushed manually by
            the user using a 3rd party.<li>`deferred`: The transaction is pushed
            by Fordefi after a certain time, if by that time it wasn't pushed
            manually by a 3rd party.</ul> 
          $ref: '#/components/schemas/PushMode'
      type: object
      required:
        - created_by
        - signer_type
        - risks
        - vault
        - has_current_user_vault_permissions
      title: ManagedTransactionData
    MasterPublicKey:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The ID of the key.
        xpub:
          type: string
          title: Xpub
          description: >-
            The xpub encoding of the key. For more details, see
            https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#serialization-format
      type: object
      required:
        - id
        - xpub
      title: MasterPublicKey
    MessagesList:
      oneOf:
        - $ref: '#/components/schemas/AminoMessagesList'
        - $ref: '#/components/schemas/DirectMessagesList'
        - $ref: '#/components/schemas/MinedMessagesList'
      title: MessagesList
      discriminator:
        propertyName: format
        mapping:
          amino: '#/components/schemas/AminoMessagesList'
          direct: '#/components/schemas/DirectMessagesList'
          mined: '#/components/schemas/MinedMessagesList'
    MinedMessagesList:
      properties:
        format:
          const: mined
          title: Format
        messages:
          type: string
          title: Messages
          description: List of messages of non-managed transaction.
      type: object
      required:
        - format
        - messages
      title: MinedMessagesList
    MinedSignDoc:
      properties:
        format:
          const: mined
          title: Format
        messages:
          type: string
          title: Messages
          description: The messages of the transaction.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosChain'
          description: The chain the transaction is signed on.
      type: object
      required:
        - format
        - messages
        - chain
      title: MinedSignDoc
    OrganizationKeyset:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        name:
          type: string
          minLength: 1
          title: Name
          description: Keyset name.
        desired_key_types:
          title: Desired Key Types
          description: >-
            Desired key types. For an organization type keyset, this field is
            populated with all supported key types during creation. for a user
            type keyset, this field is populated by the user during keyset
            generation.
          items:
            $ref: '#/components/schemas/KeyType'
          type: array
        ecdsa:
          description: >-
            ECDSA key. The key is used to generate ECDSA-based vaults (for
            example, EVM vaults).
          $ref: '#/components/schemas/KeysetKey'
        eddsa:
          description: >-
            EdDSA key. The key is used to generate EdDSA-based vaults (for
            example, Solana vaults).
          $ref: '#/components/schemas/KeysetKey'
        ecdsa_stark:
          description: >-
            ECDSA-Stark key. The key is used to generate ECDSA-Stark-based
            vaults (for example, Stark Blackbox vaults).
          $ref: '#/components/schemas/KeysetKey'
        encrypted_device_shares_backups:
          title: Encrypted Device Shares Backups
          description: Encrypted device shares backups.
          items:
            $ref: '#/components/schemas/EncryptedDeviceSharesBackup'
          type: array
        scope:
          const: organization
          title: Scope
          description: Organization keyset scope.
      type: object
      required:
        - id
        - created_at
        - modified_at
        - name
        - scope
      title: OrganizationKeyset
      description: Represents an organization keyset in the Fordefi platform
    OwnedAsset:
      properties:
        asset:
          $ref: '#/components/schemas/Asset'
        balance:
          type: string
          pattern: ^\d+$
          title: Balance
          description: The cryptocurrency balance of the asset.
          deprecated: true
          example: '1000000000000000000'
        balances:
          $ref: '#/components/schemas/Balances'
      type: object
      required:
        - asset
        - balance
        - balances
      title: OwnedAsset
      description: Represents an owned asset on Fordefi's platform
    OwnedAssetsSortableFields:
      type: string
      enum:
        - asset_name_asc
        - asset_name_desc
        - chain_identifier_asc
        - chain_identifier_desc
        - balance_asc
        - balance_desc
        - market_value_asc
        - market_value_desc
        - price_asc
        - price_desc
      title: OwnedAssetsSortableFields
    PendingUserChangeRef:
      properties:
        new_role:
          type: string
          enum:
            - admin
            - trader
          title: New Role
          description: The new role of the user.
        change_request_id:
          type: string
          format: uuid
          title: Change Request Id
          description: The unique identifier of the change request.
      type: object
      required:
        - new_role
        - change_request_id
      title: PendingUserChangeRef
    PendingVaultGroupActionAdd:
      properties:
        type:
          const: add
          title: Type
          description: Add vault pending action type.
        vault_group_id:
          type: string
          format: uuid
          title: Vault Group Id
          description: The ID of the vault group this vault will be moved to.
        vault_group_name:
          type: string
          title: Vault Group Name
          description: The Name of the vault group this vault will be moved to.
      type: object
      required:
        - type
        - vault_group_id
        - vault_group_name
      title: PendingVaultGroupActionAdd
    PendingVaultGroupActionRemove:
      properties:
        type:
          const: remove
          title: Type
          description: Remove vault pending action type.
      type: object
      required:
        - type
      title: PendingVaultGroupActionRemove
    Permit2TypedMessageEvmMessage:
      properties:
        domain:
          allOf:
            - $ref: '#/components/schemas/EvmMessageDomainData'
          description: The domain data.
        type:
          const: permit2
          title: Type
          description: The typed message type.
        spender:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The spender.
        deadline:
          type: string
          format: date-time
          title: Deadline
          description: Signature deadline.
        token:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The token for which the permission is required
        value:
          type: string
          pattern: ^-?\d+$
          title: Value
          description: The amount to permit.
          example: '1000000000000000000'
        expiration:
          type: string
          format: date-time
          title: Expiration
          description: Expiration of the permit.
        nonce:
          type: integer
          title: Nonce
          description: The nonce.
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - domain
        - type
        - spender
        - deadline
        - token
        - value
        - expiration
        - nonce
      title: Permit2TypedMessageEvmMessage
    PermitTypedMessageEvmMessage:
      properties:
        domain:
          allOf:
            - $ref: '#/components/schemas/EvmMessageDomainData'
          description: The domain data.
        type:
          const: permit
          title: Type
          description: The typed message type.
        owner:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The owner.
        spender:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmAddress'
          description: The spender.
        value:
          type: string
          pattern: ^-?\d+$
          title: Value
          description: The value.
          example: '1000000000000000000'
        deadline:
          type: string
          format: date-time
          title: Deadline
          description: The deadline.
        nonce:
          type: integer
          title: Nonce
          description: The nonce.
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - domain
        - type
        - owner
        - spender
        - value
        - deadline
        - nonce
      title: PermitTypedMessageEvmMessage
    Person:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        user_type:
          const: person
          title: User Type
          description: The type of the user.
        name:
          title: Name
          description: The name of the user.
          example: John Doe
          type: string
        email:
          type: string
          title: Email
          description: The email of the user.
        state:
          allOf:
            - $ref: '#/components/schemas/UserState'
          description: >-
            The state of the user. Is one of: <ul><li>`active`: The user can
            perform all actions in the Fordefi platform.<li>`onboarding`: The
            user has been approved but still needs to activate the
            account.<li>`pending_approval`: The user has been invited but not
            yet approved.<li>`deleted`: The user has been deleted.</ul>
        is_new_device_provisioning:
          type: boolean
          title: Is New Device Provisioning
          description: >-
            `True` if the user is provisioning a new device, or is onboarding
            into an organization; `False` otherwise.
        welcome_message_acknowledged_at:
          type: string
          format: date-time
          title: Welcome Message Acknowledged At
          description: The time when welcome message was displayed and acknowledge.
        role:
          allOf:
            - $ref: '#/components/schemas/UserRole'
          description: The role of the user.
        user_groups:
          title: User Groups
          description: The groups the user belongs to.
          items:
            $ref: '#/components/schemas/UserGroupRef'
          type: array
        pending_addition_to_user_groups:
          title: Pending Addition To User Groups
          description: The groups the user is pending to be added to.
          items:
            $ref: '#/components/schemas/UserGroupRef'
          type: array
        pending_removal_from_user_groups:
          title: Pending Removal From User Groups
          description: The groups the user is pending to be removed from.
          items:
            $ref: '#/components/schemas/UserGroupRef'
          type: array
        pending_change:
          description: The pending change of the user.
          $ref: '#/components/schemas/PendingUserChangeRef'
      type: object
      required:
        - id
        - created_at
        - modified_at
        - user_type
        - email
        - state
        - is_new_device_provisioning
        - welcome_message_acknowledged_at
        - role
      title: Person
      description: Represents a human user in the Fordefi platform
    PersonRef:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the user in the Fordefi platform.
        user_type:
          const: person
          title: User Type
          description: >-
            The type of user. Can be a person, or (in programmatic scenarios) an
            API user or API Signer.
        name:
          title: Name
          description: The name of the user.
          example: John Doe
          type: string
        email:
          type: string
          title: Email
          description: The email of the user.
        state:
          allOf:
            - $ref: '#/components/schemas/UserState'
          description: The state of the user in the organization.
        role:
          allOf:
            - $ref: '#/components/schemas/UserRole'
          description: The role of the user.
      type: object
      required:
        - id
        - user_type
        - email
        - state
        - role
      title: PersonRef
    PolicyMatch:
      properties:
        is_default:
          type: boolean
          title: Is Default
          description: '`True` if this is the default rule, `False` otherwise.'
        rule_id:
          type: string
          format: uuid
          title: Rule Id
          description: The unique identifier of the rule.
        rule_name:
          type: string
          title: Rule Name
          description: The name of the rule.
        action_type:
          allOf:
            - $ref: '#/components/schemas/TransactionPolicyMatchActionType'
          description: >-
            The action taken in the event of a policy match. Can be: <ul><li>
            Allow automatically<li> Block<li> Require express approval</ul>
      type: object
      required:
        - is_default
        - rule_id
        - rule_name
        - action_type
      title: PolicyMatch
    PreconditionFailedError:
      properties:
        title:
          type: string
          title: Title
          description: Human-readable error message.
        detail:
          type: string
          title: Detail
          description: Detailed error message.
        request_id:
          title: Request Id
          description: Request ID - for debugging purposes.
          type: string
        system_error_code:
          title: System Error Code
          description: An additional system error code in Fordefi.
          type: string
      type: object
      required:
        - title
        - detail
      title: PreconditionFailedError
    PredictTransactionErrorType:
      type: string
      enum:
        - vault_not_found
        - invalid_evm_message
        - invalid_evm_transaction_data
        - reverted_transaction
        - transaction_to_non_contract
        - vault_type_mismatch
        - dust_not_allowed
      title: PredictTransactionErrorType
    PredictTransactionRequest:
      oneOf:
        - $ref: '#/components/schemas/TransactionDetailsCosmosTransactionRequest'
        - $ref: '#/components/schemas/TransactionDetailsCosmosMessageRequest'
        - $ref: '#/components/schemas/TransactionDetailsEvmMessageRequest'
        - $ref: '#/components/schemas/TransactionDetailsEvmTransactionRequest'
        - $ref: '#/components/schemas/TransactionDetailsSolanaMessageRequest'
        - $ref: '#/components/schemas/TransactionDetailsSolanaTransactionRequest'
        - $ref: '#/components/schemas/TransactionDetailsUtxoTransactionRequest'
      title: PredictTransactionRequest
      discriminator:
        propertyName: type
        mapping:
          cosmos_message: '#/components/schemas/TransactionDetailsCosmosMessageRequest'
          cosmos_transaction: '#/components/schemas/TransactionDetailsCosmosTransactionRequest'
          evm_message: '#/components/schemas/TransactionDetailsEvmMessageRequest'
          evm_transaction: '#/components/schemas/TransactionDetailsEvmTransactionRequest'
          solana_message: '#/components/schemas/TransactionDetailsSolanaMessageRequest'
          solana_transaction: '#/components/schemas/TransactionDetailsSolanaTransactionRequest'
          utxo_transaction: '#/components/schemas/TransactionDetailsUtxoTransactionRequest'
    PredictTransactionResponse:
      oneOf:
        - $ref: '#/components/schemas/PredictedCosmosTransaction'
        - $ref: '#/components/schemas/PredictedCosmosMessage'
        - $ref: '#/components/schemas/PredictedEvmMessage'
        - $ref: '#/components/schemas/PredictedEvmTransaction'
        - $ref: '#/components/schemas/PredictedSolanaMessage'
        - $ref: '#/components/schemas/PredictedSolanaTransaction'
        - $ref: '#/components/schemas/PredictedUtxoTransaction'
      title: PredictTransactionResponse
      discriminator:
        propertyName: type
        mapping:
          cosmos_message: '#/components/schemas/PredictedCosmosMessage'
          cosmos_transaction: '#/components/schemas/PredictedCosmosTransaction'
          evm_message: '#/components/schemas/PredictedEvmMessage'
          evm_transaction: '#/components/schemas/PredictedEvmTransaction'
          solana_message: '#/components/schemas/PredictedSolanaMessage'
          solana_transaction: '#/components/schemas/PredictedSolanaTransaction'
          utxo_transaction: '#/components/schemas/PredictedUtxoTransaction'
    PredictedCosmosMessage:
      properties:
        policy_match:
          allOf:
            - $ref: '#/components/schemas/PolicyMatch'
          description: The policy match.
        approval_request:
          description: The approval request.
          $ref: '#/components/schemas/ApprovalRequest'
        risks:
          items:
            $ref: '#/components/schemas/TransactionRisk'
          type: array
          title: Risks
          description: The list of risks associated with this transaction.
        type:
          const: cosmos_message
          title: Type
          description: The type of the transaction.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosChain'
          description: The details of the chain that this message is on.
      type: object
      required:
        - policy_match
        - risks
        - type
        - chain
      title: PredictedCosmosMessage
    PredictedCosmosTransaction:
      properties:
        policy_match:
          allOf:
            - $ref: '#/components/schemas/PolicyMatch'
          description: The policy match.
        approval_request:
          description: The approval request.
          $ref: '#/components/schemas/ApprovalRequest'
        risks:
          items:
            $ref: '#/components/schemas/TransactionRisk'
          type: array
          title: Risks
          description: The list of risks associated with this transaction.
        type:
          const: cosmos_transaction
          title: Type
          description: The type of the transaction.
        expected_result:
          allOf:
            - $ref: '#/components/schemas/CosmosTransactionResult'
          description: The expected result of the transaction in case it is mined.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosChain'
          description: The details of the chain this transaction is on
      type: object
      required:
        - policy_match
        - risks
        - type
        - expected_result
        - chain
      title: PredictedCosmosTransaction
    PredictedEvmMessage:
      properties:
        policy_match:
          allOf:
            - $ref: '#/components/schemas/PolicyMatch'
          description: The policy match.
        approval_request:
          description: The approval request.
          $ref: '#/components/schemas/ApprovalRequest'
        risks:
          items:
            $ref: '#/components/schemas/TransactionRisk'
          type: array
          title: Risks
          description: The list of risks associated with this transaction.
        type:
          const: evm_message
          title: Type
          description: The type of the transaction.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmChain'
          description: The details of the chain that this message is on.
      type: object
      required:
        - policy_match
        - risks
        - type
        - chain
      title: PredictedEvmMessage
    PredictedEvmTransaction:
      properties:
        policy_match:
          allOf:
            - $ref: '#/components/schemas/PolicyMatch'
          description: The policy match.
        approval_request:
          description: The approval request.
          $ref: '#/components/schemas/ApprovalRequest'
        risks:
          items:
            $ref: '#/components/schemas/TransactionRisk'
          type: array
          title: Risks
          description: The list of risks associated with this transaction.
        type:
          const: evm_transaction
          title: Type
          description: The type of the transaction.
        expected_result:
          allOf:
            - $ref: '#/components/schemas/EvmTransactionResult'
          description: The expected result of the transaction in case it is mined.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedEvmChain'
          description: The details of the chain that this message is on.
        simulation_status_result:
          allOf:
            - $ref: '#/components/schemas/SimulationStatusResult'
          description: Whether simulation succeeded, reverted or failed.
      type: object
      required:
        - policy_match
        - risks
        - type
        - expected_result
        - chain
        - simulation_status_result
      title: PredictedEvmTransaction
    PredictedSolanaMessage:
      properties:
        policy_match:
          allOf:
            - $ref: '#/components/schemas/PolicyMatch'
          description: The policy match.
        approval_request:
          description: The approval request.
          $ref: '#/components/schemas/ApprovalRequest'
        risks:
          items:
            $ref: '#/components/schemas/TransactionRisk'
          type: array
          title: Risks
          description: The list of risks associated with this transaction.
        type:
          const: solana_message
          title: Type
          description: The type of the transaction.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaChain'
          description: The details of the chain that this message is on.
      type: object
      required:
        - policy_match
        - risks
        - type
        - chain
      title: PredictedSolanaMessage
    PredictedSolanaTransaction:
      properties:
        policy_match:
          allOf:
            - $ref: '#/components/schemas/PolicyMatch'
          description: The policy match.
        approval_request:
          description: The approval request.
          $ref: '#/components/schemas/ApprovalRequest'
        risks:
          items:
            $ref: '#/components/schemas/TransactionRisk'
          type: array
          title: Risks
          description: The list of risks associated with this transaction.
        type:
          const: solana_transaction
          title: Type
          description: The type of the transaction.
        expected_result:
          allOf:
            - $ref: '#/components/schemas/SolanaTransactionResult'
          description: The expected result of the transaction in case it is mined.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaChain'
          description: The details of the chain that this message is on.
        simulation_status_result:
          allOf:
            - $ref: '#/components/schemas/SimulationStatusResult'
          description: Whether simulation succeeded, reverted or failed.
      type: object
      required:
        - policy_match
        - risks
        - type
        - expected_result
        - chain
        - simulation_status_result
      title: PredictedSolanaTransaction
    PredictedUtxoTransaction:
      properties:
        policy_match:
          allOf:
            - $ref: '#/components/schemas/PolicyMatch'
          description: The policy match.
        approval_request:
          description: The approval request.
          $ref: '#/components/schemas/ApprovalRequest'
        risks:
          items:
            $ref: '#/components/schemas/TransactionRisk'
          type: array
          title: Risks
          description: The list of risks associated with this transaction.
        type:
          const: utxo_transaction
          title: Type
          description: The type of the transaction.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedUtxoChain'
          description: Details of the chain this transaction is on.
        expected_result:
          allOf:
            - $ref: '#/components/schemas/UtxoTransactionResult'
          description: The expected result of the transaction in case it is mined.
      type: object
      required:
        - policy_match
        - risks
        - type
        - chain
        - expected_result
      title: PredictedUtxoTransaction
    Price:
      properties:
        price:
          type: string
          pattern: ^\d+$
          title: Price
          description: The price in the given fiat currency.
          example: '1000000000000000000'
        fiat_currency:
          $ref: '#/components/schemas/FiatCurrency'
      type: object
      required:
        - price
        - fiat_currency
      title: Price
      description: Price represents a price in a given FiatCurrency.
    PricedAsset:
      properties:
        asset_identifier:
          allOf:
            - $ref: '#/components/schemas/EnrichedAssetIdentifier'
          description: A unique asset identifier of the asset.
        price:
          description: The price of the asset (if it exists in the system).
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - asset_identifier
      title: PricedAsset
    PricedErc20:
      properties:
        price:
          type: string
          pattern: ^\d+$
          title: Price
          description: The price in the given fiat currency.
          example: '1000000000000000000'
        fiat_currency:
          $ref: '#/components/schemas/FiatCurrency'
        token:
          $ref: '#/components/schemas/Erc20'
      type: object
      required:
        - price
        - fiat_currency
        - token
      title: PricedErc20
      description: An ERC-20 token with price.
    PushMode:
      type: string
      enum:
        - auto
        - manual
        - deferred
      title: PushMode
    RateLimitError:
      properties: {}
      type: object
      title: RateLimitError
    ReleaseEvmTransactionRequest:
      properties:
        type:
          const: evm_transaction
          title: Type
          description: The type of the transaction.
        release_type:
          allOf:
            - $ref: '#/components/schemas/ReleaseType'
          description: The type of the release.
        signer_type:
          allOf:
            - $ref: '#/components/schemas/SignerType'
          description: Set who should sign the transaction.
          default: initiator
        fail_on_prediction_failure:
          type: boolean
          title: Fail On Prediction Failure
          description: >-
            `True` if transaction creation should fail in case prediction
            failed, `False` otherwise.
          default: true
      type: object
      required:
        - type
        - release_type
      title: ReleaseEvmTransactionRequest
    ReleaseTransactionErrorType:
      type: string
      enum:
        - partial_signed_raw_request
        - invalid_transaction_state
        - invalid_transaction_type
        - missing_signed_raw_request
        - redundant_signed_raw_request
        - non_managed_transaction
        - invalid_signed_raw_request
        - invalid_signer_type
        - reverted_transaction
        - transaction_uses_secure_node
      title: ReleaseTransactionErrorType
    ReleaseTransactionRequest:
      allOf:
        - $ref: '#/components/schemas/ReleaseEvmTransactionRequest'
      title: ReleaseTransactionRequest
    ReleaseTransactionResponse:
      oneOf:
        - $ref: '#/components/schemas/BlackBoxSignature'
        - $ref: '#/components/schemas/CosmosTransaction'
        - $ref: '#/components/schemas/CosmosMessage'
        - $ref: '#/components/schemas/EvmMessage'
        - $ref: '#/components/schemas/EvmTransaction'
        - $ref: '#/components/schemas/SolanaMessage'
        - $ref: '#/components/schemas/SolanaTransaction'
        - $ref: '#/components/schemas/UtxoTransaction'
      title: ReleaseTransactionResponse
      discriminator:
        propertyName: type
        mapping:
          black_box_signature: '#/components/schemas/BlackBoxSignature'
          cosmos_message: '#/components/schemas/CosmosMessage'
          cosmos_transaction: '#/components/schemas/CosmosTransaction'
          evm_message: '#/components/schemas/EvmMessage'
          evm_transaction: '#/components/schemas/EvmTransaction'
          solana_message: '#/components/schemas/SolanaMessage'
          solana_transaction: '#/components/schemas/SolanaTransaction'
          utxo_transaction: '#/components/schemas/UtxoTransaction'
    ReleaseType:
      type: string
      enum:
        - cancel
        - accelerate
      title: ReleaseType
    RenameVaultRequest:
      properties:
        name:
          type: string
          minLength: 1
          title: Name
          description: The new name for the vault.
      type: object
      required:
        - name
      title: RenameVaultRequest
    RequestApprover:
      properties:
        user:
          oneOf:
            - $ref: '#/components/schemas/PersonRef'
            - $ref: '#/components/schemas/ApiUserRef'
          title: User
          discriminator:
            propertyName: user_type
            mapping:
              api_user: '#/components/schemas/ApiUserRef'
              person: '#/components/schemas/PersonRef'
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: The date and time when this approval was modified.
        decision:
          allOf:
            - $ref: '#/components/schemas/ApprovalDecision'
          description: The decision of the approver.
          deprecated: true
        state:
          allOf:
            - $ref: '#/components/schemas/ApprovalState'
          description: The state of the approval request for this approver.
      type: object
      required:
        - user
        - modified_at
        - decision
        - state
      title: RequestApprover
      description: Represents a single approver in an approval request
    Resource:
      type: string
      enum:
        - user
        - user_change_proposals
        - user_group
        - user_group_change_proposal
        - vault
        - vault_address
        - vault_group
        - transaction
        - batch_transaction
        - path
        - keyset
        - auth_token
        - access_token
      title: Resource
    ResourceError:
      properties:
        title:
          type: string
          title: Title
          description: Human-readable error message.
        detail:
          type: string
          title: Detail
          description: Detailed error message.
        request_id:
          title: Request Id
          description: Request ID - for debugging purposes.
          type: string
        resource:
          description: The type of resource.
          $ref: '#/components/schemas/Resource'
      type: object
      required:
        - title
        - detail
      title: ResourceError
    SignDoc:
      oneOf:
        - $ref: '#/components/schemas/AminoSignDoc'
        - $ref: '#/components/schemas/DirectSignDoc'
        - $ref: '#/components/schemas/MinedSignDoc'
      title: SignDoc
      discriminator:
        propertyName: format
        mapping:
          amino: '#/components/schemas/AminoSignDoc'
          direct: '#/components/schemas/DirectSignDoc'
          mined: '#/components/schemas/MinedSignDoc'
    Signature:
      properties:
        data:
          type: string
          title: Data
          description: Signature on the data, encoded in base64 format.
          example: SGVsbG8=
        signed_by:
          title: Signed By
          description: >-
            The user who created this signature, `null` if the signature wasn’t
            created by a Fordefi user.
          oneOf:
            - $ref: '#/components/schemas/PersonRef'
            - $ref: '#/components/schemas/ApiSignerRef'
            - $ref: '#/components/schemas/EndUserRef'
          discriminator:
            propertyName: user_type
            mapping:
              api_signer: '#/components/schemas/ApiSignerRef'
              end_user: '#/components/schemas/EndUserRef'
              person: '#/components/schemas/PersonRef'
      type: object
      required:
        - data
      title: Signature
    SignedRawData:
      properties:
        raw_data:
          type: string
          title: Raw Data
          description: The data that has been signed.
          example: SGVsbG8=
        timestamp_signature:
          allOf:
            - $ref: '#/components/schemas/TimestampedSignature'
          description: The signature of the data and timestamp.
        url_path:
          type: string
          title: Url Path
          description: The endpoint URL path where the transaction was requested from.
      type: object
      required:
        - raw_data
        - timestamp_signature
        - url_path
      title: SignedRawData
      description: SignedRawData represents signed raw data with timestamp and URL.
    SignerInfo:
      properties:
        signer_address:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosBechAddress'
          description: The address of the signer (in bech32 format).
        public_key:
          type: string
          pattern: ^[a-fA-F0-9]+$
          title: Public Key
          description: Public key in its compressed format
        account:
          type: string
          pattern: ^-?\d+$
          title: Account
          description: The account number assigned by the chain.
          example: '1000000000000000000'
        sequence:
          type: string
          pattern: ^-?\d+$
          title: Sequence
          description: The sequence of this transaction.
          example: '1000000000000000000'
      type: object
      required:
        - signer_address
        - public_key
        - account
        - sequence
      title: SignerInfo
    SignerType:
      type: string
      enum:
        - initiator
        - api_signer
        - end_user
      title: SignerType
    SimulationStatus:
      type: string
      enum:
        - success
        - failed
        - reverted
        - skipped
      title: SimulationStatus
    SimulationStatusResult:
      properties:
        simulation_status:
          description: The status of simulation result.
          $ref: '#/components/schemas/SimulationStatus'
        details:
          type: string
          title: Details
          description: Details about transaction reversion if occurred.
      type: object
      required:
        - details
      title: SimulationStatusResult
    SolanaAddress:
      properties:
        chain:
          $ref: '#/components/schemas/SolanaChain'
        base58_repr:
          type: string
          maxLength: 44
          minLength: 32
          pattern: ^[a-km-zA-HJ-NP-Z1-9]+$
          title: Base58 Repr
          description: Base58 representation of the address in the chain.
          example: 4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA
      type: object
      required:
        - chain
        - base58_repr
      title: SolanaAddress
      description: Address represents an EVM blockchain address.
    SolanaAddressBookContact:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        name:
          type: string
          title: Name
          description: The name of the contact.
        modified_by:
          allOf:
            - $ref: '#/components/schemas/UserRef'
          description: Address last modifier.
        state:
          allOf:
            - $ref: '#/components/schemas/AddressBookContactState'
          description: The state of the contact.
        groups:
          items:
            $ref: '#/components/schemas/GroupRef'
          type: array
          title: Groups
          description: List of contact's groups.
        pending_changes:
          description: Pending changes for the contact.
          $ref: '#/components/schemas/AddressBookContactChanges'
        chain_type:
          const: solana
          title: Chain Type
          description: The type of the chain.
        address:
          type: string
          maxLength: 44
          minLength: 32
          pattern: ^[a-km-zA-HJ-NP-Z1-9]+$
          title: Address
          description: The address on the solana chain.
          example: 4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA
        chains:
          items:
            $ref: '#/components/schemas/EnrichedSolanaChain'
          type: array
          title: Chains
          description: The chains the contact belongs to.
      type: object
      required:
        - id
        - created_at
        - modified_at
        - name
        - modified_by
        - state
        - groups
        - chain_type
        - address
        - chains
      title: SolanaAddressBookContact
      description: Represents a contact in the Fordefi platform
    SolanaAddressBookContactAddressRef:
      properties:
        chain_type:
          const: solana
          title: Chain Type
          description: The type of the chain.
        address:
          type: string
          maxLength: 44
          minLength: 32
          pattern: ^[a-km-zA-HJ-NP-Z1-9]+$
          title: Address
          description: The address on the Solana chain.
          example: 4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA
        chains:
          items:
            $ref: '#/components/schemas/SolanaChain'
          type: array
          title: Chains
          description: The chains the contact belongs to.
      type: object
      required:
        - chain_type
        - address
        - chains
      title: SolanaAddressBookContactAddressRef
    SolanaAddressRequest:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/SolanaChainUniqueId'
          description: The chain details this address is of.
        base58_repr:
          type: string
          maxLength: 44
          minLength: 32
          pattern: ^[a-km-zA-HJ-NP-Z1-9]+$
          title: Base58 Repr
          description: Base58 representation of the address in the chain.
          example: 4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA
      type: object
      required:
        - chain
        - base58_repr
      title: SolanaAddressRequest
      description: Address represents a blockchain address.
    SolanaAsset:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The asset ID.
        decimals:
          type: integer
          minimum: 0
          title: Decimals
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
        name:
          type: string
          title: Name
          description: The name of the asset.
        symbol:
          type: string
          title: Symbol
          description: The symbol (ticker) of the asset.
        hidden:
          type: boolean
          title: Hidden
          description: '`True` if this asset was set to be hidden, `False` otherwise.'
        verified:
          type: boolean
          title: Verified
          description: '`True` if this asset is verified by Fordefi, `False` otherwise.'
        asset_identifier:
          allOf:
            - $ref: '#/components/schemas/EnrichedAssetIdentifier'
          description: The asset identifier.
        metadata_uri:
          title: Metadata Uri
          description: The URI of the asset metadata.
          type: string
        type:
          const: solana_asset
          title: Type
          description: Solana asset type.
          deprecated: true
        details:
          anyOf:
            - $ref: '#/components/schemas/SolanaNativeAsset'
            - $ref: '#/components/schemas/SolanaSplTokenAsset'
          title: Details
          deprecated: true
      type: object
      required:
        - id
        - decimals
        - name
        - symbol
        - hidden
        - verified
        - asset_identifier
        - type
        - details
      title: SolanaAsset
    SolanaAssetIdentifierRequest:
      properties:
        type:
          const: solana
          title: Type
          description: Solana asset identifier type.
        details:
          oneOf:
            - $ref: '#/components/schemas/SolanaNativeAssetIdentifierRequest'
            - $ref: '#/components/schemas/SolanaSplTokenAssetIdentifierRequest'
          title: Details
          discriminator:
            propertyName: type
            mapping:
              native: '#/components/schemas/SolanaNativeAssetIdentifierRequest'
              spl_token: '#/components/schemas/SolanaSplTokenAssetIdentifierRequest'
      type: object
      required:
        - type
        - details
      title: SolanaAssetIdentifierRequest
    SolanaBalanceChangeEffect:
      oneOf:
        - $ref: '#/components/schemas/SolanaNativeCurrencyBalanceChange'
        - $ref: '#/components/schemas/SolanaTokenBalanceChange'
      title: SolanaBalanceChangeEffect
      discriminator:
        propertyName: type
        mapping:
          native: '#/components/schemas/SolanaNativeCurrencyBalanceChange'
          spl_token: '#/components/schemas/SolanaTokenBalanceChange'
    SolanaBlockData:
      properties:
        slot:
          type: integer
          title: Slot
          description: The slot number.
        hash:
          type: string
          maxLength: 44
          minLength: 32
          pattern: ^[a-km-zA-HJ-NP-Z1-9]+$
          title: Hash
          description: The block hash.
          example: 4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZAMdL4VZHirAn
        mined_at:
          type: string
          format: date-time
          title: Mined At
          description: The date and time this block was mined.
      type: object
      required:
        - slot
        - hash
        - mined_at
      title: SolanaBlockData
    SolanaChain:
      properties:
        chain_type:
          const: solana
          title: Chain Type
          description: The type of the chain.
        unique_id:
          allOf:
            - $ref: '#/components/schemas/SolanaChainUniqueId'
          description: The type of the Solana-based chain.
      type: object
      required:
        - chain_type
        - unique_id
      title: SolanaChain
    SolanaChainUniqueId:
      type: string
      enum:
        - solana_mainnet
        - solana_devnet
      title: SolanaChainUniqueId
    SolanaCompiledInstruction:
      properties:
        program_index:
          type: integer
          title: Program Index
          description: The program index.
        data:
          type: string
          title: Data
          description: The instruction data in Base64 format.
          example: SGVsbG8=
        account_indexes:
          items:
            type: integer
          type: array
          title: Account Indexes
          description: >-
            The indexes of the instruction accounts in the transaction accounts
            list.
        program:
          description: The address of the program account.
          $ref: '#/components/schemas/EnrichedSolanaAddress'
        base58_data:
          title: Base58 Data
          description: The instruction data encoded in Base58 format.
          type: string
          pattern: ^[a-km-zA-HJ-NP-Z1-9]+$
      type: object
      required:
        - program_index
        - data
        - account_indexes
      title: SolanaCompiledInstruction
    SolanaCompiledInstructionRequest:
      properties:
        program_index:
          type: integer
          title: Program Index
          description: The program index.
        data:
          type: string
          title: Data
          description: The instruction data in Base64 format.
          example: SGVsbG8=
        account_indexes:
          items:
            type: integer
          type: array
          title: Account Indexes
          description: >-
            The indexes of the instruction accounts in the transaction accounts
            list.
      type: object
      required:
        - program_index
        - data
        - account_indexes
      title: SolanaCompiledInstructionRequest
    SolanaContractMetadata:
      properties:
        name:
          title: Name
          description: The name of the contract.
          type: string
        dapp:
          description: The DApp details of the contract.
          $ref: '#/components/schemas/Dapp'
        is_verified:
          type: boolean
          title: Is Verified
          description: '`True` if the contract is verified, `False` otherwise.'
        token:
          description: The token details of the contract.
          $ref: '#/components/schemas/SplToken'
      type: object
      required:
        - is_verified
      title: SolanaContractMetadata
    SolanaEffects:
      properties:
        balance_changes:
          items:
            $ref: '#/components/schemas/SolanaBalanceChangeEffect'
          type: array
          title: Balance Changes
          description: The aggregated balance changes of addresses.
        transfers:
          items:
            $ref: '#/components/schemas/SolanaTransferEffect'
          type: array
          title: Transfers
          description: The transfer events of the transaction.
      type: object
      required:
        - balance_changes
        - transfers
      title: SolanaEffects
    SolanaEnrichedMessageAddressTableLookup:
      properties:
        account_key:
          allOf:
            - $ref: '#/components/schemas/SolanaAddress'
          description: The address of the lookup table.
        writable_indexes:
          items:
            type: integer
          type: array
          title: Writable Indexes
          description: Indexes of writable accounts in the lookup table.
        readonly_indexes:
          items:
            type: integer
          type: array
          title: Readonly Indexes
          description: Indexes of read-only accounts in the lookup table.
        state:
          allOf:
            - $ref: '#/components/schemas/AddressLookupTableState'
          description: The state of the lookup table.
      type: object
      required:
        - account_key
        - writable_indexes
        - readonly_indexes
        - state
      title: SolanaEnrichedMessageAddressTableLookup
    SolanaFee:
      properties:
        fee:
          type: string
          pattern: ^0*[1-9]\d*$
          title: Fee
          description: The fee of the transaction (in lamports).
          example: '1000000000000000000'
        fiat_price:
          description: The price of the asset used to pay the fee.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - fee
      title: SolanaFee
    SolanaMessage:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        managed_transaction_data:
          description: >-
            Managed transaction data. Presented if the transaction was initiated
            from the Fordefi system itself, in contrast to unmanaged
            transactions (which are, for example, transfers of funds into a
            vault visible to Fordefi). 
          $ref: '#/components/schemas/ManagedTransactionData'
        signatures:
          items:
            $ref: '#/components/schemas/Signature'
          type: array
          title: Signatures
          description: The transaction signatures.
        note:
          title: Note
          description: An optional transaction note.
          type: string
        spam_state:
          allOf:
            - $ref: '#/components/schemas/TransactionSpamState'
          description: >-
            `automatically_set` if the transaction was automatically set as spam
            by Fordefi, `manually_set` if the transaction was manually set as
            spam by a user, and `unset` if the transaction was not set as spam.
          default: unset
        direction:
          allOf:
            - $ref: '#/components/schemas/TransactionDirection'
          description: The direction of the transaction.
        type:
          const: solana_message
          title: Type
          description: Solana message type.
        solana_message_type:
          allOf:
            - $ref: '#/components/schemas/SolanaMessageType'
          description: The type of the Solana message.
        state:
          allOf:
            - $ref: '#/components/schemas/SolanaMessageState'
          description: The state of the message.
        state_changes:
          items:
            $ref: '#/components/schemas/SolanaMessageStateChange'
          type: array
          title: State Changes
          description: The state changes of the message.
        string_data:
          type: string
          title: String Data
          description: The message as a string.
        raw_data:
          type: string
          title: Raw Data
          description: The raw data of the message, encoded in base64
          example: SGVsbG8=
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaChain'
          description: The details of the chain that this message is on.
      type: object
      required:
        - id
        - created_at
        - modified_at
        - signatures
        - direction
        - type
        - solana_message_type
        - state
        - state_changes
        - string_data
        - raw_data
        - chain
      title: SolanaMessage
    SolanaMessageAddressTableLookupRequest:
      properties:
        account_key:
          type: string
          maxLength: 44
          minLength: 32
          pattern: ^[a-km-zA-HJ-NP-Z1-9]+$
          title: Account Key
          description: The address of the lookup table.
          example: 4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA
        writable_indexes:
          items:
            type: integer
          type: array
          title: Writable Indexes
          description: Indexes of writable accounts in the lookup table.
        readonly_indexes:
          items:
            type: integer
          type: array
          title: Readonly Indexes
          description: Indexes of read-only accounts in the lookup table.
      type: object
      required:
        - account_key
        - writable_indexes
        - readonly_indexes
      title: SolanaMessageAddressTableLookupRequest
    SolanaMessageState:
      type: string
      enum:
        - waiting_for_approval
        - approved
        - signed
        - completed
        - error_signing
        - aborted
      title: SolanaMessageState
    SolanaMessageStateChange:
      properties:
        changed_at:
          type: string
          format: date-time
          title: Changed At
          description: The date and time when the state was changed.
        asset_prices:
          items:
            $ref: '#/components/schemas/PricedAsset'
          type: array
          title: Asset Prices
          description: The prices at the time the state was changed.
        previous_state:
          description: The previous state of the message.
          $ref: '#/components/schemas/SolanaMessageState'
        new_state:
          allOf:
            - $ref: '#/components/schemas/SolanaMessageState'
          description: The new state of the message.
      type: object
      required:
        - changed_at
        - asset_prices
        - new_state
      title: SolanaMessageStateChange
    SolanaMessageType:
      type: string
      const: personal_message_type
      title: SolanaMessageType
    SolanaMessageVersion:
      type: string
      enum:
        - legacy
        - v0
      title: SolanaMessageVersion
    SolanaNativeAsset:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaChain'
          description: The details of the chain of the native asset.
        type:
          const: solana_native_asset
          title: Type
          description: Solana asset type.
      type: object
      required:
        - chain
        - type
      title: SolanaNativeAsset
    SolanaNativeAssetIdentifierRequest:
      properties:
        type:
          const: native
          title: Type
          description: Solana asset identifier type.
        chain:
          allOf:
            - $ref: '#/components/schemas/SolanaChainUniqueId'
          description: The details of the chain of the native asset.
      type: object
      required:
        - type
        - chain
      title: SolanaNativeAssetIdentifierRequest
    SolanaNativeCurrencyBalanceChange:
      properties:
        type:
          const: native
          title: Type
        address:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaAddress'
          description: The address affected by the balance change.
        diff:
          type: string
          pattern: ^-?\d+$
          title: Diff
          description: >-
            The amount of native currency that was added or deducted from the
            owner's balance. If the amount was deducted, the value is negative;
            if the amount was added, the value is positive.
          example: '1000000000000000000'
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - type
        - address
        - diff
      title: SolanaNativeCurrencyBalanceChange
    SolanaNativeCurrencyTransfer:
      properties:
        type:
          const: native
          title: Type
        from:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaAddress'
          description: The sender of the transfer.
        to:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaAddress'
          description: The receiver of the transfer.
        amount:
          type: string
          pattern: ^\d+$
          title: Amount
          description: The amount of the transfer.
          example: '1000000000000000000'
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - type
        - from
        - to
        - amount
      title: SolanaNativeCurrencyTransfer
    SolanaNativeTransferDetails:
      properties:
        type:
          const: native_transfer
          title: Type
          description: >-
            A transaction involving the transfer of native currency from one
            address to another. 
        direction:
          allOf:
            - $ref: '#/components/schemas/TransferDirection'
          description: The direction of the movement of funds, in case of a transfer.
          deprecated: true
        sender:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaAddress'
          description: The sender of the tokens.
        recipient:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaAddress'
          description: The recipient of the tokens.
        is_internal:
          title: Is Internal
          description: >-
            Is this transfer an internal transfer between two vaults. None if
            the transaction is incoming.
          type: boolean
      type: object
      required:
        - type
        - direction
        - sender
        - recipient
      title: SolanaNativeTransferDetails
    SolanaPersonalMessageRequest:
      properties:
        type:
          const: personal_message_type
          title: Type
          description: Personal message standard.
        chain:
          allOf:
            - $ref: '#/components/schemas/SolanaChainUniqueId'
          description: The details of the chain of the native asset.
        raw_data:
          type: string
          title: Raw Data
          description: Base64 of the message to be signed.
          example: SGVsbG8=
      type: object
      required:
        - type
        - chain
        - raw_data
      title: SolanaPersonalMessageRequest
    SolanaRawTransactionDetails:
      properties:
        type:
          const: raw_transaction
          title: Type
          description: A transaction capable of any operation.
      type: object
      required:
        - type
      title: SolanaRawTransactionDetails
    SolanaReversion:
      properties:
        state:
          allOf:
            - $ref: '#/components/schemas/SolanaReversionState'
          description: >-
            The state of the reversion. Is one of the
            following:<ul><li>`not_reverted`: No reversion, meaning, completed
            successfully.<li>`unknown_revert`: Fordefi does not know the reason
            for the reversion.<li>`contract_asserted`: The smart contract
            originally made an assertion that was later rejected and the
            transaction was halted. <li>`insufficient_funds_gas_and_value`: A
            transaction was sent for which there were insufficient
            funds.<li>`insufficient_funds_for_rent`: There is not enough SOL in
            the account to pay for the rent.</ul>
        reason:
          title: Reason
          description: The reason for the reversion (additional information).
          type: string
      type: object
      required:
        - state
      title: SolanaReversion
    SolanaReversionState:
      type: string
      enum:
        - not_reverted
        - unknown_revert
        - contract_asserted
        - insufficient_funds_gas_and_value
        - insufficient_funds_for_rent
      title: SolanaReversionState
    SolanaSplTokenAsset:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaChain'
          description: The details of the chain of the native asset.
        type:
          const: solana_spl_token_asset
          title: Type
          description: Solana asset type.
      type: object
      required:
        - chain
        - type
      title: SolanaSplTokenAsset
    SolanaSplTokenAssetIdentifierRequest:
      properties:
        type:
          const: spl_token
          title: Type
          description: SPL token asset identifier type.
        token:
          allOf:
            - $ref: '#/components/schemas/SolanaAddressRequest'
          description: The SPL token details.
      type: object
      required:
        - type
        - token
      title: SolanaSplTokenAssetIdentifierRequest
    SolanaSuggestedFees:
      properties:
        type:
          const: solana
          title: Type
          description: The type of the chain.
        chain_unique_id:
          allOf:
            - $ref: '#/components/schemas/SolanaChainUniqueId'
          description: The Solana chain unique id.
        fee_per_signature:
          type: string
          pattern: ^\d+$
          title: Fee Per Signature
          description: >-
            The fee paid for each signature in the transaction, denominated in
            lamports.
          example: '1000000000000000000'
      type: object
      required:
        - type
        - chain_unique_id
        - fee_per_signature
      title: SolanaSuggestedFees
    SolanaTokenBalanceChange:
      properties:
        type:
          const: spl_token
          title: Type
        owner:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaAddress'
          description: The address affected by the balance change.
        diff:
          type: string
          pattern: ^-?\d+$
          title: Diff
          description: >-
            The amount of native currency that was added or deducted from the
            owner's balance. If the amount was deducted, the value is negative;
            if the amount was added, the value is positive.
          example: '1000000000000000000'
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
        token_contract:
          allOf:
            - $ref: '#/components/schemas/SplTokenContract'
          description: The SPL token contract.
      type: object
      required:
        - type
        - owner
        - diff
        - token_contract
      title: SolanaTokenBalanceChange
    SolanaTokenTransfer:
      properties:
        type:
          const: spl_token
          title: Type
        from:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaAddress'
          description: The sender of the transfer.
        to:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaAddress'
          description: The receiver of the transfer.
        amount:
          type: string
          pattern: ^\d+$
          title: Amount
          description: The amount of the transfer.
          example: '1000000000000000000'
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
        token_contract:
          allOf:
            - $ref: '#/components/schemas/SplTokenContract'
          description: The SPL token contract.
      type: object
      required:
        - type
        - from
        - to
        - amount
        - token_contract
      title: SolanaTokenTransfer
    SolanaTokenTransferDetails:
      properties:
        type:
          const: token_transfer
          title: Type
          description: >-
            A transaction involving the transfer of native currency from one
            address to another. 
        direction:
          allOf:
            - $ref: '#/components/schemas/TransferDirection'
          description: The direction of the movement of funds, in case of a transfer.
          deprecated: true
        sender:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaAddress'
          description: The sender of the tokens.
        recipient:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaAddress'
          description: The recipient of the tokens.
        is_internal:
          title: Is Internal
          description: >-
            Is this transfer an internal transfer between two vaults. None if
            the transaction is incoming.
          type: boolean
      type: object
      required:
        - type
        - direction
        - sender
        - recipient
      title: SolanaTokenTransferDetails
    SolanaTransaction:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        managed_transaction_data:
          description: >-
            Managed transaction data. Presented if the transaction was initiated
            from the Fordefi system itself, in contrast to unmanaged
            transactions (which are, for example, transfers of funds into a
            vault visible to Fordefi). 
          $ref: '#/components/schemas/ManagedTransactionData'
        signatures:
          items:
            $ref: '#/components/schemas/Signature'
          type: array
          title: Signatures
          description: The transaction signatures.
        note:
          title: Note
          description: An optional transaction note.
          type: string
        spam_state:
          allOf:
            - $ref: '#/components/schemas/TransactionSpamState'
          description: >-
            `automatically_set` if the transaction was automatically set as spam
            by Fordefi, `manually_set` if the transaction was manually set as
            spam by a user, and `unset` if the transaction was not set as spam.
          default: unset
        direction:
          allOf:
            - $ref: '#/components/schemas/TransactionDirection'
          description: The direction of the transaction.
        type:
          const: solana_transaction
          title: Type
          description: The type of the transaction.
        solana_transaction_type_details:
          oneOf:
            - $ref: '#/components/schemas/SolanaNativeTransferDetails'
            - $ref: '#/components/schemas/SolanaTokenTransferDetails'
            - $ref: '#/components/schemas/SolanaRawTransactionDetails'
          title: Solana Transaction Type Details
          description: Details of Solana transaction based on its type.
          discriminator:
            propertyName: type
            mapping:
              native_transfer: '#/components/schemas/SolanaNativeTransferDetails'
              raw_transaction: '#/components/schemas/SolanaRawTransactionDetails'
              token_transfer: '#/components/schemas/SolanaTokenTransferDetails'
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaChain'
          description: The details of the chain this transaction is on
        state:
          allOf:
            - $ref: '#/components/schemas/SolanaTransactionState'
          description: The current state of the transaction.
        state_changes:
          items:
            $ref: '#/components/schemas/SolanaTransactionStateChange'
          type: array
          title: State Changes
          description: The state changes of the transaction.
        version:
          allOf:
            - $ref: '#/components/schemas/SolanaMessageVersion'
          description: The version of the transaction message.
        instructions:
          items:
            $ref: '#/components/schemas/SolanaCompiledInstruction'
          type: array
          title: Instructions
          description: The instructions of the transaction.
        accounts:
          items:
            $ref: '#/components/schemas/SolanaTransactionAccount'
          type: array
          title: Accounts
          description: Accounts used in the transaction.
        address_table_lookups:
          items:
            $ref: '#/components/schemas/SolanaEnrichedMessageAddressTableLookup'
          type: array
          title: Address Table Lookups
          description: Lookup tables of accounts used in the transaction.
        sender:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaAddress'
          description: The sender of the transaction.
        raw_transaction:
          title: Raw Transaction
          description: The serialized transaction encoded as a base64 string
          type: string
          example: SGVsbG8=
        hash:
          title: Hash
          description: The first signature of the transaction.
          type: string
          maxLength: 88
          minLength: 64
          pattern: ^[a-km-zA-HJ-NP-Z1-9]+$
          example: >-
            FAWA66fudpiwdRDDQ4DRxdJsRvawvauwg4vQkm98ZHFpXmW5N7xzRiTRpt8QiZ19s1aVbzKgXW6kEZanwHeDFNS
        recent_blockhash:
          title: Recent Blockhash
          description: The transaction nonce (last block hash).
          type: string
          maxLength: 44
          minLength: 32
          pattern: ^[a-km-zA-HJ-NP-Z1-9]+$
          example: 4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZAMdL4VZHirAn
        block:
          description: Details of the block the transaction was mined in.
          $ref: '#/components/schemas/SolanaBlockData'
        expected_result:
          description: The expected result of the transaction in case it is mined.
          $ref: '#/components/schemas/SolanaTransactionResult'
        simulation_status_result:
          allOf:
            - $ref: '#/components/schemas/SimulationStatusResult'
          description: Whether simulation succeeded or failed.
        mined_result:
          description: The result of the transaction after it was mined.
          $ref: '#/components/schemas/SolanaTransactionResult'
        explorer_url:
          title: Explorer Url
          description: >-
            The URL of this transaction in a blockchain explorer. For example,
            Solscan.
          example: https://solscan.io/tx/FAWA66f...6kEZanwHeDFNS
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
      type: object
      required:
        - id
        - created_at
        - modified_at
        - signatures
        - direction
        - type
        - solana_transaction_type_details
        - chain
        - state
        - state_changes
        - version
        - instructions
        - accounts
        - address_table_lookups
        - sender
        - simulation_status_result
      title: SolanaTransaction
    SolanaTransactionAccount:
      properties:
        address:
          allOf:
            - $ref: '#/components/schemas/EnrichedSolanaAddress'
          description: The address of the account.
        writable:
          type: boolean
          title: Writable
          description: >-
            Indicates if this account is writable in the context of the
            transaction.
        signer:
          type: boolean
          title: Signer
          description: Indicates if this account is a signer of the transaction.
      type: object
      required:
        - address
        - writable
        - signer
      title: SolanaTransactionAccount
    SolanaTransactionAccountRequest:
      properties:
        address:
          type: string
          maxLength: 44
          minLength: 32
          pattern: ^[a-km-zA-HJ-NP-Z1-9]+$
          title: Address
          description: The address of the account.
          example: 4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA
        writable:
          type: boolean
          title: Writable
          description: >-
            Indicates if this account is writable in the context of the
            transaction.
        signer:
          type: boolean
          title: Signer
          description: Indicates if this account is a signer of the transaction.
        ephemeral_key:
          title: Ephemeral Key
          description: A 64-byte Solana secret key of the account, encoded in base-64.
          type: string
          maxLength: 88
          minLength: 88
          example: lnNyP8kFPEaVpvUo/SIlhdZlzhPU8r7yT/h0gG5ajzQ=
      type: object
      required:
        - address
        - writable
        - signer
      title: SolanaTransactionAccountRequest
    SolanaTransactionResult:
      properties:
        reversion:
          allOf:
            - $ref: '#/components/schemas/SolanaReversion'
          description: Details whether the transaction was reverted or not.
        transaction_error:
          title: Transaction Error
          description: The description of the error of the transaction.
          type: string
        fee:
          type: string
          pattern: ^0*[1-9]\d*$
          title: Fee
          description: The fee of the transaction (in lamports).
          deprecated: true
          example: '1000000000000000000'
        enriched_fee:
          allOf:
            - $ref: '#/components/schemas/SolanaFee'
          description: The fee of the transaction.
        effects:
          allOf:
            - $ref: '#/components/schemas/SolanaEffects'
          description: The effects of the transaction.
        instruction_error:
          description: The description of the error of the instruction.
          $ref: '#/components/schemas/InstructionError'
      type: object
      required:
        - reversion
        - fee
        - enriched_fee
        - effects
      title: SolanaTransactionResult
    SolanaTransactionSignaturesRequest:
      properties:
        data:
          title: Data
          description: Signature on the data, encoded in base64 format.
          type: string
          example: SGVsbG8=
      type: object
      title: SolanaTransactionSignaturesRequest
    SolanaTransactionState:
      type: string
      enum:
        - waiting_for_approval
        - approved
        - signed
        - pushed_to_blockchain
        - mined
        - completed
        - aborted
        - error_pushing_to_blockchain
        - mined_reverted
        - completed_reverted
        - error_signing
        - dropped
      title: SolanaTransactionState
    SolanaTransactionStateChange:
      properties:
        changed_at:
          type: string
          format: date-time
          title: Changed At
          description: The date and time when the state was changed.
        asset_prices:
          items:
            $ref: '#/components/schemas/PricedAsset'
          type: array
          title: Asset Prices
          description: The prices at the time the state was changed.
        previous_state:
          description: The previous state of the transaction.
          $ref: '#/components/schemas/SolanaTransactionState'
        new_state:
          allOf:
            - $ref: '#/components/schemas/SolanaTransactionState'
          description: The new state of the transaction.
      type: object
      required:
        - changed_at
        - asset_prices
        - new_state
      title: SolanaTransactionStateChange
    SolanaTransactionType:
      type: string
      enum:
        - native_transfer
        - token_transfer
        - raw_transaction
      title: SolanaTransactionType
    SolanaTransferEffect:
      oneOf:
        - $ref: '#/components/schemas/SolanaNativeCurrencyTransfer'
        - $ref: '#/components/schemas/SolanaTokenTransfer'
      title: SolanaTransferEffect
      discriminator:
        propertyName: type
        mapping:
          native: '#/components/schemas/SolanaNativeCurrencyTransfer'
          spl_token: '#/components/schemas/SolanaTokenTransfer'
    SolanaVault:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        name:
          type: string
          title: Name
          description: The name of the vault.
        created_by:
          allOf:
            - $ref: '#/components/schemas/UserRef'
          description: Details of the vault creator.
        derivation_path:
          type: string
          title: Derivation Path
          description: The BIP 44 derivation path of the vault.
          deprecated: true
          example: m/44/60/0/0/0
        public_key_compressed:
          type: string
          title: Public Key Compressed
          description: >-
            The compressed public key of the vault. As defined in the SEC1
            standard: https://www.secg.org/SEC1-Ver-1.0.pdf.
          example: SGVsbG8=
        derivation_info:
          allOf:
            - $ref: '#/components/schemas/VaultDerivationInfo'
          description: The derivation info of the vault.
        keyset:
          allOf:
            - $ref: '#/components/schemas/KeysetRef'
          description: The keyset of the vault.
        key_holder:
          description: >-
            The user who owns the keyset of the vault. If not provided, the
            vault is owned by the organization.
          $ref: '#/components/schemas/EndUserRef'
        vault_group:
          allOf:
            - $ref: '#/components/schemas/VaultGroupRef'
          description: The vault group this vault belongs to.
        pending_vault_group_action:
          title: Pending Vault Group Action
          description: Details of pending vault movement to another vault group.
          oneOf:
            - $ref: '#/components/schemas/PendingVaultGroupActionAdd'
            - $ref: '#/components/schemas/PendingVaultGroupActionRemove'
          discriminator:
            propertyName: type
            mapping:
              add: '#/components/schemas/PendingVaultGroupActionAdd'
              remove: '#/components/schemas/PendingVaultGroupActionRemove'
        state:
          allOf:
            - $ref: '#/components/schemas/VaultState'
          description: State of the vault.
        type:
          const: solana
          title: Type
          description: Solana vault type.
        address:
          type: string
          maxLength: 44
          minLength: 32
          pattern: ^[a-km-zA-HJ-NP-Z1-9]+$
          title: Address
          description: The address of the vault in the Solana blockchain.
          example: 4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA
      type: object
      required:
        - id
        - created_at
        - modified_at
        - name
        - created_by
        - derivation_path
        - public_key_compressed
        - derivation_info
        - keyset
        - vault_group
        - state
        - type
        - address
      title: SolanaVault
      description: Represents a Solana vault in the Fordefi platform
    SplToken:
      properties:
        type:
          const: spl_token
          title: Type
          description: The type of the token
        address:
          allOf:
            - $ref: '#/components/schemas/SolanaAddress'
          description: The token address
        name:
          type: string
          title: Name
          description: The token name
        symbol:
          type: string
          title: Symbol
          description: The token symbol or ticker
        decimals:
          type: integer
          title: Decimals
          description: The token decimals
        logo_url:
          title: Logo Url
          description: The token logo url
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
      type: object
      required:
        - type
        - address
        - name
        - symbol
        - decimals
      title: SplToken
    SplTokenContract:
      properties:
        name:
          title: Name
          description: The name of the contract.
          type: string
        dapp:
          description: The DApp details of the contract.
          $ref: '#/components/schemas/Dapp'
        is_verified:
          type: boolean
          title: Is Verified
          description: '`True` if the contract is verified, `False` otherwise.'
        token:
          allOf:
            - $ref: '#/components/schemas/SplToken'
          description: The token details of the contract.
      type: object
      required:
        - is_verified
        - token
      title: SplTokenContract
    StdCoin:
      properties:
        denom:
          type: string
          title: Denom
          description: Denom of this coin.
        amount:
          type: string
          pattern: ^-?\d+$
          title: Amount
          description: Amount of this coin.
          example: '1000000000000000000'
      type: object
      required:
        - denom
        - amount
      title: StdCoin
    StdFee:
      properties:
        coins:
          items:
            $ref: '#/components/schemas/CosmosCoinWithAmount'
          type: array
          title: Coins
        gas:
          type: string
          pattern: ^-?\d+$
          title: Gas
          description: The gas amount.
          example: '1000000000000000000'
        payer:
          description: The payer.
          $ref: '#/components/schemas/EnrichedCosmosBechAddress'
        granter:
          description: The granter.
          $ref: '#/components/schemas/EnrichedCosmosBechAddress'
        fee_payer:
          description: The fee payer.
          $ref: '#/components/schemas/EnrichedCosmosBechAddress'
      type: object
      required:
        - coins
        - gas
      title: StdFee
    StdFeeRequest:
      properties:
        amount:
          items:
            $ref: '#/components/schemas/StdCoin'
          type: array
          title: Amount
          description: List of coins to pay for this transaction.
        gas:
          type: string
          pattern: ^\d+$
          title: Gas
          description: Gas wanted for this transaction.
          example: '1000000000000000000'
        payer:
          title: Payer
          description: Payer for this transaction.
          default: ''
          type: string
        granter:
          title: Granter
          description: Granger for this transaction.
          default: ''
          type: string
        fee_payer:
          title: Fee Payer
          description: Fee Payer for this transaction.
          default: ''
          type: string
      type: object
      required:
        - amount
        - gas
      title: StdFeeRequest
    StdSignDoc:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedCosmosChain'
          description: The chain the transaction is signed on.
        account_number:
          type: string
          pattern: ^-?\d+$
          title: Account Number
          description: The account number of the signer of the transaction.
          example: '1000000000000000000'
        sequence:
          type: string
          pattern: ^-?\d+$
          title: Sequence
          description: The sequence of the signer of the transaction.
          example: '1000000000000000000'
        timeout_height:
          title: Timeout Height
          description: The timeout height for the signed transaction.
          type: string
          pattern: ^-?\d+$
          example: '1000000000000000000'
        fee:
          allOf:
            - $ref: '#/components/schemas/StdFee'
          description: The fee of the signed transaction.
        messages:
          allOf:
            - $ref: '#/components/schemas/AminoMessagesList'
          description: The messages of the signed transaction.
        memo:
          type: string
          title: Memo
          description: The memo of the signed transaction.
      type: object
      required:
        - chain
        - account_number
        - sequence
        - fee
        - messages
        - memo
      title: StdSignDoc
    SuggestedFees:
      oneOf:
        - $ref: '#/components/schemas/CosmosSuggestedFees'
        - $ref: '#/components/schemas/EvmSuggestedFees'
        - $ref: '#/components/schemas/SolanaSuggestedFees'
        - $ref: '#/components/schemas/UtxoSuggestedFees'
      title: SuggestedFees
      discriminator:
        propertyName: type
        mapping:
          cosmos: '#/components/schemas/CosmosSuggestedFees'
          evm: '#/components/schemas/EvmSuggestedFees'
          solana: '#/components/schemas/SolanaSuggestedFees'
          utxo: '#/components/schemas/UtxoSuggestedFees'
    TestWebhookErrorType:
      type: string
      enum:
        - http_error
        - server_disconnected
        - timeout
        - client_connection_error
        - unexpected_error
      title: TestWebhookErrorType
    TestWebhookRequest:
      properties:
        url:
          type: string
          minLength: 1
          format: uri
          title: Url
          description: The URL of the webhook endpoint.
      type: object
      required:
        - url
      title: TestWebhookRequest
    TimestampedSignature:
      properties:
        signature:
          type: string
          title: Signature
          example: SGVsbG8=
        timestamp:
          type: integer
          title: Timestamp
      type: object
      required:
        - signature
        - timestamp
      title: TimestampedSignature
    TokenTransferDetails:
      properties:
        type:
          const: token_transfer
          title: Type
          description: >-
            A transaction involving the transfer of a token from one address to
            another.
        direction:
          allOf:
            - $ref: '#/components/schemas/TransferDirection'
          description: The direction of funds movement, in case of a transfer.
          deprecated: true
        recipient:
          $ref: '#/components/schemas/EnrichedEvmAddress'
        is_internal:
          title: Is Internal
          description: >-
            Is this transfer an internal transfer between two vaults. None if
            the transaction is incoming.
          type: boolean
      type: object
      required:
        - type
        - direction
        - recipient
      title: TokenTransferDetails
    Transaction:
      oneOf:
        - $ref: '#/components/schemas/BlackBoxSignature'
        - $ref: '#/components/schemas/CosmosTransaction'
        - $ref: '#/components/schemas/CosmosMessage'
        - $ref: '#/components/schemas/EvmMessage'
        - $ref: '#/components/schemas/EvmTransaction'
        - $ref: '#/components/schemas/SolanaMessage'
        - $ref: '#/components/schemas/SolanaTransaction'
        - $ref: '#/components/schemas/UtxoTransaction'
      title: Transaction
      discriminator:
        propertyName: type
        mapping:
          black_box_signature: '#/components/schemas/BlackBoxSignature'
          cosmos_message: '#/components/schemas/CosmosMessage'
          cosmos_transaction: '#/components/schemas/CosmosTransaction'
          evm_message: '#/components/schemas/EvmMessage'
          evm_transaction: '#/components/schemas/EvmTransaction'
          solana_message: '#/components/schemas/SolanaMessage'
          solana_transaction: '#/components/schemas/SolanaTransaction'
          utxo_transaction: '#/components/schemas/UtxoTransaction'
    TransactionDetailsCosmosMessageRequest:
      properties:
        vault_id:
          type: string
          format: uuid
          title: Vault Id
          description: The unique identifier of the vault.
        type:
          const: cosmos_message
          title: Type
          description: The type of the transaction.
        details:
          $ref: '#/components/schemas/CosmosArbitraryMessageRequest'
      type: object
      required:
        - vault_id
        - type
        - details
      title: TransactionDetailsCosmosMessageRequest
    TransactionDetailsCosmosTransactionRequest:
      properties:
        vault_id:
          type: string
          format: uuid
          title: Vault Id
          description: The unique identifier of the vault.
        type:
          const: cosmos_transaction
          title: Type
          description: The type of the transaction.
        details:
          oneOf:
            - $ref: '#/components/schemas/TypedCosmosRawTransactionRequest'
            - $ref: '#/components/schemas/TypedCosmosTransferRequest'
          title: Details
          description: Transaction details.
          discriminator:
            propertyName: type
            mapping:
              cosmos_raw_transaction: '#/components/schemas/TypedCosmosRawTransactionRequest'
              cosmos_transfer: '#/components/schemas/TypedCosmosTransferRequest'
      type: object
      required:
        - vault_id
        - type
        - details
      title: TransactionDetailsCosmosTransactionRequest
    TransactionDetailsEvmMessageRequest:
      properties:
        vault_id:
          type: string
          format: uuid
          title: Vault Id
          description: The unique identifier of the vault.
        type:
          const: evm_message
          title: Type
          description: The type of the transaction.
        details:
          oneOf:
            - $ref: '#/components/schemas/TransactionDetailsEvmTypedMessageRequest'
            - $ref: '#/components/schemas/TransactionDetailsEvmPersonalMessageRequest'
          title: Details
          discriminator:
            propertyName: type
            mapping:
              personal_message_type: '#/components/schemas/TransactionDetailsEvmPersonalMessageRequest'
              typed_message_type: '#/components/schemas/TransactionDetailsEvmTypedMessageRequest'
      type: object
      required:
        - vault_id
        - type
        - details
      title: TransactionDetailsEvmMessageRequest
    TransactionDetailsEvmPersonalMessageRequest:
      properties:
        type:
          const: personal_message_type
          title: Type
          description: The type of the EVM message.
        chain:
          allOf:
            - $ref: '#/components/schemas/EvmChainRequest'
          description: The evm chain this message is intended for.
        raw_data:
          type: string
          title: Raw Data
          description: >-
            The raw data of the message to be signed, provided as a string or
            hex-encoded.
      type: object
      required:
        - type
        - chain
        - raw_data
      title: TransactionDetailsEvmPersonalMessageRequest
    TransactionDetailsEvmRawTransactionRequest:
      properties:
        type:
          const: evm_raw_transaction
          title: Type
          description: >-
            An EVM raw transaction receives raw data and is for general
            transactions.
        fail_on_prediction_failure:
          type: boolean
          title: Fail On Prediction Failure
          description: >-
            `True` if the request should fail in case simulation failed, `False`
            otherwise.
          default: true
        skip_simulation:
          type: boolean
          title: Skip Simulation
          description: '`True` to perform the action without simulation, `False` otherwise.'
          default: false
        chain:
          allOf:
            - $ref: '#/components/schemas/EvmChainRequest'
          description: >-
            The chain that this transaction is on. Specify either the chain ID
            (for example `1` for `ethereum_mainnet`)or the chain name (for
            example, `ethereum_goerli`).
        to:
          type: string
          maxLength: 42
          minLength: 42
          pattern: ^0[xX][a-fA-F0-9]+$
          title: To
          description: The recipient of the transaction.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        value:
          type: string
          pattern: ^\d+$
          title: Value
          description: The value of the transaction.
          example: '1000000000000000000'
        data:
          description: The data of the transaction.
          $ref: '#/components/schemas/EvmDataRequest'
      type: object
      required:
        - type
        - chain
        - to
        - value
      title: TransactionDetailsEvmRawTransactionRequest
    TransactionDetailsEvmRevokeAllowanceRequest:
      properties:
        type:
          const: evm_revoke_allowance
          title: Type
          description: The type of the transaction.
        fail_on_prediction_failure:
          type: boolean
          title: Fail On Prediction Failure
          description: >-
            `True` if the request should fail in case simulation failed, `False`
            otherwise.
          default: true
        skip_simulation:
          type: boolean
          title: Skip Simulation
          description: '`True` to perform the action without simulation, `False` otherwise.'
          default: false
        chain:
          allOf:
            - $ref: '#/components/schemas/EvmChainRequest'
          description: >-
            The chain that this transaction is on.Specify either the chain ID
            (for example `1` for `ethereum_mainnet`)or the chain name (for
            example, `ethereum_goerli`).
        token:
          type: string
          maxLength: 42
          minLength: 42
          pattern: ^0[xX][a-fA-F0-9]+$
          title: Token
          description: The address of the token to revoke allowance for.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        spender:
          type: string
          maxLength: 42
          minLength: 42
          pattern: ^0[xX][a-fA-F0-9]+$
          title: Spender
          description: The address of the spender to revoke allowance for.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
      type: object
      required:
        - type
        - chain
        - token
        - spender
      title: TransactionDetailsEvmRevokeAllowanceRequest
    TransactionDetailsEvmTransactionRequest:
      properties:
        vault_id:
          type: string
          format: uuid
          title: Vault Id
          description: The unique identifier of the vault.
        type:
          const: evm_transaction
          title: Type
          description: The type of the transaction.
        details:
          oneOf:
            - $ref: '#/components/schemas/TransactionDetailsEvmRawTransactionRequest'
            - $ref: '#/components/schemas/TransactionDetailsEvmTransferRequest'
            - $ref: '#/components/schemas/TransactionDetailsEvmRevokeAllowanceRequest'
          title: Details
          discriminator:
            propertyName: type
            mapping:
              evm_raw_transaction: '#/components/schemas/TransactionDetailsEvmRawTransactionRequest'
              evm_revoke_allowance: '#/components/schemas/TransactionDetailsEvmRevokeAllowanceRequest'
              evm_transfer: '#/components/schemas/TransactionDetailsEvmTransferRequest'
      type: object
      required:
        - vault_id
        - type
        - details
      title: TransactionDetailsEvmTransactionRequest
    TransactionDetailsEvmTransferRequest:
      properties:
        type:
          const: evm_transfer
          title: Type
          description: The type of the transaction.
        fail_on_prediction_failure:
          type: boolean
          title: Fail On Prediction Failure
          description: >-
            `True` if the request should fail in case simulation failed, `False`
            otherwise.
          default: true
        skip_simulation:
          type: boolean
          title: Skip Simulation
          description: '`True` to perform the action without simulation, `False` otherwise.'
          default: false
        chain:
          description: >-
            The chain that this transaction is on. Specify either the chain ID
            (for example `1` for `ethereum_mainnet`)or the chain name (for
            example, `ethereum_goerli`).
          deprecated: true
          $ref: '#/components/schemas/EvmChainRequest'
        to:
          anyOf:
            - type: string
              maxLength: 42
              minLength: 42
              pattern: ^0[xX][a-fA-F0-9]+$
              example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
            - type: string
              format: uuid
          title: To
          description: 'The recipient of the transfer: either an address or a vault ID.'
        token:
          title: Token
          description: >-
            The ERC-20 token contract to transfer, as a hex string of length 42
            characters.
          deprecated: true
          type: string
          maxLength: 42
          minLength: 42
          pattern: ^0[xX][a-fA-F0-9]+$
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        asset_identifier:
          description: The asset to be transfered.
          $ref: '#/components/schemas/EvmAssetIdentifierRequest'
        value:
          oneOf:
            - $ref: '#/components/schemas/CreateEvmTransferRequestExplicitValue'
            - $ref: '#/components/schemas/CreateEvmTransferRequestMaxValue'
          title: Value
          description: >-
            The number of units of currency to transfer. If you do not specify a
            value for `token`, the assumption is that you are transferring units
            in the native currency of the chain.
          discriminator:
            propertyName: type
            mapping:
              max: '#/components/schemas/CreateEvmTransferRequestMaxValue'
              value: '#/components/schemas/CreateEvmTransferRequestExplicitValue'
      type: object
      required:
        - type
        - to
        - value
      title: TransactionDetailsEvmTransferRequest
    TransactionDetailsEvmTypedMessageRequest:
      properties:
        type:
          const: typed_message_type
          title: Type
          description: The type of the EVM message.
        chain:
          allOf:
            - $ref: '#/components/schemas/EvmChainRequest'
          description: The evm chain this message is intended for.
        raw_data:
          type: string
          title: Raw Data
          description: >-
            The raw data of the message to be signed, provided as a string or
            hex-encoded.
      type: object
      required:
        - type
        - chain
        - raw_data
      title: TransactionDetailsEvmTypedMessageRequest
    TransactionDetailsSolanaMessageRequest:
      properties:
        vault_id:
          type: string
          format: uuid
          title: Vault Id
          description: The unique identifier of the vault.
        type:
          const: solana_message
          title: Type
          description: The type of the transaction.
        details:
          $ref: '#/components/schemas/SolanaPersonalMessageRequest'
      type: object
      required:
        - vault_id
        - type
        - details
      title: TransactionDetailsSolanaMessageRequest
    TransactionDetailsSolanaRawTransactionRequest:
      properties:
        version:
          allOf:
            - $ref: '#/components/schemas/SolanaMessageVersion'
          description: The version of the transaction message.
        instructions:
          items:
            $ref: '#/components/schemas/SolanaCompiledInstructionRequest'
          type: array
          title: Instructions
          description: The instructions of the transaction.
        accounts:
          items:
            $ref: '#/components/schemas/SolanaTransactionAccountRequest'
          type: array
          title: Accounts
          description: Accounts used in the transaction.
        address_table_lookups:
          items:
            $ref: '#/components/schemas/SolanaMessageAddressTableLookupRequest'
          type: array
          title: Address Table Lookups
          description: Lookup tables of accounts used in the transaction.
        signatures:
          title: Signatures
          description: Any partial signatures on the transaction.
          items:
            $ref: '#/components/schemas/SolanaTransactionSignaturesRequest'
          type: array
        recent_blockhash:
          title: Recent Blockhash
          description: The transaction nonce (a recently processed blockhash).
          type: string
          maxLength: 44
          minLength: 32
          pattern: ^[a-km-zA-HJ-NP-Z1-9]+$
          example: 4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZAMdL4VZHirAn
        type:
          const: solana_raw_transaction
          title: Type
          description: The type of the transaction.
        fail_on_prediction_failure:
          type: boolean
          title: Fail On Prediction Failure
          description: >-
            `True` if the request should fail in case simulation failed, `False`
            otherwise.
          default: true
        skip_simulation:
          type: boolean
          title: Skip Simulation
          description: '`True` to perform the action without simulation, `False` otherwise.'
          default: false
        chain:
          $ref: '#/components/schemas/SolanaChainUniqueId'
      type: object
      required:
        - version
        - instructions
        - accounts
        - address_table_lookups
        - type
        - chain
      title: TransactionDetailsSolanaRawTransactionRequest
    TransactionDetailsSolanaTransactionRequest:
      properties:
        vault_id:
          type: string
          format: uuid
          title: Vault Id
          description: The unique identifier of the vault.
        type:
          const: solana_transaction
          title: Type
          description: The type of the transaction.
        details:
          oneOf:
            - $ref: '#/components/schemas/TransactionDetailsSolanaTransferRequest'
            - $ref: >-
                #/components/schemas/TransactionDetailsSolanaRawTransactionRequest
          title: Details
          discriminator:
            propertyName: type
            mapping:
              solana_raw_transaction: >-
                #/components/schemas/TransactionDetailsSolanaRawTransactionRequest
              solana_transfer: '#/components/schemas/TransactionDetailsSolanaTransferRequest'
      type: object
      required:
        - vault_id
        - type
        - details
      title: TransactionDetailsSolanaTransactionRequest
    TransactionDetailsSolanaTransferRequest:
      properties:
        type:
          const: solana_transfer
          title: Type
          description: The type of the transaction.
        fail_on_prediction_failure:
          type: boolean
          title: Fail On Prediction Failure
          description: >-
            `True` if the request should fail in case simulation failed, `False`
            otherwise.
          default: true
        skip_simulation:
          type: boolean
          title: Skip Simulation
          description: '`True` to perform the action without simulation, `False` otherwise.'
          default: false
        to:
          anyOf:
            - type: string
              maxLength: 44
              minLength: 32
              pattern: ^[a-km-zA-HJ-NP-Z1-9]+$
              example: 4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA
            - type: string
              format: uuid
          title: To
          description: 'The recipient of the transfer: either an address or a vault ID.'
        value:
          oneOf:
            - $ref: '#/components/schemas/CreateSolanaTransferRequestExplicitAmount'
            - $ref: '#/components/schemas/CreateSolanaTransferRequestMaxAmount'
          title: Value
          description: The number of units of currency to transfer.
          discriminator:
            propertyName: type
            mapping:
              max: '#/components/schemas/CreateSolanaTransferRequestMaxAmount'
              value: '#/components/schemas/CreateSolanaTransferRequestExplicitAmount'
        asset_identifier:
          allOf:
            - $ref: '#/components/schemas/SolanaAssetIdentifierRequest'
          description: The Solana asset identifier to transfer.
      type: object
      required:
        - type
        - to
        - value
        - asset_identifier
      title: TransactionDetailsSolanaTransferRequest
    TransactionDetailsUtxoTransactionRequest:
      properties:
        vault_id:
          type: string
          format: uuid
          title: Vault Id
          description: The unique identifier of the vault.
        type:
          const: utxo_transaction
          title: Type
          description: The type of the transaction.
        details:
          allOf:
            - $ref: '#/components/schemas/TransactionDetailsUtxoTransferRequest'
          description: Transaction details.
      type: object
      required:
        - vault_id
        - type
        - details
      title: TransactionDetailsUtxoTransactionRequest
    TransactionDetailsUtxoTransferRequest:
      properties:
        type:
          const: utxo_transfer
          title: Type
          description: A UTXO transfer transaction.
        outputs:
          items:
            $ref: '#/components/schemas/UtxoOutputRequest'
          type: array
          title: Outputs
        fee_per_byte:
          oneOf:
            - $ref: '#/components/schemas/FeePriorityRequest'
            - $ref: '#/components/schemas/CustomFeeRequest'
          title: Fee Per Byte
          description: >-
            The fee details of the transaction. The details depend on which
            option you choose:<ul><li>Fee Priority or <li>Custom Fee Request
            </ul>
          discriminator:
            propertyName: type
            mapping:
              custom: '#/components/schemas/CustomFeeRequest'
              priority: '#/components/schemas/FeePriorityRequest'
      type: object
      required:
        - type
        - outputs
        - fee_per_byte
      title: TransactionDetailsUtxoTransferRequest
    TransactionDirection:
      type: string
      enum:
        - outgoing
        - incoming
      title: TransactionDirection
    TransactionPolicyMatchActionType:
      type: string
      enum:
        - allow
        - block
        - require_approval
      title: TransactionPolicyMatchActionType
    TransactionRisk:
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/TransactionRiskType'
          description: >-

            Fordefi has detected that one or more of the following risks are
            associated with the requested transaction:<ul><li>The user is
            transferring tokens to an ERC-20 contract
            (`transfer_to_erc20_contract`).<li>The allowance transaction is
            requesting to approve a non-contract address
            (`allowance_to_eoa`).<li>Allowance has been granted for an unlimited
            amount (`unlimited_allowance`).<li>This bridge transaction sends
            funds to an address that is not the sender's
            (`bridge_dest_differ_from_sender`).<li>This is the first time the
            organization is interacting with this address
            (`organization_not_interacted_with_address`).<li>This is the first
            time this vault is interacting with this address
            (`vault_not_interacted_with_address`).<li>Trying to interact with a
            contract that is not verified (`contract_not_verified`).<li>Approve
            for all NFT in a collection (`nft_approve_for_all`).<li>The
            simulation for this transaction failed
            (`missing_simulation`).<li>The simulation for this transaction is
            unsupported for this chain (`unsupported_simulation`).</ul>
        severity:
          allOf:
            - $ref: '#/components/schemas/TransactionRiskSeverity'
          description: The severity of the risk.
        title:
          type: string
          title: Title
          description: The title of the risk.
        description:
          type: string
          title: Description
          description: A detailed description of the risk.
      type: object
      required:
        - type
        - severity
        - title
        - description
      title: TransactionRisk
    TransactionRiskSeverity:
      type: string
      enum:
        - low
        - medium
        - high
      title: TransactionRiskSeverity
    TransactionRiskType:
      type: string
      enum:
        - transfer_to_erc20_contract
        - organization_not_interacted_with_address
        - vault_not_interacted_with_address
        - allowance_to_eoa
        - unlimited_allowance
        - contract_not_verified
        - bridge_dest_differ_from_sender
        - nft_approve_for_all
        - missing_simulation
        - unsupported_simulation
      title: TransactionRiskType
    TransactionSortableFields:
      type: string
      enum:
        - created_at_asc
        - created_at_desc
        - modified_at_asc
        - modified_at_desc
        - type_asc
        - type_desc
        - chains_asc
        - chains_desc
        - initiators_asc
        - initiators_desc
        - state_asc
        - state_desc
      title: TransactionSortableFields
    TransactionSpamState:
      type: string
      enum:
        - unset
        - manually_set
        - automatically_set
      title: TransactionSpamState
    TransactionState:
      type: string
      enum:
        - pending
        - finalized
        - approved
        - stuck
        - completed
        - completed_reverted
      title: TransactionState
    TransactionSubType:
      type: string
      enum:
        - transfer
        - allowance
        - cross_chain_bridge
        - transaction
        - contract_call
        - message_signature
        - allowance_signature
      title: TransactionSubType
    TransactionType:
      type: string
      enum:
        - black_box_signature
        - cosmos_message
        - cosmos_transaction
        - evm_message
        - evm_transaction
        - solana_message
        - solana_transaction
        - utxo_transaction
      title: TransactionType
    TransferDirection:
      type: string
      enum:
        - outgoing
        - incoming
        - internal
      title: TransferDirection
    TypedCosmosRawTransactionRequest:
      properties:
        type:
          const: cosmos_raw_transaction
          title: Type
          description: A cosmos raw transaction is for any operation.
        chain:
          allOf:
            - $ref: '#/components/schemas/CosmosChainUniqueId'
          description: Chain id on which the transaction will be processed.
        request_data:
          oneOf:
            - $ref: '#/components/schemas/AminoRequestData'
            - $ref: '#/components/schemas/DirectRequestData'
          title: Request Data
          description: Request data.
          discriminator:
            propertyName: format
            mapping:
              amino: '#/components/schemas/AminoRequestData'
              direct: '#/components/schemas/DirectRequestData'
      type: object
      required:
        - type
        - chain
        - request_data
      title: TypedCosmosRawTransactionRequest
    TypedCosmosTransferRequest:
      properties:
        type:
          const: cosmos_transfer
          title: Type
          description: A cosmos raw transaction is for any operation.
        to:
          oneOf:
            - $ref: '#/components/schemas/CosmosTransferToAddressRequest'
            - $ref: '#/components/schemas/CosmosTransferToVaultIdRequest'
          title: To
          description: >-
            The recipient of the transfer. Specify either a general address  or
            the ID of another vault (a UUID string).
          discriminator:
            propertyName: type
            mapping:
              address: '#/components/schemas/CosmosTransferToAddressRequest'
              vault_id: '#/components/schemas/CosmosTransferToVaultIdRequest'
        asset_identifier:
          allOf:
            - $ref: '#/components/schemas/CosmosAssetIdentifierRequest'
          description: The asset to be transferred.
        value:
          oneOf:
            - $ref: '#/components/schemas/CreateCosmosTransferRequestExplicitValue'
            - $ref: '#/components/schemas/CreateCosmosTransferRequestMaxValue'
          title: Value
          description: 'Specify one of the following: <ul><li>`value`<li>`max`</ul>'
          discriminator:
            propertyName: type
            mapping:
              max: '#/components/schemas/CreateCosmosTransferRequestMaxValue'
              value: '#/components/schemas/CreateCosmosTransferRequestExplicitValue'
        memo:
          title: Memo
          description: Transaction memo.
          type: string
      type: object
      required:
        - type
        - to
        - asset_identifier
        - value
      title: TypedCosmosTransferRequest
    UnknownTypedMessageEvmMessage:
      properties:
        domain:
          allOf:
            - $ref: '#/components/schemas/EvmMessageDomainData'
          description: The domain data.
        type:
          const: unknown
          title: Type
          description: The typed message type.
      type: object
      required:
        - domain
        - type
      title: UnknownTypedMessageEvmMessage
    UpdateAssetConfiguration:
      properties:
        asset:
          allOf:
            - $ref: '#/components/schemas/AssetIdentifierRequest'
          description: The address of the ERC-20 asset to update.
        hidden:
          type: boolean
          title: Hidden
          description: '`True` to hide the token when listing assets, `False` otherwise.'
      type: object
      required:
        - asset
        - hidden
      title: UpdateAssetConfiguration
    UpdateTransactionSpamStateRequest:
      properties:
        is_spam:
          type: boolean
          title: Is Spam
      type: object
      required:
        - is_spam
      title: UpdateTransactionSpamStateRequest
    User:
      oneOf:
        - $ref: '#/components/schemas/Person'
        - $ref: '#/components/schemas/ApiUser'
        - $ref: '#/components/schemas/ApiSigner'
      title: User
      description: Represents a user in the Fordefi platform
      discriminator:
        propertyName: user_type
        mapping:
          api_signer: '#/components/schemas/ApiSigner'
          api_user: '#/components/schemas/ApiUser'
          person: '#/components/schemas/Person'
    UserGroup:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        name:
          type: string
          minLength: 1
          title: Name
          description: The name of the user group.
        users_count:
          type: integer
          minimum: 0
          title: Users Count
          description: The number of users in the group.
        state:
          allOf:
            - $ref: '#/components/schemas/UserGroupState'
          description: The state of the user group.
        modified_by:
          allOf:
            - $ref: '#/components/schemas/UserRef'
          description: Group last modifier.
        proposed_change:
          description: The change proposal for the group.
          $ref: '#/components/schemas/UserGroupChangeRequest'
      type: object
      required:
        - id
        - created_at
        - modified_at
        - name
        - users_count
        - state
        - modified_by
      title: UserGroup
      description: Represents a user group in the Fordefi platform
    UserGroupChangeRequest:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The ID of the change proposal.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The time the change proposal was created.
        created_by:
          allOf:
            - $ref: '#/components/schemas/UserRef'
          description: The user who created the change proposal.
        new_name:
          title: New Name
          description: The new name of the group if it is changed.
          type: string
        added_users:
          title: Added Users
          description: The users added to the group.
          items:
            $ref: '#/components/schemas/GroupUserRef'
          type: array
        removed_users:
          title: Removed Users
          description: The users removed from the group.
          items:
            $ref: '#/components/schemas/GroupUserRef'
          type: array
      type: object
      required:
        - id
        - created_at
        - created_by
      title: UserGroupChangeRequest
      description: Represents a user group change proposal in the Fordefi platform
    UserGroupRef:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of user group in the Fordefi platform.
        name:
          type: string
          minLength: 1
          title: Name
          description: The name of the user group.
        users_count:
          type: integer
          minimum: 0
          title: Users Count
          description: The number of users in the group.
        state:
          allOf:
            - $ref: '#/components/schemas/UserGroupState'
          description: The state of the user group.
      type: object
      required:
        - id
        - name
        - users_count
        - state
      title: UserGroupRef
    UserGroupSortableFields:
      type: string
      enum:
        - created_at_asc
        - created_at_desc
        - modified_at_asc
        - modified_at_desc
        - name_asc
        - name_desc
        - users_count_asc
        - users_count_desc
      title: UserGroupSortableFields
    UserGroupState:
      type: string
      enum:
        - active
        - deleted
      title: UserGroupState
      description: Represents a user group state in the Fordefi platform
    UserKeyset:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        name:
          type: string
          minLength: 1
          title: Name
          description: Keyset name.
        desired_key_types:
          title: Desired Key Types
          description: >-
            Desired key types. For an organization type keyset, this field is
            populated with all supported key types during creation. for a user
            type keyset, this field is populated by the user during keyset
            generation.
          items:
            $ref: '#/components/schemas/KeyType'
          type: array
        ecdsa:
          description: >-
            ECDSA key. The key is used to generate ECDSA-based vaults (for
            example, EVM vaults).
          $ref: '#/components/schemas/KeysetKey'
        eddsa:
          description: >-
            EdDSA key. The key is used to generate EdDSA-based vaults (for
            example, Solana vaults).
          $ref: '#/components/schemas/KeysetKey'
        ecdsa_stark:
          description: >-
            ECDSA-Stark key. The key is used to generate ECDSA-Stark-based
            vaults (for example, Stark Blackbox vaults).
          $ref: '#/components/schemas/KeysetKey'
        encrypted_device_shares_backups:
          title: Encrypted Device Shares Backups
          description: Encrypted device shares backups.
          items:
            $ref: '#/components/schemas/EncryptedDeviceSharesBackup'
          type: array
        scope:
          const: user
          title: Scope
          description: User keyset scope.
        user:
          allOf:
            - $ref: '#/components/schemas/EndUserRef'
          description: User that owns the keyset.
        last_backup_at:
          type: string
          format: date-time
          title: Last Backup At
          description: The last time this keyset was backed up.
      type: object
      required:
        - id
        - created_at
        - modified_at
        - name
        - scope
        - user
        - last_backup_at
      title: UserKeyset
      description: Represents a user keyset in the Fordefi platform
    UserRef:
      oneOf:
        - $ref: '#/components/schemas/PersonRef'
        - $ref: '#/components/schemas/ApiUserRef'
        - $ref: '#/components/schemas/ApiSignerRef'
        - $ref: '#/components/schemas/EndUserRef'
      title: UserRef
      description: Represents a reference to a user in the Fordefi platform
      discriminator:
        propertyName: user_type
        mapping:
          api_signer: '#/components/schemas/ApiSignerRef'
          api_user: '#/components/schemas/ApiUserRef'
          end_user: '#/components/schemas/EndUserRef'
          person: '#/components/schemas/PersonRef'
    UserRole:
      type: string
      enum:
        - admin
        - trader
        - viewer
      title: UserRole
    UserSortableFields:
      type: string
      enum:
        - role_asc
        - role_desc
        - email_asc
        - email_desc
        - created_asc
        - created_desc
        - name_asc
        - name_desc
        - last_keep_alive_asc
        - last_keep_alive_desc
        - state_asc
        - state_desc
        - type_asc
        - type_desc
      title: UserSortableFields
    UserState:
      type: string
      enum:
        - active
        - onboarding
        - pending_approval
        - deleted
      title: UserState
    UserStateOnGroup:
      type: string
      enum:
        - active
        - pending_addition
        - pending_removal
      title: UserStateOnGroup
    UserType:
      type: string
      enum:
        - person
        - api_signer
        - api_user
      title: UserType
    UtxoAddress:
      properties:
        address:
          type: string
          maxLength: 74
          minLength: 14
          title: Address
          description: The UTXO string address.
          example: bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq
        address_type:
          allOf:
            - $ref: '#/components/schemas/UtxoAddressType'
          description: The type of the address.
        chain:
          allOf:
            - $ref: '#/components/schemas/UtxoChain'
          description: The UTXO chain unique ID.
      type: object
      required:
        - address
        - address_type
        - chain
      title: UtxoAddress
    UtxoAddressBookContact:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        name:
          type: string
          title: Name
          description: The name of the contact.
        modified_by:
          allOf:
            - $ref: '#/components/schemas/UserRef'
          description: Address last modifier.
        state:
          allOf:
            - $ref: '#/components/schemas/AddressBookContactState'
          description: The state of the contact.
        groups:
          items:
            $ref: '#/components/schemas/GroupRef'
          type: array
          title: Groups
          description: List of contact's groups.
        pending_changes:
          description: Pending changes for the contact.
          $ref: '#/components/schemas/AddressBookContactChanges'
        chain_type:
          const: utxo
          title: Chain Type
          description: The type of the chain.
        address:
          type: string
          maxLength: 74
          minLength: 14
          title: Address
          description: The address on the utxo chain.
          example: bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedUtxoChain'
          description: The chain the contact belongs to.
      type: object
      required:
        - id
        - created_at
        - modified_at
        - name
        - modified_by
        - state
        - groups
        - chain_type
        - address
        - chain
      title: UtxoAddressBookContact
      description: Represents a contact in the Fordefi platform
    UtxoAddressBookContactAddressRef:
      properties:
        chain_type:
          const: utxo
          title: Chain Type
          description: The type of the chain.
        address:
          type: string
          maxLength: 74
          minLength: 14
          title: Address
          description: The address on the utxo chain.
          example: bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq
        chain:
          allOf:
            - $ref: '#/components/schemas/UtxoChain'
          description: The chain the contact belongs to.
      type: object
      required:
        - chain_type
        - address
        - chain
      title: UtxoAddressBookContactAddressRef
    UtxoAddressType:
      type: string
      enum:
        - legacy
        - p2sh
        - segwit
        - taproot
      title: UtxoAddressType
    UtxoAsset:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The asset ID.
        decimals:
          type: integer
          minimum: 0
          title: Decimals
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
        name:
          type: string
          title: Name
          description: The name of the asset.
        symbol:
          type: string
          title: Symbol
          description: The symbol (ticker) of the asset.
        hidden:
          type: boolean
          title: Hidden
          description: '`True` if this asset was set to be hidden, `False` otherwise.'
        verified:
          type: boolean
          title: Verified
          description: '`True` if this asset is verified by Fordefi, `False` otherwise.'
        asset_identifier:
          allOf:
            - $ref: '#/components/schemas/EnrichedAssetIdentifier'
          description: The asset identifier.
        metadata_uri:
          title: Metadata Uri
          description: The URI of the asset metadata.
          type: string
        type:
          const: utxo_asset
          title: Type
          description: Utxo asset type.
          deprecated: true
        details:
          allOf:
            - $ref: '#/components/schemas/UtxoNativeAsset'
          deprecated: true
      type: object
      required:
        - id
        - decimals
        - name
        - symbol
        - hidden
        - verified
        - asset_identifier
        - type
        - details
      title: UtxoAsset
    UtxoAssetIdentifierRequest:
      properties:
        type:
          const: utxo
          title: Type
          description: Utxo asset identifier type.
        details:
          $ref: '#/components/schemas/UtxoNativeAssetIdentifierRequest'
      type: object
      required:
        - type
        - details
      title: UtxoAssetIdentifierRequest
    UtxoBalanceChangeEffect:
      properties:
        type:
          const: native
          title: Type
          description: The type of the balance change.
        vault:
          allOf:
            - $ref: '#/components/schemas/VaultRef'
          description: The vault affected by the balance change.
        diff:
          type: string
          pattern: ^-?\d+$
          title: Diff
          description: >-
            The amount of native currency that was added or deducted from the
            owner's balance. If the amount was deducted, the value is negative;
            if the amount was added, the value is positive.
          example: '1000000000000000000'
      type: object
      required:
        - type
        - vault
        - diff
      title: UtxoBalanceChangeEffect
    UtxoBlockData:
      properties:
        number:
          type: integer
          title: Number
          description: The block number.
        hash:
          type: string
          title: Hash
          description: The block hash.
        mined_at:
          type: string
          format: date-time
          title: Mined At
          description: The date and time when this block was mined.
      type: object
      required:
        - number
        - hash
        - mined_at
      title: UtxoBlockData
    UtxoChain:
      properties:
        chain_type:
          const: utxo
          title: Chain Type
          description: The type of the chain.
        unique_id:
          allOf:
            - $ref: '#/components/schemas/UtxoChainUniqueId'
          description: The UTXO chain unique ID.
      type: object
      required:
        - chain_type
        - unique_id
      title: UtxoChain
    UtxoChainUniqueId:
      type: string
      enum:
        - bitcoin_mainnet
        - bitcoin_testnet
      title: UtxoChainUniqueId
    UtxoEffects:
      properties:
        inputs:
          items:
            $ref: '#/components/schemas/UtxoInput'
          type: array
          title: Inputs
          description: The inputs of the transaction.
        outputs:
          items:
            $ref: '#/components/schemas/UtxoOutput'
          type: array
          title: Outputs
          description: The outputs of the transaction.
        balance_changes:
          items:
            $ref: '#/components/schemas/UtxoBalanceChangeEffect'
          type: array
          title: Balance Changes
          description: The aggregated balance changes of vaults.
        total_value:
          type: string
          pattern: ^0*[1-9]\d*$
          title: Total Value
          description: The total value of the transaction.
          example: '1000000000000000000'
        price:
          description: The price of the asset.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - inputs
        - outputs
        - balance_changes
        - total_value
      title: UtxoEffects
    UtxoFees:
      properties:
        priority:
          allOf:
            - $ref: '#/components/schemas/FeePriorityLevel'
          description: The priority level.
        fee_per_byte:
          type: string
          pattern: ^0*[1-9]\d*$
          title: Fee Per Byte
          description: The fee per byte.
          example: '1000000000000000000'
        total_fee:
          type: string
          pattern: ^0*[1-9]\d*$
          title: Total Fee
          description: The total fee paid.
          example: '1000000000000000000'
        fiat_price:
          description: The price of the asset used to pay the fee.
          $ref: '#/components/schemas/Price'
      type: object
      required:
        - priority
        - fee_per_byte
        - total_fee
      title: UtxoFees
    UtxoInput:
      properties:
        address:
          allOf:
            - $ref: '#/components/schemas/EnrichedUtxoAddress'
          description: The address of the input.
        value:
          type: string
          pattern: ^\d+$
          title: Value
          description: The value of the input.
          example: '1000000000000000000'
      type: object
      required:
        - address
        - value
      title: UtxoInput
    UtxoNativeAsset:
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedUtxoChain'
          description: The details of the chain of the native asset.
        type:
          const: utxo_native_asset
          title: Type
          description: Utxo asset type.
      type: object
      required:
        - chain
        - type
      title: UtxoNativeAsset
    UtxoNativeAssetIdentifierRequest:
      properties:
        type:
          const: native
          title: Type
          description: Utxo asset identifier type.
        chain:
          allOf:
            - $ref: '#/components/schemas/UtxoChainUniqueId'
          description: The unique id of the chain of the asset.
      type: object
      required:
        - type
        - chain
      title: UtxoNativeAssetIdentifierRequest
    UtxoNativeTransferDetails:
      properties:
        type:
          const: native_transfer
          title: Type
          description: >-
            A transaction involving the transfer of native currency from one or
            moreaddresses to one or more addresses.
        direction:
          allOf:
            - $ref: '#/components/schemas/TransferDirection'
          description: The direction of the movement of funds, in case of a transfer.
          deprecated: true
        is_internal:
          title: Is Internal
          description: >-
            Is this transfer an internal transfer between two vaults. None if
            the transaction is incoming.
          type: boolean
      type: object
      required:
        - type
        - direction
      title: UtxoNativeTransferDetails
    UtxoOutput:
      properties:
        address:
          allOf:
            - $ref: '#/components/schemas/EnrichedUtxoAddress'
          description: The address of the output.
        value:
          type: string
          pattern: ^\d+$
          title: Value
          description: The value of the output.
          example: '1000000000000000000'
        is_change_address:
          title: Is Change Address
          description: Whether the output is a change address.
          type: boolean
      type: object
      required:
        - address
        - value
      title: UtxoOutput
    UtxoOutputRequest:
      properties:
        to:
          oneOf:
            - $ref: '#/components/schemas/UtxoOutputToAddressRequest'
            - $ref: '#/components/schemas/UtxoOutputToVaultAddressIdRequest'
            - $ref: '#/components/schemas/UtxoOutputToVaultIdRequest'
          title: To
          discriminator:
            propertyName: type
            mapping:
              address: '#/components/schemas/UtxoOutputToAddressRequest'
              vault_address_id: '#/components/schemas/UtxoOutputToVaultAddressIdRequest'
              vault_id: '#/components/schemas/UtxoOutputToVaultIdRequest'
        value:
          type: string
          pattern: ^0*[1-9]\d*$
          title: Value
          example: '1000000000000000000'
      type: object
      required:
        - to
        - value
      title: UtxoOutputRequest
    UtxoOutputToAddressRequest:
      properties:
        type:
          const: address
          title: Type
        address:
          type: string
          maxLength: 74
          minLength: 14
          title: Address
          example: bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq
      type: object
      required:
        - type
        - address
      title: UtxoOutputToAddressRequest
    UtxoOutputToVaultAddressIdRequest:
      properties:
        type:
          const: vault_address_id
          title: Type
        vault_address_id:
          type: string
          format: uuid
          title: Vault Address Id
      type: object
      required:
        - type
        - vault_address_id
      title: UtxoOutputToVaultAddressIdRequest
    UtxoOutputToVaultIdRequest:
      properties:
        type:
          const: vault_id
          title: Type
        vault_id:
          type: string
          format: uuid
          title: Vault Id
      type: object
      required:
        - type
        - vault_id
      title: UtxoOutputToVaultIdRequest
    UtxoSuggestedFees:
      properties:
        type:
          const: utxo
          title: Type
          description: The type of the chain.
        low:
          type: string
          pattern: ^\d+$
          title: Low
          description: The low suggested fee per byte.
          example: '1000000000000000000'
        medium:
          type: string
          pattern: ^\d+$
          title: Medium
          description: The medium suggested fee per byte.
          example: '1000000000000000000'
        high:
          type: string
          pattern: ^\d+$
          title: High
          description: The high suggested fee per byte.
          example: '1000000000000000000'
        chain_unique_id:
          allOf:
            - $ref: '#/components/schemas/UtxoChainUniqueId'
          description: The UTXO chain unique id.
      type: object
      required:
        - type
        - low
        - medium
        - high
        - chain_unique_id
      title: UtxoSuggestedFees
    UtxoTransaction:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        managed_transaction_data:
          description: >-
            Managed transaction data. Presented if the transaction was initiated
            from the Fordefi system itself, in contrast to unmanaged
            transactions (which are, for example, transfers of funds into a
            vault visible to Fordefi). 
          $ref: '#/components/schemas/ManagedTransactionData'
        signatures:
          items:
            $ref: '#/components/schemas/Signature'
          type: array
          title: Signatures
          description: The transaction signatures.
        note:
          title: Note
          description: An optional transaction note.
          type: string
        spam_state:
          allOf:
            - $ref: '#/components/schemas/TransactionSpamState'
          description: >-
            `automatically_set` if the transaction was automatically set as spam
            by Fordefi, `manually_set` if the transaction was manually set as
            spam by a user, and `unset` if the transaction was not set as spam.
          default: unset
        direction:
          allOf:
            - $ref: '#/components/schemas/TransactionDirection'
          description: The direction of the transaction.
        type:
          const: utxo_transaction
          title: Type
          description: The type of the transaction.
        utxo_transaction_type_details:
          allOf:
            - $ref: '#/components/schemas/UtxoNativeTransferDetails'
          description: Details of UTXO transaction, based on its type.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedUtxoChain'
          description: Details of the chain this transaction is on.
        hash:
          title: Hash
          description: The hash of the transaction.
          type: string
        explorer_url:
          title: Explorer Url
          description: The URL of this transaction in a blockchain explorer.
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
        state:
          allOf:
            - $ref: '#/components/schemas/UtxoTransactionState'
          description: The state of the transaction.
        state_changes:
          items:
            $ref: '#/components/schemas/UtxoTransactionStateChange'
          type: array
          title: State Changes
          description: The state changes of the transaction.
        block:
          description: Details of the block the transaction was mined in.
          $ref: '#/components/schemas/UtxoBlockData'
        expected_result:
          description: The expected result of the transaction in case it is mined.
          $ref: '#/components/schemas/UtxoTransactionResult'
        mined_result:
          description: The result of the transaction after it was mined.
          $ref: '#/components/schemas/UtxoTransactionResult'
      type: object
      required:
        - id
        - created_at
        - modified_at
        - signatures
        - direction
        - type
        - utxo_transaction_type_details
        - chain
        - state
        - state_changes
      title: UtxoTransaction
    UtxoTransactionResult:
      properties:
        fees:
          allOf:
            - $ref: '#/components/schemas/UtxoFees'
          description: The fees of the transaction.
        effects:
          allOf:
            - $ref: '#/components/schemas/UtxoEffects'
          description: The effects of the transaction.
      type: object
      required:
        - fees
        - effects
      title: UtxoTransactionResult
    UtxoTransactionState:
      type: string
      enum:
        - waiting_for_approval
        - approved
        - signed
        - pushed_to_blockchain
        - mined
        - completed
        - aborted
        - error_signing
        - error_pushing_to_blockchain
        - stuck
        - insufficient_funds
      title: UtxoTransactionState
    UtxoTransactionStateChange:
      properties:
        changed_at:
          type: string
          format: date-time
          title: Changed At
          description: The date and time when the state was changed.
        previous_state:
          description: The previous state of the transaction.
          $ref: '#/components/schemas/UtxoTransactionState'
        new_state:
          allOf:
            - $ref: '#/components/schemas/UtxoTransactionState'
          description: The new state of the transaction.
        asset_prices:
          items:
            $ref: '#/components/schemas/PricedAsset'
          type: array
          title: Asset Prices
          description: The prices at the time the state was changed.
      type: object
      required:
        - changed_at
        - new_state
        - asset_prices
      title: UtxoTransactionStateChange
    UtxoTransactionType:
      type: string
      const: native_transfer
      title: UtxoTransactionType
    UtxoVault:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        name:
          type: string
          title: Name
          description: The name of the vault.
        created_by:
          allOf:
            - $ref: '#/components/schemas/UserRef'
          description: Details of the vault creator.
        derivation_path:
          type: string
          title: Derivation Path
          description: The BIP 44 derivation path of the vault.
          deprecated: true
          example: m/44/60/0/0/0
        public_key_compressed:
          type: string
          title: Public Key Compressed
          description: >-
            The compressed public key of the vault. As defined in the SEC1
            standard: https://www.secg.org/SEC1-Ver-1.0.pdf.
          example: SGVsbG8=
        derivation_info:
          allOf:
            - $ref: '#/components/schemas/VaultDerivationInfo'
          description: The derivation info of the vault.
        keyset:
          allOf:
            - $ref: '#/components/schemas/KeysetRef'
          description: The keyset of the vault.
        key_holder:
          description: >-
            The user who owns the keyset of the vault. If not provided, the
            vault is owned by the organization.
          $ref: '#/components/schemas/EndUserRef'
        vault_group:
          allOf:
            - $ref: '#/components/schemas/VaultGroupRef'
          description: The vault group this vault belongs to.
        pending_vault_group_action:
          title: Pending Vault Group Action
          description: Details of pending vault movement to another vault group.
          oneOf:
            - $ref: '#/components/schemas/PendingVaultGroupActionAdd'
            - $ref: '#/components/schemas/PendingVaultGroupActionRemove'
          discriminator:
            propertyName: type
            mapping:
              add: '#/components/schemas/PendingVaultGroupActionAdd'
              remove: '#/components/schemas/PendingVaultGroupActionRemove'
        state:
          allOf:
            - $ref: '#/components/schemas/VaultState'
          description: State of the vault.
        type:
          const: utxo
          title: Type
          description: UTXO vault type.
        chain:
          allOf:
            - $ref: '#/components/schemas/EnrichedUtxoChain'
          description: The UTXO chain.
        default_address:
          allOf:
            - $ref: '#/components/schemas/UtxoVaultAddress'
          description: The default address of the vault on the chain.
        default_next_address_name:
          type: string
          title: Default Next Address Name
          description: The default name of the next address to be created.
      type: object
      required:
        - id
        - created_at
        - modified_at
        - name
        - created_by
        - derivation_path
        - public_key_compressed
        - derivation_info
        - keyset
        - vault_group
        - state
        - type
        - chain
        - default_address
        - default_next_address_name
      title: UtxoVault
      description: Represents a Utxo vault in the Fordefi platform
    UtxoVaultAddress:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        vault:
          allOf:
            - $ref: '#/components/schemas/VaultRef'
          description: The vault this address belongs to.
        name:
          type: string
          title: Name
          description: The name of the address.
        balance:
          title: Balance
          description: The balance of the address.
          deprecated: true
          type: string
          pattern: ^\d+$
          example: '1000000000000000000'
        balances:
          allOf:
            - $ref: '#/components/schemas/Balances'
          description: The balances of the address.
        public_key_compressed:
          type: string
          title: Public Key Compressed
          description: >-
            The compressed public key of the address. As defined in the SEC1
            standard: https://www.secg.org/SEC1-Ver-1.0.pdf.
          example: SGVsbG8=
        type:
          const: utxo
          title: Type
          description: The type of the vault address.
        address:
          allOf:
            - $ref: '#/components/schemas/UtxoAddress'
          description: The address on the chain.
      type: object
      required:
        - id
        - created_at
        - modified_at
        - vault
        - name
        - balances
        - public_key_compressed
        - type
        - address
      title: UtxoVaultAddress
    ValidationError:
      properties:
        title:
          type: string
          title: Title
          description: Human-readable error message.
        detail:
          items:
            $ref: '#/components/schemas/ValidationErrorDetail'
          type: array
          title: Detail
        request_id:
          title: Request Id
          description: Request ID - for debugging purposes.
          type: string
      type: object
      required:
        - title
        - detail
      title: ValidationError
    ValidationErrorDetail:
      properties:
        loc:
          items:
            anyOf:
              - type: integer
              - type: string
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationErrorDetail
    Vault:
      oneOf:
        - $ref: '#/components/schemas/BlackBoxVault'
        - $ref: '#/components/schemas/CosmosVault'
        - $ref: '#/components/schemas/EvmVault'
        - $ref: '#/components/schemas/SolanaVault'
        - $ref: '#/components/schemas/UtxoVault'
      title: Vault
      description: Represents a vault in the Fordefi platform
      discriminator:
        propertyName: type
        mapping:
          black_box: '#/components/schemas/BlackBoxVault'
          cosmos: '#/components/schemas/CosmosVault'
          evm: '#/components/schemas/EvmVault'
          solana: '#/components/schemas/SolanaVault'
          utxo: '#/components/schemas/UtxoVault'
    VaultAddressRef:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the vault address in the Fordefi platform.
        vault_id:
          type: string
          format: uuid
          title: Vault Id
          description: The unique identifier of the vault this address belongs to.
        name:
          type: string
          title: Name
          description: The name of the vault address.
        address:
          type: string
          title: Address
          description: The address of the vault address.
      type: object
      required:
        - id
        - vault_id
        - name
        - address
      title: VaultAddressRef
      description: Represents a reference to a vault address in the Fordefi platform
    VaultAddressSortableFields:
      type: string
      enum:
        - created_at_asc
        - created_at_desc
        - name_asc
        - name_desc
      title: VaultAddressSortableFields
    VaultDerivationInfo:
      properties:
        derivation_path:
          type: string
          pattern: ^m/44/[0-9]+/[0-9]+/[0-9]+/[0-9]+$
          title: Derivation Path
          description: The BIP 44 derivation path of the vault.
          example: m/44/60/0/0/0
        master_public_key:
          allOf:
            - $ref: '#/components/schemas/MasterPublicKey'
          description: The public key of the vault.
      type: object
      required:
        - derivation_path
        - master_public_key
      title: VaultDerivationInfo
    VaultGroup:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the object in the Fordefi platform.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when the object was created.
        modified_at:
          type: string
          format: date-time
          title: Modified At
          description: >-
            The date and time when the object was last modified. Any change to
            any field of the resource is considered a modification.
        name:
          type: string
          minLength: 2
          title: Name
          description: The name of the vault group.
        created_by:
          description: Details of the vault group creator. None for Default vault group.
          $ref: '#/components/schemas/UserRef'
        vault_count:
          type: integer
          title: Vault Count
          description: The number of vaults in the group.
        permissions:
          allOf:
            - $ref: '#/components/schemas/VaultGroupPermissions'
          description: The permissions of the vault group
        owner:
          allOf:
            - $ref: '#/components/schemas/VaultGroupOwner'
          description: The owner type of the vault group.
        modified_by:
          description: >-
            Details of the vault group last editor. None for Default vault
            group.
          $ref: '#/components/schemas/UserRef'
        pending_change_request:
          description: >-
            Info on pending change request. None if there is no pending change
            request.
          $ref: '#/components/schemas/VaultGroupPendingChangeRequestInfo'
        state:
          allOf:
            - $ref: '#/components/schemas/VaultGroupState'
          description: The state of the vault group.
      type: object
      required:
        - id
        - created_at
        - modified_at
        - name
        - vault_count
        - permissions
        - owner
        - state
      title: VaultGroup
      description: Represents a vault group in the Fordefi platform
    VaultGroupAccessPermissions:
      oneOf:
        - $ref: '#/components/schemas/VaultGroupAccessPermissionsAll'
        - $ref: '#/components/schemas/VaultGroupAccessPermissionsPermitted'
      title: VaultGroupAccessPermissions
      description: The access type of the permissions.
      discriminator:
        propertyName: access_type
        mapping:
          all: '#/components/schemas/VaultGroupAccessPermissionsAll'
          permitted: '#/components/schemas/VaultGroupAccessPermissionsPermitted'
    VaultGroupAccessPermissionsAll:
      properties:
        access_type:
          const: all
          title: Access Type
          description: access type
      type: object
      required:
        - access_type
      title: VaultGroupAccessPermissionsAll
    VaultGroupAccessPermissionsPermitted:
      properties:
        access_type:
          const: permitted
          title: Access Type
          description: access type
        user_groups:
          items:
            $ref: '#/components/schemas/UserGroupRef'
          type: array
          title: User Groups
          description: The list of permitted user group
        users:
          items:
            $ref: '#/components/schemas/UserRef'
          type: array
          title: Users
          description: The list of permitted users
      type: object
      required:
        - access_type
        - user_groups
        - users
      title: VaultGroupAccessPermissionsPermitted
    VaultGroupOwner:
      type: string
      enum:
        - system
        - user
      title: VaultGroupOwner
    VaultGroupPendingChangeRequestInfo:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: ID of a pending change request.
        new_name:
          title: New Name
          description: >-
            New proposed name of the pending change request. None if there is no
            pending change request or no new name is proposed.
          type: string
        created_by:
          allOf:
            - $ref: '#/components/schemas/UserRef'
          description: The user who initiated the change request
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The date and time when change request was initiated.
      type: object
      required:
        - id
        - new_name
        - created_by
        - created_at
      title: VaultGroupPendingChangeRequestInfo
    VaultGroupPermissions:
      properties:
        access_permissions:
          allOf:
            - $ref: '#/components/schemas/VaultGroupAccessPermissions'
          description: the access permissions for this vault group
        can_non_admins_create_or_edit_vaults:
          type: boolean
          title: Can Non Admins Create Or Edit Vaults
          description: >-
            True to give create or edit permissions to the user groups. False to
            allow only admins
        can_current_user_create_or_edit_vaults:
          type: boolean
          title: Can Current User Create Or Edit Vaults
          description: >-
            Can the current user create or edit vaults in the group's based on
            the group permissions
      type: object
      required:
        - access_permissions
        - can_non_admins_create_or_edit_vaults
        - can_current_user_create_or_edit_vaults
      title: VaultGroupPermissions
    VaultGroupRef:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the vault group in the Fordefi platform.
        name:
          type: string
          title: Name
          description: The name of the vault group.
        vault_count:
          type: integer
          title: Vault Count
          description: The number of vaults in the group.
        can_current_user_create_or_edit_vaults:
          type: boolean
          title: Can Current User Create Or Edit Vaults
          description: >-
            Can the current user create or edit vaults in the group's based on
            the group permissions
      type: object
      required:
        - id
        - name
        - vault_count
        - can_current_user_create_or_edit_vaults
      title: VaultGroupRef
      description: Represents a reference to a vault group in the Fordefi platform
    VaultGroupSortableFields:
      type: string
      enum:
        - created_at_asc
        - created_at_desc
        - name_asc
        - name_desc
        - vault_count_asc
        - vault_count_desc
      title: VaultGroupSortableFields
    VaultGroupState:
      type: string
      enum:
        - pending_approval
        - active
      title: VaultGroupState
    VaultRef:
      properties:
        id:
          type: string
          format: uuid
          title: Id
          description: The unique identifier of the vault in the Fordefi platform.
        name:
          type: string
          title: Name
          description: The name of the vault.
        address:
          title: Address
          description: The address of the vault.
          type: string
        state:
          allOf:
            - $ref: '#/components/schemas/VaultState'
          description: State of the vault.
        end_user:
          description: >-
            The end user that owns this vault if it is in a Consumer Wallet
            organization. `None` otherwise.
          $ref: '#/components/schemas/EndUserRef'
      type: object
      required:
        - id
        - name
        - state
      title: VaultRef
      description: Represents a reference to a vault in the Fordefi platform
    VaultSortableFields:
      type: string
      enum:
        - created_at_asc
        - created_at_desc
        - name_asc
        - name_desc
        - vault_type_asc
        - vault_type_desc
      title: VaultSortableFields
    VaultState:
      type: string
      enum:
        - active
        - archived
      title: VaultState
    VaultType:
      type: string
      enum:
        - evm
        - solana
        - black_box
        - cosmos
        - utxo
      title: VaultType
    WebhookBlackBoxSignatureStatusChangeEvent:
      properties:
        transaction_id:
          type: string
          format: uuid
          title: Transaction Id
          description: The unique identifier of the object in the Fordefi platform.
        is_managed_transaction:
          type: boolean
          title: Is Managed Transaction
          description: >-
            Indicates whether the transaction was initiated from the Fordefi
            system itself, in contrast to unmanaged transactions (which are, for
            example, transfers of funds into a vault visible to Fordefi).
          deprecated: true
        direction:
          allOf:
            - $ref: '#/components/schemas/TransactionDirection'
          description: >-
            Indicates whether the transaction was initiated from the Fordefi
            system itself, in contrast to incoming transactions (which are, for
            example, transfers of funds into a vault visible to Fordefi).
        note:
          title: Note
          description: An optional transaction note.
          type: string
        spam_state:
          allOf:
            - $ref: '#/components/schemas/TransactionSpamState'
          description: >-
            `automatically_set` if the transaction was automatically set as spam
            by Fordefi, `manually_set` if the transaction was manually set as
            spam by a user, and `unset` if the transaction was not set as spam.
        type:
          const: black_box_signature
          title: Type
          description: The type of the transaction.
        state:
          allOf:
            - $ref: '#/components/schemas/BlackBoxSignatureState'
          description: The current state of the message.
      type: object
      required:
        - transaction_id
        - is_managed_transaction
        - direction
        - spam_state
        - type
        - state
      title: WebhookBlackBoxSignatureStatusChangeEvent
    WebhookCosmosMessageStatusChangeEvent:
      properties:
        transaction_id:
          type: string
          format: uuid
          title: Transaction Id
          description: The unique identifier of the object in the Fordefi platform.
        is_managed_transaction:
          type: boolean
          title: Is Managed Transaction
          description: >-
            Indicates whether the transaction was initiated from the Fordefi
            system itself, in contrast to unmanaged transactions (which are, for
            example, transfers of funds into a vault visible to Fordefi).
          deprecated: true
        direction:
          allOf:
            - $ref: '#/components/schemas/TransactionDirection'
          description: >-
            Indicates whether the transaction was initiated from the Fordefi
            system itself, in contrast to incoming transactions (which are, for
            example, transfers of funds into a vault visible to Fordefi).
        note:
          title: Note
          description: An optional transaction note.
          type: string
        spam_state:
          allOf:
            - $ref: '#/components/schemas/TransactionSpamState'
          description: >-
            `automatically_set` if the transaction was automatically set as spam
            by Fordefi, `manually_set` if the transaction was manually set as
            spam by a user, and `unset` if the transaction was not set as spam.
        type:
          const: cosmos_message
          title: Type
          description: The type of the transaction.
        cosmos_message_type:
          allOf:
            - $ref: '#/components/schemas/CosmosMessageType'
          description: The type of the Cosmos message.
        state:
          allOf:
            - $ref: '#/components/schemas/CosmosMessageState'
          description: The current state of the message.
        chain:
          allOf:
            - $ref: '#/components/schemas/CosmosChain'
          description: The chain type this transaction is on.
      type: object
      required:
        - transaction_id
        - is_managed_transaction
        - direction
        - spam_state
        - type
        - cosmos_message_type
        - state
        - chain
      title: WebhookCosmosMessageStatusChangeEvent
    WebhookCosmosTransactionStatusChangeEvent:
      properties:
        transaction_id:
          type: string
          format: uuid
          title: Transaction Id
          description: The unique identifier of the object in the Fordefi platform.
        is_managed_transaction:
          type: boolean
          title: Is Managed Transaction
          description: >-
            Indicates whether the transaction was initiated from the Fordefi
            system itself, in contrast to unmanaged transactions (which are, for
            example, transfers of funds into a vault visible to Fordefi).
          deprecated: true
        direction:
          allOf:
            - $ref: '#/components/schemas/TransactionDirection'
          description: >-
            Indicates whether the transaction was initiated from the Fordefi
            system itself, in contrast to incoming transactions (which are, for
            example, transfers of funds into a vault visible to Fordefi).
        note:
          title: Note
          description: An optional transaction note.
          type: string
        spam_state:
          allOf:
            - $ref: '#/components/schemas/TransactionSpamState'
          description: >-
            `automatically_set` if the transaction was automatically set as spam
            by Fordefi, `manually_set` if the transaction was manually set as
            spam by a user, and `unset` if the transaction was not set as spam.
        type:
          const: cosmos_transaction
          title: Type
          description: The type of the transaction.
        cosmos_transaction_type:
          allOf:
            - $ref: '#/components/schemas/CosmosTransactionType'
          description: The type of the Cosmos transaction.
        state:
          allOf:
            - $ref: '#/components/schemas/CosmosTransactionState'
          description: The current state of the transaction.
        hash:
          title: Hash
          description: The hash of the transaction.
          type: string
          maxLength: 64
          minLength: 64
          pattern: ^[a-fA-F0-9]+$
          example: 12BE33E7F1B6CA644CC006FB8CBD0C4C7C95B1072DA90E9F4C39CB837072BBF5
        chain:
          allOf:
            - $ref: '#/components/schemas/CosmosChain'
          description: The chain id this transaction is on.
      type: object
      required:
        - transaction_id
        - is_managed_transaction
        - direction
        - spam_state
        - type
        - cosmos_transaction_type
        - state
        - chain
      title: WebhookCosmosTransactionStatusChangeEvent
    WebhookEvent:
      allOf:
        - $ref: '#/components/schemas/WebhookTransactionStatusChangeEvent'
      title: WebhookEvent
    WebhookEvmMessageStatusChangeEvent:
      properties:
        transaction_id:
          type: string
          format: uuid
          title: Transaction Id
          description: The unique identifier of the object in the Fordefi platform.
        is_managed_transaction:
          type: boolean
          title: Is Managed Transaction
          description: >-
            Indicates whether the transaction was initiated from the Fordefi
            system itself, in contrast to unmanaged transactions (which are, for
            example, transfers of funds into a vault visible to Fordefi).
          deprecated: true
        direction:
          allOf:
            - $ref: '#/components/schemas/TransactionDirection'
          description: >-
            Indicates whether the transaction was initiated from the Fordefi
            system itself, in contrast to incoming transactions (which are, for
            example, transfers of funds into a vault visible to Fordefi).
        note:
          title: Note
          description: An optional transaction note.
          type: string
        spam_state:
          allOf:
            - $ref: '#/components/schemas/TransactionSpamState'
          description: >-
            `automatically_set` if the transaction was automatically set as spam
            by Fordefi, `manually_set` if the transaction was manually set as
            spam by a user, and `unset` if the transaction was not set as spam.
        type:
          const: evm_message
          title: Type
          description: The type of the transaction.
        evm_message_type:
          allOf:
            - $ref: '#/components/schemas/EvmMessageType'
          description: The type of the EVM message.
        state:
          allOf:
            - $ref: '#/components/schemas/EvmMessageState'
          description: The current state of the message.
        chain:
          allOf:
            - $ref: '#/components/schemas/EvmChain'
          description: The details of the chain that this message is on.
      type: object
      required:
        - transaction_id
        - is_managed_transaction
        - direction
        - spam_state
        - type
        - evm_message_type
        - state
        - chain
      title: WebhookEvmMessageStatusChangeEvent
    WebhookEvmTransactionStatusChangeEvent:
      properties:
        transaction_id:
          type: string
          format: uuid
          title: Transaction Id
          description: The unique identifier of the object in the Fordefi platform.
        is_managed_transaction:
          type: boolean
          title: Is Managed Transaction
          description: >-
            Indicates whether the transaction was initiated from the Fordefi
            system itself, in contrast to unmanaged transactions (which are, for
            example, transfers of funds into a vault visible to Fordefi).
          deprecated: true
        direction:
          allOf:
            - $ref: '#/components/schemas/TransactionDirection'
          description: >-
            Indicates whether the transaction was initiated from the Fordefi
            system itself, in contrast to incoming transactions (which are, for
            example, transfers of funds into a vault visible to Fordefi).
        note:
          title: Note
          description: An optional transaction note.
          type: string
        spam_state:
          allOf:
            - $ref: '#/components/schemas/TransactionSpamState'
          description: >-
            `automatically_set` if the transaction was automatically set as spam
            by Fordefi, `manually_set` if the transaction was manually set as
            spam by a user, and `unset` if the transaction was not set as spam.
        type:
          const: evm_transaction
          title: Type
          description: The type of the transaction.
        evm_transaction_type:
          allOf:
            - $ref: '#/components/schemas/EvmTransactionType'
          description: The type of the EVM transaction.
        state:
          allOf:
            - $ref: '#/components/schemas/EvmTransactionState'
          description: The current state of the transaction.
        hash:
          title: Hash
          description: The hash of the transaction.
          type: string
          maxLength: 66
          minLength: 66
          pattern: ^0[xX][a-fA-F0-9]+$
          example: '0x780f21260f89d610f24eed21b34d29229611a37e0003e83dd0da91981d7131ae'
        raw_transaction:
          title: Raw Transaction
          description: The raw transaction data, encoded as a hex string.
          type: string
          pattern: ^0[xX][a-fA-F0-9]+$
        chain:
          allOf:
            - $ref: '#/components/schemas/EvmChain'
          description: The details of the chain this transaction is on
      type: object
      required:
        - transaction_id
        - is_managed_transaction
        - direction
        - spam_state
        - type
        - evm_transaction_type
        - state
        - chain
      title: WebhookEvmTransactionStatusChangeEvent
    WebhookSolanaMessageStatusChangeEvent:
      properties:
        transaction_id:
          type: string
          format: uuid
          title: Transaction Id
          description: The unique identifier of the object in the Fordefi platform.
        is_managed_transaction:
          type: boolean
          title: Is Managed Transaction
          description: >-
            Indicates whether the transaction was initiated from the Fordefi
            system itself, in contrast to unmanaged transactions (which are, for
            example, transfers of funds into a vault visible to Fordefi).
          deprecated: true
        direction:
          allOf:
            - $ref: '#/components/schemas/TransactionDirection'
          description: >-
            Indicates whether the transaction was initiated from the Fordefi
            system itself, in contrast to incoming transactions (which are, for
            example, transfers of funds into a vault visible to Fordefi).
        note:
          title: Note
          description: An optional transaction note.
          type: string
        spam_state:
          allOf:
            - $ref: '#/components/schemas/TransactionSpamState'
          description: >-
            `automatically_set` if the transaction was automatically set as spam
            by Fordefi, `manually_set` if the transaction was manually set as
            spam by a user, and `unset` if the transaction was not set as spam.
        type:
          const: solana_message
          title: Type
          description: The type of the transaction.
        solana_message_type:
          allOf:
            - $ref: '#/components/schemas/SolanaMessageType'
          description: The type of the Solana message.
        state:
          allOf:
            - $ref: '#/components/schemas/SolanaMessageState'
          description: The current state of the message.
        chain:
          allOf:
            - $ref: '#/components/schemas/SolanaChain'
          description: The chain type this transaction is on.
      type: object
      required:
        - transaction_id
        - is_managed_transaction
        - direction
        - spam_state
        - type
        - solana_message_type
        - state
        - chain
      title: WebhookSolanaMessageStatusChangeEvent
    WebhookSolanaTransactionStatusChangeEvent:
      properties:
        transaction_id:
          type: string
          format: uuid
          title: Transaction Id
          description: The unique identifier of the object in the Fordefi platform.
        is_managed_transaction:
          type: boolean
          title: Is Managed Transaction
          description: >-
            Indicates whether the transaction was initiated from the Fordefi
            system itself, in contrast to unmanaged transactions (which are, for
            example, transfers of funds into a vault visible to Fordefi).
          deprecated: true
        direction:
          allOf:
            - $ref: '#/components/schemas/TransactionDirection'
          description: >-
            Indicates whether the transaction was initiated from the Fordefi
            system itself, in contrast to incoming transactions (which are, for
            example, transfers of funds into a vault visible to Fordefi).
        note:
          title: Note
          description: An optional transaction note.
          type: string
        spam_state:
          allOf:
            - $ref: '#/components/schemas/TransactionSpamState'
          description: >-
            `automatically_set` if the transaction was automatically set as spam
            by Fordefi, `manually_set` if the transaction was manually set as
            spam by a user, and `unset` if the transaction was not set as spam.
        type:
          const: solana_transaction
          title: Type
          description: The type of the transaction.
        solana_transaction_type:
          allOf:
            - $ref: '#/components/schemas/SolanaTransactionType'
          description: The type of the Solana transaction.
        state:
          allOf:
            - $ref: '#/components/schemas/SolanaTransactionState'
          description: The current state of the transaction.
        hash:
          title: Hash
          description: The hash of the transaction.
          type: string
          maxLength: 88
          minLength: 64
          pattern: ^[a-km-zA-HJ-NP-Z1-9]+$
          example: >-
            FAWA66fudpiwdRDDQ4DRxdJsRvawvauwg4vQkm98ZHFpXmW5N7xzRiTRpt8QiZ19s1aVbzKgXW6kEZanwHeDFNS
        raw_transaction:
          title: Raw Transaction
          description: The serialized transaction encoded as a base64 string
          type: string
          example: SGVsbG8=
        chain:
          allOf:
            - $ref: '#/components/schemas/SolanaChain'
          description: The chain type this transaction is on.
      type: object
      required:
        - transaction_id
        - is_managed_transaction
        - direction
        - spam_state
        - type
        - solana_transaction_type
        - state
        - chain
      title: WebhookSolanaTransactionStatusChangeEvent
    WebhookTransactionStatusChangeEvent:
      properties:
        webhook_id:
          type: string
          format: uuid
          title: Webhook Id
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The time of the webhook event creation in UTC.
        event_id:
          type: string
          format: uuid
          title: Event Id
          description: The unique ID of this event.
        attempt:
          type: integer
          minimum: 1
          title: Attempt
          description: The attempt number of this event.
        sent_at:
          type: string
          format: date-time
          title: Sent At
          description: The time the current event was sent in UTC.
        event:
          oneOf:
            - $ref: '#/components/schemas/WebhookBlackBoxSignatureStatusChangeEvent'
            - $ref: '#/components/schemas/WebhookCosmosMessageStatusChangeEvent'
            - $ref: '#/components/schemas/WebhookCosmosTransactionStatusChangeEvent'
            - $ref: '#/components/schemas/WebhookEvmMessageStatusChangeEvent'
            - $ref: '#/components/schemas/WebhookEvmTransactionStatusChangeEvent'
            - $ref: '#/components/schemas/WebhookSolanaMessageStatusChangeEvent'
            - $ref: '#/components/schemas/WebhookSolanaTransactionStatusChangeEvent'
            - $ref: '#/components/schemas/WebhookUtxoTransactionStatusChangeEvent'
          title: Event
          discriminator:
            propertyName: type
            mapping:
              black_box_signature: '#/components/schemas/WebhookBlackBoxSignatureStatusChangeEvent'
              cosmos_message: '#/components/schemas/WebhookCosmosMessageStatusChangeEvent'
              cosmos_transaction: '#/components/schemas/WebhookCosmosTransactionStatusChangeEvent'
              evm_message: '#/components/schemas/WebhookEvmMessageStatusChangeEvent'
              evm_transaction: '#/components/schemas/WebhookEvmTransactionStatusChangeEvent'
              solana_message: '#/components/schemas/WebhookSolanaMessageStatusChangeEvent'
              solana_transaction: '#/components/schemas/WebhookSolanaTransactionStatusChangeEvent'
              utxo_transaction: '#/components/schemas/WebhookUtxoTransactionStatusChangeEvent'
        event_type:
          const: transaction_state_update
          title: Event Type
          description: The type of the event.
      type: object
      required:
        - webhook_id
        - created_at
        - event_id
        - attempt
        - sent_at
        - event
        - event_type
      title: WebhookTransactionStatusChangeEvent
    WebhookUtxoTransactionStatusChangeEvent:
      properties:
        transaction_id:
          type: string
          format: uuid
          title: Transaction Id
          description: The unique identifier of the object in the Fordefi platform.
        is_managed_transaction:
          type: boolean
          title: Is Managed Transaction
          description: >-
            Indicates whether the transaction was initiated from the Fordefi
            system itself, in contrast to unmanaged transactions (which are, for
            example, transfers of funds into a vault visible to Fordefi).
          deprecated: true
        direction:
          allOf:
            - $ref: '#/components/schemas/TransactionDirection'
          description: >-
            Indicates whether the transaction was initiated from the Fordefi
            system itself, in contrast to incoming transactions (which are, for
            example, transfers of funds into a vault visible to Fordefi).
        note:
          title: Note
          description: An optional transaction note.
          type: string
        spam_state:
          allOf:
            - $ref: '#/components/schemas/TransactionSpamState'
          description: >-
            `automatically_set` if the transaction was automatically set as spam
            by Fordefi, `manually_set` if the transaction was manually set as
            spam by a user, and `unset` if the transaction was not set as spam.
        type:
          const: utxo_transaction
          title: Type
          description: The type of the transaction.
        utxo_transaction_type:
          allOf:
            - $ref: '#/components/schemas/UtxoTransactionType'
          description: The type of the Utxo transaction.
        state:
          allOf:
            - $ref: '#/components/schemas/UtxoTransactionState'
          description: The current state of the transaction.
        hash:
          title: Hash
          description: The hash of the transaction.
          type: string
        chain:
          allOf:
            - $ref: '#/components/schemas/UtxoChain'
          description: The chain this transaction is on.
      type: object
      required:
        - transaction_id
        - is_managed_transaction
        - direction
        - spam_state
        - type
        - utxo_transaction_type
        - state
        - chain
      title: WebhookUtxoTransactionStatusChangeEvent
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
  - name: Users
    description: >-
      This resource collection represents users.<h4>User types and
      roles</h4>There are three types of user in the Fordefi
      platform:<ul><li>**Person**: A human user of the platform. Only a person
      can have an admin role.<li>**API user**: An API client key that is trying
      to interact with the platform.See Create an API user and token.<li>**API
      signer**: Used to auto-sign transactions. See Automate Signing with API
      Signer.<li>**End user**: This represents the end user in a Consumer Wallet
      solution.</ul>In addition, a person can have one of two possible user
      roles, which define the permissions that the user is
      given:<ul><li>**Admin**: A user with high privileges in the organization.
      Only admins have permission to manage the policy, set up the backup,
      manage the address book, and add or remove users in the
      organization.<li>**Trader**: A user who can create vaults and
      transactions.</ul>
  - name: Authorization Tokens
    description: >-
      This resource collection represents authorization tokens.<br><br>These
      tokens allow end users to authenticate with Fordefi. Each end user can
      have a maximum of ten active authorization tokens at any time. Each token
      is valid for 24 hours only.
  - name: Blockchains
    description: This resource collection represents blockchains.
  - name: Keysets
    description: >-
      This resource collection represents keysets.<br><br>A keyset is a
      high-level object that includes the three different key types: EdDSA,
      ECDSA, and ECDSA-Stark.
  - name: Webhooks
    description: This resource collection represents webhooks.
  - name: Address Book
    description: >-
      This resource collection represents an address book.<br><br>Address Book
      is an object that represents a contact (saved blockchain address and its
      alias) in the platform. The Address Book object can either be queried
      directly or returned as part of a transaction.
  - name: Transactions
    description: >-
      This resource collection represents a transaction. <br><br>A transaction
      is any object that can be signed cryptographically (with a private key).
      <br><br>In general, it can be one of the following types: <ul> <li> **EVM
      Transaction**: a native currency transfer or a smart contract call on an
      EVM-based chain.  <li> **EVM Message**: in which a message is signed for
      off-chain use on an EVM-based chain.  <li> **Solana Transaction**: a
      native currency transfer on a Solana-based chain.  <li> **Black Box
      Signature**: in which a payload is signed for use, external to the Fordefi
      platform. </ul> <h4>Monitor transactions</h4>  As transactions progress
      from creation through completion,  they can follow several workflows,
      during which they take on various statuses. Status is returned in  the
      `state` field of the Get Transaction and List Transaction requests.
      <br><br> For a list of possible statuses, see [Transaction
      Lifecycle](https://docs.fordefi.com/docs/transaction-lifecycle). 
  - name: Vaults
    description: >-
      This resource collection represents a vault.<br><br>The vault is the basic
      unit to manage funds. A vault has a single public address but is
      multi-chain, meaning you can use it across all chains that are compatible
      with the address and are supported by Fordefi.<br><br>In general, Fordefi
      supports the following vault types: <ul> <li> **EVM**: a vault to be used
      in supported EVM chains.  <li> **Solana**: a vault to be used in supported
      Solana chains.  <li> **Black Box**: in which the user can leverage Fordefi
      for MPC and policy, but is responsible for managing the transaction
      lifecycle. <li> **Cosmos**: a vault to be used in supported Cosmos
      chains.</ul>
  - name: Vault Groups
    description: This resource collection represents a vault group.<br><br>TBD
  - name: Assets
    description: >-
      This resource collection represents assets.<ul> <li> 'Assets', in general,
      refer to the assets that are supported by Fordefi and can be held by an
      organization. The Fetch Asset Prices API, for example, returns the current
      prices of all the assets that are recognized by the system. <li>'Owned
      assets' reflects the balance of specific assets that are owned by an
      organization. 
  - name: End Users
    description: >-
      This resource collection represents end users.<br><br>End users are the
      users of a third-party app that embeds cryptographic technology provided
      by Fordefi. Each end user's mobile device can have a unique key-share,
      where Fordefi holds the matching key-share.
security:
  - bearerAuth: []
