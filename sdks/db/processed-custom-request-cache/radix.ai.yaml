processed:
  securitySchemes:
    JWTBearer:
      type: http
      scheme: bearer
  apiBaseUrl: https://api.talentapi.com
  apiVersion: '2024-04-02'
  apiDescription: >-
    <p>API Support: <a href="support@radix.ai">support@radix.ai</a>  | Website:
    <a href="https://www.radix.ai">https://www.radix.ai</a></p>

    <p>Job and profile matching using Artificial Intelligence.</p>

    <h1>What is it?</h1>

    <p>Talent API is a system that allows retrieving jobs recommendations for a
    profile or profiles recommendations for a job.<br>

    There are three types of entities involved:</p>

    <ul>

    <li>The <code>job</code>: a JSON document describing a job offer.</li>

    <li>The <code>profile</code>: a JSON document describing a user
    profile.</li>

    <li>The <code>match</code>: a JSON document describing a link between a job
    and a profile. Getting started Here is a description of a<br>
      basic use of the API using curl. In the examples, words between brackets need to be replaced by the appropriate value.</li>
    </ul>

    <h4>Credentials</h4>

    <p>You need a <code>client_id</code> and a <code>client_secret</code> in
    order to have access to the API. If you don't have credentials, please<br>

    contact us at <a href="hello@radix.ai">hello@radix.ai</a>. These credentials
    will also come with the scope you are allowed to use.</p>

    <p>Using these, you can authenticate at the /auth endpoint and receive an
    access_token. This access_token will be needed<br>

    for the next requests.</p>

    <p>The request should look like</p>

    <pre><code>curl -X POST \
      https://[server-url]/auth \
      -H 'Content-Type: application/json' \
      -d '{
               &quot;client_id&quot;: &quot;[client_id]&quot;, \
               &quot;client_secret&quot;: &quot;[client_secret]&quot;, \
               &quot;scope&quot;:&quot;tapi/ALL&quot;
          }'
    </code></pre>

    <p>The response will be</p>

    <pre><code>{
      &quot;access_token&quot;:&quot;eyJjIs7iOiJ[...]vQZUUhw2fsg&quot;,
      &quot;expires_in&quot;:3600,
      &quot;token_type&quot;:&quot;Bearer&quot;
    }

    </code></pre>

    <h4>Sending data</h4>

    <p>Before being able to request recommendations, you need to provide data.
    The minimum is a profile and a job.</p>

    <h4>Send a job</h4>

    <p>Here is a sample request of how to send us a job.</p>

    <p>The example uses the smallest set of fields necessary for the query to
    work, but you should fill as many of them as<br>

    possible.</p>

    <p>The field client_data can be used to send fields that are specific to
    your corporation that cannot be mapped to the API<br>

    specification. Please note that using client specific fields is discouraged
    if your fields are non-critical or can be<br>

    translated into predefined fields.</p>

    <pre><code>curl -X POST \
      http://[server-url]/jobs \
      -H 'Authorization: Bearer eyJjIs7iOiJ[...]vQZUUhw2fsg' \
      -H 'Content-Type: application/json' \
      -d '{
              &quot;external_id&quot; : &quot;12345&quot;,
              &quot;title&quot;: &quot;A job title&quot;,
              &quot;addresses&quot;: [&quot;The job address&quot;],
              &quot;publication_datetime&quot; : &quot;2020-02-12 00:02:00&quot;,
              &quot;expiration_datetime&quot; :  &quot;2020-02-12 00:02:00&quot;,
              &quot;may_be_recommended&quot; : true,
              &quot;may_receive_recommendations&quot; : true
    }'

    </code></pre>

    <p>You will receive the following response, confirming that we received the
    job and processed it correctly:</p>

    <pre><code>{
        &quot;message&quot;: &quot;Job successfully received. Recommendations will be available once the job has been processed.&quot;
    }

    </code></pre>

    <h4>Send a profile</h4>

    <p>In the same fashion, to send us a profile</p>

    <pre><code>curl -X POST \
      http://[server-url]/profiles \
      -H 'Authorization: Bearer eyJjIs7iOiJ[...]vQZUUhw2fsg' \
      -H 'Content-Type: application/json' \
      -d '{
              &quot;external_id&quot; : &quot;6789&quot;,
              &quot;addresses&quot;: [&quot;The addresses where the candidate lives.&quot;],
              &quot;publication_datetime&quot; : &quot;2008-02-12 00:02:00&quot;,
              &quot;expiration_datetime&quot; :  &quot;2008-02-12 00:02:00&quot;,
              &quot;may_be_recommended&quot; : true,
              &quot;may_receive_recommendations&quot; : true
    }'

    </code></pre>

    <p>And the response will be</p>

    <pre><code>{
      &quot;message&quot;: &quot;Profile successfully received. Recommendations will be available once the profile has been processed.&quot;,
    }

    </code></pre>

    <h4>Get a recommendation</h4>

    <p>Now that there is a job and a profile in the system, you can ask for a
    recommendation. For example, in order to get the<br>

    best jobs for the profile you just uploaded, you can do the following
    request</p>

    <pre><code>curl -X GET \
      http://[server-url]/profile/123456789/jobs \
      -H 'Authorization: Bearer eyJjIs7iOiJ[...]vQZUUhw2fsg' \
      -H 'Content-Type: application/json' \
    </code></pre>

    <p>The response will contain a list of the best jobs for that profile, in
    the following form</p>

    <pre><code>[
        {
          &quot;resource_id&quot;: 12345
          &quot;score&quot;: 0.87
          &quot;resource&quot;: {
            &quot;external_id&quot; : &quot;12345&quot;,
            &quot;title&quot;: &quot;A job title&quot;,
            &quot;addresses&quot;: [&quot;The job address&quot;],
            &quot;publication_datetime&quot; : &quot;2020-02-12 00:02:00&quot;,
            &quot;expiration_datetime&quot; :  &quot;2020-02-12 00:02:00&quot;,
            &quot;may_be_recommended&quot; : true,
            &quot;may_receive_recommendations&quot; : true
          },
          &quot;match_explanation&quot;: {
          }
        },
        ...
    ]

    </code></pre>

    <p>These recommendations are based on the data that you included when
    uploading jobs and profiles to Talent API. To receive<br>

    high quality recommendations, make sure to fill as many fields as possible
    when uploading entities.</p>

    <h4>Send a match indicator</h4>

    <p>If you want the recommendation to improve based on your user behaviour,
    you need to send us <code>match indicators</code>. A match<br>

    indicator represents a link between a profile and a job. As an example, if
    the user with profile_id <code>6789</code> had a look at<br>

    the job page with id <code>12345</code>, you can send us the following
    match:</p>

    <pre><code>curl -X POST \
      https://[server-url]/matches \
      -H 'Authorization: Bearer eyJraWQiOi[...]Mou8GdpvnA'
      -H 'Content-Type: application/json' 
      -d '{
             'profile_id':'6789',
             'job_id':'12345',
             'match_actor':'CANDIDATE',
             'match_datetime':'2020-03-14T21:37:38.414Z',
             'match_type':'PAGEVIEW'
          }'
    </code></pre>

    <p>That way, we are aware of user interactions inside of your data.</p>

    <h4>View your data status</h4>

    <p>To have a look at what you currently sent us, call the
    <code>status</code> endpoint:</p>

    <pre><code>curl -X GET \
      https://[server-url]/status \
      -H 'Authorization: Bearer eyJraWQiOi[...]Mou8GdpvnA'
      -H 'Content-Type: application/json' 
    </code></pre>
  apiTitle: Talent API Â· API Reference
  endpoints: 23
  sdkMethods: 25
  schemas: 70
  parameters: 106
  originalCustomRequest:
    type: GET
    url: https://api.talentapi.com/openapi.json
    apiBaseUrl: https://api.talentapi.com
  customRequestSpecFilename: radix.ai.yaml
  difficultyScore: 86.5
