processed:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://login.sellsy.com/oauth2/authorization
          tokenUrl: https://login.sellsy.com/oauth2/access-tokens
          refreshUrl: https://login.sellsy.com/oauth2/access-tokens
          scopes:
            comments.read: Grand read access to comments
            comments.write: Grand write access to comments
            contacts.read: Grants read access to contacts
            contacts.write: Grants read access to contacts
            individuals.read: Grants read access to individuals
            companies.read: Grants read access to companies
            companies.write: Grants write access to companies
            estimates.read: Grants read access to estimates
            estimates.write: Grants write access to estimates
            activities.write: Grants write access to activities
            activities.read: Grants read access to activities
            listings.read: Grants read access to listings
            listings.write: Grants write access to listings
            custom-fields.read: Grand read access to custom fields
            custom-fields.write: Grand write access to custom fields
            smart-tags.read: Grand read access to smart tags
            smart-tags.write: Grand write access to smart tags
            custom-activities.read: Grand read access to custom activities
            custom-activities.write: Grand write access to custom activities
            scopes.read: Grants read access to scopes
            access-tokens.read: Grants read access to access tokens
            access-tokens.write: Grants write access to access tokens
            clients.read: Grants read access to OAuth clients
            clients.write: Grants write access to OAuth clients
            accounting-codes.read: Grant read access to accounting codes
            accounting-codes.write: Grant write access to accounting codes
            taxes.read: Grant read access to taxes
            taxes.write: Grant write access to taxes
            ocr.read: Grant read access to ocr
            individuals.write: Grants write access to individuals
            accounts.read: Grant read access to accounts
            accounts.write: Grant write access to accounts
            opportunities.read: Grand read access to opportunities
            opportunities.write: Grant write access to opportunities
            orders.read: Grand read access to orders
            orders.write: Grand write access to orders
            tasks.read: Grant read access to tasks
            tasks.write: Grant write access to tasks
            staffs.read: Grand read access to staffs
            staffs.write: Grant write access to staffs
            search.read: Grant access to search
            phonecalls.read: Grand read access to phonecall
            phonecalls.write: Grand write access to phonecall
            calendars.read: Grant read access to calendar
            calendars.write: Grant write access to calendar
            emails.read: Grant read access to email
            emails.write: Grant write access to email
            emails.settings: Grant access to email settings
            webhooks.read: Grants read access to webhooks
            webhooks.write: Grants write access to webhooks
            payments.read: Grand read access to payments
            payments.write: Grand write access to payments
            items.read: Grand read acces to items
            items.write: Grand write acces to items
            invoicing.read: Grant read access to invoicing
            notifications.read: Grant read access to notifications
            notifications.write: Grant write access to notifications
            accounting-entry.read: Grant read access to accounting entries
            accounting-entry.write: Grant write access to accounting entries
            invoices.read: Grant read access to invoices
            invoices.write: Grant write access to invoices
            api-v1: >-
              Grant full access to API v1 with API v2 access tokens. Caution,
              this scope gives access to all sellsy functionality
            credit-notes.read: Grant read access to credit-notes
            credit-notes.write: Grant write access to credit-notes
            document-layouts.read: Grant read access to document layouts
            rate-categories.read: Grant read access to rate categories
            rate-categories.write: Grant write access to rate categories
            files.write: Grants write access to files
            files.read: Grants read access to files
            adyen.read: Grant read access to adyen
            adyen.write: Grant write access to adyen
            subscriptions.write: Grant write access to subscription
            subscriptions.read: Grant read access to subscription
            models.write: Grant write access to models
            models.read: Grant read access to models
            objectives.read: Grant read access to objectives
            objectives.write: Grant write access to objectives
            primes.read: Grant read access to primes
            discount-incl-taxes.read: Grant read access to discount including taxes
            discount-incl-taxes.write: Grant write access to discount including taxes
        clientCredentials:
          tokenUrl: https://login.sellsy.com/oauth2/access-tokens
          scopes: {}
      description: "### Client OAuth\nYou can generate a new OAuth 2 client for the V2 API, from the developer page of your Sellsy account (https://www.sellsy.fr/developer/api-v2).\n\nSeveral types of clients are available:\n\n- **Private:** API access limited to staffs of your SELLSY account.\n  A flow by authorization code will be required\n- **Personal**:   API access linked to an staff.\n   The use of client credentials flow is possible.\n- **Public**:  API access to connect to all SELLSY accounts.\n   A validation of SELLSY and a flow by authorization code will be required.\n\n### Authorization Code Flow\nSee  https://www.oauth.com/oauth2-servers/server-side-apps/authorization-code/\n\n**PKCE** is required when using the authorization code flow. https://www.oauth.com/oauth2-servers/pkce/\n\n- **Authorization URL:** https://login.sellsy.com/oauth2/authorization\n- **Token URL:** https://login.sellsy.com/oauth2/access-tokens\n- **Refresh URL:** https://login.sellsy.com/oauth2/access-tokens\n\n\n#### Example:\nCall `https://login.sellsy.com/oauth2/authorization?response_type=code&client_id=YOUR_CLIENT_ID&redirect_uri=YOUR_REDIRECT_URI&code_challenge=YOUR_PKCE_CODE_CHALENGE&code_challenge_method=S256`\n\nAfter authentication, a redirection will be performed on the redirection uri. The authaurization code will be retrieved in the query parameter `code` .\n\nThis code can now be exchanged for an access token:\n```bash\ncurl -X POST \\\n  https://login.sellsy.com/oauth2/access-tokens \\\n  -d '{\n\t\"grant_type\": \"authorization_code\",\n\t\"client_id\": \"YOUR_CLIENT_ID\",\n\t\"redirect_uri\": \"YOUR_REDIRECT_URI\",\n\t\"code_verifier\": \"YOUR_PKCE_CODE_VERIFIER\",\n\t\"code\": \"THE_CODE\"\n}'\n# Response\n{\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600,\n    \"access_token\": \"YOUR_ACCESS_TOKEN\",\n    \"refresh_token\": \"YOUR_REFRESH_TOKEN\"\n}\n# Use API\ncurl  -X GET \\\n  'https://api.sellsy.com/v2/teams' \\\n   --header 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n```\n\nYou can request a new access token, from the refresh token previously retrieved:\n```bash\ncurl -X POST \\\n  https://login.sellsy.com/oauth2/access-tokens \\\n  -d '{\n\t\"grant_type\": \"refresh_token\",\n\t\"client_id\": \"YOUR_CLIENT_ID\",\n\t\"client_secret\": \"YOUR_CLIENT_SECRET\"\n\t\"refresh_token\": \"YOUR_REFRESH_TOKEN\"\n}'\n# Response\n{\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600,\n    \"access_token\": \"YOUR_NEW_ACCESS_TOKEN\",\n    \"refresh_token\": \"YOUR_NEW_REFRESH_TOKEN\"\n}\n```\n\n### Client Credential Flow\nSee  https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/\n\nOnly personal clients can use this authentication flow.\n\n**Token URL:** https://login.sellsy.com/oauth2/access-tokens\n\n#### Example:\n```bash\ncurl -X POST \\\n  https://login.sellsy.com/oauth2/access-tokens \\\n  -d '{\n\t\"grant_type\": \"client_credentials\",\n\t\"client_id\": \"YOUR_CLIENT_ID\",\n\t\"client_secret\": \"YOUR_CLIENT_SECRET\"\n}'\n# Response\n{\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600,\n    \"access_token\": \"YOUR_ACCESS_TOKEN\"\n}\n# Use API\ncurl  -X GET \\\n  'https://api.sellsy.com/v2/teams' \\\n   --header 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n```\n### Tokens expiration\n- **Authorization Code:** 10 min\n- **Access Token:** 24 hours\n- **Refresh Token:** 60 days"
  apiBaseUrl: https://api.sellsy.com/v2
  apiVersion: 2.128.0
  apiDescription: >-
    Find out the [Postman collections](dist/postman/CollectionsApiV2.json) with
    the required [environment variables](dist/postman/Environment.json)


    Find out the [Changelog](changelog.html)

    # Errors


    The errors are returned in JSON with the following format:

    ```

    {
      "error": {
         "code": HTTP_CODE,
         "message": "Error message",
         "context": "Error context code"
         "details": {
              "FIELD": "Error message"
         }
    }

    ```


    The `details` field can contain an object that details the error. It is used
    in particular during validation to return the invalid fields



    | HTTP Code     | Description   |

    | ------------- | ------------- |

    | 400           | Validation and logic errors |

    | 401           | Authentification errors |

    | 402           | Quotas limit reached or limit of feature reached on your
    current plan |

    | 403           | Insufficient privileges  |

    | 404           | Page not found |

    | 409           | A request conflicts with the current state of the server |

    | 413           | Payload is too large |

    | 429           | Quotas of requests reached (See quotas section) |

    | 5xx           | Server errors |



    # Versioning


    This API is versioned, the modifications carried out on this one should not
    generate regression if you respect the following recommendations:


    - A new field can be added, your code must authorize this

    - A new error code can be added, your code must deal with unknown errors

    - On lists, values can be added

    - A missing field is not equal to `null`


    To target a specific **major** version of the API, just precise the number
    in the url:  `{url}/v2/{endpoint}`


    # Quotas


    A limit on the number of requests per second, minute, day and/or month is
    applied to each user account.


    A 429 error will be sent if at least one of the quotas has reached zero.


    You can know your remaining quota through the headers of the response:

    - `X-Quota-Remaining-By-Second`

    - `X-Quota-Remaining-By-Minute`

    - `X-Quota-Remaining-By-Day`

    - `X-Quota-Remaining-By-Month`


    The quotas are counted on each request, even in the event of an error. On
    the scripts generating a lot of requests, it is therefore necessary to check
    these values before returning requests.


    A new 402 error code has created. This error appears when you try to create
    ressources like a pipeline or custom fields and the quota limit has been
    reached.


    # Pagination on list and search requests

    On list and search requests, the pagination offset can be typed as either an
    int or a string, depending on the pagination method used.


    We provide 2 ways to interact with the pagination.

    ### 1. "Seek" method

    The offset value represents the LAST object in the response list, it's the
    default one used.


    **We recommend to use the "seek" method, it has better performance and
    includes optimizations.**

    ```

    GET {{url}}/comments?limit=1 {
        "data": [
            {
                "id": 1
            }
        ],
        "pagination": {
            "limit": 1,
            "count": 1,
            "total": 13,
            "offset": "WyIxMSJd"
        }
    }

    ---

    GET {{url}}/comments?limit=1&offset=WyIxMSJd {
        "data": [
            {
                "id": 2
            }
        ],
        "pagination": {
            "limit": 1,
            "count": 1,
            "total": 13,
            "offset": "SoIxNyJd"
        }
    }

    ```

    ### 2. Numeric offset method

    The second method, more classical, where the offset corresponds to the
    number of the result page, it must be explicitly specified in the first
    request.


    **We have applied a limit to the first 100 000 results on this method, for
    performance purposes.**

    ```

    GET {{url}}/comments?limit=1&offset=0 {
        "data": [
            {
                "id": 1
            }
        ],
        "pagination": {
            "limit": 1,
            "count": 1,
            "total": 13,
            "offset": 0
        }
    }

    ---

    GET {{url}}/comments?limit=1&offset=1 {
        "data": [
            {
                "id": 2
            }
        ],
        "pagination": {
            "limit": 1,
            "count": 1,
            "total": 13,
            "offset": 1
        }
    }

    ```

    # Embed objects

    Additional objects can be included in the result, and are specified on each
    endpoint under the `embed` parameter. Those objects  may require different
    OAuth2 scopes than the main endpoint, and will automatically be `null` if
    the scopes are not respected. Usually, the scopes are listed in the
    description of the parameter.
  apiTitle: Sellsy API
  endpoints: 225
  sdkMethods: 463
  schemas: 230
  parameters: 1038
  contactEmail: api@sellsy.com
  originalCustomRequest:
    type: GET
    url: https://api.sellsy.com/doc/v2/dist/sellsy.v2.latest.yaml
  customRequestSpecFilename: sellsy.com.yaml
  difficultyScore: 837.5
