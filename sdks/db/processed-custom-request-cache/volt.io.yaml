processed:
  securitySchemes:
    oauth:
      type: oauth2
      description: >-
        OAuth2 password grant - see the documentation in the oAuth2
        Authentication section
      flows:
        password:
          tokenUrl: /oauth
          scopes: {}
  apiBaseUrl: https://api.sandbox.volt.io
  apiVersion: 2024.04.11
  apiDescription: >
    Join the real-time revolution! Give your customers a faster, easier and
    safer way to pay. Volt has developed a REST API for merchants, allowing you
    to offer the option to use Open Banking payments on your online checkout.



    ## NEW : API idempotency 


    We have introduced support for idempotency on the POST endpoints in the Volt
    Connect endpoints of the API.  The idea of idempotency is to avoid unwanted
    duplication should a request to our API fail and need to be retried. 


    Using a unique idempotency key for each POST request, it is possible to
    safely retry the same call multiple times with the guarantee that it will
    only be actioned once.


    ### Endpoints supporting idempotency

    If an endpoint supports idempotent processing, we'll indicate this in the
    header documentation for that endpoint.


    ### Using an idempotency key


    Using the idempotency key is optional.  If you would like to use it to help
    prevent duplicates in your POST requests, simply include the header
    ```idempotency-key: <key>``` - where  ```<key>``` is a unique identifier for
    the message.  We recommend using a **UUID** for the key, however you may use
    any other unique identifier you choose. 


    ### Retries

    If the request times out or you don't receive a response for any other
    reason, you may safely retry it using the same payload and headers.  Use the
    same key for the retried attempt. 


    ### Preventing duplicates 

    If we have already processed the request and you send a request using the
    same idempotency key, it will fail with an error, returning an HTTP code of
    ```409``` Conflict. 


    ### Exponential backoff for retries

    You should adopt an exponential backoff strategy when retrying requests
    using the same idempotency key. For example, retry 1 second later then, if
    it fails again, 2 seconds later, 4 seconds later etc.
  apiTitle: Real-time payments, everywhere.
  endpoints: 19
  sdkMethods: 27
  schemas: 30
  parameters: 66
  originalCustomRequest:
    lambda: true
  customRequestSpecFilename: volt.io.yaml
  difficultyScore: 58.5
