hash: 3cfdb79c4f57773b427f939abac02a5585554edbd0214b8e8c0c4075e75423a2
methodObjects:
  - url: /oauth2/token
    method: createAccessToken
    httpMethod: post
    tag: Authentication
    typeScriptTag: authentication
    description: Create an access token
    parameters:
      - name: client_id
        schema: string
        description: ''
        example: 1234ABCD
      - name: client_secret
        schema: string
        description: ''
        example: 1234ABCD
      - name: grant_type
        schema: string
        description: ''
        example: authorization_code
      - name: code
        schema: string
        description: ''
        example: 1234ABCD
      - name: redirect_uri
        schema: string
        description: ''
        example: https://example.com/inbound
      - name: refresh_token
        schema: string
        description: ''
        example: https://example.com/inbound
    responses:
      - statusCode: '201'
        description: ''
  - url: /v1/expenses/{id}/approve
    method: approveExpense
    httpMethod: post
    tag: Expenses
    typeScriptTag: expenses
    description: Approve expense
    parameters:
      - name: id
        schema: string
        required: true
        description: Expense ID
        example: ID
    responses:
      - statusCode: '200'
        description: Successful
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: Resource does not exist, or no permission to access resource
      - statusCode: '422'
        description: ''
  - url: /v1/expenses/{id}/decline
    method: declineExpense
    httpMethod: post
    tag: Expenses
    typeScriptTag: expenses
    description: Decline expense
    parameters:
      - name: id
        schema: string
        required: true
        description: Expense ID
        example: ID
      - name: reason
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: Successful
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: Resource does not exist, or no permission to access resource
      - statusCode: '422'
        description: ''
  - url: /v1/expenses/{id}
    method: getById
    httpMethod: get
    tag: Expenses
    typeScriptTag: expenses
    description: Retrieve an individual expense
    parameters:
      - name: id
        schema: string
        required: true
        description: Expense ID
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: Resource does not exist, or no permission to access resource
  - url: /v1/expenses
    method: createOperationKey
    httpMethod: post
    tag: Expenses
    typeScriptTag: expenses
    description: Create expense
    parameters:
      - name: description
        schema: string
        required: false
        description: ''
      - name: engagementId
        schema: string
        required: true
        description: ''
        example: ENGAGEMENTID
      - name: name
        schema: string
        required: true
        description: ''
        example: NAME
      - name: incurredOn
        schema: string
        required: true
        description: ''
        example: INCURREDON
      - name: category
        schema: string
        required: true
        description: ''
        example: CATEGORY
      - name: receiptUrl
        schema: string
        required: true
        description: ''
        example: RECEIPTURL
      - name: receiptAmount
        schema: object
        required: true
        description: ''
    responses:
      - statusCode: '202'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v1/company
    method: detailsRetrieve
    httpMethod: get
    tag: Company
    typeScriptTag: company
    description: Retrieve company details
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /v1/departments
    method: getAll
    httpMethod: get
    tag: Departments
    typeScriptTag: departments
    description: Retrieve all departments
    parameters:
      - name: perPage
        schema: integer
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /v1/engagements/{id}
    method: getById
    httpMethod: get
    tag: Engagements
    typeScriptTag: engagements
    description: Retrieve an individual engagement
    parameters:
      - name: id
        schema: string
        required: true
        description: Engagement ID
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: Resource does not exist, or no permission to access resource
  - url: /v1/engagements
    method: getAll
    httpMethod: get
    tag: Engagements
    typeScriptTag: engagements
    description: Retrieve all engagements
    parameters:
      - name: perPage
        schema: integer
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /v1/meta/operations/{operation_key}
    method: getByOperationKey
    httpMethod: get
    tag: Operations
    typeScriptTag: operations
    description: Retrieve an operation
    parameters:
      - name: operationKey
        schema: string
        required: true
        description: Operation key
        example: OPERATION_KEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: Resource does not exist, or no permission to access resource
  - url: /v1/payroll/{id}
    method: getById
    httpMethod: get
    tag: Payroll
    typeScriptTag: payroll
    description: Retrieve an individual payroll
    parameters:
      - name: id
        schema: string
        required: true
        description: Payroll ID
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: Resource does not exist, or no permission to access resource
  - url: /v1/payroll
    method: getAllPayrolls
    httpMethod: get
    tag: Payroll
    typeScriptTag: payroll
    description: Retrieve all payroll
    parameters:
      - name: perPage
        schema: integer
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: ''
      - name: from
        schema: string
        required: false
        description: ''
      - name: to
        schema: string
        required: false
        description: ''
      - name: includeRecords
        schema: boolean
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /v1/time_off/entitlements
    method: getEntitlements
    httpMethod: get
    tag: Time Off
    typeScriptTag: timeOff
    description: Retrieve entitlements
    parameters:
      - name: perPage
        schema: integer
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /v1/time_off/requests/{id}/approve
    method: approveRequest
    httpMethod: post
    tag: Time Off
    typeScriptTag: timeOff
    description: Approve request
    parameters:
      - name: id
        schema: string
        required: true
        description: Time Off Request ID
        example: ID
    responses:
      - statusCode: '200'
        description: Successful
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: Resource does not exist, or no permission to access resource
      - statusCode: '422'
        description: ''
  - url: /v1/time_off/requests/{id}/reject
    method: rejectRequest
    httpMethod: post
    tag: Time Off
    typeScriptTag: timeOff
    description: Reject request
    parameters:
      - name: id
        schema: string
        required: true
        description: Time Off Request ID
        example: ID
      - name: reason
        schema: string
        required: true
        description: ''
        example: REASON
    responses:
      - statusCode: '200'
        description: Successful
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: Resource does not exist, or no permission to access resource
      - statusCode: '422'
        description: ''
  - url: /v1/time_off/requests/{id}
    method: getRequest
    httpMethod: get
    tag: Time Off
    typeScriptTag: timeOff
    description: Retrieve an individual request
    parameters:
      - name: id
        schema: string
        required: true
        description: Time Off Request ID
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Resource does not exist, or no permission to access resource
  - url: /v1/time_off/requests
    method: getAllRequests
    httpMethod: get
    tag: Time Off
    typeScriptTag: timeOff
    description: Retrieve all requests
    parameters:
      - name: perPage
        schema: integer
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
numberOfSchemas: 39
apiDescription: >-
  Oyster uses OAuth2 to enable customers to grant access to their data to third
  party applications. Customers also need to use this API to authenticate
  themselves when making API requests.
