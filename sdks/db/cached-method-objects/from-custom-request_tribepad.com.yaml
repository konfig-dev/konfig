hash: 26961b05e93182d8a51005411cf1c9d06eac720c0994a96cb8c182ccd69582fe
methodObjects:
  - url: /v2/oauth/token
    method: requestToken
    httpMethod: post
    tag: Authentication
    typeScriptTag: authentication
    description: Request Token
    parameters:
      - name: grant_type
        schema: string
        description: ''
        example: '{{grant_type}}'
      - name: client_id
        schema: string
        description: ''
        example: '{{client_id}}'
      - name: client_secret
        schema: string
        description: ''
        example: '{{client_secret}}'
      - name: scope
        schema: string
        description: ''
        example: '*'
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/jobs/{job_id}
    method: getDetails
    httpMethod: get
    tag: Job
    typeScriptTag: job
    description: Job Retrieve
    parameters:
      - name: jobId
        schema: string
        required: true
        description: ''
        example: JOB_ID
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/jobs/search
    method: searchJobs
    httpMethod: get
    tag: Job
    typeScriptTag: job
    description: Job Search
    parameters:
      - name: filter[keywords]
        schema: string
        description: 'STRING | Free text key words '
        example: test
      - name: filter[jobType]
        schema: integer
        description: INTEGER | ID from Options > Job > Types API
        example: 5
      - name: filter[category]
        schema: integer
        description: INTEGER | ID from Options > Job > Category API
        example: 105
      - name: filter[salaryRangeFrom]
        schema: integer
        description: INTEGER | Monetary value in integer format
        example: 0
      - name: filter[salaryRangeTo]
        schema: integer
        description: INTEGER | Monetary value in integer format
        example: 10000
      - name: filter[location]
        schema: string
        description: >-
          STRING | Free text location search. You must include location_country
          when using location
        example: Canol Dinas Caerdydd
      - name: filter[evergreen]
        schema: integer
        description: BOOLEAN | Only show jobs that do not expire
        example: 0
      - name: filter[locationRange]
        schema: integer
        description: 'INTEGER | Radius in miles '
        example: 100
      - name: filter[locationCountry]
        schema: integer
        description: >-
          INTEGER | A integer value from the country options API., this must be
          set when filtering by filter[location].  
        example: 1
      - name: sort
        schema: string
        description: ''
        example: created_date
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/applications/{application_id}
    method: get
    httpMethod: get
    tag: Applications
    typeScriptTag: applications
    description: Application Retrieve
    parameters:
      - name: applicationId
        schema: string
        required: true
        description: ''
        example: APPLICATION_ID
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/applications/{application_id}/files
    method: listFiles
    httpMethod: get
    tag: Applications
    typeScriptTag: applications
    description: Application Files
    parameters:
      - name: applicationId
        schema: string
        required: true
        description: ''
        example: APPLICATION_ID
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/applications/{application_id}/files/cv
    method: getCvFile
    httpMethod: get
    tag: Applications
    typeScriptTag: applications
    description: Application CV Files
    parameters:
      - name: applicationId
        schema: string
        required: true
        description: ''
        example: APPLICATION_ID
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/applications/{application_id}/files/contract
    method: getApplicationContract
    httpMethod: get
    tag: Applications
    typeScriptTag: applications
    description: Application Contract Files
    parameters:
      - name: applicationId
        schema: string
        required: true
        description: ''
        example: APPLICATION_ID
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/applications/{application_id}/files/profile
    method: getProfileFiles
    httpMethod: get
    tag: Applications
    typeScriptTag: applications
    description: Application Profile Files
    parameters:
      - name: applicationId
        schema: string
        required: true
        description: ''
        example: APPLICATION_ID
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/applications/{application_id}/files/onboarding
    method: getOnboardingFiles
    httpMethod: get
    tag: Applications
    typeScriptTag: applications
    description: Application Onboarding Files
    parameters:
      - name: applicationId
        schema: string
        required: true
        description: ''
        example: APPLICATION_ID
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/applications/{application_id}/files/integrations
    method: getIntegrationFiles
    httpMethod: get
    tag: Applications
    typeScriptTag: applications
    description: Application Integration Files
    parameters:
      - name: applicationId
        schema: string
        required: true
        description: ''
        example: APPLICATION_ID
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/applications
    method: getList
    httpMethod: get
    tag: Applications
    typeScriptTag: applications
    description: Applications
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/options/all
    method: listValues
    httpMethod: get
    tag: Options
    typeScriptTag: options
    description: List options
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/options/piwik
    method: getJobPiwik
    httpMethod: get
    tag: Options
    typeScriptTag: options
    description: Options > Job > Piwik
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/options/job/custom-fields
    method: getJobCustomFields
    httpMethod: get
    tag: Options
    typeScriptTag: options
    description: Options > Job > Custom Fields
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/options/job/category
    method: getJobCategories
    httpMethod: get
    tag: Options
    typeScriptTag: options
    description: Options > Job > Category
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/options/job/type
    method: getJobTypes
    httpMethod: get
    tag: Options
    typeScriptTag: options
    description: Options > Job > Types
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/options/business-unit
    method: getBusinessUnit
    httpMethod: get
    tag: Options
    typeScriptTag: options
    description: Options > Job > Business Unit
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/options/business-region
    method: getBusinessRegion
    httpMethod: get
    tag: Options
    typeScriptTag: options
    description: Options > Job > Business Region
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/options/mapping
    method: getMapping
    httpMethod: get
    tag: Options
    typeScriptTag: options
    description: Options > Mapping
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/options/currency
    method: getCurrencyOptions
    httpMethod: get
    tag: Options
    typeScriptTag: options
    description: Options > Currency
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/job/options/business-unit
    method: getBusinessUnit
    httpMethod: get
    tag: Options
    typeScriptTag: options
    description: Options > Language
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/options/withdraw-reason
    method: getWithdrawReason
    httpMethod: get
    tag: Options
    typeScriptTag: options
    description: Options > Withdraw Reason
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/options/reject-reason
    method: getRejectReason
    httpMethod: get
    tag: Options
    typeScriptTag: options
    description: Options > Reject Reason
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/options/anonymous-policies
    method: getAnonymousPolicies
    httpMethod: get
    tag: Options
    typeScriptTag: options
    description: Options > Anonymous Policies
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/options/salary-frequency
    method: getSalaryFrequency
    httpMethod: get
    tag: Options
    typeScriptTag: options
    description: Options > Salary Frequency
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/options/region
    method: getRegion
    httpMethod: get
    tag: Options
    typeScriptTag: options
    description: Options > Region
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/options/country
    method: getCountryList
    httpMethod: get
    tag: Options
    typeScriptTag: options
    description: Options > Country
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/options/application/status
    method: getApplicationStatus
    httpMethod: get
    tag: Options
    typeScriptTag: options
    description: Options > Application Status
    parameters:
      - name: filter[id]
        schema: integer
        description: ''
        example: 1
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/data-security/preference
    method: dataSecurityPreferencesList
    httpMethod: get
    tag: Register And Apply
    typeScriptTag: registerAndApply
    description: Data Security Preferences
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v2/api/v1/register-and-apply
    method: candidateApplicationCreate
    httpMethod: post
    tag: Register And Apply
    typeScriptTag: registerAndApply
    description: Register And Apply
    parameters:
      - name: name_first
        schema: string
        description: ''
        example: Candidate First Name
      - name: name_last
        schema: string
        description: ''
        example: Last Name
      - name: username
        schema: string
        description: ''
        example: candidateemail@yopmail.com
      - name: address_1
        schema: string
        description: ''
        example: Address line 1
      - name: address_2
        schema: string
        description: ''
        example: Address line 2
      - name: address_city
        schema: string
        description: ''
        example: City
      - name: address_postcode
        schema: integer
        description: ''
        example: 12233
      - name: address_country
        schema: string
        description: ''
        example: address country
      - name: dob
        schema: string
        description: ''
        example: '2023-01-01'
      - name: role_id
        schema: integer
        description: ''
        example: 1
      - name: role_client_id
        schema: integer
        description: ''
        example: 1
      - name: job_id
        schema: integer
        description: ''
        example: 130
      - name: mobile
        schema: integer
        description: ''
        example: 9089878767
      - name: telephone
        schema: integer
        description: ''
        example: 9182928393
      - name: team_id
        schema: integer
        description: ''
        example: 1
      - name: created_user_id
        schema: integer
        description: ''
        example: 15
      - name: data_security_preferences[4]
        schema: boolean
        description: ''
        example: false
      - name: data_security_preferences[6]
        schema: boolean
        description: ''
        example: true
    responses:
      - statusCode: '200'
        description: ''
numberOfSchemas: 32
apiDescription: "# Tribepad developer docs\n\nBefore you get started you'll need to contact our Support Team and request access to our APIs. They'll need this info from you:\n\n- Application name\n- Redirect URIs if not using the client credentials grant type\n- IP addresses you will be using so they can be whitelisted\n    \n\n## Our Philosophy\n\nOur APIs follow a restful approach and we aim to make working with them as easy as possible. All requests and responses to or from our API will be in `JSON`.\n\n## We're here to help!\n\nAny questions about our APIs just pop an email over to [integrations@tribepad.com](mailto:integrations@tribepad.com) and we'll be happy to help you out.\n\n# Authentication\n\nTribepad APIs are secured using the oauth2 protocol. At the moment, we support the following grant types:\n\n- Authorization code\n- Authorization code with PKCE\n- Client credentials\n- Refresh token\n    \n\n## Which Grant Type to Choose\n\nA grant type is a method of acquiring an access token. Deciding which grant type to implement depends on the type of integration you'll be building, and the experience you want for your users.\n\n<img src=\"https://files.readme.io/0d0e473-Authorization_Flow.drawio_1.png\" width=\"521\" height=\"493\">\n\nGrant Type Decision Tree\n\n> &lt;h3 &gt;🚧&lt;/h3&gt;&lt;p &gt;Heads up. Some API endpoints will only work using the Authorization access token as they require access to the under laying user. Don&amp;#x27;t worry though, these endpoints will be clearly labelled.&lt;/p&gt; \n  \n\n## Authorization Code\n\nIf you’ve ever signed into a web app using your Facebook or Google account, then this grant type is sure to be familiar to you.\n\n## Step 1\n\nThe client will redirect the user to our application\_`(https://docs.tribepad.com/reference)`\_with the following parameters in the query string.\n\n| Field | Value |\n| --- | --- |\n| client_id | your provided client ID |\n| redirect_uri | the client redirect URI. This parameter is optional, but if not sent the user will be redirected to a pre-registered redirect URI |\n| response_type | code |\n| scope | a space delimited list of requested scopes |\n| state | a\_[CSRF](https://en.wikipedia.org/wiki/Cross-site_request_forgery)\_token. This parameter is optional but highly recommended. You should store the value of the CSRF token in the user’s session to be validated when they return |\n\nIf the user approves the authorization request, they'll be redirected back to the specified redirect uri with the following parameters in the query string.\n\n| Field | Value |\n| --- | --- |\n| code | the authorization code |\n| state | the state parameter sent in the original request. You should compare this value with the value stored in the user’s session to ensure the authorization code obtained is in response to requests made by this client rather than another client application |\n\n#### Example Call\n\nRequestResponse\n\n```\n$_SESSION['state'] = $state = bin2hex(random_bytes(40)); //mysecretstate for example\n \n$query = http_build_query([\n  'client_id' => 'client-id',\n  'redirect_uri' => 'https://third-party-app.com/callback',\n  'response_type' => 'code',\n  'scope' => '',\n  'state' => $state,\n]);\n \nredirect('https://my-ats.com/v2/api/oauth/authorize?' . $query);\n\n```\n\n## Step 2\n\nIf the state parameter matches, then the consumer should issue a POST request to our application\_`(https://docs.tribepad.com/reference)`\_to request an access token. The request should include the following fields.\n\n| Field | Value |\n| --- | --- |\n| grant_type | authorization_code |\n| client_id | your provided client ID |\n| client_secret | your provided client secret |\n| redirect_uri | the same redirect URI the user was redirect back to specified in step 1 |\n| code | the authorization code from the query string |\n\n#### Example Call\n\nRequestResponse\n\n```\n$state = $_SESSION['state'] ?? '';\n\nif (strlen($state) > 0 && $state !== $_GET['state']) {\n  throw new InvalidArgumentException('Invalid state provided.');\n}\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'https://my-ats.com/v2/api/oauth/token', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n  'form_params' => [\n    'grant_type' => 'authorization_code',\n    'client_id' => 'client-id',\n    'client_secret' => 'client-secret',\n    'redirect_uri' => 'https://third-party-app.com/callback',\n    'code' => $_GET['code'],\n  ],\n]);\n\n$result = json_decode($response->getBody(), true);\n \nreturn $result['access_token'];\n\n```"
