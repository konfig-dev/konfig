hash: 5e36e3aaa6325f19a50cd1fa1bb4863d8a214b47640367cde19e962ad28f382a
methodObjects:
  - url: /absolute-redirect/{n}
    method: absolutelyRedirectsN
    httpMethod: get
    tag: Redirects
    typeScriptTag: redirects
    description: Absolutely 302 Redirects n times.
    parameters:
      - name: 'n'
        schema: int
        required: true
        description: ''
    responses:
      - statusCode: default
        description: A redirection.
  - url: /anything
    method: getData
    httpMethod: delete
    tag: Anything
    typeScriptTag: anything
    description: Returns anything passed in request data.
    parameters: []
    responses:
      - statusCode: '200'
        description: Anything passed in request
  - url: /anything
    method: getData
    httpMethod: get
    tag: Anything
    typeScriptTag: anything
    description: Returns anything passed in request data.
    parameters: []
    responses:
      - statusCode: '200'
        description: Anything passed in request
  - url: /anything
    method: getData
    httpMethod: patch
    tag: Anything
    typeScriptTag: anything
    description: Returns anything passed in request data.
    parameters: []
    responses:
      - statusCode: '200'
        description: Anything passed in request
  - url: /anything
    method: postRequestData
    httpMethod: post
    tag: Anything
    typeScriptTag: anything
    description: Returns anything passed in request data.
    parameters: []
    responses:
      - statusCode: '200'
        description: Anything passed in request
  - url: /anything
    method: putRequestData
    httpMethod: put
    tag: Anything
    typeScriptTag: anything
    description: Returns anything passed in request data.
    parameters: []
    responses:
      - statusCode: '200'
        description: Anything passed in request
  - url: /anything
    method: getPassedData
    httpMethod: trace
    tag: Anything
    typeScriptTag: anything
    description: Returns anything passed in request data.
    parameters: []
    responses:
      - statusCode: '200'
        description: Anything passed in request
  - url: /anything/{anything}
    method: getAnything
    httpMethod: delete
    tag: Anything
    typeScriptTag: anything
    description: Returns anything passed in request data.
    parameters: []
    responses:
      - statusCode: '200'
        description: Anything passed in request
  - url: /anything/{anything}
    method: getData
    httpMethod: get
    tag: Anything
    typeScriptTag: anything
    description: Returns anything passed in request data.
    parameters: []
    responses:
      - statusCode: '200'
        description: Anything passed in request
  - url: /anything/{anything}
    method: updateAnythingData
    httpMethod: patch
    tag: Anything
    typeScriptTag: anything
    description: Returns anything passed in request data.
    parameters: []
    responses:
      - statusCode: '200'
        description: Anything passed in request
  - url: /anything/{anything}
    method: returnRequestData
    httpMethod: post
    tag: Anything
    typeScriptTag: anything
    description: Returns anything passed in request data.
    parameters: []
    responses:
      - statusCode: '200'
        description: Anything passed in request
  - url: /anything/{anything}
    method: returnData
    httpMethod: put
    tag: Anything
    typeScriptTag: anything
    description: Returns anything passed in request data.
    parameters: []
    responses:
      - statusCode: '200'
        description: Anything passed in request
  - url: /anything/{anything}
    method: getPassedData
    httpMethod: trace
    tag: Anything
    typeScriptTag: anything
    description: Returns anything passed in request data.
    parameters: []
    responses:
      - statusCode: '200'
        description: Anything passed in request
  - url: /base64/{value}
    method: decodeBase64UrlString
    httpMethod: get
    tag: Dynamic data
    typeScriptTag: dynamicData
    description: Decodes base64url-encoded string.
    parameters:
      - name: value
        schema: string
        required: true
        description: ''
        example: VALUE
        default: SFRUUEJJTiBpcyBhd2Vzb21l
    responses:
      - statusCode: '200'
        description: Decoded base64 content.
  - url: /basic-auth/{user}/{passwd}
    method: promptAuthorizationUsingHttpGet
    httpMethod: get
    tag: Auth
    typeScriptTag: auth
    description: Prompts the user for authorization using HTTP Basic Auth.
    parameters:
      - name: user
        schema: string
        required: true
        description: ''
        example: USER
      - name: passwd
        schema: string
        required: true
        description: ''
        example: PASSWD
    responses:
      - statusCode: '200'
        description: Sucessful authentication.
      - statusCode: '401'
        description: Unsuccessful authentication.
  - url: /bearer
    method: promptAuthorization
    httpMethod: get
    tag: Auth
    typeScriptTag: auth
    description: Prompts the user for authorization using bearer authentication.
    parameters:
      - name: authorization
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: Sucessful authentication.
      - statusCode: '401'
        description: Unsuccessful authentication.
  - url: /brotli
    method: brotliGetData
    httpMethod: get
    tag: Response formats
    typeScriptTag: responseFormats
    description: Returns Brotli-encoded data.
    parameters: []
    responses:
      - statusCode: '200'
        description: Brotli-encoded data.
  - url: /bytes/{n}
    method: getRandomBytes
    httpMethod: get
    tag: Dynamic data
    typeScriptTag: dynamicData
    description: Returns n random bytes generated with given seed
    parameters:
      - name: 'n'
        schema: int
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: Bytes.
  - url: /cache
    method: notModifiedGet
    httpMethod: get
    tag: Response inspection
    typeScriptTag: responseInspection
    description: >-
      Returns a 304 if an If-Modified-Since header or If-None-Match is present.
      Returns the same as a GET otherwise.
    parameters:
      - name: ifModifiedSince
        schema: string
        description: ''
      - name: ifNoneMatch
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: Cached response
      - statusCode: '304'
        description: Modified
  - url: /cache/{value}
    method: cacheControlSet
    httpMethod: get
    tag: Response inspection
    typeScriptTag: responseInspection
    description: Sets a Cache-Control header for n seconds.
    parameters:
      - name: value
        schema: integer
        required: true
        description: ''
        example: 0
    responses:
      - statusCode: '200'
        description: Cache control set
  - url: /cookies
    method: getData
    httpMethod: get
    tag: Cookies
    typeScriptTag: cookies
    description: Returns cookie data.
    parameters: []
    responses:
      - statusCode: '200'
        description: Set cookies.
  - url: /cookies/delete
    method: deleteRedirectToCookieList
    httpMethod: get
    tag: Cookies
    typeScriptTag: cookies
    description: >-
      Deletes cookie(s) as provided by the query string and redirects to cookie
      list.
    parameters:
      - name: freeform
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: Redirect to cookie list
  - url: /cookies/set
    method: setRedirect
    httpMethod: get
    tag: Cookies
    typeScriptTag: cookies
    description: >-
      Sets cookie(s) as provided by the query string and redirects to cookie
      list.
    parameters:
      - name: freeform
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: Redirect to cookie list
  - url: /cookies/set/{name}/{value}
    method: setCookieRedirect
    httpMethod: get
    tag: Cookies
    typeScriptTag: cookies
    description: Sets a cookie and redirects to cookie list.
    parameters:
      - name: name
        schema: string
        required: true
        description: ''
        example: NAME
      - name: value
        schema: string
        required: true
        description: ''
        example: VALUE
    responses:
      - statusCode: '200'
        description: Set cookies and redirects to cookie list.
  - url: /deflate
    method: deflateDataGet
    httpMethod: get
    tag: Response formats
    typeScriptTag: responseFormats
    description: Returns Deflate-encoded data.
    parameters: []
    responses:
      - statusCode: '200'
        description: Defalte-encoded data.
  - url: /delay/{delay}
    method: delayedResponseDelete
    httpMethod: delete
    tag: Dynamic data
    typeScriptTag: dynamicData
    description: Returns a delayed response (max of 10 seconds).
    parameters:
      - name: delay
        schema: int
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: A delayed response.
  - url: /delay/{delay}
    method: delayedResponseGet
    httpMethod: get
    tag: Dynamic data
    typeScriptTag: dynamicData
    description: Returns a delayed response (max of 10 seconds).
    parameters:
      - name: delay
        schema: int
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: A delayed response.
  - url: /delay/{delay}
    method: returnDelayedResponse
    httpMethod: patch
    tag: Dynamic data
    typeScriptTag: dynamicData
    description: Returns a delayed response (max of 10 seconds).
    parameters:
      - name: delay
        schema: int
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: A delayed response.
  - url: /delay/{delay}
    method: returnDelayedResponse
    httpMethod: post
    tag: Dynamic data
    typeScriptTag: dynamicData
    description: Returns a delayed response (max of 10 seconds).
    parameters:
      - name: delay
        schema: int
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: A delayed response.
  - url: /delay/{delay}
    method: returnDelayedResponse
    httpMethod: put
    tag: Dynamic data
    typeScriptTag: dynamicData
    description: Returns a delayed response (max of 10 seconds).
    parameters:
      - name: delay
        schema: int
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: A delayed response.
  - url: /delay/{delay}
    method: returnDelayedResponseTrace
    httpMethod: trace
    tag: Dynamic data
    typeScriptTag: dynamicData
    description: Returns a delayed response (max of 10 seconds).
    parameters:
      - name: delay
        schema: int
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: A delayed response.
  - url: /delete
    method: deleteRequestParameters
    httpMethod: delete
    tag: HTTP Methods
    typeScriptTag: httpMethods
    description: The request's DELETE parameters.
    parameters: []
    responses:
      - statusCode: '200'
        description: The request's DELETE parameters.
  - url: /deny
    method: deniedPageGet
    httpMethod: get
    tag: Response formats
    typeScriptTag: responseFormats
    description: Returns page denied by robots.txt rules.
    parameters: []
    responses:
      - statusCode: '200'
        description: Denied message
  - url: /digest-auth/{qop}/{user}/{passwd}
    method: digestAuthPrompt
    httpMethod: get
    tag: Auth
    typeScriptTag: auth
    description: Prompts the user for authorization using Digest Auth.
    parameters:
      - name: qop
        schema: string
        required: true
        description: auth or auth-int
        example: QOP
      - name: user
        schema: string
        required: true
        description: ''
        example: USER
      - name: passwd
        schema: string
        required: true
        description: ''
        example: PASSWD
    responses:
      - statusCode: '200'
        description: Sucessful authentication.
      - statusCode: '401'
        description: Unsuccessful authentication.
  - url: /digest-auth/{qop}/{user}/{passwd}/{algorithm}
    method: userAuthorizationDigest
    httpMethod: get
    tag: Auth
    typeScriptTag: auth
    description: Prompts the user for authorization using Digest Auth + Algorithm.
    parameters:
      - name: qop
        schema: string
        required: true
        description: auth or auth-int
        example: QOP
      - name: user
        schema: string
        required: true
        description: ''
        example: USER
      - name: passwd
        schema: string
        required: true
        description: ''
        example: PASSWD
      - name: algorithm
        schema: string
        required: true
        description: MD5, SHA-256, SHA-512
        example: ALGORITHM
        default: MD5
    responses:
      - statusCode: '200'
        description: Sucessful authentication.
      - statusCode: '401'
        description: Unsuccessful authentication.
  - url: /digest-auth/{qop}/{user}/{passwd}/{algorithm}/{stale_after}
    method: promptAuthorizationUsingDigest
    httpMethod: get
    tag: Auth
    typeScriptTag: auth
    description: Prompts the user for authorization using Digest Auth + Algorithm.
    parameters:
      - name: qop
        schema: string
        required: true
        description: auth or auth-int
        example: QOP
      - name: user
        schema: string
        required: true
        description: ''
        example: USER
      - name: passwd
        schema: string
        required: true
        description: ''
        example: PASSWD
      - name: algorithm
        schema: string
        required: true
        description: MD5, SHA-256, SHA-512
        example: ALGORITHM
        default: MD5
      - name: staleAfter
        schema: string
        required: true
        description: ''
        example: STALE_AFTER
        default: never
    responses:
      - statusCode: '200'
        description: Sucessful authentication.
      - statusCode: '401'
        description: Unsuccessful authentication.
  - url: /drip
    method: dripDataOverDuration
    httpMethod: get
    tag: Dynamic data
    typeScriptTag: dynamicData
    description: Drips data over a duration after an optional initial delay.
    parameters:
      - name: duration
        schema: number
        required: false
        description: The amount of time (in seconds) over which to drip each byte
        default: 2
      - name: numbytes
        schema: integer
        required: false
        description: The number of bytes to respond with
        default: 10
      - name: code
        schema: integer
        required: false
        description: The response code that will be returned
        default: 200
      - name: delay
        schema: number
        required: false
        description: The amount of time (in seconds) to delay before responding
        default: 2
    responses:
      - statusCode: '200'
        description: A dripped response.
  - url: /encoding/utf8
    method: utf8BodyGet
    httpMethod: get
    tag: Response formats
    typeScriptTag: responseFormats
    description: Returns a UTF-8 encoded body.
    parameters: []
    responses:
      - statusCode: '200'
        description: Encoded UTF-8 content.
  - url: /etag/{etag}
    method: resourceInspectionGet
    httpMethod: get
    tag: Response inspection
    typeScriptTag: responseInspection
    description: >-
      Assumes the resource has the given etag and responds to If-None-Match and
      If-Match headers appropriately.
    parameters:
      - name: ifNoneMatch
        schema: string
        description: ''
      - name: ifMatch
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: Normal response
      - statusCode: '412'
        description: match
  - url: /get
    method: requestQueryParametersGet
    httpMethod: get
    tag: HTTP Methods
    typeScriptTag: httpMethods
    description: The request's query parameters.
    parameters: []
    responses:
      - statusCode: '200'
        description: The request's query parameters.
  - url: /gzip
    method: gzipDataGet
    httpMethod: get
    tag: Response formats
    typeScriptTag: responseFormats
    description: Returns GZip-encoded data.
    parameters: []
    responses:
      - statusCode: '200'
        description: GZip-encoded data.
  - url: /headers
    method: incomingHeadersGet
    httpMethod: get
    tag: Request inspection
    typeScriptTag: requestInspection
    description: Return the incoming request's HTTP headers.
    parameters: []
    responses:
      - statusCode: '200'
        description: The request's headers.
  - url: /hidden-basic-auth/{user}/{passwd}
    method: promptUserAuthorization
    httpMethod: get
    tag: Auth
    typeScriptTag: auth
    description: Prompts the user for authorization using HTTP Basic Auth.
    parameters:
      - name: user
        schema: string
        required: true
        description: ''
        example: USER
      - name: passwd
        schema: string
        required: true
        description: ''
        example: PASSWD
    responses:
      - statusCode: '200'
        description: Sucessful authentication.
      - statusCode: '404'
        description: Unsuccessful authentication.
  - url: /html
    method: simpleHtmlGet
    httpMethod: get
    tag: Response formats
    typeScriptTag: responseFormats
    description: Returns a simple HTML document.
    parameters: []
    responses:
      - statusCode: '200'
        description: An HTML page.
  - url: /image
    method: getByAcceptHeader
    httpMethod: get
    tag: Images
    typeScriptTag: images
    description: Returns a simple image of the type suggest by the Accept header.
    parameters: []
    responses:
      - statusCode: '200'
        description: An image.
  - url: /image/jpeg
    method: getJpegImage
    httpMethod: get
    tag: Images
    typeScriptTag: images
    description: Returns a simple JPEG image.
    parameters: []
    responses:
      - statusCode: '200'
        description: A JPEG image.
  - url: /image/png
    method: getPngImage
    httpMethod: get
    tag: Images
    typeScriptTag: images
    description: Returns a simple PNG image.
    parameters: []
    responses:
      - statusCode: '200'
        description: A PNG image.
  - url: /image/svg
    method: getSvgImage
    httpMethod: get
    tag: Images
    typeScriptTag: images
    description: Returns a simple SVG image.
    parameters: []
    responses:
      - statusCode: '200'
        description: An SVG image.
  - url: /image/webp
    method: getWebpImage
    httpMethod: get
    tag: Images
    typeScriptTag: images
    description: Returns a simple WEBP image.
    parameters: []
    responses:
      - statusCode: '200'
        description: A WEBP image.
  - url: /ip
    method: ipAddressGet
    httpMethod: get
    tag: Request inspection
    typeScriptTag: requestInspection
    description: Returns the requester's IP Address.
    parameters: []
    responses:
      - statusCode: '200'
        description: The Requester's IP Address.
  - url: /json
    method: simpleJsonGet
    httpMethod: get
    tag: Response formats
    typeScriptTag: responseFormats
    description: Returns a simple JSON document.
    parameters: []
    responses:
      - statusCode: '200'
        description: An JSON document.
  - url: /links/{n}/{offset}
    method: generatePageContainingLinks
    httpMethod: get
    tag: Dynamic data
    typeScriptTag: dynamicData
    description: Generate a page containing n links to other pages which do the same.
    parameters:
      - name: 'n'
        schema: int
        required: true
        description: ''
      - name: offset
        schema: int
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: HTML links.
  - url: /patch
    method: updateRequestParameters
    httpMethod: patch
    tag: HTTP Methods
    typeScriptTag: httpMethods
    description: The request's PATCH parameters.
    parameters: []
    responses:
      - statusCode: '200'
        description: The request's PATCH parameters.
  - url: /post
    method: postRequestParameters
    httpMethod: post
    tag: HTTP Methods
    typeScriptTag: httpMethods
    description: The request's POST parameters.
    parameters: []
    responses:
      - statusCode: '200'
        description: The request's POST parameters.
  - url: /put
    method: putRequestParameters
    httpMethod: put
    tag: HTTP Methods
    typeScriptTag: httpMethods
    description: The request's PUT parameters.
    parameters: []
    responses:
      - statusCode: '200'
        description: The request's PUT parameters.
  - url: /range/{numbytes}
    method: streamRandomBytes
    httpMethod: get
    tag: Dynamic data
    typeScriptTag: dynamicData
    description: >-
      Streams n random bytes generated with given seed, at given chunk size per
      packet.
    parameters:
      - name: numbytes
        schema: int
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: Bytes.
  - url: /redirect-to
    method: toGivenUrlDelete
    httpMethod: delete
    tag: Redirects
    typeScriptTag: redirects
    description: 302/3XX Redirects to the given URL.
    parameters: []
    responses:
      - statusCode: default
        description: A redirection.
  - url: /redirect-to
    method: toGivenUrlGet
    httpMethod: get
    tag: Redirects
    typeScriptTag: redirects
    description: 302/3XX Redirects to the given URL.
    parameters:
      - name: url
        schema: string
        required: true
        description: ''
        example: URL
      - name: statusCode
        schema: int
        description: ''
    responses:
      - statusCode: default
        description: A redirection.
  - url: /redirect-to
    method: toGivenUrlPatch
    httpMethod: patch
    tag: Redirects
    typeScriptTag: redirects
    description: 302/3XX Redirects to the given URL.
    parameters: []
    responses:
      - statusCode: default
        description: A redirection.
  - url: /redirect-to
    method: toGivenUrlPost
    httpMethod: post
    tag: Redirects
    typeScriptTag: redirects
    description: 302/3XX Redirects to the given URL.
    parameters:
      - name: url
        schema: string
        required: true
        description: ''
        example: URL
      - name: status_code
        schema: int
        required: false
        description: ''
    responses:
      - statusCode: default
        description: A redirection.
  - url: /redirect-to
    method: givenUrlPutRedirect
    httpMethod: put
    tag: Redirects
    typeScriptTag: redirects
    description: 302/3XX Redirects to the given URL.
    parameters:
      - name: url
        schema: string
        required: true
        description: ''
        example: URL
      - name: status_code
        schema: int
        required: false
        description: ''
    responses:
      - statusCode: default
        description: A redirection.
  - url: /redirect-to
    method: toGivenUrlTrace
    httpMethod: trace
    tag: Redirects
    typeScriptTag: redirects
    description: 302/3XX Redirects to the given URL.
    parameters: []
    responses:
      - statusCode: default
        description: A redirection.
  - url: /redirect/{n}
    method: 302RedirectsN
    httpMethod: get
    tag: Redirects
    typeScriptTag: redirects
    description: 302 Redirects n times.
    parameters:
      - name: 'n'
        schema: int
        required: true
        description: ''
    responses:
      - statusCode: default
        description: A redirection.
  - url: /relative-redirect/{n}
    method: relatively302RedirectsN
    httpMethod: get
    tag: Redirects
    typeScriptTag: redirects
    description: Relatively 302 Redirects n times.
    parameters:
      - name: 'n'
        schema: int
        required: true
        description: ''
    responses:
      - statusCode: default
        description: A redirection.
  - url: /response-headers
    method: queryHeadersGet
    httpMethod: get
    tag: Response inspection
    typeScriptTag: responseInspection
    description: Returns a set of response headers from the query string.
    parameters:
      - name: freeform
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: Response headers
  - url: /response-headers
    method: getResponseHeaders
    httpMethod: post
    tag: Response inspection
    typeScriptTag: responseInspection
    description: Returns a set of response headers from the query string.
    parameters:
      - name: freeform
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: Response headers
  - url: /robots.txt
    method: getRobotsRules
    httpMethod: get
    tag: Response formats
    typeScriptTag: responseFormats
    description: Returns some robots.txt rules.
    parameters: []
    responses:
      - statusCode: '200'
        description: Robots file
  - url: /status/{codes}
    method: returnRandomCode
    httpMethod: delete
    tag: Status codes
    typeScriptTag: statusCodes
    description: Return status code or random status code if more than one are given
    parameters:
      - name: codes
        schema: string
        required: true
        description: ''
        example: CODES
    responses:
      - statusCode: '100'
        description: Informational responses
      - statusCode: '200'
        description: Success
      - statusCode: '300'
        description: Redirection
      - statusCode: '400'
        description: Client Errors
      - statusCode: '500'
        description: Server Errors
  - url: /status/{codes}
    method: returnRandomCode
    httpMethod: get
    tag: Status codes
    typeScriptTag: statusCodes
    description: Return status code or random status code if more than one are given
    parameters:
      - name: codes
        schema: string
        required: true
        description: ''
        example: CODES
    responses:
      - statusCode: '100'
        description: Informational responses
      - statusCode: '200'
        description: Success
      - statusCode: '300'
        description: Redirection
      - statusCode: '400'
        description: Client Errors
      - statusCode: '500'
        description: Server Errors
  - url: /status/{codes}
    method: returnRandomCode
    httpMethod: patch
    tag: Status codes
    typeScriptTag: statusCodes
    description: Return status code or random status code if more than one are given
    parameters:
      - name: codes
        schema: string
        required: true
        description: ''
        example: CODES
    responses:
      - statusCode: '100'
        description: Informational responses
      - statusCode: '200'
        description: Success
      - statusCode: '300'
        description: Redirection
      - statusCode: '400'
        description: Client Errors
      - statusCode: '500'
        description: Server Errors
  - url: /status/{codes}
    method: returnRandomCode
    httpMethod: post
    tag: Status codes
    typeScriptTag: statusCodes
    description: Return status code or random status code if more than one are given
    parameters:
      - name: codes
        schema: string
        required: true
        description: ''
        example: CODES
    responses:
      - statusCode: '100'
        description: Informational responses
      - statusCode: '200'
        description: Success
      - statusCode: '300'
        description: Redirection
      - statusCode: '400'
        description: Client Errors
      - statusCode: '500'
        description: Server Errors
  - url: /status/{codes}
    method: returnRandomCode
    httpMethod: put
    tag: Status codes
    typeScriptTag: statusCodes
    description: Return status code or random status code if more than one are given
    parameters:
      - name: codes
        schema: string
        required: true
        description: ''
        example: CODES
    responses:
      - statusCode: '100'
        description: Informational responses
      - statusCode: '200'
        description: Success
      - statusCode: '300'
        description: Redirection
      - statusCode: '400'
        description: Client Errors
      - statusCode: '500'
        description: Server Errors
  - url: /status/{codes}
    method: returnRandomCode
    httpMethod: trace
    tag: Status codes
    typeScriptTag: statusCodes
    description: Return status code or random status code if more than one are given
    parameters:
      - name: codes
        schema: string
        required: true
        description: ''
        example: CODES
    responses:
      - statusCode: '100'
        description: Informational responses
      - statusCode: '200'
        description: Success
      - statusCode: '300'
        description: Redirection
      - statusCode: '400'
        description: Client Errors
      - statusCode: '500'
        description: Server Errors
  - url: /stream-bytes/{n}
    method: streamRandomBytes
    httpMethod: get
    tag: Dynamic data
    typeScriptTag: dynamicData
    description: >-
      Streams n random bytes generated with given seed, at given chunk size per
      packet.
    parameters:
      - name: 'n'
        schema: int
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: Bytes.
  - url: /stream/{n}
    method: streamJsonResponses
    httpMethod: get
    tag: Dynamic data
    typeScriptTag: dynamicData
    description: Stream n JSON responses
    parameters:
      - name: 'n'
        schema: int
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: Streamed JSON responses.
  - url: /user-agent
    method: userAgentGet
    httpMethod: get
    tag: Request inspection
    typeScriptTag: requestInspection
    description: Return the incoming requests's User-Agent header.
    parameters: []
    responses:
      - statusCode: '200'
        description: The request's User-Agent header.
  - url: /uuid
    method: generateUuid
    httpMethod: get
    tag: Dynamic data
    typeScriptTag: dynamicData
    description: Return a UUID4.
    parameters: []
    responses:
      - statusCode: '200'
        description: A UUID4.
  - url: /xml
    method: simpleXmlGet
    httpMethod: get
    tag: Response formats
    typeScriptTag: responseFormats
    description: Returns a simple XML document.
    parameters: []
    responses:
      - statusCode: '200'
        description: An XML document.
numberOfSchemas: 1
apiDescription: >-
  A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b>
  <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
