hash: e5501f8b134aa139e0c2618e2804b7fbb96068c0ea83b69cfbe733aadab69742
methodObjects:
  - url: /api/v2
    method: getResourceCategories
    httpMethod: get
    tag: Other
    typeScriptTag: other
    description: Root resource
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/account/relay-auto-configs
    method: list
    httpMethod: get
    tag: Relay Proxy configurations
    typeScriptTag: relayProxyConfigurations
    description: List Relay Proxy configs
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/account/relay-auto-configs
    method: createNewConfig
    httpMethod: post
    tag: Relay Proxy configurations
    typeScriptTag: relayProxyConfigurations
    description: Create a new Relay Proxy config
    parameters:
      - name: name
        schema: string
        required: true
        description: ''
        example: NAME
      - name: policy
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/account/relay-auto-configs/{id}
    method: deleteById
    httpMethod: delete
    tag: Relay Proxy configurations
    typeScriptTag: relayProxyConfigurations
    description: Delete Relay Proxy config by ID
    parameters:
      - name: id
        schema: string
        required: true
        description: The relay auto config id
        example: ID
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/account/relay-auto-configs/{id}
    method: getSingleById
    httpMethod: get
    tag: Relay Proxy configurations
    typeScriptTag: relayProxyConfigurations
    description: Get Relay Proxy config
    parameters:
      - name: id
        schema: string
        required: true
        description: The relay auto config id
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/account/relay-auto-configs/{id}
    method: updateConfigPatch
    httpMethod: patch
    tag: Relay Proxy configurations
    typeScriptTag: relayProxyConfigurations
    description: Update a Relay Proxy config
    parameters:
      - name: id
        schema: string
        required: true
        description: The relay auto config id
        example: ID
      - name: patch
        schema: array
        required: true
        description: ''
      - name: comment
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '422'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/account/relay-auto-configs/{id}/reset
    method: resetSecretKeyWithExpiry
    httpMethod: post
    tag: Relay Proxy configurations
    typeScriptTag: relayProxyConfigurations
    description: Reset Relay Proxy configuration key
    parameters:
      - name: id
        schema: string
        required: true
        description: The Relay Proxy configuration ID
        example: ID
      - name: expiry
        schema: integer
        description: >-
          An expiration time for the old Relay Proxy configuration key,
          expressed as a Unix epoch time in milliseconds. By default, the Relay
          Proxy configuration will expire immediately.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/applications
    method: listApplications
    httpMethod: get
    tag: Applications (beta)
    typeScriptTag: applicationsBeta
    description: Get applications
    parameters:
      - name: filter
        schema: string
        description: >-
          Accepts filter by `key`, `name`, `kind`, and `autoAdded`. Example:
          `filter=kind anyOf ['mobile', 'server'],key equals 'test-key'`. To
          learn more about the filter syntax, read [Filtering applications and
          application
          versions](https://apidocs.launchdarkly.com)#filtering-contexts-and-context-instances).
      - name: limit
        schema: integer
        description: The number of applications to return. Defaults to 10.
      - name: offset
        schema: integer
        description: >-
          Where to start in the list. Use this with pagination. For example, an
          offset of 10 skips the first ten items and then returns the next items
          in the list, up to the query `limit`.
      - name: sort
        schema: string
        description: >-
          Accepts sorting order and fields. Fields can be comma separated.
          Possible fields are `creationDate`, `name`. Examples: `sort=name` sort
          by names ascending, `sort=-name,creationDate` sort by names descending
          and creationDate ascending.
      - name: expand
        schema: string
        description: >-
          A comma-separated list of properties that can reveal additional
          information in the response. Options: `flags`.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/applications/{applicationKey}
    method: removeApplication
    httpMethod: delete
    tag: Applications (beta)
    typeScriptTag: applicationsBeta
    description: Delete application
    parameters:
      - name: applicationKey
        schema: string
        required: true
        description: The application key
        example: APPLICATIONKEY
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/applications/{applicationKey}
    method: getApplicationByKey
    httpMethod: get
    tag: Applications (beta)
    typeScriptTag: applicationsBeta
    description: Get application by key
    parameters:
      - name: applicationKey
        schema: string
        required: true
        description: The application key
        example: APPLICATIONKEY
      - name: expand
        schema: string
        description: >-
          A comma-separated list of properties that can reveal additional
          information in the response. Options: `flags`.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/applications/{applicationKey}
    method: updateApplicationPatch
    httpMethod: patch
    tag: Applications (beta)
    typeScriptTag: applicationsBeta
    description: Update application
    parameters:
      - name: applicationKey
        schema: string
        required: true
        description: The application key
        example: APPLICATIONKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/applications/{applicationKey}/versions
    method: getApplicationVersions
    httpMethod: get
    tag: Applications (beta)
    typeScriptTag: applicationsBeta
    description: Get application versions by application key
    parameters:
      - name: filter
        schema: string
        description: >-
          Accepts filter by `key`, `name`, `supported`, and `autoAdded`.
          Example: `filter=key equals 'test-key'`. To learn more about the
          filter syntax, read [Filtering applications and application
          versions](https://apidocs.launchdarkly.com)#filtering-contexts-and-context-instances).
      - name: applicationKey
        schema: string
        required: true
        description: The application key
        example: APPLICATIONKEY
      - name: limit
        schema: integer
        description: The number of versions to return. Defaults to 50.
      - name: offset
        schema: integer
        description: >-
          Where to start in the list. Use this with pagination. For example, an
          offset of 10 skips the first ten items and then returns the next items
          in the list, up to the query `limit`.
      - name: sort
        schema: string
        description: >-
          Accepts sorting order and fields. Fields can be comma separated.
          Possible fields are `creationDate`, `name`. Examples: `sort=name` sort
          by names ascending, `sort=-name,creationDate` sort by names descending
          and creationDate ascending.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/applications/{applicationKey}/versions/{versionKey}
    method: removeVersion
    httpMethod: delete
    tag: Applications (beta)
    typeScriptTag: applicationsBeta
    description: Delete application version
    parameters:
      - name: applicationKey
        schema: string
        required: true
        description: The application key
        example: APPLICATIONKEY
      - name: versionKey
        schema: string
        required: true
        description: The application version key
        example: VERSIONKEY
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/applications/{applicationKey}/versions/{versionKey}
    method: updateVersionPatch
    httpMethod: patch
    tag: Applications (beta)
    typeScriptTag: applicationsBeta
    description: Update application version
    parameters:
      - name: applicationKey
        schema: string
        required: true
        description: The application key
        example: APPLICATIONKEY
      - name: versionKey
        schema: string
        required: true
        description: The application version key
        example: VERSIONKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/approval-requests
    method: list
    httpMethod: get
    tag: Approvals
    typeScriptTag: approvals
    description: List approval requests
    parameters:
      - name: filter
        schema: string
        description: >-
          A comma-separated list of filters. Each filter is of the form `field
          operator value`. Supported fields are explained above.
      - name: expand
        schema: string
        description: >-
          A comma-separated list of fields to expand in the response. Supported
          fields are explained above.
      - name: limit
        schema: integer
        description: >-
          The number of approvals to return. Defaults to 20. Maximum limit is
          200.
      - name: offset
        schema: integer
        description: >-
          Where to start in the list. Use this with pagination. For example, an
          offset of 10 skips the first ten items and then returns the next items
          in the list, up to the query `limit`.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/approval-requests
    method: createRequestFlag
    httpMethod: post
    tag: Approvals
    typeScriptTag: approvals
    description: Create approval request
    parameters:
      - name: description
        schema: string
        required: true
        description: ''
        example: Requesting to update targeting
      - name: resourceId
        schema: string
        required: true
        description: ''
        example: RESOURCEID
      - name: comment
        schema: string
        required: false
        description: ''
        example: optional comment
      - name: instructions
        schema: array
        required: true
        description: ''
      - name: notifyMemberIds
        schema: array
        required: false
        description: ''
        example:
          - 1234a56b7c89d012345e678f
      - name: notifyTeamKeys
        schema: array
        required: false
        description: ''
        example:
          - example-reviewer-team
      - name: integrationConfig
        schema: object
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/approval-requests/{id}
    method: deleteRequest
    httpMethod: delete
    tag: Approvals
    typeScriptTag: approvals
    description: Delete approval request
    parameters:
      - name: id
        schema: string
        required: true
        description: The approval request ID
        example: ID
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/approval-requests/{id}
    method: getRequestById
    httpMethod: get
    tag: Approvals
    typeScriptTag: approvals
    description: Get approval request
    parameters:
      - name: id
        schema: string
        required: true
        description: The approval request ID
        example: ID
      - name: expand
        schema: string
        description: >-
          A comma-separated list of fields to expand in the response. Supported
          fields are explained above.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/approval-requests/{id}/apply
    method: applyRequestFlag
    httpMethod: post
    tag: Approvals
    typeScriptTag: approvals
    description: Apply approval request
    parameters:
      - name: id
        schema: string
        required: true
        description: The feature flag approval request ID
        example: ID
      - name: comment
        schema: string
        description: ''
        example: Looks good, thanks for updating
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/approval-requests/{id}/reviews
    method: reviewRequest
    httpMethod: post
    tag: Approvals
    typeScriptTag: approvals
    description: Review approval request
    parameters:
      - name: id
        schema: string
        required: true
        description: The approval request ID
        example: ID
      - name: kind
        schema: string
        description: ''
        example: approve
      - name: comment
        schema: string
        description: ''
        example: Looks good, thanks for updating
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/auditlog
    method: listAuditLogEntries
    httpMethod: get
    tag: Audit log
    typeScriptTag: auditLog
    description: List audit log entries
    parameters:
      - name: before
        schema: integer
        description: >-
          A timestamp filter, expressed as a Unix epoch time in milliseconds.
          All entries this returns occurred before the timestamp.
      - name: after
        schema: integer
        description: >-
          A timestamp filter, expressed as a Unix epoch time in milliseconds.
          All entries this returns occurred after the timestamp.
      - name: q
        schema: string
        description: >-
          Text to search for. You can search for the full or partial name of the
          resource.
      - name: limit
        schema: integer
        description: >-
          A limit on the number of audit log entries that return. Set between 1
          and 20. The default is 10.
      - name: spec
        schema: string
        description: >-
          A resource specifier that lets you filter audit log listings by
          resource
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/auditlog/{id}
    method: detailEntry
    httpMethod: get
    tag: Audit log
    typeScriptTag: auditLog
    description: Get audit log entry
    parameters:
      - name: id
        schema: string
        required: true
        description: The ID of the audit log entry
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/code-refs/extinctions
    method: listExtinctions
    httpMethod: get
    tag: Code references
    typeScriptTag: codeReferences
    description: List extinctions
    parameters:
      - name: repoName
        schema: string
        description: Filter results to a specific repository
      - name: branchName
        schema: string
        description: >-
          Filter results to a specific branch. By default, only the default
          branch will be queried for extinctions.
      - name: projKey
        schema: string
        description: Filter results to a specific project
      - name: flagKey
        schema: string
        description: Filter results to a specific flag key
      - name: from
        schema: integer
        description: >-
          Filter results to a specific timeframe based on commit time, expressed
          as a Unix epoch time in milliseconds. Must be used with `to`.
      - name: to
        schema: integer
        description: >-
          Filter results to a specific timeframe based on commit time, expressed
          as a Unix epoch time in milliseconds. Must be used with `from`.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/code-refs/repositories
    method: listRepositories
    httpMethod: get
    tag: Code references
    typeScriptTag: codeReferences
    description: List repositories
    parameters:
      - name: withBranches
        schema: string
        description: >-
          If set to any value, the endpoint returns repositories with associated
          branch data
      - name: withReferencesForDefaultBranch
        schema: string
        description: >-
          If set to any value, the endpoint returns repositories with associated
          branch data, as well as code references for the default git branch
      - name: projKey
        schema: string
        description: >-
          A LaunchDarkly project key. If provided, this filters code reference
          results to the specified project.
      - name: flagKey
        schema: string
        description: >-
          If set to any value, the endpoint returns repositories with associated
          branch data, as well as code references for the default git branch
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/code-refs/repositories
    method: createRepository
    httpMethod: post
    tag: Code references
    typeScriptTag: codeReferences
    description: Create repository
    parameters:
      - name: name
        schema: string
        required: true
        description: ''
        example: LaunchDarkly-Docs
      - name: sourceLink
        schema: string
        required: false
        description: ''
        example: https://github.com/launchdarkly/LaunchDarkly-Docs
      - name: commitUrlTemplate
        schema: string
        required: false
        description: ''
        example: https://github.com/launchdarkly/LaunchDarkly-Docs/commit/${sha}
      - name: hunkUrlTemplate
        schema: string
        required: false
        description: ''
        example: >-
          https://github.com/launchdarkly/LaunchDarkly-Docs/blob/${sha}/${filePath}#L${lineNumber}
      - name: type
        schema: string
        required: false
        description: ''
        example: github
      - name: defaultBranch
        schema: string
        required: false
        description: ''
        example: main
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/code-refs/repositories/{repo}
    method: deleteRepository
    httpMethod: delete
    tag: Code references
    typeScriptTag: codeReferences
    description: Delete repository
    parameters:
      - name: repo
        schema: string
        required: true
        description: The repository name
        example: REPO
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/code-refs/repositories/{repo}
    method: getRepositoryByRepo
    httpMethod: get
    tag: Code references
    typeScriptTag: codeReferences
    description: Get repository
    parameters:
      - name: repo
        schema: string
        required: true
        description: The repository name
        example: REPO
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/code-refs/repositories/{repo}
    method: updateRepositorySettings
    httpMethod: patch
    tag: Code references
    typeScriptTag: codeReferences
    description: Update repository
    parameters:
      - name: repo
        schema: string
        required: true
        description: The repository name
        example: REPO
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/code-refs/repositories/{repo}/branch-delete-tasks
    method: asynchronouslyDeleteBranches
    httpMethod: post
    tag: Code references
    typeScriptTag: codeReferences
    description: Delete branches
    parameters:
      - name: repo
        schema: string
        required: true
        description: The repository name to delete branches for.
        example: REPO
    responses:
      - statusCode: '200'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/code-refs/repositories/{repo}/branches
    method: listBranches
    httpMethod: get
    tag: Code references
    typeScriptTag: codeReferences
    description: List branches
    parameters:
      - name: repo
        schema: string
        required: true
        description: The repository name
        example: REPO
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/code-refs/repositories/{repo}/branches/{branch}
    method: getBranch
    httpMethod: get
    tag: Code references
    typeScriptTag: codeReferences
    description: Get branch
    parameters:
      - name: repo
        schema: string
        required: true
        description: The repository name
        example: REPO
      - name: branch
        schema: string
        required: true
        description: The url-encoded branch name
        example: BRANCH
      - name: projKey
        schema: string
        description: Filter results to a specific project
      - name: flagKey
        schema: string
        description: Filter results to a specific flag key
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/code-refs/repositories/{repo}/branches/{branch}
    method: upsertBranch
    httpMethod: put
    tag: Code references
    typeScriptTag: codeReferences
    description: Upsert branch
    parameters:
      - name: repo
        schema: string
        required: true
        description: The repository name
        example: REPO
      - name: branch
        schema: string
        required: true
        description: The URL-encoded branch name
        example: BRANCH
      - name: name
        schema: string
        required: true
        description: ''
        example: main
      - name: head
        schema: string
        required: true
        description: ''
        example: a94a8fe5ccb19ba61c4c0873d391e987982fbbd3
      - name: updateSequenceId
        schema: integer
        required: false
        description: ''
        example: 25
      - name: syncTime
        schema: integer
        required: true
        description: ''
        example: 0
      - name: references
        schema: array
        required: false
        description: ''
      - name: commitTime
        schema: integer
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/code-refs/repositories/{repo}/branches/{branch}/extinction-events
    method: createExtinction
    httpMethod: post
    tag: Code references
    typeScriptTag: codeReferences
    description: Create extinction
    parameters:
      - name: repo
        schema: string
        required: true
        description: The repository name
        example: REPO
      - name: branch
        schema: string
        required: true
        description: The URL-encoded branch name
        example: BRANCH
    responses:
      - statusCode: '200'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/code-refs/statistics
    method: getStatistics
    httpMethod: get
    tag: Code references
    typeScriptTag: codeReferences
    description: Get links to code reference repositories for each project
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/code-refs/statistics/{projectKey}
    method: getStatistics
    httpMethod: get
    tag: Code references
    typeScriptTag: codeReferences
    description: Get code references statistics for flags
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: flagKey
        schema: string
        description: Filter results to a specific flag key
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/destinations
    method: getAll
    httpMethod: get
    tag: Data Export destinations
    typeScriptTag: dataExportDestinations
    description: List destinations
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/destinations/{projectKey}/{environmentKey}
    method: createDestination
    httpMethod: post
    tag: Data Export destinations
    typeScriptTag: dataExportDestinations
    description: Create Data Export destination
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: name
        schema: string
        description: ''
        example: example-destination
      - name: kind
        schema: string
        description: ''
        example: google-pubsub
      - name: config
        schema: undefined
        description: ''
        example: '{"project":"test-prod","topic":"ld-pubsub-test-192301"}'
      - name: 'on'
        schema: boolean
        description: ''
        example: true
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/destinations/{projectKey}/{environmentKey}/{id}
    method: deleteById
    httpMethod: delete
    tag: Data Export destinations
    typeScriptTag: dataExportDestinations
    description: Delete Data Export destination
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: id
        schema: string
        required: true
        description: The Data Export destination ID
        example: ID
    responses:
      - statusCode: '204'
        description: Destination response
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/destinations/{projectKey}/{environmentKey}/{id}
    method: getSingleById
    httpMethod: get
    tag: Data Export destinations
    typeScriptTag: dataExportDestinations
    description: Get destination
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: id
        schema: string
        required: true
        description: The Data Export destination ID
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/destinations/{projectKey}/{environmentKey}/{id}
    method: updateDestinationPatch
    httpMethod: patch
    tag: Data Export destinations
    typeScriptTag: dataExportDestinations
    description: Update Data Export destination
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: id
        schema: string
        required: true
        description: The Data Export destination ID
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flag-links/projects/{projectKey}/flags/{featureFlagKey}
    method: listLinks
    httpMethod: get
    tag: Flag links (beta)
    typeScriptTag: flagLinksBeta
    description: List flag links
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flag-links/projects/{projectKey}/flags/{featureFlagKey}
    method: createFlagLink
    httpMethod: post
    tag: Flag links (beta)
    typeScriptTag: flagLinksBeta
    description: Create flag link
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: title
        schema: string
        description: ''
        example: Example link title
      - name: description
        schema: string
        description: ''
        example: Example link description
      - name: key
        schema: string
        description: ''
        example: flag-link-key-123abc
      - name: integrationKey
        schema: string
        description: ''
      - name: timestamp
        schema: integer
        description: ''
      - name: deepLink
        schema: string
        description: ''
        example: https://example.com/archives/123123123
      - name: metadata
        schema: object
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flag-links/projects/{projectKey}/flags/{featureFlagKey}/{id}
    method: deleteFlagLink
    httpMethod: delete
    tag: Flag links (beta)
    typeScriptTag: flagLinksBeta
    description: Delete flag link
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: id
        schema: string
        required: true
        description: The flag link ID or Key
        example: ID
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flag-links/projects/{projectKey}/flags/{featureFlagKey}/{id}
    method: updateFlagLink
    httpMethod: patch
    tag: Flag links (beta)
    typeScriptTag: flagLinksBeta
    description: Update flag link
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: id
        schema: string
        required: true
        description: The flag link ID
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flag-status/{projectKey}/{featureFlagKey}
    method: acrossEnvironments
    httpMethod: get
    tag: Feature flags
    typeScriptTag: featureFlags
    description: Get flag status across environments
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: env
        schema: string
        description: Optional environment filter
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flag-statuses/{projectKey}/{environmentKey}
    method: listFlagStatuses
    httpMethod: get
    tag: Feature flags
    typeScriptTag: featureFlags
    description: List feature flag statuses
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flag-statuses/{projectKey}/{environmentKey}/{featureFlagKey}
    method: getStatus
    httpMethod: get
    tag: Feature flags
    typeScriptTag: featureFlags
    description: Get feature flag status
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flags/{projectKey}
    method: list
    httpMethod: get
    tag: Feature flags
    typeScriptTag: featureFlags
    description: List feature flags
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: env
        schema: string
        description: Filter configurations by environment
      - name: tag
        schema: string
        description: Filter feature flags by tag
      - name: limit
        schema: integer
        description: >-
          The number of feature flags to return. Defaults to -1, which returns
          all flags
      - name: offset
        schema: integer
        description: >-
          Where to start in the list. Use this with pagination. For example, an
          offset of 10 skips the first ten items and then returns the next items
          in the list, up to the query `limit`.
      - name: archived
        schema: boolean
        description: >-
          Deprecated, use `filter=archived:true` instead. A boolean to filter
          the list to archived flags. When this is absent, only unarchived flags
          will be returned
      - name: summary
        schema: boolean
        description: >-
          By default, flags do _not_ include their lists of prerequisites,
          targets, or rules for each environment. Set `summary=0` to include
          these fields for each flag returned.
      - name: filter
        schema: string
        description: >-
          A comma-separated list of filters. Each filter is of the form
          field:value. Read the endpoint description for a full list of
          available filter fields.
      - name: sort
        schema: string
        description: >-
          A comma-separated list of fields to sort by. Fields prefixed by a dash
          ( - ) sort in descending order. Read the endpoint description for a
          full list of available sort fields.
      - name: compare
        schema: boolean
        description: >-
          A boolean to filter results by only flags that have differences
          between environments
      - name: expand
        schema: string
        description: >-
          A comma-separated list of fields to expand in the response. Supported
          fields are explained above.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flags/{projectKey}
    method: createFeatureFlag
    httpMethod: post
    tag: Feature flags
    typeScriptTag: featureFlags
    description: Create a feature flag
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: clone
        schema: string
        description: >-
          The key of the feature flag to be cloned. The key identifies the flag
          in your code. For example, setting `clone=flagKey` copies the full
          targeting configuration for all environments, including `on/off`
          state, from the original flag to the new flag.
      - name: tags
        schema: array
        required: false
        description: ''
        example:
          - example-tag
      - name: description
        schema: string
        required: false
        description: ''
        example: This flag controls the example widgets
      - name: name
        schema: string
        required: true
        description: ''
        example: My flag
      - name: key
        schema: string
        required: true
        description: ''
        example: flag-key-123abc
      - name: includeInSnippet
        schema: boolean
        required: false
        description: ''
      - name: clientSideAvailability
        schema: object
        required: false
        description: ''
      - name: variations
        schema: array
        required: false
        description: ''
        example:
          - value: true
          - value: false
      - name: temporary
        schema: boolean
        required: false
        description: ''
        example: false
      - name: customProperties
        schema: object
        required: false
        description: ''
      - name: defaults
        schema: object
        required: false
        description: ''
      - name: purpose
        schema: string
        required: false
        description: ''
        example: migration
      - name: migrationSettings
        schema: object
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/flags/{projectKey}/{environmentKey}/{featureFlagKey}/dependent-flags
    method: listDependentFlagsByEnv
    httpMethod: get
    tag: Feature flags (beta)
    typeScriptTag: featureFlagsBeta
    description: List dependent feature flags by environment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flags/{projectKey}/{featureFlagKey}
    method: deleteFlag
    httpMethod: delete
    tag: Feature flags
    typeScriptTag: featureFlags
    description: Delete feature flag
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key. The key identifies the flag in your code.
        example: FEATUREFLAGKEY
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flags/{projectKey}/{featureFlagKey}
    method: singleFlagByKey
    httpMethod: get
    tag: Feature flags
    typeScriptTag: featureFlags
    description: Get feature flag
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: env
        schema: string
        description: Filter configurations by environment
      - name: expand
        schema: string
        description: >-
          A comma-separated list of fields to expand in the response. Supported
          fields are explained above.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flags/{projectKey}/{featureFlagKey}
    method: updateFeatureFlag
    httpMethod: patch
    tag: Feature flags
    typeScriptTag: featureFlags
    description: Update feature flag
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key. The key identifies the flag in your code.
        example: FEATUREFLAGKEY
      - name: patch
        schema: array
        required: true
        description: ''
      - name: comment
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flags/{projectKey}/{featureFlagKey}/copy
    method: copyFlagSettings
    httpMethod: post
    tag: Feature flags
    typeScriptTag: featureFlags
    description: Copy feature flag
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key. The key identifies the flag in your code.
        example: FEATUREFLAGKEY
      - name: source
        schema: object
        required: true
        description: ''
      - name: target
        schema: object
        required: true
        description: ''
      - name: comment
        schema: string
        required: false
        description: ''
      - name: includedActions
        schema: array
        required: false
        description: ''
        example:
          - updateOn
      - name: excludedActions
        schema: array
        required: false
        description: ''
        example:
          - updateOn
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flags/{projectKey}/{featureFlagKey}/dependent-flags
    method: listDependentFlags
    httpMethod: get
    tag: Feature flags (beta)
    typeScriptTag: featureFlagsBeta
    description: List dependent feature flags
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/flags/{projectKey}/{featureFlagKey}/experiments/{environmentKey}/{metricKey}
    method: getLegacyExperimentResults
    httpMethod: get
    tag: Experiments (beta)
    typeScriptTag: experimentsBeta
    description: Get legacy experiment results (deprecated)
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: metricKey
        schema: string
        required: true
        description: The metric key
        example: METRICKEY
      - name: from
        schema: integer
        description: >-
          A timestamp denoting the start of the data collection period,
          expressed as a Unix epoch time in milliseconds.
      - name: to
        schema: integer
        description: >-
          A timestamp denoting the end of the data collection period, expressed
          as a Unix epoch time in milliseconds.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/flags/{projectKey}/{featureFlagKey}/expiring-targets/{environmentKey}
    method: getContextInstanceSegmentsMembershipByEnv
    httpMethod: get
    tag: Feature flags
    typeScriptTag: featureFlags
    description: Get expiring context targets for feature flag
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/flags/{projectKey}/{featureFlagKey}/expiring-targets/{environmentKey}
    method: updateExpiringContextTargets
    httpMethod: patch
    tag: Feature flags
    typeScriptTag: featureFlags
    description: Update expiring context targets on feature flag
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: comment
        schema: string
        required: false
        description: ''
        example: optional comment
      - name: instructions
        schema: array
        required: true
        description: ''
        example: &ref_0
          - kind: addExpireUserTargetDate
            userKey: sandy
            value: 1686412800000
            variationId: ce12d345-a1b2-4fb5-a123-ab123d4d5f5d
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/flags/{projectKey}/{featureFlagKey}/expiring-user-targets/{environmentKey}
    method: listExpiringUserTargets
    httpMethod: get
    tag: Feature flags
    typeScriptTag: featureFlags
    description: Get expiring user targets for feature flag
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/flags/{projectKey}/{featureFlagKey}/expiring-user-targets/{environmentKey}
    method: updateExpiringUserTargets
    httpMethod: patch
    tag: Feature flags
    typeScriptTag: featureFlags
    description: Update expiring user targets on feature flag
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: comment
        schema: string
        required: false
        description: ''
        example: optional comment
      - name: instructions
        schema: array
        required: true
        description: ''
        example: *ref_0
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flags/{projectKey}/{featureFlagKey}/triggers/{environmentKey}
    method: listTriggerWorkflows
    httpMethod: get
    tag: Flag triggers
    typeScriptTag: flagTriggers
    description: List flag triggers
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flags/{projectKey}/{featureFlagKey}/triggers/{environmentKey}
    method: createTriggerWorkflow
    httpMethod: post
    tag: Flag triggers
    typeScriptTag: flagTriggers
    description: Create flag trigger
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: comment
        schema: string
        required: false
        description: ''
        example: example comment
      - name: instructions
        schema: array
        required: false
        description: ''
        example:
          - kind: turnFlagOn
      - name: integrationKey
        schema: string
        required: true
        description: ''
        example: generic-trigger
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flags/{projectKey}/{featureFlagKey}/triggers/{environmentKey}/{id}
    method: deleteById
    httpMethod: delete
    tag: Flag triggers
    typeScriptTag: flagTriggers
    description: Delete flag trigger
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: id
        schema: string
        required: true
        description: The flag trigger ID
        example: ID
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flags/{projectKey}/{featureFlagKey}/triggers/{environmentKey}/{id}
    method: getTriggerById
    httpMethod: get
    tag: Flag triggers
    typeScriptTag: flagTriggers
    description: Get flag trigger by ID
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: id
        schema: string
        required: true
        description: The flag trigger ID
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flags/{projectKey}/{featureFlagKey}/triggers/{environmentKey}/{id}
    method: updateTriggerWorkflowPatch
    httpMethod: patch
    tag: Flag triggers
    typeScriptTag: flagTriggers
    description: Update flag trigger
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: id
        schema: string
        required: true
        description: The flag trigger ID
        example: ID
      - name: comment
        schema: string
        description: ''
        example: optional comment
      - name: instructions
        schema: array
        description: ''
        example:
          - kind: disableTrigger
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/flags/{projectKey}/{flagKey}/release
    method: getCurrentRelease
    httpMethod: get
    tag: Releases (beta)
    typeScriptTag: releasesBeta
    description: Get release for flag
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: flagKey
        schema: string
        required: true
        description: The flag key
        example: FLAGKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/v2/flags/{projectKey}/{flagKey}/release
    method: updateActiveReleasePatch
    httpMethod: patch
    tag: Releases (beta)
    typeScriptTag: releasesBeta
    description: Patch release for flag
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: flagKey
        schema: string
        required: true
        description: The flag key
        example: FLAGKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/integration-capabilities/big-segment-store
    method: listBigSegmentStoreIntegrations
    httpMethod: get
    tag: Integrations (beta)
    typeScriptTag: integrationsBeta
    description: List all big segment store integrations
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/integration-capabilities/big-segment-store/{projectKey}/{environmentKey}/{integrationKey}
    method: createPersistentStoreIntegration
    httpMethod: post
    tag: Integrations (beta)
    typeScriptTag: integrationsBeta
    description: Create big segment store integration
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: integrationKey
        schema: string
        required: true
        description: The integration key, either `redis` or `dynamodb`
        example: INTEGRATIONKEY
      - name: tags
        schema: array
        required: false
        description: ''
        example: &ref_1
          - example-tag
      - name: 'on'
        schema: boolean
        required: false
        description: ''
        example: false
      - name: config
        schema: object
        required: true
        description: ''
      - name: name
        schema: string
        required: false
        description: ''
        example: Sample integration
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/integration-capabilities/big-segment-store/{projectKey}/{environmentKey}/{integrationKey}/{integrationId}
    method: deleteBigSegmentStoreIntegration
    httpMethod: delete
    tag: Integrations (beta)
    typeScriptTag: integrationsBeta
    description: Delete big segment store integration
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: integrationKey
        schema: string
        required: true
        description: The integration key, either `redis` or `dynamodb`
        example: INTEGRATIONKEY
      - name: integrationId
        schema: string
        required: true
        description: The integration ID
        example: INTEGRATIONID
    responses:
      - statusCode: '204'
        description: Action completed successfully
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/integration-capabilities/big-segment-store/{projectKey}/{environmentKey}/{integrationKey}/{integrationId}
    method: getBigSegmentStoreIntegrationById
    httpMethod: get
    tag: Integrations (beta)
    typeScriptTag: integrationsBeta
    description: Get big segment store integration by ID
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: integrationKey
        schema: string
        required: true
        description: The integration key, either `redis` or `dynamodb`
        example: INTEGRATIONKEY
      - name: integrationId
        schema: string
        required: true
        description: The integration ID
        example: INTEGRATIONID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/integration-capabilities/big-segment-store/{projectKey}/{environmentKey}/{integrationKey}/{integrationId}
    method: updateBigSegmentStore
    httpMethod: patch
    tag: Integrations (beta)
    typeScriptTag: integrationsBeta
    description: Update big segment store integration
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: integrationKey
        schema: string
        required: true
        description: The integration key, either `redis` or `dynamodb`
        example: INTEGRATIONKEY
      - name: integrationId
        schema: string
        required: true
        description: The integration ID
        example: INTEGRATIONID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/integration-capabilities/featureStore
    method: listDeliveryConfigurations
    httpMethod: get
    tag: Integration delivery configurations (beta)
    typeScriptTag: integrationDeliveryConfigurationsBeta
    description: List all delivery configurations
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/integration-capabilities/featureStore/{projectKey}/{environmentKey}
    method: getDeliveryConfigurationsByEnvironment
    httpMethod: get
    tag: Integration delivery configurations (beta)
    typeScriptTag: integrationDeliveryConfigurationsBeta
    description: Get delivery configurations by environment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/integration-capabilities/featureStore/{projectKey}/{environmentKey}/{integrationKey}
    method: createDeliveryConfiguration
    httpMethod: post
    tag: Integration delivery configurations (beta)
    typeScriptTag: integrationDeliveryConfigurationsBeta
    description: Create delivery configuration
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: integrationKey
        schema: string
        required: true
        description: The integration key
        example: INTEGRATIONKEY
      - name: tags
        schema: array
        required: false
        description: ''
        example: *ref_1
      - name: 'on'
        schema: boolean
        required: false
        description: ''
        example: false
      - name: config
        schema: object
        required: true
        description: ''
      - name: name
        schema: string
        required: false
        description: ''
        example: Sample integration
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/integration-capabilities/featureStore/{projectKey}/{environmentKey}/{integrationKey}/{id}
    method: deleteDeliveryConfiguration
    httpMethod: delete
    tag: Integration delivery configurations (beta)
    typeScriptTag: integrationDeliveryConfigurationsBeta
    description: Delete delivery configuration
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: integrationKey
        schema: string
        required: true
        description: The integration key
        example: INTEGRATIONKEY
      - name: id
        schema: string
        required: true
        description: The configuration ID
        example: ID
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/integration-capabilities/featureStore/{projectKey}/{environmentKey}/{integrationKey}/{id}
    method: getById
    httpMethod: get
    tag: Integration delivery configurations (beta)
    typeScriptTag: integrationDeliveryConfigurationsBeta
    description: Get delivery configuration by ID
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: integrationKey
        schema: string
        required: true
        description: The integration key
        example: INTEGRATIONKEY
      - name: id
        schema: string
        required: true
        description: The configuration ID
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/integration-capabilities/featureStore/{projectKey}/{environmentKey}/{integrationKey}/{id}
    method: updateDeliveryConfiguration
    httpMethod: patch
    tag: Integration delivery configurations (beta)
    typeScriptTag: integrationDeliveryConfigurationsBeta
    description: Update delivery configuration
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: integrationKey
        schema: string
        required: true
        description: The integration key
        example: INTEGRATIONKEY
      - name: id
        schema: string
        required: true
        description: The configuration ID
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '422'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/integration-capabilities/featureStore/{projectKey}/{environmentKey}/{integrationKey}/{id}/validate
    method: validateDeliveryConfiguration
    httpMethod: post
    tag: Integration delivery configurations (beta)
    typeScriptTag: integrationDeliveryConfigurationsBeta
    description: Validate delivery configuration
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: integrationKey
        schema: string
        required: true
        description: The integration key
        example: INTEGRATIONKEY
      - name: id
        schema: string
        required: true
        description: The configuration ID
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/integrations/{integrationKey}
    method: listByIntegration
    httpMethod: get
    tag: Integration audit log subscriptions
    typeScriptTag: integrationAuditLogSubscriptions
    description: Get audit log subscriptions by integration
    parameters:
      - name: integrationKey
        schema: string
        required: true
        description: The integration key
        example: INTEGRATIONKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/integrations/{integrationKey}
    method: createSubscription
    httpMethod: post
    tag: Integration audit log subscriptions
    typeScriptTag: integrationAuditLogSubscriptions
    description: Create audit log subscription
    parameters:
      - name: integrationKey
        schema: string
        required: true
        description: The integration key
        example: INTEGRATIONKEY
      - name: tags
        schema: array
        required: false
        description: ''
        example:
          - testing-tag
      - name: name
        schema: string
        required: true
        description: ''
        example: Example audit log subscription.
      - name: statements
        schema: array
        required: false
        description: ''
      - name: 'on'
        schema: boolean
        required: false
        description: ''
        example: false
      - name: config
        schema: object
        required: true
        description: ''
        example:
          optional: an optional property
          required: the required property
          url: https://example.com
      - name: url
        schema: string
        required: false
        description: ''
      - name: apiKey
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/integrations/{integrationKey}/{id}
    method: deleteSubscription
    httpMethod: delete
    tag: Integration audit log subscriptions
    typeScriptTag: integrationAuditLogSubscriptions
    description: Delete audit log subscription
    parameters:
      - name: integrationKey
        schema: string
        required: true
        description: The integration key
        example: INTEGRATIONKEY
      - name: id
        schema: string
        required: true
        description: The subscription ID
        example: ID
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/integrations/{integrationKey}/{id}
    method: getById
    httpMethod: get
    tag: Integration audit log subscriptions
    typeScriptTag: integrationAuditLogSubscriptions
    description: Get audit log subscription by ID
    parameters:
      - name: integrationKey
        schema: string
        required: true
        description: The integration key
        example: INTEGRATIONKEY
      - name: id
        schema: string
        required: true
        description: The subscription ID
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/integrations/{integrationKey}/{id}
    method: updateSubscription
    httpMethod: patch
    tag: Integration audit log subscriptions
    typeScriptTag: integrationAuditLogSubscriptions
    description: Update audit log subscription
    parameters:
      - name: integrationKey
        schema: string
        required: true
        description: The integration key
        example: INTEGRATIONKEY
      - name: id
        schema: string
        required: true
        description: The ID of the audit log subscription
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/members
    method: listMembers
    httpMethod: get
    tag: Account members
    typeScriptTag: accountMembers
    description: List account members
    parameters:
      - name: limit
        schema: integer
        description: The number of members to return in the response. Defaults to 20.
      - name: offset
        schema: integer
        description: >-
          Where to start in the list. This is for use with pagination. For
          example, an offset of 10 skips the first ten items and then returns
          the next items in the list, up to the query `limit`.
      - name: filter
        schema: string
        description: >-
          A comma-separated list of filters. Each filter is of the form
          `field:value`. Supported fields are explained above.
      - name: sort
        schema: string
        description: >-
          A comma-separated list of fields to sort by. Fields prefixed by a dash
          ( - ) sort in descending order.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/members
    method: modifyMembersRoles
    httpMethod: patch
    tag: Account members (beta)
    typeScriptTag: accountMembersBeta
    description: Modify account members
    parameters:
      - name: comment
        schema: string
        required: false
        description: ''
        example: Optional comment about the update
      - name: instructions
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/members
    method: inviteNewMembers
    httpMethod: post
    tag: Account members
    typeScriptTag: accountMembers
    description: Invite new members
    parameters: []
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/members/{id}
    method: deleteById
    httpMethod: delete
    tag: Account members
    typeScriptTag: accountMembers
    description: Delete account member
    parameters:
      - name: id
        schema: string
        required: true
        description: The member ID
        example: ID
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/members/{id}
    method: getById
    httpMethod: get
    tag: Account members
    typeScriptTag: accountMembers
    description: Get account member
    parameters:
      - name: id
        schema: string
        required: true
        description: The member ID
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/members/{id}
    method: updateMemberPatch
    httpMethod: patch
    tag: Account members
    typeScriptTag: accountMembers
    description: Modify an account member
    parameters:
      - name: id
        schema: string
        required: true
        description: The member ID
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/members/{id}/teams
    method: addToTeams
    httpMethod: post
    tag: Account members
    typeScriptTag: accountMembers
    description: Add a member to teams
    parameters:
      - name: id
        schema: string
        required: true
        description: The member ID
        example: ID
      - name: teamKeys
        schema: array
        required: true
        description: ''
        example:
          - team1
          - team2
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/metrics/{projectKey}
    method: listForProject
    httpMethod: get
    tag: Metrics
    typeScriptTag: metrics
    description: List metrics
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: expand
        schema: string
        description: >-
          A comma-separated list of properties that can reveal additional
          information in the response.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/v2/metrics/{projectKey}
    method: createNewMetric
    httpMethod: post
    tag: Metrics
    typeScriptTag: metrics
    description: Create metric
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: tags
        schema: array
        required: false
        description: ''
        example:
          - example-tag
      - name: description
        schema: string
        required: false
        description: ''
        example: optional description
      - name: key
        schema: string
        required: true
        description: ''
        example: metric-key-123abc
      - name: name
        schema: string
        required: false
        description: ''
        example: Example metric
      - name: kind
        schema: string
        required: true
        description: ''
        example: custom
      - name: selector
        schema: string
        required: false
        description: ''
        example: .dropdown-toggle
      - name: urls
        schema: array
        required: false
        description: ''
        example: invalid example
      - name: isActive
        schema: boolean
        required: false
        description: ''
        example: true
      - name: isNumeric
        schema: boolean
        required: false
        description: ''
        example: false
      - name: unit
        schema: string
        required: false
        description: ''
        example: orders
      - name: eventKey
        schema: string
        required: false
        description: ''
        example: sales generated
      - name: successCriteria
        schema: string
        required: false
        description: ''
        example: HigherThanBaseline
      - name: randomizationUnits
        schema: array
        required: false
        description: ''
        example:
          - user
      - name: unitAggregationType
        schema: string
        required: false
        description: ''
        example: average
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/metrics/{projectKey}/{metricKey}
    method: deleteByProjectAndMetricKey
    httpMethod: delete
    tag: Metrics
    typeScriptTag: metrics
    description: Delete metric
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: metricKey
        schema: string
        required: true
        description: The metric key
        example: METRICKEY
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/metrics/{projectKey}/{metricKey}
    method: getSingleMetric
    httpMethod: get
    tag: Metrics
    typeScriptTag: metrics
    description: Get metric
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: metricKey
        schema: string
        required: true
        description: The metric key
        example: METRICKEY
      - name: expand
        schema: string
        description: >-
          A comma-separated list of properties that can reveal additional
          information in the response.
      - name: versionId
        schema: string
        description: The specific version ID of the metric
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/metrics/{projectKey}/{metricKey}
    method: updateByJsonPatch
    httpMethod: patch
    tag: Metrics
    typeScriptTag: metrics
    description: Update metric
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: metricKey
        schema: string
        required: true
        description: The metric key
        example: METRICKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/oauth/clients
    method: list
    httpMethod: get
    tag: OAuth2 Clients
    typeScriptTag: oAuth2Clients
    description: Get clients
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
  - url: /api/v2/oauth/clients
    method: createClient
    httpMethod: post
    tag: OAuth2 Clients
    typeScriptTag: oAuth2Clients
    description: Create a LaunchDarkly OAuth 2.0 client
    parameters:
      - name: description
        schema: string
        description: ''
      - name: name
        schema: string
        description: ''
      - name: redirectUri
        schema: string
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
  - url: /api/v2/oauth/clients/{clientId}
    method: deleteClientById
    httpMethod: delete
    tag: OAuth2 Clients
    typeScriptTag: oAuth2Clients
    description: Delete OAuth 2.0 client
    parameters:
      - name: clientId
        schema: string
        required: true
        description: The client ID
        example: CLIENTID
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/v2/oauth/clients/{clientId}
    method: getClientById
    httpMethod: get
    tag: OAuth2 Clients
    typeScriptTag: oAuth2Clients
    description: Get client by ID
    parameters:
      - name: clientId
        schema: string
        required: true
        description: The client ID
        example: CLIENTID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/v2/oauth/clients/{clientId}
    method: updateClientById
    httpMethod: patch
    tag: OAuth2 Clients
    typeScriptTag: oAuth2Clients
    description: Patch client by ID
    parameters:
      - name: clientId
        schema: string
        required: true
        description: The client ID
        example: CLIENTID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/v2/openapi.json
    method: getOpenapiSpec
    httpMethod: get
    tag: Other
    typeScriptTag: other
    description: Gets the OpenAPI spec in json
    parameters: []
    responses:
      - statusCode: '200'
        description: OpenAPI Spec
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects
    method: listProjectsDefault
    httpMethod: get
    tag: Projects
    typeScriptTag: projects
    description: List projects
    parameters:
      - name: limit
        schema: integer
        description: The number of projects to return in the response. Defaults to 20.
      - name: offset
        schema: integer
        description: >-
          Where to start in the list. Use this with pagination. For example, an
          offset of 10 skips the first ten items and returns the next `limit`
          items.
      - name: filter
        schema: string
        description: >-
          A comma-separated list of filters. Each filter is constructed as
          `field:value`.
      - name: sort
        schema: string
        description: >-
          A comma-separated list of fields to sort by. Fields prefixed by a dash
          ( - ) sort in descending order.
      - name: expand
        schema: string
        description: >-
          A comma-separated list of properties that can reveal additional
          information in the response.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects
    method: createNewProject
    httpMethod: post
    tag: Projects
    typeScriptTag: projects
    description: Create project
    parameters:
      - name: tags
        schema: array
        required: false
        description: ''
        example:
          - ops
      - name: name
        schema: string
        required: true
        description: ''
        example: My Project
      - name: key
        schema: string
        required: true
        description: ''
        example: project-key-123abc
      - name: includeInSnippetByDefault
        schema: boolean
        required: false
        description: ''
        example: true
      - name: defaultClientSideAvailability
        schema: object
        required: false
        description: ''
      - name: environments
        schema: array
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}
    method: deleteByProjectKey
    httpMethod: delete
    tag: Projects
    typeScriptTag: projects
    description: Delete project
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}
    method: singleByProjectKey
    httpMethod: get
    tag: Projects
    typeScriptTag: projects
    description: Get project
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key.
        example: PROJECTKEY
      - name: expand
        schema: string
        description: >-
          A comma-separated list of properties that can reveal additional
          information in the response.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}
    method: updateProjectPatch
    httpMethod: patch
    tag: Projects
    typeScriptTag: projects
    description: Update project
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}/context-kinds
    method: listContextKindsByProject
    httpMethod: get
    tag: Contexts
    typeScriptTag: contexts
    description: Get context kinds
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/v2/projects/{projectKey}/context-kinds/{key}
    method: createOrUpdateKind
    httpMethod: put
    tag: Contexts
    typeScriptTag: contexts
    description: Create or update context kind
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: key
        schema: string
        required: true
        description: The context kind key
        example: KEY
      - name: description
        schema: string
        required: false
        description: ''
        example: An example context kind for organizations
      - name: version
        schema: integer
        required: false
        description: ''
        example: 1
      - name: name
        schema: string
        required: true
        description: ''
        example: organization
      - name: hideInTargeting
        schema: boolean
        required: false
        description: ''
        example: false
      - name: archived
        schema: boolean
        required: false
        description: ''
        example: false
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/v2/projects/{projectKey}/environments
    method: listEnvironments
    httpMethod: get
    tag: Environments
    typeScriptTag: environments
    description: List environments
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: limit
        schema: integer
        description: The number of environments to return in the response. Defaults to 20.
      - name: offset
        schema: integer
        description: >-
          Where to start in the list. This is for use with pagination. For
          example, an offset of 10 skips the first ten items and then returns
          the next items in the list, up to the query `limit`.
      - name: filter
        schema: string
        description: >-
          A comma-separated list of filters. Each filter is of the form
          `field:value`.
      - name: sort
        schema: string
        description: >-
          A comma-separated list of fields to sort by. Fields prefixed by a dash
          ( - ) sort in descending order.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}/environments
    method: createNewEnvironment
    httpMethod: post
    tag: Environments
    typeScriptTag: environments
    description: Create environment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: tags
        schema: array
        required: false
        description: ''
        example:
          - ops
      - name: name
        schema: string
        required: true
        description: ''
        example: My Environment
      - name: key
        schema: string
        required: true
        description: ''
        example: environment-key-123abc
      - name: color
        schema: string
        required: true
        description: ''
        example: F5A623
      - name: defaultTtl
        schema: integer
        required: false
        description: ''
        example: 5
      - name: secureMode
        schema: boolean
        required: false
        description: ''
        example: true
      - name: defaultTrackEvents
        schema: boolean
        required: false
        description: ''
        example: false
      - name: confirmChanges
        schema: boolean
        required: false
        description: ''
        example: false
      - name: requireComments
        schema: boolean
        required: false
        description: ''
        example: false
      - name: source
        schema: object
        required: false
        description: ''
      - name: critical
        schema: boolean
        required: false
        description: ''
        example: true
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}/environments/{environmentKey}
    method: removeByEnvironmentKey
    httpMethod: delete
    tag: Environments
    typeScriptTag: environments
    description: Delete environment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}/environments/{environmentKey}
    method: getByProjectAndKey
    httpMethod: get
    tag: Environments
    typeScriptTag: environments
    description: Get environment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}/environments/{environmentKey}
    method: updateEnvironmentPatch
    httpMethod: patch
    tag: Environments
    typeScriptTag: environments
    description: Update environment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}/environments/{environmentKey}/apiKey
    method: resetSdkKey
    httpMethod: post
    tag: Environments
    typeScriptTag: environments
    description: Reset environment SDK key
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: expiry
        schema: integer
        description: >-
          The time at which you want the old SDK key to expire, in UNIX
          milliseconds. By default, the key expires immediately. During the
          period between this call and the time when the old SDK key expires,
          both the old SDK key and the new SDK key will work.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/environments/{environmentKey}/context-attributes
    method: getAttributeNames
    httpMethod: get
    tag: Contexts
    typeScriptTag: contexts
    description: Get context attribute names
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: filter
        schema: string
        description: >-
          A comma-separated list of context filters. This endpoint only accepts
          `kind` filters, with the `equals` operator, and `name` filters, with
          the `startsWith` operator. To learn more about the filter syntax, read
          [Filtering contexts and context
          instances](https://apidocs.launchdarkly.com).
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/environments/{environmentKey}/context-attributes/{attributeName}
    method: getContextAttributeValues
    httpMethod: get
    tag: Contexts
    typeScriptTag: contexts
    description: Get context attribute values
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: attributeName
        schema: string
        required: true
        description: The attribute name
        example: ATTRIBUTENAME
      - name: filter
        schema: string
        description: >-
          A comma-separated list of context filters. This endpoint only accepts
          `kind` filters, with the `equals` operator, and `value` filters, with
          the `startsWith` operator. To learn more about the filter syntax, read
          [Filtering contexts and context
          instances](https://apidocs.launchdarkly.com).
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/environments/{environmentKey}/context-instances/search
    method: searchContextInstances
    httpMethod: post
    tag: Contexts
    typeScriptTag: contexts
    description: Search for context instances
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: limit
        schema: integer
        description: >-
          Specifies the maximum number of items in the collection to return
          (max: 50, default: 20)
      - name: continuationToken
        schema: string
        description: >-
          Limits results to context instances with sort values after the value
          specified. You can use this for pagination, however, we recommend
          using the `next` link we provide instead.
      - name: sort
        schema: string
        description: >-
          Specifies a field by which to sort. LaunchDarkly supports sorting by
          timestamp in ascending order by specifying `ts` for this value, or
          descending order by specifying `-ts`.
      - name: filter
        schema: string
        description: >-
          A comma-separated list of context filters. This endpoint only accepts
          an `applicationId` filter. To learn more about the filter syntax, read
          [Filtering contexts and context
          instances](https://apidocs.launchdarkly.com).
      - name: includeTotalCount
        schema: boolean
        description: >-
          Specifies whether to include or omit the total count of matching
          context instances. Defaults to true.
      - name: filter
        schema: string
        description: ''
        example: >-
          {"filter": "kindKeys:{"contains": ["user:Henry"]},"sort":
          "-ts","limit": 50}
      - name: sort
        schema: string
        description: ''
        example: '-ts'
      - name: limit
        schema: integer
        description: ''
        example: 10
      - name: continuationToken
        schema: string
        description: ''
        example: QAGFKH1313KUGI2351
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/environments/{environmentKey}/context-instances/{id}
    method: deleteContextInstance
    httpMethod: delete
    tag: Contexts
    typeScriptTag: contexts
    description: Delete context instances
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: id
        schema: string
        required: true
        description: The context instance ID
        example: ID
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/environments/{environmentKey}/context-instances/{id}
    method: getContextInstances
    httpMethod: get
    tag: Contexts
    typeScriptTag: contexts
    description: Get context instances
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: id
        schema: string
        required: true
        description: The context instance ID
        example: ID
      - name: limit
        schema: integer
        description: >-
          Specifies the maximum number of context instances to return (max: 50,
          default: 20)
      - name: continuationToken
        schema: string
        description: >-
          Limits results to context instances with sort values after the value
          specified. You can use this for pagination, however, we recommend
          using the `next` link we provide instead.
      - name: sort
        schema: string
        description: >-
          Specifies a field by which to sort. LaunchDarkly supports sorting by
          timestamp in ascending order by specifying `ts` for this value, or
          descending order by specifying `-ts`.
      - name: filter
        schema: string
        description: >-
          A comma-separated list of context filters. This endpoint only accepts
          an `applicationId` filter. To learn more about the filter syntax, read
          [Filtering contexts and context
          instances](https://apidocs.launchdarkly.com).
      - name: includeTotalCount
        schema: boolean
        description: >-
          Specifies whether to include or omit the total count of matching
          context instances. Defaults to true.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/environments/{environmentKey}/contexts/search
    method: searchContexts
    httpMethod: post
    tag: Contexts
    typeScriptTag: contexts
    description: Search for contexts
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: limit
        schema: integer
        description: >-
          Specifies the maximum number of items in the collection to return
          (max: 50, default: 20)
      - name: continuationToken
        schema: string
        description: >-
          Limits results to contexts with sort values after the value specified.
          You can use this for pagination, however, we recommend using the
          `next` link we provide instead.
      - name: sort
        schema: string
        description: >-
          Specifies a field by which to sort. LaunchDarkly supports sorting by
          timestamp in ascending order by specifying `ts` for this value, or
          descending order by specifying `-ts`.
      - name: filter
        schema: string
        description: >-
          A comma-separated list of context filters. To learn more about the
          filter syntax, read [Filtering contexts and context
          instances](https://apidocs.launchdarkly.com).
      - name: includeTotalCount
        schema: boolean
        description: >-
          Specifies whether to include or omit the total count of matching
          contexts. Defaults to true.
      - name: filter
        schema: string
        description: ''
        example: '*.name startsWith Jo,kind anyOf ["user","organization"]'
      - name: sort
        schema: string
        description: ''
        example: '-ts'
      - name: limit
        schema: integer
        description: ''
        example: 10
      - name: continuationToken
        schema: string
        description: ''
        example: QAGFKH1313KUGI2351
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/environments/{environmentKey}/contexts/{contextKind}/{contextKey}/flags/{featureFlagKey}
    method: updateSettingsForContext
    httpMethod: put
    tag: Context settings
    typeScriptTag: contextSettings
    description: Update flag settings for context
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: contextKind
        schema: string
        required: true
        description: The context kind
        example: CONTEXTKIND
      - name: contextKey
        schema: string
        required: true
        description: The context key
        example: CONTEXTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: setting
        schema: undefined
        description: ''
        example: existing_variation_value_to_use
      - name: comment
        schema: string
        description: ''
        example: make sure this context experiences a specific variation
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/environments/{environmentKey}/contexts/{kind}/{key}
    method: getByKindAndKey
    httpMethod: get
    tag: Contexts
    typeScriptTag: contexts
    description: Get contexts
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: kind
        schema: string
        required: true
        description: The context kind
        example: KIND
      - name: key
        schema: string
        required: true
        description: The context key
        example: KEY
      - name: limit
        schema: integer
        description: >-
          Specifies the maximum number of items in the collection to return
          (max: 50, default: 20)
      - name: continuationToken
        schema: string
        description: >-
          Limits results to contexts with sort values after the value specified.
          You can use this for pagination, however, we recommend using the
          `next` link we provide instead.
      - name: sort
        schema: string
        description: >-
          Specifies a field by which to sort. LaunchDarkly supports sorting by
          timestamp in ascending order by specifying `ts` for this value, or
          descending order by specifying `-ts`.
      - name: filter
        schema: string
        description: >-
          A comma-separated list of context filters. This endpoint only accepts
          an `applicationId` filter. To learn more about the filter syntax, read
          [Filtering contexts and context
          instances](https://apidocs.launchdarkly.com).
      - name: includeTotalCount
        schema: boolean
        description: >-
          Specifies whether to include or omit the total count of matching
          contexts. Defaults to true.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}/environments/{environmentKey}/experiments
    method: listExperimentsInEnvironment
    httpMethod: get
    tag: Experiments (beta)
    typeScriptTag: experimentsBeta
    description: Get experiments
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: limit
        schema: integer
        description: The maximum number of experiments to return. Defaults to 20.
      - name: offset
        schema: integer
        description: >-
          Where to start in the list. Use this with pagination. For example, an
          offset of 10 skips the first ten items and then returns the next items
          in the list, up to the query `limit`.
      - name: filter
        schema: string
        description: >-
          A comma-separated list of filters. Each filter is of the form
          `field:value`. Supported fields are explained above.
      - name: expand
        schema: string
        description: >-
          A comma-separated list of properties that can reveal additional
          information in the response. Supported fields are explained above.
      - name: lifecycleState
        schema: string
        description: >-
          A comma-separated list of experiment archived states. Supports
          `archived`, `active`, or both. Defaults to `active` experiments.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}/environments/{environmentKey}/experiments
    method: createNew
    httpMethod: post
    tag: Experiments (beta)
    typeScriptTag: experimentsBeta
    description: Create experiment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: description
        schema: string
        required: false
        description: ''
        example: An example experiment, used in testing
      - name: name
        schema: string
        required: true
        description: ''
        example: Example experiment
      - name: maintainerId
        schema: string
        required: false
        description: ''
        example: 12ab3c45de678910fgh12345
      - name: key
        schema: string
        required: true
        description: ''
        example: experiment-key-123abc
      - name: iteration
        schema: object
        required: true
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/environments/{environmentKey}/experiments/{experimentKey}
    method: getDetails
    httpMethod: get
    tag: Experiments (beta)
    typeScriptTag: experimentsBeta
    description: Get experiment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: experimentKey
        schema: string
        required: true
        description: The experiment key
        example: EXPERIMENTKEY
      - name: expand
        schema: string
        description: >-
          A comma-separated list of properties that can reveal additional
          information in the response. Supported fields are explained above.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/environments/{environmentKey}/experiments/{experimentKey}
    method: updateSemanticPatch
    httpMethod: patch
    tag: Experiments (beta)
    typeScriptTag: experimentsBeta
    description: Patch experiment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: experimentKey
        schema: string
        required: true
        description: The experiment key
        example: EXPERIMENTKEY
      - name: comment
        schema: string
        required: false
        description: ''
        example: Optional comment
      - name: instructions
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/environments/{environmentKey}/experiments/{experimentKey}/iterations
    method: createIteration
    httpMethod: post
    tag: Experiments (beta)
    typeScriptTag: experimentsBeta
    description: Create iteration
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: experimentKey
        schema: string
        required: true
        description: The experiment key
        example: EXPERIMENTKEY
      - name: hypothesis
        schema: string
        required: true
        description: ''
        example: Example hypothesis, the new button placement will increase conversion
      - name: canReshuffleTraffic
        schema: boolean
        required: false
        description: ''
        example: true
      - name: metrics
        schema: array
        required: true
        description: ''
      - name: primarySingleMetricKey
        schema: string
        required: false
        description: ''
        example: metric-key-123abc
      - name: primaryFunnelKey
        schema: string
        required: false
        description: ''
        example: metric-group-key-123abc
      - name: treatments
        schema: array
        required: true
        description: ''
      - name: flags
        schema: object
        required: true
        description: ''
      - name: randomizationUnit
        schema: string
        required: false
        description: ''
        example: user
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/environments/{environmentKey}/experiments/{experimentKey}/metric-groups/{metricGroupKey}/results
    method: getResultsForMetricGroup
    httpMethod: get
    tag: Experiments (beta)
    typeScriptTag: experimentsBeta
    description: Get experiment results for metric group
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: experimentKey
        schema: string
        required: true
        description: The experiment key
        example: EXPERIMENTKEY
      - name: metricGroupKey
        schema: string
        required: true
        description: The metric group key
        example: METRICGROUPKEY
      - name: iterationId
        schema: string
        description: The iteration ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/environments/{environmentKey}/experiments/{experimentKey}/metrics/{metricKey}/results
    method: getExperimentMetricResults
    httpMethod: get
    tag: Experiments (beta)
    typeScriptTag: experimentsBeta
    description: Get experiment results
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: experimentKey
        schema: string
        required: true
        description: The experiment key
        example: EXPERIMENTKEY
      - name: metricKey
        schema: string
        required: true
        description: The metric key
        example: METRICKEY
      - name: iterationId
        schema: string
        description: The iteration ID
      - name: expand
        schema: string
        description: >-
          A comma-separated list of fields to expand in the response. Supported
          fields are explained above.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}/environments/{environmentKey}/flags/evaluate
    method: evaluateFlagsForContextInstance
    httpMethod: post
    tag: Contexts
    typeScriptTag: contexts
    description: Evaluate flags for context instance
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: limit
        schema: integer
        description: >-
          The number of feature flags to return. Defaults to -1, which returns
          all flags
      - name: offset
        schema: integer
        description: >-
          Where to start in the list. Use this with pagination. For example, an
          offset of 10 skips the first ten items and then returns the next items
          in the list, up to the query `limit`.
      - name: sort
        schema: string
        description: >-
          A comma-separated list of fields to sort by. Fields prefixed by a dash
          ( - ) sort in descending order
      - name: filter
        schema: string
        description: >-
          A comma-separated list of filters. Each filter is of the form `field
          operator value`. Supported fields are explained above.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}/environments/{environmentKey}/followers
    method: getAllFlagFollowers
    httpMethod: get
    tag: Follow flags
    typeScriptTag: followFlags
    description: Get followers of all flags in a given project and environment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/v2/projects/{projectKey}/environments/{environmentKey}/mobileKey
    method: resetMobileSdkKey
    httpMethod: post
    tag: Environments
    typeScriptTag: environments
    description: Reset environment mobile SDK key
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/environments/{environmentKey}/segments/evaluate
    method: evaluateSegmentMemberships
    httpMethod: post
    tag: Segments
    typeScriptTag: segments
    description: List segment memberships for context instance
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/v2/projects/{projectKey}/experimentation-settings
    method: getExperimentationSettings
    httpMethod: get
    tag: Experiments (beta)
    typeScriptTag: experimentsBeta
    description: Get experimentation settings
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}/experimentation-settings
    method: updateExperimentationSettings
    httpMethod: put
    tag: Experiments (beta)
    typeScriptTag: experimentsBeta
    description: Update experimentation settings
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: randomizationUnits
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}/flag-defaults
    method: getFlagDefaults
    httpMethod: get
    tag: Projects
    typeScriptTag: projects
    description: Get flag defaults for project
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/v2/projects/{projectKey}/flag-defaults
    method: updateFlagDefault
    httpMethod: patch
    tag: Projects
    typeScriptTag: projects
    description: Update flag default for project
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}/flag-defaults
    method: updateFlagDefaultsForProject
    httpMethod: put
    tag: Projects
    typeScriptTag: projects
    description: Create or update flag defaults for project
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: tags
        schema: array
        required: true
        description: ''
        example:
          - tag-1
          - tag-2
      - name: temporary
        schema: boolean
        required: true
        description: ''
        example: true
      - name: booleanDefaults
        schema: object
        required: true
        description: ''
      - name: defaultClientSideAvailability
        schema: object
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests
    method: listRequestsForFlag
    httpMethod: get
    tag: Approvals
    typeScriptTag: approvals
    description: List approval requests for a flag
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests
    method: createRequestFlag
    httpMethod: post
    tag: Approvals
    typeScriptTag: approvals
    description: Create approval request for a flag
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: description
        schema: string
        required: true
        description: ''
        example: Requesting to update targeting
      - name: comment
        schema: string
        required: false
        description: ''
        example: optional comment
      - name: instructions
        schema: array
        required: true
        description: ''
      - name: notifyMemberIds
        schema: array
        required: false
        description: ''
        example:
          - 1234a56b7c89d012345e678f
      - name: notifyTeamKeys
        schema: array
        required: false
        description: ''
        example:
          - example-reviewer-team
      - name: executionDate
        schema: integer
        required: false
        description: ''
      - name: operatingOnId
        schema: string
        required: false
        description: ''
        example: 6297ed79dee7dc14e1f9a80c
      - name: integrationConfig
        schema: object
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests-flag-copy
    method: createFlagCopyRequest
    httpMethod: post
    tag: Approvals
    typeScriptTag: approvals
    description: Create approval request to copy flag configurations across environments
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key for the target environment
        example: ENVIRONMENTKEY
      - name: description
        schema: string
        required: true
        description: ''
        example: copy flag settings to another environment
      - name: comment
        schema: string
        required: false
        description: ''
        example: optional comment
      - name: notifyMemberIds
        schema: array
        required: false
        description: ''
        example:
          - 1234a56b7c89d012345e678f
      - name: notifyTeamKeys
        schema: array
        required: false
        description: ''
        example:
          - example-reviewer-team
      - name: source
        schema: object
        required: true
        description: ''
      - name: includedActions
        schema: array
        required: false
        description: ''
        example:
          - updateOn
      - name: excludedActions
        schema: array
        required: false
        description: ''
        example:
          - updateOn
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{id}
    method: deleteApprovalRequestFlag
    httpMethod: delete
    tag: Approvals
    typeScriptTag: approvals
    description: Delete approval request for a flag
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: id
        schema: string
        required: true
        description: The feature flag approval request ID
        example: ID
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{id}
    method: singleRequest
    httpMethod: get
    tag: Approvals
    typeScriptTag: approvals
    description: Get approval request for a flag
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: id
        schema: string
        required: true
        description: The feature flag approval request ID
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{id}/apply
    method: applyRequestFlag
    httpMethod: post
    tag: Approvals
    typeScriptTag: approvals
    description: Apply approval request for a flag
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: id
        schema: string
        required: true
        description: The feature flag approval request ID
        example: ID
      - name: comment
        schema: string
        description: ''
        example: Looks good, thanks for updating
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{id}/reviews
    method: reviewFlagRequest
    httpMethod: post
    tag: Approvals
    typeScriptTag: approvals
    description: Review approval request for a flag
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: id
        schema: string
        required: true
        description: The feature flag approval request ID
        example: ID
      - name: kind
        schema: string
        description: ''
        example: approve
      - name: comment
        schema: string
        description: ''
        example: Looks good, thanks for updating
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/followers
    method: flagFollowersList
    httpMethod: get
    tag: Follow flags
    typeScriptTag: followFlags
    description: Get followers of a flag in a project and environment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/followers/{memberId}
    method: removeFollower
    httpMethod: delete
    tag: Follow flags
    typeScriptTag: followFlags
    description: Remove a member as a follower of a flag in a project and environment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: memberId
        schema: string
        required: true
        description: >-
          The memberId of the member to remove as a follower of the flag. Reader
          roles can only remove themselves.
        example: MEMBERID
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/followers/{memberId}
    method: memberFollower
    httpMethod: put
    tag: Follow flags
    typeScriptTag: followFlags
    description: Add a member as a follower of a flag in a project and environment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: memberId
        schema: string
        required: true
        description: >-
          The memberId of the member to add as a follower of the flag. Reader
          roles can only add themselves.
        example: MEMBERID
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes
    method: listChanges
    httpMethod: get
    tag: Scheduled changes
    typeScriptTag: scheduledChanges
    description: List scheduled changes
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes
    method: createWorkflow
    httpMethod: post
    tag: Scheduled changes
    typeScriptTag: scheduledChanges
    description: Create scheduled changes workflow
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: ignoreConflicts
        schema: boolean
        description: >-
          Whether to succeed (`true`) or fail (`false`) when these instructions
          conflict with existing scheduled changes
      - name: comment
        schema: string
        required: false
        description: ''
        example: optional comment
      - name: executionDate
        schema: integer
        required: true
        description: ''
        example: 0
      - name: instructions
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{id}
    method: deleteWorkflow
    httpMethod: delete
    tag: Scheduled changes
    typeScriptTag: scheduledChanges
    description: Delete scheduled changes workflow
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: id
        schema: string
        required: true
        description: The scheduled change id
        example: ID
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{id}
    method: getById
    httpMethod: get
    tag: Scheduled changes
    typeScriptTag: scheduledChanges
    description: Get a scheduled change
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: id
        schema: string
        required: true
        description: The scheduled change id
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{id}
    method: updateWorkflow
    httpMethod: patch
    tag: Scheduled changes
    typeScriptTag: scheduledChanges
    description: Update scheduled changes workflow
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: id
        schema: string
        required: true
        description: The scheduled change ID
        example: ID
      - name: ignoreConflicts
        schema: boolean
        description: >-
          Whether to succeed (`true`) or fail (`false`) when these new
          instructions conflict with existing scheduled changes
      - name: comment
        schema: string
        required: false
        description: ''
        example: optional comment
      - name: instructions
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/workflows
    method: getFeatureFlagEnvironmentsWorkflows
    httpMethod: get
    tag: Workflows
    typeScriptTag: workflows
    description: Get workflows
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: status
        schema: string
        description: >-
          Filter results by workflow status. Valid status filters are `active`,
          `completed`, and `failed`.
      - name: sort
        schema: string
        description: >-
          A field to sort the items by. Prefix field by a dash ( - ) to sort in
          descending order. This endpoint supports sorting by `creationDate` or
          `stopDate`.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/workflows
    method: createWorkflow
    httpMethod: post
    tag: Workflows
    typeScriptTag: workflows
    description: Create workflow
    parameters:
      - name: templateKey
        schema: string
        description: The template key to apply as a starting point for the new workflow
      - name: dryRun
        schema: boolean
        description: Whether to call the endpoint in dry-run mode
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: description
        schema: string
        required: false
        description: ''
        example: Turn flag on for 10% of users each day
      - name: maintainerId
        schema: string
        required: false
        description: ''
      - name: name
        schema: string
        required: true
        description: ''
        example: Progressive rollout starting in two days
      - name: stages
        schema: array
        required: false
        description: ''
      - name: templateKey
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/workflows/{workflowId}
    method: deleteFromFeatureFlag
    httpMethod: delete
    tag: Workflows
    typeScriptTag: workflows
    description: Delete workflow
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: workflowId
        schema: string
        required: true
        description: The workflow id
        example: WORKFLOWID
    responses:
      - statusCode: '204'
        description: Action completed successfully
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/workflows/{workflowId}
    method: getCustomWorkflowById
    httpMethod: get
    tag: Workflows
    typeScriptTag: workflows
    description: Get custom workflow
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: workflowId
        schema: string
        required: true
        description: The workflow ID
        example: WORKFLOWID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/projects/{projectKey}/flags/{flagKey}/environments/{environmentKey}/migration-safety-issues
    method: getMigrationSafetyIssues
    httpMethod: post
    tag: Feature flags (beta)
    typeScriptTag: featureFlagsBeta
    description: Get migration safety issues
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: flagKey
        schema: string
        required: true
        description: The migration flag key
        example: FLAGKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: instructions
        schema: array
        required: true
        description: ''
      - name: comment
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '204'
        description: No safety issues found
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '503'
        description: ''
  - url: /api/v2/projects/{projectKey}/metric-groups
    method: listMetricGroups
    httpMethod: get
    tag: Metrics (beta)
    typeScriptTag: metricsBeta
    description: List metric groups
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: expand
        schema: string
        description: >-
          A comma-separated list of properties that can reveal additional
          information in the response.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}/metric-groups
    method: createMetricGroup
    httpMethod: post
    tag: Metrics (beta)
    typeScriptTag: metricsBeta
    description: Create metric group
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: tags
        schema: array
        required: true
        description: ''
        example:
          - ops
      - name: description
        schema: string
        required: false
        description: ''
        example: Description of the metric group
      - name: key
        schema: string
        required: true
        description: ''
        example: metric-group-key-123abc
      - name: name
        schema: string
        required: true
        description: ''
        example: My metric group
      - name: kind
        schema: string
        required: true
        description: ''
        example: funnel
      - name: maintainerId
        schema: string
        required: true
        description: ''
        example: 569fdeadbeef1644facecafe
      - name: metrics
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}/metric-groups/{metricGroupKey}
    method: deleteMetricGroup
    httpMethod: delete
    tag: Metrics (beta)
    typeScriptTag: metricsBeta
    description: Delete metric group
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: metricGroupKey
        schema: string
        required: true
        description: The metric group key
        example: METRICGROUPKEY
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}/metric-groups/{metricGroupKey}
    method: getMetricGroupDetails
    httpMethod: get
    tag: Metrics (beta)
    typeScriptTag: metricsBeta
    description: Get metric group
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: metricGroupKey
        schema: string
        required: true
        description: The metric group key
        example: METRICGROUPKEY
      - name: expand
        schema: string
        description: >-
          A comma-separated list of properties that can reveal additional
          information in the response.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}/metric-groups/{metricGroupKey}
    method: updateMetricGroupByKey
    httpMethod: patch
    tag: Metrics (beta)
    typeScriptTag: metricsBeta
    description: Patch metric group
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: metricGroupKey
        schema: string
        required: true
        description: The metric group key
        example: METRICGROUPKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/projects/{projectKey}/release-pipelines
    method: getAllReleasePipelines
    httpMethod: get
    tag: Release pipelines (beta)
    typeScriptTag: releasePipelinesBeta
    description: Get all release pipelines
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: filter
        schema: string
        description: >-
          A comma-separated list of filters. Each filter is of the form
          field:value. Read the endpoint description for a full list of
          available filter fields.
      - name: limit
        schema: integer
        description: The maximum number of items to return. Defaults to 20.
      - name: offset
        schema: integer
        description: >-
          Where to start in the list. Defaults to 0. Use this with pagination.
          For example, an offset of 10 skips the first ten items and then
          returns the next items in the list, up to the query `limit`.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/v2/projects/{projectKey}/release-pipelines
    method: createNewPipeline
    httpMethod: post
    tag: Release pipelines (beta)
    typeScriptTag: releasePipelinesBeta
    description: Create a release pipeline
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: tags
        schema: array
        required: false
        description: ''
        example:
          - example-tag
      - name: description
        schema: string
        required: false
        description: ''
        example: Standard pipeline to roll out to production
      - name: key
        schema: string
        required: true
        description: ''
        example: standard-pipeline
      - name: name
        schema: string
        required: true
        description: ''
        example: Standard Pipeline
      - name: phases
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
  - url: /api/v2/projects/{projectKey}/release-pipelines/{pipelineKey}
    method: deletePipeline
    httpMethod: delete
    tag: Release pipelines (beta)
    typeScriptTag: releasePipelinesBeta
    description: Delete release pipeline
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: pipelineKey
        schema: string
        required: true
        description: The release pipeline key
        example: PIPELINEKEY
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/v2/projects/{projectKey}/release-pipelines/{pipelineKey}
    method: getByPipeKey
    httpMethod: get
    tag: Release pipelines (beta)
    typeScriptTag: releasePipelinesBeta
    description: Get release pipeline by key
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: pipelineKey
        schema: string
        required: true
        description: The release pipeline key
        example: PIPELINEKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/v2/projects/{projectKey}/release-pipelines/{pipelineKey}
    method: updatePipelinePatch
    httpMethod: patch
    tag: Release pipelines (beta)
    typeScriptTag: releasePipelinesBeta
    description: Update a release pipeline
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: pipelineKey
        schema: string
        required: true
        description: The release pipeline key
        example: PIPELINEKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/v2/public-ip-list
    method: getIpList
    httpMethod: get
    tag: Other
    typeScriptTag: other
    description: Gets the public IP list
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/roles
    method: listCustomRoles
    httpMethod: get
    tag: Custom roles
    typeScriptTag: customRoles
    description: List custom roles
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/roles
    method: createNewRole
    httpMethod: post
    tag: Custom roles
    typeScriptTag: customRoles
    description: Create custom role
    parameters:
      - name: description
        schema: string
        required: false
        description: ''
        example: An example role for members of the ops team
      - name: name
        schema: string
        required: true
        description: ''
        example: Ops team
      - name: key
        schema: string
        required: true
        description: ''
        example: role-key-123abc
      - name: policy
        schema: array
        required: true
        description: ''
      - name: basePermissions
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/roles/{customRoleKey}
    method: deleteRoleByCustomKey
    httpMethod: delete
    tag: Custom roles
    typeScriptTag: customRoles
    description: Delete custom role
    parameters:
      - name: customRoleKey
        schema: string
        required: true
        description: The custom role key
        example: CUSTOMROLEKEY
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/roles/{customRoleKey}
    method: getByCustomKey
    httpMethod: get
    tag: Custom roles
    typeScriptTag: customRoles
    description: Get custom role
    parameters:
      - name: customRoleKey
        schema: string
        required: true
        description: The custom role key or ID
        example: CUSTOMROLEKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/roles/{customRoleKey}
    method: updateSingleCustomRole
    httpMethod: patch
    tag: Custom roles
    typeScriptTag: customRoles
    description: Update custom role
    parameters:
      - name: customRoleKey
        schema: string
        required: true
        description: The custom role key
        example: CUSTOMROLEKEY
      - name: patch
        schema: array
        required: true
        description: ''
      - name: comment
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/segments/{projectKey}/{environmentKey}
    method: getSegmentList
    httpMethod: get
    tag: Segments
    typeScriptTag: segments
    description: List segments
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: limit
        schema: integer
        description: The number of segments to return. Defaults to 50.
      - name: offset
        schema: integer
        description: >-
          Where to start in the list. Use this with pagination. For example, an
          offset of 10 skips the first ten items and then returns the next items
          in the list, up to the query `limit`.
      - name: sort
        schema: string
        description: >-
          Accepts sorting order and fields. Fields can be comma separated.
          Possible fields are 'creationDate', 'name', 'lastModified'. Example:
          `sort=name` sort by names ascending or `sort=-name,creationDate` sort
          by names descending and creationDate ascending.
      - name: filter
        schema: string
        description: >-
          Accepts filter by kind, query, tags, unbounded, or external. To filter
          by kind or query, use the `equals` operator. To filter by tags, use
          the `anyOf` operator. Query is a 'fuzzy' search across segment key,
          name, and description. Example: `filter=tags anyOf ['enterprise',
          'beta'],query equals 'toggle'` returns segments with 'toggle' in their
          key, name, or description that also have 'enterprise' or 'beta' as a
          tag. To filter by unbounded, use the `equals` operator. Example:
          `filter=unbounded equals true`. To filter by external, use the
          `exists` operator. Example: `filter=external exists true`.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/v2/segments/{projectKey}/{environmentKey}
    method: createSegment
    httpMethod: post
    tag: Segments
    typeScriptTag: segments
    description: Create segment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: tags
        schema: array
        required: false
        description: ''
        example:
          - testing
      - name: description
        schema: string
        required: false
        description: ''
        example: Bundle our sample customers together
      - name: name
        schema: string
        required: true
        description: ''
        example: Example segment
      - name: key
        schema: string
        required: true
        description: ''
        example: segment-key-123abc
      - name: unbounded
        schema: boolean
        required: false
        description: ''
        example: false
      - name: unboundedContextKind
        schema: string
        required: false
        description: ''
        example: device
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/segments/{projectKey}/{environmentKey}/{segmentKey}
    method: removeSegment
    httpMethod: delete
    tag: Segments
    typeScriptTag: segments
    description: Delete segment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: segmentKey
        schema: string
        required: true
        description: The segment key
        example: SEGMENTKEY
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/segments/{projectKey}/{environmentKey}/{segmentKey}
    method: singleSegmentByKey
    httpMethod: get
    tag: Segments
    typeScriptTag: segments
    description: Get segment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: segmentKey
        schema: string
        required: true
        description: The segment key
        example: SEGMENTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/segments/{projectKey}/{environmentKey}/{segmentKey}
    method: updateSemanticPatch
    httpMethod: patch
    tag: Segments
    typeScriptTag: segments
    description: Patch segment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: segmentKey
        schema: string
        required: true
        description: The segment key
        example: SEGMENTKEY
      - name: patch
        schema: array
        required: true
        description: ''
      - name: comment
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/segments/{projectKey}/{environmentKey}/{segmentKey}/contexts
    method: updateContextTargets
    httpMethod: post
    tag: Segments
    typeScriptTag: segments
    description: Update context targets on a big segment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: segmentKey
        schema: string
        required: true
        description: The segment key
        example: SEGMENTKEY
      - name: included
        schema: object
        description: ''
      - name: excluded
        schema: object
        description: ''
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/segments/{projectKey}/{environmentKey}/{segmentKey}/contexts/{contextKey}
    method: getContextMembership
    httpMethod: get
    tag: Segments
    typeScriptTag: segments
    description: Get big segment membership for context
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: segmentKey
        schema: string
        required: true
        description: The segment key
        example: SEGMENTKEY
      - name: contextKey
        schema: string
        required: true
        description: The context key
        example: CONTEXTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/segments/{projectKey}/{environmentKey}/{segmentKey}/exports
    method: startBigSegmentExport
    httpMethod: post
    tag: Segments (beta)
    typeScriptTag: segmentsBeta
    description: Create big segment export
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: segmentKey
        schema: string
        required: true
        description: The segment key
        example: SEGMENTKEY
    responses:
      - statusCode: '200'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/segments/{projectKey}/{environmentKey}/{segmentKey}/exports/{exportID}
    method: getBigSegmentExportInfo
    httpMethod: get
    tag: Segments (beta)
    typeScriptTag: segmentsBeta
    description: Get big segment export
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: segmentKey
        schema: string
        required: true
        description: The segment key
        example: SEGMENTKEY
      - name: exportId
        schema: string
        required: true
        description: The export ID
        example: EXPORTID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/segments/{projectKey}/{environmentKey}/{segmentKey}/imports
    method: startBigSegmentImport
    httpMethod: post
    tag: Segments (beta)
    typeScriptTag: segmentsBeta
    description: Create big segment import
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: segmentKey
        schema: string
        required: true
        description: The segment key
        example: SEGMENTKEY
      - name: file
        schema: string
        description: ''
      - name: mode
        schema: string
        description: ''
    responses:
      - statusCode: '204'
        description: Import request submitted successfully
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/segments/{projectKey}/{environmentKey}/{segmentKey}/imports/{importID}
    method: getImportInfo
    httpMethod: get
    tag: Segments (beta)
    typeScriptTag: segmentsBeta
    description: Get big segment import
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: segmentKey
        schema: string
        required: true
        description: The segment key
        example: SEGMENTKEY
      - name: importId
        schema: string
        required: true
        description: The import ID
        example: IMPORTID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/segments/{projectKey}/{environmentKey}/{segmentKey}/users
    method: updateUserContextTargets
    httpMethod: post
    tag: Segments
    typeScriptTag: segments
    description: Update user context targets on a big segment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: segmentKey
        schema: string
        required: true
        description: The segment key
        example: SEGMENTKEY
      - name: included
        schema: object
        description: ''
      - name: excluded
        schema: object
        description: ''
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/segments/{projectKey}/{environmentKey}/{segmentKey}/users/{userKey}
    method: getUserMembershipStatus
    httpMethod: get
    tag: Segments
    typeScriptTag: segments
    description: Get big segment membership for user
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: segmentKey
        schema: string
        required: true
        description: The segment key
        example: SEGMENTKEY
      - name: userKey
        schema: string
        required: true
        description: The user key
        example: USERKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/segments/{projectKey}/{segmentKey}/expiring-targets/{environmentKey}
    method: getExpiringTargets
    httpMethod: get
    tag: Segments
    typeScriptTag: segments
    description: Get expiring targets for segment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: segmentKey
        schema: string
        required: true
        description: The segment key
        example: SEGMENTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/segments/{projectKey}/{segmentKey}/expiring-targets/{environmentKey}
    method: updateExpiringTargetsForSegment
    httpMethod: patch
    tag: Segments
    typeScriptTag: segments
    description: Update expiring targets for segment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: segmentKey
        schema: string
        required: true
        description: The segment key
        example: SEGMENTKEY
      - name: comment
        schema: string
        required: false
        description: ''
        example: optional comment
      - name: instructions
        schema: array
        required: true
        description: ''
        example:
          - version: 0
            contextKey: user@email.com
            contextKind: user
            kind: updateExpiringTarget
            targetType: included
            value: 1587582000000
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/segments/{projectKey}/{segmentKey}/expiring-user-targets/{environmentKey}
    method: getExpiringUserTargets
    httpMethod: get
    tag: Segments
    typeScriptTag: segments
    description: Get expiring user targets for segment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: segmentKey
        schema: string
        required: true
        description: The segment key
        example: SEGMENTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/segments/{projectKey}/{segmentKey}/expiring-user-targets/{environmentKey}
    method: updateExpiringTargetsForSegment
    httpMethod: patch
    tag: Segments
    typeScriptTag: segments
    description: Update expiring user targets for segment
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: segmentKey
        schema: string
        required: true
        description: The segment key
        example: SEGMENTKEY
      - name: comment
        schema: string
        required: false
        description: ''
        example: optional comment
      - name: instructions
        schema: array
        required: true
        description: ''
        example:
          - version: 0
            contextKey: contextKey
            contextKind: user
            kind: updateExpiringTarget
            targetType: included
            value: 1587582000000
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/tags
    method: list
    httpMethod: get
    tag: Tags
    typeScriptTag: tags
    description: List tags
    parameters:
      - name: kind
        schema: string
        description: >-
          Fetch tags associated with the specified resource type. Options are
          `flag`, `project`, `environment`, `segment`. Returns all types by
          default.
      - name: pre
        schema: string
        description: Return tags with the specified prefix
      - name: archived
        schema: boolean
        description: Whether or not to return archived flags
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/teams
    method: listTeams
    httpMethod: get
    tag: Teams
    typeScriptTag: teams
    description: List teams
    parameters:
      - name: limit
        schema: integer
        description: The number of teams to return in the response. Defaults to 20.
      - name: offset
        schema: integer
        description: >-
          Where to start in the list. Use this with pagination. For example, an
          offset of 10 skips the first ten items and returns the next `limit`
          items.
      - name: filter
        schema: string
        description: >-
          A comma-separated list of filters. Each filter is constructed as
          `field:value`.
      - name: expand
        schema: string
        description: >-
          A comma-separated list of properties that can reveal additional
          information in the response.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/teams
    method: updateMultipleTeamsSemanticPatch
    httpMethod: patch
    tag: Teams (beta)
    typeScriptTag: teamsBeta
    description: Update teams
    parameters:
      - name: comment
        schema: string
        required: false
        description: ''
        example: Optional comment about the update
      - name: instructions
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/teams
    method: createTeam
    httpMethod: post
    tag: Teams
    typeScriptTag: teams
    description: Create team
    parameters:
      - name: expand
        schema: string
        description: >-
          A comma-separated list of properties that can reveal additional
          information in the response. Supported fields are explained above.
      - name: description
        schema: string
        required: false
        description: ''
        example: An example team
      - name: customRoleKeys
        schema: array
        required: false
        description: ''
        example:
          - example-role1
          - example-role2
      - name: key
        schema: string
        required: true
        description: ''
        example: team-key-123abc
      - name: memberIDs
        schema: array
        required: false
        description: ''
        example:
          - 12ab3c45de678910fgh12345
      - name: name
        schema: string
        required: true
        description: ''
        example: Example team
      - name: permissionGrants
        schema: array
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/teams/{teamKey}
    method: removeByTeamKey
    httpMethod: delete
    tag: Teams
    typeScriptTag: teams
    description: Delete team
    parameters:
      - name: teamKey
        schema: string
        required: true
        description: The team key
        example: TEAMKEY
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/teams/{teamKey}
    method: getByTeamKey
    httpMethod: get
    tag: Teams
    typeScriptTag: teams
    description: Get team
    parameters:
      - name: teamKey
        schema: string
        required: true
        description: The team key.
        example: TEAMKEY
      - name: expand
        schema: string
        description: >-
          A comma-separated list of properties that can reveal additional
          information in the response.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/teams/{teamKey}
    method: updateSemanticPatch
    httpMethod: patch
    tag: Teams
    typeScriptTag: teams
    description: Update team
    parameters:
      - name: teamKey
        schema: string
        required: true
        description: The team key
        example: TEAMKEY
      - name: expand
        schema: string
        description: >-
          A comma-separated list of properties that can reveal additional
          information in the response. Supported fields are explained above.
      - name: comment
        schema: string
        required: false
        description: ''
        example: Optional comment about the update
      - name: instructions
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/teams/{teamKey}/maintainers
    method: getMaintainers
    httpMethod: get
    tag: Teams
    typeScriptTag: teams
    description: Get team maintainers
    parameters:
      - name: teamKey
        schema: string
        required: true
        description: The team key
        example: TEAMKEY
      - name: limit
        schema: integer
        description: The number of maintainers to return in the response. Defaults to 20.
      - name: offset
        schema: integer
        description: >-
          Where to start in the list. This is for use with pagination. For
          example, an offset of 10 skips the first ten items and then returns
          the next items in the list, up to the query `limit`.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/teams/{teamKey}/members
    method: addMultipleMembersToTeam
    httpMethod: post
    tag: Teams
    typeScriptTag: teams
    description: Add multiple members to team
    parameters:
      - name: teamKey
        schema: string
        required: true
        description: The team key
        example: TEAMKEY
      - name: file
        schema: string
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '207'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/teams/{teamKey}/roles
    method: getCustomRoles
    httpMethod: get
    tag: Teams
    typeScriptTag: teams
    description: Get team custom roles
    parameters:
      - name: teamKey
        schema: string
        required: true
        description: The team key
        example: TEAMKEY
      - name: limit
        schema: integer
        description: The number of roles to return in the response. Defaults to 20.
      - name: offset
        schema: integer
        description: >-
          Where to start in the list. This is for use with pagination. For
          example, an offset of 10 skips the first ten items and then returns
          the next items in the list, up to the query `limit`.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '405'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/templates
    method: list
    httpMethod: get
    tag: Workflow templates
    typeScriptTag: workflowTemplates
    description: Get workflow templates
    parameters:
      - name: summary
        schema: boolean
        description: >-
          Whether the entire template object or just a summary should be
          returned
      - name: search
        schema: string
        description: The substring in either the name or description of a template
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/templates
    method: createFeatureFlagTemplate
    httpMethod: post
    tag: Workflow templates
    typeScriptTag: workflowTemplates
    description: Create workflow template
    parameters:
      - name: description
        schema: string
        required: false
        description: ''
      - name: key
        schema: string
        required: true
        description: ''
        example: KEY
      - name: name
        schema: string
        required: false
        description: ''
      - name: workflowId
        schema: string
        required: false
        description: ''
      - name: stages
        schema: array
        required: false
        description: ''
      - name: projectKey
        schema: string
        required: false
        description: ''
      - name: environmentKey
        schema: string
        required: false
        description: ''
      - name: flagKey
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/templates/{templateKey}
    method: deleteTemplate
    httpMethod: delete
    tag: Workflow templates
    typeScriptTag: workflowTemplates
    description: Delete workflow template
    parameters:
      - name: templateKey
        schema: string
        required: true
        description: The template key
        example: TEMPLATEKEY
    responses:
      - statusCode: '204'
        description: Action completed successfully
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/tokens
    method: list
    httpMethod: get
    tag: Access tokens
    typeScriptTag: accessTokens
    description: List access tokens
    parameters:
      - name: showAll
        schema: boolean
        description: >-
          If set to true, and the authentication access token has the 'Admin'
          role, personal access tokens for all members will be retrieved.
      - name: limit
        schema: integer
        description: The number of access tokens to return in the response. Defaults to 25.
      - name: offset
        schema: integer
        description: >-
          Where to start in the list. This is for use with pagination. For
          example, an offset of 10 skips the first ten items and then returns
          the next items in the list, up to the query `limit`.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/tokens
    method: createNewToken
    httpMethod: post
    tag: Access tokens
    typeScriptTag: accessTokens
    description: Create access token
    parameters:
      - name: description
        schema: string
        description: ''
      - name: name
        schema: string
        description: ''
      - name: role
        schema: string
        description: ''
      - name: customRoleIds
        schema: array
        description: ''
      - name: inlineRole
        schema: array
        description: ''
      - name: serviceToken
        schema: boolean
        description: ''
      - name: defaultApiVersion
        schema: integer
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/tokens/{id}
    method: deleteById
    httpMethod: delete
    tag: Access tokens
    typeScriptTag: accessTokens
    description: Delete access token
    parameters:
      - name: id
        schema: string
        required: true
        description: The ID of the access token to update
        example: ID
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/tokens/{id}
    method: getById
    httpMethod: get
    tag: Access tokens
    typeScriptTag: accessTokens
    description: Get access token
    parameters:
      - name: id
        schema: string
        required: true
        description: The ID of the access token
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/tokens/{id}
    method: updateSettings
    httpMethod: patch
    tag: Access tokens
    typeScriptTag: accessTokens
    description: Patch access token
    parameters:
      - name: id
        schema: string
        required: true
        description: The ID of the access token to update
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '422'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/tokens/{id}/reset
    method: resetSecretKey
    httpMethod: post
    tag: Access tokens
    typeScriptTag: accessTokens
    description: Reset access token
    parameters:
      - name: id
        schema: string
        required: true
        description: The ID of the access token to update
        example: ID
      - name: expiry
        schema: integer
        description: >-
          An expiration time for the old token key, expressed as a Unix epoch
          time in milliseconds. By default, the token will expire immediately.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/usage/evaluations/{projectKey}/{environmentKey}/{featureFlagKey}
    method: getEvaluationsUsage
    httpMethod: get
    tag: Account usage (beta)
    typeScriptTag: accountUsageBeta
    description: Get evaluations usage
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: from
        schema: string
        description: >-
          The series of data returned starts from this timestamp. Defaults to 30
          days ago.
      - name: to
        schema: string
        description: >-
          The series of data returned ends at this timestamp. Defaults to the
          current time.
      - name: tz
        schema: string
        description: The timezone to use for breaks between days when returning daily data.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/usage/events/{type}
    method: getEventsUsageData
    httpMethod: get
    tag: Account usage (beta)
    typeScriptTag: accountUsageBeta
    description: Get events usage
    parameters:
      - name: type
        schema: string
        required: true
        description: >-
          The type of event to retrieve. Must be either `received` or
          `published`.
        example: TYPE
      - name: from
        schema: string
        description: >-
          The series of data returned starts from this timestamp. Defaults to 24
          hours ago.
      - name: to
        schema: string
        description: >-
          The series of data returned ends at this timestamp. Defaults to the
          current time.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/usage/experimentation-keys
    method: getExperimentationKeysUsage
    httpMethod: get
    tag: Account usage (beta)
    typeScriptTag: accountUsageBeta
    description: Get experimentation keys usage
    parameters:
      - name: from
        schema: string
        description: >-
          The series of data returned starts from this timestamp (Unix seconds).
          Defaults to the beginning of the current month.
      - name: to
        schema: string
        description: >-
          The series of data returned ends at this timestamp (Unix seconds).
          Defaults to the current time.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '503'
        description: ''
  - url: /api/v2/usage/experimentation-units
    method: getExperimentationUnitsUsage
    httpMethod: get
    tag: Account usage (beta)
    typeScriptTag: accountUsageBeta
    description: Get experimentation units usage
    parameters:
      - name: from
        schema: string
        description: >-
          The series of data returned starts from this timestamp (Unix seconds).
          Defaults to the beginning of the current month.
      - name: to
        schema: string
        description: >-
          The series of data returned ends at this timestamp (Unix seconds).
          Defaults to the current time.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '503'
        description: ''
  - url: /api/v2/usage/mau
    method: getMauUsageData
    httpMethod: get
    tag: Account usage (beta)
    typeScriptTag: accountUsageBeta
    description: Get MAU usage
    parameters:
      - name: from
        schema: string
        description: >-
          The series of data returned starts from this timestamp. Defaults to 30
          days ago.
      - name: to
        schema: string
        description: >-
          The series of data returned ends at this timestamp. Defaults to the
          current time.
      - name: project
        schema: string
        description: >-
          A project key to filter results to. Can be specified multiple times,
          one query parameter per project key, to view data for multiple
          projects.
      - name: environment
        schema: string
        description: >-
          An environment key to filter results to. When using this parameter,
          exactly one project key must also be set. Can be specified multiple
          times as separate query parameters to view data for multiple
          environments within a single project.
      - name: sdktype
        schema: string
        description: >-
          An SDK type to filter results to. Can be specified multiple times, one
          query parameter per SDK type. Valid values: client, server
      - name: sdk
        schema: string
        description: >-
          An SDK name to filter results to. Can be specified multiple times, one
          query parameter per SDK.
      - name: anonymous
        schema: string
        description: >-
          If specified, filters results to either anonymous or nonanonymous
          users.
      - name: groupby
        schema: string
        description: >-
          If specified, returns data for each distinct value of the given field.
          Can be specified multiple times to group data by multiple dimensions
          (for example, to group by both project and SDK). Valid values:
          project, environment, sdktype, sdk, anonymous
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/usage/mau/bycategory
    method: getMauUsageByCategory
    httpMethod: get
    tag: Account usage (beta)
    typeScriptTag: accountUsageBeta
    description: Get MAU usage by category
    parameters:
      - name: from
        schema: string
        description: >-
          The series of data returned starts from this timestamp. Defaults to 30
          days ago.
      - name: to
        schema: string
        description: >-
          The series of data returned ends at this timestamp. Defaults to the
          current time.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/usage/mau/sdks
    method: listMauSdksByType
    httpMethod: get
    tag: Account usage (beta)
    typeScriptTag: accountUsageBeta
    description: Get MAU SDKs by type
    parameters:
      - name: from
        schema: string
        description: >-
          The data returned starts from this timestamp. Defaults to seven days
          ago. The timestamp is in Unix milliseconds, for example,
          1656694800000.
      - name: to
        schema: string
        description: >-
          The data returned ends at this timestamp. Defaults to the current
          time. The timestamp is in Unix milliseconds, for example,
          1657904400000.
      - name: sdktype
        schema: string
        description: >-
          The type of SDK with monthly active users (MAU) to list. Must be
          either `client` or `server`.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/usage/streams/{source}
    method: getStreamUsage
    httpMethod: get
    tag: Account usage (beta)
    typeScriptTag: accountUsageBeta
    description: Get stream usage
    parameters:
      - name: source
        schema: string
        required: true
        description: >-
          The source of streaming connections to describe. Must be either
          `client` or `server`.
        example: SOURCE
      - name: from
        schema: string
        description: >-
          The series of data returned starts from this timestamp. Defaults to 30
          days ago.
      - name: to
        schema: string
        description: >-
          The series of data returned ends at this timestamp. Defaults to the
          current time.
      - name: tz
        schema: string
        description: The timezone to use for breaks between days when returning daily data.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/usage/streams/{source}/bysdkversion
    method: getStreamUsageBySdkVersionData
    httpMethod: get
    tag: Account usage (beta)
    typeScriptTag: accountUsageBeta
    description: Get stream usage by SDK version
    parameters:
      - name: source
        schema: string
        required: true
        description: >-
          The source of streaming connections to describe. Must be either
          `client` or `server`.
        example: SOURCE
      - name: from
        schema: string
        description: >-
          The series of data returned starts from this timestamp. Defaults to 24
          hours ago.
      - name: to
        schema: string
        description: >-
          The series of data returned ends at this timestamp. Defaults to the
          current time.
      - name: tz
        schema: string
        description: The timezone to use for breaks between days when returning daily data.
      - name: sdk
        schema: string
        description: >-
          If included, this filters the returned series to only those that match
          this SDK name.
      - name: version
        schema: string
        description: >-
          If included, this filters the returned series to only those that match
          this SDK version.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/usage/streams/{source}/sdkversions
    method: listSdkVersions
    httpMethod: get
    tag: Account usage (beta)
    typeScriptTag: accountUsageBeta
    description: Get stream usage SDK versions
    parameters:
      - name: source
        schema: string
        required: true
        description: >-
          The source of streaming connections to describe. Must be either
          `client` or `server`.
        example: SOURCE
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/user-attributes/{projectKey}/{environmentKey}
    method: getAllInUseUserAttributes
    httpMethod: get
    tag: Users (beta)
    typeScriptTag: usersBeta
    description: Get user attribute names
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/v2/user-search/{projectKey}/{environmentKey}
    method: searchUsers
    httpMethod: get
    tag: Users
    typeScriptTag: users
    description: Find users
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: q
        schema: string
        description: >-
          Full-text search for users based on name, first name, last name,
          e-mail address, or key
      - name: limit
        schema: integer
        description: >-
          Specifies the maximum number of items in the collection to return
          (max: 50, default: 20)
      - name: offset
        schema: integer
        description: >-
          Deprecated, use `searchAfter` instead. Specifies the first item to
          return in the collection.
      - name: after
        schema: integer
        description: >-
          A Unix epoch time in milliseconds specifying the maximum last time a
          user requested a feature flag from LaunchDarkly
      - name: sort
        schema: string
        description: >-
          Specifies a field by which to sort. LaunchDarkly supports the
          `userKey` and `lastSeen` fields. Fields prefixed by a dash ( - ) sort
          in descending order.
      - name: searchAfter
        schema: string
        description: >-
          Limits results to users with sort values after the value you specify.
          You can use this for pagination, but we recommend using the `next`
          link we provide instead.
      - name: filter
        schema: string
        description: >-
          A comma-separated list of user attribute filters. Each filter is in
          the form of attributeKey:attributeValue
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/users/{projectKey}/{environmentKey}
    method: listEnvironmentUsers
    httpMethod: get
    tag: Users
    typeScriptTag: users
    description: List users
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: limit
        schema: integer
        description: The number of elements to return per page
      - name: searchAfter
        schema: string
        description: >-
          Limits results to users with sort values after the value you specify.
          You can use this for pagination, but we recommend using the `next`
          link we provide instead.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/users/{projectKey}/{environmentKey}/{userKey}
    method: deleteByProjectEnvironmentKey
    httpMethod: delete
    tag: Users
    typeScriptTag: users
    description: Delete user
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: userKey
        schema: string
        required: true
        description: The user key
        example: USERKEY
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/users/{projectKey}/{environmentKey}/{userKey}
    method: getUserByKey
    httpMethod: get
    tag: Users
    typeScriptTag: users
    description: Get user
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: userKey
        schema: string
        required: true
        description: The user key
        example: USERKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/users/{projectKey}/{environmentKey}/{userKey}/flags
    method: listFlagSettingsForUser
    httpMethod: get
    tag: User settings
    typeScriptTag: userSettings
    description: List flag settings for user
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: userKey
        schema: string
        required: true
        description: The user key
        example: USERKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}
    method: singleFlagSetting
    httpMethod: get
    tag: User settings
    typeScriptTag: userSettings
    description: Get flag setting for user
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: userKey
        schema: string
        required: true
        description: The user key
        example: USERKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}
    method: updateFlagSettingsForUser
    httpMethod: put
    tag: User settings
    typeScriptTag: userSettings
    description: Update flag settings for user
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: userKey
        schema: string
        required: true
        description: The user key
        example: USERKEY
      - name: featureFlagKey
        schema: string
        required: true
        description: The feature flag key
        example: FEATUREFLAGKEY
      - name: setting
        schema: undefined
        description: ''
        example: existing_variation_value_to_use
      - name: comment
        schema: string
        description: ''
        example: make sure this context experiences a specific variation
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/users/{projectKey}/{userKey}/expiring-user-targets/{environmentKey}
    method: getUserExpiringFlagTargets
    httpMethod: get
    tag: User settings
    typeScriptTag: userSettings
    description: Get expiring dates on flags for user
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: userKey
        schema: string
        required: true
        description: The user key
        example: USERKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/users/{projectKey}/{userKey}/expiring-user-targets/{environmentKey}
    method: updateExpiringUserTarget
    httpMethod: patch
    tag: User settings
    typeScriptTag: userSettings
    description: Update expiring user target for flags
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: userKey
        schema: string
        required: true
        description: The user key
        example: USERKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: comment
        schema: string
        required: false
        description: ''
        example: optional comment
      - name: instructions
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/versions
    method: getVersionInformation
    httpMethod: get
    tag: Other
    typeScriptTag: other
    description: Get version information
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/webhooks
    method: listWebhooks
    httpMethod: get
    tag: Webhooks
    typeScriptTag: webhooks
    description: List webhooks
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/webhooks
    method: createNewWebhook
    httpMethod: post
    tag: Webhooks
    typeScriptTag: webhooks
    description: Creates a webhook
    parameters:
      - name: tags
        schema: array
        required: false
        description: ''
        example: []
      - name: name
        schema: string
        required: false
        description: ''
        example: Example hook
      - name: url
        schema: string
        required: true
        description: ''
        example: http://www.example.com
      - name: secret
        schema: string
        required: false
        description: ''
        example: frobozz
      - name: statements
        schema: array
        required: false
        description: ''
      - name: sign
        schema: boolean
        required: true
        description: ''
        example: true
      - name: 'on'
        schema: boolean
        required: true
        description: ''
        example: true
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/webhooks/{id}
    method: deleteById
    httpMethod: delete
    tag: Webhooks
    typeScriptTag: webhooks
    description: Delete webhook
    parameters:
      - name: id
        schema: string
        required: true
        description: The ID of the webhook to delete
        example: ID
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/webhooks/{id}
    method: getSingleById
    httpMethod: get
    tag: Webhooks
    typeScriptTag: webhooks
    description: Get webhook
    parameters:
      - name: id
        schema: string
        required: true
        description: The ID of the webhook
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/webhooks/{id}
    method: updateSettingsPatch
    httpMethod: patch
    tag: Webhooks
    typeScriptTag: webhooks
    description: Update webhook
    parameters:
      - name: id
        schema: string
        required: true
        description: The ID of the webhook to update
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/charts/deployments/frequency
    method: deploymentFrequencyChartData
    httpMethod: get
    tag: Insights charts (beta)
    typeScriptTag: insightsChartsBeta
    description: Get deployment frequency chart data
    parameters:
      - name: projectKey
        schema: string
        description: The project key
      - name: environmentKey
        schema: string
        description: The environment key
      - name: applicationKey
        schema: string
        description: Comma separated list of application keys
      - name: from
        schema: string
        description: Unix timestamp in milliseconds. Default value is 7 days ago.
      - name: to
        schema: string
        description: Unix timestamp in milliseconds. Default value is now.
      - name: bucketType
        schema: string
        description: >-
          Specify type of bucket. Options: `rolling`, `hour`, `day`. Default:
          `rolling`.
      - name: bucketMs
        schema: integer
        description: >-
          Duration of intervals for x-axis in milliseconds. Default value is one
          day (`86400000` milliseconds).
      - name: groupBy
        schema: string
        description: 'Options: `application`, `kind`'
      - name: expand
        schema: string
        description: 'Options: `metrics`'
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/charts/flags/stale
    method: staleFlagsChartData
    httpMethod: get
    tag: Insights charts (beta)
    typeScriptTag: insightsChartsBeta
    description: Get stale flags chart data
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: applicationKey
        schema: string
        description: Comma separated list of application keys
      - name: groupBy
        schema: string
        description: 'Property to group results by. Options: `maintainer`'
      - name: maintainerId
        schema: string
        description: Comma-separated list of individual maintainers to filter results.
      - name: maintainerTeamKey
        schema: string
        description: Comma-separated list of team maintainer keys to filter results.
      - name: expand
        schema: string
        description: 'Options: `metrics`'
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/charts/flags/status
    method: getFlagStatusChartData
    httpMethod: get
    tag: Insights charts (beta)
    typeScriptTag: insightsChartsBeta
    description: Get flag status chart data
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: applicationKey
        schema: string
        description: Comma separated list of application keys
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/charts/lead-time
    method: leadTimeChartData
    httpMethod: get
    tag: Insights charts (beta)
    typeScriptTag: insightsChartsBeta
    description: Get lead time chart data
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        description: The environment key
      - name: applicationKey
        schema: string
        description: Comma separated list of application keys
      - name: from
        schema: integer
        description: Unix timestamp in milliseconds. Default value is 7 days ago.
      - name: to
        schema: integer
        description: Unix timestamp in milliseconds. Default value is now.
      - name: bucketType
        schema: string
        description: >-
          Specify type of bucket. Options: `rolling`, `hour`, `day`. Default:
          `rolling`.
      - name: bucketMs
        schema: integer
        description: >-
          Duration of intervals for x-axis in milliseconds. Default value is one
          day (`86400000` milliseconds).
      - name: groupBy
        schema: string
        description: 'Options: `application`, `stage`. Default: `stage`.'
      - name: expand
        schema: string
        description: 'Options: `metrics`, `percentiles`.'
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/charts/releases/frequency
    method: releaseFrequencyData
    httpMethod: get
    tag: Insights charts (beta)
    typeScriptTag: insightsChartsBeta
    description: Get release frequency chart data
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: applicationKey
        schema: string
        description: Comma separated list of application keys
      - name: hasExperiments
        schema: boolean
        description: >-
          Filter events to those associated with an experiment (`true`) or
          without an experiment (`false`)
      - name: global
        schema: string
        description: >-
          Filter to include or exclude global events. Default value is
          `include`. Options: `include`, `exclude`
      - name: groupBy
        schema: string
        description: 'Property to group results by. Options: `impact`'
      - name: from
        schema: string
        description: Unix timestamp in milliseconds. Default value is 7 days ago.
      - name: to
        schema: string
        description: Unix timestamp in milliseconds. Default value is now.
      - name: bucketType
        schema: string
        description: >-
          Specify type of bucket. Options: `rolling`, `hour`, `day`. Default:
          `rolling`.
      - name: bucketMs
        schema: integer
        description: >-
          Duration of intervals for x-axis in milliseconds. Default value is one
          day (`86400000` milliseconds).
      - name: expand
        schema: string
        description: 'Options: `metrics`'
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/deployment-events
    method: createDeploymentEvent
    httpMethod: post
    tag: Insights deployments (beta)
    typeScriptTag: insightsDeploymentsBeta
    description: Create deployment event
    parameters:
      - name: version
        schema: string
        required: true
        description: ''
        example: a90a8a2
      - name: projectKey
        schema: string
        required: true
        description: ''
        example: default
      - name: environmentKey
        schema: string
        required: true
        description: ''
        example: production
      - name: applicationKey
        schema: string
        required: true
        description: ''
        example: billing-service
      - name: applicationName
        schema: string
        required: false
        description: ''
        example: Billing Service
      - name: applicationKind
        schema: string
        required: false
        description: ''
        example: server
      - name: versionName
        schema: string
        required: false
        description: ''
        example: v1.0.0
      - name: eventType
        schema: string
        required: true
        description: ''
        example: started
      - name: eventTime
        schema: integer
        required: false
        description: ''
      - name: eventMetadata
        schema: object
        required: false
        description: ''
        example:
          buildSystemVersion: v1.2.3
      - name: deploymentMetadata
        schema: object
        required: false
        description: ''
        example:
          buildNumber: '1234'
    responses:
      - statusCode: '201'
        description: Created
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/deployments
    method: listDeployments
    httpMethod: get
    tag: Insights deployments (beta)
    typeScriptTag: insightsDeploymentsBeta
    description: List deployments
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: applicationKey
        schema: string
        description: Comma separated list of application keys
      - name: limit
        schema: integer
        description: >-
          The number of deployments to return. Default is 20. Maximum allowed is
          100.
      - name: expand
        schema: string
        description: >-
          Expand properties in response. Options: `pullRequests`,
          `flagReferences`
      - name: from
        schema: integer
        description: Unix timestamp in milliseconds. Default value is 7 days ago.
      - name: to
        schema: integer
        description: Unix timestamp in milliseconds. Default value is now.
      - name: after
        schema: string
        description: Identifier used for pagination
      - name: before
        schema: string
        description: Identifier used for pagination
      - name: kind
        schema: string
        description: The deployment kind
      - name: status
        schema: string
        description: The deployment status
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/deployments/{deploymentID}
    method: getDeploymentById
    httpMethod: get
    tag: Insights deployments (beta)
    typeScriptTag: insightsDeploymentsBeta
    description: Get deployment
    parameters:
      - name: deploymentId
        schema: string
        required: true
        description: The deployment ID
        example: DEPLOYMENTID
      - name: expand
        schema: string
        description: >-
          Expand properties in response. Options: `pullRequests`,
          `flagReferences`
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/deployments/{deploymentID}
    method: updateDeploymentById
    httpMethod: patch
    tag: Insights deployments (beta)
    typeScriptTag: insightsDeploymentsBeta
    description: Update deployment
    parameters:
      - name: deploymentId
        schema: string
        required: true
        description: The deployment ID
        example: DEPLOYMENTID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/flag-events
    method: listFlagEvents
    httpMethod: get
    tag: Insights flag events (beta)
    typeScriptTag: insightsFlagEventsBeta
    description: List flag events
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: applicationKey
        schema: string
        description: Comma separated list of application keys
      - name: query
        schema: string
        description: Filter events by flag key
      - name: impactSize
        schema: string
        description: >-
          Filter events by impact size. A small impact created a less than 20%
          change in the proportion of end users receiving one or more flag
          variations. A medium impact created between a 20%-80% change. A large
          impact created a more than 80% change. Options: `none`, `small`,
          `medium`, `large`
      - name: hasExperiments
        schema: boolean
        description: >-
          Filter events to those associated with an experiment (`true`) or
          without an experiment (`false`)
      - name: global
        schema: string
        description: >-
          Filter to include or exclude global events. Default value is
          `include`. Options: `include`, `exclude`
      - name: expand
        schema: string
        description: 'Expand properties in response. Options: `experiments`'
      - name: limit
        schema: integer
        description: >-
          The number of deployments to return. Default is 20. Maximum allowed is
          100.
      - name: from
        schema: integer
        description: Unix timestamp in milliseconds. Default value is 7 days ago.
      - name: to
        schema: integer
        description: Unix timestamp in milliseconds. Default value is now.
      - name: after
        schema: string
        description: Identifier used for pagination
      - name: before
        schema: string
        description: Identifier used for pagination
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/insights/group
    method: createInsightGroup
    httpMethod: post
    tag: Insights scores (beta)
    typeScriptTag: insightsScoresBeta
    description: Create insight group
    parameters:
      - name: name
        schema: string
        required: true
        description: ''
        example: Production - All Apps
      - name: key
        schema: string
        required: true
        description: ''
        example: default-production-all-apps
      - name: projectKey
        schema: string
        required: true
        description: ''
        example: default
      - name: environmentKey
        schema: string
        required: true
        description: ''
        example: production
      - name: applicationKeys
        schema: array
        required: false
        description: ''
        example:
          - billing-service
          - inventory-service
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/insights/groups
    method: listGroupInsightScores
    httpMethod: get
    tag: Insights scores (beta)
    typeScriptTag: insightsScoresBeta
    description: List insight groups
    parameters:
      - name: limit
        schema: integer
        description: >-
          The number of insight groups to return. Default is 20. Must be between
          1 and 20 inclusive.
      - name: offset
        schema: integer
        description: >-
          Where to start in the list. Use this with pagination. For example, an
          offset of 10 skips the first ten items and then returns the next items
          in the list, up to the query `limit`.
      - name: sort
        schema: string
        description: >-
          Sort flag list by field. Prefix field with <code>-</code> to sort in
          descending order. Allowed fields: name
      - name: query
        schema: string
        description: Filter list of insights groups by name.
      - name: expand
        schema: string
        description: 'Options: `scores`, `environment`, `metadata`'
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/insights/groups/{insightGroupKey}
    method: deleteInsightGroup
    httpMethod: delete
    tag: Insights scores (beta)
    typeScriptTag: insightsScoresBeta
    description: Delete insight group
    parameters:
      - name: insightGroupKey
        schema: string
        required: true
        description: The insight group key
        example: INSIGHTGROUPKEY
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/insights/groups/{insightGroupKey}
    method: expandGroupInsightScores
    httpMethod: get
    tag: Insights scores (beta)
    typeScriptTag: insightsScoresBeta
    description: Get insight group
    parameters:
      - name: insightGroupKey
        schema: string
        required: true
        description: The insight group key
        example: INSIGHTGROUPKEY
      - name: expand
        schema: string
        description: 'Options: `scores`, `environment`'
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/insights/groups/{insightGroupKey}
    method: updateInsightGroupPatch
    httpMethod: patch
    tag: Insights scores (beta)
    typeScriptTag: insightsScoresBeta
    description: Patch insight group
    parameters:
      - name: insightGroupKey
        schema: string
        required: true
        description: The insight group key
        example: INSIGHTGROUPKEY
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '422'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/insights/scores
    method: getInsightScores
    httpMethod: get
    tag: Insights scores (beta)
    typeScriptTag: insightsScoresBeta
    description: Get insight scores
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        required: true
        description: The environment key
        example: ENVIRONMENTKEY
      - name: applicationKey
        schema: string
        description: Comma separated list of application keys
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/pull-requests
    method: listPullRequests
    httpMethod: get
    tag: Insights pull requests (beta)
    typeScriptTag: insightsPullRequestsBeta
    description: List pull requests
    parameters:
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
      - name: environmentKey
        schema: string
        description: >-
          Required if you are using the <code>sort</code> parameter's
          <code>leadTime</code> option to sort pull requests.
      - name: applicationKey
        schema: string
        description: >-
          Filter the results to pull requests deployed to a comma separated list
          of applications
      - name: status
        schema: string
        description: >-
          Filter results to pull requests with the given status. Options:
          `open`, `merged`, `closed`, `deployed`.
      - name: query
        schema: string
        description: Filter list of pull requests by title or author
      - name: limit
        schema: integer
        description: >-
          The number of pull requests to return. Default is 20. Maximum allowed
          is 100.
      - name: expand
        schema: string
        description: >-
          Expand properties in response. Options: `deployments`,
          `flagReferences`, `leadTime`.
      - name: sort
        schema: string
        description: >-
          Sort results. Requires the `environmentKey` to be set. Options:
          `leadTime` (asc) and `-leadTime` (desc). When query option is
          excluded, default sort is by created or merged date.
      - name: from
        schema: string
        description: Unix timestamp in milliseconds. Default value is 7 days ago.
      - name: to
        schema: string
        description: Unix timestamp in milliseconds. Default value is now.
      - name: after
        schema: string
        description: Identifier used for pagination
      - name: before
        schema: string
        description: Identifier used for pagination
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/repositories
    method: listRepositories
    httpMethod: get
    tag: Insights repositories (beta)
    typeScriptTag: insightsRepositoriesBeta
    description: List repositories
    parameters:
      - name: expand
        schema: string
        description: 'Expand properties in response. Options: `projects`'
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /api/v2/engineering-insights/repositories/projects
    method: associateRepositoriesAndProjects
    httpMethod: put
    tag: Insights repositories (beta)
    typeScriptTag: insightsRepositoriesBeta
    description: Associate repositories with projects
    parameters:
      - name: mappings
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
  - url: >-
      /api/v2/engineering-insights/repositories/{repositoryKey}/projects/{projectKey}
    method: removeRepositoryProjectAssociation
    httpMethod: delete
    tag: Insights repositories (beta)
    typeScriptTag: insightsRepositoriesBeta
    description: Remove repository project association
    parameters:
      - name: repositoryKey
        schema: string
        required: true
        description: The repository key
        example: REPOSITORYKEY
      - name: projectKey
        schema: string
        required: true
        description: The project key
        example: PROJECTKEY
    responses:
      - statusCode: '204'
        description: Action succeeded
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
numberOfSchemas: 447
apiDescription: >
  # Overview


  ## Authentication


  LaunchDarkly's REST API uses the HTTPS protocol with a minimum TLS version of
  1.2.


  All REST API resources are authenticated with either [personal or service
  access
  tokens](https://docs.launchdarkly.com/home/account-security/api-access-tokens),
  or session cookies. Other authentication mechanisms are not supported. You can
  manage personal access tokens on your [**Account
  settings**](https://app.launchdarkly.com/settings/tokens) page.


  LaunchDarkly also has SDK keys, mobile keys, and client-side IDs that are used
  by our server-side SDKs, mobile SDKs, and JavaScript-based SDKs, respectively.
  **These keys cannot be used to access our REST API**. These keys are
  environment-specific, and can only perform read-only operations such as
  fetching feature flag settings.


  | Auth
  mechanism
  | Allowed
  resources
  | Use cases                                          |

  |
  -----------------------------------------------------------------------------------------------
  |
  -----------------------------------------------------------------------------------------------------
  | -------------------------------------------------- |

  | [Personal or service access
  tokens](https://docs.launchdarkly.com/home/account-security/api-access-tokens)
  | Can be customized on a per-token
  basis                                                                |
  Building scripts, custom integrations, data export. |

  | SDK
  keys
  | Can only access read-only resources specific to server-side SDKs. Restricted
  to a single environment. | Server-side SDKs                     |

  | Mobile
  keys
  | Can only access read-only resources specific to mobile SDKs, and only for
  flags marked available to mobile keys. Restricted to a single
  environment.           | Mobile SDKs                                        |

  | Client-side
  ID
  | Can only access read-only resources specific to JavaScript-based client-side
  SDKs, and only for flags marked available to client-side. Restricted to a
  single environment.           | Client-side
  JavaScript                             |


  > #### Keep your access tokens and SDK keys private

  >

  > Access tokens should _never_ be exposed in untrusted contexts. Never put an
  access token in client-side JavaScript, or embed it in a mobile application.
  LaunchDarkly has special mobile keys that you can embed in mobile apps. If you
  accidentally expose an access token or SDK key, you can reset it from your
  [**Account settings**](https://app.launchdarkly.com/settings/tokens) page.

  >

  > The client-side ID is safe to embed in untrusted contexts. It's designed for
  use in client-side JavaScript.


  ### Authentication using request header


  The preferred way to authenticate with the API is by adding an `Authorization`
  header containing your access token to your requests. The value of the
  `Authorization` header must be your access token.


  Manage personal access tokens from the [**Account
  settings**](https://app.launchdarkly.com/settings/tokens) page.


  ### Authentication using session cookie


  For testing purposes, you can make API calls directly from your web browser.
  If you are logged in to the LaunchDarkly application, the API will use your
  existing session to authenticate calls.


  If you have a [role](https://docs.launchdarkly.com/home/team/built-in-roles)
  other than Admin, or have a [custom
  role](https://docs.launchdarkly.com/home/team/custom-roles) defined, you may
  not have permission to perform some API calls. You will receive a `401`
  response code in that case.


  > ### Modifying the Origin header causes an error

  >

  > LaunchDarkly validates that the Origin header for any API request
  authenticated by a session cookie matches the expected Origin header. The
  expected Origin header is `https://app.launchdarkly.com`.

  >

  > If the Origin header does not match what's expected, LaunchDarkly returns an
  error. This error can prevent the LaunchDarkly app from working correctly.

  >

  > Any browser extension that intentionally changes the Origin header can cause
  this problem. For example, the `Allow-Control-Allow-Origin: *` Chrome
  extension changes the Origin header to `http://evil.com` and causes the app to
  fail.

  >

  > To prevent this error, do not modify your Origin header.

  >

  > LaunchDarkly does not require origin matching when authenticating with an
  access token, so this issue does not affect normal API usage.


  ## Representations


  All resources expect and return JSON response bodies. Error responses also
  send a JSON body. To learn more about the error format of the API, read
  [Errors](https://apidocs.launchdarkly.com).


  In practice this means that you always get a response with a `Content-Type`
  header set to `application/json`.


  In addition, request bodies for `PATCH`, `POST`, and `PUT` requests must be
  encoded as JSON with a `Content-Type` header set to `application/json`.


  ### Summary and detailed representations


  When you fetch a list of resources, the response includes only the most
  important attributes of each resource. This is a _summary representation_ of
  the resource. When you fetch an individual resource, such as a single feature
  flag, you receive a _detailed representation_ of the resource.


  The best way to find a detailed representation is to follow links. Every
  summary representation includes a link to its detailed representation.


  ### Expanding responses


  Sometimes the detailed representation of a resource does not include all of
  the attributes of the resource by default. If this is the case, the request
  method will clearly document this and describe which attributes you can
  include in an expanded response.


  To include the additional attributes, append the `expand` request parameter to
  your request and add a comma-separated list of the attributes to include. For
  example, when you append `?expand=members,roles` to the [Get
  team](https://apidocs.launchdarkly.com) endpoint, the expanded response
  includes both of these attributes.


  ### Links and addressability


  The best way to navigate the API is by following links. These are attributes
  in representations that link to other resources. The API always uses the same
  format for links:


  - Links to other resources within the API are encapsulated in a `_links`
  object

  - If the resource has a corresponding link to HTML content on the site, it is
  stored in a special `_site` link


  Each link has two attributes:


  - An `href`, which contains the URL

  - A `type`, which describes the content type


  For example, a feature resource might return the following:


  ```json

  {
    "_links": {
      "parent": {
        "href": "/api/features",
        "type": "application/json"
      },
      "self": {
        "href": "/api/features/sort.order",
        "type": "application/json"
      }
    },
    "_site": {
      "href": "/features/sort.order",
      "type": "text/html"
    }
  }

  ```


  From this, you can navigate to the parent collection of features by following
  the `parent` link, or navigate to the site page for the feature by following
  the `_site` link.


  Collections are always represented as a JSON object with an `items` attribute
  containing an array of representations. Like all other representations,
  collections have `_links` defined at the top level.


  Paginated collections include `first`, `last`, `next`, and `prev` links
  containing a URL with the respective set of elements in the collection.


  ## Updates


  Resources that accept partial updates use the `PATCH` verb. Most resources
  support the [JSON patch](https://apidocs.launchdarkly.com) format. Some
  resources also support the [JSON merge
  patch](https://apidocs.launchdarkly.com) format, and some resources support
  the [semantic patch](https://apidocs.launchdarkly.com) format, which is a way
  to specify the modifications to perform as a set of executable instructions.
  Each resource supports optional [comments](https://apidocs.launchdarkly.com)
  that you can submit with updates. Comments appear in outgoing webhooks, the
  audit log, and other integrations.


  When a resource supports both JSON patch and semantic patch, we document both
  in the request method. However, the specific request body fields and
  descriptions included in our documentation only match one type of patch or the
  other.


  ### Updates using JSON patch


  [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) is a way to
  specify the modifications to perform on a resource. JSON patch uses paths and
  a limited set of operations to describe how to transform the current state of
  the resource into a new state. JSON patch documents are always arrays, where
  each element contains an operation, a path to the field to update, and the new
  value.


  For example, in this feature flag representation:


  ```json

  {
      "name": "New recommendations engine",
      "key": "engine.enable",
      "description": "This is the description",
      ...
  }

  ```

  You can change the feature flag's description with the following patch
  document:


  ```json

  [{ "op": "replace", "path": "/description", "value": "This is the new
  description" }]

  ```


  You can specify multiple modifications to perform in a single request. You can
  also test that certain preconditions are met before applying the patch:


  ```json

  [
    { "op": "test", "path": "/version", "value": 10 },
    { "op": "replace", "path": "/description", "value": "The new description" }
  ]

  ```


  The above patch request tests whether the feature flag's `version` is `10`,
  and if so, changes the feature flag's description.


  Attributes that are not editable, such as a resource's `_links`, have names
  that start with an underscore.


  ### Updates using JSON merge patch


  [JSON merge patch](https://datatracker.ietf.org/doc/html/rfc7386) is another
  format for specifying the modifications to perform on a resource. JSON merge
  patch is less expressive than JSON patch. However, in many cases it is simpler
  to construct a merge patch document. For example, you can change a feature
  flag's description with the following merge patch document:


  ```json

  {
    "description": "New flag description"
  }

  ```


  ### Updates using semantic patch


  Some resources support the semantic patch format. A semantic patch is a way to
  specify the modifications to perform on a resource as a set of executable
  instructions.


  Semantic patch allows you to be explicit about intent using precise, custom
  instructions. In many cases, you can define semantic patch instructions
  independently of the current state of the resource. This can be useful when
  defining a change that may be applied at a future date.


  To make a semantic patch request, you must append
  `domain-model=launchdarkly.semanticpatch` to your `Content-Type` header.


  Here's how:


  ```

  Content-Type: application/json; domain-model=launchdarkly.semanticpatch

  ```


  If you call a semantic patch resource without this header, you will receive a
  `400` response because your semantic patch will be interpreted as a JSON
  patch.


  The body of a semantic patch request takes the following properties:


  * `comment` (string): (Optional) A description of the update.

  * `environmentKey` (string): (Required for some resources only) The
  environment key.

  * `instructions` (array): (Required) A list of actions the update should
  perform. Each action in the list must be an object with a `kind` property that
  indicates the instruction. If the instruction requires parameters, you must
  include those parameters as additional fields in the object. The documentation
  for each resource that supports semantic patch includes the available
  instructions and any additional parameters.


  For example:


  ```json

  {
    "comment": "optional comment",
    "instructions": [ {"kind": "turnFlagOn"} ]
  }

  ```


  If any instruction in the patch encounters an error, the endpoint returns an
  error and will not change the resource. In general, each instruction silently
  does nothing if the resource is already in the state you request.


  ### Updates with comments


  You can submit optional comments with `PATCH` changes.


  To submit a comment along with a JSON patch document, use the following
  format:


  ```json

  {
    "comment": "This is a comment string",
    "patch": [{ "op": "replace", "path": "/description", "value": "The new description" }]
  }

  ```


  To submit a comment along with a JSON merge patch document, use the following
  format:


  ```json

  {
    "comment": "This is a comment string",
    "merge": { "description": "New flag description" }
  }

  ```


  To submit a comment along with a semantic patch, use the following format:


  ```json

  {
    "comment": "This is a comment string",
    "instructions": [ {"kind": "turnFlagOn"} ]
  }

  ```


  ## Errors


  The API always returns errors in a common format. Here's an example:


  ```json

  {
    "code": "invalid_request",
    "message": "A feature with that key already exists",
    "id": "30ce6058-87da-11e4-b116-123b93f75cba"
  }

  ```


  The `code` indicates the general class of error. The `message` is a
  human-readable explanation of what went wrong. The `id` is a unique
  identifier. Use it when you're working with LaunchDarkly Support to debug a
  problem with a specific API call.


  ### HTTP status error response codes


  | Code | Definition        |
  Description
  | Possible Solution                                                |

  | ---- | ----------------- |
  -------------------------------------------------------------------------------------------
  | ---------------------------------------------------------------- |

  | 400  | Invalid request       | The request cannot be
  understood.                                    | Ensure JSON syntax in request
  body is correct.                   |

  | 401  | Invalid access token      | Requestor is unauthorized or does not
  have permission for this API
  call.                                                | Ensure your API access
  token is valid and has the appropriate
  permissions.                                     |

  | 403  | Forbidden         | Requestor does not have access to this
  resource.                                                | Ensure that the
  account member or access token has proper permissions set. |

  | 404  | Invalid resource identifier | The requested resource is not valid. |
  Ensure that the resource is correctly identified by ID or key. |

  | 405  | Method not allowed | The request method is not allowed on this
  resource. | Ensure that the HTTP verb is correct. |

  | 409  | Conflict          | The API request can not be completed because it
  conflicts with a concurrent API request. | Retry your
  request.                                              |

  | 422  | Unprocessable entity | The API request can not be completed because
  the update description can not be understood. | Ensure that the request body
  is correct for the type of patch you are using, either JSON patch or semantic
  patch.

  | 429  | Too many requests | Read [Rate
  limiting](https://apidocs.launchdarkly.com).
  | Wait and try again later.                                        |


  ## CORS


  The LaunchDarkly API supports Cross Origin Resource Sharing (CORS) for AJAX
  requests from any origin. If an `Origin` header is given in a request, it will
  be echoed as an explicitly allowed origin. Otherwise the request returns a
  wildcard, `Access-Control-Allow-Origin: *`. For more information on CORS, read
  the [CORS W3C Recommendation](http://www.w3.org/TR/cors). Example CORS headers
  might look like:


  ```http

  Access-Control-Allow-Headers: Accept, Content-Type, Content-Length,
  Accept-Encoding, Authorization

  Access-Control-Allow-Methods: OPTIONS, GET, DELETE, PATCH

  Access-Control-Allow-Origin: *

  Access-Control-Max-Age: 300

  ```


  You can make authenticated CORS calls just as you would make same-origin
  calls, using either [token or session-based
  authentication](https://apidocs.launchdarkly.com). If you are using session
  authentication, you should set the `withCredentials` property for your `xhr`
  request to `true`. You should never expose your access tokens to untrusted
  entities.


  ## Rate limiting


  We use several rate limiting strategies to ensure the availability of our
  APIs. Rate-limited calls to our APIs return a `429` status code. Calls to our
  APIs include headers indicating the current rate limit status. The specific
  headers returned depend on the API route being called. The limits differ based
  on the route, authentication mechanism, and other factors. Routes that are not
  rate limited may not contain any of the headers described below.


  > ### Rate limiting and SDKs

  >

  > LaunchDarkly SDKs are never rate limited and do not use the API endpoints
  defined here. LaunchDarkly uses a different set of approaches, including
  streaming/server-sent events and a global CDN, to ensure availability to the
  routes used by LaunchDarkly SDKs.


  ### Global rate limits


  Authenticated requests are subject to a global limit. This is the maximum
  number of calls that your account can make to the API per ten seconds. All
  service and personal access tokens on the account share this limit, so
  exceeding the limit with one access token will impact other tokens. Calls that
  are subject to global rate limits may return the headers below:


  | Header name                    |
  Description
  |

  | ------------------------------ |
  --------------------------------------------------------------------------------
  |

  | `X-Ratelimit-Global-Remaining` | The maximum number of requests the account
  is permitted to make per ten seconds. |

  | `X-Ratelimit-Reset`            | The time at which the current rate limit
  window resets in epoch milliseconds.    |


  We do not publicly document the specific number of calls that can be made
  globally. This limit may change, and we encourage clients to program against
  the specification, relying on the two headers defined above, rather than
  hardcoding to the current limit.


  ### Route-level rate limits


  Some authenticated routes have custom rate limits. These also reset every ten
  seconds. Any service or personal access tokens hitting the same route share
  this limit, so exceeding the limit with one access token may impact other
  tokens. Calls that are subject to route-level rate limits return the headers
  below:


  | Header name                   |
  Description
  |

  | ----------------------------- |
  -----------------------------------------------------------------------------------------------------
  |

  | `X-Ratelimit-Route-Remaining` | The maximum number of requests to the
  current route the account is permitted to make per ten seconds. |

  | `X-Ratelimit-Reset`           | The time at which the current rate limit
  window resets in epoch milliseconds.                         |


  A _route_ represents a specific URL pattern and verb. For example, the [Delete
  environment](https://apidocs.launchdarkly.com) endpoint is considered a single
  route, and each call to delete an environment counts against your route-level
  rate limit for that route.


  We do not publicly document the specific number of calls that an account can
  make to each endpoint per ten seconds. These limits may change, and we
  encourage clients to program against the specification, relying on the two
  headers defined above, rather than hardcoding to the current limits.


  ### IP-based rate limiting


  We also employ IP-based rate limiting on some API routes. If you hit an
  IP-based rate limit, your API response will include a `Retry-After` header
  indicating how long to wait before re-trying the call. Clients must wait at
  least `Retry-After` seconds before making additional calls to our API, and
  should employ jitter and backoff strategies to avoid triggering rate limits
  again.


  ## OpenAPI (Swagger) and client libraries


  We have a [complete OpenAPI (Swagger)
  specification](https://app.launchdarkly.com/api/v2/openapi.json) for our API.


  We auto-generate multiple client libraries based on our OpenAPI specification.
  To learn more, visit the [collection of client libraries on
  GitHub](https://github.com/search?q=topic%3Alaunchdarkly-api+org%3Alaunchdarkly&type=Repositories).
  You can also use this specification to generate client libraries to interact
  with our REST API in your language of choice.


  Our OpenAPI specification is supported by several API-based tools such as
  Postman and Insomnia. In many cases, you can directly import our specification
  to explore our APIs.


  ## Method overriding


  Some firewalls and HTTP clients restrict the use of verbs other than `GET` and
  `POST`. In those environments, our API endpoints that use `DELETE`, `PATCH`,
  and `PUT` verbs are inaccessible.


  To avoid this issue, our API supports the `X-HTTP-Method-Override` header,
  allowing clients to "tunnel" `DELETE`, `PATCH`, and `PUT` requests using a
  `POST` request.


  For example, to call a `PATCH` endpoint using a `POST` request, you can
  include `X-HTTP-Method-Override:PATCH` as a header.


  ## Beta resources


  We sometimes release new API resources in **beta** status before we release
  them with general availability.


  Resources that are in beta are still undergoing testing and development. They
  may change without notice, including becoming backwards incompatible.


  We try to promote resources into general availability as quickly as possible.
  This happens after sufficient testing and when we're satisfied that we no
  longer need to make backwards-incompatible changes.


  We mark beta resources with a "Beta" callout in our documentation, pictured
  below:


  > ### This feature is in beta

  >

  > To use this feature, pass in a header including the `LD-API-Version` key
  with value set to `beta`. Use this header with each call. To learn more, read
  [Beta resources](https://apidocs.launchdarkly.com).

  >

  > Resources that are in beta are still undergoing testing and development.
  They may change without notice, including becoming backwards incompatible.


  ### Using beta resources


  To use a beta resource, you must include a header in the request. If you call
  a beta resource without this header, you receive a `403` response.


  Use this header:


  ```

  LD-API-Version: beta

  ```


  ## Federal environments


  The version of LaunchDarkly that is available on domains controlled by the
  United States government is different from the version of LaunchDarkly
  available to the general public. If you are an employee or contractor for a
  United States federal agency and use LaunchDarkly in your work, you likely use
  the federal instance of LaunchDarkly.


  If you are working in the federal instance of LaunchDarkly, the base URI for
  each request is `https://app.launchdarkly.us`. In the "Try it" sandbox for
  each request, click the request path to view the complete resource path for
  the federal environment.


  To learn more, read [LaunchDarkly in federal
  environments](https://docs.launchdarkly.com/home/advanced/federal).


  ## Versioning


  We try hard to keep our REST API backwards compatible, but we occasionally
  have to make backwards-incompatible changes in the process of shipping new
  features. These breaking changes can cause unexpected behavior if you don't
  prepare for them accordingly.


  Updates to our REST API include support for the latest features in
  LaunchDarkly. We also release a new version of our REST API every time we make
  a breaking change. We provide simultaneous support for multiple API versions
  so you can migrate from your current API version to a new version at your own
  pace.


  ### Setting the API version per request


  You can set the API version on a specific request by sending an
  `LD-API-Version` header, as shown in the example below:


  ```

  LD-API-Version: 20220603

  ```


  The header value is the version number of the API version you would like to
  request. The number for each version corresponds to the date the version was
  released in `yyyymmdd` format. In the example above the version `20220603`
  corresponds to June 03, 2022.


  ### Setting the API version per access token


  When you create an access token, you must specify a specific version of the
  API to use. This ensures that integrations using this token cannot be broken
  by version changes.


  Tokens created before versioning was released have their version set to
  `20160426`, which is the version of the API that existed before the current
  versioning scheme, so that they continue working the same way they did before
  versioning.


  If you would like to upgrade your integration to use a new API version, you
  can explicitly set the header described above.


  > ### Best practice: Set the header for every client or integration

  >

  > We recommend that you set the API version header explicitly in any client or
  integration you build.

  >

  > Only rely on the access token API version during manual testing.


  ### API version changelog


  |<div style="width:75px">Version</div> | Changes | End of life (EOL)

  |---|---|---|

  | `20220603` | <ul><li>Changed the [list
  projects](https://apidocs.launchdarkly.com) return value:<ul><li>Response is
  now paginated with a default limit of `20`.</li><li>Added support for filter
  and sort.</li><li>The project `environments` field is now expandable. This
  field is omitted by default.</li></ul></li><li>Changed the [get
  project](https://apidocs.launchdarkly.com) return value:<ul><li>The
  `environments` field is now expandable. This field is omitted by
  default.</li></ul></li></ul> | Current |

  | `20210729` | <ul><li>Changed the [create approval
  request](https://apidocs.launchdarkly.com) return value. It now returns HTTP
  Status Code `201` instead of `200`.</li><li> Changed the [get
  users](https://apidocs.launchdarkly.com) return value. It now returns a user
  record, not a user. </li><li>Added additional optional fields to environment,
  segments, flags, members, and segments, including the ability to create big
  segments. </li><li> Added default values for flag variations when new
  environments are created. </li><li>Added filtering and pagination for getting
  flags and members, including `limit`, `number`, `filter`, and `sort` query
  parameters. </li><li>Added endpoints for expiring user targets for flags and
  segments, scheduled changes, access tokens, Relay Proxy configuration,
  integrations and subscriptions, and approvals. </li></ul> | 2023-06-03 |

  | `20191212` | <ul><li>[List feature flags](https://apidocs.launchdarkly.com)
  now defaults to sending summaries of feature flag configurations, equivalent
  to setting the query parameter `summary=true`. Summaries omit flag targeting
  rules and individual user targets from the payload. </li><li> Added endpoints
  for flags, flag status, projects, environments, audit logs, members, users,
  custom roles, segments, usage, streams, events, and data export. </li></ul> |
  2022-07-29 |

  | `20160426` | <ul><li>Initial versioning of API. Tokens created before
  versioning have their version set to this.</li></ul> | 2020-12-12 |
