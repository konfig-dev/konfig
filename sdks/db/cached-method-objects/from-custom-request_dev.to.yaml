hash: 585b6312b460bf06d304157fccafca55a75bb66b9f336f720f96c857f3b26e22
methodObjects:
  - url: /api/articles
    method: listPublishedArticles
    httpMethod: get
    tag: articles
    typeScriptTag: articles
    description: Published articles
    parameters:
      - name: page
        schema: integer
        required: false
        description: Pagination page
      - name: perPage
        schema: integer
        required: false
        description: >-
          Page size (the number of items to return per page). The default
          maximum value can be overridden by "API_PER_PAGE_MAX" environment
          variable.
      - name: tag
        schema: string
        required: false
        description: >-
          Using this parameter will retrieve articles that contain the requested
          tag. Articles

          will be ordered by descending popularity.This parameter can be used in
          conjuction with `top`.
      - name: tags
        schema: string
        required: false
        description: >-
          Using this parameter will retrieve articles with any of the
          comma-separated tags.

          Articles will be ordered by descending popularity.
      - name: tagsExclude
        schema: string
        required: false
        description: >-
          Using this parameter will retrieve articles that do _not_ contain
          _any_

          of comma-separated tags. Articles will be ordered by descending
          popularity.
      - name: username
        schema: string
        required: false
        description: |-
          Using this parameter will retrieve articles belonging
                      to a User or Organization ordered by descending publication date.
                      If `state=all` the number of items returned will be `1000` instead of the default `30`.
                      This parameter can be used in conjuction with `state`.
      - name: state
        schema: string
        required: false
        description: >-
          Using this parameter will allow the client to check which articles are
          fresh or rising.
                      If `state=fresh` the server will return fresh articles.
                      If `state=rising` the server will return rising articles.
                      This param can be used in conjuction with `username`, only if set to `all`.
      - name: top
        schema: integer
        required: false
        description: >-
          Using this parameter will allow the client to return the most popular
          articles

          in the last `N` days.

          `top` indicates the number of days since publication of the articles
          returned.

          This param can be used in conjuction with `tag`.
      - name: collectionId
        schema: integer
        required: false
        description: >-
          Adding this will allow the client to return the list of articles

          belonging to the requested collection, ordered by ascending
          publication date.
    responses:
      - statusCode: '200'
        description: ''
  - url: /api/articles
    method: createNewArticle
    httpMethod: post
    tag: articles
    typeScriptTag: articles
    description: Publish article
    parameters:
      - name: article
        schema: object
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /api/articles/latest
    method: listLatestPublished
    httpMethod: get
    tag: articles
    typeScriptTag: articles
    description: Published articles sorted by published date
    parameters:
      - name: page
        schema: integer
        required: false
        description: Pagination page
      - name: perPage
        schema: integer
        required: false
        description: >-
          Page size (the number of items to return per page). The default
          maximum value can be overridden by "API_PER_PAGE_MAX" environment
          variable.
    responses:
      - statusCode: '200'
        description: ''
  - url: /api/articles/{id}
    method: getById
    httpMethod: get
    tag: articles
    typeScriptTag: articles
    description: Published article by id
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/articles/{id}
    method: updateById
    httpMethod: put
    tag: articles
    typeScriptTag: articles
    description: Update an article by id
    parameters:
      - name: id
        schema: integer
        required: true
        description: The ID of the user to unpublish.
      - name: article
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /api/articles/{username}/{slug}
    method: getByPath
    httpMethod: get
    tag: articles
    typeScriptTag: articles
    description: Published article by path
    parameters:
      - name: username
        schema: string
        required: true
        description: ''
      - name: slug
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/articles/me
    method: getPublishedList
    httpMethod: get
    tag: articles
    typeScriptTag: articles
    description: User's articles
    parameters:
      - name: page
        schema: integer
        required: false
        description: Pagination page
      - name: perPage
        schema: integer
        required: false
        description: >-
          Page size (the number of items to return per page). The default
          maximum value can be overridden by "API_PER_PAGE_MAX" environment
          variable.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /api/articles/me/published
    method: getPublishedList
    httpMethod: get
    tag: articles
    typeScriptTag: articles
    description: User's published articles
    parameters:
      - name: page
        schema: integer
        required: false
        description: Pagination page
      - name: perPage
        schema: integer
        required: false
        description: >-
          Page size (the number of items to return per page). The default
          maximum value can be overridden by "API_PER_PAGE_MAX" environment
          variable.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /api/articles/me/unpublished
    method: getUnpublishedList
    httpMethod: get
    tag: articles
    typeScriptTag: articles
    description: User's unpublished articles
    parameters:
      - name: page
        schema: integer
        required: false
        description: Pagination page
      - name: perPage
        schema: integer
        required: false
        description: >-
          Page size (the number of items to return per page). The default
          maximum value can be overridden by "API_PER_PAGE_MAX" environment
          variable.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /api/articles/me/all
    method: getAllUserArticles
    httpMethod: get
    tag: articles
    typeScriptTag: articles
    description: User's all articles
    parameters:
      - name: page
        schema: integer
        required: false
        description: Pagination page
      - name: perPage
        schema: integer
        required: false
        description: >-
          Page size (the number of items to return per page). The default
          maximum value can be overridden by "API_PER_PAGE_MAX" environment
          variable.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /api/articles/{id}/unpublish
    method: unpublishById
    httpMethod: put
    tag: articles
    typeScriptTag: articles
    description: Unpublish an article
    parameters:
      - name: id
        schema: integer
        required: true
        description: The ID of the article to unpublish.
      - name: note
        schema: string
        required: false
        description: Content for the note that's created along with unpublishing
    responses:
      - statusCode: '204'
        description: Article successfully unpublished
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/segments
    method: listAudienceSegments
    httpMethod: get
    tag: segments
    typeScriptTag: segments
    description: Manually managed audience segments
    parameters:
      - name: perPage
        schema: integer
        required: false
        description: >-
          Page size (the number of items to return per page). The default
          maximum value can be overridden by "API_PER_PAGE_MAX" environment
          variable.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /api/segments
    method: createManuallyManagedSegment
    httpMethod: post
    tag: segments
    typeScriptTag: segments
    description: Create a manually managed audience segment
    parameters: []
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /api/segments/{id}
    method: deleteManuallyManagedSegment
    httpMethod: delete
    tag: segments
    typeScriptTag: segments
    description: Delete a manually managed audience segment
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
  - url: /api/segments/{id}
    method: getById
    httpMethod: get
    tag: segments
    typeScriptTag: segments
    description: A manually managed audience segment
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/segments/{id}/users
    method: getUserListInSegment
    httpMethod: get
    tag: segments
    typeScriptTag: segments
    description: Users in a manually managed audience segment
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
      - name: perPage
        schema: integer
        required: false
        description: >-
          Page size (the number of items to return per page). The default
          maximum value can be overridden by "API_PER_PAGE_MAX" environment
          variable.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/segments/{id}/add_users
    method: addUsersToSegment
    httpMethod: put
    tag: segments
    typeScriptTag: segments
    description: Add users to a manually managed audience segment
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
      - name: user_ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /api/segments/{id}/remove_users
    method: removeUsersFromSegment
    httpMethod: put
    tag: segments
    typeScriptTag: segments
    description: Remove users from a manually managed audience segment
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
      - name: user_ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /api/billboards
    method: getList
    httpMethod: get
    tag: billboards
    typeScriptTag: billboards
    description: Billboards
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /api/billboards
    method: createNewBillboard
    httpMethod: post
    tag: billboards
    typeScriptTag: billboards
    description: Create a billboard
    parameters: []
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /api/billboards/{id}
    method: getById
    httpMethod: get
    tag: billboards
    typeScriptTag: billboards
    description: A billboard (by id)
    parameters:
      - name: id
        schema: integer
        required: true
        description: The ID of the billboard.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/billboards/{id}
    method: updateById
    httpMethod: put
    tag: billboards
    typeScriptTag: billboards
    description: Update a billboard by ID
    parameters:
      - name: id
        schema: integer
        required: true
        description: The ID of the billboard.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/billboards/{id}/unpublish
    method: unpublishBillboard
    httpMethod: put
    tag: billboards
    typeScriptTag: billboards
    description: Unpublish a billboard
    parameters:
      - name: id
        schema: integer
        required: true
        description: The ID of the billboard to unpublish.
    responses:
      - statusCode: '204'
        description: no content
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/comments
    method: getAllThreaded
    httpMethod: get
    tag: comments
    typeScriptTag: comments
    description: Comments
    parameters:
      - name: page
        schema: integer
        required: false
        description: Pagination page
      - name: perPage
        schema: integer
        required: false
        description: >-
          Page size (the number of items to return per page). The default
          maximum value can be overridden by "API_PER_PAGE_MAX" environment
          variable.
      - name: aId
        schema: string
        required: false
        description: Article identifier.
      - name: pId
        schema: string
        required: false
        description: Podcast Episode identifier.
      - name: page
        schema: string
        required: false
        description: Page
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/comments/{id}
    method: getThreadedComment
    httpMethod: get
    tag: comments
    typeScriptTag: comments
    description: Comment by id
    parameters:
      - name: id
        schema: integer
        required: true
        description: Comment identifier.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/follows/tags
    method: getTagList
    httpMethod: get
    tag: followed_tags
    typeScriptTag: followedTags
    description: Followed Tags
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /api/followers/users
    method: getList
    httpMethod: get
    tag: followers
    typeScriptTag: followers
    description: Followers
    parameters:
      - name: page
        schema: integer
        required: false
        description: Pagination page
      - name: perPage
        schema: integer
        required: false
        description: >-
          Page size (the number of items to return per page). The default
          maximum value can be overridden by "API_PER_PAGE_MAX" environment
          variable.
      - name: sort
        schema: string
        required: false
        description: >-
          Default is 'created_at'. Specifies the sort order for the created_at
          param of the follow
                                          relationship. To sort by newest followers first (descending order) specify
                                          ?sort=-created_at.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /api/organizations/{username}
    method: getByUsername
    httpMethod: get
    tag: organizations
    typeScriptTag: organizations
    description: An organization (by username)
    parameters:
      - name: username
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/organizations/{organization_id_or_username}/users
    method: listUsers
    httpMethod: get
    tag: organizations
    typeScriptTag: organizations
    description: Organization's users
    parameters:
      - name: organizationIdOrUsername
        schema: string
        required: true
        description: ''
      - name: page
        schema: integer
        required: false
        description: Pagination page
      - name: perPage
        schema: integer
        required: false
        description: >-
          Page size (the number of items to return per page). The default
          maximum value can be overridden by "API_PER_PAGE_MAX" environment
          variable.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/organizations/{organization_id_or_username}/articles
    method: listArticles
    httpMethod: get
    tag: organizations
    typeScriptTag: organizations
    description: Organization's Articles
    parameters:
      - name: organizationIdOrUsername
        schema: string
        required: true
        description: ''
      - name: page
        schema: integer
        required: false
        description: Pagination page
      - name: perPage
        schema: integer
        required: false
        description: >-
          Page size (the number of items to return per page). The default
          maximum value can be overridden by "API_PER_PAGE_MAX" environment
          variable.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/organizations
    method: listOfDev
    httpMethod: get
    tag: organizations
    typeScriptTag: organizations
    description: Organizations
    parameters:
      - name: page
        schema: integer
        required: false
        description: Pagination page
      - name: perPage
        schema: integer
        required: false
        description: >-
          Page size (the number of items to return per page). The default
          maximum value can be overridden by "API_PER_PAGE_MAX" environment
          variable.
    responses:
      - statusCode: '200'
        description: ''
  - url: /api/organizations
    method: createNewOrganization
    httpMethod: post
    tag: organizations
    typeScriptTag: organizations
    description: Create an Organization
    parameters:
      - name: summary
        schema: string
        description: ''
      - name: type_of
        schema: string
        description: ''
      - name: username
        schema: string
        description: ''
      - name: name
        schema: string
        description: ''
      - name: twitter_username
        schema: string
        description: ''
      - name: github_username
        schema: string
        description: ''
      - name: url
        schema: string
        description: ''
      - name: location
        schema: string
        description: ''
      - name: joined_at
        schema: string
        description: ''
      - name: tech_stack
        schema: string
        description: ''
      - name: tag_line
        schema: string
        description: ''
      - name: story
        schema: string
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '422'
        description: ''
  - url: /api/organizations/{id}
    method: deleteById
    httpMethod: delete
    tag: organizations
    typeScriptTag: organizations
    description: Delete an Organization by id
    parameters:
      - name: id
        schema: integer
        required: true
        description: The ID of the organization.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /api/organizations/{id}
    method: getById
    httpMethod: get
    tag: organizations
    typeScriptTag: organizations
    description: An organization (by id)
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/organizations/{id}
    method: updateById
    httpMethod: put
    tag: organizations
    typeScriptTag: organizations
    description: Update an organization by id
    parameters:
      - name: id
        schema: integer
        required: true
        description: The ID of the organization to update.
      - name: summary
        schema: string
        description: ''
      - name: type_of
        schema: string
        description: ''
      - name: username
        schema: string
        description: ''
      - name: name
        schema: string
        description: ''
      - name: twitter_username
        schema: string
        description: ''
      - name: github_username
        schema: string
        description: ''
      - name: url
        schema: string
        description: ''
      - name: location
        schema: string
        description: ''
      - name: joined_at
        schema: string
        description: ''
      - name: tech_stack
        schema: string
        description: ''
      - name: tag_line
        schema: string
        description: ''
      - name: story
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /api/pages
    method: listAllDetails
    httpMethod: get
    tag: pages
    typeScriptTag: pages
    description: show details for all pages
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /api/pages
    method: createNewPage
    httpMethod: post
    tag: pages
    typeScriptTag: pages
    description: pages
    parameters:
      - name: title
        schema: string
        description: ''
      - name: description
        schema: string
        description: ''
      - name: slug
        schema: string
        description: ''
      - name: body_markdown
        schema: string
        description: ''
      - name: body_json
        schema: string
        description: ''
      - name: is_top_level_path
        schema: boolean
        description: ''
      - name: template
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /api/pages/{id}
    method: removePageById
    httpMethod: delete
    tag: pages
    typeScriptTag: pages
    description: remove a page
    parameters:
      - name: id
        schema: integer
        required: true
        description: The ID of the page.
    responses:
      - statusCode: '200'
        description: Representation of a page object
      - statusCode: '401'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /api/pages/{id}
    method: getDetails
    httpMethod: get
    tag: pages
    typeScriptTag: pages
    description: show details for a page
    parameters:
      - name: id
        schema: integer
        required: true
        description: The ID of the page.
    responses:
      - statusCode: '200'
        description: Representation of a page object
  - url: /api/pages/{id}
    method: updatePageDetails
    httpMethod: put
    tag: pages
    typeScriptTag: pages
    description: update details for a page
    parameters:
      - name: id
        schema: integer
        required: true
        description: The ID of the page.
      - name: title
        schema: string
        required: true
        description: ''
      - name: description
        schema: string
        required: true
        description: ''
      - name: slug
        schema: string
        required: true
        description: ''
      - name: body_markdown
        schema: string
        required: false
        description: ''
      - name: body_json
        schema: string
        required: false
        description: ''
      - name: is_top_level_path
        schema: boolean
        required: false
        description: ''
      - name: social_image
        schema: object
        required: false
        description: ''
      - name: template
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: Representation of a page object
      - statusCode: '401'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /api/podcast_episodes
    method: listByDescendingPublicationDate
    httpMethod: get
    tag: podcast_episodes
    typeScriptTag: podcastEpisodes
    description: Podcast Episodes
    parameters:
      - name: page
        schema: integer
        required: false
        description: Pagination page
      - name: perPage
        schema: integer
        required: false
        description: >-
          Page size (the number of items to return per page). The default
          maximum value can be overridden by "API_PER_PAGE_MAX" environment
          variable.
      - name: username
        schema: string
        required: false
        description: >-
          Using this parameter will retrieve episodes belonging to a specific
          podcast.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/profile_images/{username}
    method: getByUsername
    httpMethod: get
    tag: profile images
    typeScriptTag: profileImages
    description: A Users or organizations profile image
    parameters:
      - name: username
        schema: string
        required: true
        description: >-
          The parameter is the username of the user or the username of the
          organization.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/reactions/toggle
    method: toggleUserReaction
    httpMethod: post
    tag: reactions
    typeScriptTag: reactions
    description: toggle reaction
    parameters:
      - name: category
        schema: string
        required: true
        description: ''
      - name: reactableId
        schema: integer
        required: true
        description: ''
      - name: reactableType
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /api/reactions
    method: createReaction
    httpMethod: post
    tag: reactions
    typeScriptTag: reactions
    description: create reaction
    parameters:
      - name: category
        schema: string
        required: true
        description: ''
      - name: reactableId
        schema: integer
        required: true
        description: ''
      - name: reactableType
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /api/readinglist
    method: getUserReadinglist
    httpMethod: get
    tag: readinglist
    typeScriptTag: readinglist
    description: Readinglist
    parameters:
      - name: page
        schema: integer
        required: false
        description: Pagination page
      - name: perPage
        schema: integer
        required: false
        description: >-
          Page size (the number of items to return per page). The default
          maximum value can be overridden by "API_PER_PAGE_MAX" environment
          variable.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /api/tags
    method: listByPopularity
    httpMethod: get
    tag: tags
    typeScriptTag: tags
    description: Tags
    parameters:
      - name: page
        schema: integer
        required: false
        description: Pagination page
      - name: perPage
        schema: integer
        required: false
        description: >-
          Page size (the number of items to return per page). The default
          maximum value can be overridden by "API_PER_PAGE_MAX" environment
          variable.
    responses:
      - statusCode: '200'
        description: ''
  - url: /api/users/{id}/suspend
    method: suspendUser
    httpMethod: put
    tag: users
    typeScriptTag: users
    description: Suspend a User
    parameters:
      - name: id
        schema: integer
        required: true
        description: The ID of the user to suspend.
    responses:
      - statusCode: '204'
        description: User successfully unpublished
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/users/{id}/limited
    method: removeLimits
    httpMethod: delete
    tag: users
    typeScriptTag: users
    description: Remove limited for a User
    parameters:
      - name: id
        schema: integer
        required: true
        description: The ID of the user to un-limit.
    responses:
      - statusCode: '204'
        description: User successfully un-limited
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/users/{id}/limited
    method: addLimitedRole
    httpMethod: put
    tag: users
    typeScriptTag: users
    description: Add limited role for a User
    parameters:
      - name: id
        schema: integer
        required: true
        description: The ID of the user to limit.
    responses:
      - statusCode: '204'
        description: User successfully limited
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/users/{id}/spam
    method: removeSpamRole
    httpMethod: delete
    tag: users
    typeScriptTag: users
    description: Remove spam role from a User
    parameters:
      - name: id
        schema: integer
        required: true
        description: The ID of the user to remove the spam role from.
    responses:
      - statusCode: '204'
        description: Successfully removed the spam role from a user
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/users/{id}/spam
    method: assignSpamRole
    httpMethod: put
    tag: users
    typeScriptTag: users
    description: Add spam role for a User
    parameters:
      - name: id
        schema: integer
        required: true
        description: The ID of the user to assign the spam role.
    responses:
      - statusCode: '204'
        description: Spam role assigned to the user successfully
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/users/{id}/trusted
    method: removeTrustedRole
    httpMethod: delete
    tag: users
    typeScriptTag: users
    description: Remove trusted role from a User
    parameters:
      - name: id
        schema: integer
        required: true
        description: The ID of the user to remove the trusted role from.
    responses:
      - statusCode: '204'
        description: Successfully removed the trusted role from a user
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/users/{id}/trusted
    method: addTrustedRole
    httpMethod: put
    tag: users
    typeScriptTag: users
    description: Add trusted role for a User
    parameters:
      - name: id
        schema: integer
        required: true
        description: The ID of the user to assign the trusted role.
    responses:
      - statusCode: '204'
        description: Trusted role assigned to the user successfully
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/users/me
    method: getInformation
    httpMethod: get
    tag: users
    typeScriptTag: users
    description: The authenticated user
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /api/users/{id}
    method: getByIdOrUsername
    httpMethod: get
    tag: users
    typeScriptTag: users
    description: A User
    parameters:
      - name: id
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /api/users/{id}/unpublish
    method: unpublishUserArticlesAndComments
    httpMethod: put
    tag: users
    typeScriptTag: users
    description: Unpublish a User's Articles and Comments
    parameters:
      - name: id
        schema: integer
        required: true
        description: The ID of the user to unpublish.
    responses:
      - statusCode: '204'
        description: User's articles and comments successfully unpublished
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /api/admin/users
    method: inviteUser
    httpMethod: post
    tag: users
    typeScriptTag: users
    description: Invite a User
    parameters:
      - name: email
        schema: string
        description: ''
      - name: name
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: Successful
      - statusCode: '401'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /api/videos
    method: listByPopularity
    httpMethod: get
    tag: videos
    typeScriptTag: videos
    description: Articles with a video
    parameters:
      - name: page
        schema: integer
        required: false
        description: Pagination page
      - name: perPage
        schema: integer
        required: false
        description: >-
          Page size (the number of items to return per page). The default
          maximum value can be overridden by "API_PER_PAGE_MAX" environment
          variable.
    responses:
      - statusCode: '200'
        description: ''
numberOfSchemas: 147
apiDescription: |-
  Access Forem articles, users and other resources via API.
          For a real-world example of Forem in action, check out [DEV](https://www.dev.to).
          All endpoints can be accessed with the 'api-key' header and a accept header, but
          some of them are accessible publicly without authentication.

          Dates and date times, unless otherwise specified, must be in
          the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
