hash: fcbd6c276384065b2985c2fae5ecfca35bcf73741f93f35c1934349a82782549
methodObjects:
  - url: /dumps
    method: triggerDumpCreation
    httpMethod: post
    tag: Dumps
    typeScriptTag: dumps
    description: Create a Dump
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
  - url: /snapshots
    method: createSnapshotProcess
    httpMethod: post
    tag: Snapshots
    typeScriptTag: snapshots
    description: Create a Snapshot
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
  - url: /health
    method: checkMeilisearchInstance
    httpMethod: get
    tag: Health
    typeScriptTag: health
    description: Get health
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /indexes
    method: list
    httpMethod: get
    tag: Indexes
    typeScriptTag: indexes
    description: List Indexes
    parameters:
      - name: limit
        schema: number
        description: Maximum number of results to return.
      - name: offset
        schema: number
        description: Number of results to skip.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /indexes
    method: createIndex
    httpMethod: post
    tag: Indexes
    typeScriptTag: indexes
    description: Create Index
    parameters:
      - name: uid
        schema: string
        required: true
        description: ''
      - name: primaryKey
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /indexes/{indexUid}
    method: deleteIndex
    httpMethod: delete
    tag: Indexes
    typeScriptTag: indexes
    description: Delete Index
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}
    method: getIndex
    httpMethod: get
    tag: Indexes
    typeScriptTag: indexes
    description: Get Index
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}
    method: updateIndexPrimaryKey
    httpMethod: patch
    tag: Indexes
    typeScriptTag: indexes
    description: Update Index
    parameters:
      - name: primaryKey
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/documents
    method: deleteAll
    httpMethod: delete
    tag: Documents
    typeScriptTag: documents
    description: Delete all documents
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/documents
    method: getByBatch
    httpMethod: get
    tag: Documents
    typeScriptTag: documents
    description: Get Documents
    parameters:
      - name: limit
        schema: number
        description: Maximum number of results to return.
      - name: offset
        schema: number
        description: Number of results to skip.
      - name: fields
        schema: string
        description: >-
          Comma-separated list of fields to display for an API resource. By
          default it contains all fields of an API resource.
      - name: filter
        schema: undefined
        required: false
        description: >
          Attribute(s) to filter on.


          Can be made of 3 syntaxes


          - Nested Array: `["something > 1", "genres=comedy", ["genres=horror",
          "title=batman"]]`

          - String: `something > 1 AND genres=comedy AND (genres=horror OR
          title=batman)`

          - Mixed: `["something > 1 AND genres=comedy", "genres=horror OR
          title=batman"]`


          > info

          > _geoRadius({lat}, {lng}, {distance_in_meters}) and
          _geoBoundingBox([{lat, lng}], [{lat}, {lng}]) built-in filter rules
          can be used to filter documents within geo shapes.


          > warn

          > Attribute(s) used in `filter` should be declared as filterable
          attributes. See [Filtering and Faceted
          Search](https://docs.meilisearch.com/reference/features/filtering_and_faceted_search.html).
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/documents
    method: addOrUpdateBatch
    httpMethod: post
    tag: Documents
    typeScriptTag: documents
    description: Add or replace documents
    parameters:
      - name: primaryKey
        schema: string
        description: >
          The [primary
          key](https://docs.meilisearch.com/learn/core_concepts/documents.html#primary-key)
          of the documents. primaryKey is optional.

          If you want to set the primary key of your index through this route,
          it only has to be done the first time you add documents to the index.
          After which it will be ignored if given.
      - name: csvDelimiter
        schema: string
        description: >-
          Customize the csv delimiter when importing CSV documents. By default
          its a comma ","
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '413'
        description: ''
  - url: /indexes/{indexUid}/documents
    method: addOrUpdateBatch
    httpMethod: put
    tag: Documents
    typeScriptTag: documents
    description: Add or update documents
    parameters:
      - name: primaryKey
        schema: string
        description: >
          The [primary
          key](https://docs.meilisearch.com/learn/core_concepts/documents.html#primary-key)
          of the documents. primaryKey is optional.

          If you want to set the primary key of your index through this route,
          it only has to be done the first time you add documents to the index.
          After which it will be ignored if given.
      - name: csvDelimiter
        schema: string
        description: >-
          Customize the csv delimiter when importing CSV documents. By default
          its a comma ","
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '413'
        description: ''
  - url: /indexes/{indexUid}/documents/fetch
    method: getByBatch
    httpMethod: post
    tag: Documents
    typeScriptTag: documents
    description: Get Documents
    parameters:
      - name: offset
        schema: number
        description: ''
      - name: limit
        schema: number
        description: ''
      - name: fields
        schema: array
        description: ''
      - name: filter
        schema: undefined
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/documents/delete-batch
    method: deleteSelectionByFilter
    httpMethod: post
    tag: Documents
    typeScriptTag: documents
    description: Delete documents
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/documents/delete
    method: deleteSelectionBasedFilter
    httpMethod: post
    tag: Documents
    typeScriptTag: documents
    description: Delete documents
    parameters:
      - name: filter
        schema: undefined
        description: ''
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/documents/{documentId}
    method: deleteDocumentById
    httpMethod: delete
    tag: Documents
    typeScriptTag: documents
    description: Delete one document
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/documents/{documentId}
    method: getById
    httpMethod: get
    tag: Documents
    typeScriptTag: documents
    description: Get one document
    parameters:
      - name: fields
        schema: string
        description: >-
          Comma-separated list of fields to display for an API resource. By
          default it contains all fields of an API resource.
    responses:
      - statusCode: '200'
        description: >-
          A document made of attribute. The maximum number of attribute for a
          document is 65,535.
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/search
    method: documents
    httpMethod: get
    tag: Search
    typeScriptTag: search
    description: Search
    parameters:
      - name: q
        schema: string
        description: Query string.
      - name: attributesToRetrieve
        schema: string
        description: >-
          Comma-separated list of attributes whose fields will be present in the
          returned documents. Defaults to the [displayedAttributes
          list](https://docs.meilisearch.com/reference/features/settings.html#displayed-attributes)
          which contains by default all attributes found in the documents.
      - name: attributesToHighlight
        schema: string
        description: >-
          Comma-separated list of attributes whose values will contain
          highlighted matching terms. Highlighted attributes are returned in
          `_formatted` response object.
      - name: highlightPreTag
        schema: string
        required: false
        description: Specify the tag to put before the highlighted query terms.
      - name: highlightPostTag
        schema: string
        required: false
        description: Specify the tag to put after the highlighted query terms.
      - name: attributesToCrop
        schema: string
        required: false
        description: >-
          Comma-separated list of attributes whose values have to be cropped.
          Cropped attributes are returned in `_formatted` response object.
      - name: cropMarker
        schema: string
        required: false
        description: >-
          Sets the crop marker to apply before and/or after cropped part
          selected within an attribute defined in `attributesToCrop` parameter.
      - name: cropLength
        schema: integer
        required: false
        description: >-
          Sets the total number of words to keep around the matched part of an
          attribute specified in the `attributesToCrop` parameter.
      - name: facets
        schema: string
        description: >-
          Comma-separated list of attributes whose fields will be distributed as
          a facet. If you have [set up
          filterableAttributes](https://docs.meilisearch.com/reference/features/settings.html#filterable-attributes),
          you can retrieve the count of matching terms for each facets.[Learn
          more about facet distribution in the dedicated
          guide](https://docs.meilisearch.com/reference/features/search_parameters.html#facet-distribution)
      - name: filter
        schema: undefined
        required: false
        description: >
          Attribute(s) to filter on.


          Can be made of 3 syntaxes


          - Nested Array: `["something > 1", "genres=comedy", ["genres=horror",
          "title=batman"]]`

          - String: `something > 1 AND genres=comedy AND (genres=horror OR
          title=batman)`

          - Mixed: `["something > 1 AND genres=comedy", "genres=horror OR
          title=batman"]`


          > info

          > _geoRadius({lat}, {lng}, {distance_in_meters}) and
          _geoBoundingBox([{lat, lng}], [{lat}, {lng}]) built-in filter rules
          can be used to filter documents within geo shapes.


          > warn

          > Attribute(s) used in `filter` should be declared as filterable
          attributes. See [Filtering and Faceted
          Search](https://docs.meilisearch.com/reference/features/filtering_and_faceted_search.html).
      - name: offset
        schema: number
        description: Number of results to skip.
      - name: sort
        schema: string
        required: false
        description: >
          Fields on which you want to sort the results.


          > warn

          > Attribute(s) used in `sort` should be declared as sortable
          attributes. See
          [Sorting](https://docs.meilisearch.com/reference/features/sorting.html).


          > info

          > _geoPoint({lat}, {long}) built-in sort rule can be used to sort
          documents around a geo point.
      - name: limit
        schema: number
        description: Maximum number of results to return.
      - name: page
        schema: number
        description: Sets the specific results page.
      - name: hitsPerPage
        schema: number
        description: >-
          Sets the number of results returned for a query. If hitsPerPage is not
          provided as a query parameter, this parameter is ignored.
      - name: showMatchesPosition
        schema: boolean
        required: false
        description: >-
          Defines whether an `_matchesPosition` object that contains information
          about the matches should be returned or not.
      - name: matchingStrategy
        schema: string
        required: false
        description: >-
          Defines which strategy to use to match the query terms within the
          documents as search results. Two different strategies are available,
          `last` and `all`. By default, the `last` strategy is chosen.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/search
    method: documentsSearch
    httpMethod: post
    tag: Search
    typeScriptTag: search
    description: Search
    parameters:
      - name: q
        schema: string
        description: ''
      - name: vector
        schema: array
        description: ''
      - name: attributesToRetrieve
        schema: array
        description: ''
      - name: attributesToHighlight
        schema: array
        description: ''
      - name: highlightPreTag
        schema: string
        description: ''
      - name: highlightPostTag
        schema: string
        description: ''
      - name: attributesToCrop
        schema: array
        description: ''
      - name: cropMarker
        schema: string
        description: ''
      - name: cropLength
        schema: number
        description: ''
      - name: showMatchesPosition
        schema: boolean
        description: ''
      - name: showRankingScore
        schema: boolean
        description: ''
      - name: showRankingScoreDetails
        schema: boolean
        description: ''
      - name: matchingStrategy
        schema: string
        description: ''
      - name: attributesToSearchOn
        schema: array
        description: ''
      - name: filter
        schema: undefined
        description: ''
      - name: facets
        schema: array
        description: ''
      - name: offset
        schema: number
        description: ''
      - name: limit
        schema: number
        description: ''
      - name: page
        schema: number
        description: ''
      - name: hitsPerPage
        schema: number
        description: ''
      - name: sort
        schema: undefined
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/facet-search
    method: facetValuesQuery
    httpMethod: post
    tag: Search
    typeScriptTag: search
    description: Facet Search
    parameters:
      - name: facetName
        schema: string
        description: ''
      - name: facetQuery
        schema: string
        description: ''
      - name: q
        schema: string
        description: ''
      - name: matchingStrategy
        schema: string
        description: ''
      - name: filter
        schema: undefined
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings
    method: resetSettings
    httpMethod: delete
    tag: Settings
    typeScriptTag: settings
    description: Reset settings
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings
    method: getSettings
    httpMethod: get
    tag: Settings
    typeScriptTag: settings
    description: Get settings
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings
    method: updateSettings
    httpMethod: patch
    tag: Settings
    typeScriptTag: settings
    description: Update settings
    parameters:
      - name: synonyms
        schema: object
        description: ''
      - name: stopWords
        schema: array
        description: ''
      - name: rankingRules
        schema: array
        description: ''
      - name: distinctAttribute
        schema: string
        description: ''
      - name: searchableAttributes
        schema: array
        description: ''
      - name: displayedAttributes
        schema: array
        description: ''
      - name: filterableAttributes
        schema: array
        description: ''
      - name: sortableAttributes
        schema: array
        description: ''
      - name: typoTolerance
        schema: object
        description: ''
      - name: pagination
        schema: object
        description: ''
      - name: faceting
        schema: object
        description: ''
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/synonyms
    method: resetSynonyms
    httpMethod: delete
    tag: Settings
    typeScriptTag: settings
    description: Reset synonyms
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/synonyms
    method: getSynonyms
    httpMethod: get
    tag: Settings
    typeScriptTag: settings
    description: Get synonyms
    parameters: []
    responses:
      - statusCode: '200'
        description: >-
          List of associated words treated similarly. A word associated to an
          array of word as synonyms.
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/synonyms
    method: updateSynonyms
    httpMethod: put
    tag: Settings
    typeScriptTag: settings
    description: Update synonyms
    parameters:
      - name: wolverine
        schema: array
        description: ''
      - name: logan
        schema: array
        description: ''
      - name: wow
        schema: array
        description: ''
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/sortable-attributes
    method: resetSortableAttributes
    httpMethod: delete
    tag: Settings
    typeScriptTag: settings
    description: Reset sortable attributes
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/sortable-attributes
    method: getSortableAttributes
    httpMethod: get
    tag: Settings
    typeScriptTag: settings
    description: Get sortable attributes
    parameters: []
    responses:
      - statusCode: '200'
        description: List of attributes to sort on at search.
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/sortable-attributes
    method: updateSortableAttributes
    httpMethod: put
    tag: Settings
    typeScriptTag: settings
    description: Update sortable attributes
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/stop-words
    method: resetStopWords
    httpMethod: delete
    tag: Settings
    typeScriptTag: settings
    description: Reset stop-words
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/stop-words
    method: getStopWords
    httpMethod: get
    tag: Settings
    typeScriptTag: settings
    description: Get stop-words
    parameters: []
    responses:
      - statusCode: '200'
        description: List of words ignored when present in search queries.
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/stop-words
    method: updateStopWords
    httpMethod: put
    tag: Settings
    typeScriptTag: settings
    description: Update stop-words
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/ranking-rules
    method: resetRankingRules
    httpMethod: delete
    tag: Settings
    typeScriptTag: settings
    description: Reset ranking rules
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/ranking-rules
    method: getRankingRules
    httpMethod: get
    tag: Settings
    typeScriptTag: settings
    description: Get ranking rules
    parameters: []
    responses:
      - statusCode: '200'
        description: >
          List of ranking rules sorted by order of importance. The order is
          customizable.


          [A list of ordered built-in ranking
          rules](https://docs.meilisearch.com/learn/core_concepts/relevancy.html).
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/ranking-rules
    method: updateRankingRules
    httpMethod: put
    tag: Settings
    typeScriptTag: settings
    description: Update ranking rules
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/typo-tolerance
    method: resetTypoTolerance
    httpMethod: delete
    tag: Settings
    typeScriptTag: settings
    description: Reset typo tolerance settings to the default configuration
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/typo-tolerance
    method: getTypoToleranceConfiguration
    httpMethod: get
    tag: Settings
    typeScriptTag: settings
    description: Get typo tolerance configuration
    parameters: []
    responses:
      - statusCode: '200'
        description: Customize typo tolerance feature.
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/typo-tolerance
    method: updateTypoToleranceConfiguration
    httpMethod: patch
    tag: Settings
    typeScriptTag: settings
    description: Update typo tolerance settings
    parameters:
      - name: enabled
        schema: boolean
        description: ''
      - name: disableOnAttributes
        schema: array
        description: ''
      - name: disableOnWords
        schema: array
        description: ''
      - name: minWordSizeForTypos
        schema: object
        description: ''
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/pagination
    method: resetPaginationSettings
    httpMethod: delete
    tag: Settings
    typeScriptTag: settings
    description: Reset pagination settings to the default configuration
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/pagination
    method: getPaginationConfiguration
    httpMethod: get
    tag: Settings
    typeScriptTag: settings
    description: Get pagination configuration
    parameters: []
    responses:
      - statusCode: '200'
        description: Customize pagination settings
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/pagination
    method: updatePaginationSettings
    httpMethod: patch
    tag: Settings
    typeScriptTag: settings
    description: Update pagination settings
    parameters:
      - name: maxTotalHits
        schema: integer
        description: ''
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/faceting
    method: resetFacetingSettings
    httpMethod: delete
    tag: Settings
    typeScriptTag: settings
    description: Reset faceting settings to the default configuration
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/faceting
    method: getFacetingConfiguration
    httpMethod: get
    tag: Settings
    typeScriptTag: settings
    description: Get faceting configuration
    parameters: []
    responses:
      - statusCode: '200'
        description: Customize faceting settings
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/faceting
    method: updateFacetingSettings
    httpMethod: patch
    tag: Settings
    typeScriptTag: settings
    description: Update faceting settings
    parameters:
      - name: maxValuesPerFacet
        schema: integer
        description: ''
      - name: sortFacetValuesBy
        schema: object
        description: ''
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/filterable-attributes
    method: resetFilterableAttributes
    httpMethod: delete
    tag: Settings
    typeScriptTag: settings
    description: Reset Filterable Attributes
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/filterable-attributes
    method: getFilterableAttributes
    httpMethod: get
    tag: Settings
    typeScriptTag: settings
    description: Get Filterable Attributes
    parameters: []
    responses:
      - statusCode: '200'
        description: >
          Attributes to use for faceting and filtering. See [Filtering and
          Faceted
          Search](https://docs.meilisearch.com/reference/features/filtering_and_faceted_search.html).
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/filterable-attributes
    method: updateFilterableAttributes
    httpMethod: put
    tag: Settings
    typeScriptTag: settings
    description: Update Filterable Attributes
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/distinct-attribute
    method: resetDistinctAttribute
    httpMethod: delete
    tag: Settings
    typeScriptTag: settings
    description: Reset distinct attribute
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/distinct-attribute
    method: getDistinctAttribute
    httpMethod: get
    tag: Settings
    typeScriptTag: settings
    description: Get distinct attribute
    parameters: []
    responses:
      - statusCode: '200'
        description: >-
          Search returns documents with distinct (different) values of the given
          field.
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/distinct-attribute
    method: updateDistinctAttribute
    httpMethod: put
    tag: Settings
    typeScriptTag: settings
    description: Update distinct attribute
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/searchable-attributes
    method: resetSearchableAttributes
    httpMethod: delete
    tag: Settings
    typeScriptTag: settings
    description: Reset searchable attributes
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/searchable-attributes
    method: getSearchableAttributes
    httpMethod: get
    tag: Settings
    typeScriptTag: settings
    description: Get searchable attributes
    parameters: []
    responses:
      - statusCode: '200'
        description: >-
          Fields in which to search for matching query words sorted by order of
          importance.
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/searchable-attributes
    method: updateSearchableAttributes
    httpMethod: put
    tag: Settings
    typeScriptTag: settings
    description: Update searchable attributes
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/displayed-attributes
    method: resetDisplayedAttributes
    httpMethod: delete
    tag: Settings
    typeScriptTag: settings
    description: Reset displayed attributes
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/displayed-attributes
    method: getDisplayedAttributes
    httpMethod: get
    tag: Settings
    typeScriptTag: settings
    description: Get displayed attributes
    parameters: []
    responses:
      - statusCode: '200'
        description: Fields displayed in the returned documents.
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/settings/displayed-attributes
    method: updateDisplayedAttributes
    httpMethod: put
    tag: Settings
    typeScriptTag: settings
    description: Update displayed attributes
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /indexes/{indexUid}/stats
    method: getIndexStats
    httpMethod: get
    tag: Stats
    typeScriptTag: stats
    description: Get stat of an index
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: Not Found
  - url: /multi-search
    method: search
    httpMethod: post
    tag: Search
    typeScriptTag: search
    description: Multi Search
    parameters:
      - name: queries
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /keys
    method: get
    httpMethod: get
    tag: Keys
    typeScriptTag: keys
    description: Get API Keys
    parameters:
      - name: limit
        schema: number
        description: Maximum number of results to return.
      - name: offset
        schema: number
        description: Number of results to skip.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /keys
    method: createApiKey
    httpMethod: post
    tag: Keys
    typeScriptTag: keys
    description: Create an API Key
    parameters:
      - name: description
        schema: string
        required: false
        description: ''
      - name: uid
        schema: string
        required: false
        description: ''
      - name: key
        schema: string
        required: false
        description: ''
      - name: actions
        schema: array
        required: true
        description: ''
      - name: indexes
        schema: array
        required: true
        description: ''
      - name: name
        schema: string
        required: false
        description: ''
      - name: expiresAt
        schema: string
        required: true
        description: ''
      - name: createdAt
        schema: string
        required: false
        description: ''
      - name: updatedAt
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: >-
          API keys are stored and managed by the master key holder and the
          default admin key holder. These are the keys used by the technical
          teams to interact with Meilisearch at the level of the client/server
          code. API keys can have restrictions on which methods can be accessed
          via an actions list; they can also expiresAt a specific date time and
          be restricted to a specific set of indexes.
  - url: /keys/{uid_or_key}
    method: deleteKeyByUidOrKey
    httpMethod: delete
    tag: Keys
    typeScriptTag: keys
    description: Delete an API key specified by its uid or key field.
    parameters: []
    responses:
      - statusCode: '204'
        description: ''
  - url: /keys/{uid_or_key}
    method: getApiKey
    httpMethod: get
    tag: Keys
    typeScriptTag: keys
    description: Get an API key from its uid or key field.
    parameters:
      - name: uidOrKey
        schema: string
        required: true
        description: The uid or the key field value of the API Key.
    responses:
      - statusCode: '200'
        description: >-
          API keys are stored and managed by the master key holder and the
          default admin key holder. These are the keys used by the technical
          teams to interact with Meilisearch at the level of the client/server
          code. API keys can have restrictions on which methods can be accessed
          via an actions list; they can also expiresAt a specific date time and
          be restricted to a specific set of indexes.
  - url: /keys/{uid_or_key}
    method: updateApiKey
    httpMethod: patch
    tag: Keys
    typeScriptTag: keys
    description: Update an API key specified by its uid or key field.
    parameters:
      - name: description
        schema: string
        description: ''
      - name: name
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: >-
          API keys are stored and managed by the master key holder and the
          default admin key holder. These are the keys used by the technical
          teams to interact with Meilisearch at the level of the client/server
          code. API keys can have restrictions on which methods can be accessed
          via an actions list; they can also expiresAt a specific date time and
          be restricted to a specific set of indexes.
  - url: /stats
    method: getAllIndexesStats
    httpMethod: get
    tag: Stats
    typeScriptTag: stats
    description: Get stats of all indexes
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /version
    method: getMeilisearchVersion
    httpMethod: get
    tag: Version
    typeScriptTag: version
    description: Get version of Meilisearch
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /tasks
    method: deleteOperation
    httpMethod: delete
    tag: Tasks
    typeScriptTag: tasks
    description: Delete tasks
    parameters:
      - name: uids
        schema: number
        required: false
        description: >-
          Permits to filter tasks by their uid. By default, when the `uids`
          query parameter is not set, all task uids are returned. It's possible
          to specify several uids by separating them with the `,` character.
      - name: indexUids
        schema: string
        required: false
        description: >-
          Permits to filter tasks by their related index. By default, when
          `indexUids` query parameter is not set, the tasks of all the indexes
          are returned. It is possible to specify several indexes by separating
          them with the `,` character.
      - name: statuses
        schema: string
        required: false
        description: >-
          Permits to filter tasks by their status. By default, when `statuses`
          query parameter is not set, all task statuses are returned. It's
          possible to specify several statuses by separating them with the `,`
          character.
      - name: types
        schema: string
        required: false
        description: >-
          Permits to filter tasks by their related type. By default, when
          `types` query parameter is not set, all task types are returned. It's
          possible to specify several types by separating them with the `,`
          character.
      - name: canceledBy
        schema: string
        required: false
        description: >-
          Permits to filter tasks using the uid of the task that canceled them.
          It's possible to specify several task uids by separating them with the
          `,` character.
      - name: beforeEnqueuedAt
        schema: string
        required: false
        description: >-
          Permits to filter tasks based on their enqueuedAt time. Matches tasks
          enqueued before the given date. Supports RFC 3339 date format.
      - name: afterEnqueuedAt
        schema: string
        required: false
        description: >-
          Permits to filter tasks based on their enqueuedAt time. Matches tasks
          enqueued after the given date. Supports RFC 3339 date format.
      - name: beforeStartedAt
        schema: string
        required: false
        description: >-
          Permits to filter tasks based on their startedAt time. Matches tasks
          started before the given date. Supports RFC 3339 date format.
      - name: afterStartedAt
        schema: string
        required: false
        description: >-
          Permits to filter tasks based on their startedAt time. Matches tasks
          started after the given date. Supports RFC 3339 date format.
      - name: beforeFinishedAt
        schema: string
        required: false
        description: >-
          Permits to filter tasks based on their finishedAt time. Matches tasks
          finished before the given date. Supports RFC 3339 date format.
      - name: afterFinishedAt
        schema: string
        required: false
        description: >-
          Permits to filter tasks based on their finishedAt time. Matches tasks
          finished after the given date. Supports RFC 3339 date format.
    responses:
      - statusCode: '400'
        description: ''
  - url: /tasks
    method: getAll
    httpMethod: get
    tag: Tasks
    typeScriptTag: tasks
    description: Get all tasks
    parameters:
      - name: limit
        schema: number
        description: Maximum number of results to return.
      - name: from
        schema: number
        description: Fetch the next set of results from the given uid.
      - name: uids
        schema: number
        required: false
        description: >-
          Permits to filter tasks by their uid. By default, when the `uids`
          query parameter is not set, all task uids are returned. It's possible
          to specify several uids by separating them with the `,` character.
      - name: indexUids
        schema: string
        required: false
        description: >-
          Permits to filter tasks by their related index. By default, when
          `indexUids` query parameter is not set, the tasks of all the indexes
          are returned. It is possible to specify several indexes by separating
          them with the `,` character.
      - name: statuses
        schema: string
        required: false
        description: >-
          Permits to filter tasks by their status. By default, when `statuses`
          query parameter is not set, all task statuses are returned. It's
          possible to specify several statuses by separating them with the `,`
          character.
      - name: types
        schema: string
        required: false
        description: >-
          Permits to filter tasks by their related type. By default, when
          `types` query parameter is not set, all task types are returned. It's
          possible to specify several types by separating them with the `,`
          character.
      - name: canceledBy
        schema: string
        required: false
        description: >-
          Permits to filter tasks using the uid of the task that canceled them.
          It's possible to specify several task uids by separating them with the
          `,` character.
      - name: beforeEnqueuedAt
        schema: string
        required: false
        description: >-
          Permits to filter tasks based on their enqueuedAt time. Matches tasks
          enqueued before the given date. Supports RFC 3339 date format.
      - name: afterEnqueuedAt
        schema: string
        required: false
        description: >-
          Permits to filter tasks based on their enqueuedAt time. Matches tasks
          enqueued after the given date. Supports RFC 3339 date format.
      - name: beforeStartedAt
        schema: string
        required: false
        description: >-
          Permits to filter tasks based on their startedAt time. Matches tasks
          started before the given date. Supports RFC 3339 date format.
      - name: afterStartedAt
        schema: string
        required: false
        description: >-
          Permits to filter tasks based on their startedAt time. Matches tasks
          started after the given date. Supports RFC 3339 date format.
      - name: beforeFinishedAt
        schema: string
        required: false
        description: >-
          Permits to filter tasks based on their finishedAt time. Matches tasks
          finished before the given date. Supports RFC 3339 date format.
      - name: afterFinishedAt
        schema: string
        required: false
        description: >-
          Permits to filter tasks based on their finishedAt time. Matches tasks
          finished after the given date. Supports RFC 3339 date format.
    responses:
      - statusCode: '200'
        description: ''
  - url: /tasks/:taskUid
    method: getTask
    httpMethod: get
    tag: Tasks
    typeScriptTag: tasks
    description: Get a task
    parameters:
      - name: taskUid
        schema: integer
        required: true
        description: The task identifier
    responses:
      - statusCode: '200'
        description: >
          Meilisearch is an asynchronous API. It means that the API does not
          behave as you would typically expect when handling the request's
          responses.


          Some operations are put in a queue and will be executed in turn
          (asynchronously). In this case, the server response contains the
          identifier to track the execution of the operation.


          [Learn
          More](https://docs.meilisearch.com/learn/advanced/asynchronous_operations.html).
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /tasks/cancel
    method: cancelOperation
    httpMethod: post
    tag: Tasks
    typeScriptTag: tasks
    description: Cancel tasks
    parameters:
      - name: uids
        schema: number
        required: false
        description: >-
          Permits to filter tasks by their uid. By default, when the `uids`
          query parameter is not set, all task uids are returned. It's possible
          to specify several uids by separating them with the `,` character.
      - name: indexUids
        schema: string
        required: false
        description: >-
          Permits to filter tasks by their related index. By default, when
          `indexUids` query parameter is not set, the tasks of all the indexes
          are returned. It is possible to specify several indexes by separating
          them with the `,` character.
      - name: statuses
        schema: string
        required: false
        description: >-
          Permits to filter tasks by their status. By default, when `statuses`
          query parameter is not set, all task statuses are returned. It's
          possible to specify several statuses by separating them with the `,`
          character.
      - name: types
        schema: string
        required: false
        description: >-
          Permits to filter tasks by their related type. By default, when
          `types` query parameter is not set, all task types are returned. It's
          possible to specify several types by separating them with the `,`
          character.
      - name: canceledBy
        schema: string
        required: false
        description: >-
          Permits to filter tasks using the uid of the task that canceled them.
          It's possible to specify several task uids by separating them with the
          `,` character.
      - name: beforeEnqueuedAt
        schema: string
        required: false
        description: >-
          Permits to filter tasks based on their enqueuedAt time. Matches tasks
          enqueued before the given date. Supports RFC 3339 date format.
      - name: afterEnqueuedAt
        schema: string
        required: false
        description: >-
          Permits to filter tasks based on their enqueuedAt time. Matches tasks
          enqueued after the given date. Supports RFC 3339 date format.
      - name: beforeStartedAt
        schema: string
        required: false
        description: >-
          Permits to filter tasks based on their startedAt time. Matches tasks
          started before the given date. Supports RFC 3339 date format.
      - name: afterStartedAt
        schema: string
        required: false
        description: >-
          Permits to filter tasks based on their startedAt time. Matches tasks
          started after the given date. Supports RFC 3339 date format.
      - name: beforeFinishedAt
        schema: string
        required: false
        description: >-
          Permits to filter tasks based on their finishedAt time. Matches tasks
          finished before the given date. Supports RFC 3339 date format.
      - name: afterFinishedAt
        schema: string
        required: false
        description: >-
          Permits to filter tasks based on their finishedAt time. Matches tasks
          finished after the given date. Supports RFC 3339 date format.
    responses:
      - statusCode: '202'
        description: >-
          A summarized version of an asynchronous task. Summarized task
          representation are given for the 202 Accepted HTTP response. [Learn
          More](https://docs.meilisearch.com/learn/advanced/asynchronous_operations.html).
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /swap-indexes
    method: swapIndexes
    httpMethod: post
    tag: Indexes
    typeScriptTag: indexes
    description: Swap Indexes
    parameters: []
    responses:
      - statusCode: '202'
        description: Accepted
      - statusCode: '401'
        description: ''
  - url: /experimental-features
    method: runtimeFeaturesGet
    httpMethod: get
    tag: Experimental
    typeScriptTag: experimental
    description: (EXPERIMENTAL) Get the status of runtime experimental features
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /experimental-features
    method: setRuntimeExperimentalFeatures
    httpMethod: patch
    tag: Experimental
    typeScriptTag: experimental
    description: (EXPERIMENTAL) Set the status of runtime experimental features
    parameters:
      - name: vectorStore
        schema: boolean
        description: ''
      - name: scoreDetails
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /metrics
    method: getPrometheusMetrics
    httpMethod: get
    tag: Stats
    typeScriptTag: stats
    description: >-
      (EXPERIMENTAL) Get prometheus format metrics for observability and
      monitoring
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
numberOfSchemas: 71
apiDescription: Search documents, configure and manage the Meilisearch engine.
