hash: f523fc86f7d2f604d39a607ee5c432cb4097d92250798b0810ab5ab54073d507
methodObjects:
  - url: /v0/index
    method: globalPathsFetch
    httpMethod: get
    tag: Navigation
    typeScriptTag: navigation
    description: Index
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
  - url: /v0/ping
    method: checkConnection
    httpMethod: get
    tag: Connectivity
    typeScriptTag: connectivity
    description: Ping
    parameters: []
    responses:
      - statusCode: '204'
        description: No content
  - url: /v0/admissions/{admission-id}
    method: getAdmission
    httpMethod: get
    tag: Payments
    typeScriptTag: payments
    description: Get payment admission
    parameters:
      - name: admissionId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /v0/api-keys/{api-key-id}
    method: removeApiKey
    httpMethod: delete
    tag: API keys
    typeScriptTag: apiKeys
    description: Delete API key
    parameters:
      - name: apiKeyId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '204'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/api-keys/{api-key-id}
    method: getKeyDetails
    httpMethod: get
    tag: API keys
    typeScriptTag: apiKeys
    description: Get API key
    parameters:
      - name: apiKeyId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/bank/accounts/{bank-account-id}
    method: getAccount
    httpMethod: get
    tag: Bank accounts
    typeScriptTag: bankAccounts
    description: Get bank account
    parameters:
      - name: bankAccountId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/bank/accounts/{bank-account-id}
    method: updateBankAccount
    httpMethod: patch
    tag: Bank accounts
    typeScriptTag: bankAccounts
    description: Update a bank account
    parameters:
      - name: bankAccountId
        schema: string
        required: true
        description: ''
      - name: display-name
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Responds with bad-request if the body does not conform to the schema.
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/bank/accounts/{bank-account-id}/actions/close
    method: closeAccount
    httpMethod: post
    tag: Bank accounts
    typeScriptTag: bankAccounts
    description: Close a bank account
    parameters:
      - name: bankAccountId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
      - statusCode: '422'
        description: >-
          An error occurred when trying to close the bank account. See
          [https://docs.griffin.com/docs/errors/account-close](https://docs.griffin.com/docs/errors/account-close)
          for details.
  - url: /v0/bank/accounts/{bank-account-id}/admissions
    method: listBankAccountAdmissions
    httpMethod: get
    tag: Payments
    typeScriptTag: payments
    description: List bank account admissions
    parameters:
      - name: sort
        schema: string
        required: false
        description: ''
      - name: page[size]
        schema: integer
        required: false
        description: ''
      - name: page[before]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: page[after]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: filter[createdAt][lte]
        schema: string
        required: false
        description: >-
          Return only resources with a created-at less than or equal to the
          given timestamp.
      - name: filter[createdAt][lt]
        schema: string
        required: false
        description: Return only resources with a created-at less than the given timestamp.
      - name: filter[createdAt][gte]
        schema: string
        required: false
        description: >-
          Return only resources with a created-at greater than or equal to the
          given timestamp.
      - name: filter[createdAt][gt]
        schema: string
        required: false
        description: >-
          Return only resources with a created-at greater than the given
          timestamp.
      - name: filter[admissionStatus][in]
        schema: array
        required: false
        description: ''
      - name: bankAccountId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/bank/accounts/{bank-account-id}/membership
    method: listLegalPersons
    httpMethod: get
    tag: Pooled account membership
    typeScriptTag: pooledAccountMembership
    description: List legal person in a pooled account membership
    parameters:
      - name: include
        schema: array
        required: false
        description: >-
          For each member returned, include its legal person details, latest
          verification (if one exists), and/or latest risk rating (if one
          exists) in the response under the `included` attribute.
      - name: page[size]
        schema: integer
        required: false
        description: ''
      - name: page[after]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: page[before]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: bankAccountId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /v0/bank/accounts/{bank-account-id}/membership-updates
    method: manageLegalPersons
    httpMethod: post
    tag: Pooled account membership
    typeScriptTag: pooledAccountMembership
    description: Manage pooled account members
    parameters:
      - name: bankAccountId
        schema: string
        required: true
        description: ''
      - name: additions
        schema: array
        required: true
        description: ''
      - name: deletions
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Responds with bad-request if the body does not conform to the schema.
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v0/bank/accounts/{bank-account-id}/payments
    method: getBankAccountPayments
    httpMethod: get
    tag: Payments
    typeScriptTag: payments
    description: List bank account payments
    parameters:
      - name: sort
        schema: string
        required: false
        description: ''
      - name: page[size]
        schema: integer
        required: false
        description: ''
      - name: page[before]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: page[after]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: filter[createdAt][lte]
        schema: string
        required: false
        description: >-
          Return only resources with a created-at less than or equal to the
          given timestamp.
      - name: filter[createdAt][lt]
        schema: string
        required: false
        description: Return only resources with a created-at less than the given timestamp.
      - name: filter[createdAt][gte]
        schema: string
        required: false
        description: >-
          Return only resources with a created-at greater than or equal to the
          given timestamp.
      - name: filter[createdAt][gt]
        schema: string
        required: false
        description: >-
          Return only resources with a created-at greater than the given
          timestamp.
      - name: bankAccountId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
  - url: /v0/bank/accounts/{bank-account-id}/payments
    method: createRequest
    httpMethod: post
    tag: Payments
    typeScriptTag: payments
    description: Create payment
    parameters:
      - name: bankAccountId
        schema: string
        required: true
        description: ''
      - name: creditor
        schema: object
        required: true
        description: ''
      - name: payment-amount
        schema: object
        required: true
        description: ''
      - name: payment-reference
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
      - statusCode: '422'
        description: >-
          An error occurred when trying to create the payment. See
          [https://docs.griffin.com/docs/errors/payment](https://docs.griffin.com/docs/errors/payment)
          for details.
      - statusCode: '500'
        description: ''
  - url: /v0/bank/accounts/{bank-account-id}/submissions
    method: listSubmissions
    httpMethod: get
    tag: Payments
    typeScriptTag: payments
    description: List bank account submissions
    parameters:
      - name: sort
        schema: string
        required: false
        description: ''
      - name: page[size]
        schema: integer
        required: false
        description: ''
      - name: page[before]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: page[after]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: filter[submissionStatus][in]
        schema: array
        required: false
        description: ''
      - name: filter[createdAt][lte]
        schema: string
        required: false
        description: >-
          Return only resources with a created-at less than or equal to the
          given timestamp.
      - name: filter[createdAt][lt]
        schema: string
        required: false
        description: Return only resources with a created-at less than the given timestamp.
      - name: filter[createdAt][gte]
        schema: string
        required: false
        description: >-
          Return only resources with a created-at greater than or equal to the
          given timestamp.
      - name: filter[createdAt][gt]
        schema: string
        required: false
        description: >-
          Return only resources with a created-at greater than the given
          timestamp.
      - name: bankAccountId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/bank/accounts/{bank-account-id}/transactions
    method: listBalanceChanges
    httpMethod: get
    tag: Transactions
    typeScriptTag: transactions
    description: List transactions
    parameters:
      - name: sort
        schema: string
        required: false
        description: ''
      - name: page[size]
        schema: integer
        required: false
        description: ''
      - name: page[before]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: page[after]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: include
        schema: string
        required: false
        description: >-
          For each transaction returned, include its payment (if one exists) in
          the response under the `included` attribute.
      - name: filter[postDatetime][lte]
        schema: string
        required: false
        description: >-
          Return only resources with a created-at less than or equal to the
          given timestamp.
      - name: filter[postDatetime][lt]
        schema: string
        required: false
        description: Return only resources with a created-at less than the given timestamp.
      - name: filter[postDatetime][gte]
        schema: string
        required: false
        description: >-
          Return only resources with a created-at greater than or equal to the
          given timestamp.
      - name: filter[postDatetime][gt]
        schema: string
        required: false
        description: >-
          Return only resources with a created-at greater than the given
          timestamp.
      - name: bankAccountId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/bank/transactions/{transaction-id}
    method: getTransactionById
    httpMethod: get
    tag: Transactions
    typeScriptTag: transactions
    description: Get transaction
    parameters:
      - name: transactionId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/companies-house/companies/{company-number}
    method: getCompanyDetails
    httpMethod: get
    tag: Companies House
    typeScriptTag: companiesHouse
    description: Lookup company
    parameters:
      - name: companyNumber
        schema: string
        required: true
        description: UK Companies House company number
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
      - statusCode: '500'
        description: ''
      - statusCode: '502'
        description: ''
  - url: /v0/events/{event-id}
    method: getEvent
    httpMethod: get
    tag: Events
    typeScriptTag: events
    description: Get an event
    parameters:
      - name: eventId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
  - url: /v0/legal-persons/{legal-person-id}
    method: getLegalPerson
    httpMethod: get
    tag: Legal persons
    typeScriptTag: legalPersons
    description: Get legal person
    parameters:
      - name: legalPersonId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/legal-persons/{legal-person-id}
    method: updateLegalPerson
    httpMethod: put
    tag: Legal persons
    typeScriptTag: legalPersons
    description: Update legal person
    parameters:
      - name: legalPersonId
        schema: string
        required: true
        description: ''
      - name: display-name
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Responds with bad-request if the body does not conform to the schema.
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v0/legal-persons/{legal-person-id}/bank/payees
    method: listLegalPersonPayees
    httpMethod: get
    tag: Payees
    typeScriptTag: payees
    description: List legal person payees
    parameters:
      - name: sort
        schema: string
        required: false
        description: ''
      - name: page[size]
        schema: integer
        required: false
        description: ''
      - name: page[after]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: page[before]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: legalPersonId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
  - url: /v0/legal-persons/{legal-person-id}/bank/payees
    method: registerNewPayee
    httpMethod: post
    tag: Payees
    typeScriptTag: payees
    description: Create payee
    parameters:
      - name: legalPersonId
        schema: string
        required: true
        description: ''
      - name: account-holder
        schema: string
        required: true
        description: ''
      - name: account-number
        schema: string
        required: true
        description: ''
      - name: bank-id
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/legal-persons/{legal-person-id}/claims
    method: getAllClaims
    httpMethod: get
    tag: Claims
    typeScriptTag: claims
    description: List claims
    parameters:
      - name: sort
        schema: string
        required: false
        description: ''
      - name: page[size]
        schema: integer
        required: false
        description: ''
      - name: page[after]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: page[before]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: legalPersonId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/legal-persons/{legal-person-id}/claims
    method: createNewClaim
    httpMethod: post
    tag: Claims
    typeScriptTag: claims
    description: Create claim
    parameters:
      - name: legalPersonId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Responds with bad-request if the body does not conform to the schema.
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '422'
        description: ''
  - url: /v0/legal-persons/{legal-person-id}/decisions
    method: listForLegalPerson
    httpMethod: get
    tag: Decisions
    typeScriptTag: decisions
    description: List decisions
    parameters:
      - name: sort
        schema: string
        required: false
        description: ''
      - name: page[size]
        schema: integer
        required: false
        description: ''
      - name: page[after]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: page[before]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: legalPersonId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
  - url: /v0/legal-persons/{legal-person-id}/decisions
    method: createDecision
    httpMethod: post
    tag: Decisions
    typeScriptTag: decisions
    description: Create decision
    parameters:
      - name: legalPersonId
        schema: string
        required: true
        description: ''
      - name: verification-url
        schema: string
        required: true
        description: ''
      - name: decision-outcome
        schema: string
        required: true
        description: ''
      - name: decision-notes
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '422'
        description: ''
      - statusCode: '500'
        description: ''
      - statusCode: '503'
        description: ''
  - url: /v0/legal-persons/{legal-person-id}/history
    method: listEvents
    httpMethod: get
    tag: Legal person history
    typeScriptTag: legalPersonHistory
    description: Lists history of events for the given legal person.
    parameters:
      - name: page[size]
        schema: integer
        required: false
        description: ''
      - name: page[after]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: page[before]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: legalPersonId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/legal-persons/{legal-person-id}/verifications
    method: listForLegalPerson
    httpMethod: get
    tag: Verifications
    typeScriptTag: verifications
    description: List verifications for a legal person
    parameters:
      - name: sort
        schema: string
        required: false
        description: ''
      - name: page[size]
        schema: integer
        required: false
        description: ''
      - name: page[after]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: page[before]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: legalPersonId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
  - url: /v0/legal-persons/{legal-person-id}/verifications
    method: initiateVerification
    httpMethod: post
    tag: Verifications
    typeScriptTag: verifications
    description: Perform verification of a legal person
    parameters:
      - name: legalPersonId
        schema: string
        required: true
        description: ''
      - name: workflow-url
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: 'Bad Request: specific error details will be provided, if available'
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: 'Not Found: An associated legal person or workflow does not exist'
      - statusCode: '409'
        description: 'Conflict: An existing verification is in-flight'
      - statusCode: '422'
        description: >-
          Unprocessable Entity: specific error details will be provided, if
          available
      - statusCode: '500'
        description: 'Internal Server Error: please contact support@griffin.com'
      - statusCode: '502'
        description: 'Bad Gateway: An error occurred with an external service integration'
  - url: /v0/memberships/{membership-id}
    method: removeMember
    httpMethod: delete
    tag: Memberships
    typeScriptTag: memberships
    description: Delete membership
    parameters:
      - name: membershipId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '204'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/memberships/{membership-id}
    method: getMembershipInfo
    httpMethod: get
    tag: Memberships
    typeScriptTag: memberships
    description: Get membership
    parameters:
      - name: membershipId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/memberships/{membership-id}/roles
    method: getMembershipRoles
    httpMethod: get
    tag: Roles
    typeScriptTag: roles
    description: List membership roles
    parameters:
      - name: membershipId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
  - url: /v0/memberships/{membership-id}/roles
    method: assignMembershipRoles
    httpMethod: put
    tag: Roles
    typeScriptTag: roles
    description: Update role
    parameters:
      - name: membershipId
        schema: string
        required: true
        description: ''
      - name: role-urls
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v0/onboarding/applications/{onboarding-application-id}
    method: getApplication
    httpMethod: get
    tag: Reliance onboarding
    typeScriptTag: relianceOnboarding
    description: Get onboarding application
    parameters:
      - name: onboardingApplicationId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/organizations/{organization-id}
    method: getDetails
    httpMethod: get
    tag: Organizations
    typeScriptTag: organizations
    description: Get organization
    parameters:
      - name: organizationId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/organizations/{organization-id}/api-keys
    method: listActiveKeys
    httpMethod: get
    tag: API keys
    typeScriptTag: apiKeys
    description: List API keys
    parameters:
      - name: sort
        schema: string
        required: false
        description: ''
      - name: page[size]
        schema: integer
        required: false
        description: ''
      - name: page[after]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: page[before]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: organizationId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
  - url: /v0/organizations/{organization-id}/api-keys
    method: createKey
    httpMethod: post
    tag: API keys
    typeScriptTag: apiKeys
    description: Create API Key
    parameters:
      - name: organizationId
        schema: string
        required: true
        description: ''
      - name: api-key-name
        schema: undefined
        required: true
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
  - url: /v0/organizations/{organization-id}/bank/accounts
    method: list
    httpMethod: get
    tag: Bank accounts
    typeScriptTag: bankAccounts
    description: List bank accounts
    parameters:
      - name: filter[beneficiary][eq]
        schema: string
        required: false
        description: >-
          Link to the [legal person](https://docs.griffin.com/api) that
          represents the [beneficiary](https://docs.griffin.com/api) of the
          account.
      - name: filter[owner][eq]
        schema: string
        required: false
        description: >-
          Link to the [legal person](https://docs.griffin.com/api) that
          represents the [owner](https://docs.griffin.com/api) of the account.
      - name: page[size]
        schema: integer
        required: false
        description: ''
      - name: include
        schema: array
        required: false
        description: >-
          For each bank account returned, include its owner and/or beneficiary
          in the response under the `included.legal-persons` attribute.
      - name: filter[accountStatus][in][]
        schema: array
        required: false
        description: ''
      - name: sort
        schema: string
        required: false
        description: ''
      - name: page[after]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: filter[accountRestricted][in][]
        schema: boolean
        required: false
        description: >-
          Specifies whether the bank account has restrictions applied by
          Griffin.
      - name: filter[pooledFunds][eq]
        schema: boolean
        required: false
        description: >-
          Specifies whether the bank account holds funds belonging to multiple
          beneficiaries.
      - name: filter[bankProductType][in][]
        schema: array
        required: false
        description: ''
      - name: page[before]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: organizationId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/organizations/{organization-id}/bank/accounts
    method: createNewAccount
    httpMethod: post
    tag: Bank accounts
    typeScriptTag: bankAccounts
    description: Open bank account
    parameters:
      - name: organizationId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v0/organizations/{organization-id}/events
    method: getAllOrganizationEvents
    httpMethod: get
    tag: Events
    typeScriptTag: events
    description: List all events for an organization
    parameters:
      - name: sort
        schema: string
        required: false
        description: ''
      - name: page[size]
        schema: integer
        required: false
        description: ''
      - name: page[before]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: page[after]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: filter[eventType][eq]
        schema: string
        required: false
        description: >-
          The type of webhook event. Usually has the form
          {resource}-{operation}, e.g. payment-updated
      - name: filter[createdAt][lte]
        schema: string
        required: false
        description: >-
          Return only events with a created-at less than or equal to the given
          timestamp.
      - name: filter[createdAt][lt]
        schema: string
        required: false
        description: Return only events with a created-at less than the given timestamp.
      - name: filter[createdAt][gte]
        schema: string
        required: false
        description: >-
          Return only events with a created-at greater than or equal to the
          given timestamp.
      - name: filter[createdAt][gt]
        schema: string
        required: false
        description: Return only events with a created-at greater than the given timestamp.
      - name: organizationId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
  - url: /v0/organizations/{organization-id}/invitations
    method: sendEmail
    httpMethod: post
    tag: Invitations
    typeScriptTag: invitations
    description: Create invitation
    parameters:
      - name: organizationId
        schema: string
        required: true
        description: ''
      - name: email-address
        schema: undefined
        required: true
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
      - statusCode: '409'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v0/organizations/{organization-id}/legal-persons
    method: listLegalPersons
    httpMethod: get
    tag: Legal persons
    typeScriptTag: legalPersons
    description: List legal persons
    parameters:
      - name: sort
        schema: string
        required: false
        description: ''
      - name: include
        schema: array
        required: false
        description: >-
          For each legal person returned, include its latest verification (if
          one exists), and/or its latest risk rating (if one exists) in the
          response under the `included` attribute.
      - name: filter[applicationStatus][eq]
        schema: string
        required: false
        description: Return only legal persons with the given application-status.
      - name: filter[has][]
        schema: array
        required: false
        description: Return only legal persons with the given attributes.
      - name: page[size]
        schema: integer
        required: false
        description: ''
      - name: page[after]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: page[before]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: organizationId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/organizations/{organization-id}/legal-persons
    method: createNewLegalPerson
    httpMethod: post
    tag: Legal persons
    typeScriptTag: legalPersons
    description: Create legal person
    parameters:
      - name: organizationId
        schema: string
        required: true
        description: ''
      - name: display-name
        schema: string
        required: true
        description: ''
      - name: legal-person-type
        schema: string
        required: true
        description: ''
      - name: claims
        schema: array
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v0/organizations/{organization-id}/memberships
    method: listOrganizationMemberships
    httpMethod: get
    tag: Memberships
    typeScriptTag: memberships
    description: List organization memberships
    parameters:
      - name: sort
        schema: string
        required: false
        description: ''
      - name: page[size]
        schema: integer
        required: false
        description: ''
      - name: page[after]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: page[before]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: organizationId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
  - url: /v0/organizations/{organization-id}/onboarding/applications
    method: createApplication
    httpMethod: post
    tag: Reliance onboarding
    typeScriptTag: relianceOnboarding
    description: Create an onboarding application
    parameters:
      - name: organizationId
        schema: string
        required: true
        description: ''
      - name: workflow-url
        schema: string
        required: true
        description: ''
      - name: subject-profile
        schema: object
        required: true
        description: ''
      - name: related-profiles
        schema: array
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Responds with bad-request if the body does not conform to the schema.
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v0/organizations/{organization-id}/webhooks
    method: getAll
    httpMethod: get
    tag: Webhooks
    typeScriptTag: webhooks
    description: Get all webhooks for the organization
    parameters:
      - name: organizationId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
  - url: /v0/organizations/{organization-id}/webhooks
    method: createWebhook
    httpMethod: post
    tag: Webhooks
    typeScriptTag: webhooks
    description: Create a webhook
    parameters:
      - name: organizationId
        schema: string
        required: true
        description: ''
      - name: webhook-destination-url
        schema: string
        required: true
        description: ''
      - name: webhook-description
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '422'
        description: ''
  - url: /v0/organizations/{organization-id}/workflows
    method: listOrganizationWorkflows
    httpMethod: get
    tag: Workflows
    typeScriptTag: workflows
    description: List organization workflows
    parameters:
      - name: sort
        schema: string
        required: false
        description: ''
      - name: page[size]
        schema: integer
        required: false
        description: ''
      - name: page[after]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: page[before]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: organizationId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/payees/{payee-id}
    method: getDetails
    httpMethod: get
    tag: Payees
    typeScriptTag: payees
    description: Get payee
    parameters:
      - name: payeeId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/payees/{payee-id}
    method: updatePayee
    httpMethod: patch
    tag: Payees
    typeScriptTag: payees
    description: Update payee
    parameters:
      - name: payeeId
        schema: string
        required: true
        description: ''
      - name: payee-status
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '422'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /v0/payments/{payment-id}
    method: getDetails
    httpMethod: get
    tag: Payments
    typeScriptTag: payments
    description: Get payment
    parameters:
      - name: paymentId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/payments/{payment-id}/admissions
    method: listAdmissions
    httpMethod: get
    tag: Payments
    typeScriptTag: payments
    description: List payment admissions
    parameters:
      - name: paymentId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/payments/{payment-id}/submissions
    method: listSubmissions
    httpMethod: get
    tag: Payments
    typeScriptTag: payments
    description: List payment submissions
    parameters:
      - name: paymentId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/payments/{payment-id}/submissions
    method: submitPaymentSubmission
    httpMethod: post
    tag: Payments
    typeScriptTag: payments
    description: Submit payment
    parameters:
      - name: paymentId
        schema: string
        required: true
        description: ''
      - name: payment-scheme
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
      - statusCode: '410'
        description: ''
      - statusCode: '422'
        description: >-
          An error occurred when trying to submit the payment. See
          [https://docs.griffin.com/docs/errors/payment](https://docs.griffin.com/docs/errors/payment)
          for details.
  - url: /v0/roles
    method: listAllRoles
    httpMethod: get
    tag: Roles
    typeScriptTag: roles
    description: List roles
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /v0/roles/{role-id}
    method: getRole
    httpMethod: get
    tag: Roles
    typeScriptTag: roles
    description: Get role
    parameters:
      - name: roleId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /v0/submissions/{submission-id}
    method: getSubmission
    httpMethod: get
    tag: Payments
    typeScriptTag: payments
    description: Get payment submission
    parameters:
      - name: submissionId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /v0/users/{user-id}
    method: getUserResource
    httpMethod: get
    tag: Users
    typeScriptTag: users
    description: Get user
    parameters:
      - name: userId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: Shows the associated [user](https://docs.griffin.com/api).
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/users/{user-id}/api-keys
    method: listActiveKeys
    httpMethod: get
    tag: API keys
    typeScriptTag: apiKeys
    description: List API keys
    parameters:
      - name: sort
        schema: string
        required: false
        description: ''
      - name: page[size]
        schema: integer
        required: false
        description: ''
      - name: page[after]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: page[before]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: userId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
  - url: /v0/users/{user-id}/memberships
    method: listUserMemberships
    httpMethod: get
    tag: Memberships
    typeScriptTag: memberships
    description: List user memberships
    parameters:
      - name: sort
        schema: string
        required: false
        description: ''
      - name: page[size]
        schema: integer
        required: false
        description: ''
      - name: page[after]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: page[before]
        schema: string
        required: false
        description: A base64 encoded opaque string returned in paginated responses.
      - name: userId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
  - url: /v0/verifications/{verification-id}
    method: getVerification
    httpMethod: get
    tag: Verifications
    typeScriptTag: verifications
    description: Get verification
    parameters:
      - name: verificationId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/webhooks/{webhook-id}
    method: deleteWebhook
    httpMethod: delete
    tag: Webhooks
    typeScriptTag: webhooks
    description: Delete a webhook
    parameters:
      - name: webhookId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '204'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/webhooks/{webhook-id}
    method: getWebhook
    httpMethod: get
    tag: Webhooks
    typeScriptTag: webhooks
    description: Fetch a webhook
    parameters:
      - name: webhookId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/webhooks/{webhook-id}
    method: updateWebhook
    httpMethod: patch
    tag: Webhooks
    typeScriptTag: webhooks
    description: Update a webhook
    parameters:
      - name: webhookId
        schema: string
        required: true
        description: ''
      - name: webhook-description
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/webhooks/{webhook-id}/actions/activate
    method: activateAction
    httpMethod: post
    tag: Webhooks
    typeScriptTag: webhooks
    description: Activate a webhook
    parameters:
      - name: webhookId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/webhooks/{webhook-id}/actions/deactivate
    method: deactivateAction
    httpMethod: post
    tag: Webhooks
    typeScriptTag: webhooks
    description: Deactivate a webhook
    parameters:
      - name: webhookId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/webhooks/{webhook-id}/actions/test
    method: getLatestTestStatus
    httpMethod: get
    tag: Webhooks
    typeScriptTag: webhooks
    description: Get the status of the latest test event
    parameters:
      - name: webhookId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
  - url: /v0/webhooks/{webhook-id}/actions/test
    method: sendTestEvent
    httpMethod: post
    tag: Webhooks
    typeScriptTag: webhooks
    description: Send a test event to the webhook
    parameters:
      - name: webhookId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '409'
        description: An existing test is in-flight
  - url: /v0/workflows/{workflow-id}
    method: getWorkflow
    httpMethod: get
    tag: Workflows
    typeScriptTag: workflows
    description: Get workflow
    parameters:
      - name: workflowId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Requires an API key to continue
      - statusCode: '404'
        description: ''
numberOfSchemas: 82
apiDescription: >-
  ## Introduction


  The Griffin API is based on
  [REST](https://en.wikipedia.org/wiki/Representational_state_transfer).

  It has resource-oriented URLs, accepts
  [JSON](https://www.json.org/json-en.html)-encoded request bodies, returns
  [JSON](https://www.json.org/json-en.html)-encoded responses, and uses standard
  HTTP response verbs and response codes.


  Our API deviates from strict RESTful principles if it makes sense to do so,
  such as when we enforce tighter access controls around certain operations.

  For example, when closing a bank account: rather than send a PATCH request to
  the [bank account](https://docs.griffin.com/api) resource to update it's
  status to `"closed"`, we provide a dedicated account closure resource.


  Anyone can [create an account](https://app.griffin.com/register) with Griffin
  and try out out API in [sandbox mode](https://docs.griffin.com/api).


  New to Griffin? Check out our [getting started
  guide](https://docs.griffin.com/api).


  ## Navigation


  Our API is designed to be navigated programmatically. When you request any
  resource, you will find the URLs for related resources in the response body.


  The API is structured as a tree with your
  [organization](https://docs.griffin.com/api) at the top. Everything that you
  own will be a sub-resource of your organization.


  To bootstrap the navigation process, request the
  [index](https://docs.griffin.com/api) endpoint: the response will contain your
  `organization-url`.


  For a walkthrough, see our [getting started
  guide](https://docs.griffin.com/api).


  ## Pagination


  Our list APIs support pagination (e.g. [list bank
  accounts](https://docs.griffin.com/api) and [list
  payments](https://docs.griffin.com/api)).

  By default, a list API returns up to 25 results. If there are more results
  available, the response payload will include links to the previous/next pages.


  ### Change page size


  You can request a different number of results (between 1 and 100, inclusive)
  by using the `page[size]` query parameter:


  ```

  GET /v0/organizations/:id/bank/accounts?page[size]=100

  ```


  ### Navigating between pages


  List responses will include a `links` object with `prev` and `next`
  attributes, as shown below.

  Perform a GET request to the value of the attribute to fetch the previous/next
  page of results.


  ```

  {
    "accounts": [
      // ...
    ],
    "links": {
      "prev": "/v0/organizations/og.IG9yZ2FuaXphdGlvbi1pZA/bank/accounts?page[before]=djE6WxSPxfYUTnCU9XtWzj9gGA",
      "next": "/v0/organizations/og.IG9yZ2FuaXphdGlvbi1pZA/bank/accounts?page[after]=djE6aw79PXZySUOL16LD8HRJ3A"
    }
  }


  ```

  If there is no previous or next page available, the value of the attribute
  will be  null.


  Any other query parameters included in the initial request will also be
  included in the response payload's links.

  If you want to change parameters (see [filtering and
  sorting](https://docs.griffin.com/api)), request the first page and follow the
  links from there.


  ## Filtering and sorting


  ### Sort results


  By default, resources will be listed in descending order, usually based on the
  `created-at` attribute.

  You can change the sorting behaviour of a list of results by using the `sort`
  query parameter.


  For example, to list bank accounts in ascending order (oldest first):


  ```

  GET /v0/organizations/:id/bank/accounts?sort=created-at

  ```


  To _explicitly_ sort in descending order (newest first), prefix the sort
  attribute with `-`:


  ```

  GET /v0/organizations/:id/bank/accounts?sort=-created-at

  ```


  ### Filter results


  Some list APIs allow you to filter the results.

  Filters are expressed as nested data structures encoded into query parameters.

  For example, you can list bank accounts that are in either the `opening` or
  `open` state with:


  ```

  GET
  /v0/organizations/:id/bank/accounts?filter[account-status][in][]=opening&filter[account-status][in][]=open

  ```


  Similarly, you can list legal persons with a specific `application-status`:


  ```

  GET
  /v0/organizations/:id/legal-persons?filter[application-status][eq]=accepted

  ```


  ### Include resources


  Some list APIs allow you to include associated resources in the response,
  reducing the number of requests needed to fetch related data.

  For instance, when listing bank accounts, you can include each bank account's
  beneficiary legal person by using the `include` query parameter:


  ```

  GET /v0/organizations/:id/bank/accounts?include=beneficiary

  ```


  The response returns the usual list of bank accounts, but it will also have an
  `included` object with a `legal-persons` attribute:


  ```

  {
    "accounts": [
      // ...
    ],
    "links": {
      // ...
    }
    "included": {
      "legal-persons": [
        // ...
      ]
    }
  }

  ```


  Check the documentation for each list API to see all options for sorting and
  filtering


  ## Versioning


  The Griffin API is versioned via a prefix in the URL.

  The current version is v0.

  An example endpoint is: https://api.griffin.com/v0/index.


  We will not break your integration with a particular version for as long as we
  support that version.

  If we release a new version, you will have 12 months to upgrade to it.
