hash: d385dbde7c6f26a0c4b1aca58e27f45ad9340578fc9194961e1a083e09248202
methodObjects:
  - url: /auth/token/password
    method: authenticateWithPassword
    httpMethod: post
    tag: Authentication
    typeScriptTag: authentication
    description: |
      Password Authentication
    parameters:
      - name: email
        schema: string
        required: true
        description: ''
        example: EMAIL
      - name: password
        schema: object
        required: true
        description: ''
        example: '***'
      - name: newPassword
        schema: object
        required: false
        description: ''
        example: '***'
      - name: timeToLive
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '409'
        description: Conflict
      - statusCode: '500'
        description: Server Error
  - url: /auth/password/reset
    method: resetPassword
    httpMethod: post
    tag: Authentication
    typeScriptTag: authentication
    description: |
      Resets a password
    parameters:
      - name: token
        schema: object
        required: true
        description: ''
        example: '***'
      - name: newPassword
        schema: object
        required: true
        description: ''
        example: '***'
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /auth/password/requestreset
    method: requestPasswordReset
    httpMethod: post
    tag: Authentication
    typeScriptTag: authentication
    description: |
      Requests a password reset
    parameters:
      - name: email
        schema: string
        required: true
        description: ''
        example: EMAIL
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /auth/token/google
    method: googleTokenPost
    httpMethod: post
    tag: Authentication
    typeScriptTag: authentication
    description: |
      Google Authentication
    parameters:
      - name: code
        schema: object
        description: ''
        example: '***'
      - name: timeToLive
        schema: string
        description: ''
      - name: token
        schema: object
        description: ''
        example: '***'
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /auth/token
    method: listActiveAccessTokens
    httpMethod: get
    tag: Authentication
    typeScriptTag: authentication
    description: |
      List active access tokens
    parameters:
      - name: sortedBy
        schema: string
        description: The property by which the returned data will be sorted.
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '500'
        description: Server Error
  - url: /auth/token/{tokenId}/invalidate
    method: invalidateToken
    httpMethod: post
    tag: Authentication
    typeScriptTag: authentication
    description: |
      Invalidate an access token
    parameters:
      - name: tokenId
        schema: string
        required: true
        description: The unique identifier of the access token to be invalidated.
        example: TOKENID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /auth/token/invalidate
    method: invalidateMultipleTokens
    httpMethod: post
    tag: Authentication
    typeScriptTag: authentication
    description: |
      Invalidate multiple access tokens
    parameters:
      - name: invalidateCurrent
        schema: boolean
        description: ''
      - name: tokenIds
        schema: array
        description: ''
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '500'
        description: Server Error
  - url: /providers
    method: listPage
    httpMethod: get
    tag: Providers
    typeScriptTag: providers
    description: |
      List providers
    parameters:
      - name: status
        schema: string
        description: >-
          If set, the items will be filtered on providers with the specified
          status.
      - name: providerName
        schema: string
        description: >-
          If set, the items will be filtered on providers with the specified
          name or alias name.
      - name: credentialingStatus
        schema: array
        description: >-
          If set, the items will be filtered on providers with the specified
          credentialing status.
      - name: providerTypeId
        schema: string
        description: >-
          If set, the items will be filtered on providers with the specified
          provider type.
      - name: npi
        schema: integer
        description: >-
          If set, the items will be filtered on providers with the specified npi
          number.
      - name: deactivated
        schema: boolean
        description: >-
          If set, the items will be filtered on providers with the specified
          deactivated status.
      - name: sortedBy
        schema: string
        description: The property by which the returned data will be sorted.
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers
    method: createNewProvider
    httpMethod: post
    tag: Providers
    typeScriptTag: providers
    description: |
      Create a new provider
    parameters:
      - name: firstName
        schema: string
        description: ''
      - name: lastName
        schema: string
        description: ''
      - name: dateOfBirth
        schema: string
        description: ''
      - name: ssn
        schema: object
        description: ''
        example: '***'
      - name: npi
        schema: integer
        description: ''
      - name: aliases
        schema: array
        description: ''
      - name: credentialingStatus
        schema: string
        description: ''
      - name: emails
        schema: array
        description: ''
      - name: addresses
        schema: array
        description: ''
      - name: phone
        schema: string
        description: ''
      - name: languages
        schema: array
        description: ''
      - name: credentialedDate
        schema: string
        description: ''
      - name: recredentialedDates
        schema: array
        description: ''
      - name: providerTypeId
        schema: string
        description: ''
      - name: deactivated
        schema: boolean
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}
    method: deleteExistingProvider
    httpMethod: delete
    tag: Providers
    typeScriptTag: providers
    description: |
      Delete an existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: Identifier of the provider to get the data for.
        example: PROVIDERID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}
    method: getData
    httpMethod: get
    tag: Providers
    typeScriptTag: providers
    description: |
      Get an existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: Identifier of the provider to get the data for.
        example: PROVIDERID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}
    method: updateProviderData
    httpMethod: patch
    tag: Providers
    typeScriptTag: providers
    description: |
      Patch an existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: Identifier of the provider to patch.
        example: PROVIDERID
      - name: firstName
        schema: string
        description: ''
      - name: lastName
        schema: string
        description: ''
      - name: dateOfBirth
        schema: string
        description: ''
      - name: ssn
        schema: object
        description: ''
        example: '***'
      - name: npi
        schema: integer
        description: ''
      - name: aliases
        schema: array
        description: ''
      - name: credentialingStatus
        schema: string
        description: ''
      - name: emails
        schema: array
        description: ''
      - name: addresses
        schema: array
        description: ''
      - name: phone
        schema: string
        description: ''
      - name: languages
        schema: array
        description: ''
      - name: credentialedDate
        schema: string
        description: ''
      - name: recredentialedDates
        schema: array
        description: ''
      - name: providerTypeId
        schema: string
        description: ''
      - name: deactivated
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/aggregations
    method: getAggregations
    httpMethod: get
    tag: Providers
    typeScriptTag: providers
    description: |
      Get provider aggregations
    parameters:
      - name: providerDeactivated
        schema: boolean
        description: >-
          If set, the items will be filtered on providers with the specified
          deactivated status.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /providertypes
    method: listProviderTypes
    httpMethod: get
    tag: Providers
    typeScriptTag: providers
    description: |
      List provider types
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/report
    method: generateReport
    httpMethod: post
    tag: Providers
    typeScriptTag: providers
    description: |
      Generate report for an existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: Identifier of the provider to generate report.
        example: PROVIDERID
      - name: sections
        schema: array
        description: ''
      - name: datasetTypes
        schema: array
        description: ''
      - name: deaRecordNumbers
        schema: array
        description: ''
      - name: licenseIds
        schema: array
        description: ''
      - name: boardCertificateIds
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info
    method: get
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Get info for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: Identifier of the provider to get the data for.
        example: PROVIDERID
      - name: providerInfoType
        schema: array
        description: >-
          If not specified, will return all data for the provider. Info types
          can be combined, ex.:
          `providerInfoType=licenses&providerInfoType=deaRegistrations`.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/caqh
    method: deleteCaqhLogin
    httpMethod: delete
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Delete existing CAQH login info for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/caqh
    method: getCaqhLoginInfo
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Get CAQH login info for a provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/caqh
    method: changeCaqhLogin
    httpMethod: patch
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Change an existing provider's CAQH login info
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: caqhId
        schema: string
        description: ''
      - name: username
        schema: string
        description: ''
      - name: password
        schema: object
        description: ''
        example: '***'
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/caqh
    method: createOrUpdateCaqhLogin
    httpMethod: put
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Create or replace caqh login info for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: caqhId
        schema: string
        description: ''
      - name: username
        schema: string
        description: ''
      - name: password
        schema: object
        description: ''
        example: '***'
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/aliases/{aliasId}
    method: changeAlias
    httpMethod: put
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Change an existing provider's alias
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: aliasId
        schema: string
        required: true
        description: ''
        example: ALIASID
      - name: firstName
        schema: string
        required: true
        description: ''
        example: FIRSTNAME
      - name: lastName
        schema: string
        required: true
        description: ''
        example: LASTNAME
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/aliases/{id}
    method: deleteAlias
    httpMethod: delete
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Delete existing alias for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/aliases/{id}
    method: getAlias
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Get alias for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/boardCertifications
    method: listBoardCertifications
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      List board certifications
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/boardCertifications
    method: addBoardCertification
    httpMethod: post
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Create board certification info for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: type
        schema: string
        required: true
        description: ''
        example: TYPE
      - name: firstName
        schema: string
        required: false
        description: ''
      - name: lastName
        schema: string
        required: false
        description: ''
      - name: isPrimary
        schema: boolean
        required: false
        description: ''
      - name: boardCertificationNumber
        schema: string
        required: false
        description: ''
      - name: specialty
        schema: string
        required: false
        description: ''
      - name: nonVerifiedInfo
        schema: object
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/boardCertifications/{id}
    method: deleteBoardCertificationById
    httpMethod: delete
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Delete existing board certification info for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/boardCertifications/{id}
    method: getBoardCertification
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Get board certification for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/boardCertifications/{id}
    method: updateCertificationInfo
    httpMethod: patch
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Change an existing provider's board certification info
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
      - name: firstName
        schema: string
        description: ''
      - name: lastName
        schema: string
        description: ''
      - name: isPrimary
        schema: boolean
        description: ''
      - name: boardCertificationNumber
        schema: string
        description: ''
      - name: specialty
        schema: string
        description: ''
      - name: nonVerifiedInfo
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/certificates
    method: listCertificates
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      List certificates
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/certificates
    method: createCertificateInfo
    httpMethod: post
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Create certificate info for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: type
        schema: string
        required: true
        description: ''
        example: TYPE
      - name: certificateNumber
        schema: string
        required: true
        description: ''
        example: CERTIFICATENUMBER
      - name: firstName
        schema: string
        required: false
        description: ''
      - name: lastName
        schema: string
        required: false
        description: ''
      - name: issueDate
        schema: string
        required: false
        description: ''
      - name: expirationDate
        schema: string
        required: false
        description: ''
      - name: certifyingOrganization
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/certificates/{id}
    method: deleteCertificateInfo
    httpMethod: delete
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Delete existing certificate info for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/certificates/{id}
    method: getCertificate
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Get certificate for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/certificates/{id}
    method: updateCertificateInfo
    httpMethod: patch
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Change an existing provider's certificate info
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
      - name: firstName
        schema: string
        description: ''
      - name: lastName
        schema: string
        description: ''
      - name: certificateNumber
        schema: string
        description: ''
      - name: issueDate
        schema: string
        description: ''
      - name: expirationDate
        schema: string
        description: ''
      - name: certifyingOrganization
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/liabilityInsurances
    method: listLiabilityInsurances
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      List liability insurances
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/liabilityInsurances
    method: createLiabilityInsurance
    httpMethod: post
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Create liability insurance info for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: name
        schema: string
        description: ''
      - name: isSelfInsured
        schema: boolean
        description: ''
      - name: originalEffectiveDate
        schema: string
        description: ''
      - name: currentEffectiveDate
        schema: string
        description: ''
      - name: currentExpirationDate
        schema: string
        description: ''
      - name: coverageType
        schema: string
        description: ''
      - name: isUnlimitedCoverage
        schema: boolean
        description: ''
      - name: includesTailCoverage
        schema: boolean
        description: ''
      - name: occurrenceCoverageAmount
        schema: number
        description: ''
      - name: aggregateCoverageAmount
        schema: number
        description: ''
      - name: policyNumber
        schema: string
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/liabilityInsurances/{id}
    method: deleteLiabilityInsuranceById
    httpMethod: delete
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Delete existing liability insurance info for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/liabilityInsurances/{id}
    method: getLiabilityInsurance
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Get liability insurance for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/liabilityInsurances/{id}
    method: updateLiabilityInsurance
    httpMethod: patch
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Change an existing provider's liability insurance
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
      - name: name
        schema: string
        description: ''
      - name: isSelfInsured
        schema: boolean
        description: ''
      - name: originalEffectiveDate
        schema: string
        description: ''
      - name: currentEffectiveDate
        schema: string
        description: ''
      - name: currentExpirationDate
        schema: string
        description: ''
      - name: coverageType
        schema: string
        description: ''
      - name: isUnlimitedCoverage
        schema: boolean
        description: ''
      - name: includesTailCoverage
        schema: boolean
        description: ''
      - name: occurrenceCoverageAmount
        schema: number
        description: ''
      - name: aggregateCoverageAmount
        schema: number
        description: ''
      - name: policyNumber
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/educations
    method: listEducations
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      List educations
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/educations
    method: createEducationInfo
    httpMethod: post
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Create education info for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: ecfmgNumber
        schema: string
        description: ''
      - name: ecfmgIssueDate
        schema: string
        description: ''
      - name: graduateType
        schema: string
        description: ''
      - name: schoolName
        schema: string
        description: ''
      - name: schoolCode
        schema: string
        description: ''
      - name: branchCode
        schema: string
        description: ''
      - name: startDate
        schema: string
        description: ''
      - name: endDate
        schema: string
        description: ''
      - name: completed
        schema: boolean
        description: ''
      - name: degree
        schema: string
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/educations/{id}
    method: deleteExistingEducation
    httpMethod: delete
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Delete existing education info for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/educations/{id}
    method: getEducation
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Get education for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/educations/{id}
    method: updateEducationInfo
    httpMethod: patch
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Change an existing provider's education info
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
      - name: ecfmgNumber
        schema: string
        description: ''
      - name: ecfmgIssueDate
        schema: string
        description: ''
      - name: graduateType
        schema: string
        description: ''
      - name: schoolName
        schema: string
        description: ''
      - name: schoolCode
        schema: string
        description: ''
      - name: startDate
        schema: string
        description: ''
      - name: endDate
        schema: string
        description: ''
      - name: completed
        schema: boolean
        description: ''
      - name: degree
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/trainings
    method: listTrainings
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      List trainings
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/trainings
    method: createTraining
    httpMethod: post
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Create training info for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: trainingType
        schema: string
        description: ''
      - name: institutionName
        schema: string
        description: ''
      - name: schoolCode
        schema: string
        description: ''
      - name: schoolName
        schema: string
        description: ''
      - name: startDate
        schema: string
        description: ''
      - name: endDate
        schema: string
        description: ''
      - name: completed
        schema: boolean
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/trainings/{id}
    method: deleteTrainingInfo
    httpMethod: delete
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Delete existing training info for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/trainings/{id}
    method: getTraining
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Get training for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/trainings/{id}
    method: updateTrainingInfo
    httpMethod: patch
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Change an existing provider's training info
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
      - name: trainingType
        schema: string
        description: ''
      - name: institutionName
        schema: string
        description: ''
      - name: schoolCode
        schema: string
        description: ''
      - name: schoolName
        schema: string
        description: ''
      - name: startDate
        schema: string
        description: ''
      - name: endDate
        schema: string
        description: ''
      - name: completed
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/workHistory
    method: listWorkHistory
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      List work history entries
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/workHistory
    method: createWorkHistory
    httpMethod: post
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Create work history info for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: workHistoryType
        schema: string
        description: ''
      - name: name
        schema: string
        description: ''
      - name: jobTitle
        schema: string
        description: ''
      - name: address
        schema: object
        description: ''
      - name: phone
        schema: string
        description: ''
      - name: startDate
        schema: string
        description: ''
      - name: endDate
        schema: string
        description: ''
      - name: isCurrentEmployer
        schema: boolean
        description: ''
      - name: departureReason
        schema: string
        description: ''
      - name: gapExplanation
        schema: string
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/workHistory/{id}
    method: deleteWorkHistoryInfo
    httpMethod: delete
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Delete existing work history info for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/workHistory/{id}
    method: getWorkHistoryById
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Get work history for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/workHistory/{id}
    method: updateWorkHistory
    httpMethod: patch
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Change an existing provider's work history info
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
      - name: workHistoryType
        schema: string
        description: ''
      - name: name
        schema: string
        description: ''
      - name: jobTitle
        schema: string
        description: ''
      - name: address
        schema: object
        description: ''
      - name: phone
        schema: string
        description: ''
      - name: startDate
        schema: string
        description: ''
      - name: endDate
        schema: string
        description: ''
      - name: isCurrentEmployer
        schema: boolean
        description: ''
      - name: departureReason
        schema: string
        description: ''
      - name: gapExplanation
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/profiles/import/sources
    method: listImportSources
    httpMethod: get
    tag: ProviderProfiles
    typeScriptTag: providerProfiles
    description: |
      List provider profile import sources
    parameters:
      - name: source
        schema: string
        description: The source of the import to get profiles.
      - name: sortedBy
        schema: string
        description: ''
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/profiles/import
    method: listImports
    httpMethod: get
    tag: ProviderProfiles
    typeScriptTag: providerProfiles
    description: |
      List provider profile imports
    parameters:
      - name: latest
        schema: boolean
        description: ''
      - name: status
        schema: string
        description: The status of the import to get profiles.
      - name: source
        schema: string
        description: The source of the import to get profiles.
      - name: providerId
        schema: string
        description: ''
      - name: sortedBy
        schema: string
        description: ''
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/profiles/import
    method: createProfileImport
    httpMethod: post
    tag: ProviderProfiles
    typeScriptTag: providerProfiles
    description: |
      Create a new provider profile import
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: source
        schema: string
        required: true
        description: ''
        example: SOURCE
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /providers/profiles/import/{importId}
    method: getExistingImport
    httpMethod: get
    tag: ProviderProfiles
    typeScriptTag: providerProfiles
    description: |
      Get an existing provider profile import
    parameters:
      - name: importId
        schema: string
        required: true
        description: Identifier of the provider profile import to get the data for.
        example: IMPORTID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/notes
    method: listProviderNotes
    httpMethod: get
    tag: Notes
    typeScriptTag: notes
    description: |
      List provider notes
    parameters:
      - name: providerId
        schema: string
        required: true
        description: Identifier of the provider to get all notes for.
        example: PROVIDERID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/notes
    method: createNewProviderNote
    httpMethod: post
    tag: Notes
    typeScriptTag: notes
    description: |
      Create a new provider note
    parameters:
      - name: providerId
        schema: string
        required: true
        description: Identifier of the provider to create a note for.
        example: PROVIDERID
      - name: note
        schema: string
        required: true
        description: ''
        example: NOTE
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/notes/{noteId}
    method: deleteExistingNote
    httpMethod: delete
    tag: Notes
    typeScriptTag: notes
    description: |
      Delete an existing provider note
    parameters:
      - name: providerId
        schema: string
        required: true
        description: Identifier of the provider associated with the note to delete.
        example: PROVIDERID
      - name: noteId
        schema: string
        required: true
        description: Identifier of the note to be deleted.
        example: NOTEID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '409'
        description: Conflict
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/notes/{noteId}
    method: getExistingProviderNote
    httpMethod: get
    tag: Notes
    typeScriptTag: notes
    description: |
      Get an existing provider note
    parameters:
      - name: providerId
        schema: string
        required: true
        description: Identifier of the provider associated with the note.
        example: PROVIDERID
      - name: noteId
        schema: string
        required: true
        description: Identifier of the note.
        example: NOTEID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/notes/{noteId}
    method: updateExistingProviderNote
    httpMethod: put
    tag: Notes
    typeScriptTag: notes
    description: |
      Change an existing provider note
    parameters:
      - name: providerId
        schema: string
        required: true
        description: Identifier of the provider associated with the note to change.
        example: PROVIDERID
      - name: noteId
        schema: string
        required: true
        description: Identifier of the note to be changed.
        example: NOTEID
      - name: note
        schema: string
        required: true
        description: ''
        example: NOTE
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '409'
        description: Conflict
      - statusCode: '500'
        description: Server Error
  - url: /files/uploads/{path}
    method: uploadFile
    httpMethod: post
    tag: Files
    typeScriptTag: files
    description: |
      Upload a file
    parameters:
      - name: path
        schema: string
        required: true
        description: >-
          The complete path to the file including -but not necessarily
          requiring- folder separators.
        example: PATH
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '409'
        description: Conflict
      - statusCode: '500'
        description: Server Error
  - url: /files/uploads/{path}
    method: uploadAndOverwrite
    httpMethod: put
    tag: Files
    typeScriptTag: files
    description: |
      Upload and overwrite a file
    parameters:
      - name: path
        schema: string
        required: true
        description: >-
          The complete path to the file including -but not necessarily
          requiring- folder separators.
        example: PATH
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /files/uploads/{pathOrId}
    method: removeFile
    httpMethod: delete
    tag: Files
    typeScriptTag: files
    description: |
      Delete a file
    parameters:
      - name: pathOrId
        schema: string
        required: true
        description: ''
        example: PATHORID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /files/{pathOrId}
    method: downloadFile
    httpMethod: get
    tag: Files
    typeScriptTag: files
    description: |
      Download a file
    parameters:
      - name: pathOrId
        schema: string
        required: true
        description: ''
        example: PATHORID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '304'
        description: Not Modified
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /files/{pathOrId}
    method: getFileMetadata
    httpMethod: head
    tag: Files
    typeScriptTag: files
    description: |
      Get file metadata
    parameters:
      - name: pathOrId
        schema: string
        required: true
        description: ''
        example: PATHORID
    responses:
      - statusCode: '200'
        description: Success
      - statusCode: '304'
        description: Not Modified
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /files/uploads
    method: listUploadedFilesMetadata
    httpMethod: get
    tag: Files
    typeScriptTag: files
    description: |
      List uploaded files
    parameters:
      - name: prefix
        schema: string
        description: >-
          If set the result is filtered to return only files whose path begin
          with the specified prefix.
      - name: before
        schema: string
        description: If set, only returns events from before this date.
      - name: beforeInclusive
        schema: boolean
        description: >-
          If set to `true`, will include events created exactly at `before` date
          and time too.
      - name: after
        schema: string
        description: If set, only returns events from after this date.
      - name: afterInclusive
        schema: boolean
        description: >-
          If set to `true`, will include events created exactly at `after` date
          and time too.
      - name: sortedBy
        schema: string
        description: The property by which the returned data will be sorted.
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /provider-licenses
    method: listProvider
    httpMethod: get
    tag: Licenses
    typeScriptTag: licenses
    description: |
      List provider licenses
    parameters:
      - name: providerName
        schema: string
        description: >-
          If set, the items will be filtered on providers with the specified
          (first or last) name.
      - name: providerCredentialingStatus
        schema: array
        description: >-
          If set, the items will be filtered on providers with the specified
          credentialing status.
      - name: licenseState
        schema: string
        description: >-
          If set, the items will be filtered on licenses with the specified
          license state.
      - name: licenseType
        schema: string
        description: >-
          If set, the items will be filtered on licenses with the specified
          license type.
      - name: licenseStatus
        schema: string
        description: >-
          If set, the items will be filtered on licenses with the specified
          license status.
      - name: licenseVerificationStatus
        schema: string
        description: >-
          If set, the items will be filtered on licenses with the verification
          status.
      - name: licenseApprovedStatus
        schema: array
        description: ''
      - name: export
        schema: string
        description: ''
      - name: providerDeactivated
        schema: boolean
        description: ''
      - name: sortedBy
        schema: string
        description: The property by which the returned data will be sorted.
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/licenses/{licenseId}/verify
    method: triggerNewVerification
    httpMethod: post
    tag: Licenses
    typeScriptTag: licenses
    description: |
      Trigger a new license verification
    parameters:
      - name: providerId
        schema: string
        required: true
        description: The identifier describing the provider that holds the license.
        example: PROVIDERID
      - name: licenseId
        schema: string
        required: true
        description: The identifier describing the license to be verified again.
        example: LICENSEID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/licenses/verify
    method: triggerVerification
    httpMethod: post
    tag: Licenses
    typeScriptTag: licenses
    description: |
      Trigger license verifications
    parameters:
      - name: providerId
        schema: string
        required: true
        description: The identifier describing the provider that holds the license.
        example: PROVIDERID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/licenses/{licenseId}
    method: detachProviderLicense
    httpMethod: delete
    tag: Licenses
    typeScriptTag: licenses
    description: |
      Detach a license from a provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: The identifier describing the provider to detach the license from.
        example: PROVIDERID
      - name: licenseId
        schema: string
        required: true
        description: The identifier describing the license that you want to detach.
        example: LICENSEID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/licenses/{licenseId}
    method: getSpecificProviderLicense
    httpMethod: get
    tag: Licenses
    typeScriptTag: licenses
    description: |
      Get a specific license from a provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: The identifier describing the provider that holds the license.
        example: PROVIDERID
      - name: licenseId
        schema: string
        required: true
        description: >-
          The identifier describing the license that you want to get the data
          for.
        example: LICENSEID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: >-
      /providers/{providerId}/licenses/{licenseId}/verifications/{verificationId}
    method: getVerificationData
    httpMethod: get
    tag: Licenses
    typeScriptTag: licenses
    description: |
      Get a specific license verification
    parameters:
      - name: providerId
        schema: string
        required: true
        description: The identifier describing the provider that holds the license.
        example: PROVIDERID
      - name: licenseId
        schema: string
        required: true
        description: The identifier describing the license that was previously verified.
        example: LICENSEID
      - name: verificationId
        schema: string
        required: true
        description: >-
          The identifier describing the license verification that you want to
          retrieve.
        example: VERIFICATIONID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: >-
      /providers/{providerId}/licenses/{licenseId}/verifications/{verificationId}
    method: resolveVerificationProblem
    httpMethod: patch
    tag: Licenses
    typeScriptTag: licenses
    description: |
      Resolve problems with a license verification
    parameters:
      - name: providerId
        schema: string
        required: true
        description: The identifier describing the provider that holds the license.
        example: PROVIDERID
      - name: licenseId
        schema: string
        required: true
        description: The identifier describing the license that has a verification problem.
        example: LICENSEID
      - name: verificationId
        schema: string
        required: true
        description: >-
          The identifier describing the license verification that needs to be
          patched.
        example: VERIFICATIONID
      - name: status
        schema: string
        description: ''
      - name: correctResultIndex
        schema: integer
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '409'
        description: Conflict
      - statusCode: '500'
        description: Server Error
  - url: >-
      /providers/{providerId}/licenses/{licenseId}/verifications/{verificationId}/diff
    method: diffVerification
    httpMethod: get
    tag: Licenses
    typeScriptTag: licenses
    description: |
      Diff two license verifications
    parameters:
      - name: providerId
        schema: string
        required: true
        description: The identifier describing the provider that holds the license.
        example: PROVIDERID
      - name: licenseId
        schema: string
        required: true
        description: The identifier describing the license that was previously verified.
        example: LICENSEID
      - name: verificationId
        schema: string
        required: true
        description: >-
          The identifier describing the license verification that you want to
          diff with the previous one.
        example: VERIFICATIONID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '409'
        description: Conflict
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/licenses/{licenseId}/verifications
    method: listVerifications
    httpMethod: get
    tag: Licenses
    typeScriptTag: licenses
    description: |
      List all verifications for a license
    parameters:
      - name: providerId
        schema: string
        required: true
        description: The identifier describing the provider that holds the license.
        example: PROVIDERID
      - name: licenseId
        schema: string
        required: true
        description: The identifier describing the license to get the verifications from.
        example: LICENSEID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /licensetypes
    method: listLicenseTypes
    httpMethod: get
    tag: Licenses
    typeScriptTag: licenses
    description: |
      List license types
    parameters:
      - name: state
        schema: string
        description: >-
          If set, the items will be filtered on the state specified by this
          parameter
      - name: count
        schema: integer
        description: The number of items to include in a single page.
      - name: sortedBy
        schema: string
        description: The property by which the returned data will be sorted.
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /licensetypes/status
    method: listLicenseSourceStatus
    httpMethod: get
    tag: Licenses
    typeScriptTag: licenses
    description: |
      List license source status
    parameters:
      - name: licenseTypeId
        schema: string
        description: >-
          If set, the items will be filtered by the License type id. Please
          refer to [LicenseTypes](../ListLicenseTypes) for more information on
          the License type id.
      - name: state
        schema: string
        description: >-
          If set, the items will be filtered by the state specified in this
          parameter.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
      - name: sortedBy
        schema: string
        description: The property by which the returned data will be sorted.
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /datasets/scans
    method: listScans
    httpMethod: get
    tag: Datasets
    typeScriptTag: datasets
    description: |
      List dataset scans
    parameters:
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
      - name: sortedBy
        schema: string
        description: The property by which the returned data will be sorted.
      - name: providerId
        schema: string
        description: If set, the results will only contain scans for this provider.
      - name: type
        schema: string
        description: If set, the results will only contain scans for this dataset.
      - name: parameterSetId
        schema: string
        description: >-
          If set, the results will only contain scans with the specified
          parameter set.
      - name: referenceId
        schema: string
        description: >-
          If set, the results will only contain scans with the specified
          provider info reference id.
      - name: status
        schema: array
        description: >-
          If set, the results will only contain scans with the specified
          statuses.
      - name: credentialingStatus
        schema: string
        description: >-
          If set, the results will only contain scans for providers ih the
          specified credentialing status.
      - name: includeOldScans
        schema: boolean
        description: >-
          If set, the results will contain all dataset scans, otherwise, only
          the most recent scans will be included.
      - name: providerDeactivated
        schema: boolean
        description: >-
          If set, the results will only contain scans for providers in the
          specified deactivated status.
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /datasets/scans
    method: startScan
    httpMethod: post
    tag: Datasets
    typeScriptTag: datasets
    description: |
      Start a dataset scan
    parameters:
      - name: type
        schema: string
        description: ''
      - name: providerId
        schema: string
        description: ''
      - name: options
        schema: object
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '409'
        description: Conflict
      - statusCode: '500'
        description: Server Error
  - url: /datasets/scans/{scanId}
    method: getScanResults
    httpMethod: get
    tag: Datasets
    typeScriptTag: datasets
    description: |
      Get dataset scan
    parameters:
      - name: scanId
        schema: string
        required: true
        description: The identifier of the scan to get results for.
        example: SCANID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /datasets/matches
    method: listMatches
    httpMethod: get
    tag: Datasets
    typeScriptTag: datasets
    description: |
      List dataset matches
    parameters:
      - name: distinctPerProvider
        schema: boolean
        description: ''
      - name: providerId
        schema: string
        description: If set, the results will only contain matches for this provider.
      - name: types
        schema: array
        description: >-
          If set, the results will only contain matches for the specified
          dataset types. As opposed to `type` you can filter on more than 1
          different dataset type this way.
      - name: userActionNeeded
        schema: boolean
        description: ''
      - name: referenceId
        schema: string
        description: ''
      - name: credentialingStatus
        schema: array
        description: >-
          If set, the results will only contain scans for providers ih the
          specified credentialing status.
      - name: providerName
        schema: string
        description: ''
      - name: providerNpi
        schema: integer
        description: ''
      - name: includeOldMatches
        schema: boolean
        description: >-
          If set, the results will contain all dataset matches, otherwise, only
          matches from the most recent completed scans will be included.
      - name: userActionResolution
        schema: string
        description: ''
      - name: matchRelevance
        schema: array
        description: ''
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
      - name: sortedBy
        schema: string
        description: The property by which the returned data will be sorted.
      - name: providerDeactivated
        schema: boolean
        description: >-
          If set, the results will only contain scans for providers in the
          specified deactivated status.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /datasets/{datasetType}
    method: getMetadata
    httpMethod: get
    tag: Datasets
    typeScriptTag: datasets
    description: |
      Get dataset metadata
    parameters:
      - name: datasetType
        schema: string
        required: true
        description: The specific dataset type to get the metadata for.
        example: DATASETTYPE
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '409'
        description: Conflict
      - statusCode: '500'
        description: Server Error
  - url: /datasets
    method: getMetadata
    httpMethod: get
    tag: Datasets
    typeScriptTag: datasets
    description: |
      List datasets metadata
    parameters:
      - name: tags
        schema: array
        description: >-
          If set, the result will contain items with matching associated tags.
          Currently supported tags are: "Sanctions and Exclusions", "Board
          Certifications", "NPI", "Id Check", "NPDB"
      - name: sortedBy
        schema: string
        description: The property by which the returned data will be sorted.
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /monitors
    method: listMonitoredItems
    httpMethod: get
    tag: Monitoring
    typeScriptTag: monitoring
    description: |
      Lists all the monitored items
    parameters:
      - name: type
        schema: string
        description: If set, the items will be filtered on monitor type.
      - name: providerIds
        schema: array
        description: >-
          If set, the items will be filtered on providers with the specified
          ids.
      - name: datasetTypes
        schema: array
        description: >-
          If set, the items will be filtered on datasets with the specified
          types.
      - name: licenseIds
        schema: array
        description: If set, the items will be filtered on licenses with the specified ids.
      - name: sortedBy
        schema: string
        description: The property by which the returned data will be sorted.
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /monitors
    method: initiateProviderMonitoring
    httpMethod: post
    tag: Monitoring
    typeScriptTag: monitoring
    description: |
      Initiate monitoring for a provider
    parameters:
      - name: type
        schema: string
        required: true
        description: ''
        example: TYPE
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: datasetType
        schema: string
        required: false
        description: ''
      - name: licenseId
        schema: string
        required: false
        description: ''
      - name: monitoringInterval
        schema: string
        required: false
        description: ''
      - name: nextMonitoringDate
        schema: string
        required: false
        description: ''
      - name: options
        schema: object
        required: false
        description: ''
      - name: triggerImmediateVerification
        schema: boolean
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /monitors/{id}
    method: stopItem
    httpMethod: delete
    tag: Monitoring
    typeScriptTag: monitoring
    description: |
      Stop monitoring an item
    parameters:
      - name: id
        schema: string
        required: true
        description: The identifier describing the monitored item.
        example: ID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /monitors/{id}
    method: getMonitoredItem
    httpMethod: get
    tag: Monitoring
    typeScriptTag: monitoring
    description: |
      Returns a specified monitored item
    parameters:
      - name: id
        schema: string
        required: true
        description: The identifier describing the monitored item.
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /monitors/{id}
    method: updateMonitoredItem
    httpMethod: patch
    tag: Monitoring
    typeScriptTag: monitoring
    description: |
      Patch an existing monitored item
    parameters:
      - name: id
        schema: string
        required: true
        description: The identifier describing the monitored item.
        example: ID
      - name: monitoringInterval
        schema: string
        description: ''
      - name: nextMonitoringDate
        schema: string
        description: ''
      - name: triggerImmediateVerification
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /alerts/{alertId}
    method: getData
    httpMethod: get
    tag: Alerts
    typeScriptTag: alerts
    description: |
      Get an existing alert
    parameters:
      - name: alertId
        schema: string
        required: true
        description: Identifier of the alert to get the data for.
        example: ALERTID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /alerts/{alertId}/dismiss
    method: dismissAlert
    httpMethod: post
    tag: Alerts
    typeScriptTag: alerts
    description: |
      Dismiss an alert
    parameters:
      - name: alertId
        schema: string
        required: true
        description: Identifier of the alert to dismiss.
        example: ALERTID
      - name: dismissalNote
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '409'
        description: Conflict
      - statusCode: '500'
        description: Server Error
  - url: /alerts/aggregations
    method: getAggregations
    httpMethod: get
    tag: Alerts
    typeScriptTag: alerts
    description: |
      Get alert aggregations
    parameters:
      - name: providerDeactivated
        schema: boolean
        description: >-
          If set, the items will be filtered on providers with the specified
          deactivated status.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /alerts
    method: getPage
    httpMethod: get
    tag: Alerts
    typeScriptTag: alerts
    description: |
      List alerts
    parameters:
      - name: providerId
        schema: string
        description: >-
          If set, the items will be filtered on provider with the specified
          identifier.
      - name: providerName
        schema: string
        description: ''
      - name: providerNpi
        schema: integer
        description: ''
      - name: type
        schema: array
        description: If set, the items will be filtered on alerts of the specified type
      - name: status
        schema: string
        description: If set, filter the items by the dismissal status.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
      - name: providerDeactivated
        schema: boolean
        description: >-
          If set, the items will be filtered on providers with the specified
          deactivated status.
      - name: sortedBy
        schema: string
        description: The property by which the returned data will be sorted.
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /groups
    method: getAll
    httpMethod: get
    tag: Groups
    typeScriptTag: groups
    description: |
      List groups
    parameters:
      - name: providerId
        schema: string
        description: If set, the items will be filtered by `providerId`.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /groups
    method: registerNewProviderGroup
    httpMethod: post
    tag: Groups
    typeScriptTag: groups
    description: |
      Create a new group
    parameters:
      - name: name
        schema: string
        required: true
        description: ''
        example: NAME
      - name: npi
        schema: integer
        required: false
        description: ''
      - name: taxId
        schema: string
        required: false
        description: ''
      - name: remitAddress
        schema: object
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /groups/{groupId}
    method: deleteGroupWithAssociations
    httpMethod: delete
    tag: Groups
    typeScriptTag: groups
    description: |
      Delete an existing group
    parameters:
      - name: groupId
        schema: string
        required: true
        description: ''
        example: GROUPID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /groups/{groupId}
    method: getData
    httpMethod: get
    tag: Groups
    typeScriptTag: groups
    description: |
      Get an existing group
    parameters:
      - name: groupId
        schema: string
        required: true
        description: Identifier of the group to get the data for.
        example: GROUPID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /groups/{groupId}
    method: updateGroupProperties
    httpMethod: patch
    tag: Groups
    typeScriptTag: groups
    description: |
      Patch an existing group
    parameters:
      - name: groupId
        schema: string
        required: true
        description: ''
        example: GROUPID
      - name: name
        schema: string
        description: ''
      - name: npi
        schema: integer
        description: ''
      - name: taxId
        schema: string
        description: ''
      - name: remitAddress
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /groups/{groupId}/enrollments
    method: listEnrollments
    httpMethod: get
    tag: Groups
    typeScriptTag: groups
    description: |
      List enrollments for the group
    parameters:
      - name: groupId
        schema: string
        required: true
        description: The unique identifier of the group to get enrollments for.
        example: GROUPID
      - name: payerPlanId
        schema: string
        description: >-
          If set, the items will be filtered on enrollments with the specified
          payer plan.
      - name: networkStatus
        schema: string
        description: >-
          If set, the items will be filtered on enrollments with the specified
          network status.
      - name: enrollmentStatus
        schema: string
        description: >-
          If set, the items will be filtered on enrollments with the specified
          enrollment status.
      - name: specialistType
        schema: string
        description: >-
          If set, the items will be filtered on enrollments with the specified
          specialist type.
      - name: submissionDate
        schema: string
        description: ''
      - name: effectiveDate
        schema: string
        description: ''
      - name: sortedBy
        schema: string
        description: ''
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
      - name: rosterType
        schema: string
        description: If set, csv report of specified type will be generated.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /groups/{groupId}/providers
    method: listProviders
    httpMethod: get
    tag: Groups
    typeScriptTag: groups
    description: |
      List providers for the group
    parameters:
      - name: groupId
        schema: string
        required: true
        description: The unique identifier of the group to get providers for.
        example: GROUPID
      - name: status
        schema: string
        description: >-
          If set, the items will be filtered on providers with the specified
          status.
      - name: providerName
        schema: string
        description: ''
      - name: credentialingStatus
        schema: array
        description: >-
          If set, the items will be filtered on providers with the specified
          credentialing status.
      - name: providerTypeId
        schema: string
        description: ''
      - name: npi
        schema: integer
        description: >-
          If set, the items will be filtered on providers with the specified npi
          number.
      - name: deactivated
        schema: boolean
        description: ''
      - name: sortedBy
        schema: string
        description: The property by which the returned data will be sorted.
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
      - name: rosterType
        schema: string
        description: If set, csv report of specified type will be generated.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /groups/{groupId}/providers
    method: updateProvidersGroupRelations
    httpMethod: patch
    tag: Groups
    typeScriptTag: groups
    description: |
      Patch providers-group relations
    parameters:
      - name: groupId
        schema: string
        required: true
        description: Identifier of the group.
        example: GROUPID
      - name: add
        schema: array
        description: ''
      - name: remove
        schema: array
        description: ''
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /groups/{groupId}/payer-plans
    method: updatePayerPlansGroupRelations
    httpMethod: patch
    tag: Groups
    typeScriptTag: groups
    description: |
      Patch payer plans-group relations
    parameters:
      - name: groupId
        schema: string
        required: true
        description: Identifier of the group.
        example: GROUPID
      - name: add
        schema: array
        description: ''
      - name: remove
        schema: array
        description: ''
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /payers
    method: getAll
    httpMethod: get
    tag: Payers
    typeScriptTag: payers
    description: |
      List payers
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /payers
    method: registerNewPayer
    httpMethod: post
    tag: Payers
    typeScriptTag: payers
    description: |
      Create a new payer
    parameters:
      - name: name
        schema: string
        required: true
        description: ''
        example: NAME
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /payers/{payerId}
    method: deletePayer
    httpMethod: delete
    tag: Payers
    typeScriptTag: payers
    description: |
      Delete an existing payer
    parameters:
      - name: payerId
        schema: string
        required: true
        description: Identifier of the payer to delete.
        example: PAYERID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /payers/{payerId}
    method: getPayerData
    httpMethod: get
    tag: Payers
    typeScriptTag: payers
    description: |
      Get an existing payer
    parameters:
      - name: payerId
        schema: string
        required: true
        description: Identifier of the payer to get the data for.
        example: PAYERID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /payers/{payerId}
    method: updatePayerData
    httpMethod: patch
    tag: Payers
    typeScriptTag: payers
    description: |
      Patch an existing payer
    parameters:
      - name: payerId
        schema: string
        required: true
        description: Identifier of the payer to patch.
        example: PAYERID
      - name: name
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /payer-plans
    method: list
    httpMethod: get
    tag: PayerPlans
    typeScriptTag: payerPlans
    description: |
      List payer plans
    parameters:
      - name: groupId
        schema: string
        description: Identifier of the group to get the payer plans for.
      - name: payerId
        schema: string
        description: Identifier of the payer to get the payer plans for.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /payer-plans
    method: createNewPlan
    httpMethod: post
    tag: PayerPlans
    typeScriptTag: payerPlans
    description: |
      Create a new payer plan
    parameters:
      - name: name
        schema: string
        required: false
        description: ''
      - name: payerId
        schema: string
        required: true
        description: ''
        example: PAYERID
      - name: state
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /payer-plans/{payerPlanId}
    method: deleteExistingPlan
    httpMethod: delete
    tag: PayerPlans
    typeScriptTag: payerPlans
    description: |
      Delete an existing payer plan
    parameters:
      - name: payerPlanId
        schema: string
        required: true
        description: Identifier of the payer plan to delete.
        example: PAYERPLANID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /payer-plans/{payerPlanId}
    method: getPlanData
    httpMethod: get
    tag: PayerPlans
    typeScriptTag: payerPlans
    description: |
      Get an existing payer plan
    parameters:
      - name: payerPlanId
        schema: string
        required: true
        description: Identifier of the payer plan to get the data for.
        example: PAYERPLANID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /payer-plans/{payerPlanId}
    method: updatePlanProperties
    httpMethod: patch
    tag: PayerPlans
    typeScriptTag: payerPlans
    description: |
      Patch an existing payer plan
    parameters:
      - name: payerPlanId
        schema: string
        required: true
        description: Identifier of the payer plan to patch.
        example: PAYERPLANID
      - name: name
        schema: string
        description: ''
      - name: payerId
        schema: string
        description: ''
      - name: state
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/enrollments
    method: listPage
    httpMethod: get
    tag: ProviderEnrollments
    typeScriptTag: providerEnrollments
    description: |
      List provider enrollments
    parameters:
      - name: groupId
        schema: string
        description: The unique identifier of the group to get enrollments for.
      - name: providerId
        schema: string
        description: >-
          If set, the items will be filtered on enrollments with the specified
          provider.
      - name: payerPlanId
        schema: string
        description: >-
          If set, the items will be filtered on enrollments with the specified
          payer plan.
      - name: networkStatus
        schema: string
        description: >-
          If set, the items will be filtered on enrollments with the specified
          network status.
      - name: enrollmentStatus
        schema: string
        description: >-
          If set, the items will be filtered on enrollments with the specified
          enrollment status.
      - name: specialistType
        schema: string
        description: >-
          If set, the items will be filtered on enrollments with the specified
          specialist type.
      - name: submissionDate
        schema: string
        description: ''
      - name: effectiveDate
        schema: string
        description: ''
      - name: sortedBy
        schema: string
        description: ''
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/enrollments
    method: createNewEnrollment
    httpMethod: post
    tag: ProviderEnrollments
    typeScriptTag: providerEnrollments
    description: |
      Create a new provider enrollment
    parameters:
      - name: effectiveDate
        schema: string
        required: false
        description: ''
      - name: enrollmentStatus
        schema: string
        required: false
        description: ''
      - name: groupId
        schema: string
        required: true
        description: ''
        example: GROUPID
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: networkStatus
        schema: string
        required: false
        description: ''
      - name: payerPlanId
        schema: string
        required: true
        description: ''
        example: PAYERPLANID
      - name: specialistType
        schema: string
        required: false
        description: ''
      - name: submissionDate
        schema: string
        required: false
        description: ''
      - name: closedDate
        schema: string
        required: false
        description: ''
      - name: externalProviderPlanId
        schema: string
        required: false
        description: ''
      - name: comments
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /providers/enrollments/{providerEnrollmentId}
    method: deleteEnrollment
    httpMethod: delete
    tag: ProviderEnrollments
    typeScriptTag: providerEnrollments
    description: |
      Delete an existing provider enrollment
    parameters:
      - name: providerEnrollmentId
        schema: string
        required: true
        description: Identifier of the provider enrollment to delete.
        example: PROVIDERENROLLMENTID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/enrollments/{providerEnrollmentId}
    method: getData
    httpMethod: get
    tag: ProviderEnrollments
    typeScriptTag: providerEnrollments
    description: |
      Get an existing provider enrollment
    parameters:
      - name: providerEnrollmentId
        schema: string
        required: true
        description: Identifier of the provider enrollment to get the data for.
        example: PROVIDERENROLLMENTID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/enrollments/{providerEnrollmentId}
    method: updateDataProperties
    httpMethod: patch
    tag: ProviderEnrollments
    typeScriptTag: providerEnrollments
    description: |
      Patch an existing provider enrollment
    parameters:
      - name: providerEnrollmentId
        schema: string
        required: true
        description: Identifier of the provider enrollment to patch.
        example: PROVIDERENROLLMENTID
      - name: payerPlanId
        schema: string
        description: ''
      - name: groupId
        schema: string
        description: ''
      - name: providerId
        schema: string
        description: ''
      - name: enrollmentStatus
        schema: string
        description: ''
      - name: submissionDate
        schema: string
        description: ''
      - name: closedDate
        schema: string
        description: ''
      - name: effectiveDate
        schema: string
        description: ''
      - name: networkStatus
        schema: string
        description: ''
      - name: specialistType
        schema: string
        description: ''
      - name: externalProviderPlanId
        schema: string
        description: ''
      - name: comments
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /integrations/fountain/webhook/{organizationId}
    method: fountainWebhookPost
    httpMethod: post
    tag: Integrations
    typeScriptTag: integrations
    description: |
      Fountain integration webhook
    parameters:
      - name: organizationId
        schema: string
        required: true
        description: The organization on which this webhook is called.
        example: ORGANIZATIONID
      - name: applicant
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /integrations/salesforce/documentrequest
    method: createSalesforceDocumentRequest
    httpMethod: post
    tag: Integrations
    typeScriptTag: integrations
    description: |
      Salesforce document request
    parameters:
      - name: document
        schema: string
        required: true
        description: ''
        example: DOCUMENT
      - name: pathOnClient
        schema: string
        required: false
        description: ''
      - name: relatedIds
        schema: array
        required: true
        description: ''
      - name: salesforceOrganizationId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '409'
        description: Conflict
      - statusCode: '500'
        description: Server Error
  - url: /webhooks
    method: listAll
    httpMethod: get
    tag: Webhooks
    typeScriptTag: webhooks
    description: List all webhooks
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /webhooks
    method: createNewWebhook
    httpMethod: post
    tag: Webhooks
    typeScriptTag: webhooks
    description: Create a new webhook
    parameters:
      - name: type
        schema: string
        required: true
        description: ''
        example: TYPE
      - name: url
        schema: string
        required: true
        description: ''
        example: URL
      - name: secret
        schema: string
        required: false
        description: ''
      - name: allowInsecureUrl
        schema: boolean
        required: false
        description: ''
      - name: includeSensitiveInfo
        schema: boolean
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '409'
        description: Conflict
      - statusCode: '500'
        description: Server Error
  - url: /webhooks/{webhookId}
    method: deleteWebhook
    httpMethod: delete
    tag: Webhooks
    typeScriptTag: webhooks
    description: |
      Delete a webhook
    parameters:
      - name: webhookId
        schema: string
        required: true
        description: Identifier of a previously created webhook to be deleted.
        example: WEBHOOKID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /webhooks/{webhookId}
    method: getDetails
    httpMethod: get
    tag: Webhooks
    typeScriptTag: webhooks
    description: Get details from a webhook
    parameters:
      - name: webhookId
        schema: string
        required: true
        description: Identifier of a previously created webhook.
        example: WEBHOOKID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /webhooks/{webhookId}
    method: updateWebhook
    httpMethod: patch
    tag: Webhooks
    typeScriptTag: webhooks
    description: |
      Update a webhook
    parameters:
      - name: webhookId
        schema: string
        required: true
        description: Identifier of a previously created webhook.
        example: WEBHOOKID
      - name: url
        schema: string
        description: ''
      - name: secret
        schema: string
        description: ''
      - name: allowInsecureUrl
        schema: boolean
        description: ''
      - name: includeSensitiveInfo
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /webhookslog
    method: listAllLogs
    httpMethod: get
    tag: Webhooks
    typeScriptTag: webhooks
    description: |
      List all webhooks logs
    parameters:
      - name: type
        schema: string
        description: If set, the items will be filtered with the specified webhook type.
      - name: status
        schema: string
        description: >-
          If set, the items will be filtered with the specified webhook log
          status.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
      - name: traceId
        schema: string
        description: >-
          If set, the items will be filtered with the specified webhook log
          trace id.
      - name: before
        schema: string
        description: >-
          If set, the items will be filtered with timestamp value less the
          provided value.
      - name: beforeInclusive
        schema: boolean
        description: >-
          If set to `true`, will include events created exactly at `before` date
          and time too.
      - name: after
        schema: string
        description: >-
          If set, the items will be filtered with timestamp value more the
          provided value.
      - name: afterInclusive
        schema: boolean
        description: >-
          If set to `true`, will include events created exactly at `after` date
          and time too.
      - name: sortedBy
        schema: string
        description: The property by which the returned data will be sorted.
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /log/events
    method: listEventLogEntries
    httpMethod: get
    tag: Audit
    typeScriptTag: audit
    description: |
      List event log entries
    parameters:
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
      - name: type
        schema: array
        description: >-
          If set, only returns events with the specified type. More than 1 type
          can be specified.
      - name: includeReadRequests
        schema: boolean
        description: >-
          If set to `true`, also includes read request events (these are
          filtered out by default).
      - name: includeFailedRequests
        schema: boolean
        description: >-
          If set to `true`, also includes failed request events (these are
          filtered out by default). Note that not all failed requests can be
          captured or assigned to your organization, depending on the nature of
          the failure.
      - name: entityId
        schema: array
        description: >-
          If set, only returns events related to the specified identifier. For
          example, to filter on events for a given provider, set this parameter
          to the identifier of that provider. More than 1 entity identifier can
          be specified.
      - name: category
        schema: array
        description: >-
          If set, only returns events related to the specified category. More
          than 1 category can be specified.
      - name: subcategory
        schema: array
        description: >-
          If set, only returns events related to the specified subcategory. The
          subcategories differ per `category`. More than 1 subcategory can be
          specified.
      - name: before
        schema: string
        description: If set, only returns events from before this date.
      - name: beforeInclusive
        schema: boolean
        description: >-
          If set to `true`, will include events created exactly at `before` date
          and time too.
      - name: after
        schema: string
        description: If set, only returns events from after this date.
      - name: afterInclusive
        schema: boolean
        description: >-
          If set to `true`, will include events created exactly at `after` date
          and time too.
      - name: correlationId
        schema: string
        description: >-
          If set, only returns events related to the specified correlation
          identifier.
      - name: sortedBy
        schema: string
        description: The property by which the returned data will be sorted.
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /users/me/password
    method: changePassword
    httpMethod: post
    tag: Users
    typeScriptTag: users
    description: |
      Change the password of the current user
    parameters:
      - name: password
        schema: string
        required: false
        description: ''
      - name: newPassword
        schema: string
        required: true
        description: ''
        example: NEWPASSWORD
    responses:
      - statusCode: '200'
        description: Success
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /organization/reports/sanctionsandexclusions
    method: listSanctionsAndExclusions
    httpMethod: get
    tag: Reports
    typeScriptTag: reports
    description: |
      List sanctions and exclusions reports for the organization.
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /credentialing-requests/aggregations/owners
    method: aggregateProviderOwners
    httpMethod: get
    tag: CredentialingRequests
    typeScriptTag: credentialingRequests
    description: |
      Aggregate provider credentialing request owners
    parameters:
      - name: providerDeactivated
        schema: boolean
        description: >-
          If set, the items will be filtered on requests for the providers with
          the specified deactivated status.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/licenses
    method: listFromProvider
    httpMethod: get
    tag: Licenses
    typeScriptTag: licenses
    description: |
      List all licenses from a provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: The identifier describing the provider to list all licenses for.
        example: PROVIDERID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/licenses
    method: attachProviderLicense
    httpMethod: post
    tag: Licenses
    typeScriptTag: licenses
    description: |
      Attach a license to a provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: The identifier describing the provider to attach the license to.
        example: PROVIDERID
      - name: licenseNumber
        schema: string
        required: false
        description: ''
      - name: licenseTypeId
        schema: string
        required: true
        description: ''
        example: LICENSETYPEID
      - name: firstName
        schema: string
        required: false
        description: ''
      - name: lastName
        schema: string
        required: false
        description: ''
      - name: state
        schema: string
        required: true
        description: ''
        example: STATE
      - name: taxonomyCode
        schema: string
        required: false
        description: ''
      - name: restrictionStatus
        schema: string
        required: false
        description: ''
      - name: approvedStatus
        schema: string
        required: false
        description: ''
      - name: nonVerifiedInfo
        schema: object
        required: false
        description: ''
      - name: skipVerification
        schema: boolean
        required: false
        description: ''
      - name: isCurrentlyPracticing
        schema: boolean
        required: false
        description: ''
      - name: isPrimary
        schema: boolean
        required: false
        description: ''
      - name: prescriptiveAuthority
        schema: string
        required: false
        description: ''
      - name: collaboratingProviderId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /integrations/cognito-forms/webhook/{type}
    method: receiveData
    httpMethod: post
    tag: CognitoFormsWebhook
    typeScriptTag: cognitoFormsWebhook
    description: ''
    parameters:
      - name: type
        schema: string
        description: ''
      - name: type
        schema: string
        required: true
        description: ''
        example: TYPE
    responses:
      - statusCode: '200'
        description: Success
      - statusCode: '400'
        description: Bad Request
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /credentialing-requests
    method: listRequests
    httpMethod: get
    tag: CredentialingRequests
    typeScriptTag: credentialingRequests
    description: |
      List credentialing requests
    parameters:
      - name: entityType
        schema: string
        description: >-
          Indicates whether to retrieve credentialing requests for providers or
          facilities. Defaults to providers.
      - name: currentEventStatus
        schema: array
        description: >-
          If set, the items will be filtered by the specified current event
          status.
      - name: providerCredentialingStatus
        schema: array
        description: >-
          If set, the items will be filtered by the specified provider
          credentialing status. Has no effect when querying facilities.
      - name: priority
        schema: array
        description: If set, the items will be filtered by the specified priority.
      - name: ownerId
        schema: array
        description: If set, the items will be filtered by the specified owner.
      - name: includeUnassigned
        schema: boolean
        description: >-
          If set, the items will include credentialing requests that are not
          assigned to any specified owner. Intended to be used together with
          `ownerId`.
      - name: credentialingRequestType
        schema: string
        description: >-
          If set, the items will be filtered by the specified credentialing
          request type.
      - name: entityId
        schema: string
        description: >-
          If set, the items will be filtered by the specified entity identifier
          (`providerId` or `facilityId`).
      - name: entityName
        schema: string
        description: >-
          If set, the items will be filtered by the specified entity name
          (provider name/alias or facility name).
      - name: entityNpi
        schema: integer
        description: If set, the items will be filtered by the specified entity NPI number.
      - name: entityDeactivated
        schema: boolean
        description: >-
          If set, the items will be filtered by the specified entity deactivated
          status.
      - name: providerId
        schema: string
        description: See `entityId`.
      - name: providerName
        schema: string
        description: See `entityName`.
      - name: providerNpi
        schema: integer
        description: See `entityNpi`.
      - name: providerDeactivated
        schema: boolean
        description: See `entityDeactivated`.
      - name: sortedBy
        schema: string
        description: The property by which the returned data will be sorted.
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /credentialing-requests
    method: submitNewRequest
    httpMethod: post
    tag: CredentialingRequests
    typeScriptTag: credentialingRequests
    description: |
      Create a new credentialing request
    parameters:
      - name: providerId
        schema: string
        description: ''
      - name: facilityId
        schema: string
        description: ''
      - name: type
        schema: string
        description: ''
      - name: priority
        schema: string
        description: ''
      - name: isSelfManaged
        schema: boolean
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /credentialing-requests/{requestId}/events
    method: createEvent
    httpMethod: post
    tag: CredentialingRequests
    typeScriptTag: credentialingRequests
    description: |
      Create a new credentialing request event
    parameters:
      - name: requestId
        schema: string
        required: true
        description: ''
        example: REQUESTID
      - name: note
        schema: string
        required: false
        description: ''
      - name: status
        schema: string
        required: true
        description: ''
        example: STATUS
      - name: attachments
        schema: array
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/dea
    method: listDeaRegistrations
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      List DEA registrations
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/dea
    method: createDeaRegistrationInfo
    httpMethod: post
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Create DEA registration info for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: registrationNumber
        schema: string
        required: true
        description: ''
        example: REGISTRATIONNUMBER
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/addresses
    method: listAddresses
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      List addresses
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/addresses
    method: addAddress
    httpMethod: post
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Create address for an existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: state
        schema: string
        required: true
        description: ''
        example: STATE
      - name: zipCode
        schema: string
        required: true
        description: ''
        example: ZIPCODE
      - name: city
        schema: string
        required: true
        description: ''
        example: CITY
      - name: addressLine1
        schema: string
        required: true
        description: ''
        example: ADDRESSLINE1
      - name: addressLine2
        schema: string
        required: false
        description: ''
      - name: type
        schema: string
        required: true
        description: ''
        example: TYPE
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/aliases
    method: listAliases
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      List aliases
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/aliases
    method: createAlias
    httpMethod: post
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Create alias for an existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: firstName
        schema: string
        required: true
        description: ''
        example: FIRSTNAME
      - name: lastName
        schema: string
        required: true
        description: ''
        example: LASTNAME
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/emails
    method: listEmails
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      List emails
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/emails
    method: createEmail
    httpMethod: post
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Create email for an existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: email
        schema: string
        required: true
        description: ''
        example: EMAIL
      - name: type
        schema: string
        required: true
        description: ''
        example: TYPE
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/dea/{id}
    method: deleteDeaRegistration
    httpMethod: delete
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Delete existing DEA registration info for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/dea/{id}
    method: getDeaRegistration
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Get DEA registration for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/dea/{id}
    method: updateDea
    httpMethod: patch
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Change an existing provider's DEA registration info
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
      - name: registrationNumber
        schema: string
        required: true
        description: ''
        example: REGISTRATIONNUMBER
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/addresses/{id}
    method: deleteAddress
    httpMethod: delete
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Delete existing address for a provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/addresses/{id}
    method: getAddress
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Get address for an existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/addresses/{id}
    method: updateAddress
    httpMethod: put
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Change an existing provider's address
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
      - name: state
        schema: string
        required: true
        description: ''
        example: STATE
      - name: zipCode
        schema: string
        required: true
        description: ''
        example: ZIPCODE
      - name: city
        schema: string
        required: true
        description: ''
        example: CITY
      - name: addressLine1
        schema: string
        required: true
        description: ''
        example: ADDRESSLINE1
      - name: addressLine2
        schema: string
        required: false
        description: ''
      - name: type
        schema: string
        required: true
        description: ''
        example: TYPE
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/emails/{id}
    method: deleteEmail
    httpMethod: delete
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Delete existing email for a provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/emails/{id}
    method: getEmail
    httpMethod: get
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Get email for the existing provider
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/info/emails/{id}
    method: updateEmail
    httpMethod: put
    tag: ProvidersInfo
    typeScriptTag: providersInfo
    description: |
      Change an existing provider's email
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
      - name: email
        schema: string
        required: true
        description: ''
        example: EMAIL
      - name: type
        schema: string
        required: true
        description: ''
        example: TYPE
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /credentialing-requests/{requestId}
    method: getSpecificRequest
    httpMethod: get
    tag: CredentialingRequests
    typeScriptTag: credentialingRequests
    description: |
      Get a specific credentialing request
    parameters:
      - name: requestId
        schema: string
        required: true
        description: Identifier of the credentialing request to get the data for.
        example: REQUESTID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /credentialing-requests/{requestId}
    method: updateProperties
    httpMethod: patch
    tag: CredentialingRequests
    typeScriptTag: credentialingRequests
    description: |
      Patch an existing credentialing request
    parameters:
      - name: requestId
        schema: string
        required: true
        description: ''
        example: REQUESTID
      - name: priority
        schema: string
        description: ''
      - name: ownerId
        schema: string
        description: ''
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /credentialing-requests/aggregations
    method: getAggregations
    httpMethod: get
    tag: CredentialingRequests
    typeScriptTag: credentialingRequests
    description: |
      Get provider credentialing requests aggregations
    parameters:
      - name: providerDeactivated
        schema: boolean
        description: >-
          If set, the items will be filtered on providers with the specified
          deactivated status.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /credentialing-requests/{requestId}/events/{eventId}
    method: specificEventData
    httpMethod: get
    tag: CredentialingRequests
    typeScriptTag: credentialingRequests
    description: |
      Get a specific credentialing request event
    parameters:
      - name: requestId
        schema: string
        required: true
        description: Identifier of the credentialing request associated to the event.
        example: REQUESTID
      - name: eventId
        schema: string
        required: true
        description: Identifier of the event to get the data for.
        example: EVENTID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /datasets/matches/aggregations
    method: getMatchesAggregations
    httpMethod: get
    tag: Datasets
    typeScriptTag: datasets
    description: |
      Get dataset matches aggregations
    parameters:
      - name: providerDeactivated
        schema: boolean
        description: >-
          If set, the items will be filtered on providers with the specified
          deactivated status.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /datasets/{datasetType}/parameters/{providerId}
    method: getScanParameters
    httpMethod: get
    tag: Datasets
    typeScriptTag: datasets
    description: |
      Get dataset scan parameters for a provider
    parameters:
      - name: datasetType
        schema: string
        required: true
        description: The specific dataset type to get the scan parameters for.
        example: DATASETTYPE
      - name: providerId
        schema: string
        required: true
        description: >-
          The identifier of the provider for which the parameters should be
          returned.
        example: PROVIDERID
      - name: parameterSetId
        schema: string
        description: >-
          If set, the results will only return the parameters based on the
          specified parameter set else the parameters will be returned based on
          preferred dataset parameter.
      - name: referenceId
        schema: string
        description: >-
          If set, the results will only use the associated provider info to
          derive the parameters.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /facilities/{facilityId}/info
    method: details
    httpMethod: get
    tag: GetFacilityInfo
    typeScriptTag: getFacilityInfo
    description: ''
    parameters:
      - name: facilityId
        schema: string
        required: true
        description: ''
        example: FACILITYID
      - name: facilityInfoTypes
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /providers/{providerId}/credentialing-data
    method: details
    httpMethod: get
    tag: GetProviderCredentialingData
    typeScriptTag: getProviderCredentialingData
    description: ''
    parameters:
      - name: providerId
        schema: string
        required: true
        description: ''
        example: PROVIDERID
      - name: credentialingRequestId
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /provider-licenses/aggregations
    method: getAggregations
    httpMethod: get
    tag: Licenses
    typeScriptTag: licenses
    description: |
      Get provider licenses aggregations
    parameters:
      - name: providerDeactivated
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /files/exports
    method: listExportedEventLogs
    httpMethod: get
    tag: Files
    typeScriptTag: files
    description: |
      List event log exports
    parameters:
      - name: prefix
        schema: string
        description: >-
          If set the result is filtered to return only files whose path begin
          with the specified prefix.
      - name: before
        schema: string
        description: If set, only returns events from before this date.
      - name: beforeInclusive
        schema: boolean
        description: >-
          If set to `true`, will include events created exactly at `before` date
          and time too.
      - name: after
        schema: string
        description: If set, only returns events from after this date.
      - name: afterInclusive
        schema: boolean
        description: >-
          If set to `true`, will include events created exactly at `after` date
          and time too.
      - name: sortedBy
        schema: string
        description: The property by which the returned data will be sorted.
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /datasets/nsc/schoolCodes
    method: listSchools
    httpMethod: get
    tag: Datasets
    typeScriptTag: datasets
    description: |
      List schools
    parameters:
      - name: name
        schema: string
        description: If set, the items will be filtered on schools with the specified name.
      - name: code
        schema: string
        description: If set, the items will be filtered on schools with the specified code.
      - name: count
        schema: integer
        description: The number of items to include in a single page.
      - name: sortedBy
        schema: string
        description: The property by which the returned data will be sorted.
      - name: sort
        schema: object
        description: >-
          If set, the properties and directions the returned data will be sorted
          by.
      - name: offset
        schema: integer
        description: The offset for the page to start.
      - name: cursor
        schema: string
        description: >-
          The cursor to render the page requested. To load the first page send
          an empty cursor, then the system will generate the cursors to go to
          the next and/or previous pages automatically.
      - name: sortDirection
        schema: string
        description: The direction the returned data will be sorted by.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '500'
        description: Server Error
  - url: /datasets/matches/{matchId}
    method: modifyMatchStatus
    httpMethod: patch
    tag: Datasets
    typeScriptTag: datasets
    description: |
      Patch an existing dataset match
    parameters:
      - name: matchId
        schema: string
        required: true
        description: Identifier of the dataset match to patch.
        example: MATCHID
      - name: userActionResolutionNote
        schema: string
        description: ''
      - name: userActionResolution
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /licenses/{licenseId}
    method: updateExistingLicense
    httpMethod: patch
    tag: Licenses
    typeScriptTag: licenses
    description: |
      Patch an existing license
    parameters:
      - name: licenseId
        schema: string
        required: true
        description: Identifier of the license to patch.
        example: LICENSEID
      - name: restrictionStatus
        schema: string
        description: ''
      - name: approvedStatus
        schema: string
        description: ''
      - name: nonVerifiedInfo
        schema: object
        description: ''
      - name: isCurrentlyPracticing
        schema: boolean
        description: ''
      - name: isPrimary
        schema: boolean
        description: ''
      - name: prescriptiveAuthority
        schema: string
        description: ''
      - name: collaboratingProviderId
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /credentialing-requests/{requestId}/checklist
    method: replaceChecklist
    httpMethod: put
    tag: CredentialingRequests
    typeScriptTag: credentialingRequests
    description: |
      Create or replace a credentialing request checklist
    parameters:
      - name: requestId
        schema: string
        required: true
        description: ''
        example: REQUESTID
      - name: notes
        schema: string
        description: ''
      - name: items
        schema: array
        description: ''
      - name: details
        schema: object
        description: ''
    responses:
      - statusCode: '204'
        description: ''
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '500'
        description: Server Error
  - url: /datasets/scans/{scanId}/refresh
    method: refreshScan
    httpMethod: post
    tag: Datasets
    typeScriptTag: datasets
    description: |
      Refresh dataset scan
    parameters:
      - name: scanId
        schema: string
        required: true
        description: The identifier of the scan to trigger refresh for.
        example: SCANID
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '400'
        description: Bad Request
      - statusCode: '401'
        description: Unauthorized
      - statusCode: '403'
        description: Forbidden
      - statusCode: '404'
        description: Not Found
      - statusCode: '409'
        description: Conflict
      - statusCode: '500'
        description: Server Error
numberOfSchemas: 364
apiDescription: >+
  # Introduction


  This document contains the official documentation for the latest version of
  the Verifiable API. Our solution has been built API-first. That means we first
  design our API's and build our own user interfaces on top of these API's
  afterwards. This results in a reusable API that can be used by 3rd parties to
  offer the exact same functionality as we can provide ourselves. Both the
  product and API are still subject to significant and potentially breaking
  changes, so please refer back to this documentation frequently. Any breaking
  change will be communicated ahead of time to our partners integrating with our
  API's.


  # Getting Started


  This is a RESTful API that can be accessed using convential HTTP methods. It
  doesn't matter what programming language you use, there is already tooling
  available that can jumpstart you to access our API's. This documentation is
  based on OpenAPI 3.0 specifications and as such it is possible to dynamically
  generate a client in a language of your choice by simply loading our
  [specification
  document](https://api.discovery.verifiable.com/.well-known/openapi/vCurrent.json)
  in a tool such as [Swagger
  Codegen](https://swagger.io/tools/swagger-codegen/). It is not necessary to
  generate such a client and it is also possible to simply use any HTTP client
  to access our API. You can refer to the reference below to find the correct
  HTTP method, endpoint and model to use.


  ### Environments


  When developing an integration with our API we typicially request you to use
  our `staging` environment for development and only start using `production`
  when your integration is stable and tested thoroughly. Please contact
  [Verifiable support](https://verifiable.com/contact) to be granted access to
  our environments.


  **Staging Base URL**

  ```

  https://api.discovery-staging.verifiable.com/

  ```


  **Production Base URL**

  ```

  https://api.discovery.verifiable.com/

  ```


  ## Authentication


  Most endpoints require authentication to be used. You can authenticate to the
  API by passing an access token in the `Authentication` header using the
  `Bearer` scheme. An access token can be requested by authenticating against
  one of the [Authentication endpoints](https://api.discovery.verifiable.com).


  ### Example using password authentication endpoint


  **Request:**


  ```http

  POST /auth/token/password HTTP/1.1

  Content-Type: application/json

  Host: https://<SERVER>

  {
      "email": "john.doe@mail.com",
      "password": "secret"
  }

  ```


  **Response:**


  ```http

  HTTP/1.1 200 OK

  Date: Fri, 25 Sep 2020 12:59:56 GMT

  Content-Type: application/json; charset=utf-8

  {
      "tokenId": "2e5db76c-4c48-4cce-b11f-23a57ac5824c",
      "token": "MtetyFcIW...xgXXX-Z4yy"
  }

  ```


  ### Example using access token


  **Request**


  ```http

  GET /audit/log HTTP/1.1

  Authorization: Bearer <ACCESS_TOKEN>

  Host: https://<SERVER>

  ```


  An access token is bound to a single user in an organization. The access token
  should remain secret and be treated as if it were a password. We recommend you
  to create access tokens with a short time to live and frequently rotate them.
  Note that time to live requested might be lowered to a shorter duration based
  on your organization settings. These can be configured to enforce a suitable
  maximum time to live for your use-cases that facilitate users and service
  integrations.


  ## Create a new provider


  A provider must be created and associated with license numbers, NPI numbers or
  other identifiers that can be used to perform lookups to fetch associated data
  for this provider.


  ### Example creating a new provider


  To create a new provider that can be used for license lookups:


  **Request:**


  ```http

  POST /providers HTTP/1.1

  Content-Type: application/json

  Authorization: Bearer <ACCESS_TOKEN>

  Host: https://<SERVER>

  {
      "firstName": "John",
      "lastName": "Doe"
  }

  ```


  **Response:**


  ```http

  HTTP/1.1 201 Created

  Date: Fri, 25 Sep 2020 15:25:12 GMT

  Content-Type: application/json; charset=utf-8

  Location: https://<SERVER>/providers/9706f2ea-9c1d-49f3-9a57-871159878c9c

  {
      "firstName": "John",
      "lastName": "Doe",
      "id": "9706f2ea-9c1d-49f3-9a57-871159878c9c",
      "licenses": []
  }

  ```


  **Note:**

  The `id` in the response is the `Provider id`. It can be used as a `Path
  Parameter` to add the licenses to the provider, using Attach license API.

  Also you need `licenseTypeId` which can be picked from the [List License
  Types](https://api.discovery.verifiable.com) API, we will handle this next.
  For more details on providers see [Provider
  endpoints](https://api.discovery.verifiable.com)


  ## Get license types


  The list of license types which are supported for license verification.


  ### Example get license types


  Returns a list of all license types that are currently supported and used for
  license verifications.


  **Request**


  ```http

  GET /licensetypes HTTP/1.1

  Authorization: Bearer <ACCESS_TOKEN>

  Host: https://<SERVER>

  ```


  **Response:**


  ```http

  HTTP/1.1 200 OK

  Date: Fri, 25 Sep 2020 15:32:47 GMT

  Content-Type: application/json; charset=utf-8

  {
      "nextOffset": "100",
      "nextCursor": "100",
      "pageSize": 100,
      "items": [
          {
              "id": "0059f76a-280a-377a-73e2-ddfe86f4113c",
              "name": "Medical Physician & Surgeon",
              "source": {
                  "id": "72dcec62-a0d3-4af8-955d-07ecac8f1e4d",
                  "name": "Missouri Division of ProfessionalRegistration",
                  "state": "MO",
                  "availability": "Available",
                  "isDegraded": false,
                  "url": "https://pr.mo.gov/licensee-search.asp"
              }
          },
      ],
      "sortedBy": "Id",
      "sortDirection": "Asc"
  }

  ```


  **Note:**

  `id` in response refers to `licenseTypeId`. It will be unique for each license
  type. Please see [List License Types](https://api.discovery.verifiable.com)
  for more details.


  ## Attach a license to a provider


  To perform a license verification you must attach a license to a provider. The
  first time you do this will automatically trigger a license verification on
  that provider. Once attached you can re-verify the same license without
  reattaching it. A provider can have more than one license attached.


  ### Example attach license to a provider


  **Request:**


  ```http

  POST /providers/{providerId}/licenses HTTP/1.1

  Content-Type: application/json

  Authorization: Bearer <ACCESS_TOKEN>

  Host: https://<SERVER>

  {
      "licenseNumber": "123456",
      "licenseTypeId": "0059f76a-280a-377a-73e2-ddfe86f4113c"
  }

  ```


  **Response:**


  ```http

  HTTP/1.1 201 Created

  Date: Fri, 25 Sep 2020 15:35:00 GMT

  Content-Type: application/json; charset=utf-8

  Location:
  https://<SERVER>/providers/9706f2ea-9c1d-49f3-9a57-871159878c9c?licenseId=bfb028f0-52ca-47f4-8181-6b4c8262d29c

  {
      "providerId": "9706f2ea-9c1d-49f3-9a57-871159878c9c",
      "licenseNumber": "123456",
      "licenseType": {
          "id": "0059f76a-280a-377a-73e2-ddfe86f4113c",
          "name": "Registered Nurse - RN",
          "source": {
              "id": "679b4f9a-cc3c-49e8-b560-0d0a9af47fd3”,
              "name": "Missouri Division of ProfessionalRegistration",
              "state": "MO",
              "availability": "Available",
              "url": "https://pr.mo.gov/licensee-search.asp"
          }
      }
      "jobStatus": "Pending",
      "id": "b45cbeb0-873e-495b-8182-1b9a8b6d379d"
  }

  ```


  **Note:**

  Register a Webhook to get notified on HTTP endpoint, this prevents the need to
  poll the API for completion checks. For more details on Webhooks please see
  [Webhooks endpoint](https://api.discovery.verifiable.com) and for details on
  attaching a license see [Attach License
  endpoint](https://api.discovery.verifiable.com).


  ## Fetch created provider


  Returns the data for a specific provider.


  ### Example to fetch created provider


  **Request**


  ```http

  GET /providers/{providerId} HTTP/1.1

  Authorization: Bearer <ACCESS_TOKEN>

  Host: https://<SERVER>

  ```


  **Response:**


  ```http

  HTTP/1.1 200 OK

  Date: Fri, 25 Sep 2020 15:36:30 GMT

  Content-Type: application/json; charset=utf-8

  {
      "firstName": "John",
      "lastName": "Doe",
      "id": "9706f2ea-9c1d-49f3-9a57-871159878c9c",
      "npis": [],
      "licenses": [
          {
              "providerId": "9706f2ea-9c1d-49f3-9a57-871159878c9c",
              "licenseNumber": "123456",
              "licenseType": {
                  "id": "0059f76a-280a-377a-73e2-ddfe86f4113c",
                  "name": "Registered Nurse - RN",
                  "source": {
                      "id": "679b4f9a-cc3c-49e8-b560-0d0a9af47fd3”,
                      "name": "Missouri Division of ProfessionalRegistration",
                      "state": "MO",
                      "availability": "Available",
                      "url": "https://pr.mo.gov/licensee-search.asp"
                  }
              }
              "jobStatus": "Idle",
              "currentVerificationStatus": "NeedsReview",
              "id": "b45cbeb0-873e-495b-8182-1b9a8b6d379d"
          }
      ]
  }

  ```


  **Note:**

  Response contains attached licenses, NPI details for the given provider. To
  get details of these individual items (a particular License or an NPI), use
  unique identifiers in each of these categories. For more details check [Get
  specific license endpoint](https://api.discovery.verifiable.com) or [Get
  specific NPI record](https://api.discovery.verifiable.com). Further details on
  providers are at [Providers endpoint](https://api.discovery.verifiable.com).


  # Common Concepts


  ## Pagination, filtering and sorting


  Some endpoints can return a large list of data. To allow you to efficiently
  iterate through this data these endpoints offer pagination, sorting and
  filtering. The concept will be similar for each endpoint that supports it:


  * Pagination, filtering and sorting parameters are provided through the query
  string.

  * Pagination, filtering and sorting is only supported for endpoints that
  return lists of data.

  * Filters is only supported for certain endpoints. You can refer to the
  documentation of the endpoint to find out if filtering is supported.

  * The `sortedBy` and `sortDirection` parameters can be used to specify the
  sorting method.

  * The `count` parameter can be used to specify the page size. Please note that
  the maximum and default page size can differ per endpoint.

  * (Deprecated) The `offset` parameter influences the start of the page. For
  the first page you can always omit this parameter. For any subsequent page you
  can supply the value from the `nextOffset` parameter as returned by the
  server.

  * The `cursor` parameter influences the start of the page. For the first page
  you can always omit this parameter. For any subsequent page you can supply the
  value from the `nextCursor` or `previousCursor` parameter as returned by the
  server.


  Example on how to make a paginated request:


  ```http

  GET /audit/log?sortDirection=Asc&sortedBy=Id&count=10 HTTP/1.1

  Authorization: Bearer <ACCESS_TOKEN>

  Host: https://<SERVER>

  ```


  In addition to returning a list of `items`, a paginated response will also
  return `nextCursor` and/or `previousCursor`. The value of this property can be
  used to fetch the next or previous page by passing it in the `cursor`
  parameter.


  ## Error handling


  All responses that do not indicate a success status code will return an error
  using the error model as specified by [RFC
  7807](https://tools.ietf.org/html/rfc7807). The amount of details exposed by
  the error model varies and depends on the nature of the error. We attempt to
  include as much information as is necessary to be able to self-diagnose the
  problem that led to the error. Should this information not be enough, then we
  also supply a `correlationId` in the response. We kindly request you to make
  note of this value when contacting Verifiable support as this will help us to
  quickly locate more information on this error.


  Example error result on a malformed request:

  ```json

  {
      "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
      "title": "One or more validation errors occurred.",
      "status": 400,
      "correlationId": "5e94110e-45a8-404c-831d-77eaeaa73ad6",
      "errors": {
          "$.firstName": [
              "The JSON value could not be converted to System.String. Path: $.firstName | LineNumber: 1 | BytePositionInLine: 18."
          ]
      }
  }

  ```


  ## Nullable properties


  If an input parameter is required it is marked as such. If an input parameter
  is not marked as required and you do not wish or need to use it, you should
  omit the parameter completely in the request.


  For response parameters you should always code defensively and assume that a
  parameter might be missing from the response. This could happen in case the
  parameter is not applicable (yet) or simply because the data is missing. By
  coding defensively and assuming that a parameter might be missing you also
  future proof your solution for potential future (otherwise) breaking changes.


  ## Flexible data model


  In some cases we collect data from external sources that are hard to fit in a
  single predefined schema. For these cases we have come up with a flexible data
  model that allows us to store structured data in 3 different ways:
   - Form 
   - Table 
   - Section
   
  ### Table


  Data that can be represented in a table structure. The keys of every
  element/object in the data array is expected to be the same.


  ```json

  {
     "type": "Table",
     "data": [
        {
           "Status Code": "CB",
           "Effective Date": "06/10/2016",
           "Description": "CANCELLED BY BOARD"
        },
        {
           "Status Code": "NA",
           "Effective Date": "06/10/2016",
           "Description": "NOT ACTIVE"
        }
     ]
  }

  ```


  ### Section

  Sections are used to represent multiple different data representations. For
  example, additional properties can 

  have three sections with section one being a Form, while the other two could
  be a table. 

  Also note there could be sections with and without heading.


  #### With section heading

  ```json

  {
     "type": "Section",
     "data": {
        "Discipline": {
           "type": "Form",
           "data": {
              "Discipline/Final Orders state": "ILLINOIS",
              "Date action was taken": "02/03/2020",
              "Against privilege to practice (PTP)": "N/A"
           }
        },
        "NPDB code": {
           "type": "Form",
           "data": {
              "NPDB code": "39 - LICENSE REVOCATION, SUSPENSION OR OTHER DISCIPLINARY ACTION TAKEN BY A FEDERAL, STATE OR LOCAL LICENSING AUTHORITY"
           }
        },
        "Actions": {
           "type": "Form",
           "data": {
              "Initial action date": "02/03/2020",
              "Effective date(s)": "02/03/2020 - INDEFINITE/UNSPECIFIED",
              "Is license automatically reinstated after the effective date(s)": "NOT SUPPLIED",
              "NPDB code": "1148 - DENIAL OF LICENSE RENEWAL"
           }
        }
     }
  }

  ```


  #### Without section heading

  ```json

  {
     "type": "Section",
     "data": [
        {
           "type": "Form",
           "data": {
              "Discipline/Final Orders state": "ILLINOIS",
              "Date action was taken": "02/03/2020",
              "Against privilege to practice (PTP)": "N/A"
           }
        },
        {
           "type": "Form",
           "data": {
              "NPDB code": "39 - LICENSE REVOCATION, SUSPENSION OR OTHER DISCIPLINARY ACTION TAKEN BY A FEDERAL, STATE OR LOCAL LICENSING AUTHORITY"
           }
        },
        {
           "type": "Form",
           "data": {
              "Initial action date": "02/03/2020",
              "Effective date(s)": "02/03/2020 - INDEFINITE/UNSPECIFIED",
              "Is license automatically reinstated after the effective date(s)": "NOT SUPPLIED",
              "NPDB code": "1148 - DENIAL OF LICENSE RENEWAL"
           }
        }
     ]
  }

  ```


  ### Form


  A form is essentially a simple key/value collection, but it can also have
  nested flexible data.


  #### Simple form

  ```json

  {
     "type": "Form",
     "data": {
        "Date of Birth": "1958",
        "Registration Date": "06/13/2016",
        "Disciplinary Status": "CANCELLED BY BOARD"
     }
  }

  ```


  #### Nested form


  ```json

  {
     "type": "Form",
     "data": {
        "Date of Birth": "1958",
        "Registration Date": "06/13/2016",
        "Disciplinary Status": "CANCELLED BY BOARD",
        "Status Change": {
           "type": "Table",
           "data": [
              {
                 "Status Code": "CB",
                 "Effective Date": "06/10/2016",
                 "Description": "CANCELLED BY BOARD"
              },
              {
                 "Status Code": "NA",
                 "Effective Date": "06/10/2016",
                 "Description": "NOT ACTIVE"
              }
           ]
        }
     }
  }

  ```

