hash: bcdbd1a8e2e306a118c2d7ceeed39483b6397cc458b58cba7ae11ad36b23c036
methodObjects:
  - url: /v2/annotation_filters
    method: deleteAnnotationFilters2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete one or more annotation filters in a single request.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: annotationFilterIds
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/annotation_filters
    method: listAnnotationFilters2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the annotation filters.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/annotation_filters
    method: patchAnnotationFilters2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more annotation filters.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: annotationFilters
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/annotation_filters
    method: postAnnotationFilters2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Add annotation filters.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: annotationFilters
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/annotation_filters/{annotationFilterId}
    method: getAnnotationFilter2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific annotation filter.
    parameters:
      - name: annotationFilterId
        schema: string
        required: true
        description: Identify annotation filter by id.
        example: ANNOTATIONFILTERID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/annotations
    method: deleteAnnotations4
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete multiple annotations in one request.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
      - name: inputIds
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/annotations
    method: listAnnotations2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the annotation.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: ids
        schema: array
        required: false
        description: List annotations for these IDs
      - name: inputIds
        schema: array
        required: false
        description: >-
          List annotations for these Input IDs

          Note that 'ids' are optional but if the are provided the number and
          order in

          'ids' and 'input_ids' should match

          If you do not specify 'ids' all the annotations for 'input_ids' are
          returned

          If a you do not specify both 'input_ids' and 'ids' all the annotations
          in the app are returned
      - name: userIds
        schema: array
        required: false
        description: >-
          Only return the annotations that has one of these user IDs,
          effectively operating as an

          OR among them to filter down the results.

          If model_version_ids are also provided these user_ids are OR'd with
          them as well since

          annotations are either provided by users or model versions and we want
          the union of any

          provided user or model version annotations in the results of
          ListAnnotations request.

          If no user_ids are provided then annotations from all users are
          returned.
      - name: modelVersionIds
        schema: array
        required: false
        description: >-
          Only return the annotations that has one of these model version IDs,
          effectively operating as an

          OR among them to filter down the results.

          If user_ids are also provided these model_versions_ids are OR'd with
          them as well since

          annotations are either provided by users or model versions and we want
          the union of any

          provided user or model version annotations in the results of
          ListAnnotations request.

          If no model_version_ids are provided then annotations from all model
          versions are returned.
      - name: listAllAnnotations
        schema: boolean
        required: false
        description: |-
          Set this flag to list both trusted and not trusted annotations
          by default it's listing only trusted annotations
      - name: returnModelOutput
        schema: boolean
        required: false
        description: >-
          Set this flag to return the model output for model annotations in the
          response.
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: taskId
        schema: string
        required: false
        description: Flag to filter annotations by task_id
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/annotations
    method: patchAnnotations2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more annotations.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: annotations
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
      - name: deleteIfEmptyData
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/annotations
    method: postAnnotations2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Post annotations.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: annotations
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/annotations/searches
    method: patchAnnotationsSearches2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch saved annotations searches by ids.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: searches
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/annotations/searches
    method: postAnnotationsSearches2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Execute a search over annotations
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: searches
        schema: array
        description: ''
      - name: pagination
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/annotations/searches/metrics
    method: listAnnotationSearchMetrics2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List the evaluation results between two search requests
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/annotations/searches/metrics
    method: postAnnotationSearchMetrics2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Evaluate the results of two search requests
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: id
        schema: string
        description: ''
      - name: groundTruth
        schema: object
        description: ''
      - name: searchToEval
        schema: object
        description: ''
      - name: data
        schema: object
        description: ''
      - name: evaluationType
        schema: string
        description: ''
        default: Undefined
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/annotations/searches/metrics/{id}
    method: deleteAnnotationSearchMetrics2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: DeleteAnnotationSearchMetrics
    parameters:
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/annotations/searches/metrics/{id}
    method: getAnnotationSearchMetrics2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get the evaluation results between two search requests
    parameters:
      - name: id
        schema: string
        required: true
        description: Unique custom facing id that identifies the eval to get
        example: ID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/annotations/workers
    method: listAnnotationWorkers2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: |-
      ListAnnotationWorkers lists users, models, and workflows (collectively
      known as "workers") that have added annotations to the application.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response.

          Currently supported: all, names
      - name: trustedOnly
        schema: boolean
        required: false
        description: >-
          (optional URL parameter) Only list workers that have created trusted
          annotations.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/app
    method: getApp2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific app from an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/apps
    method: listApps2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the apps.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars
      - name: sortAscending
        schema: boolean
        required: false
        description: >-
          Sorting options:

          Whether to sort in ascending order. If false, will order in descending
          order.
      - name: sortByName
        schema: boolean
        required: false
        description: Whether to order by the name
      - name: sortByModifiedAt
        schema: boolean
        required: false
        description: |-
          Whether to order by the modified_at time.
          If none of the sort options is set to true, will sort by modified_at.
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: Whether to order by the created_at time.
      - name: sortByStarCount
        schema: boolean
        required: false
        description: Whether to order by the number of users stared the app
      - name: featuredOnly
        schema: boolean
        required: false
        description: |-
          Filtering options:
          If true, we only return apps that are handpicked by clarifai staff
      - name: starredOnly
        schema: boolean
        required: false
        description: If true, we only return apps that are starred by the requesting user
      - name: templateOnly
        schema: boolean
        required: false
        description: >-
          If true, we only return apps that are marked as a template by the app
          owner.
      - name: search
        schema: string
        required: false
        description: >-
          Searching options:

          Specify a search parameter in order to perform keyword search on the

          following fields of the application:
            - id
            - name
            - description
            - notes
            - user_id (unless user_app_id.user_id is already set)

          Keywords are both normalized for search (so searching for "satisfy"
          matches "satisfied")

          and used for partial prefix-matching (so searching for "clari" matches
          "clarifai").


          NOTE: Both the list of fields searched and the exact keyword matching

          rules are subject to change and not guaranteed to be
          backwards-compatible.
      - name: query
        schema: string
        required: false
        description: >-
          Query various text fields (id, name, description, and notes) that can
          contain the words in the query string

          Deprecated: use search instead.
      - name: name
        schema: string
        required: false
        description: >-
          Filter by the id, name and notes of the app. This supports wilcard
          queries like "gen*" to match "general" as an example.

          Deprecated: use search instead.
      - name: id
        schema: string
        required: false
        description: >-
          Filter by the user-unique-id of the app. This supports wilcard queries
          like "gen*" to match "general" as an example.

          Deprecated: use search instead.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/bulk_operations
    method: deleteBulkOperations2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: delete one or more terminated bulk operations
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/bulk_operations
    method: listBulkOperations2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the bulk operations
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/bulk_operations
    method: cancelBulkOperations2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Cancel one or more bulk operations
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/bulk_operations
    method: postBulkOperations2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: >-
      Perform bulk operations on a list of inputs based on input source.

      Operation include add, update, delete of concepts, metadata and geo data.

      This is an Asynchronous process. Use ListBulkOperations or
      GetBulkOperation to check the status.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: bulkOperations
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/bulk_operations/{id}
    method: getBulkOperation2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get the bulk operation details by ID
    parameters:
      - name: id
        schema: string
        required: true
        description: The bulk operation id
        example: ID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/collectors
    method: deleteCollectors2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: >-
      Delete multiple collectors in one request.

      This call is asynchronous. Use DeleteCollector if you want a synchronous
      version.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
      - name: deleteAll
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/collectors
    method: listCollectors2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the collectors.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: Response with multiple Collectors.
      - statusCode: default
        description: ''
  - url: /v2/collectors
    method: patchCollectors2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more collectors.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: collectors
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: Response with multiple Collectors.
      - statusCode: default
        description: ''
  - url: /v2/collectors
    method: postCollectors2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: >-
      Add a list of Collectors to an app.

      In the handler of this endpoint we also check for all the scopes of the 
      POST /inputs

      endpoint.

      Those current scopes are listed here as a hard requirement.

      They are needed when adding the collectors just so we now that you have
      permission with

      that key at least to do the writing to this app with POST /inputs.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: collectors
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: Response with multiple Collectors.
      - statusCode: default
        description: ''
  - url: /v2/collectors/{collectorId}
    method: getCollector2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific collector from an app.
    parameters:
      - name: collectorId
        schema: string
        required: true
        description: ''
        example: COLLECTORID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: Response with a single Collector.
      - statusCode: default
        description: ''
  - url: /v2/concepts
    method: listConcepts2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the concepts.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: id
        schema: string
        required: false
        description: Fuzzy match on concept ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/concepts
    method: patchConcepts2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more concepts.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: concepts
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/concepts
    method: postConcepts2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Add a concept to an app.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: concepts
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/concepts/knowledge_graphs
    method: listKnowledgeGraphs2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all domain graphs.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/concepts/knowledge_graphs
    method: postKnowledgeGraphs2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Post domain graphs.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: knowledgeGraphs
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/concepts/mappings/jobs
    method: postConceptMappingJobs2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Start concept mapping jobs.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: conceptMappingJobs
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/concepts/searches
    method: postConceptsSearches2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: |-
      Search over the concepts to find one or more you're looking for.
      This leverage the "body" parameter because we also have page and
      per_page as url query param variables in this request.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: conceptQuery
        schema: object
        description: ''
      - name: extraInfo
        schema: object
        description: ''
      - name: pagination
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/concepts/status
    method: getConceptCounts2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the concepts with their positive and negative counts
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/concepts/{conceptId}
    method: getConcept2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific concept from an app.
    parameters:
      - name: conceptId
        schema: string
        required: true
        description: The concept's id.
        example: CONCEPTID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/concepts/{conceptId}/languages
    method: listConceptLanguages2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List the concept in all the translated languages.
    parameters:
      - name: conceptId
        schema: string
        required: true
        description: ''
        example: CONCEPTID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/concepts/{conceptId}/languages
    method: patchConceptLanguages2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: >-
      Patch the name for a given language names by passing in a list of concepts
      with the new names

      for the languages.
    parameters:
      - name: conceptId
        schema: string
        required: true
        description: ''
        example: CONCEPTID
      - name: userAppId
        schema: object
        description: ''
      - name: conceptLanguages
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/concepts/{conceptId}/languages
    method: postConceptLanguages2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Add a new translation for this concept.
    parameters:
      - name: conceptId
        schema: string
        required: true
        description: ''
        example: CONCEPTID
      - name: userAppId
        schema: object
        description: ''
      - name: conceptLanguages
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/concepts/{conceptId}/languages/{language}
    method: getConceptLanguage2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific concept from an app.
    parameters:
      - name: conceptId
        schema: string
        required: true
        description: ''
        example: CONCEPTID
      - name: language
        schema: string
        required: true
        description: This is the language identifier.
        example: LANGUAGE
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/datasets
    method: deleteDatasets2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete one or more datasets in a single request.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: datasetIds
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/datasets
    method: listDatasets3
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the datasets.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: additionalFields
        schema: array
        required: false
        description: ''
      - name: sortAscending
        schema: boolean
        required: false
        description: >-
          Sorting options:

          Whether to sort in ascending order. If false, will order in descending
          order.
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: Whether to order by the created_at time.
      - name: sortByStarCount
        schema: boolean
        required: false
        description: Whether to order by the number of users stared the app
      - name: sortByModifiedAt
        schema: boolean
        required: false
        description: If neither sort option is set to true, will sort by modified_at.
      - name: sortById
        schema: boolean
        required: false
        description: Whether to order by the external id
      - name: starredOnly
        schema: boolean
        required: false
        description: 'Filtering options:'
      - name: bookmark
        schema: boolean
        required: false
        description: >-
          Filter datasets by bookmark. If set, only return bookmarked datasets.
          Otherwise none bookmarked datasets only.
      - name: search
        schema: string
        required: false
        description: >-
          Searching options:

          Specify a search parameter in order to perform keyword search on the

          following fields of the dataset:
            - id
            - description
            - notes
            - user_id (unless user_app_id.user_id is already set)

          Keywords are both normalized for search (so searching for "satisfy"
          matches "satisfied")

          and used for partial prefix-matching (so searching for "clari" matches
          "clarifai").


          NOTE: Both the list of fields searched and the exact keyword matching

          rules are subject to change and not guaranteed to be
          backwards-compatible.
      - name: id
        schema: string
        required: false
        description: |-
          Fuzzy filter on dataset ID
          Deprecated: use search instead.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/datasets
    method: patchDatasets2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: |-
      Patch one or more datasets.
      The process is atomic, i.e. either all or no datasets are patched.
      If there is an error for one dataset,
      the process will stop, revert the transaction and return the error.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: datasets
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/datasets
    method: postDatasets2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: |-
      Add datasets to an app.
      The process is atomic, i.e. either all or no datasets are added.
      If there is an error for one dataset,
      the process will stop, revert the transaction and return the error.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: datasets
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/datasets/{datasetId}
    method: getDataset2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific dataset.
    parameters:
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: additionalFields
        schema: array
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/datasets/{datasetId}/inputs
    method: deleteDatasetInputs2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete one or more dataset inputs in a single request.
    parameters:
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: userAppId
        schema: object
        description: ''
      - name: inputIds
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/datasets/{datasetId}/inputs
    method: listDatasetInputs2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the dataset inputs in a dataset.
    parameters:
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/datasets/{datasetId}/inputs
    method: postDatasetInputs2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: |-
      Add dataset inputs to a dataset.
      The process is not atomic, i.e. if there are errors with some dataset
      inputs, others might still be added. The response reports
        - SUCCESS if all dataset inputs were added,
        - MIXED_STATUS if only some dataset inputs were added, and
        - FAILURE if no dataset inputs were added.
      Each individual dataset input in the response has the status set to
      indicate if it was successful or if there was an error.
    parameters:
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: userAppId
        schema: object
        description: ''
      - name: datasetInputs
        schema: array
        description: ''
      - name: search
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/datasets/{datasetId}/inputs/{inputId}
    method: getDatasetInput2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific dataset input.
    parameters:
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: inputId
        schema: string
        required: true
        description: Identify dataset input by id.
        example: INPUTID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/datasets/{datasetId}/versions
    method: deleteDatasetVersions2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete one or more dataset versions in a single request.
    parameters:
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: userAppId
        schema: object
        description: ''
      - name: datasetVersionIds
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/datasets/{datasetId}/versions
    method: listDatasetVersions2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the dataset versions.
    parameters:
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/datasets/{datasetId}/versions
    method: patchDatasetVersions2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more dataset versions.
    parameters:
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: userAppId
        schema: object
        description: ''
      - name: datasetVersions
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/datasets/{datasetId}/versions
    method: postDatasetVersions2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Add dataset versions to a dataset.
    parameters:
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: userAppId
        schema: object
        description: ''
      - name: datasetVersions
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/datasets/{datasetId}/versions/{datasetVersionId}
    method: getDatasetVersion2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific dataset version.
    parameters:
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: datasetVersionId
        schema: string
        required: true
        description: Identify dataset version by id.
        example: DATASETVERSIONID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/datasets/{datasetId}/versions/{datasetVersionId}/exports
    method: putDatasetVersionExports2
    httpMethod: put
    tag: V2
    typeScriptTag: v2
    description: Create export of a dataset version.
    parameters:
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: datasetVersionId
        schema: string
        required: true
        description: Identify dataset version by id.
        example: DATASETVERSIONID
      - name: userAppId
        schema: object
        description: ''
      - name: exports
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/datasets/{datasetId}/versions/{datasetVersionId}/metrics
    method: listDatasetVersionMetricsGroups2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: datasetVersionId
        schema: string
        required: true
        description: Identify dataset version by id.
        example: DATASETVERSIONID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: parentPaths
        schema: array
        required: false
        description: >-
          Filter by parent path. Multiple parent paths are OR-ed. Empty list
          results in no filter.
      - name: types
        schema: array
        required: false
        description: >-
          Filter by parent type. Multiple types are OR-ed. Empty list results in
          no filter.

           - INPUT_TYPE: Group data examples by input type.
          Examples: images, videos, text, audio.
           - CONCEPT_ID: Group data examples by concept ID.
          Examples: inputs with cat concept, inputs with dog concept.
           - CONCEPTS_COUNT: Group data examples by concepts count.
          Examples: inputs with 20 concepts, inputs with 21 concepts.
           - BOUNDING_BOXES_COUNT: Group data examples by bounding boxes count.
          Examples: inputs with 20 bounding boxes, inputs with 21 bounding
          boxes.
           - POLYGONS_COUNT: Group data examples by polygons count.
          Examples: inputs with 20 polygons, inputs with 21 polygons.
           - POINTS_COUNT: Group data examples by points count.
          Examples: inputs with 20 points, inputs with 21 points.
           - MASKS_COUNT: Group data examples by masks count.
          Examples: inputs with 20 masks, inputs with 21 masks.
           - PIXELS_COUNT: Group data examples by pixels count.
          In order to reduce the number of groups, we use bins.

          Examples for bin size = 400: inputs with [200000, 200400) pixels,
          inputs with [200400, 200800) pixels.
           - ASPECT_RATIO: Group data examples by aspect ratio.
          In order to reduce the number of groups, we use bins.

          Examples for bin size = 0.1: inputs with [0.5, 0.6) aspect ratio,
          inputs with [0.6, 0.7) aspect ratio.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/evaluations
    method: listEvaluations3
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: sortAscending
        schema: boolean
        required: false
        description: If true, sort in ascending order, otherwise sort in descending order.
      - name: sortByAppId
        schema: boolean
        required: false
        description: Whether to order by application id
      - name: sortByRocAuc
        schema: boolean
        required: false
        description: Whether to order by eval metric summary.macro_avg_roc_auc
      - name: sortByF1
        schema: boolean
        required: false
        description: Whether to order by eval metric summary.f1
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: Whether to order by when the metric was created
      - name: sortByMeanAvgPrecision
        schema: boolean
        required: false
        description: Whether to order by eval metric summary.mean_avg_precision_iou_50
      - name: sortByPrecision
        schema: boolean
        required: false
        description: Whether to order by eval metric summary.macro_avg_precision
      - name: sortByRecall
        schema: boolean
        required: false
        description: Whether to order by eval metric summary.macro_avg_recall
      - name: sortByModelId
        schema: boolean
        required: false
        description: ''
      - name: sortByEvalDatasetId
        schema: boolean
        required: false
        description: ''
      - name: sortByTrainDatasetId
        schema: boolean
        required: false
        description: ''
      - name: modelTypeId
        schema: string
        required: false
        description: Filter on model type id
      - name: evalDatasetIds
        schema: array
        required: false
        description: >-
          Filter on dataset ID of the dataset version specified in the metric
          version
      - name: trainDatasetIds
        schema: array
        required: false
        description: >-
          Filter on dataset ID of the dataset version specified by the model
          version
      - name: conceptIds
        schema: array
        required: false
        description: Filter on concept IDs specified in the modele version's output_info
      - name: showFailedMetrics
        schema: boolean
        required: false
        description: Whether to show failed metrics, defaults to false
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/evaluations
    method: postEvaluations2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: evalMetrics
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/evaluations/{evaluationId}
    method: getEvaluation2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: evaluationId
        schema: string
        required: true
        description: ''
        example: EVALUATIONID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: fieldsConfusionMatrix
        schema: boolean
        required: false
        description: ''
      - name: fieldsCooccurrenceMatrix
        schema: boolean
        required: false
        description: ''
      - name: fieldsLabelCounts
        schema: boolean
        required: false
        description: ''
      - name: fieldsBinaryMetrics
        schema: boolean
        required: false
        description: ''
      - name: fieldsTestSet
        schema: boolean
        required: false
        description: ''
      - name: fieldsMetricsByArea
        schema: boolean
        required: false
        description: ''
      - name: fieldsMetricsByClass
        schema: boolean
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/inputs
    method: deleteInputs2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: |-
      Delete multiple inputs in one request.
      This call is asynchronous.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/inputs
    method: listInputs2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the inputs.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: statusCode
        schema: string
        required: false
        description: |-
          Status code from internal codes.

           - ZERO: to be revised and greatly expanded
           - SUCCESS: Generic
           - MOVED: Resource moved. Respond with Http status 307 and add new Location header to response
           - TEAPOT: SUCCESS_WARNING_API_DEPRECATED = 10001;
          SUCCESS_WARNING_CLIENT_DEPRECATED = 10002;
           - CONN_ACCOUNT_ISSUES: Clarifai Connection Codes: 11xxx

          expired cc, still in trial, feature not supported in your tier
           - CONN_TOKEN_INVALID: invalid auth token used. Deprecated: we should return CONN_KEY_INVALID instead now in all cases.
           - CONN_CREDENTIALS_INVALID: invalid auth credentials
           - CONN_EXCEED_HOURLY_LIMIT: throttle hourly limit exceeded
           - CONN_EXCEED_MONTHLY_LIMIT: throttle monthly limit exceeded
           - CONN_THROTTLED: throttler and billing stuff
           - CONN_EXCEEDS_LIMITS: throttler and billing stuff
           - CONN_INSUFFICIENT_SCOPES: api key has insufficient permissions
           - CONN_KEY_INVALID: api key is invalid
           - CONN_KEY_NOT_FOUND: api key not found
           - CONN_BAD_REQUEST_FORMAT: multipart form parsing, broken json, etc
           - CONN_DOES_NOT_EXIST: when path is bad
           - CONN_INVALID_REQUEST: something wrong with a header
           - CONN_METHOD_NOT_ALLOWED: when a request method is not allowed
           - CONN_NO_GDPR_CONSENT: lack GDPR consent
           - CONN_AUTH_METHOD_DISABLED: authentication method is disabled
           - MODEL_TRAINED: Model/Custom Training related 20xxx

          Custom model has been already trained.
           - MODEL_TRAINING: Custom model is currently training.
           - MODEL_UNTRAINED: Custom model has not yet been trained.
           - MODEL_QUEUED_FOR_TRAINING: Custom model is currently in queue for training, waiting on assets to process first.
           - MODEL_TRAINING_FAILED: generic err msg for any type of model training err.
           - MODEL_TRAINING_NO_DATA: Custom model training had no data.  FIXME(https://docs.clarifai.com/: deprecate this. Use the 21106 + errStatusMsg
           - MODEL_TRAINING_NO_POSITIVES: Custom model training had no positive examples. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21106 + errStatusMsg
           - MODEL_TRAINING_ONE_VS_N_SINGLE_CLASS: Custom model training was ONE_VS_N but with a single class. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21106 + errStatusMsg
           - MODEL_TRAINING_TIMED_OUT: Training took longer than hard coded timeouts. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21106 + errStatusMsg
           - MODEL_TRAINING_WAITING_ERROR: Training got error waiting on asset pipeline to finish. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21106 + errStatusMsg
           - MODEL_TRAINING_UNKNOWN_ERROR: Training threw an unknown exception.
           - MODEL_TRAINING_MSG_REDELIVER: Training message was redelivered. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21106 + errStatusMsg
           - MODEL_TRAINING_INSUFFICIENT_DATA: Training got error due to insufficient labelled data. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21106 + errStatusMsg
           - MODEL_TRAINING_INVALID_PARAMS: FIXME(https://docs.clarifai.com/: deprecate this. Use the 21106 + errStatusMsg
           - MODEL_TRAINING_INVALID_DATA_TOLERANCE_EXCEEDED: Training is stopped because too much data was dropped. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21106 + errStatusMsg
           - MODEL_EVALUATION_TIMED_OUT: Evaluation took longer than hard coded timeouts. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21317 + errStatusMsg
           - MODEL_EVALUATION_WAITING_ERROR: Evaluation got error waiting on asset pipeline to finish.FIXME(https://docs.clarifai.com/: deprecate this. Use the 21317 + errStatusMsg
           - MODEL_EVALUATION_UNKNOWN_ERROR: EVALUATION THREW AN UNKNOWN EXCEPTION.
           - MODEL_EVALUATION_MSG_REDELIVER: Eval message was redelivered. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21317 + errStatusMsg
           - MODEL_EVALUATION_NEED_LABELS: Don't have enough concepts labelled to perform evaluation. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21317 + errStatusMsg
           - MODEL_EVALUATION_NEED_INPUTS: Don't have enough inputs per concept to perform evaluation. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21317 + errStatusMsg
           - MODEL_EVALUATION_FAILED: Generic err code for eval failure.
           - MODEL_DEPLOYMENT_FAILED: Used when inference coordinator failed to deploy spire and throws an error
           - MODEL_DEPLOYING: Used when calling the inference coordinator to deploy a spire
           - MODEL_QUEUED_FOR_DEPLOYMENT: Used when training is completed
           - MODEL_NOT_DEPLOYED: Used when model spire deployment is manually taken down or due to inactivity
           - MODEL_REFERENCE_INVALID_ARGUMENT: Used when a model reference field is not set properly
           - MODEL_EXAMPLE_INPUT_INVALID_ARGUMENT: Used when a model example input field is not set properly
           - MODEL_EXPORTED: Model Export status codes
           - WORKFLOW_NO_MATCHING_INPUT: specified model input not in workflow
           - WORKFLOW_REQUIRE_TRAINED_MODEL: specified model must be trained
           - WORKFLOW_INVALID_ARGUMENT: error in the request somewhere
           - WORKFLOW_INVALID_REQUEST: error in the request somewhere
           - CONCEPT_MODIFY_SUCCESS: Concept related 23xxx
           - ANNOTATION_SUCCESS: Annotation related 24xxx
           - METADATA_INVALID_PATCH_ARGUMENTS: Metadata related 249xx
           - TRAINER_JOB_STATE_NONE: Training service related 25xxx
           - DATA_DUMP_SUCCESS: Data Dump related 251xx
           - DATA_DUMP_NO_DATA: DEPRECATED: Not used anymore. Now for an empty data dump, DATA_DUMP_SUCCESS is returned. To detect an empty data dump, check if the inptus count is 0.
           - APP_DUPLICATION_SUCCESS: Duplicate related 252xx
           - MODULE_DOES_NOT_EXIST: Module related codes 253xx
           - BULK_OPERATION_SUCCESS: Bulk Operation related codes 254xx
           - RUNNER_DOES_NOT_EXIST: Runner related codes 256xx
           - INPUT_DOWNLOAD_SUCCESS: Input:Image related 30xxx
           - INPUT_DOWNLOAD_PENDING: when things are async, this is the default status.
           - INPUT_DOWNLOAD_FAILED: any type of error downloading and processing
           - INPUT_VIDEO_DOWNLOAD_SUCCESS: Input:Video related 31xxx -- Deprecated
           - INPUT_WRITES_DISABLED_FOR_MAINTENANCE: deprecate this one. Use REQUEST_DISABLED_FOR_MAINTENANCE
           - PREDICT_INVALID_REQUEST: API formatting issues 4000x
           - DATABASE_DUPLICATE_KEY: Other related 400xx
           - EXTERNAL_CONNECTION_ERROR: could not connect to external services
           - QUEUE_CONN_ERROR: Queue related errors 41xxx
           - SQS_OVERLIMIT: SQS related errors 411xx
           - SEARCH_INTERNAL_FAILURE: Search related errors 43xxxx
           - EVALUATION_QUEUED: Workflow evaluation err code
           - STRIPE_EVENT_ERROR: Stripe 44xxx
           - CACHE_MISS: Redis/Cache 45xxx
           - SIGNUP_EVENT_ERROR: Sift Science 46xxx
           - APP_COUNT_INVALID_MESSAGE: Application counts related errors 470xx
           - MP_DOWNLOAD_ERROR: Media processor related errors 471xx -- DEPRECATED
           - DATATIER_CONN_ERROR: DataTier related error 472xx
           - USER_CONSENT_FACE: User legal consent stauts related 50xxx
           - WORKER_MISSING: Workers 51xxx
           - COLLECTOR_MISSING: Collectors 52xxx
           - SSO_IDENTITY_PROVIDER_DOES_NOT_EXIST: SSO 53xxx
           - TASK_IN_PROGRESS: Tasks 54xxx
          The task was created.
           - TASK_DONE: The task is completed.
           - TASK_WONT_DO: The task is marked as abandoned.
           - TASK_FAILED: An error occurred during add-task-annotations or add-auto-annotations pipeline.
           - TASK_IDLE: When an Auto Annotation task job has finished processing its last batch and is waiting for more dataset assets.
           - TASK_CONFLICT: The task operation is in conflict with the current state of the server.
           - TASK_NOT_IMPLEMENTED: Certain task-related scenarios are not implemented.
           - TASK_MISSING: Task was not found.
           - TASK_PERMISSION_DENIED: Not allowed to perform a task-related action.
           - LABEL_ORDER_PENDING: Label Order Related Status Code 55xxx
           - LICENSE_ACTIVE: License Related Status Code 600xx
           - LICENSE_DELETED: hidden state not reflected to users
           - PASSWORD_VALIDATION_SUCCESS: Password Related Status Code
           - FEATUREFLAG_CONFIG_NOT_FOUND: Feature flags status code
           - MAINTENANCE_SUCCESS: Maintenance status code
           - DATASET_VERSION_PENDING: Datasets 64xxx
          The dataset version is pending to be processed.
           - DATASET_VERSION_IN_PROGRESS: The dataset version is currently being processed.
           - DATASET_VERSION_READY: The dataset version is ready to be used.
           - DATASET_VERSION_FAILURE: An error occurred during the dataset version processing.
           - DATASET_VERSION_UNEXPECTED_ERROR: An unexpected error occurred during the dataset version processing.
           - DATASET_VERSION_CONFLICT: An alteration to dataset version would create a conflict
           - DATASET_INPUT_SUCCESS: The dataset input was successfully added.
           - DATASET_INPUT_DUPLICATE: The dataset input is a duplicate.
          Deprecated: Unused.
           - DATASET_VERSION_EXPORT_SUCCESS: The dataset version export is completed.
           - DATASET_VERSION_EXPORT_PENDING: The dataset version is pending to be exported.
           - DATASET_VERSION_EXPORT_FAILED: An error occurred during the dataset version export.
           - DATASET_VERSION_EXPORT_IN_PROGRESS: The dataset version is currently being exported.
           - DATASET_VERSION_EXPORT_UNEXPECTED_ERROR: An unexpected error occurred during the dataset version export.
           - JOB_QUEUED: Generic Job status codes
           - AUTH_MISSING_IDP_ASSOC: auth issues

          TODO: Knowledge graph related 80xxx
           - UPLOAD_IN_PROGRESS: Multipart uploading status codes
           - BILLING_INVALID_INFO: Billing related issues: 69xxx
           - INTERNAL_SERVER_ISSUE: Internal issues: 98xxx
           - CONN_UNCATEGORIZED: Uncategorized: 99xxx: move off as soon as known
           - BAD_REQUEST: Deprecated: migrate off to one of the internal issues
           - SERVER_ERROR: Deprecated: migrate off to one of the internal issues
        default: ZERO
      - name: statusDescription
        schema: string
        required: false
        description: A short description of the error.
      - name: statusDetails
        schema: string
        required: false
        description: |-
          More details of the given error.
          These details may be exposed to non-technical users.
          For technical details, try to use developer_notes field.
      - name: statusStackTrace
        schema: array
        required: false
        description: |-
          For some environment we may return a stack trace to help debug
          any issues.
      - name: statusPercentCompleted
        schema: integer
        required: false
        description: specifically for long running jobs
      - name: statusTimeRemaining
        schema: integer
        required: false
        description: if status is pending, how much time is remaining (in seconds)
      - name: statusReqId
        schema: string
        required: false
        description: A request ID may be present, to help monitoring and tracking requests
      - name: statusInternalDetails
        schema: string
        required: false
        description: >-
          Internal Annotation (do not set in production, for internal Clarifai
          use only).
      - name: statusRedirectInfoUrl
        schema: string
        required: false
        description: New location for the resource. Used to set response Location header.
      - name: statusRedirectInfoResourceType
        schema: string
        required: false
        description: Resource type
      - name: statusRedirectInfoOldResourceId
        schema: string
        required: false
        description: Old resource id
      - name: statusRedirectInfoNewResourceId
        schema: string
        required: false
        description: New resource id
      - name: statusDeveloperNotes
        schema: string
        required: false
        description: >-
          Notes for developer.

          These notes are rather technical details for developers how to
          interpret the status,

          e.g. why an error occurred and how to avoid getting the error.
      - name: ids
        schema: array
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/inputs
    method: patchInputs2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more inputs.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: inputs
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/inputs
    method: postInputs2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: |-
      Add 1 or more input to an app.
      The actual inputs processing is asynchronous.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: inputs
        schema: array
        description: ''
      - name: inputsAddJobId
        schema: string
        description: ''
      - name: inputIdConflictResolution
        schema: string
        description: ''
        default: INPUT_ID_CONFLICT_RESOLUTION_NOT_SET
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/inputs/annotations
    method: deleteAnnotations2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete multiple annotations in one request.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
      - name: inputIds
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/inputs/data_sources
    method: postInputsDataSources2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: >-
      Initiates retrieval of inputs from cloud storage from a user provided data
      source.

      Will create and return an inputs-add-job for tracking progress.

      Archives will be extracted and their contents will be processed as inputs.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: dataSources
        schema: array
        description: ''
      - name: callBackUrl
        schema: string
        description: ''
      - name: appPat
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/inputs/jobs/add
    method: listInputsAddJobs2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the inputs add jobs
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/inputs/jobs/add/{id}
    method: getInputsAddJob2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get the input add job details by ID
    parameters:
      - name: id
        schema: string
        required: true
        description: id of add inputs job
        example: ID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/inputs/jobs/add/{id}
    method: cancelInputsAddJob2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: cancel the input add job by ID
    parameters:
      - name: id
        schema: string
        required: true
        description: id of add inputs job to be cancelled
        example: ID
      - name: userAppId
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/inputs/jobs/extraction
    method: listInputsExtractionJobs2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the input extraction jobs
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/inputs/jobs/extraction
    method: cancelInputsExtractionJobs2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/inputs/jobs/extraction/{inputsExtractionJobId}
    method: getInputsExtractionJob2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get the input extraction job details by ID
    parameters:
      - name: inputsExtractionJobId
        schema: string
        required: true
        description: ''
        example: INPUTSEXTRACTIONJOBID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/inputs/searches
    method: patchInputsSearches2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch saved inputs searches by ids.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: searches
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/inputs/searches
    method: postInputsSearches2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Execute a search over inputs
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: searches
        schema: array
        description: ''
      - name: pagination
        schema: object
        description: ''
      - name: onlyCount
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/inputs/status
    method: getInputCount2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get input count per status.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/inputs/stream
    method: streamInputs2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Streams all the inputs starting from oldest assets.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 20.
      - name: lastId
        schema: string
        required: false
        description: ''
      - name: orderById
        schema: boolean
        required: false
        description: |-
          By default, the endpoint return inputs by the time when it is added.
          If this is set to true, we will return inputs by id.
      - name: descending
        schema: boolean
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/inputs/uploads
    method: postInputsUploads2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: |-
      Start uploading a file archive containing inputs.
      Will create and return an inputs-add-job for tracking progress.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: inputsUploads
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/inputs/{inputId}
    method: deleteInput2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete a single input asynchronously.
    parameters:
      - name: inputId
        schema: string
        required: true
        description: ''
        example: INPUTID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/inputs/{inputId}
    method: getInput2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific input from an app.
    parameters:
      - name: inputId
        schema: string
        required: true
        description: ''
        example: INPUTID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/inputs/{inputId}/annotations/{annotationId}
    method: deleteAnnotation2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete a single annotation.
    parameters:
      - name: inputId
        schema: string
        required: true
        description: ''
        example: INPUTID
      - name: annotationId
        schema: string
        required: true
        description: ''
        example: ANNOTATIONID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/inputs/{inputId}/annotations/{annotationId}
    method: getAnnotation2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific annotation from an app.
    parameters:
      - name: inputId
        schema: string
        required: true
        description: ''
        example: INPUTID
      - name: annotationId
        schema: string
        required: true
        description: ''
        example: ANNOTATIONID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/inputs/{inputId}/video_manifest
    method: getInputVideoManifest2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a video input manifest.
    parameters:
      - name: inputId
        schema: string
        required: true
        description: ''
        example: INPUTID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/label_orders
    method: deleteLabelOrders2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: |-
      Delete multiple label orders in one request.
      this do not change task status
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/label_orders
    method: listLabelOrders2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List label orders.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: Response with multiple label order.
      - statusCode: default
        description: ''
  - url: /v2/label_orders
    method: patchLabelOrders2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more label orders.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: labelOrders
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: Response with multiple label order.
      - statusCode: default
        description: ''
  - url: /v2/label_orders
    method: postLabelOrders2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Add Label orders.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: labelOrders
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: Response with multiple label order.
      - statusCode: default
        description: ''
  - url: /v2/label_orders/{labelOrderId}
    method: getLabelOrder2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a label order.
    parameters:
      - name: labelOrderId
        schema: string
        required: true
        description: ''
        example: LABELORDERID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: Response with a label order.
      - statusCode: default
        description: ''
  - url: /v2/models
    method: deleteModels2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete multiple models in one request.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
      - name: deleteAll
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/models
    method: listModels3
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the models.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars, outputs, presets
      - name: sortAscending
        schema: boolean
        required: false
        description: >-
          Sorting options:

          Whether to sort in ascending order. If false, will order in descending
          order.
      - name: sortByName
        schema: boolean
        required: false
        description: Whether to order by the name
      - name: sortByNumInputs
        schema: boolean
        required: false
        description: Whether to order by the number of training inputs
      - name: sortByModifiedAt
        schema: boolean
        required: false
        description: |-
          Whether to order by the modified_at time of the latest model version.
          If none of the sort options is set to true, will sort by modified_at.
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: Whether to order by the created_at
      - name: sortByStarCount
        schema: boolean
        required: false
        description: Whether to order by count of stars
      - name: modelTypeId
        schema: string
        required: false
        description: >-
          Filtering options:

          Filter models by the specific model_type_id. See ListModelTypes for
          the list of ModelType.Id's

          supported.
      - name: trainedOnly
        schema: boolean
        required: false
        description: >-
          If true, we only return models that have the status MODEL_TRAINED,
          which includes non-trainable model types.
      - name: inputFields
        schema: array
        required: false
        description: >-
          The list of input fields to the model.

          For example, you can specify 'image', which will return models that
          make inferences on images like visual-classifier models.
      - name: outputFields
        schema: array
        required: false
        description: >-
          The list of output fields to the model.

          For example, you can specify 'regions[...].data.concepts', which will
          return visual-detector models.
      - name: license
        schema: string
        required: false
        description: Filter by the license of the model version
      - name: featuredOnly
        schema: boolean
        required: false
        description: If true, we only return models that are handpicked by clarifai staff
      - name: starredOnly
        schema: boolean
        required: false
        description: If true, we only return models that are starred by the requesting user
      - name: toolkits
        schema: array
        required: false
        description: List of toolkit tags to filter by
      - name: useCases
        schema: array
        required: false
        description: List of use_case tags to filter by
      - name: languages
        schema: array
        required: false
        description: List of language tags to filter by
      - name: dontFetchFromMain
        schema: boolean
        required: false
        description: >-
          Old API behavior resulted in returning clarifai main models when
          calling ListModels while scoped to an app. While we transition

          away from that, we can use this flag to not always fetch clarifai main
          models, unless that is the app we are explicitly listing for.
      - name: bookmark
        schema: boolean
        required: false
        description: >-
          Filter models by bookmark. If set, only return bookmarked models.
          Otherwise none bookmarked models only.

          Note: you can not filter `trained_only` and bookmark at the same time.

          When filter by bookmark, we will return trained and untrained models.
      - name: search
        schema: string
        required: false
        description: >-
          Searching options:

          Specify a search parameter in order to perform keyword search on the

          following fields of the model:
            - id
            - name
            - description
            - notes
            - user_id (unless user_app_id.user_id is already set)

          Keywords are both normalized for search (so searching for "satisfy"
          matches "satisfied")

          and used for partial prefix-matching (so searching for "clari" matches
          "clarifai").


          NOTE: Both the list of fields searched and the exact keyword matching

          rules are subject to change and not guaranteed to be
          backwards-compatible.
      - name: query
        schema: string
        required: false
        description: >-
          Query name, description and id fields, that can contain the words in
          the query string. Does NOT support wildcards - full words only.
          Supports operators "OR" and "-" as NOT.

          Deprecated: use search instead.
      - name: name
        schema: string
        required: false
        description: >-
          Filter by the description and id of the model. This supports wildcard
          queries like "gen*" to match "general" as an example.

          Deprecated: use search instead.
      - name: filterByUserId
        schema: boolean
        required: false
        description: >-
          Extends the name filter to include the user_id of the application
          owner that the model belongs to.

          Deprecated: use search instead of name.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models
    method: patchModels2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more models.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: models
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models
    method: postModels2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Add a models to an app.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: model
        schema: object
        description: ''
      - name: models
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/searches
    method: postModelsSearches2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: |-
      Search over the models to find one or more you're looking for.
      This leverage the "body" parameter because we also have page and
      per_page as url query param variables in this request.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: modelQuery
        schema: object
        description: ''
      - name: pagination
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/types
    method: listModelTypes2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: >-
      List all the model types available in the platform.

      This MUST be above ListModels so that the /models/types endpoint takes
      precedence.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/types/{modelTypeId}
    method: getModelType2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific model type.
    parameters:
      - name: modelTypeId
        schema: string
        required: true
        description: The specific ModelType.Id you want to retrieve.
        example: MODELTYPEID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/versions/upload
    method: postModelVersionsUpload
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: >-
      This is a streaming endpoint, the request has a field, upload_data, which
      can either be the config for the upload or the actual data to upload.

      The config must be sent first before the model_bytes can be uploaded.

      Once the config has been sent, the server will respond with a confirmation
      containing the model_version_id.

      This is so that if your upload is interrupted, you can resume the upload
      by sending the config again with the model_version_id specified for your
      model_version.

      The actual upload will be done via a multipart upload, the latest
      successful part_id will be sent from the server in the response to the
      model_bytes.
    parameters:
      - name: uploadConfig
        schema: object
        description: ''
      - name: contentPart
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}
    method: deleteModel2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete a single model.
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}
    method: getModel2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific model from an app.
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: versionId
        schema: string
        required: false
        description: |-
          This is included so that we can re-use this request for multiple
          rpcs with and without the version_id.
      - name: language
        schema: string
        required: false
        description: ''
      - name: trainedBefore
        schema: boolean
        required: false
        description: ''
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars, outputs, presets
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/check_consents
    method: patchModelCheckConsents2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Update model check consents
    parameters:
      - name: modelId
        schema: string
        required: true
        description: the model id
        example: MODELID
      - name: userAppId
        schema: object
        description: ''
      - name: checkConsents
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/inputs
    method: listModelInputs2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: 'Deprecated: Unmaintained and ideally replaced with usage of datasets'
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: versionId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/languages
    method: patchModelLanguages2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Update model languages tags
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppId
        schema: object
        description: ''
      - name: languages
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/output_info
    method: getModelOutputInfo2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: |-
      Get a the output info for a given model_id or model_id/version_id
      combo.
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: versionId
        schema: string
        required: false
        description: |-
          This is included so that we can re-use this request for multiple
          rpcs with and without the version_id.
      - name: language
        schema: string
        required: false
        description: ''
      - name: trainedBefore
        schema: boolean
        required: false
        description: ''
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars, outputs, presets
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/outputs
    method: postModelOutputs4
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Get predicted outputs from the model.
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppId
        schema: object
        description: ''
      - name: versionId
        schema: string
        description: ''
      - name: inputs
        schema: array
        description: ''
      - name: model
        schema: object
        description: ''
      - name: runnerSelector
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/publish
    method: postModelVersionsPublish2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: PostModelVersionsPublish
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppId
        schema: object
        description: ''
      - name: publications
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/references
    method: listModelReferences2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Lists model references tied to a particular model id.
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: Optional, defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: Optional, defaults to 128 references per page.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/toolkits
    method: patchModelToolkits2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Update model toolkits tags
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppId
        schema: object
        description: ''
      - name: toolkits
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/unpublish
    method: postModelVersionsUnPublish2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: PostModelVersionsUnPublish
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppId
        schema: object
        description: ''
      - name: publications
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/usecases
    method: patchModelUseCases2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Update model use_cases tags
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppId
        schema: object
        description: ''
      - name: usecases
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/versions
    method: listModelVersions2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the models.
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: conceptIds
        schema: array
        required: false
        description: >-
          Filtering options:

          To list only the model versions that have these concept ids present in
          them.
      - name: trainedOnly
        schema: boolean
        required: false
        description: To list only the model versions that have been trained.
      - name: sortAscending
        schema: boolean
        required: false
        description: >-
          Sorting options:

          Whether to sort in ascending order. If false, will order in descending
          order.
      - name: sortByStatusCode
        schema: boolean
        required: false
        description: Whether to order by the status code
      - name: sortByNumInputs
        schema: boolean
        required: false
        description: Whether to order by the number of training inputs
      - name: sortByDescription
        schema: boolean
        required: false
        description: Whether to sort by the description
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: |-
          Whether to order by the created_at time
          If neither sort option is set to true, will sort by created_at.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/versions
    method: postModelVersions2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Create a new model version to trigger training of the model.
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: description
        schema: string
        description: ''
      - name: userAppId
        schema: object
        description: ''
      - name: modelVersions
        schema: array
        description: ''
      - name: evalInfo
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/versions/time_estimate
    method: postModelVersionsTrainingTimeEstimate2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: >-
      Get the training time estimate based off train request and estimated input
      count.
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppId
        schema: object
        description: ''
      - name: modelVersions
        schema: array
        description: ''
      - name: estimatedInputCount
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/versions/{modelVersionId}/evaluations
    method: listModelVersionEvaluations2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: |-
      Deprecated, use GetEvaluation instead
      List the evaluation metrics for a model version.
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: modelVersionId
        schema: string
        required: true
        description: ''
        example: MODELVERSIONID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/versions/{modelVersionId}/evaluations
    method: postModelVersionEvaluations2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Deprecated, use PostEvaluations instead
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: modelVersionId
        schema: string
        required: true
        description: ''
        example: MODELVERSIONID
      - name: userAppId
        schema: object
        description: ''
      - name: evalMetrics
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/versions/{modelVersionId}/evaluations/{evaluationId}
    method: getModelVersionEvaluation2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: |-
      Deprecated, use GetEvaluation instead
      Get an evaluation metrics for a model version.
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: modelVersionId
        schema: string
        required: true
        description: ''
        example: MODELVERSIONID
      - name: evaluationId
        schema: string
        required: true
        description: ''
        example: EVALUATIONID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: fieldsConfusionMatrix
        schema: boolean
        required: false
        description: ''
      - name: fieldsCooccurrenceMatrix
        schema: boolean
        required: false
        description: ''
      - name: fieldsLabelCounts
        schema: boolean
        required: false
        description: ''
      - name: fieldsBinaryMetrics
        schema: boolean
        required: false
        description: ''
      - name: fieldsTestSet
        schema: boolean
        required: false
        description: ''
      - name: fieldsMetricsByArea
        schema: boolean
        required: false
        description: ''
      - name: fieldsMetricsByClass
        schema: boolean
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/versions/{modelVersionId}/input_examples
    method: listModelVersionInputExamples2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: ListModelVersionInputExamples
    parameters:
      - name: modelId
        schema: string
        required: true
        description: id of model the example belongs to
        example: MODELID
      - name: modelVersionId
        schema: string
        required: true
        description: specific version the example belongs to
        example: MODELVERSIONID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: Optional, defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: Optional, defaults to 128 references per page.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/versions/{modelVersionId}/input_examples/{exampleId}
    method: getModelVersionInputExample2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: GetModelVersionInputExample
    parameters:
      - name: modelId
        schema: string
        required: true
        description: id of model the example belongs to
        example: MODELID
      - name: modelVersionId
        schema: string
        required: true
        description: specific version the example belongs to
        example: MODELVERSIONID
      - name: exampleId
        schema: string
        required: true
        description: Id of example to fetch
        example: EXAMPLEID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/versions/{versionId}
    method: deleteModelVersion2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete a single model.
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: ''
        example: VERSIONID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/versions/{versionId}
    method: getModelVersion2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific model from an app.
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: ''
        example: VERSIONID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/versions/{versionId}/exports
    method: getModelVersionExport2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: GetModelVersionExport
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: ''
        example: VERSIONID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/versions/{versionId}/exports
    method: putModelVersionExports2
    httpMethod: put
    tag: V2
    typeScriptTag: v2
    description: Export a model
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: ''
        example: VERSIONID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/versions/{versionId}/inputs
    method: listModelInputs4
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: 'Deprecated: Unmaintained and ideally replaced with usage of datasets'
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: ''
        example: VERSIONID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/versions/{versionId}/metrics
    method: getModelVersionMetrics2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: |-
      Deprecated: Use GetEvaluation instead
      Get the evaluation metrics for a model version.
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: ''
        example: VERSIONID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: fieldsConfusionMatrix
        schema: boolean
        required: false
        description: ''
      - name: fieldsCooccurrenceMatrix
        schema: boolean
        required: false
        description: ''
      - name: fieldsLabelCounts
        schema: boolean
        required: false
        description: ''
      - name: fieldsBinaryMetrics
        schema: boolean
        required: false
        description: ''
      - name: fieldsTestSet
        schema: boolean
        required: false
        description: ''
      - name: fieldsMetricsByArea
        schema: boolean
        required: false
        description: ''
      - name: fieldsMetricsByClass
        schema: boolean
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/versions/{versionId}/metrics
    method: postModelVersionMetrics2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: |-
      Deprecated, use PostEvaluations instead
      Run the evaluation metrics for a model version.
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: ''
        example: VERSIONID
      - name: userAppId
        schema: object
        description: ''
      - name: testSearch
        schema: object
        description: ''
      - name: evalInfo
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/versions/{versionId}/output_info
    method: getModelOutputInfo4
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: |-
      Get a the output info for a given model_id or model_id/version_id
      combo.
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: |-
          This is included so that we can re-use this request for multiple
          rpcs with and without the version_id.
        example: VERSIONID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: language
        schema: string
        required: false
        description: ''
      - name: trainedBefore
        schema: boolean
        required: false
        description: ''
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars, outputs, presets
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/models/{modelId}/versions/{versionId}/outputs
    method: postModelOutputs2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Get predicted outputs from the model.
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: ''
        example: VERSIONID
      - name: userAppId
        schema: object
        description: ''
      - name: inputs
        schema: array
        description: ''
      - name: model
        schema: object
        description: ''
      - name: runnerSelector
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/modules
    method: listModules3
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the modules in community, by user or by app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: additionalFields
        schema: array
        required: false
        description: ''
      - name: sortAscending
        schema: boolean
        required: false
        description: >-
          Sorting options:

          Whether to sort in ascending order. If false, will order in descending
          order.
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: Whether to order by the created_at time.
      - name: sortByStarCount
        schema: boolean
        required: false
        description: Whether to order by the number of users stared the app
      - name: sortByModifiedAt
        schema: boolean
        required: false
        description: If neither sort option is set to true, will sort by modified_at.
      - name: sortById
        schema: boolean
        required: false
        description: Whether to order by the external id
      - name: starredOnly
        schema: boolean
        required: false
        description: 'Filtering options:'
      - name: bookmark
        schema: boolean
        required: false
        description: >-
          Filter modules by bookmark. If set, only return bookmarked modules.
          Otherwise none bookmarked modules only.
      - name: search
        schema: string
        required: false
        description: >-
          Searching options:

          Specify a search parameter in order to perform keyword search on the

          following fields of the module:
            - id
            - description
            - user_id (unless user_app_id.user_id is already set)

          Keywords are both normalized for search (so searching for "satisfy"
          matches "satisfied")

          and used for partial prefix-matching (so searching for "clari" matches
          "clarifai").


          NOTE: Both the list of fields searched and the exact keyword matching

          rules are subject to change and not guaranteed to be
          backwards-compatible.
      - name: name
        schema: string
        required: false
        description: >-
          Filter by the id and description of the module. This supports wildcard
          queries like "gen*" to match "general" as an example.

          Deprecated: use search instead.
      - name: filterByUserId
        schema: boolean
        required: false
        description: |-
          Filter by the application owner whose this module belongs to
          Deprecated: use search instead of name.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/my_scopes
    method: myScopes3
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: >-
      API Keys in the public API -- request is itself Key authorized, and will
      tell

      the user the scopes/access of the key/credential they're providing, as
      computed by

      our authorizer:
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/myscopes
    method: myScopes2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: >-
      API Keys in the public API -- request is itself Key authorized, and will
      tell

      the user the scopes/access of the key/credential they're providing, as
      computed by

      our authorizer:
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/myscopesroot
    method: myScopesRoot
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/open_source_licenses
    method: listOpenSourceLicenses
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the supported open source licenses in the platform.
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/resource_counts
    method: getResourceCounts2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List the resource counts for the app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/searches
    method: listSearches2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all saved legacy searches.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/searches
    method: patchSearches2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch saved legacy searches by ids.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: searches
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/searches
    method: postSearches2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Execute a new search and optionally save it.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: query
        schema: object
        description: ''
      - name: searches
        schema: array
        description: ''
      - name: pagination
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/searches/{id}
    method: deleteSearch2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete a saved search.
    parameters:
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/searches/{id}
    method: getSearch2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a saved legacy search.
    parameters:
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/searches/{id}
    method: postSearchesById2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Execute a previously saved legacy search.
    parameters:
      - name: id
        schema: string
        required: true
        description: ID for saves search to be executed
        example: ID
      - name: userAppId
        schema: object
        description: ''
      - name: pagination
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/stats/values
    method: postStatValues2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: PostStatValues
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: statValues
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/stats/values/aggregate
    method: postStatValuesAggregate2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: PostStatValuesAggregate
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: statValueAggregateQueries
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/status_codes
    method: listStatusCodes
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all status codes.
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/status_codes/{statusCodeId}
    method: getStatusCode
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get more details for a status code.
    parameters:
      - name: statusCodeId
        schema: string
        required: true
        description: ''
        example: STATUSCODEID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/tasks
    method: deleteTasks2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete multiple tasks in one request.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/tasks
    method: listTasks2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List tasks from an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: workerUserIds
        schema: array
        required: false
        description: Get tasks that have ANY user from this list assigned as worker.
      - name: reviewUserIds
        schema: array
        required: false
        description: Get tasks that have ANY user from this list assigned as reviewer.
      - name: labelOrderIds
        schema: array
        required: false
        description: Get tasks that are associated to ANY label order from this list.
      - name: includingLabelOrderTasks
        schema: boolean
        required: false
        description: |-
          Get label order tasks as well
          It is automatically set to true if label_order_ids is set.
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response.

          Currently supported additional fields:

          - all

          - worker.users

          - review.users

          - metrics.work.inputs_count_estimated

          - metrics.work.inputs_percent_estimated
      - name: ids
        schema: array
        required: false
        description: (https://docs.clarifai.com/ task IDs to filter on
    responses:
      - statusCode: '200'
        description: Response with multiple Tasks.
      - statusCode: default
        description: ''
  - url: /v2/tasks
    method: patchTasks2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more tasks.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: tasks
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: Response with multiple Tasks.
      - statusCode: default
        description: ''
  - url: /v2/tasks
    method: postTasks2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Add tasks to an app.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: tasks
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: Response with multiple Tasks.
      - statusCode: default
        description: ''
  - url: /v2/tasks/{taskId}
    method: getTask2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific task from an app.
    parameters:
      - name: taskId
        schema: string
        required: true
        description: ''
        example: TASKID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response.

          Currently supported additional fields:

          - all

          - worker.users

          - review.users

          - metrics.work.inputs_count_estimated

          - metrics.work.inputs_percent_estimated
    responses:
      - statusCode: '200'
        description: Response with a single Task.
      - statusCode: default
        description: ''
  - url: /v2/tasks/{taskId}/annotations/count
    method: getTaskAnnotationCount2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Task annotation count
    parameters:
      - name: taskId
        schema: string
        required: true
        description: task_id for which count per user per status is needed
        example: TASKID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: userIds
        schema: array
        required: false
        description: for given task_id, user_ids to filter on (https://docs.clarifai.com/
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/tasks/{taskId}/assignments
    method: listNextTaskAssignments2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List next non-labeled and unassigned inputs from task's dataset
    parameters:
      - name: taskId
        schema: string
        required: true
        description: ''
        example: TASKID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/tasks/{taskId}/inputs/count
    method: getTaskInputCount2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Task Input count
    parameters:
      - name: taskId
        schema: string
        required: true
        description: task_id for which count per user per status is needed
        example: TASKID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: userIds
        schema: array
        required: false
        description: for given task_id, user_ids to filter on (https://docs.clarifai.com/
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/tasks/{taskId}/inputs/samples
    method: getInputSamples2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific input from an app.
    parameters:
      - name: taskId
        schema: string
        required: true
        description: ''
        example: TASKID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: userIds
        schema: array
        required: false
        description: URL param. If zero ids provided, returns for all task labelers
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/trending_metrics/views/{viewType}
    method: listTrendingMetricsViews2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List the view metrics for a detail view
    parameters:
      - name: viewType
        schema: string
        required: true
        description: For now view types 'apps', 'workflows', and 'models' are supported.
        example: VIEWTYPE
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/uploads
    method: deleteUploads2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/uploads
    method: listUploads2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/uploads
    method: postUploads2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: uploads
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/uploads/{uploadId}
    method: getUpload2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: uploadId
        schema: string
        required: true
        description: Upload ID
        example: UPLOADID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/uploads/{uploadId}/content_parts
    method: putUploadContentParts2
    httpMethod: put
    tag: V2
    typeScriptTag: v2
    description: >-
      Upload a part of a multipart upload.

      Behaviour on completion depends on the endpoint that was used to initiate
      the upload.
    parameters:
      - name: uploadId
        schema: string
        required: true
        description: ''
        example: UPLOADID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{runnerSelector.deployment.userId}/deployments/{runnerSelector.deployment.id}/outputs
    method: postModelOutputs5
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Get predicted outputs from the model.
    parameters:
      - name: runnerSelectorDeploymentUserId
        schema: string
        required: true
        description: The user who owns the deployment. These live in the user/org account.
        example: RUNNERSELECTOR.DEPLOYMENT.USERID
      - name: runnerSelectorDeploymentId
        schema: string
        required: true
        description: An id for this configured deployment.
        example: RUNNERSELECTOR.DEPLOYMENT.ID
      - name: userAppId
        schema: object
        description: ''
      - name: modelId
        schema: string
        description: ''
      - name: versionId
        schema: string
        description: ''
      - name: inputs
        schema: array
        description: ''
      - name: model
        schema: object
        description: ''
      - name: runnerSelector
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}
    method: getUser
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get user information
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps
    method: listApps
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the apps.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars
      - name: sortAscending
        schema: boolean
        required: false
        description: >-
          Sorting options:

          Whether to sort in ascending order. If false, will order in descending
          order.
      - name: sortByName
        schema: boolean
        required: false
        description: Whether to order by the name
      - name: sortByModifiedAt
        schema: boolean
        required: false
        description: |-
          Whether to order by the modified_at time.
          If none of the sort options is set to true, will sort by modified_at.
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: Whether to order by the created_at time.
      - name: sortByStarCount
        schema: boolean
        required: false
        description: Whether to order by the number of users stared the app
      - name: featuredOnly
        schema: boolean
        required: false
        description: |-
          Filtering options:
          If true, we only return apps that are handpicked by clarifai staff
      - name: starredOnly
        schema: boolean
        required: false
        description: If true, we only return apps that are starred by the requesting user
      - name: templateOnly
        schema: boolean
        required: false
        description: >-
          If true, we only return apps that are marked as a template by the app
          owner.
      - name: search
        schema: string
        required: false
        description: >-
          Searching options:

          Specify a search parameter in order to perform keyword search on the

          following fields of the application:
            - id
            - name
            - description
            - notes
            - user_id (unless user_app_id.user_id is already set)

          Keywords are both normalized for search (so searching for "satisfy"
          matches "satisfied")

          and used for partial prefix-matching (so searching for "clari" matches
          "clarifai").


          NOTE: Both the list of fields searched and the exact keyword matching

          rules are subject to change and not guaranteed to be
          backwards-compatible.
      - name: query
        schema: string
        required: false
        description: >-
          Query various text fields (id, name, description, and notes) that can
          contain the words in the query string

          Deprecated: use search instead.
      - name: name
        schema: string
        required: false
        description: >-
          Filter by the id, name and notes of the app. This supports wilcard
          queries like "gen*" to match "general" as an example.

          Deprecated: use search instead.
      - name: id
        schema: string
        required: false
        description: >-
          Filter by the user-unique-id of the app. This supports wilcard queries
          like "gen*" to match "general" as an example.

          Deprecated: use search instead.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps
    method: patchApps
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more apps.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppId
        schema: object
        description: ''
      - name: apps
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
      - name: metadataAction
        schema: object
        description: ''
      - name: reindex
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps
    method: postApps
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: >-
      Add a app to an app.

      This needs to load the default workflow to make a copy, validating all the
      models in it, and

      then writing the new workflow back to this new app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppId
        schema: object
        description: ''
      - name: apps
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/ids
    method: patchAppsIds
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch apps ids.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/searches
    method: postAppsSearches
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Search over the applications to find one or more you're looking for.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppId
        schema: object
        description: ''
      - name: appQuery
        schema: object
        description: ''
      - name: pagination
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}
    method: deleteApp
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: |-
      Search over the apps to find one or more you're looking for.
      This leverage the "body" parameter because we also have page and
      per_page as url query param variables in this request.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}
    method: getApp
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific app from an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}
    method: patchApp
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: app
        schema: object
        description: ''
      - name: action
        schema: string
        description: ''
      - name: metadataAction
        schema: object
        description: ''
      - name: reindex
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/annotation_filters
    method: deleteAnnotationFilters
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete one or more annotation filters in a single request.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: annotationFilterIds
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/annotation_filters
    method: listAnnotationFilters
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the annotation filters.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/annotation_filters
    method: patchAnnotationFilters
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more annotation filters.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: annotationFilters
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/annotation_filters
    method: postAnnotationFilters
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Add annotation filters.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: annotationFilters
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/annotation_filters/{annotationFilterId}
    method: getAnnotationFilter
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific annotation filter.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: annotationFilterId
        schema: string
        required: true
        description: Identify annotation filter by id.
        example: ANNOTATIONFILTERID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/annotations
    method: deleteAnnotations3
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete multiple annotations in one request.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
      - name: inputIds
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/annotations
    method: listAnnotations
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the annotation.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: ids
        schema: array
        required: false
        description: List annotations for these IDs
      - name: inputIds
        schema: array
        required: false
        description: >-
          List annotations for these Input IDs

          Note that 'ids' are optional but if the are provided the number and
          order in

          'ids' and 'input_ids' should match

          If you do not specify 'ids' all the annotations for 'input_ids' are
          returned

          If a you do not specify both 'input_ids' and 'ids' all the annotations
          in the app are returned
      - name: userIds
        schema: array
        required: false
        description: >-
          Only return the annotations that has one of these user IDs,
          effectively operating as an

          OR among them to filter down the results.

          If model_version_ids are also provided these user_ids are OR'd with
          them as well since

          annotations are either provided by users or model versions and we want
          the union of any

          provided user or model version annotations in the results of
          ListAnnotations request.

          If no user_ids are provided then annotations from all users are
          returned.
      - name: modelVersionIds
        schema: array
        required: false
        description: >-
          Only return the annotations that has one of these model version IDs,
          effectively operating as an

          OR among them to filter down the results.

          If user_ids are also provided these model_versions_ids are OR'd with
          them as well since

          annotations are either provided by users or model versions and we want
          the union of any

          provided user or model version annotations in the results of
          ListAnnotations request.

          If no model_version_ids are provided then annotations from all model
          versions are returned.
      - name: listAllAnnotations
        schema: boolean
        required: false
        description: |-
          Set this flag to list both trusted and not trusted annotations
          by default it's listing only trusted annotations
      - name: returnModelOutput
        schema: boolean
        required: false
        description: >-
          Set this flag to return the model output for model annotations in the
          response.
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: taskId
        schema: string
        required: false
        description: Flag to filter annotations by task_id
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/annotations
    method: patchAnnotations
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more annotations.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: annotations
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
      - name: deleteIfEmptyData
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/annotations
    method: postAnnotations
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Post annotations.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: annotations
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/annotations/searches
    method: patchAnnotationsSearches
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch saved annotations searches by ids.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: searches
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/annotations/searches
    method: postAnnotationsSearches
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Execute a search over annotations
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: searches
        schema: array
        description: ''
      - name: pagination
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/annotations/searches/metrics
    method: listAnnotationSearchMetrics
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List the evaluation results between two search requests
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/annotations/searches/metrics
    method: postAnnotationSearchMetrics
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Evaluate the results of two search requests
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: id
        schema: string
        description: ''
      - name: groundTruth
        schema: object
        description: ''
      - name: searchToEval
        schema: object
        description: ''
      - name: data
        schema: object
        description: ''
      - name: evaluationType
        schema: string
        description: ''
        default: Undefined
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/annotations/searches/metrics/{id}
    method: deleteAnnotationSearchMetrics
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: DeleteAnnotationSearchMetrics
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/annotations/searches/metrics/{id}
    method: getAnnotationSearchMetrics
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get the evaluation results between two search requests
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: id
        schema: string
        required: true
        description: Unique custom facing id that identifies the eval to get
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/annotations/workers
    method: listAnnotationWorkers
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: |-
      ListAnnotationWorkers lists users, models, and workflows (collectively
      known as "workers") that have added annotations to the application.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response.

          Currently supported: all, names
      - name: trustedOnly
        schema: boolean
        required: false
        description: >-
          (optional URL parameter) Only list workers that have created trusted
          annotations.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/bulk_operations
    method: deleteBulkOperations
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: delete one or more terminated bulk operations
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/bulk_operations
    method: listBulkOperations
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the bulk operations
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/bulk_operations
    method: cancelBulkOperations
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Cancel one or more bulk operations
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/bulk_operations
    method: postBulkOperations
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: >-
      Perform bulk operations on a list of inputs based on input source.

      Operation include add, update, delete of concepts, metadata and geo data.

      This is an Asynchronous process. Use ListBulkOperations or
      GetBulkOperation to check the status.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: bulkOperations
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/bulk_operations/{id}
    method: getBulkOperation
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get the bulk operation details by ID
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: id
        schema: string
        required: true
        description: The bulk operation id
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/collaborators
    method: deleteCollaborators
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete existing collaborators.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: collaboratorIds
        schema: array
        description: ''
      - name: userEmails
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/collaborators
    method: listCollaborators
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: owner list users who the app is shared with
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: listAllCollaborators
        schema: boolean
        required: false
        description: |-
          Set this flag to list both deleted and not deleted collaborators
          by default it's listing only not deleted collaborators
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/collaborators
    method: patchCollaborators
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch existing collaborators.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: collaborators
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/collaborators
    method: postCollaborators
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: add collaborators to an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: collaborators
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/collectors
    method: deleteCollectors
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: >-
      Delete multiple collectors in one request.

      This call is asynchronous. Use DeleteCollector if you want a synchronous
      version.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
      - name: deleteAll
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/collectors
    method: listCollectors
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the collectors.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: Response with multiple Collectors.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/collectors
    method: patchCollectors
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more collectors.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: collectors
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: Response with multiple Collectors.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/collectors
    method: postCollectors
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: >-
      Add a list of Collectors to an app.

      In the handler of this endpoint we also check for all the scopes of the 
      POST /inputs

      endpoint.

      Those current scopes are listed here as a hard requirement.

      They are needed when adding the collectors just so we now that you have
      permission with

      that key at least to do the writing to this app with POST /inputs.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: collectors
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: Response with multiple Collectors.
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/collectors/{collectorId}
    method: getCollector
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific collector from an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: collectorId
        schema: string
        required: true
        description: ''
        example: COLLECTORID
    responses:
      - statusCode: '200'
        description: Response with a single Collector.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/concepts
    method: listConcepts
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the concepts.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: id
        schema: string
        required: false
        description: Fuzzy match on concept ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/concepts
    method: patchConcepts
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more concepts.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: concepts
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/concepts
    method: postConcepts
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Add a concept to an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: concepts
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/concepts/knowledge_graphs
    method: listKnowledgeGraphs
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all domain graphs.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/concepts/knowledge_graphs
    method: postKnowledgeGraphs
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Post domain graphs.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: knowledgeGraphs
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/concepts/mappings/jobs
    method: postConceptMappingJobs
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Start concept mapping jobs.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: conceptMappingJobs
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/concepts/relations
    method: listConceptRelations2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: >-
      List concept relations between concepts in the platform.

      MUST be above ListConcepts so that if concept_id is empty this will still
      match

      /concepts/relations to list all the concept relations in the app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: conceptId
        schema: string
        required: false
        description: >-
          The subject concept id in your app to get all the relationships for.

          Leave as an empty string (GET /concepts/relations) to list ALL the
          relations in the app.


          When listing all the relations it will only return one direction of
          the relationship

          with the predicate acting on the subject and not the inverse like is
          done when providing a

          concept_id so that we can return a reliable page size always.


          When providing a concept_id, if a hyponym is present in the DB such
          as:

          'honey' (https://docs.clarifai.com/, 'hyponym' (predicate for "is a
          kind of"), 'food' (https://docs.clarifai.com/

          then you can list the concept relations for 'honey' and get hyponym
          predicate with 'food'

          object.

          But you can also list the concept relations for 'food' and it will
          return the same hyponym

          relationship with 'honey' as object and 'hypernym' as predicate.

          Synonyms by nature are symmetrical relationships so either side can be
          the concept_id (https://docs.clarifai.com/

          when listing the relations.
      - name: predicate
        schema: string
        required: false
        description: |-
          If predicate is provided then only list relations with that predicate.

          Note that if no subject is set in concept_id and predicate is set to
          'hypernym', then it will return any stored hyponyms as hypernyms with
          just the subject and object swapped since they are reversed relations.

          Valid predicates are:
          - 'hypernym'
          - 'hyponym'
          - 'synonym'
      - name: knowledgeGraphId
        schema: string
        required: false
        description: >-
          If knowledge_graph_id is provided then just list relations from that
          knowledge graph.

          If not provided then list relations from all knowledge graphs
          including the global one for this

          app one (ie. knowledge_graph "") and any specific ones in the app.
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/concepts/searches
    method: postConceptsSearches
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: |-
      Search over the concepts to find one or more you're looking for.
      This leverage the "body" parameter because we also have page and
      per_page as url query param variables in this request.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: conceptQuery
        schema: object
        description: ''
      - name: extraInfo
        schema: object
        description: ''
      - name: pagination
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/concepts/status
    method: getConceptCounts
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the concepts with their positive and negative counts
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/concepts/{conceptId}
    method: getConcept
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific concept from an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: conceptId
        schema: string
        required: true
        description: The concept's id.
        example: CONCEPTID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/concepts/{conceptId}/languages
    method: listConceptLanguages
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List the concept in all the translated languages.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: conceptId
        schema: string
        required: true
        description: ''
        example: CONCEPTID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/concepts/{conceptId}/languages
    method: patchConceptLanguages
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: >-
      Patch the name for a given language names by passing in a list of concepts
      with the new names

      for the languages.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: conceptId
        schema: string
        required: true
        description: ''
        example: CONCEPTID
      - name: userAppId
        schema: object
        description: ''
      - name: conceptLanguages
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/concepts/{conceptId}/languages
    method: postConceptLanguages
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Add a new translation for this concept.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: conceptId
        schema: string
        required: true
        description: ''
        example: CONCEPTID
      - name: userAppId
        schema: object
        description: ''
      - name: conceptLanguages
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/concepts/{conceptId}/languages/{language}
    method: getConceptLanguage
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific concept from an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: conceptId
        schema: string
        required: true
        description: ''
        example: CONCEPTID
      - name: language
        schema: string
        required: true
        description: This is the language identifier.
        example: LANGUAGE
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/concepts/{conceptId}/relations
    method: deleteConceptRelations
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: >-
      Post concept relations to create relations between concepts in the
      platform.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: conceptId
        schema: string
        required: true
        description: The concept to delete relationship for.
        example: CONCEPTID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/concepts/{conceptId}/relations
    method: listConceptRelations
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: >-
      List concept relations between concepts in the platform.

      MUST be above ListConcepts so that if concept_id is empty this will still
      match

      /concepts/relations to list all the concept relations in the app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: conceptId
        schema: string
        required: true
        description: >-
          The subject concept id in your app to get all the relationships for.

          Leave as an empty string (GET /concepts/relations) to list ALL the
          relations in the app.


          When listing all the relations it will only return one direction of
          the relationship

          with the predicate acting on the subject and not the inverse like is
          done when providing a

          concept_id so that we can return a reliable page size always.


          When providing a concept_id, if a hyponym is present in the DB such
          as:

          'honey' (https://docs.clarifai.com/, 'hyponym' (predicate for "is a
          kind of"), 'food' (https://docs.clarifai.com/

          then you can list the concept relations for 'honey' and get hyponym
          predicate with 'food'

          object.

          But you can also list the concept relations for 'food' and it will
          return the same hyponym

          relationship with 'honey' as object and 'hypernym' as predicate.

          Synonyms by nature are symmetrical relationships so either side can be
          the concept_id (https://docs.clarifai.com/

          when listing the relations.
        example: CONCEPTID
      - name: predicate
        schema: string
        required: false
        description: |-
          If predicate is provided then only list relations with that predicate.

          Note that if no subject is set in concept_id and predicate is set to
          'hypernym', then it will return any stored hyponyms as hypernyms with
          just the subject and object swapped since they are reversed relations.

          Valid predicates are:
          - 'hypernym'
          - 'hyponym'
          - 'synonym'
      - name: knowledgeGraphId
        schema: string
        required: false
        description: >-
          If knowledge_graph_id is provided then just list relations from that
          knowledge graph.

          If not provided then list relations from all knowledge graphs
          including the global one for this

          app one (ie. knowledge_graph "") and any specific ones in the app.
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/concepts/{conceptId}/relations
    method: postConceptRelations
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: >-
      Post concept relations to create relations between concepts in the
      platform.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: conceptId
        schema: string
        required: true
        description: The subject concept id you're going to add relations for.
        example: CONCEPTID
      - name: userAppId
        schema: object
        description: ''
      - name: conceptRelations
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/datasets
    method: deleteDatasets
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete one or more datasets in a single request.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: datasetIds
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/datasets
    method: listDatasets
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the datasets.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: additionalFields
        schema: array
        required: false
        description: ''
      - name: sortAscending
        schema: boolean
        required: false
        description: >-
          Sorting options:

          Whether to sort in ascending order. If false, will order in descending
          order.
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: Whether to order by the created_at time.
      - name: sortByStarCount
        schema: boolean
        required: false
        description: Whether to order by the number of users stared the app
      - name: sortByModifiedAt
        schema: boolean
        required: false
        description: If neither sort option is set to true, will sort by modified_at.
      - name: sortById
        schema: boolean
        required: false
        description: Whether to order by the external id
      - name: starredOnly
        schema: boolean
        required: false
        description: 'Filtering options:'
      - name: bookmark
        schema: boolean
        required: false
        description: >-
          Filter datasets by bookmark. If set, only return bookmarked datasets.
          Otherwise none bookmarked datasets only.
      - name: search
        schema: string
        required: false
        description: >-
          Searching options:

          Specify a search parameter in order to perform keyword search on the

          following fields of the dataset:
            - id
            - description
            - notes
            - user_id (unless user_app_id.user_id is already set)

          Keywords are both normalized for search (so searching for "satisfy"
          matches "satisfied")

          and used for partial prefix-matching (so searching for "clari" matches
          "clarifai").


          NOTE: Both the list of fields searched and the exact keyword matching

          rules are subject to change and not guaranteed to be
          backwards-compatible.
      - name: id
        schema: string
        required: false
        description: |-
          Fuzzy filter on dataset ID
          Deprecated: use search instead.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/datasets
    method: patchDatasets
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: |-
      Patch one or more datasets.
      The process is atomic, i.e. either all or no datasets are patched.
      If there is an error for one dataset,
      the process will stop, revert the transaction and return the error.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: datasets
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/datasets
    method: postDatasets
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: |-
      Add datasets to an app.
      The process is atomic, i.e. either all or no datasets are added.
      If there is an error for one dataset,
      the process will stop, revert the transaction and return the error.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: datasets
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/datasets/{datasetId}
    method: getDataset
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific dataset.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: additionalFields
        schema: array
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/datasets/{datasetId}/inputs
    method: deleteDatasetInputs
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete one or more dataset inputs in a single request.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: userAppId
        schema: object
        description: ''
      - name: inputIds
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/datasets/{datasetId}/inputs
    method: listDatasetInputs
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the dataset inputs in a dataset.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/datasets/{datasetId}/inputs
    method: postDatasetInputs
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: |-
      Add dataset inputs to a dataset.
      The process is not atomic, i.e. if there are errors with some dataset
      inputs, others might still be added. The response reports
        - SUCCESS if all dataset inputs were added,
        - MIXED_STATUS if only some dataset inputs were added, and
        - FAILURE if no dataset inputs were added.
      Each individual dataset input in the response has the status set to
      indicate if it was successful or if there was an error.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: userAppId
        schema: object
        description: ''
      - name: datasetInputs
        schema: array
        description: ''
      - name: search
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/datasets/{datasetId}/inputs/{inputId}
    method: getDatasetInput
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific dataset input.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: inputId
        schema: string
        required: true
        description: Identify dataset input by id.
        example: INPUTID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/datasets/{datasetId}/versions
    method: deleteDatasetVersions
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete one or more dataset versions in a single request.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: userAppId
        schema: object
        description: ''
      - name: datasetVersionIds
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/datasets/{datasetId}/versions
    method: listDatasetVersions
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the dataset versions.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/datasets/{datasetId}/versions
    method: patchDatasetVersions
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more dataset versions.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: userAppId
        schema: object
        description: ''
      - name: datasetVersions
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/datasets/{datasetId}/versions
    method: postDatasetVersions
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Add dataset versions to a dataset.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: userAppId
        schema: object
        description: ''
      - name: datasetVersions
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/datasets/{datasetId}/versions/{datasetVersionId}
    method: getDatasetVersion
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific dataset version.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: datasetVersionId
        schema: string
        required: true
        description: Identify dataset version by id.
        example: DATASETVERSIONID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/datasets/{datasetId}/versions/{datasetVersionId}/exports
    method: putDatasetVersionExports
    httpMethod: put
    tag: V2
    typeScriptTag: v2
    description: Create export of a dataset version.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: datasetVersionId
        schema: string
        required: true
        description: Identify dataset version by id.
        example: DATASETVERSIONID
      - name: userAppId
        schema: object
        description: ''
      - name: exports
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/datasets/{datasetId}/versions/{datasetVersionId}/metrics
    method: listDatasetVersionMetricsGroups
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: datasetId
        schema: string
        required: true
        description: Identify dataset by id.
        example: DATASETID
      - name: datasetVersionId
        schema: string
        required: true
        description: Identify dataset version by id.
        example: DATASETVERSIONID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: parentPaths
        schema: array
        required: false
        description: >-
          Filter by parent path. Multiple parent paths are OR-ed. Empty list
          results in no filter.
      - name: types
        schema: array
        required: false
        description: >-
          Filter by parent type. Multiple types are OR-ed. Empty list results in
          no filter.

           - INPUT_TYPE: Group data examples by input type.
          Examples: images, videos, text, audio.
           - CONCEPT_ID: Group data examples by concept ID.
          Examples: inputs with cat concept, inputs with dog concept.
           - CONCEPTS_COUNT: Group data examples by concepts count.
          Examples: inputs with 20 concepts, inputs with 21 concepts.
           - BOUNDING_BOXES_COUNT: Group data examples by bounding boxes count.
          Examples: inputs with 20 bounding boxes, inputs with 21 bounding
          boxes.
           - POLYGONS_COUNT: Group data examples by polygons count.
          Examples: inputs with 20 polygons, inputs with 21 polygons.
           - POINTS_COUNT: Group data examples by points count.
          Examples: inputs with 20 points, inputs with 21 points.
           - MASKS_COUNT: Group data examples by masks count.
          Examples: inputs with 20 masks, inputs with 21 masks.
           - PIXELS_COUNT: Group data examples by pixels count.
          In order to reduce the number of groups, we use bins.

          Examples for bin size = 400: inputs with [200000, 200400) pixels,
          inputs with [200400, 200800) pixels.
           - ASPECT_RATIO: Group data examples by aspect ratio.
          In order to reduce the number of groups, we use bins.

          Examples for bin size = 0.1: inputs with [0.5, 0.6) aspect ratio,
          inputs with [0.6, 0.7) aspect ratio.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/duplications
    method: postAppDuplications
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: |-
      PostAppDuplications starts async app duplication jobs which copy resources
      (inputs, annotations, models etc) from one application to another. It can
      also create the destination application if it does not exist, with fields
      (description, metadata etc) copied from the source application.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: appDuplications
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/evaluations
    method: listEvaluations
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: sortAscending
        schema: boolean
        required: false
        description: If true, sort in ascending order, otherwise sort in descending order.
      - name: sortByAppId
        schema: boolean
        required: false
        description: Whether to order by application id
      - name: sortByRocAuc
        schema: boolean
        required: false
        description: Whether to order by eval metric summary.macro_avg_roc_auc
      - name: sortByF1
        schema: boolean
        required: false
        description: Whether to order by eval metric summary.f1
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: Whether to order by when the metric was created
      - name: sortByMeanAvgPrecision
        schema: boolean
        required: false
        description: Whether to order by eval metric summary.mean_avg_precision_iou_50
      - name: sortByPrecision
        schema: boolean
        required: false
        description: Whether to order by eval metric summary.macro_avg_precision
      - name: sortByRecall
        schema: boolean
        required: false
        description: Whether to order by eval metric summary.macro_avg_recall
      - name: sortByModelId
        schema: boolean
        required: false
        description: ''
      - name: sortByEvalDatasetId
        schema: boolean
        required: false
        description: ''
      - name: sortByTrainDatasetId
        schema: boolean
        required: false
        description: ''
      - name: modelTypeId
        schema: string
        required: false
        description: Filter on model type id
      - name: evalDatasetIds
        schema: array
        required: false
        description: >-
          Filter on dataset ID of the dataset version specified in the metric
          version
      - name: trainDatasetIds
        schema: array
        required: false
        description: >-
          Filter on dataset ID of the dataset version specified by the model
          version
      - name: conceptIds
        schema: array
        required: false
        description: Filter on concept IDs specified in the modele version's output_info
      - name: showFailedMetrics
        schema: boolean
        required: false
        description: Whether to show failed metrics, defaults to false
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/evaluations
    method: postEvaluations
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: evalMetrics
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/evaluations/{evaluationId}
    method: getEvaluation
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: evaluationId
        schema: string
        required: true
        description: ''
        example: EVALUATIONID
      - name: fieldsConfusionMatrix
        schema: boolean
        required: false
        description: ''
      - name: fieldsCooccurrenceMatrix
        schema: boolean
        required: false
        description: ''
      - name: fieldsLabelCounts
        schema: boolean
        required: false
        description: ''
      - name: fieldsBinaryMetrics
        schema: boolean
        required: false
        description: ''
      - name: fieldsTestSet
        schema: boolean
        required: false
        description: ''
      - name: fieldsMetricsByArea
        schema: boolean
        required: false
        description: ''
      - name: fieldsMetricsByClass
        schema: boolean
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs
    method: deleteInputs
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: |-
      Delete multiple inputs in one request.
      This call is asynchronous.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs
    method: listInputs
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the inputs.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: statusCode
        schema: string
        required: false
        description: |-
          Status code from internal codes.

           - ZERO: to be revised and greatly expanded
           - SUCCESS: Generic
           - MOVED: Resource moved. Respond with Http status 307 and add new Location header to response
           - TEAPOT: SUCCESS_WARNING_API_DEPRECATED = 10001;
          SUCCESS_WARNING_CLIENT_DEPRECATED = 10002;
           - CONN_ACCOUNT_ISSUES: Clarifai Connection Codes: 11xxx

          expired cc, still in trial, feature not supported in your tier
           - CONN_TOKEN_INVALID: invalid auth token used. Deprecated: we should return CONN_KEY_INVALID instead now in all cases.
           - CONN_CREDENTIALS_INVALID: invalid auth credentials
           - CONN_EXCEED_HOURLY_LIMIT: throttle hourly limit exceeded
           - CONN_EXCEED_MONTHLY_LIMIT: throttle monthly limit exceeded
           - CONN_THROTTLED: throttler and billing stuff
           - CONN_EXCEEDS_LIMITS: throttler and billing stuff
           - CONN_INSUFFICIENT_SCOPES: api key has insufficient permissions
           - CONN_KEY_INVALID: api key is invalid
           - CONN_KEY_NOT_FOUND: api key not found
           - CONN_BAD_REQUEST_FORMAT: multipart form parsing, broken json, etc
           - CONN_DOES_NOT_EXIST: when path is bad
           - CONN_INVALID_REQUEST: something wrong with a header
           - CONN_METHOD_NOT_ALLOWED: when a request method is not allowed
           - CONN_NO_GDPR_CONSENT: lack GDPR consent
           - CONN_AUTH_METHOD_DISABLED: authentication method is disabled
           - MODEL_TRAINED: Model/Custom Training related 20xxx

          Custom model has been already trained.
           - MODEL_TRAINING: Custom model is currently training.
           - MODEL_UNTRAINED: Custom model has not yet been trained.
           - MODEL_QUEUED_FOR_TRAINING: Custom model is currently in queue for training, waiting on assets to process first.
           - MODEL_TRAINING_FAILED: generic err msg for any type of model training err.
           - MODEL_TRAINING_NO_DATA: Custom model training had no data.  FIXME(https://docs.clarifai.com/: deprecate this. Use the 21106 + errStatusMsg
           - MODEL_TRAINING_NO_POSITIVES: Custom model training had no positive examples. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21106 + errStatusMsg
           - MODEL_TRAINING_ONE_VS_N_SINGLE_CLASS: Custom model training was ONE_VS_N but with a single class. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21106 + errStatusMsg
           - MODEL_TRAINING_TIMED_OUT: Training took longer than hard coded timeouts. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21106 + errStatusMsg
           - MODEL_TRAINING_WAITING_ERROR: Training got error waiting on asset pipeline to finish. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21106 + errStatusMsg
           - MODEL_TRAINING_UNKNOWN_ERROR: Training threw an unknown exception.
           - MODEL_TRAINING_MSG_REDELIVER: Training message was redelivered. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21106 + errStatusMsg
           - MODEL_TRAINING_INSUFFICIENT_DATA: Training got error due to insufficient labelled data. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21106 + errStatusMsg
           - MODEL_TRAINING_INVALID_PARAMS: FIXME(https://docs.clarifai.com/: deprecate this. Use the 21106 + errStatusMsg
           - MODEL_TRAINING_INVALID_DATA_TOLERANCE_EXCEEDED: Training is stopped because too much data was dropped. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21106 + errStatusMsg
           - MODEL_EVALUATION_TIMED_OUT: Evaluation took longer than hard coded timeouts. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21317 + errStatusMsg
           - MODEL_EVALUATION_WAITING_ERROR: Evaluation got error waiting on asset pipeline to finish.FIXME(https://docs.clarifai.com/: deprecate this. Use the 21317 + errStatusMsg
           - MODEL_EVALUATION_UNKNOWN_ERROR: EVALUATION THREW AN UNKNOWN EXCEPTION.
           - MODEL_EVALUATION_MSG_REDELIVER: Eval message was redelivered. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21317 + errStatusMsg
           - MODEL_EVALUATION_NEED_LABELS: Don't have enough concepts labelled to perform evaluation. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21317 + errStatusMsg
           - MODEL_EVALUATION_NEED_INPUTS: Don't have enough inputs per concept to perform evaluation. FIXME(https://docs.clarifai.com/: deprecate this. Use the 21317 + errStatusMsg
           - MODEL_EVALUATION_FAILED: Generic err code for eval failure.
           - MODEL_DEPLOYMENT_FAILED: Used when inference coordinator failed to deploy spire and throws an error
           - MODEL_DEPLOYING: Used when calling the inference coordinator to deploy a spire
           - MODEL_QUEUED_FOR_DEPLOYMENT: Used when training is completed
           - MODEL_NOT_DEPLOYED: Used when model spire deployment is manually taken down or due to inactivity
           - MODEL_REFERENCE_INVALID_ARGUMENT: Used when a model reference field is not set properly
           - MODEL_EXAMPLE_INPUT_INVALID_ARGUMENT: Used when a model example input field is not set properly
           - MODEL_EXPORTED: Model Export status codes
           - WORKFLOW_NO_MATCHING_INPUT: specified model input not in workflow
           - WORKFLOW_REQUIRE_TRAINED_MODEL: specified model must be trained
           - WORKFLOW_INVALID_ARGUMENT: error in the request somewhere
           - WORKFLOW_INVALID_REQUEST: error in the request somewhere
           - CONCEPT_MODIFY_SUCCESS: Concept related 23xxx
           - ANNOTATION_SUCCESS: Annotation related 24xxx
           - METADATA_INVALID_PATCH_ARGUMENTS: Metadata related 249xx
           - TRAINER_JOB_STATE_NONE: Training service related 25xxx
           - DATA_DUMP_SUCCESS: Data Dump related 251xx
           - DATA_DUMP_NO_DATA: DEPRECATED: Not used anymore. Now for an empty data dump, DATA_DUMP_SUCCESS is returned. To detect an empty data dump, check if the inptus count is 0.
           - APP_DUPLICATION_SUCCESS: Duplicate related 252xx
           - MODULE_DOES_NOT_EXIST: Module related codes 253xx
           - BULK_OPERATION_SUCCESS: Bulk Operation related codes 254xx
           - RUNNER_DOES_NOT_EXIST: Runner related codes 256xx
           - INPUT_DOWNLOAD_SUCCESS: Input:Image related 30xxx
           - INPUT_DOWNLOAD_PENDING: when things are async, this is the default status.
           - INPUT_DOWNLOAD_FAILED: any type of error downloading and processing
           - INPUT_VIDEO_DOWNLOAD_SUCCESS: Input:Video related 31xxx -- Deprecated
           - INPUT_WRITES_DISABLED_FOR_MAINTENANCE: deprecate this one. Use REQUEST_DISABLED_FOR_MAINTENANCE
           - PREDICT_INVALID_REQUEST: API formatting issues 4000x
           - DATABASE_DUPLICATE_KEY: Other related 400xx
           - EXTERNAL_CONNECTION_ERROR: could not connect to external services
           - QUEUE_CONN_ERROR: Queue related errors 41xxx
           - SQS_OVERLIMIT: SQS related errors 411xx
           - SEARCH_INTERNAL_FAILURE: Search related errors 43xxxx
           - EVALUATION_QUEUED: Workflow evaluation err code
           - STRIPE_EVENT_ERROR: Stripe 44xxx
           - CACHE_MISS: Redis/Cache 45xxx
           - SIGNUP_EVENT_ERROR: Sift Science 46xxx
           - APP_COUNT_INVALID_MESSAGE: Application counts related errors 470xx
           - MP_DOWNLOAD_ERROR: Media processor related errors 471xx -- DEPRECATED
           - DATATIER_CONN_ERROR: DataTier related error 472xx
           - USER_CONSENT_FACE: User legal consent stauts related 50xxx
           - WORKER_MISSING: Workers 51xxx
           - COLLECTOR_MISSING: Collectors 52xxx
           - SSO_IDENTITY_PROVIDER_DOES_NOT_EXIST: SSO 53xxx
           - TASK_IN_PROGRESS: Tasks 54xxx
          The task was created.
           - TASK_DONE: The task is completed.
           - TASK_WONT_DO: The task is marked as abandoned.
           - TASK_FAILED: An error occurred during add-task-annotations or add-auto-annotations pipeline.
           - TASK_IDLE: When an Auto Annotation task job has finished processing its last batch and is waiting for more dataset assets.
           - TASK_CONFLICT: The task operation is in conflict with the current state of the server.
           - TASK_NOT_IMPLEMENTED: Certain task-related scenarios are not implemented.
           - TASK_MISSING: Task was not found.
           - TASK_PERMISSION_DENIED: Not allowed to perform a task-related action.
           - LABEL_ORDER_PENDING: Label Order Related Status Code 55xxx
           - LICENSE_ACTIVE: License Related Status Code 600xx
           - LICENSE_DELETED: hidden state not reflected to users
           - PASSWORD_VALIDATION_SUCCESS: Password Related Status Code
           - FEATUREFLAG_CONFIG_NOT_FOUND: Feature flags status code
           - MAINTENANCE_SUCCESS: Maintenance status code
           - DATASET_VERSION_PENDING: Datasets 64xxx
          The dataset version is pending to be processed.
           - DATASET_VERSION_IN_PROGRESS: The dataset version is currently being processed.
           - DATASET_VERSION_READY: The dataset version is ready to be used.
           - DATASET_VERSION_FAILURE: An error occurred during the dataset version processing.
           - DATASET_VERSION_UNEXPECTED_ERROR: An unexpected error occurred during the dataset version processing.
           - DATASET_VERSION_CONFLICT: An alteration to dataset version would create a conflict
           - DATASET_INPUT_SUCCESS: The dataset input was successfully added.
           - DATASET_INPUT_DUPLICATE: The dataset input is a duplicate.
          Deprecated: Unused.
           - DATASET_VERSION_EXPORT_SUCCESS: The dataset version export is completed.
           - DATASET_VERSION_EXPORT_PENDING: The dataset version is pending to be exported.
           - DATASET_VERSION_EXPORT_FAILED: An error occurred during the dataset version export.
           - DATASET_VERSION_EXPORT_IN_PROGRESS: The dataset version is currently being exported.
           - DATASET_VERSION_EXPORT_UNEXPECTED_ERROR: An unexpected error occurred during the dataset version export.
           - JOB_QUEUED: Generic Job status codes
           - AUTH_MISSING_IDP_ASSOC: auth issues

          TODO: Knowledge graph related 80xxx
           - UPLOAD_IN_PROGRESS: Multipart uploading status codes
           - BILLING_INVALID_INFO: Billing related issues: 69xxx
           - INTERNAL_SERVER_ISSUE: Internal issues: 98xxx
           - CONN_UNCATEGORIZED: Uncategorized: 99xxx: move off as soon as known
           - BAD_REQUEST: Deprecated: migrate off to one of the internal issues
           - SERVER_ERROR: Deprecated: migrate off to one of the internal issues
        default: ZERO
      - name: statusDescription
        schema: string
        required: false
        description: A short description of the error.
      - name: statusDetails
        schema: string
        required: false
        description: |-
          More details of the given error.
          These details may be exposed to non-technical users.
          For technical details, try to use developer_notes field.
      - name: statusStackTrace
        schema: array
        required: false
        description: |-
          For some environment we may return a stack trace to help debug
          any issues.
      - name: statusPercentCompleted
        schema: integer
        required: false
        description: specifically for long running jobs
      - name: statusTimeRemaining
        schema: integer
        required: false
        description: if status is pending, how much time is remaining (in seconds)
      - name: statusReqId
        schema: string
        required: false
        description: A request ID may be present, to help monitoring and tracking requests
      - name: statusInternalDetails
        schema: string
        required: false
        description: >-
          Internal Annotation (do not set in production, for internal Clarifai
          use only).
      - name: statusRedirectInfoUrl
        schema: string
        required: false
        description: New location for the resource. Used to set response Location header.
      - name: statusRedirectInfoResourceType
        schema: string
        required: false
        description: Resource type
      - name: statusRedirectInfoOldResourceId
        schema: string
        required: false
        description: Old resource id
      - name: statusRedirectInfoNewResourceId
        schema: string
        required: false
        description: New resource id
      - name: statusDeveloperNotes
        schema: string
        required: false
        description: >-
          Notes for developer.

          These notes are rather technical details for developers how to
          interpret the status,

          e.g. why an error occurred and how to avoid getting the error.
      - name: ids
        schema: array
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs
    method: patchInputs
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more inputs.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: inputs
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs
    method: postInputs
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: |-
      Add 1 or more input to an app.
      The actual inputs processing is asynchronous.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: inputs
        schema: array
        description: ''
      - name: inputsAddJobId
        schema: string
        description: ''
      - name: inputIdConflictResolution
        schema: string
        description: ''
        default: INPUT_ID_CONFLICT_RESOLUTION_NOT_SET
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs/annotations
    method: deleteAnnotations
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete multiple annotations in one request.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
      - name: inputIds
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs/data_sources
    method: postInputsDataSources
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: >-
      Initiates retrieval of inputs from cloud storage from a user provided data
      source.

      Will create and return an inputs-add-job for tracking progress.

      Archives will be extracted and their contents will be processed as inputs.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: dataSources
        schema: array
        description: ''
      - name: callBackUrl
        schema: string
        description: ''
      - name: appPat
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs/jobs/add
    method: listInputsAddJobs
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the inputs add jobs
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs/jobs/add/{id}
    method: getInputsAddJob
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get the input add job details by ID
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: id
        schema: string
        required: true
        description: id of add inputs job
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs/jobs/add/{id}
    method: cancelInputsAddJob
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: cancel the input add job by ID
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: id
        schema: string
        required: true
        description: id of add inputs job to be cancelled
        example: ID
      - name: userAppId
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs/jobs/extraction
    method: listInputsExtractionJobs
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the input extraction jobs
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs/jobs/extraction
    method: cancelInputsExtractionJobs
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs/jobs/extraction/{inputsExtractionJobId}
    method: getInputsExtractionJob
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get the input extraction job details by ID
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: inputsExtractionJobId
        schema: string
        required: true
        description: ''
        example: INPUTSEXTRACTIONJOBID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs/searches
    method: patchInputsSearches
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch saved inputs searches by ids.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: searches
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs/searches
    method: postInputsSearches
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Execute a search over inputs
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: searches
        schema: array
        description: ''
      - name: pagination
        schema: object
        description: ''
      - name: onlyCount
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs/status
    method: getInputCount
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get input count per status.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs/stream
    method: streamInputs
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Streams all the inputs starting from oldest assets.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 20.
      - name: lastId
        schema: string
        required: false
        description: ''
      - name: orderById
        schema: boolean
        required: false
        description: |-
          By default, the endpoint return inputs by the time when it is added.
          If this is set to true, we will return inputs by id.
      - name: descending
        schema: boolean
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs/uploads
    method: postInputsUploads
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: |-
      Start uploading a file archive containing inputs.
      Will create and return an inputs-add-job for tracking progress.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: inputsUploads
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs/{inputId}
    method: deleteInput
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete a single input asynchronously.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: inputId
        schema: string
        required: true
        description: ''
        example: INPUTID
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs/{inputId}
    method: getInput
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific input from an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: inputId
        schema: string
        required: true
        description: ''
        example: INPUTID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs/{inputId}/annotations/{annotationId}
    method: deleteAnnotation
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete a single annotation.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: inputId
        schema: string
        required: true
        description: ''
        example: INPUTID
      - name: annotationId
        schema: string
        required: true
        description: ''
        example: ANNOTATIONID
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs/{inputId}/annotations/{annotationId}
    method: getAnnotation
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific annotation from an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: inputId
        schema: string
        required: true
        description: ''
        example: INPUTID
      - name: annotationId
        schema: string
        required: true
        description: ''
        example: ANNOTATIONID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/inputs/{inputId}/video_manifest
    method: getInputVideoManifest
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a video input manifest.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: inputId
        schema: string
        required: true
        description: ''
        example: INPUTID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/installed_module_versions
    method: deleteInstalledModuleVersions
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: >-
      Uninstall an installed module version which will deploy the specific
      ModuleVersion to the app

      in the url.

      This cleaned up any associated caller keys so needs the Keys_Delete scope.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/installed_module_versions
    method: listInstalledModuleVersions
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List installed modules vesrions for an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/installed_module_versions
    method: postInstalledModuleVersions
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: >-
      Install a new module version which will deploy the specific ModuleVersion
      to the app in the url.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: installedModuleVersions
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/installed_module_versions/{installedModuleVersionId}
    method: getInstalledModuleVersion
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get installed modules vesrions for an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: installedModuleVersionId
        schema: string
        required: true
        description: the ID to get of the install module version.
        example: INSTALLEDMODULEVERSIONID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/installed_module_versions/{installedModuleVersionId}/key
    method: postInstalledModuleVersionsKey
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: >-
      Assign a key that the caller owns to be used when accessing this installed
      module version

      If this endpoint is called with a different key then it overwrites what is
      there.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: installedModuleVersionId
        schema: string
        required: true
        description: >-
          the ID to get of the install module version.


          Note(https://docs.clarifai.com/: we don't provide a key to create
          since it's always deterministic.
           we'll create a PAT, owned by the caller with the scopes that the module requests.
           in the future if we want we can pass in a Key key = 3; field so that the caller
           can adjust the scopes, but for now that doesn't seem necessary.
        example: INSTALLEDMODULEVERSIONID
      - name: userAppId
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/keys
    method: listAppKeys
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List keys by app_id
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/label_orders
    method: deleteLabelOrders
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: |-
      Delete multiple label orders in one request.
      this do not change task status
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/label_orders
    method: listLabelOrders
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List label orders.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: Response with multiple label order.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/label_orders
    method: patchLabelOrders
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more label orders.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: labelOrders
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: Response with multiple label order.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/label_orders
    method: postLabelOrders
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Add Label orders.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: labelOrders
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: Response with multiple label order.
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/label_orders/{labelOrderId}
    method: getLabelOrder
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a label order.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: labelOrderId
        schema: string
        required: true
        description: ''
        example: LABELORDERID
    responses:
      - statusCode: '200'
        description: Response with a label order.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models
    method: deleteModels
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete multiple models in one request.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
      - name: deleteAll
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models
    method: listModels
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the models.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars, outputs, presets
      - name: sortAscending
        schema: boolean
        required: false
        description: >-
          Sorting options:

          Whether to sort in ascending order. If false, will order in descending
          order.
      - name: sortByName
        schema: boolean
        required: false
        description: Whether to order by the name
      - name: sortByNumInputs
        schema: boolean
        required: false
        description: Whether to order by the number of training inputs
      - name: sortByModifiedAt
        schema: boolean
        required: false
        description: |-
          Whether to order by the modified_at time of the latest model version.
          If none of the sort options is set to true, will sort by modified_at.
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: Whether to order by the created_at
      - name: sortByStarCount
        schema: boolean
        required: false
        description: Whether to order by count of stars
      - name: modelTypeId
        schema: string
        required: false
        description: >-
          Filtering options:

          Filter models by the specific model_type_id. See ListModelTypes for
          the list of ModelType.Id's

          supported.
      - name: trainedOnly
        schema: boolean
        required: false
        description: >-
          If true, we only return models that have the status MODEL_TRAINED,
          which includes non-trainable model types.
      - name: inputFields
        schema: array
        required: false
        description: >-
          The list of input fields to the model.

          For example, you can specify 'image', which will return models that
          make inferences on images like visual-classifier models.
      - name: outputFields
        schema: array
        required: false
        description: >-
          The list of output fields to the model.

          For example, you can specify 'regions[...].data.concepts', which will
          return visual-detector models.
      - name: license
        schema: string
        required: false
        description: Filter by the license of the model version
      - name: featuredOnly
        schema: boolean
        required: false
        description: If true, we only return models that are handpicked by clarifai staff
      - name: starredOnly
        schema: boolean
        required: false
        description: If true, we only return models that are starred by the requesting user
      - name: toolkits
        schema: array
        required: false
        description: List of toolkit tags to filter by
      - name: useCases
        schema: array
        required: false
        description: List of use_case tags to filter by
      - name: languages
        schema: array
        required: false
        description: List of language tags to filter by
      - name: dontFetchFromMain
        schema: boolean
        required: false
        description: >-
          Old API behavior resulted in returning clarifai main models when
          calling ListModels while scoped to an app. While we transition

          away from that, we can use this flag to not always fetch clarifai main
          models, unless that is the app we are explicitly listing for.
      - name: bookmark
        schema: boolean
        required: false
        description: >-
          Filter models by bookmark. If set, only return bookmarked models.
          Otherwise none bookmarked models only.

          Note: you can not filter `trained_only` and bookmark at the same time.

          When filter by bookmark, we will return trained and untrained models.
      - name: search
        schema: string
        required: false
        description: >-
          Searching options:

          Specify a search parameter in order to perform keyword search on the

          following fields of the model:
            - id
            - name
            - description
            - notes
            - user_id (unless user_app_id.user_id is already set)

          Keywords are both normalized for search (so searching for "satisfy"
          matches "satisfied")

          and used for partial prefix-matching (so searching for "clari" matches
          "clarifai").


          NOTE: Both the list of fields searched and the exact keyword matching

          rules are subject to change and not guaranteed to be
          backwards-compatible.
      - name: query
        schema: string
        required: false
        description: >-
          Query name, description and id fields, that can contain the words in
          the query string. Does NOT support wildcards - full words only.
          Supports operators "OR" and "-" as NOT.

          Deprecated: use search instead.
      - name: name
        schema: string
        required: false
        description: >-
          Filter by the description and id of the model. This supports wildcard
          queries like "gen*" to match "general" as an example.

          Deprecated: use search instead.
      - name: filterByUserId
        schema: boolean
        required: false
        description: >-
          Extends the name filter to include the user_id of the application
          owner that the model belongs to.

          Deprecated: use search instead of name.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models
    method: patchModels
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more models.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: models
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models
    method: postModels
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Add a models to an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: model
        schema: object
        description: ''
      - name: models
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/ids
    method: patchModelIds
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more models ids.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/searches
    method: postModelsSearches
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: |-
      Search over the models to find one or more you're looking for.
      This leverage the "body" parameter because we also have page and
      per_page as url query param variables in this request.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: modelQuery
        schema: object
        description: ''
      - name: pagination
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/types
    method: listModelTypes
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: >-
      List all the model types available in the platform.

      This MUST be above ListModels so that the /models/types endpoint takes
      precedence.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/types/{modelTypeId}
    method: getModelType
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific model type.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelTypeId
        schema: string
        required: true
        description: The specific ModelType.Id you want to retrieve.
        example: MODELTYPEID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}
    method: deleteModel
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete a single model.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}
    method: getModel
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific model from an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: false
        description: |-
          This is included so that we can re-use this request for multiple
          rpcs with and without the version_id.
      - name: language
        schema: string
        required: false
        description: ''
      - name: trainedBefore
        schema: boolean
        required: false
        description: ''
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars, outputs, presets
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/check_consents
    method: patchModelCheckConsents
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Update model check consents
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: the model id
        example: MODELID
      - name: userAppId
        schema: object
        description: ''
      - name: checkConsents
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/concepts
    method: listModelConcepts
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List models concepts.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: Model id
        example: MODELID
      - name: versionId
        schema: string
        required: false
        description: >-
          Model version Id. Optional, if not provided latest model version is
          used.
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: search
        schema: string
        required: false
        description: >-
          Searching options:

          Specify a search parameter in order to perform keyword search on the

          following fields of the concept:
            - id
            - name

          Keywords are used for partial prefix-matching (so searching for
          "larif" matches "clarifai").


          NOTE: Both the list of fields searched and the exact keyword matching

          rules are subject to change and not guaranteed to be
          backwards-compatible.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/inputs
    method: listModelInputs
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: 'Deprecated: Unmaintained and ideally replaced with usage of datasets'
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/languages
    method: patchModelLanguages
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Update model languages tags
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppId
        schema: object
        description: ''
      - name: languages
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/output_info
    method: getModelOutputInfo
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: |-
      Get a the output info for a given model_id or model_id/version_id
      combo.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: false
        description: |-
          This is included so that we can re-use this request for multiple
          rpcs with and without the version_id.
      - name: language
        schema: string
        required: false
        description: ''
      - name: trainedBefore
        schema: boolean
        required: false
        description: ''
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars, outputs, presets
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/outputs
    method: postModelOutputs3
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Get predicted outputs from the model.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppId
        schema: object
        description: ''
      - name: versionId
        schema: string
        description: ''
      - name: inputs
        schema: array
        description: ''
      - name: model
        schema: object
        description: ''
      - name: runnerSelector
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/outputs/generate
    method: generateModelOutputs2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: |-
      TODO(https://docs.clarifai.com/: will need to
      Single request but streaming resopnses.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppId
        schema: object
        description: ''
      - name: versionId
        schema: string
        description: ''
      - name: inputs
        schema: array
        description: ''
      - name: model
        schema: object
        description: ''
      - name: runnerSelector
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/publish
    method: postModelVersionsPublish
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: PostModelVersionsPublish
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppId
        schema: object
        description: ''
      - name: publications
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/references
    method: listModelReferences
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Lists model references tied to a particular model id.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: page
        schema: integer
        required: false
        description: Optional, defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: Optional, defaults to 128 references per page.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/toolkits
    method: patchModelToolkits
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Update model toolkits tags
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppId
        schema: object
        description: ''
      - name: toolkits
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/unpublish
    method: postModelVersionsUnPublish
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: PostModelVersionsUnPublish
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppId
        schema: object
        description: ''
      - name: publications
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/usecases
    method: patchModelUseCases
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Update model use_cases tags
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppId
        schema: object
        description: ''
      - name: usecases
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions
    method: listModelVersions
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the models.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: conceptIds
        schema: array
        required: false
        description: >-
          Filtering options:

          To list only the model versions that have these concept ids present in
          them.
      - name: trainedOnly
        schema: boolean
        required: false
        description: To list only the model versions that have been trained.
      - name: sortAscending
        schema: boolean
        required: false
        description: >-
          Sorting options:

          Whether to sort in ascending order. If false, will order in descending
          order.
      - name: sortByStatusCode
        schema: boolean
        required: false
        description: Whether to order by the status code
      - name: sortByNumInputs
        schema: boolean
        required: false
        description: Whether to order by the number of training inputs
      - name: sortByDescription
        schema: boolean
        required: false
        description: Whether to sort by the description
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: |-
          Whether to order by the created_at time
          If neither sort option is set to true, will sort by created_at.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions
    method: patchModelVersions
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: PatchModelVersions
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppId
        schema: object
        description: ''
      - name: modelVersions
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions
    method: postModelVersions
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Create a new model version to trigger training of the model.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: description
        schema: string
        description: ''
      - name: userAppId
        schema: object
        description: ''
      - name: modelVersions
        schema: array
        description: ''
      - name: evalInfo
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions/time_estimate
    method: postModelVersionsTrainingTimeEstimate
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: >-
      Get the training time estimate based off train request and estimated input
      count.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: userAppId
        schema: object
        description: ''
      - name: modelVersions
        schema: array
        description: ''
      - name: estimatedInputCount
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions/{modelVersionId}/evaluations
    method: listModelVersionEvaluations
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: |-
      Deprecated, use GetEvaluation instead
      List the evaluation metrics for a model version.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: modelVersionId
        schema: string
        required: true
        description: ''
        example: MODELVERSIONID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions/{modelVersionId}/evaluations
    method: postModelVersionEvaluations
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Deprecated, use PostEvaluations instead
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: modelVersionId
        schema: string
        required: true
        description: ''
        example: MODELVERSIONID
      - name: userAppId
        schema: object
        description: ''
      - name: evalMetrics
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions/{modelVersionId}/evaluations/{evaluationId}
    method: getModelVersionEvaluation
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: |-
      Deprecated, use GetEvaluation instead
      Get an evaluation metrics for a model version.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: modelVersionId
        schema: string
        required: true
        description: ''
        example: MODELVERSIONID
      - name: evaluationId
        schema: string
        required: true
        description: ''
        example: EVALUATIONID
      - name: fieldsConfusionMatrix
        schema: boolean
        required: false
        description: ''
      - name: fieldsCooccurrenceMatrix
        schema: boolean
        required: false
        description: ''
      - name: fieldsLabelCounts
        schema: boolean
        required: false
        description: ''
      - name: fieldsBinaryMetrics
        schema: boolean
        required: false
        description: ''
      - name: fieldsTestSet
        schema: boolean
        required: false
        description: ''
      - name: fieldsMetricsByArea
        schema: boolean
        required: false
        description: ''
      - name: fieldsMetricsByClass
        schema: boolean
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions/{modelVersionId}/input_examples
    method: listModelVersionInputExamples
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: ListModelVersionInputExamples
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: id of model the example belongs to
        example: MODELID
      - name: modelVersionId
        schema: string
        required: true
        description: specific version the example belongs to
        example: MODELVERSIONID
      - name: page
        schema: integer
        required: false
        description: Optional, defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: Optional, defaults to 128 references per page.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions/{modelVersionId}/input_examples/{exampleId}
    method: getModelVersionInputExample
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: GetModelVersionInputExample
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: id of model the example belongs to
        example: MODELID
      - name: modelVersionId
        schema: string
        required: true
        description: specific version the example belongs to
        example: MODELVERSIONID
      - name: exampleId
        schema: string
        required: true
        description: Id of example to fetch
        example: EXAMPLEID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions/{versionId}
    method: deleteModelVersion
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete a single model.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: ''
        example: VERSIONID
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions/{versionId}
    method: getModelVersion
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific model from an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: ''
        example: VERSIONID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions/{versionId}/concepts
    method: listModelConcepts2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List models concepts.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: Model id
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: >-
          Model version Id. Optional, if not provided latest model version is
          used.
        example: VERSIONID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: search
        schema: string
        required: false
        description: >-
          Searching options:

          Specify a search parameter in order to perform keyword search on the

          following fields of the concept:
            - id
            - name

          Keywords are used for partial prefix-matching (so searching for
          "larif" matches "clarifai").


          NOTE: Both the list of fields searched and the exact keyword matching

          rules are subject to change and not guaranteed to be
          backwards-compatible.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions/{versionId}/exports
    method: getModelVersionExport
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: GetModelVersionExport
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: ''
        example: VERSIONID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions/{versionId}/exports
    method: putModelVersionExports
    httpMethod: put
    tag: V2
    typeScriptTag: v2
    description: Export a model
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: ''
        example: VERSIONID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions/{versionId}/inputs
    method: listModelInputs3
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: 'Deprecated: Unmaintained and ideally replaced with usage of datasets'
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: ''
        example: VERSIONID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions/{versionId}/metrics
    method: getModelVersionMetrics
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: |-
      Deprecated: Use GetEvaluation instead
      Get the evaluation metrics for a model version.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: ''
        example: VERSIONID
      - name: fieldsConfusionMatrix
        schema: boolean
        required: false
        description: ''
      - name: fieldsCooccurrenceMatrix
        schema: boolean
        required: false
        description: ''
      - name: fieldsLabelCounts
        schema: boolean
        required: false
        description: ''
      - name: fieldsBinaryMetrics
        schema: boolean
        required: false
        description: ''
      - name: fieldsTestSet
        schema: boolean
        required: false
        description: ''
      - name: fieldsMetricsByArea
        schema: boolean
        required: false
        description: ''
      - name: fieldsMetricsByClass
        schema: boolean
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions/{versionId}/metrics
    method: postModelVersionMetrics
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: |-
      Deprecated, use PostEvaluations instead
      Run the evaluation metrics for a model version.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: ''
        example: VERSIONID
      - name: userAppId
        schema: object
        description: ''
      - name: testSearch
        schema: object
        description: ''
      - name: evalInfo
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions/{versionId}/output_info
    method: getModelOutputInfo3
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: |-
      Get a the output info for a given model_id or model_id/version_id
      combo.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: |-
          This is included so that we can re-use this request for multiple
          rpcs with and without the version_id.
        example: VERSIONID
      - name: language
        schema: string
        required: false
        description: ''
      - name: trainedBefore
        schema: boolean
        required: false
        description: ''
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars, outputs, presets
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions/{versionId}/outputs
    method: postModelOutputs
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Get predicted outputs from the model.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: ''
        example: VERSIONID
      - name: userAppId
        schema: object
        description: ''
      - name: inputs
        schema: array
        description: ''
      - name: model
        schema: object
        description: ''
      - name: runnerSelector
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/models/{modelId}/versions/{versionId}/outputs/generate
    method: generateModelOutputs
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: |-
      TODO(https://docs.clarifai.com/: will need to
      Single request but streaming resopnses.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: versionId
        schema: string
        required: true
        description: ''
        example: VERSIONID
      - name: userAppId
        schema: object
        description: ''
      - name: inputs
        schema: array
        description: ''
      - name: model
        schema: object
        description: ''
      - name: runnerSelector
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/modules
    method: deleteModules
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete multiple modules in one request.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/modules
    method: listModules
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the modules in community, by user or by app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: additionalFields
        schema: array
        required: false
        description: ''
      - name: sortAscending
        schema: boolean
        required: false
        description: >-
          Sorting options:

          Whether to sort in ascending order. If false, will order in descending
          order.
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: Whether to order by the created_at time.
      - name: sortByStarCount
        schema: boolean
        required: false
        description: Whether to order by the number of users stared the app
      - name: sortByModifiedAt
        schema: boolean
        required: false
        description: If neither sort option is set to true, will sort by modified_at.
      - name: sortById
        schema: boolean
        required: false
        description: Whether to order by the external id
      - name: starredOnly
        schema: boolean
        required: false
        description: 'Filtering options:'
      - name: bookmark
        schema: boolean
        required: false
        description: >-
          Filter modules by bookmark. If set, only return bookmarked modules.
          Otherwise none bookmarked modules only.
      - name: search
        schema: string
        required: false
        description: >-
          Searching options:

          Specify a search parameter in order to perform keyword search on the

          following fields of the module:
            - id
            - description
            - user_id (unless user_app_id.user_id is already set)

          Keywords are both normalized for search (so searching for "satisfy"
          matches "satisfied")

          and used for partial prefix-matching (so searching for "clari" matches
          "clarifai").


          NOTE: Both the list of fields searched and the exact keyword matching

          rules are subject to change and not guaranteed to be
          backwards-compatible.
      - name: name
        schema: string
        required: false
        description: >-
          Filter by the id and description of the module. This supports wildcard
          queries like "gen*" to match "general" as an example.

          Deprecated: use search instead.
      - name: filterByUserId
        schema: boolean
        required: false
        description: |-
          Filter by the application owner whose this module belongs to
          Deprecated: use search instead of name.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/modules
    method: patchModules
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more modules.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: modules
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/modules
    method: postModules
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Add a modules to an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: modules
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/modules/{moduleId}
    method: getModule
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific module from an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: moduleId
        schema: string
        required: true
        description: ''
        example: MODULEID
      - name: additionalFields
        schema: array
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/modules/{moduleId}/versions
    method: deleteModuleVersions
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete a multiple module version.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: moduleId
        schema: string
        required: true
        description: ''
        example: MODULEID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/modules/{moduleId}/versions
    method: listModuleVersions
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the modules versions for a given module.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: moduleId
        schema: string
        required: true
        description: ''
        example: MODULEID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/modules/{moduleId}/versions
    method: patchModuleVersions
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Modify details of an existing module version.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: moduleId
        schema: string
        required: true
        description: ''
        example: MODULEID
      - name: userAppId
        schema: object
        description: ''
      - name: moduleVersions
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/modules/{moduleId}/versions
    method: postModuleVersions
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Create a new module version to trigger training of the module.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: moduleId
        schema: string
        required: true
        description: ''
        example: MODULEID
      - name: userAppId
        schema: object
        description: ''
      - name: moduleVersions
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/modules/{moduleId}/versions/{moduleVersionId}
    method: getModuleVersion
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific module version for a module.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: moduleId
        schema: string
        required: true
        description: ''
        example: MODULEID
      - name: moduleVersionId
        schema: string
        required: true
        description: ''
        example: MODULEVERSIONID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/modules/{moduleId}/versions/{moduleVersionId}/usage_count
    method: getModuleVersionUsageCount
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get usage count for specific module version.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: moduleId
        schema: string
        required: true
        description: ''
        example: MODULEID
      - name: moduleVersionId
        schema: string
        required: true
        description: ''
        example: MODULEVERSIONID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/myscopes
    method: myScopes
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: >-
      API Keys in the public API -- request is itself Key authorized, and will
      tell

      the user the scopes/access of the key/credential they're providing, as
      computed by

      our authorizer:
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/resource_counts
    method: getResourceCounts
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List the resource counts for the app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/searches
    method: listSearches
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all saved legacy searches.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/searches
    method: patchSearches
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch saved legacy searches by ids.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: searches
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/searches
    method: postSearches
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Execute a new search and optionally save it.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: query
        schema: object
        description: ''
      - name: searches
        schema: array
        description: ''
      - name: pagination
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/searches/{id}
    method: deleteSearch
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete a saved search.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/searches/{id}
    method: getSearch
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a saved legacy search.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/searches/{id}
    method: postSearchesById
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Execute a previously saved legacy search.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: id
        schema: string
        required: true
        description: ID for saves search to be executed
        example: ID
      - name: userAppId
        schema: object
        description: ''
      - name: pagination
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/stats/values
    method: postStatValues
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: PostStatValues
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: statValues
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/stats/values/aggregate
    method: postStatValuesAggregate
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: PostStatValuesAggregate
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: statValueAggregateQueries
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/task/{taskId}/annotations/status
    method: patchAnnotationsStatus
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch annotations status by worker id and task id.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: taskId
        schema: string
        required: true
        description: Filter by task ID
        example: TASKID
      - name: userAppId
        schema: object
        description: ''
      - name: userIds
        schema: array
        description: ''
      - name: statusCodes
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
      - name: statusCode
        schema: string
        description: ''
        default: ZERO
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/tasks
    method: deleteTasks
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete multiple tasks in one request.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/tasks
    method: listTasks
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List tasks from an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: workerUserIds
        schema: array
        required: false
        description: Get tasks that have ANY user from this list assigned as worker.
      - name: reviewUserIds
        schema: array
        required: false
        description: Get tasks that have ANY user from this list assigned as reviewer.
      - name: labelOrderIds
        schema: array
        required: false
        description: Get tasks that are associated to ANY label order from this list.
      - name: includingLabelOrderTasks
        schema: boolean
        required: false
        description: |-
          Get label order tasks as well
          It is automatically set to true if label_order_ids is set.
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response.

          Currently supported additional fields:

          - all

          - worker.users

          - review.users

          - metrics.work.inputs_count_estimated

          - metrics.work.inputs_percent_estimated
      - name: ids
        schema: array
        required: false
        description: (https://docs.clarifai.com/ task IDs to filter on
    responses:
      - statusCode: '200'
        description: Response with multiple Tasks.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/tasks
    method: patchTasks
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more tasks.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: tasks
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: Response with multiple Tasks.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/tasks
    method: postTasks
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Add tasks to an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: tasks
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: Response with multiple Tasks.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/tasks/{taskId}
    method: getTask
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific task from an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: taskId
        schema: string
        required: true
        description: ''
        example: TASKID
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response.

          Currently supported additional fields:

          - all

          - worker.users

          - review.users

          - metrics.work.inputs_count_estimated

          - metrics.work.inputs_percent_estimated
    responses:
      - statusCode: '200'
        description: Response with a single Task.
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/tasks/{taskId}/annotations/count
    method: getTaskAnnotationCount
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Task annotation count
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: taskId
        schema: string
        required: true
        description: task_id for which count per user per status is needed
        example: TASKID
      - name: userIds
        schema: array
        required: false
        description: for given task_id, user_ids to filter on (https://docs.clarifai.com/
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/tasks/{taskId}/assignments
    method: listNextTaskAssignments
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List next non-labeled and unassigned inputs from task's dataset
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: taskId
        schema: string
        required: true
        description: ''
        example: TASKID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/tasks/{taskId}/assignments
    method: putTaskAssignments
    httpMethod: put
    tag: V2
    typeScriptTag: v2
    description: >-
      PutTaskAssignments performs an action for the task assignments in given
      task.

      All the actions are theoretically idempotent, but practically, in the
      current implementation,

      the REVIEW_START action is not idempotent. See
      PutTaskAssignmentsRequestAction for more details.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: taskId
        schema: string
        required: true
        description: ''
        example: TASKID
      - name: userAppId
        schema: object
        description: ''
      - name: inputId
        schema: string
        description: ''
      - name: action
        schema: string
        description: ''
        default: PUT_TASK_ASSIGNMENTS_REQUEST_ACTION_NOT_SET
      - name: labelSubmitConfig
        schema: object
        description: ''
      - name: reviewApproveConfig
        schema: object
        description: ''
      - name: reviewRequestChangesConfig
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/tasks/{taskId}/inputs/count
    method: getTaskInputCount
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Task Input count
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: taskId
        schema: string
        required: true
        description: task_id for which count per user per status is needed
        example: TASKID
      - name: userIds
        schema: array
        required: false
        description: for given task_id, user_ids to filter on (https://docs.clarifai.com/
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/tasks/{taskId}/inputs/samples
    method: getInputSamples
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific input from an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: taskId
        schema: string
        required: true
        description: ''
        example: TASKID
      - name: userIds
        schema: array
        required: false
        description: URL param. If zero ids provided, returns for all task labelers
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/trending_metrics/views/{viewType}
    method: listTrendingMetricsViews
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List the view metrics for a detail view
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: viewType
        schema: string
        required: true
        description: For now view types 'apps', 'workflows', and 'models' are supported.
        example: VIEWTYPE
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/trending_metrics/views/{viewType}/{objectId}
    method: postTrendingMetricsView
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Increase the view metric for a detail view
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: viewType
        schema: string
        required: true
        description: For now view types 'apps', 'workflows', and 'models' are supported.
        example: VIEWTYPE
      - name: objectId
        schema: string
        required: true
        description: ID of the views object.
        example: OBJECTID
      - name: userAppId
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/uploads
    method: deleteUploads
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/uploads
    method: listUploads
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/uploads
    method: postUploads
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: uploads
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/uploads/{uploadId}
    method: getUpload
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: uploadId
        schema: string
        required: true
        description: Upload ID
        example: UPLOADID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/uploads/{uploadId}/content_parts
    method: putUploadContentParts
    httpMethod: put
    tag: V2
    typeScriptTag: v2
    description: >-
      Upload a part of a multipart upload.

      Behaviour on completion depends on the endpoint that was used to initiate
      the upload.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: uploadId
        schema: string
        required: true
        description: ''
        example: UPLOADID
      - name: userAppId
        schema: object
        description: ''
      - name: contentParts
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/workflows
    method: deleteWorkflows
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete multiple workflows in one request.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
      - name: deleteAll
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/workflows
    method: listWorkflows
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the workflows.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars
      - name: sortAscending
        schema: boolean
        required: false
        description: >-
          Sorting options:

          Whether to sort in ascending order. If false, will order in descending
          order.
      - name: sortById
        schema: boolean
        required: false
        description: Whether to order by the name
      - name: sortByModifiedAt
        schema: boolean
        required: false
        description: |-
          Whether to order by the modified_at time.
          If none of the sort options is set to true, will sort by modified_at.
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: Whether to order by the created_at time.
      - name: sortByStarCount
        schema: boolean
        required: false
        description: Whether to order by the number of users stared the workflow
      - name: featuredOnly
        schema: boolean
        required: false
        description: >-
          Filtering options:

          If true, we only return workflows that are handpicked by clarifai
          staff
      - name: starredOnly
        schema: boolean
        required: false
        description: >-
          If true, we only return workflows that are starred by the requesting
          user
      - name: bookmark
        schema: boolean
        required: false
        description: >-
          Filter workflows by bookmark. If set, only return bookmarked
          workflows. Otherwise none bookmarked workflows only.
      - name: search
        schema: string
        required: false
        description: >-
          Searching options:

          Specify a search parameter in order to perform keyword search on the

          following fields of the workflow:
            - id
            - description
            - notes
            - user_id (unless user_app_id.user_id is already set)

          Keywords are both normalized for search (so searching for "satisfy"
          matches "satisfied")

          and used for partial prefix-matching (so searching for "clari" matches
          "clarifai").


          NOTE: Both the list of fields searched and the exact keyword matching

          rules are subject to change and not guaranteed to be
          backwards-compatible.
      - name: query
        schema: string
        required: false
        description: >-
          Query various text fields (id, description and notes) that can contain
          the words in the query string.

          Deprecated: use search instead.
      - name: id
        schema: string
        required: false
        description: >-
          Filter by the id of the workflow. This supports wilcard queries like
          "gen*" to match "general" as an example.

          Deprecated: use search instead.
      - name: searchTerm
        schema: string
        required: false
        description: >-
          Full text and prefix matching on id, owner id, description and notes.
          Searchable fields may be added

          Deprecated: use search instead.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/workflows
    method: patchWorkflows
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more workflows.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: workflows
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/workflows
    method: postWorkflows
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: >-
      Add a workflow to an app.

      Note(https://docs.clarifai.com/: the order of the workflows that are
      returned from this endpoint

      may be different than the order in which the user provides them. This is
      because

      we reorder by a sort that optimizes for performance of the graph and its
      dependencies.

      When using the workflow in any future call the order returned by this
      endpoint

      will be used.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: workflows
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/workflows/ids
    method: patchWorkflowIds
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more workflows ids.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/workflows/{workflowId}
    method: deleteWorkflow
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete a single workflow.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: workflowId
        schema: string
        required: true
        description: ''
        example: WORKFLOWID
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/apps/{userAppId.appId}/workflows/{workflowId}
    method: getWorkflow
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific workflow from an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: workflowId
        schema: string
        required: true
        description: >-
          Workflow ID to retrieve

          If no ID is specified we return default workflow of the application

          If an ID is specified by default we first looks into Clarifai
          workflows for a Workflow ID
        example: WORKFLOWID
      - name: favorClarifaiWorkflows
        schema: boolean
        required: false
        description: >-
          Use this flag to look into clarifai published workflows first for a
          Workflow ID
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars
      - name: excludeClarifaiWorkflows
        schema: boolean
        required: false
        description: if true will not expand search to clarifai workflows
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/workflows/{workflowId}/publish
    method: postWorkflowVersionsPublish
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: workflowId
        schema: string
        required: true
        description: ''
        example: WORKFLOWID
      - name: userAppId
        schema: object
        description: ''
      - name: publications
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/workflows/{workflowId}/results
    method: postWorkflowResults2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Predict using a workflow.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: workflowId
        schema: string
        required: true
        description: >-
          Workflow ID to retrieve

          If no ID is specified we return default workflow of the application

          If an ID is specified by default we first looks into Clarifai
          workflows for a Workflow ID
        example: WORKFLOWID
      - name: userAppId
        schema: object
        description: ''
      - name: versionId
        schema: string
        description: ''
      - name: inputs
        schema: array
        description: ''
      - name: outputConfig
        schema: object
        description: ''
      - name: favorClarifaiWorkflows
        schema: boolean
        description: ''
      - name: workflowState
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/workflows/{workflowId}/results/similarity
    method: postWorkflowResultsSimilarity2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Compare embeddings distances using a workflow
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: workflowId
        schema: string
        required: true
        description: ''
        example: WORKFLOWID
      - name: userAppId
        schema: object
        description: ''
      - name: versionId
        schema: string
        description: ''
      - name: modelVersionId
        schema: string
        description: ''
      - name: probeInputs
        schema: array
        description: ''
      - name: poolInputs
        schema: array
        description: ''
      - name: favorClarifaiWorkflows
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/workflows/{workflowId}/unpublish
    method: postWorkflowVersionsUnPublish
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: workflowId
        schema: string
        required: true
        description: ''
        example: WORKFLOWID
      - name: userAppId
        schema: object
        description: ''
      - name: publications
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/workflows/{workflowId}/versions
    method: deleteWorkflowVersions
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete workflow versions.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: workflowId
        schema: string
        required: true
        description: The id of the workflow that has the requested versions to delete.
        example: WORKFLOWID
      - name: userAppId
        schema: object
        description: ''
      - name: workflowVersionIds
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/workflows/{workflowId}/versions
    method: listWorkflowVersions
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List workflow versions.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: workflowId
        schema: string
        required: true
        description: List versions for the workflow identified by this id
        example: WORKFLOWID
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/workflows/{workflowId}/versions
    method: patchWorkflowVersions
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch workflow versions.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: workflowId
        schema: string
        required: true
        description: The id of the workflow that has the requested versions to patch.
        example: WORKFLOWID
      - name: userAppId
        schema: object
        description: ''
      - name: workflowVersions
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/workflows/{workflowId}/versions/{versionId}/results
    method: postWorkflowResults
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Predict using a workflow.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: workflowId
        schema: string
        required: true
        description: >-
          Workflow ID to retrieve

          If no ID is specified we return default workflow of the application

          If an ID is specified by default we first looks into Clarifai
          workflows for a Workflow ID
        example: WORKFLOWID
      - name: versionId
        schema: string
        required: true
        description: |-
          Workflow version ID to retrieve
          If no ID is specified, latest workflow version is used
        example: VERSIONID
      - name: userAppId
        schema: object
        description: ''
      - name: inputs
        schema: array
        description: ''
      - name: outputConfig
        schema: object
        description: ''
      - name: favorClarifaiWorkflows
        schema: boolean
        description: ''
      - name: workflowState
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/workflows/{workflowId}/versions/{versionId}/results/similarity
    method: postWorkflowResultsSimilarity
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Compare embeddings distances using a workflow
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: workflowId
        schema: string
        required: true
        description: ''
        example: WORKFLOWID
      - name: versionId
        schema: string
        required: true
        description: |-
          Workflow version ID to retrieve
          If no ID is specified, latest workflow version is used
        example: VERSIONID
      - name: userAppId
        schema: object
        description: ''
      - name: modelVersionId
        schema: string
        description: ''
      - name: probeInputs
        schema: array
        description: ''
      - name: poolInputs
        schema: array
        description: ''
      - name: favorClarifaiWorkflows
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/apps/{userAppId.appId}/workflows/{workflowId}/versions/{workflowVersionId}
    method: getWorkflowVersion
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get single workflow version.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: true
        description: ''
        example: USERAPPID.APPID
      - name: workflowId
        schema: string
        required: true
        description: The id of the workflow that has the requested version.
        example: WORKFLOWID
      - name: workflowVersionId
        schema: string
        required: true
        description: Get the identified by this id
        example: WORKFLOWVERSIONID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/collaborations
    method: listCollaborations
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Collaboration includes the app user are invitied to work on
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: templateOnly
        schema: boolean
        required: false
        description: >-
          Filtering options:

          If true, we only return collaborations on apps that are marked as a
          template by the app owner.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/datasets
    method: listDatasets2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the datasets.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: additionalFields
        schema: array
        required: false
        description: ''
      - name: sortAscending
        schema: boolean
        required: false
        description: >-
          Sorting options:

          Whether to sort in ascending order. If false, will order in descending
          order.
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: Whether to order by the created_at time.
      - name: sortByStarCount
        schema: boolean
        required: false
        description: Whether to order by the number of users stared the app
      - name: sortByModifiedAt
        schema: boolean
        required: false
        description: If neither sort option is set to true, will sort by modified_at.
      - name: sortById
        schema: boolean
        required: false
        description: Whether to order by the external id
      - name: starredOnly
        schema: boolean
        required: false
        description: 'Filtering options:'
      - name: bookmark
        schema: boolean
        required: false
        description: >-
          Filter datasets by bookmark. If set, only return bookmarked datasets.
          Otherwise none bookmarked datasets only.
      - name: search
        schema: string
        required: false
        description: >-
          Searching options:

          Specify a search parameter in order to perform keyword search on the

          following fields of the dataset:
            - id
            - description
            - notes
            - user_id (unless user_app_id.user_id is already set)

          Keywords are both normalized for search (so searching for "satisfy"
          matches "satisfied")

          and used for partial prefix-matching (so searching for "clari" matches
          "clarifai").


          NOTE: Both the list of fields searched and the exact keyword matching

          rules are subject to change and not guaranteed to be
          backwards-compatible.
      - name: id
        schema: string
        required: false
        description: |-
          Fuzzy filter on dataset ID
          Deprecated: use search instead.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/duplications
    method: listAppDuplications
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: ListAppDuplications lists all app duplication jobs created by the user.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/duplications/{appDuplicationId}
    method: getAppDuplication
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: GetAppDuplication returns an app duplication job created by the user.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: appDuplicationId
        schema: string
        required: true
        description: ''
        example: APPDUPLICATIONID
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/evaluations
    method: listEvaluations2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: sortAscending
        schema: boolean
        required: false
        description: If true, sort in ascending order, otherwise sort in descending order.
      - name: sortByAppId
        schema: boolean
        required: false
        description: Whether to order by application id
      - name: sortByRocAuc
        schema: boolean
        required: false
        description: Whether to order by eval metric summary.macro_avg_roc_auc
      - name: sortByF1
        schema: boolean
        required: false
        description: Whether to order by eval metric summary.f1
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: Whether to order by when the metric was created
      - name: sortByMeanAvgPrecision
        schema: boolean
        required: false
        description: Whether to order by eval metric summary.mean_avg_precision_iou_50
      - name: sortByPrecision
        schema: boolean
        required: false
        description: Whether to order by eval metric summary.macro_avg_precision
      - name: sortByRecall
        schema: boolean
        required: false
        description: Whether to order by eval metric summary.macro_avg_recall
      - name: sortByModelId
        schema: boolean
        required: false
        description: ''
      - name: sortByEvalDatasetId
        schema: boolean
        required: false
        description: ''
      - name: sortByTrainDatasetId
        schema: boolean
        required: false
        description: ''
      - name: modelTypeId
        schema: string
        required: false
        description: Filter on model type id
      - name: evalDatasetIds
        schema: array
        required: false
        description: >-
          Filter on dataset ID of the dataset version specified in the metric
          version
      - name: trainDatasetIds
        schema: array
        required: false
        description: >-
          Filter on dataset ID of the dataset version specified by the model
          version
      - name: conceptIds
        schema: array
        required: false
        description: Filter on concept IDs specified in the modele version's output_info
      - name: showFailedMetrics
        schema: boolean
        required: false
        description: Whether to show failed metrics, defaults to false
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/keys
    method: listKeys
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the keys.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: notExpired
        schema: boolean
        required: false
        description: ''
      - name: scopes
        schema: array
        required: false
        description: ''
      - name: endpoints
        schema: array
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/keys
    method: patchKeys
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more keys.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppId
        schema: object
        description: ''
      - name: keys
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/keys
    method: postKeys
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Add a key to an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppId
        schema: object
        description: ''
      - name: keys
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/keys/{keyId}
    method: deleteKey
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: |-
      Search over the keys to find one or more you're looking for.
      This leverage the "body" parameter because we also have page and
      per_page as url query param variables in this request.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: keyId
        schema: string
        required: true
        description: ''
        example: KEYID
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/keys/{keyId}
    method: getKey
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific key from an app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: keyId
        schema: string
        required: true
        description: ''
        example: KEYID
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/models
    method: listModels2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the models.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars, outputs, presets
      - name: sortAscending
        schema: boolean
        required: false
        description: >-
          Sorting options:

          Whether to sort in ascending order. If false, will order in descending
          order.
      - name: sortByName
        schema: boolean
        required: false
        description: Whether to order by the name
      - name: sortByNumInputs
        schema: boolean
        required: false
        description: Whether to order by the number of training inputs
      - name: sortByModifiedAt
        schema: boolean
        required: false
        description: |-
          Whether to order by the modified_at time of the latest model version.
          If none of the sort options is set to true, will sort by modified_at.
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: Whether to order by the created_at
      - name: sortByStarCount
        schema: boolean
        required: false
        description: Whether to order by count of stars
      - name: modelTypeId
        schema: string
        required: false
        description: >-
          Filtering options:

          Filter models by the specific model_type_id. See ListModelTypes for
          the list of ModelType.Id's

          supported.
      - name: trainedOnly
        schema: boolean
        required: false
        description: >-
          If true, we only return models that have the status MODEL_TRAINED,
          which includes non-trainable model types.
      - name: inputFields
        schema: array
        required: false
        description: >-
          The list of input fields to the model.

          For example, you can specify 'image', which will return models that
          make inferences on images like visual-classifier models.
      - name: outputFields
        schema: array
        required: false
        description: >-
          The list of output fields to the model.

          For example, you can specify 'regions[...].data.concepts', which will
          return visual-detector models.
      - name: license
        schema: string
        required: false
        description: Filter by the license of the model version
      - name: featuredOnly
        schema: boolean
        required: false
        description: If true, we only return models that are handpicked by clarifai staff
      - name: starredOnly
        schema: boolean
        required: false
        description: If true, we only return models that are starred by the requesting user
      - name: toolkits
        schema: array
        required: false
        description: List of toolkit tags to filter by
      - name: useCases
        schema: array
        required: false
        description: List of use_case tags to filter by
      - name: languages
        schema: array
        required: false
        description: List of language tags to filter by
      - name: dontFetchFromMain
        schema: boolean
        required: false
        description: >-
          Old API behavior resulted in returning clarifai main models when
          calling ListModels while scoped to an app. While we transition

          away from that, we can use this flag to not always fetch clarifai main
          models, unless that is the app we are explicitly listing for.
      - name: bookmark
        schema: boolean
        required: false
        description: >-
          Filter models by bookmark. If set, only return bookmarked models.
          Otherwise none bookmarked models only.

          Note: you can not filter `trained_only` and bookmark at the same time.

          When filter by bookmark, we will return trained and untrained models.
      - name: search
        schema: string
        required: false
        description: >-
          Searching options:

          Specify a search parameter in order to perform keyword search on the

          following fields of the model:
            - id
            - name
            - description
            - notes
            - user_id (unless user_app_id.user_id is already set)

          Keywords are both normalized for search (so searching for "satisfy"
          matches "satisfied")

          and used for partial prefix-matching (so searching for "clari" matches
          "clarifai").


          NOTE: Both the list of fields searched and the exact keyword matching

          rules are subject to change and not guaranteed to be
          backwards-compatible.
      - name: query
        schema: string
        required: false
        description: >-
          Query name, description and id fields, that can contain the words in
          the query string. Does NOT support wildcards - full words only.
          Supports operators "OR" and "-" as NOT.

          Deprecated: use search instead.
      - name: name
        schema: string
        required: false
        description: >-
          Filter by the description and id of the model. This supports wildcard
          queries like "gen*" to match "general" as an example.

          Deprecated: use search instead.
      - name: filterByUserId
        schema: boolean
        required: false
        description: >-
          Extends the name filter to include the user_id of the application
          owner that the model belongs to.

          Deprecated: use search instead of name.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/modules
    method: listModules2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the modules in community, by user or by app.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: additionalFields
        schema: array
        required: false
        description: ''
      - name: sortAscending
        schema: boolean
        required: false
        description: >-
          Sorting options:

          Whether to sort in ascending order. If false, will order in descending
          order.
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: Whether to order by the created_at time.
      - name: sortByStarCount
        schema: boolean
        required: false
        description: Whether to order by the number of users stared the app
      - name: sortByModifiedAt
        schema: boolean
        required: false
        description: If neither sort option is set to true, will sort by modified_at.
      - name: sortById
        schema: boolean
        required: false
        description: Whether to order by the external id
      - name: starredOnly
        schema: boolean
        required: false
        description: 'Filtering options:'
      - name: bookmark
        schema: boolean
        required: false
        description: >-
          Filter modules by bookmark. If set, only return bookmarked modules.
          Otherwise none bookmarked modules only.
      - name: search
        schema: string
        required: false
        description: >-
          Searching options:

          Specify a search parameter in order to perform keyword search on the

          following fields of the module:
            - id
            - description
            - user_id (unless user_app_id.user_id is already set)

          Keywords are both normalized for search (so searching for "satisfy"
          matches "satisfied")

          and used for partial prefix-matching (so searching for "clari" matches
          "clarifai").


          NOTE: Both the list of fields searched and the exact keyword matching

          rules are subject to change and not guaranteed to be
          backwards-compatible.
      - name: name
        schema: string
        required: false
        description: >-
          Filter by the id and description of the module. This supports wildcard
          queries like "gen*" to match "general" as an example.

          Deprecated: use search instead.
      - name: filterByUserId
        schema: boolean
        required: false
        description: |-
          Filter by the application owner whose this module belongs to
          Deprecated: use search instead of name.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/myscopes
    method: myScopesUser
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/runners
    method: deleteRunners
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete multiple runners in one request.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/runners
    method: listRunners
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the runners for the user.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/runners
    method: postRunners
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Add a runners to a user.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppId
        schema: object
        description: ''
      - name: runners
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/runners/{runnerId}
    method: getRunner
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: >-
      Get a specific runner.

      TODO(https://docs.clarifai.com/: runner_id is a UUID so can list globally
      as well.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: runnerId
        schema: string
        required: true
        description: ''
        example: RUNNERID
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/runners/{runnerId}/items
    method: listRunnerItems
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: |-
      List items for the remote runner to work on.
      since the runner_id is a UUID we can access it directly too.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: runnerId
        schema: string
        required: true
        description: ''
        example: RUNNERID
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: >-
      /v2/users/{userAppId.userId}/runners/{runnerId}/items/{runnerItemId}/outputs
    method: postRunnerItemOutputs
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: |-
      Post back outputs from remote runners
      since the runner_id is a UUID we can access it directly too.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: runnerId
        schema: string
        required: true
        description: The particular runner that processed the work.
        example: RUNNERID
      - name: runnerItemId
        schema: string
        required: true
        description: The particular item of work processed.
        example: RUNNERITEMID
      - name: userAppId
        schema: object
        description: ''
      - name: runnerItemOutputs
        schema: array
        description: ''
      - name: status
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/scopes
    method: listScopes
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all auth scopes available to me as a user.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: keyType
        schema: string
        required: false
        description: >-
          If "personal_access_token" include scopes and endpoints available to
          personal access tokens.

          If "api_key" include scopes and endpoints available to app-specific
          keys. (https://docs.clarifai.com/
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/validate_password
    method: postValidatePassword
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Validate new password in real-time for a user
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppId
        schema: object
        description: ''
      - name: password
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/users/{userAppId.userId}/workflows
    method: listWorkflows2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the workflows.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: true
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
        example: USERAPPID.USERID
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars
      - name: sortAscending
        schema: boolean
        required: false
        description: >-
          Sorting options:

          Whether to sort in ascending order. If false, will order in descending
          order.
      - name: sortById
        schema: boolean
        required: false
        description: Whether to order by the name
      - name: sortByModifiedAt
        schema: boolean
        required: false
        description: |-
          Whether to order by the modified_at time.
          If none of the sort options is set to true, will sort by modified_at.
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: Whether to order by the created_at time.
      - name: sortByStarCount
        schema: boolean
        required: false
        description: Whether to order by the number of users stared the workflow
      - name: featuredOnly
        schema: boolean
        required: false
        description: >-
          Filtering options:

          If true, we only return workflows that are handpicked by clarifai
          staff
      - name: starredOnly
        schema: boolean
        required: false
        description: >-
          If true, we only return workflows that are starred by the requesting
          user
      - name: bookmark
        schema: boolean
        required: false
        description: >-
          Filter workflows by bookmark. If set, only return bookmarked
          workflows. Otherwise none bookmarked workflows only.
      - name: search
        schema: string
        required: false
        description: >-
          Searching options:

          Specify a search parameter in order to perform keyword search on the

          following fields of the workflow:
            - id
            - description
            - notes
            - user_id (unless user_app_id.user_id is already set)

          Keywords are both normalized for search (so searching for "satisfy"
          matches "satisfied")

          and used for partial prefix-matching (so searching for "clari" matches
          "clarifai").


          NOTE: Both the list of fields searched and the exact keyword matching

          rules are subject to change and not guaranteed to be
          backwards-compatible.
      - name: query
        schema: string
        required: false
        description: >-
          Query various text fields (id, description and notes) that can contain
          the words in the query string.

          Deprecated: use search instead.
      - name: id
        schema: string
        required: false
        description: >-
          Filter by the id of the workflow. This supports wilcard queries like
          "gen*" to match "general" as an example.

          Deprecated: use search instead.
      - name: searchTerm
        schema: string
        required: false
        description: >-
          Full text and prefix matching on id, owner id, description and notes.
          Searchable fields may be added

          Deprecated: use search instead.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/validate_password
    method: postValidatePassword2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Validate new password in real-time for a user
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: password
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/workflows
    method: deleteWorkflows2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete multiple workflows in one request.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: ids
        schema: array
        description: ''
      - name: deleteAll
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/workflows
    method: listWorkflows3
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List all the workflows.
    parameters:
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars
      - name: sortAscending
        schema: boolean
        required: false
        description: >-
          Sorting options:

          Whether to sort in ascending order. If false, will order in descending
          order.
      - name: sortById
        schema: boolean
        required: false
        description: Whether to order by the name
      - name: sortByModifiedAt
        schema: boolean
        required: false
        description: |-
          Whether to order by the modified_at time.
          If none of the sort options is set to true, will sort by modified_at.
      - name: sortByCreatedAt
        schema: boolean
        required: false
        description: Whether to order by the created_at time.
      - name: sortByStarCount
        schema: boolean
        required: false
        description: Whether to order by the number of users stared the workflow
      - name: featuredOnly
        schema: boolean
        required: false
        description: >-
          Filtering options:

          If true, we only return workflows that are handpicked by clarifai
          staff
      - name: starredOnly
        schema: boolean
        required: false
        description: >-
          If true, we only return workflows that are starred by the requesting
          user
      - name: bookmark
        schema: boolean
        required: false
        description: >-
          Filter workflows by bookmark. If set, only return bookmarked
          workflows. Otherwise none bookmarked workflows only.
      - name: search
        schema: string
        required: false
        description: >-
          Searching options:

          Specify a search parameter in order to perform keyword search on the

          following fields of the workflow:
            - id
            - description
            - notes
            - user_id (unless user_app_id.user_id is already set)

          Keywords are both normalized for search (so searching for "satisfy"
          matches "satisfied")

          and used for partial prefix-matching (so searching for "clari" matches
          "clarifai").


          NOTE: Both the list of fields searched and the exact keyword matching

          rules are subject to change and not guaranteed to be
          backwards-compatible.
      - name: query
        schema: string
        required: false
        description: >-
          Query various text fields (id, description and notes) that can contain
          the words in the query string.

          Deprecated: use search instead.
      - name: id
        schema: string
        required: false
        description: >-
          Filter by the id of the workflow. This supports wilcard queries like
          "gen*" to match "general" as an example.

          Deprecated: use search instead.
      - name: searchTerm
        schema: string
        required: false
        description: >-
          Full text and prefix matching on id, owner id, description and notes.
          Searchable fields may be added

          Deprecated: use search instead.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/workflows
    method: patchWorkflows2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch one or more workflows.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: workflows
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/workflows
    method: postWorkflows2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: >-
      Add a workflow to an app.

      Note(https://docs.clarifai.com/: the order of the workflows that are
      returned from this endpoint

      may be different than the order in which the user provides them. This is
      because

      we reorder by a sort that optimizes for performance of the graph and its
      dependencies.

      When using the workflow in any future call the order returned by this
      endpoint

      will be used.
    parameters:
      - name: userAppId
        schema: object
        description: ''
      - name: workflows
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/workflows/{workflowId}
    method: deleteWorkflow2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete a single workflow.
    parameters:
      - name: workflowId
        schema: string
        required: true
        description: ''
        example: WORKFLOWID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/workflows/{workflowId}
    method: getWorkflow2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get a specific workflow from an app.
    parameters:
      - name: workflowId
        schema: string
        required: true
        description: >-
          Workflow ID to retrieve

          If no ID is specified we return default workflow of the application

          If an ID is specified by default we first looks into Clarifai
          workflows for a Workflow ID
        example: WORKFLOWID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: favorClarifaiWorkflows
        schema: boolean
        required: false
        description: >-
          Use this flag to look into clarifai published workflows first for a
          Workflow ID
      - name: additionalFields
        schema: array
        required: false
        description: >-
          (optional URL parameter) List of additional fields to be included in
          the response. Currently supported: all, stars
      - name: excludeClarifaiWorkflows
        schema: boolean
        required: false
        description: if true will not expand search to clarifai workflows
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/workflows/{workflowId}/publish
    method: postWorkflowVersionsPublish2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: workflowId
        schema: string
        required: true
        description: ''
        example: WORKFLOWID
      - name: userAppId
        schema: object
        description: ''
      - name: publications
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/workflows/{workflowId}/results
    method: postWorkflowResults3
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Predict using a workflow.
    parameters:
      - name: workflowId
        schema: string
        required: true
        description: >-
          Workflow ID to retrieve

          If no ID is specified we return default workflow of the application

          If an ID is specified by default we first looks into Clarifai
          workflows for a Workflow ID
        example: WORKFLOWID
      - name: userAppId
        schema: object
        description: ''
      - name: versionId
        schema: string
        description: ''
      - name: inputs
        schema: array
        description: ''
      - name: outputConfig
        schema: object
        description: ''
      - name: favorClarifaiWorkflows
        schema: boolean
        description: ''
      - name: workflowState
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/workflows/{workflowId}/results/similarity
    method: postWorkflowResultsSimilarity3
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: Compare embeddings distances using a workflow
    parameters:
      - name: workflowId
        schema: string
        required: true
        description: ''
        example: WORKFLOWID
      - name: userAppId
        schema: object
        description: ''
      - name: versionId
        schema: string
        description: ''
      - name: modelVersionId
        schema: string
        description: ''
      - name: probeInputs
        schema: array
        description: ''
      - name: poolInputs
        schema: array
        description: ''
      - name: favorClarifaiWorkflows
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/workflows/{workflowId}/unpublish
    method: postWorkflowVersionsUnPublish2
    httpMethod: post
    tag: V2
    typeScriptTag: v2
    description: ''
    parameters:
      - name: workflowId
        schema: string
        required: true
        description: ''
        example: WORKFLOWID
      - name: userAppId
        schema: object
        description: ''
      - name: publications
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/workflows/{workflowId}/versions
    method: deleteWorkflowVersions2
    httpMethod: delete
    tag: V2
    typeScriptTag: v2
    description: Delete workflow versions.
    parameters:
      - name: workflowId
        schema: string
        required: true
        description: The id of the workflow that has the requested versions to delete.
        example: WORKFLOWID
      - name: userAppId
        schema: object
        description: ''
      - name: workflowVersionIds
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Base message to return when there is a internal server error that
          is not caught elsewhere.
      - statusCode: default
        description: ''
  - url: /v2/workflows/{workflowId}/versions
    method: listWorkflowVersions2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: List workflow versions.
    parameters:
      - name: workflowId
        schema: string
        required: true
        description: List versions for the workflow identified by this id
        example: WORKFLOWID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
      - name: page
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The page number. Pagination is used to split
          the results into chunks.

          Defaults to 1.
      - name: perPage
        schema: integer
        required: false
        description: >-
          (optional URL parameter) The number of results that will be contained
          in each page. Defaults

          to 128.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/workflows/{workflowId}/versions
    method: patchWorkflowVersions2
    httpMethod: patch
    tag: V2
    typeScriptTag: v2
    description: Patch workflow versions.
    parameters:
      - name: workflowId
        schema: string
        required: true
        description: The id of the workflow that has the requested versions to patch.
        example: WORKFLOWID
      - name: userAppId
        schema: object
        description: ''
      - name: workflowVersions
        schema: array
        description: ''
      - name: action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
  - url: /v2/workflows/{workflowId}/versions/{workflowVersionId}
    method: getWorkflowVersion2
    httpMethod: get
    tag: V2
    typeScriptTag: v2
    description: Get single workflow version.
    parameters:
      - name: workflowId
        schema: string
        required: true
        description: The id of the workflow that has the requested version.
        example: WORKFLOWID
      - name: workflowVersionId
        schema: string
        required: true
        description: Get the identified by this id
        example: WORKFLOWVERSIONID
      - name: userAppIdUserId
        schema: string
        required: false
        description: >-
          Note user_id 'me' is reserved - it is the alias for the id of
          authorized user
      - name: userAppIdAppId
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: ''
numberOfSchemas: 543
apiDescription: >-
  Clarifai is an independent artificial intelligence company that specializes in
  computer vision, natural language processing, and audio recognition.  One of
  the first deep learning platforms having been founded in 2013, Clarifai
  provides an AI platform for unstructured image, video, text, and audio data.
  Its platform supports the full AI lifecycle for data exploration, data
  labeling, model training, evaluation, and inference around images, video,
  text, and audio data. Headquartered in Washington DC, Clarifai uses machine
  learning and deep neural networks to identify and analyze images, videos,
  text, and audio automatically. Clarifai enables users to implement AI
  technology into their products via API, Mobile SDK, and/or on-premise
  solutions.
