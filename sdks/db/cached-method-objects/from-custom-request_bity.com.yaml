hash: df8758aae26bf01210ee80e462148e2ce2c762d306ba96574a0660e97cca91a0
methodObjects:
  - url: /currencies
    method: currencies
    httpMethod: get
    tag: Currencies
    typeScriptTag: currencies
    description: List currencies
    parameters:
      - name: tags
        schema: array
        required: false
        description: >-
          Comma-separated list of tags. Currencies that contain all tags will be
          filtered.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /currencies/{currency_code}
    method: getByCode
    httpMethod: get
    tag: Currencies
    typeScriptTag: currencies
    description: Get a single currency
    parameters:
      - name: currencyCode
        schema: string
        required: true
        description: >-
          Currency code identifying the currency about which to return
          information.
        example: BTC
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: Currency not found or unsupported
      - statusCode: '429'
        description: ''
  - url: /orders
    method: orders
    httpMethod: get
    tag: Orders
    typeScriptTag: orders
    description: List previously placed orders
    parameters:
      - name: page
        schema: number
        required: false
        description: >-
          Number of the page to retrieve, defaults to the first page (1). See
          also the `Link` header in the 200 response.
      - name: pageSize
        schema: number
        required: false
        description: Number of orders to include in a page. When not specified, 100.
      - name: status
        schema: string
        required: false
        description: |
          When specified, restrict the orders listing to orders with a
          specific status.

          The currently understood values are:

          - `finalized`: Only include orders that have reached a final state.
          - `ongoing`: Only include orders that are not finalized.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /orders
    method: order
    httpMethod: post
    tag: Orders
    typeScriptTag: orders
    description: Place an order
    parameters:
      - name: client_value
        schema: integer
        required: false
        description: ''
      - name: contact_person
        schema: object
        required: false
        description: ''
      - name: input
        schema: undefined
        required: true
        description: ''
      - name: output
        schema: undefined
        required: true
        description: ''
      - name: partner_fee
        schema: object
        required: false
        description: ''
      - name: purpose
        schema: object
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: |
          The order has been successfully created.

          The `Location` header contains the URI (which can be relative) at
          which the order status and details can be retrieved. That is the
          `Location` header is meant to be interpreted as per RFC 7231 section
          7.1.2.
      - statusCode: '400'
        description: >
          Following cases:


          - Unsupported currency pair.

          - Quota exceeded for the bank account or crypto-address.

          - Provided input payment address cannot be used currently. Please try
          again later.

          - Internal error.
      - statusCode: '429'
        description: ''
  - url: /orders/estimate
    method: calculateAmountEstimate
    httpMethod: post
    tag: Orders
    typeScriptTag: orders
    description: Estimate the amount of an order
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: >-
          Malformed request. <br> Invalid currency code. <br> Invalid currency
          pair. <br> Invalid amount.
      - statusCode: '429'
        description: ''
  - url: /orders/estimate/multiple
    method: performMultipleEstimations
    httpMethod: post
    tag: Orders
    typeScriptTag: orders
    description: Perform several estimations in one request
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: >-
          This endpoint can produce the same errors as `/orders/estimate` in
          addition to refusing to perform too many estimations in a single call.
      - statusCode: '429'
        description: ''
  - url: /orders/{order_uuid}
    method: getOrderDetails
    httpMethod: get
    tag: Orders
    typeScriptTag: orders
    description: Get the details of an order
    parameters:
      - name: orderUuid
        schema: string
        required: true
        description: ID of the order.
        example: ORDER_UUID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Order with such ID not found.
      - statusCode: '429'
        description: ''
  - url: /orders/{order_uuid}/bank_transfer_qr_bill
    method: getQrBill
    httpMethod: get
    tag: Orders
    typeScriptTag: orders
    description: Get the QR-bill of an order where the input is bank_transfer.
    parameters:
      - name: orderUuid
        schema: string
        required: true
        description: Identifier of the order for which to retrieve the QR-bill image.
        example: ORDER_UUID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: >-
          The specified order does not exist, its input is not bank_transfer or
          the order's input currency is not fiat.
  - url: /orders/{order_uuid}/cancel
    method: order
    httpMethod: post
    tag: Orders
    typeScriptTag: orders
    description: Cancel an order
    parameters:
      - name: orderUuid
        schema: string
        required: true
        description: Identifier of the order to attempt to cancel
        example: ORDER_UUID
    responses:
      - statusCode: '202'
        description: |
          The request to cancel the order is being processed asynchronously.

          It is at this time not possible to know whether the cancellation
          attempt will be successful or not.
      - statusCode: '204'
        description: The cancellation attempt was successful.
      - statusCode: '400'
        description: The cancellation attempt was unsuccessful.
      - statusCode: '429'
        description: ''
  - url: /orders/{order_uuid}/duplicate
    method: order
    httpMethod: post
    tag: Orders
    typeScriptTag: orders
    description: Duplicate an order
    parameters:
      - name: orderUuid
        schema: string
        required: true
        description: ID of the order to duplicate.
        example: ORDER_UUID
    responses:
      - statusCode: '201'
        description: |
          The order has been successfully created.

          The `Location` header contains the URI (which can be relative) at
          which the order status and details can be retrieved. That is, the
          `Location` header is meant to be interpreted as per RFC 7231
          section 7.1.2.
      - statusCode: '400'
        description: >-
          This operation can return the same errors as the `place_order`
          operation (POST /orders).
      - statusCode: '429'
        description: ''
  - url: /orders/{order_uuid}/execute
    method: order
    httpMethod: post
    tag: Orders
    typeScriptTag: orders
    description: Execute order
    parameters:
      - name: orderUuid
        schema: string
        required: true
        description: Identifier of the order to attempt to execute
        example: ORDER_UUID
    responses:
      - statusCode: '202'
        description: The order has been paid, execution is ongoing
      - statusCode: '400'
        description: Bad request
  - url: /orders/{order_uuid}/signature
    method: submitSignature
    httpMethod: post
    tag: Orders
    typeScriptTag: orders
    description: Sign proof of wallet ownership message
    parameters:
      - name: orderUuid
        schema: string
        required: true
        description: ID of the order.
        example: ORDER_UUID
    responses:
      - statusCode: '204'
        description: >-
          The signature is correct, the order details now contain
          `payment_details`.
      - statusCode: '400'
        description: The signature is invalid.
      - statusCode: '404'
        description: >-
          The associated order could not be found or there is no message to
          sign.
      - statusCode: '429'
        description: ''
      - statusCode: '502'
        description: Internal error.
      - statusCode: '503'
        description: Internal error.
      - statusCode: '504'
        description: Internal error.
  - url: /pairs
    method: getList
    httpMethod: get
    tag: Currencies
    typeScriptTag: currencies
    description: List currency pairs
    parameters:
      - name: input
        schema: string
        required: false
        description: >-
          Retrieve all pairs for given input currency code. This parameter can
          be repeated several times to match many input currencies.
      - name: output
        schema: string
        required: false
        description: >-
          Retrieve all pairs for given output currency code. This parameter can
          be repeated several times to match many output currencies.
      - name: enabled
        schema: string
        required: false
        description: Retrieve all pairs that are enabled for trading or not.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '429'
        description: ''
  - url: /read_payment_information
    method: extractQrPaymentInfo
    httpMethod: post
    tag: Other
    typeScriptTag: other
    description: Read payment information
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: Error
numberOfSchemas: 89
apiDescription: >
  The present document gives the technical details enabling one to make

  request to and understand the responses of the Exchange API. Should you

  want to know what is possible to do with the API, please consult the

  product guide or have a look at the

  [product page](https://go.bity.com/Exchange API).


  Version 2 of the Exchange API (this version) is stable and should be

  considered reliable. However, Bity reserves itself the right to correct

  bugs in these API endpoints without considering such corrections as being

  breaking changes.


  Connection to the API happens over HTTP/1.1 (RFC 7231) and HTTP State

  Management (RFC 6265) is required. Most libraries and user-agents allowing

  HTTP requests to be performed already implements that for you as long as

  cookies are not disabled and that you are requesting credentials to be

  included in the requests.


  API clients of registered partners add an optional `Client-ID` header to

  the requests. This enables partners to benefit from profit sharing. See the

  [corresponding section of the product
  guide](https://doc.bity.com/exchange/guide.html#financial-partners)

  for more details.


  End-users can access the order status page via

  [https://go.bity.com/order-status](https://go.bity.com/order-status). A

  link to the status of a specific order can be constructed by appending the

  order identifier to `https://go.bity.com/order-status?id=`. The order

  status page allows to contact the Bity Support Team about a specific order.


  The OpenAPI definition in YAML format is available

  [here](https://doc.bity.com/exchange/exchange_api_v2.openapi.yaml).
