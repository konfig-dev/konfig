hash: fe8a9247a8ec3b5ebde737464eb96f8745dce8a8a586046845f776e37f502816
methodObjects:
  - url: /admin/backups.json
    method: list
    httpMethod: get
    tag: Backups
    typeScriptTag: backups
    description: List backups
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /admin/backups.json
    method: createBackupRequest
    httpMethod: post
    tag: Backups
    typeScriptTag: backups
    description: Create backup
    parameters:
      - name: with_uploads
        schema: boolean
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /admin/backups/{filename}
    method: downloadBackup
    httpMethod: get
    tag: Backups
    typeScriptTag: backups
    description: Download backup
    parameters:
      - name: filename
        schema: string
        required: true
        description: ''
      - name: token
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: success response
  - url: /admin/backups/{filename}
    method: sendDownloadBackupEmail
    httpMethod: put
    tag: Backups
    typeScriptTag: backups
    description: Send download backup email
    parameters:
      - name: filename
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: success response
  - url: /admin/badges.json
    method: list
    httpMethod: get
    tag: Badges
    typeScriptTag: badges
    description: List badges
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /admin/badges.json
    method: createBadge
    httpMethod: post
    tag: Badges
    typeScriptTag: badges
    description: Create badge
    parameters:
      - name: name
        schema: string
        required: true
        description: ''
      - name: badge_type_id
        schema: integer
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /admin/badges/{id}.json
    method: deleteByIdJson
    httpMethod: delete
    tag: Badges
    typeScriptTag: badges
    description: Delete badge
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: success response
  - url: /admin/badges/{id}.json
    method: updateBadgeByIdJson
    httpMethod: put
    tag: Badges
    typeScriptTag: badges
    description: Update badge
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
      - name: name
        schema: string
        required: true
        description: ''
      - name: badge_type_id
        schema: integer
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /categories.json
    method: list
    httpMethod: get
    tag: Categories
    typeScriptTag: categories
    description: Retrieves a list of categories
    parameters:
      - name: includeSubcategories
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /categories.json
    method: createCategoryRequest
    httpMethod: post
    tag: Categories
    typeScriptTag: categories
    description: Creates a category
    parameters:
      - name: name
        schema: string
        required: true
        description: ''
      - name: color
        schema: string
        required: false
        description: ''
      - name: text_color
        schema: string
        required: false
        description: ''
      - name: parent_category_id
        schema: integer
        required: false
        description: ''
      - name: allow_badges
        schema: boolean
        required: false
        description: ''
      - name: slug
        schema: string
        required: false
        description: ''
      - name: topic_featured_links_allowed
        schema: boolean
        required: false
        description: ''
      - name: permissions
        schema: object
        required: false
        description: ''
      - name: search_priority
        schema: integer
        required: false
        description: ''
      - name: form_template_ids
        schema: array
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /categories/{id}.json
    method: updateCategoryByIdJson
    httpMethod: put
    tag: Categories
    typeScriptTag: categories
    description: Updates a category
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
      - name: name
        schema: string
        required: true
        description: ''
      - name: color
        schema: string
        required: false
        description: ''
      - name: text_color
        schema: string
        required: false
        description: ''
      - name: parent_category_id
        schema: integer
        required: false
        description: ''
      - name: allow_badges
        schema: boolean
        required: false
        description: ''
      - name: slug
        schema: string
        required: false
        description: ''
      - name: topic_featured_links_allowed
        schema: boolean
        required: false
        description: ''
      - name: permissions
        schema: object
        required: false
        description: ''
      - name: search_priority
        schema: integer
        required: false
        description: ''
      - name: form_template_ids
        schema: array
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /c/{slug}/{id}.json
    method: listTopics
    httpMethod: get
    tag: Categories
    typeScriptTag: categories
    description: List topics
    parameters:
      - name: slug
        schema: string
        required: true
        description: ''
      - name: id
        schema: integer
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /c/{id}/show.json
    method: getCategoryByIdJson
    httpMethod: get
    tag: Categories
    typeScriptTag: categories
    description: Show category
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /admin/groups.json
    method: createNewGroup
    httpMethod: post
    tag: Groups
    typeScriptTag: groups
    description: Create a group
    parameters:
      - name: group
        schema: object
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /admin/groups/{id}.json
    method: deleteGroupByIdJson
    httpMethod: delete
    tag: Groups
    typeScriptTag: groups
    description: Delete a group
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /groups/{id}.json
    method: getGroupById
    httpMethod: get
    tag: Groups
    typeScriptTag: groups
    description: Get a group
    parameters:
      - name: id
        schema: string
        required: true
        description: Use group name instead of id
    responses:
      - statusCode: '200'
        description: ''
  - url: /groups/{id}.json
    method: updateGroupByIdJson
    httpMethod: put
    tag: Groups
    typeScriptTag: groups
    description: Update a group
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
      - name: group
        schema: object
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /groups/{id}/members.json
    method: removeMembers
    httpMethod: delete
    tag: Groups
    typeScriptTag: groups
    description: Remove group members
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
      - name: usernames
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /groups/{id}/members.json
    method: listMembersJson
    httpMethod: get
    tag: Groups
    typeScriptTag: groups
    description: List group members
    parameters:
      - name: id
        schema: string
        required: true
        description: Use group name instead of id
    responses:
      - statusCode: '200'
        description: ''
  - url: /groups/{id}/members.json
    method: addMembersToGroup
    httpMethod: put
    tag: Groups
    typeScriptTag: groups
    description: Add group members
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
      - name: usernames
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /groups.json
    method: list
    httpMethod: get
    tag: Groups
    typeScriptTag: groups
    description: List groups
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /invites.json
    method: createInvite
    httpMethod: post
    tag: Invites
    typeScriptTag: invites
    description: Create an invite
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: email
        schema: string
        description: ''
      - name: skip_email
        schema: boolean
        description: ''
      - name: custom_message
        schema: string
        description: ''
      - name: max_redemptions_allowed
        schema: integer
        description: ''
      - name: topic_id
        schema: integer
        description: ''
      - name: group_ids
        schema: string
        description: ''
      - name: group_names
        schema: string
        description: ''
      - name: expires_at
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /invites/create-multiple.json
    method: createMultipleInvites
    httpMethod: post
    tag: Invites
    typeScriptTag: invites
    description: Create multiple invites
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: email
        schema: string
        description: ''
      - name: skip_email
        schema: boolean
        description: ''
      - name: custom_message
        schema: string
        description: ''
      - name: max_redemptions_allowed
        schema: integer
        description: ''
      - name: topic_id
        schema: integer
        description: ''
      - name: group_ids
        schema: string
        description: ''
      - name: group_names
        schema: string
        description: ''
      - name: expires_at
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /notifications.json
    method: getUserNotifications
    httpMethod: get
    tag: Notifications
    typeScriptTag: notifications
    description: Get the notifications that belong to the current user
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /notifications/mark-read.json
    method: markAsRead
    httpMethod: put
    tag: Notifications
    typeScriptTag: notifications
    description: Mark notifications as read
    parameters:
      - name: id
        schema: integer
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /posts.json
    method: listLatestPostsAcrossTopics
    httpMethod: get
    tag: Posts
    typeScriptTag: posts
    description: List latest posts across topics
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: before
        schema: string
        required: false
        description: Load posts with an id lower than this value. Useful for pagination.
    responses:
      - statusCode: '200'
        description: ''
  - url: /posts.json
    method: createTopicPostMessage
    httpMethod: post
    tag: Posts
    typeScriptTag: posts
    description: Creates a new topic, a new post, or a private message
    parameters:
      - name: title
        schema: string
        required: false
        description: ''
      - name: raw
        schema: string
        required: true
        description: ''
      - name: topic_id
        schema: integer
        required: false
        description: ''
      - name: category
        schema: integer
        required: false
        description: ''
      - name: target_recipients
        schema: string
        required: false
        description: ''
      - name: target_usernames
        schema: string
        required: false
        description: ''
      - name: archetype
        schema: string
        required: false
        description: ''
      - name: created_at
        schema: string
        required: false
        description: ''
      - name: reply_to_post_number
        schema: integer
        required: false
        description: ''
      - name: embed_url
        schema: string
        required: false
        description: ''
      - name: external_id
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /posts/{id}.json
    method: deleteSinglePost
    httpMethod: delete
    tag: Posts
    typeScriptTag: posts
    description: delete a single post
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
      - name: force_destroy
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: success response
  - url: /posts/{id}.json
    method: getSinglePostLikes
    httpMethod: get
    tag: Posts
    typeScriptTag: posts
    description: Retrieve a single post
    parameters:
      - name: id
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /posts/{id}.json
    method: updateSinglePostJson
    httpMethod: put
    tag: Posts
    typeScriptTag: posts
    description: Update a single post
    parameters:
      - name: id
        schema: string
        required: true
        description: ''
      - name: post
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /posts/{id}/replies.json
    method: listRepliesToPost
    httpMethod: get
    tag: Posts
    typeScriptTag: posts
    description: List replies to a post
    parameters:
      - name: id
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /posts/{id}/locked.json
    method: lockPostAction
    httpMethod: put
    tag: Posts
    typeScriptTag: posts
    description: Lock a post from being edited
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: id
        schema: string
        required: true
        description: ''
      - name: locked
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /post_actions.json
    method: likePostAction
    httpMethod: post
    tag: Posts
    typeScriptTag: posts
    description: Like a post and other actions
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: id
        schema: integer
        required: true
        description: ''
      - name: post_action_type_id
        schema: integer
        required: true
        description: ''
      - name: flag_topic
        schema: boolean
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /topics/private-messages/{username}.json
    method: listForUser
    httpMethod: get
    tag: Private Messages
    typeScriptTag: privateMessages
    description: Get a list of private messages for a user
    parameters:
      - name: username
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /topics/private-messages-sent/{username}.json
    method: listSentForUser
    httpMethod: get
    tag: Private Messages
    typeScriptTag: privateMessages
    description: Get a list of private messages sent for a user
    parameters:
      - name: username
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /search.json
    method: termResults
    httpMethod: get
    tag: Search
    typeScriptTag: search
    description: Search for a term
    parameters:
      - name: q
        schema: string
        description: >
          The query string needs to be url encoded and is made up of the
          following options:

          - Search term. This is just a string. Usually it would be the first
          item in the query.

          - `@<username>`: Use the `@` followed by the username to specify posts
          by this user.

          - `#<category>`: Use the `#` followed by the category slug to search
          within this category.

          - `tags:`: `api,solved` or for posts that have all the specified tags
          `api+solved`.

          - `before:`: `yyyy-mm-dd`

          - `after:`: `yyyy-mm-dd`

          - `order:`: `latest`, `likes`, `views`, `latest_topic`

          - `assigned:`: username (without `@`)

          - `in:`: `title`, `likes`, `personal`, `messages`, `seen`, `unseen`,
          `posted`, `created`, `watching`, `tracking`, `bookmarks`, `assigned`,
          `unassigned`, `first`, `pinned`, `wiki`

          - `with:`: `images`

          - `status:`: `open`, `closed`, `public`, `archived`, `noreplies`,
          `single_user`, `solved`, `unsolved`

          - `group:`: group_name or group_id

          - `group_messages:`: group_name or group_id

          - `min_posts:`: 1

          - `max_posts:`: 10

          - `min_views:`: 1

          - `max_views:`: 10


          If you are using cURL you can use the `-G` and the `--data-urlencode`
          flags to encode the query:


          ```

          curl -i -sS -X GET -G "http://localhost:4200/search.json" \

          --data-urlencode 'q=wordpress @scossar #fun after:2020-01-01'

          ```
      - name: page
        schema: integer
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /site.json
    method: getCategoriesAndSubcategories
    httpMethod: get
    tag: Site
    typeScriptTag: site
    description: Get site info
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /tag_groups.json
    method: getTagGroups
    httpMethod: get
    tag: Tags
    typeScriptTag: tags
    description: Get a list of tag groups
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /tag_groups.json
    method: createTagGroup
    httpMethod: post
    tag: Tags
    typeScriptTag: tags
    description: Creates a tag group
    parameters:
      - name: name
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /tag_groups/{id}.json
    method: getSingleTagGroup
    httpMethod: get
    tag: Tags
    typeScriptTag: tags
    description: Get a single tag group
    parameters:
      - name: id
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /tag_groups/{id}.json
    method: updateTagGroup
    httpMethod: put
    tag: Tags
    typeScriptTag: tags
    description: Update tag group
    parameters:
      - name: id
        schema: string
        required: true
        description: ''
      - name: name
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /tags.json
    method: list
    httpMethod: get
    tag: Tags
    typeScriptTag: tags
    description: Get a list of tags
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /tag/{name}.json
    method: getSpecificTag
    httpMethod: get
    tag: Tags
    typeScriptTag: tags
    description: Get a specific tag
    parameters:
      - name: name
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /t/{id}/posts.json
    method: getSpecificPosts
    httpMethod: get
    tag: Topics
    typeScriptTag: topics
    description: Get specific posts from a topic
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: id
        schema: string
        required: true
        description: ''
      - name: post_ids[]
        schema: integer
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /t/{id}.json
    method: removeTopicById
    httpMethod: delete
    tag: Topics
    typeScriptTag: topics
    description: Remove a topic
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: id
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: specific posts
  - url: /t/{id}.json
    method: getSingleTopic
    httpMethod: get
    tag: Topics
    typeScriptTag: topics
    description: Get a single topic
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: id
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /t/-/{id}.json
    method: updateTopicByIdJson
    httpMethod: put
    tag: Topics
    typeScriptTag: topics
    description: Update a topic
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: id
        schema: string
        required: true
        description: ''
      - name: topic
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /t/{id}/invite.json
    method: sendInviteToTopic
    httpMethod: post
    tag: Topics
    typeScriptTag: topics
    description: Invite to topic
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: id
        schema: string
        required: true
        description: ''
      - name: user
        schema: string
        description: ''
      - name: email
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /t/{id}/bookmark.json
    method: updateBookmark
    httpMethod: put
    tag: Topics
    typeScriptTag: topics
    description: Bookmark topic
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: id
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: topic updated
  - url: /t/{id}/status.json
    method: updateStatusOfTopic
    httpMethod: put
    tag: Topics
    typeScriptTag: topics
    description: Update the status of a topic
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: id
        schema: string
        required: true
        description: ''
      - name: status
        schema: string
        required: true
        description: ''
      - name: enabled
        schema: string
        required: true
        description: ''
      - name: until
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /latest.json
    method: getLatestTopics
    httpMethod: get
    tag: Topics
    typeScriptTag: topics
    description: Get the latest topics
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: order
        schema: string
        description: |-
          Enum: `default`, `created`, `activity`, `views`, `posts`, `category`,
          `likes`, `op_likes`, `posters`
      - name: ascending
        schema: string
        description: Defaults to `desc`, add `ascending=true` to sort asc
    responses:
      - statusCode: '200'
        description: ''
  - url: /top.json
    method: getTopTopicsByPeriod
    httpMethod: get
    tag: Topics
    typeScriptTag: topics
    description: Get the top topics filtered by period
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: period
        schema: string
        description: 'Enum: `all`, `yearly`, `quarterly`, `monthly`, `weekly`, `daily`'
    responses:
      - statusCode: '200'
        description: ''
  - url: /t/{id}/notifications.json
    method: setNotificationLevel
    httpMethod: post
    tag: Topics
    typeScriptTag: topics
    description: Set notification level
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: id
        schema: string
        required: true
        description: ''
      - name: notification_level
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /t/{id}/change-timestamp.json
    method: updateTimestampJson
    httpMethod: put
    tag: Topics
    typeScriptTag: topics
    description: Update topic timestamp
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: id
        schema: string
        required: true
        description: ''
      - name: timestamp
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /t/{id}/timer.json
    method: createTopicTimer
    httpMethod: post
    tag: Topics
    typeScriptTag: topics
    description: Create topic timer
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: id
        schema: string
        required: true
        description: ''
      - name: time
        schema: string
        description: ''
      - name: status_type
        schema: string
        description: ''
      - name: based_on_last_post
        schema: boolean
        description: ''
      - name: category_id
        schema: integer
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /t/external_id/{external_id}.json
    method: getByExternalId
    httpMethod: get
    tag: Topics
    typeScriptTag: topics
    description: Get topic by external_id
    parameters:
      - name: externalId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: default
        description: redirects to /t/{topic_id}.json
  - url: /uploads.json
    method: createNewUpload
    httpMethod: post
    tag: Uploads
    typeScriptTag: uploads
    description: Creates an upload
    parameters:
      - name: type
        schema: string
        required: true
        description: ''
      - name: user_id
        schema: integer
        required: false
        description: ''
      - name: synchronous
        schema: boolean
        required: false
        description: ''
      - name: file
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /uploads/generate-presigned-put.json
    method: initiateDirectExternalUpload
    httpMethod: post
    tag: Uploads
    typeScriptTag: uploads
    description: Initiates a direct external upload
    parameters:
      - name: type
        schema: string
        required: true
        description: ''
      - name: file_name
        schema: string
        required: true
        description: ''
      - name: file_size
        schema: integer
        required: true
        description: ''
      - name: metadata
        schema: object
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /uploads/complete-external-upload.json
    method: completeExternalUpload
    httpMethod: post
    tag: Uploads
    typeScriptTag: uploads
    description: Completes a direct external upload
    parameters:
      - name: unique_identifier
        schema: string
        required: true
        description: ''
      - name: for_private_message
        schema: string
        required: false
        description: ''
      - name: for_site_setting
        schema: string
        required: false
        description: ''
      - name: pasted
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /uploads/create-multipart.json
    method: createMultipartExternalUpload
    httpMethod: post
    tag: Uploads
    typeScriptTag: uploads
    description: Creates a multipart external upload
    parameters:
      - name: upload_type
        schema: string
        required: true
        description: ''
      - name: file_name
        schema: string
        required: true
        description: ''
      - name: file_size
        schema: integer
        required: true
        description: ''
      - name: metadata
        schema: object
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /uploads/batch-presign-multipart-parts.json
    method: generatePresignedUrlsForMultipartParts
    httpMethod: post
    tag: Uploads
    typeScriptTag: uploads
    description: Generates batches of presigned URLs for multipart parts
    parameters:
      - name: part_numbers
        schema: array
        required: true
        description: ''
      - name: unique_identifier
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /uploads/abort-multipart.json
    method: abortMultipartUpload
    httpMethod: post
    tag: Uploads
    typeScriptTag: uploads
    description: Abort multipart upload
    parameters:
      - name: external_upload_identifier
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /uploads/complete-multipart.json
    method: completeMultipartUpload
    httpMethod: post
    tag: Uploads
    typeScriptTag: uploads
    description: Complete multipart upload
    parameters:
      - name: unique_identifier
        schema: string
        required: true
        description: ''
      - name: parts
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /user-badges/{username}.json
    method: listUserBadges
    httpMethod: get
    tag: Badges
    typeScriptTag: badges
    description: List badges for a user
    parameters:
      - name: username
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /users.json
    method: createUser
    httpMethod: post
    tag: Users
    typeScriptTag: users
    description: Creates a user
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: name
        schema: string
        required: true
        description: ''
      - name: email
        schema: string
        required: true
        description: ''
      - name: password
        schema: string
        required: true
        description: ''
      - name: username
        schema: string
        required: true
        description: ''
      - name: active
        schema: boolean
        required: false
        description: ''
      - name: approved
        schema: boolean
        required: false
        description: ''
      - name: user_fields[1]
        schema: boolean
        required: false
        description: ''
      - name: external_ids
        schema: object
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /u/{username}.json
    method: getUserByUsername
    httpMethod: get
    tag: Users
    typeScriptTag: users
    description: Get a single user by username
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: username
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /u/{username}.json
    method: updateUserDetails
    httpMethod: put
    tag: Users
    typeScriptTag: users
    description: Update a user
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: username
        schema: string
        required: true
        description: ''
      - name: name
        schema: string
        description: ''
      - name: external_ids
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /u/by-external/{external_id}.json
    method: getUserByExternalId
    httpMethod: get
    tag: Users
    typeScriptTag: users
    description: Get a user by external_id
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: externalId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /u/by-external/{provider}/{external_id}.json
    method: getIdentityProviderExternalId
    httpMethod: get
    tag: Users
    typeScriptTag: users
    description: Get a user by identity provider external ID
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
      - name: apiUsername
        schema: string
        required: true
        description: ''
      - name: provider
        schema: string
        required: true
        description: |-
          Authentication provider name. Can be found in the provider callback
          URL: `/auth/{provider}/callback`
      - name: externalId
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /u/{username}/preferences/avatar/pick.json
    method: updateAvatar
    httpMethod: put
    tag: Users
    typeScriptTag: users
    description: Update avatar
    parameters:
      - name: username
        schema: string
        required: true
        description: ''
      - name: upload_id
        schema: integer
        required: true
        description: ''
      - name: type
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /u/{username}/preferences/email.json
    method: updateEmailPreferences
    httpMethod: put
    tag: Users
    typeScriptTag: users
    description: Update email
    parameters:
      - name: username
        schema: string
        required: true
        description: ''
      - name: email
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: email updated
  - url: /u/{username}/preferences/username.json
    method: updatePreferencesJson
    httpMethod: put
    tag: Users
    typeScriptTag: users
    description: Update username
    parameters:
      - name: username
        schema: string
        required: true
        description: ''
      - name: new_username
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: username updated
  - url: /directory_items.json
    method: listPublicUser
    httpMethod: get
    tag: Users
    typeScriptTag: users
    description: Get a public list of users
    parameters:
      - name: period
        schema: string
        required: true
        description: ''
      - name: order
        schema: string
        required: true
        description: ''
      - name: asc
        schema: string
        description: ''
      - name: page
        schema: integer
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /admin/users/{id}.json
    method: deleteUserByIdJson
    httpMethod: delete
    tag: Users
    typeScriptTag: users
    description: Delete a user
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
      - name: delete_posts
        schema: boolean
        description: ''
      - name: block_email
        schema: boolean
        description: ''
      - name: block_urls
        schema: boolean
        description: ''
      - name: block_ip
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /admin/users/{id}.json
    method: getUserByIdJson
    httpMethod: get
    tag: Users
    typeScriptTag: users
    description: Get a user by id
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /admin/users/{id}/activate.json
    method: activateUser
    httpMethod: put
    tag: Users
    typeScriptTag: users
    description: Activate a user
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /admin/users/{id}/deactivate.json
    method: deactivateUser
    httpMethod: put
    tag: Users
    typeScriptTag: users
    description: Deactivate a user
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /admin/users/{id}/suspend.json
    method: suspendByIdJson
    httpMethod: put
    tag: Users
    typeScriptTag: users
    description: Suspend a user
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
      - name: suspend_until
        schema: string
        required: true
        description: ''
      - name: reason
        schema: string
        required: true
        description: ''
      - name: message
        schema: string
        required: false
        description: ''
      - name: post_action
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /admin/users/{id}/silence.json
    method: silenceById
    httpMethod: put
    tag: Users
    typeScriptTag: users
    description: Silence a user
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
      - name: silenced_till
        schema: string
        description: ''
      - name: reason
        schema: string
        description: ''
      - name: message
        schema: string
        description: ''
      - name: post_action
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /admin/users/{id}/anonymize.json
    method: anonymizeByIdJson
    httpMethod: put
    tag: Users
    typeScriptTag: users
    description: Anonymize a user
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /admin/users/{id}/log_out.json
    method: logOutUserAction
    httpMethod: post
    tag: Users
    typeScriptTag: users
    description: Log a user out
    parameters:
      - name: id
        schema: integer
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /user_avatar/{username}/refresh_gravatar.json
    method: refreshGravatarPost
    httpMethod: post
    tag: Users
    typeScriptTag: users
    description: Refresh gravatar
    parameters:
      - name: username
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /admin/users/list/{flag}.json
    method: getListOfUsers
    httpMethod: get
    tag: Users
    typeScriptTag: users
    description: Get a list of users
    parameters:
      - name: flag
        schema: string
        required: true
        description: ''
      - name: order
        schema: string
        description: ''
      - name: asc
        schema: string
        description: ''
      - name: page
        schema: integer
        description: ''
      - name: showEmails
        schema: boolean
        description: |-
          Include user email addresses in response. These requests will
          be logged in the staff action logs.
      - name: stats
        schema: boolean
        description: Include user stats information
      - name: email
        schema: string
        description: Filter to the user with this email address
      - name: ip
        schema: string
        description: Filter to users with this IP address
    responses:
      - statusCode: '200'
        description: ''
  - url: /user_actions.json
    method: listUserActions
    httpMethod: get
    tag: Users
    typeScriptTag: users
    description: Get a list of user actions
    parameters:
      - name: offset
        schema: integer
        required: true
        description: ''
      - name: username
        schema: string
        required: true
        description: ''
      - name: filter
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /session/forgot_password.json
    method: sendPasswordResetEmail
    httpMethod: post
    tag: Users
    typeScriptTag: users
    description: Send password reset email
    parameters:
      - name: login
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /users/password-reset/{token}.json
    method: changePasswordAction
    httpMethod: put
    tag: Users
    typeScriptTag: users
    description: Change password
    parameters:
      - name: token
        schema: string
        required: true
        description: ''
      - name: username
        schema: string
        required: true
        description: ''
      - name: password
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: success response
  - url: /u/{username}/emails.json
    method: getEmails
    httpMethod: get
    tag: Users
    typeScriptTag: users
    description: Get email addresses belonging to a user
    parameters:
      - name: username
        schema: string
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
numberOfSchemas: 120
apiDescription: >
  This page contains the documentation on how to use Discourse through API
  calls.


  > Note: For any endpoints not listed you can follow the

  [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576)

  guide to figure out how to use an API endpoint.


  ### Request Content-Type


  The Content-Type for POST and PUT requests can be set to
  `application/x-www-form-urlencoded`,

  `multipart/form-data`, or `application/json`.


  ### Endpoint Names and Response Content-Type


  Most API endpoints provide the same content as their HTML counterparts. For
  example

  the URL `/categories` serves a list of categories, the `/categories.json` API
  provides the

  same information in JSON format.


  Instead of sending API requests to `/categories.json` you may also send them
  to `/categories`

  and add an `Accept: application/json` header to the request to get the JSON
  response.

  Sending requests with the `Accept` header is necessary if you want to use URLs

  for related endpoints returned by the API, such as pagination URLs.

  These URLs are returned without the `.json` prefix so you need to add the
  header in

  order to get the correct response format.


  ### Authentication


  Some endpoints do not require any authentication, pretty much anything else
  will

  require you to be authenticated.


  To become authenticated you will need to create an API Key from the admin
  panel.


  Once you have your API Key you can pass it in along with your API Username

  as an HTTP header like this:


  ```

  curl -X GET "http://127.0.0.1:3000/admin/users/list/active.json" \

  -H "Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19"
  \

  -H "Api-Username: system"

  ```


  and this is how POST requests will look:


  ```

  curl -X POST "http://127.0.0.1:3000/categories" \

  -H "Content-Type: multipart/form-data;" \

  -H "Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19"
  \

  -H "Api-Username: system" \

  -F "name=89853c20-4409-e91a-a8ea-f6cdff96aaaa" \

  -F "color=49d9e9" \

  -F "text_color=f0fcfd"

  ```


  ### Boolean values


  If an endpoint accepts a boolean be sure to specify it as a lowercase

  `true` or `false` value unless noted otherwise.
