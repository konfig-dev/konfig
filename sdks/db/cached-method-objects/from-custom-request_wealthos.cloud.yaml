hash: ab72e9b88c165198e812442dd110cb75e33b638dd3c2628f43095210502906a8
methodObjects:
  - url: /tenant/test/hello-world-be
    method: getBeGreetings
    httpMethod: get
    tag: Test Methods
    typeScriptTag: testMethods
    description: Wealth Manager Greeting for BE
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/investors/v1
    method: getAll
    httpMethod: get
    tag: Investors
    typeScriptTag: investors
    description: Get All Investors
    parameters:
      - name: pageSize
        schema: string
        required: false
        description: >-
          Page size for the query. This end-point has paginations capabilities.
          This value should be a positive integer value. If this is not provided
          or provided without page_number, both page_size and page_number will
          be defaulted to 500 and 1. Max page size is 2000. Results are sorted
          decending order of the created date & time.
      - name: pageNumber
        schema: string
        required: false
        description: >-
          Page number for the query. This end-point has paginations
          capabilities. This value should be a positive integer value. If this
          is not provided or provided without page_size, both page_size and
          page_number will be defaulted to 500 and 1. Results are sorted
          decending order of the created date & time.
      - name: sort
        schema: string
        required: false
        description: Sorting order; results are sorted by creation time.
        default: desc
    responses:
      - statusCode: '200'
        description: Array of investors
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/investors/v1
    method: createNewInvestor
    httpMethod: post
    tag: Investors
    typeScriptTag: investors
    description: Create Investor
    parameters:
      - name: title
        schema: string
        required: false
        description: ''
        example: Mr.
      - name: gender
        schema: string
        required: false
        description: ''
        example: male
      - name: first_name
        schema: string
        required: true
        description: ''
        example: David
      - name: last_name
        schema: string
        required: true
        description: ''
        example: Brown
      - name: status
        schema: string
        required: false
        description: ''
        example: kyc_pending
      - name: email
        schema: string
        required: false
        description: ''
        example: davidbrown@gmail.com
      - name: mobile_number
        schema: string
        required: false
        description: ''
        example: '+441234567890'
      - name: home_number
        schema: string
        required: false
        description: ''
        example: '+441234587830'
      - name: office_number
        schema: string
        required: false
        description: ''
        example: '+442072343456'
      - name: nationality
        schema: string
        required: true
        description: ''
        example: GBR
      - name: tax_id
        schema: string
        required: true
        description: ''
        example: AB123456C
      - name: kyc_aml_status
        schema: string
        required: false
        description: ''
        example: not_started
        default: not_started
      - name: dealing_status
        schema: string
        required: false
        description: ''
        example: inactive
        default: inactive
      - name: id_numbers
        schema: array
        required: false
        description: ''
        example:
          - id_type: passport
            id_number: '2324839048381'
      - name: address
        schema: object
        required: true
        description: ''
      - name: mifid_tax_id
        schema: string
        required: false
        description: ''
        example: '2382392274'
      - name: tax_residency_compliant
        schema: boolean
        required: true
        description: ''
        example: true
      - name: date_of_birth
        schema: string
        required: true
        description: ''
        example: '1990-12-20'
      - name: retirement_age
        schema: number
        required: false
        description: ''
        example: 60
      - name: tax_residence
        schema: string
        required: false
        description: ''
        example: GB-ENG
      - name: employment_status
        schema: string
        required: false
        description: ''
        example: employed
      - name: mpaa_triggered
        schema: boolean
        required: false
        description: ''
        example: true
      - name: mpaa_triggered_date
        schema: string
        required: false
        description: ''
        example: '2023-01-30'
      - name: workplace_employers
        schema: array
        required: false
        description: ''
      - name: lta_protection_details
        schema: array
        required: false
        description: ''
        example:
          - lta_protection_type: primary
            lta_primary_protection_factor: '20.00'
          - lta_protection_type: fp14
      - name: expression_of_wish
        schema: object
        required: false
        description: ''
      - name: bank_accounts
        schema: array
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: JSON for the Investor creation response resource type
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/investors/v1/{investor_id}
    method: getInvestorDetails
    httpMethod: get
    tag: Investors
    typeScriptTag: investors
    description: Get Investor
    parameters:
      - name: investorId
        schema: string
        required: true
        description: Investor Id
        example: INVESTOR_ID
    responses:
      - statusCode: '200'
        description: JSON for the Investor resource type
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/investors/v1/{investor_id}
    method: updateInvestorDetails
    httpMethod: patch
    tag: Investors
    typeScriptTag: investors
    description: Update Investor
    parameters:
      - name: investorId
        schema: string
        required: true
        description: Investor Id
        example: INVESTOR_ID
      - name: title
        schema: string
        required: false
        description: ''
        example: Mr.
      - name: gender
        schema: string
        required: false
        description: ''
        example: male
      - name: first_name
        schema: string
        required: false
        description: ''
        example: David
      - name: last_name
        schema: string
        required: false
        description: ''
        example: Brown
      - name: status
        schema: string
        required: false
        description: ''
        example: kyc_pending
      - name: email
        schema: string
        required: false
        description: ''
        example: davidbrown@gmail.com
      - name: mobile_number
        schema: string
        required: false
        description: ''
        example: '+441234567890'
      - name: home_number
        schema: string
        required: false
        description: ''
        example: '+441234587830'
      - name: office_number
        schema: string
        required: false
        description: ''
        example: '+442072343456'
      - name: nationality
        schema: string
        required: false
        description: ''
        example: GBR
      - name: tax_id
        schema: string
        required: false
        description: ''
        example: AB123456C
      - name: kyc_aml_status
        schema: string
        required: false
        description: ''
        example: not_started
      - name: dealing_status
        schema: string
        required: false
        description: ''
        example: inactive
      - name: id_numbers
        schema: array
        required: false
        description: ''
        example:
          - id_type: passport
            id_number: '2324839048381'
      - name: address
        schema: object
        required: false
        description: ''
      - name: mifid_tax_id
        schema: string
        required: false
        description: ''
        example: '2382392274'
      - name: tax_residency_compliant
        schema: boolean
        required: false
        description: ''
        example: true
      - name: date_of_birth
        schema: string
        required: false
        description: ''
        example: '1990-12-20'
      - name: retirement_age
        schema: number
        required: false
        description: ''
        example: 60
      - name: tax_residence
        schema: string
        required: false
        description: ''
        example: GB-ENG
      - name: employment_status
        schema: string
        required: false
        description: ''
        example: employed
      - name: mpaa_triggered
        schema: boolean
        required: false
        description: ''
        example: true
      - name: mpaa_triggered_date
        schema: string
        required: false
        description: ''
        example: '2023-01-30'
      - name: workplace_employers
        schema: array
        required: false
        description: ''
      - name: lta_protection_details
        schema: array
        required: false
        description: ''
        example:
          - lta_protection_type: primary
            lta_primary_protection_factor: '20.00'
          - lta_protection_type: fp14
      - name: expression_of_wish
        schema: object
        required: false
        description: ''
      - name: kyc_aml_status_last_updated
        schema: string
        required: false
        description: ''
        example: '2020-08-12T07:36:05.884Z'
      - name: reference_version
        schema: integer
        required: true
        description: ''
        example: 1
      - name: created_at
        schema: string
        required: false
        description: ''
        example: '2020-08-12T07:36:05.884Z'
      - name: updated_at
        schema: string
        required: false
        description: ''
        example: '2020-07-10T07:36:05.884Z'
      - name: deleted_at
        schema: string
        required: false
        description: ''
        example: null
    responses:
      - statusCode: '200'
        description: JSON for the Investor resource type
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/financial-products/v1
    method: listAll
    httpMethod: get
    tag: Financial Products
    typeScriptTag: financialProducts
    description: Get All Financial Products
    parameters:
      - name: productTypes
        schema: string
        required: false
        description: multiple product types as a comma seperated string
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/payments/v1/{transaction_id}
    method: getByTransactionId
    httpMethod: get
    tag: Payments
    typeScriptTag: payments
    description: Get Payment by Transaction Id
    parameters:
      - name: transactionId
        schema: string
        required: true
        description: Transaction Id
        example: TRANSACTION_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/pots/v1
    method: getInvestorPots
    httpMethod: get
    tag: Pots, Holdings and Transactions
    typeScriptTag: pots,HoldingsAndTransactions
    description: Get all pots for an investor
    parameters:
      - name: investorId
        schema: string
        required: true
        description: Investor Id
        example: INVESTOR_ID
      - name: financialProductId
        schema: string
        description: multiple financial product ids as comma seperated string
    responses:
      - statusCode: '200'
        description: Array of all active investment pots created by the investor
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/pots/v1
    method: createNewPots
    httpMethod: post
    tag: Pots, Holdings and Transactions
    typeScriptTag: pots,HoldingsAndTransactions
    description: Create new pots
    parameters:
      - name: request_id
        schema: string
        required: true
        description: ''
        example: REQUEST_ID
      - name: investor_id
        schema: array
        required: true
        description: ''
      - name: financial_product_id
        schema: string
        required: true
        description: ''
        example: sipp_accumulation
      - name: pots
        schema: array
        required: true
        description: ''
        example:
          - pot_name: Retirement Pot 1
            portfolio_template_id: pft-c60c9472-6668-4f7a-aa69
            pot_currency: GBP
            status: active
          - pot_name: Retirement Pot 2
            portfolio_template_id: pft-c60c9472-6668-4f7a-aa69
            pot_currency: CHF
            status: active
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/pots/v1/evaluate-rebalance
    method: evaluatePortfolioDeviation
    httpMethod: post
    tag: Rebalance
    typeScriptTag: rebalance
    description: Evaluate rebalance
    parameters:
      - name: request_id
        schema: string
        required: true
        description: ''
        example: REQUEST_ID
      - name: type
        schema: string
        required: true
        description: ''
        example: pot
      - name: values
        schema: array
        required: true
        description: ''
        example:
          - pot-UKW3452850
          - pot-SDQ5239730
    responses:
      - statusCode: '202'
        description: Contains rebalance request id and status
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/pots/v1/rebalance-evaluation-status
    method: getEvaluationDetails
    httpMethod: get
    tag: Rebalance
    typeScriptTag: rebalance
    description: Retrieve rebalance evaluation request details
    parameters:
      - name: rebalanceEvaluationId
        schema: string
        required: true
        description: Unique identifier of the rebalance evaluation request
        example: REBALANCE_EVALUATION_ID
    responses:
      - statusCode: '200'
        description: contains array for pot details
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/pots/v1/rebalance
    method: triggerRebalanceProcess
    httpMethod: post
    tag: Rebalance
    typeScriptTag: rebalance
    description: Trigger rebalance process
    parameters:
      - name: request_id
        schema: string
        required: true
        description: ''
        example: REQUEST_ID
      - name: type
        schema: string
        required: true
        description: ''
        example: pot
      - name: values
        schema: array
        required: true
        description: ''
        example:
          - pot-UKW3452850
          - pot-SDQ5239730
    responses:
      - statusCode: '202'
        description: Containes the response for the rebalance request
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/pots/v1/rebalance-results
    method: requestDetails
    httpMethod: get
    tag: Rebalance
    typeScriptTag: rebalance
    description: Retrieve rebalance request details
    parameters:
      - name: rebalanceRequestId
        schema: string
        required: true
        description: Unique identifier of the rebalance request
        example: REBALANCE_REQUEST_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/pots/v1/value
    method: listTotalPotValue
    httpMethod: get
    tag: Pots, Holdings and Transactions
    typeScriptTag: pots,HoldingsAndTransactions
    description: Get total value of all pots of an investor
    parameters:
      - name: investorId
        schema: string
        required: true
        description: Investor Id
        example: INVESTOR_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/pots/v1/holdings
    method: getHoldingsByPot
    httpMethod: get
    tag: Pots, Holdings and Transactions
    typeScriptTag: pots,HoldingsAndTransactions
    description: Get total holdings of an Investor
    parameters:
      - name: investorId
        schema: string
        required: true
        description: Id of the investor
        example: INVESTOR_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/pots/v1/{pot_id}
    method: getPot
    httpMethod: get
    tag: Pots, Holdings and Transactions
    typeScriptTag: pots,HoldingsAndTransactions
    description: Retrive existing pot from pot id
    parameters:
      - name: potId
        schema: string
        required: true
        description: Pot Id
        example: POT_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/pots/v1/{pot_id}
    method: updatePotDetails
    httpMethod: patch
    tag: Pots, Holdings and Transactions
    typeScriptTag: pots,HoldingsAndTransactions
    description: Update existing Pot details
    parameters:
      - name: potId
        schema: string
        required: true
        description: Pot Id
        example: POT_ID
      - name: pot_name
        schema: string
        required: false
        description: ''
        example: Retirement Pot
      - name: portfolio_template_id
        schema: string
        required: false
        description: ''
        example: pft-c60c9472-6668-4f7a-aa69
      - name: status
        schema: string
        required: false
        description: ''
      - name: reference_version
        schema: integer
        required: true
        description: ''
        example: 1
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/pots/v1/{pot_id}/value
    method: getCurrentPotValue
    httpMethod: get
    tag: Pots, Holdings and Transactions
    typeScriptTag: pots,HoldingsAndTransactions
    description: Get current value of a pot
    parameters:
      - name: potId
        schema: string
        required: true
        description: Pot Id
        example: POT_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/pots/v1/{pot_id}/holdings
    method: getCurrentHoldings
    httpMethod: get
    tag: Pots, Holdings and Transactions
    typeScriptTag: pots,HoldingsAndTransactions
    description: Get current holdings of a pot
    parameters:
      - name: potId
        schema: string
        required: true
        description: Pot Id
        example: POT_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/pots/v1/{pot_id}/transactions
    method: getPotTransactions
    httpMethod: get
    tag: Pots, Holdings and Transactions
    typeScriptTag: pots,HoldingsAndTransactions
    description: Get pending & past transactions of a pot
    parameters:
      - name: potId
        schema: string
        required: true
        description: Pot Id
        example: POT_ID
      - name: from
        schema: string
        required: false
        description: >-
          From timestamp for the query. This must be in ISO format. Eg.
          2021-08-12T07:54:47.011Z. If not present the from is set to
          2000-01-01T00:00:00.000Z
      - name: to
        schema: string
        required: false
        description: >-
          To timestamp for the query. This must be in ISO format. Eg.
          2021-08-12T07:54:47.011Z. If not present the to is set to current
          time.
      - name: subTransactionType
        schema: string
        required: false
        description: Sub transaction type of the transactions to be retrieved from the API
      - name: pageSize
        schema: string
        required: false
        description: >-
          Page size for the query. This end-point has paginations capabilities.
          This value should be a positive integer value. If this is not provided
          or provided without page_number, both page_size and page_number will
          be defaulted to 1000 and 1. Max page size is 8000. Results are sorted
          decending order of the created date & time.
      - name: pageNumber
        schema: string
        required: false
        description: >-
          Page number for the query. This end-point has paginations
          capabilities. This value should be a positive integer value. If this
          is not provided or provided without page_size, both page_size and
          page_number will be defaulted to 1000 and 1. Results are sorted
          decending order of the created date & time.
      - name: sort
        schema: string
        required: false
        description: Sorting order; results are sorted by creation time.
        default: desc
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/investment-products/v1
    method: getConfiguredProducts
    httpMethod: get
    tag: Investment Products
    typeScriptTag: investmentProducts
    description: Get Configured Investment Products
    parameters:
      - name: status
        schema: string
        description: >-
          status of investment product. If empty will return all investment
          products.
      - name: pageSize
        schema: string
        required: false
        description: >-
          Page size for the query. This end-point has paginations capabilities.
          This value should be a positive integer value. If this is not provided
          or provided without page_number, both page_size and page_number will
          be defaulted to 1000 and 1. Max page size is 3000. Results are sorted
          decending order of the created date & time.
      - name: pageNumber
        schema: string
        required: false
        description: >-
          Page number for the query. This end-point has paginations
          capabilities. This value should be a positive integer value. If this
          is not provided or provided without page_size, both page_size and
          page_number will be defaulted to 1000 and 1. Results are sorted
          decending order of the created date & time.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/investment-products/v1/current-prices
    method: getCurrentPrices
    httpMethod: get
    tag: Investment Products
    typeScriptTag: investmentProducts
    description: Get Current Prices of all Investment Products
    parameters:
      - name: pageSize
        schema: string
        required: false
        description: >-
          Page size for the query. This end-point has paginations capabilities.
          This value should be a positive integer value. If this is not provided
          or provided without page_number, both page_size and page_number will
          be defaulted to 1000 and 1. Max page size is 15000. Results are sorted
          decending order of the created date & time.
      - name: pageNumber
        schema: string
        required: false
        description: >-
          Page number for the query. This end-point has paginations
          capabilities. This value should be a positive integer value. If this
          is not provided or provided without page_size, both page_size and
          page_number will be defaulted to 1000 and 1. Results are sorted
          decending order of the created date & time.
      - name: status
        schema: string
        description: >-
          status of investment product. If empty will return all investment
          products.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/investment-products/v1/{investment_product_id}
    method: getDetails
    httpMethod: get
    tag: Investment Products
    typeScriptTag: investmentProducts
    description: Get details of a given Investment Product
    parameters:
      - name: investmentProductId
        schema: string
        required: true
        description: Investment Product Id
        example: INVESTMENT_PRODUCT_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/investment-products/v1/{investment_product_id}/current-price
    method: getCurrentPrice
    httpMethod: get
    tag: Investment Products
    typeScriptTag: investmentProducts
    description: Get Current Price of an Investment Product
    parameters:
      - name: investmentProductId
        schema: string
        required: true
        description: Investment Product Id
        example: INVESTMENT_PRODUCT_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/portfolio-templates/v1/{portfolio_template_id}
    method: getTemplateById
    httpMethod: get
    tag: Portfolio Templates
    typeScriptTag: portfolioTemplates
    description: Retrive existing Portfolio template
    parameters:
      - name: portfolioTemplateId
        schema: string
        required: true
        description: Portfolio ID
        example: PORTFOLIO_TEMPLATE_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/portfolio-templates/v1/{portfolio_template_id}
    method: updateTemplate
    httpMethod: patch
    tag: Portfolio Templates
    typeScriptTag: portfolioTemplates
    description: Update existing Portfolio template
    parameters:
      - name: portfolioTemplateId
        schema: string
        required: true
        description: Portfolio ID
        example: PORTFOLIO_TEMPLATE_ID
      - name: portfolio_name
        schema: string
        required: false
        description: ''
        example: PFT5689
      - name: ratios
        schema: array
        required: false
        description: ''
      - name: reference_version
        schema: integer
        required: true
        description: ''
        example: 1
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/transactions/v1/buy
    method: executeBuyTransaction
    httpMethod: post
    tag: Transactions
    typeScriptTag: transactions
    description: >-
      Execute Buy
      Transaction(https://wos-gb.sandbox.wealthos.cloud/admin/documentation
    parameters: []
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/transactions/v1/sell
    method: executeSellTransaction
    httpMethod: post
    tag: Transactions
    typeScriptTag: transactions
    description: >-
      Execute Sell
      Transaction(https://wos-gb.sandbox.wealthos.cloud/admin/documentation
    parameters: []
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/transactions/v1/switch
    method: getSwitchStatus
    httpMethod: get
    tag: Switch Instruction
    typeScriptTag: switchInstruction
    description: Retrieve Switch instruction from Switch ID
    parameters:
      - name: switchTransactionId
        schema: string
        required: true
        description: Unique identifier of the switch instruction
        example: SWITCH_TRANSACTION_ID
      - name: includeDetails
        schema: boolean
        description: >-
          If set to `true` details of individual buy and sell
          (https://wos-gb.sandbox.wealthos.cloud/admin/documentation
          transactions will be included
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/transactions/v1/switch
    method: executeSwitchTransaction
    httpMethod: post
    tag: Switch Instruction
    typeScriptTag: switchInstruction
    description: Execute Switch Instruction
    parameters:
      - name: request_id
        schema: string
        required: true
        description: ''
        example: REQUEST_ID
      - name: pot_id
        schema: string
        required: true
        description: ''
        example: pot-UKW3452850
      - name: sell_instructions
        schema: array
        required: true
        description: ''
      - name: buy_instructions
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/rates/v1
    method: getRateDetails
    httpMethod: get
    tag: Rates
    typeScriptTag: rates
    description: Get Configured Rates
    parameters:
      - name: rateType
        schema: string
        required: true
        description: Type of Rate
        example: RATE_TYPE
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/transactions/v1/fee
    method: createFeeTransaction
    httpMethod: post
    tag: Fees
    typeScriptTag: fees
    description: Create Fee
    parameters:
      - name: request_id
        schema: string
        required: true
        description: ''
        example: REQUEST_ID
      - name: pot_id
        schema: string
        required: true
        description: ''
        example: pot-UKW3452850
      - name: currency
        schema: string
        required: true
        description: ''
        example: GBP
      - name: transaction_value
        schema: string
        required: true
        description: ''
        example: '123.45'
      - name: sub_transaction_type
        schema: string
        required: true
        description: ''
        example: Custody fees
    responses:
      - statusCode: '201'
        description: JSON for the Fee creation response
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/transactions/v1/withdrawal
    method: createSingleWithdrawal
    httpMethod: post
    tag: Withdrawals
    typeScriptTag: withdrawals
    description: Create Withdrawal
    parameters:
      - name: request_id
        schema: string
        required: true
        description: ''
        example: REQUEST_ID
      - name: pot_id
        schema: string
        required: true
        description: ''
        example: pot-SDQ5659730
      - name: currency
        schema: string
        required: true
        description: ''
        example: USD
      - name: transaction_value
        schema: string
        required: true
        description: ''
        example: '123.45'
      - name: sub_transaction_type
        schema: string
        required: true
        description: ''
        example: Withdrawal
      - name: bank_account_id
        schema: string
        required: true
        description: ''
        example: ba-example-bank-account
    responses:
      - statusCode: '201'
        description: JSON for the Withdrawal creation response
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/withdrawals/v1/{transaction_id}
    method: updateWithdrawalPaymentDate
    httpMethod: patch
    tag: LISA Transactions
    typeScriptTag: lisaTransactions
    description: Update existing LISA withdrawal transaction
    parameters:
      - name: transactionId
        schema: string
        required: true
        description: Transaction ID of the withdrawal transaction that needs to be updated
        example: TRANSACTION_ID
      - name: request_id
        schema: string
        required: true
        description: ''
        example: 20b904f7-8d05-4efd-bd36-4ec3b1ce8e03
      - name: reference_verison
        schema: integer
        required: true
        description: ''
        example: 1
      - name: trade_date
        schema: string
        required: true
        description: ''
        example: '2020-09-01'
    responses:
      - statusCode: '201'
        description: JSON for the LISA Withdrawal update response
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/utility/v1/upload-a-file
    method: copyFileToInternalStore
    httpMethod: post
    tag: Utility
    typeScriptTag: utility
    description: Upload a file
    parameters:
      - name: file_paths
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/bank-accounts/v1
    method: getAll
    httpMethod: get
    tag: Bank Accounts
    typeScriptTag: bankAccounts
    description: Retrieve all the bank accounts of a particular investor
    parameters:
      - name: investorId
        schema: string
        required: true
        description: Valid Investor Id
        example: INVESTOR_ID
    responses:
      - statusCode: '200'
        description: Array of bank accounts
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/bank-accounts/v1
    method: createNewAccount
    httpMethod: post
    tag: Bank Accounts
    typeScriptTag: bankAccounts
    description: Create new bank account
    parameters:
      - name: bank_account_id
        schema: string
        required: false
        description: ''
        example: ba-20b904f7-8d05-4efd-bd36-4ec3b1ce8e03
      - name: investor_id
        schema: string
        required: true
        description: ''
        example: inv-QXR38578
      - name: contributing_party_id
        schema: string
        required: false
        description: ''
        example: cem-ZWV37971
      - name: account_name
        schema: string
        required: true
        description: ''
        example: David Brown
      - name: bank_account_type
        schema: string
        required: true
        description: ''
        example: investor
      - name: default_account
        schema: string
        required: true
        description: ''
        example: 'no'
      - name: bank_account_number
        schema: string
        required: true
        description: ''
        example: '12345678'
      - name: account_status
        schema: string
        required: false
        description: ''
        example: active
      - name: sort_code
        schema: string
        required: false
        description: ''
        example: '123456'
      - name: building_society_roll_number
        schema: string
        required: false
        description: ''
        example: '12345672'
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/bank-accounts/v1/{bank_account_id}
    method: getBankAccountById
    httpMethod: get
    tag: Bank Accounts
    typeScriptTag: bankAccounts
    description: Retrieve existing bank account from bank account id
    parameters:
      - name: bankAccountId
        schema: string
        required: true
        description: Bank Account Id
        example: BANK_ACCOUNT_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/bank-accounts/v1/{bank_account_id}
    method: updateDetails
    httpMethod: patch
    tag: Bank Accounts
    typeScriptTag: bankAccounts
    description: Update existing bank account details
    parameters:
      - name: bankAccountId
        schema: string
        required: true
        description: Bank Account Id
        example: BANK_ACCOUNT_ID
      - name: account_name
        schema: string
        required: false
        description: ''
        example: David Brown
      - name: default_account
        schema: string
        required: false
        description: ''
        example: 'no'
      - name: account_status
        schema: string
        required: false
        description: ''
        example: inactive
      - name: reference_version
        schema: integer
        required: true
        description: ''
        example: 2
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/investor-accounts/v1
    method: getAll
    httpMethod: get
    tag: Investor Accounts
    typeScriptTag: investorAccounts
    description: Retrieve all the investor accounts
    parameters:
      - name: pageSize
        schema: string
        required: false
        description: >-
          Page size for the query. This end-point has paginations capabilities.
          This value should be a positive integer value. If this is not provided
          or provided without page_number, both page_size and page_number will
          be defaulted to 1000 and 1. Max page size is 4000. Results are sorted
          decending order of the created date & time.
      - name: pageNumber
        schema: string
        required: false
        description: >-
          Page number for the query. This end-point has paginations
          capabilities. This value should be a positive integer value. If this
          is not provided or provided without page_size, both page_size and
          page_number will be defaulted to 1000 and 1. Results are sorted
          decending order of the created date & time.
      - name: financialProductId
        schema: string
        description: Multiple financial product ids as comma seperated string
      - name: accountId
        schema: string
        description: Multiple account ids as comma seperated string
      - name: status
        schema: string
        description: Multiple statuses as comma seperated string
      - name: investorId
        schema: string
        description: Multiple investor ids as comma seperated string
    responses:
      - statusCode: '200'
        description: Array of investor accounts
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/investor-accounts/v1/{account_id}
    method: getAccountById
    httpMethod: get
    tag: Investor Accounts
    typeScriptTag: investorAccounts
    description: Retrieve existing investor account from account id
    parameters:
      - name: accountId
        schema: string
        required: true
        description: Unique identifier of the investor account
        example: ACCOUNT_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/investor-accounts/v1/{account_id}
    method: updateDetails
    httpMethod: patch
    tag: Investor Accounts
    typeScriptTag: investorAccounts
    description: Update Investor Account Details
    parameters:
      - name: accountId
        schema: string
        required: true
        description: Unique identifier of the investor account
        example: ACCOUNT_ID
      - name: custodian_account_reference
        schema: string
        required: false
        description: ''
        example: CAR573838383
      - name: custodian_id
        schema: string
        required: false
        description: ''
        example: CID594898ff
      - name: custodian_client_reference
        schema: string
        required: false
        description: ''
        example: CCR578fh8
      - name: regulator_advisor_id
        schema: string
        required: false
        description: ''
        example: RAI48483jd
      - name: reference_version
        schema: integer
        required: true
        description: ''
        example: 1
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/fees/v1/codes
    method: getFeeCodes
    httpMethod: get
    tag: Fees
    typeScriptTag: fees
    description: Get Fee Codes (https://wos-gb.sandbox.wealthos.cloud/admin/documentation
    parameters:
      - name: feeCodes
        schema: string
        required: false
        description: >-
          Fee codes to be retrieved from the API. Can give multiple fee codes as
          comma separated values. (ex- FF_50,PF_75)
      - name: status
        schema: string
        required: false
        description: Status of the fee code to be retrieved from the API (Active, Inactive)
    responses:
      - statusCode: '200'
        description: Definition of Get fee code response
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/fees/v1/setups
    method: getFeeSetups
    httpMethod: get
    tag: Fees
    typeScriptTag: fees
    description: Get Fee Setups (https://wos-gb.sandbox.wealthos.cloud/admin/documentation
    parameters:
      - name: feeCalculationEntity
        schema: string
        required: false
        description: >-
          Level at which the recurring fee sub transaction type is setup. Can
          give multiple fee calculation entities as comma separated values to be
          retrieved via the API.(Options - Investor, Financial Product,
          Portfolio)
      - name: feeCalculationMethod
        schema: string
        required: false
        description: >-
          Fee calculation method used for fee computation for this fee sub
          transaction type to be retrieved via the API.(Options - Daily Accrual)
      - name: subTransactionType
        schema: string
        required: false
        description: >-
          Fee Sub transaction type set up for the entity. Can give multiple Sub
          transaction types as comma separated values.(ex- Service fees,Platform
          fees)
      - name: feeCodes
        schema: string
        required: false
        description: >-
          Fee codes of the fee setup to be retrieved from the API. Can give
          multiple fee codes as comma separated values.(ex- FF_50,PF_75)
      - name: assignedTo
        schema: string
        required: false
        description: >-
          Instances of the entity for which the fee sub transaction type is
          setup.(Options - All, a single instance, or an array of instances of
          the entity)
      - name: startDate
        schema: string
        required: false
        description: >-
          Start date of the fee setup to be retrieved from the API. Should be on
          YYYY-MM-DD format.
      - name: endDate
        schema: string
        required: false
        description: >-
          End date of the fee setup to be retrieved from the API. Should be on
          YYYY-MM-DD format.
      - name: status
        schema: string
        required: false
        description: Status of the fee code to be retrieved from the API (Active, Inactive)
    responses:
      - statusCode: '200'
        description: Definition of Get fee setup response
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/fees/v1/exemptions
    method: getExemptions
    httpMethod: get
    tag: Fees
    typeScriptTag: fees
    description: >-
      Get Fee Exemptions
      (https://wos-gb.sandbox.wealthos.cloud/admin/documentation
    parameters:
      - name: feeExemptionEntity
        schema: string
        required: false
        description: >-
          Level at which the recurring fee sub transaction type is setup. Can
          give multiple fee exemption entities as comma separated values to be
          retrieved via the API.(Options - Investor,Financial Product,Portfolio)
      - name: subTransactionType
        schema: string
        required: false
        description: >-
          Fee Sub transaction type set up for the entity. Can give multiple Sub
          transaction types as comma separated values.(ex- Service fees,Platform
          fees)
      - name: assignedTo
        schema: string
        required: false
        description: >-
          Instances of the entity for which the fee sub transaction type is
          setup.(Options - All or a single instance )
      - name: startDate
        schema: string
        required: false
        description: >-
          Start date of the fee setup to be retrieved from the API. Should be on
          YYYY-MM-DD format.
      - name: endDate
        schema: string
        required: false
        description: >-
          End date of the fee setup to be retrieved from the API. Should be on
          YYYY-MM-DD format.
      - name: status
        schema: string
        required: false
        description: Status of the fee code to be retrieved from the API (Active, Inactive)
    responses:
      - statusCode: '200'
        description: Definition of Get fee exemption response
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/investors/v1/{investor_id}/fee-nominations
    method: deleteFeeNomination
    httpMethod: delete
    tag: Investors
    typeScriptTag: investors
    description: >-
      Delete Fee Nomination for an Investor
      (https://wos-gb.sandbox.wealthos.cloud/admin/documentation
    parameters:
      - name: investorId
        schema: string
        required: true
        description: Investor Id
        example: INVESTOR_ID
    responses:
      - statusCode: '200'
        description: Success message
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/investors/v1/{investor_id}/fee-nominations
    method: getFeeNomination
    httpMethod: get
    tag: Investors
    typeScriptTag: investors
    description: >-
      Get Fee Nomination for an Investor
      (https://wos-gb.sandbox.wealthos.cloud/admin/documentation
    parameters:
      - name: investorId
        schema: string
        required: true
        description: Investor Id
        example: INVESTOR_ID
    responses:
      - statusCode: '200'
        description: Definition of Fee nomination creation response
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/investors/v1/{investor_id}/fee-nominations
    method: updateFeeNomination
    httpMethod: patch
    tag: Investors
    typeScriptTag: investors
    description: >-
      Update Fee Nomination for an Investor
      (https://wos-gb.sandbox.wealthos.cloud/admin/documentation
    parameters:
      - name: investorId
        schema: string
        required: true
        description: Investor Id
        example: INVESTOR_ID
      - name: nominations
        schema: array
        required: true
        description: ''
        example:
          - nominee_pot_id: pot-UKW3452800
      - name: reference_version
        schema: integer
        required: true
        description: ''
        example: 1
    responses:
      - statusCode: '200'
        description: Definition of Fee nomination creation response
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/investors/v1/{investor_id}/fee-nominations
    method: createFeeNominationForInvestor
    httpMethod: post
    tag: Investors
    typeScriptTag: investors
    description: >-
      Create Fee Nomination for an Investor
      (https://wos-gb.sandbox.wealthos.cloud/admin/documentation
    parameters:
      - name: investorId
        schema: string
        required: true
        description: Investor Id
        example: INVESTOR_ID
      - name: nominations
        schema: array
        required: true
        description: ''
        example:
          - nominee_pot_id: pot-UKW3452800
    responses:
      - statusCode: '201'
        description: Definition of Fee nomination creation response
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/contributing-employers/v1
    method: getByInvestor
    httpMethod: get
    tag: Contributing Employers
    typeScriptTag: contributingEmployers
    description: Retrieve all the contributing employers of a particular investor
    parameters:
      - name: investorId
        schema: string
        description: Valid Investor Id
    responses:
      - statusCode: '200'
        description: Array of contributing employers
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/contributing-employers/v1
    method: createNewEmployer
    httpMethod: post
    tag: Contributing Employers
    typeScriptTag: contributingEmployers
    description: Create new contributing employer
    parameters:
      - name: name
        schema: string
        required: true
        description: ''
        example: Acme Ltd
      - name: investor_id
        schema: string
        required: true
        description: ''
        example: inv-QXR38578
      - name: registration_number
        schema: string
        required: true
        description: ''
        example: '12345678'
      - name: address
        schema: object
        required: true
        description: ''
      - name: status
        schema: string
        required: true
        description: ''
        example: active
      - name: bank_accounts
        schema: array
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: Contributing Employer
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/contributing-employers/v1/{contributing_employer_id}
    method: getParticularEmployer
    httpMethod: get
    tag: Contributing Employers
    typeScriptTag: contributingEmployers
    description: Retrieve a particular contributing employer
    parameters:
      - name: contributingEmployerId
        schema: string
        required: true
        description: Contributing Employer Id
        example: CONTRIBUTING_EMPLOYER_ID
    responses:
      - statusCode: '200'
        description: Contributing Employer
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/contributing-employers/v1/{contributing_employer_id}
    method: updateParticularEmployer
    httpMethod: patch
    tag: Contributing Employers
    typeScriptTag: contributingEmployers
    description: Update a particular contributing employer
    parameters:
      - name: contributingEmployerId
        schema: string
        required: true
        description: Contributing Employer Id
        example: CONTRIBUTING_EMPLOYER_ID
      - name: name
        schema: string
        required: false
        description: ''
        example: Acme Ltd
      - name: registration_number
        schema: string
        required: false
        description: ''
        example: '12345678'
      - name: address
        schema: object
        required: false
        description: ''
      - name: status
        schema: string
        required: false
        description: ''
        example: active
      - name: reference_version
        schema: integer
        required: true
        description: ''
        example: 1
    responses:
      - statusCode: '200'
        description: Contributing Employer
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/recurring-contributions/v1
    method: getAllContributions
    httpMethod: get
    tag: Recurring Contributions
    typeScriptTag: recurringContributions
    description: Get All Recurring Contributions
    parameters:
      - name: contributionId
        schema: string
        required: false
        description: Contribution Id
      - name: potId
        schema: string
        required: false
        description: Pot Id
      - name: financialProductId
        schema: string
        required: false
        description: Financial Product Id
      - name: investorId
        schema: string
        required: false
        description: Investor Id
      - name: paymentType
        schema: string
        required: false
        description: Payment type of the payment to be retrieved from the API
      - name: subTransactionType
        schema: string
        required: false
        description: Sub Transaction Type of the recurring contribution
      - name: status
        schema: string
        required: false
        description: Status of the recurring contribution
      - name: pageSize
        schema: string
        required: false
        description: >-
          Page size for the query. This end-point has paginations capabilities.
          This value should be a positive integer value. If this is not provided
          or provided without page_number, both page_size and page_number will
          be defaulted to 1000 and 1. Max page size is 8000. Results are sorted
          decending order of the created date & time.
      - name: pageNumber
        schema: string
        required: false
        description: >-
          Page number for the query. This end-point has paginations
          capabilities. This value should be a positive integer value. If this
          is not provided or provided without page_size, both page_size and
          page_number will be defaulted to 1000 and 1. Results are sorted
          decending order of the created date & time.
      - name: sort
        schema: string
        required: false
        description: Sorting order; results are sorted by creation time.
        default: desc
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/recurring-contributions/v1
    method: createPayment
    httpMethod: post
    tag: Recurring Contributions
    typeScriptTag: recurringContributions
    description: Create Recurring Payment
    parameters:
      - name: request_id
        schema: string
        required: true
        description: ''
        example: REQUEST_ID
      - name: contribution_name
        schema: string
        required: true
        description: ''
        example: Contributions to SIPP
      - name: pot_id
        schema: string
        required: true
        description: ''
        example: pot-UKW34528503
      - name: investor_id
        schema: string
        required: true
        description: ''
        example: inv-XUT11265
      - name: amount
        schema: string
        required: true
        description: ''
        example: '100.00'
      - name: sub_transaction_type
        schema: string
        required: true
        description: ''
        example: Regular contribution - Employer
      - name: currency
        schema: string
        required: true
        description: ''
        example: GBP
      - name: payment_type
        schema: string
        required: true
        description: ''
        example: direct_debit
      - name: service_provider
        schema: string
        required: true
        description: ''
        example: gocardless
      - name: purpose
        schema: string
        required: true
        description: ''
        example: invest
      - name: investment_instructions
        schema: array
        required: false
        description: ''
        example:
          - investment_product_id: isa_1223931892
            quantity: '300'
          - investment_product_id: isa_9913091898
            quantity: '500'
      - name: source_id
        schema: string
        required: false
        description: ''
        example: cem-ASP43560
      - name: payment_schedule
        schema: object
        required: true
        description: ''
        example:
          interval_unit: monthly
          interval: 2
          date: 1
          start_date: '2023-04-02'
          end_date: '2023-11-02'
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/recurring-contributions/v1/{contribution_id}
    method: updateRecurringPayment
    httpMethod: patch
    tag: Recurring Contributions
    typeScriptTag: recurringContributions
    description: Update Recurring Payment
    parameters:
      - name: contributionId
        schema: string
        required: true
        description: Contribution Id
        example: CONTRIBUTION_ID
      - name: amount
        schema: string
        description: ''
        example: '1500.00'
      - name: contribution_name
        schema: string
        description: ''
        example: New contributions to SIPP
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/recurring-contributions/v1/{contribution_id}/pause
    method: pausePaymentSetup
    httpMethod: post
    tag: Recurring Contributions
    typeScriptTag: recurringContributions
    description: Pause Recurring Payment
    parameters:
      - name: contributionId
        schema: string
        required: true
        description: Contribution Id
        example: CONTRIBUTION_ID
      - name: pause_cycles
        schema: integer
        description: ''
        example: 1
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/recurring-contributions/v1/{contribution_id}/resume
    method: resumeContribution
    httpMethod: post
    tag: Recurring Contributions
    typeScriptTag: recurringContributions
    description: Resume Recurring Payment
    parameters:
      - name: contributionId
        schema: string
        required: true
        description: Contribution Id
        example: CONTRIBUTION_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/recurring-contributions/v1/{contribution_id}/cancel
    method: cancelRecurringPayment
    httpMethod: post
    tag: Recurring Contributions
    typeScriptTag: recurringContributions
    description: Cancel Recurring Payment
    parameters:
      - name: contributionId
        schema: string
        required: true
        description: Contribution Id
        example: CONTRIBUTION_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/pots/v1/crystallisation
    method: getAllRequests
    httpMethod: get
    tag: SIPP Crystallisation
    typeScriptTag: sippCrystallisation
    description: Get All Crystallisation Requests
    parameters:
      - name: crystallisationId
        schema: string
        required: false
        description: Crystallisation Id
      - name: investorId
        schema: string
        required: false
        description: Investor Id
      - name: status
        schema: string
        required: false
        description: Status of crystallisation request
      - name: pageSize
        schema: string
        required: false
        description: >-
          Page size for the query. This end-point has paginations capabilities.
          This value should be a positive integer value. If this is not provided
          or provided without page_number, both page_size and page_number will
          be defaulted to 1000 and 1. Max page size is 8000. Results are sorted
          decending order of the created date & time.
      - name: pageNumber
        schema: string
        required: false
        description: >-
          Page number for the query. This end-point has paginations
          capabilities. This value should be a positive integer value. If this
          is not provided or provided without page_size, both page_size and
          page_number will be defaulted to 1000 and 1. Results are sorted
          decending order of the created date & time.
      - name: sort
        schema: string
        required: false
        description: Sorting order; results are sorted by creation time.
        default: desc
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/pots/v1/crystallisation
    method: createRequest
    httpMethod: post
    tag: SIPP Crystallisation
    typeScriptTag: sippCrystallisation
    description: Create a crystallisation request
    parameters:
      - name: request_id
        schema: string
        required: true
        description: ''
        example: REQUEST_ID
      - name: investor_id
        schema: string
        required: true
        description: ''
        example: inv-XUT11265
      - name: bank_account_id
        schema: string
        required: true
        description: ''
        example: ba-bc00c28f-b3fc-42b7
      - name: crystallisation_instructions
        schema: array
        required: true
        description: ''
        example:
          - pot_id: pot-GYQ5423100
            value: '1000'
      - name: drawdown_instructions
        schema: array
        required: true
        description: ''
        example:
          - pot_id: pot-XWL3855774
            purpose: cash
            percentage: '30'
          - pot_id: pot-SDQ5009730
            purpose: invest
            percentage: '70'
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/investors/v1/tax-codes
    method: getAllTaxCodes
    httpMethod: get
    tag: Investors
    typeScriptTag: investors
    description: Get All Tax Codes
    parameters:
      - name: investorId
        schema: string
        required: false
        description: Investor Id
      - name: pageSize
        schema: string
        required: false
        description: >-
          Page size for the query. This end-point has paginations capabilities.
          This value should be a positive integer value. If this is not provided
          or provided without page_number, both page_size and page_number will
          be defaulted to 1000 and 1. Max page size is 4000. Results are sorted
          decending order of the created date & time.
      - name: pageNumber
        schema: string
        required: false
        description: >-
          Page number for the query. This end-point has paginations
          capabilities. This value should be a positive integer value. If this
          is not provided or provided without page_size, both page_size and
          page_number will be defaulted to 1000 and 1. Results are sorted
          decending order of the created date & time.
      - name: sort
        schema: string
        required: false
        description: Sorting order; results are sorted by creation time.
        default: desc
    responses:
      - statusCode: '200'
        description: Array of tax codes
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/recurring-withdrawals/v1
    method: listAll
    httpMethod: get
    tag: Recurring Withdrawals
    typeScriptTag: recurringWithdrawals
    description: Get All Recurring Withdrawals
    parameters:
      - name: withdrawalId
        schema: string
        required: false
        description: Withdrawal Id
      - name: potId
        schema: string
        required: false
        description: Pot Id
      - name: financialProductId
        schema: string
        required: false
        description: Financial Product Id
      - name: investorId
        schema: string
        required: false
        description: Investor Id
      - name: status
        schema: string
        required: false
        description: Status of the recurring withdrawal
      - name: pageSize
        schema: string
        required: false
        description: >-
          Page size for the query. This end-point has paginations capabilities.
          This value should be a positive integer value. If this is not provided
          or provided without page_number, both page_size and page_number will
          be defaulted to 1000 and 1. Max page size is 8000. Results are sorted
          decending order of the created date & time.
      - name: pageNumber
        schema: string
        required: false
        description: >-
          Page number for the query. This end-point has paginations
          capabilities. This value should be a positive integer value. If this
          is not provided or provided without page_size, both page_size and
          page_number will be defaulted to 1000 and 1. Results are sorted
          decending order of the created date & time.
      - name: sort
        schema: string
        required: false
        description: Sorting order; results are sorted by creation time.
        default: desc
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/recurring-withdrawals/v1
    method: createNewWithdrawal
    httpMethod: post
    tag: Recurring Withdrawals
    typeScriptTag: recurringWithdrawals
    description: Create Recurring Withdrawal
    parameters:
      - name: request_id
        schema: string
        required: true
        description: ''
        example: REQUEST_ID
      - name: withdrawal_name
        schema: string
        required: true
        description: ''
        example: Withdrawals to SIPP
      - name: investor_id
        schema: string
        required: true
        description: ''
        example: inv-XUT11265
      - name: pot_id
        schema: string
        required: true
        description: ''
        example: pot-GYQ5423100
      - name: bank_account_id
        schema: string
        required: true
        description: ''
        example: ba-92yu982d-at6u-4242-9856-83
      - name: amount
        schema: string
        required: true
        description: ''
        example: '100.00'
      - name: currency
        schema: string
        required: true
        description: ''
        example: GBP
      - name: withdrawal_schedule
        schema: object
        required: true
        description: ''
        example:
          interval_unit: monthly
          interval: 2
          date: 1
          start_date: '2023-04-02'
          end_date: '2023-11-02'
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/recurring-withdrawals/v1/{withdrawal_id}
    method: updateActiveWithdrawal
    httpMethod: patch
    tag: Recurring Withdrawals
    typeScriptTag: recurringWithdrawals
    description: Update Recurring Withdrawal
    parameters:
      - name: withdrawalId
        schema: string
        required: true
        description: Withdrawal Id
        example: WITHDRAWAL_ID
      - name: amount
        schema: string
        required: false
        description: ''
        example: '1500.00'
      - name: withdrawal_name
        schema: string
        required: false
        description: ''
        example: New withdrawals to SIPP
      - name: end_date
        schema: string
        required: false
        description: ''
        example: '2024-10-30'
      - name: reference_version
        schema: number
        required: true
        description: ''
        example: 1
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/recurring-withdrawals/v1/{withdrawal_id}/cancel
    method: cancelRecurringWithdrawal
    httpMethod: post
    tag: Recurring Withdrawals
    typeScriptTag: recurringWithdrawals
    description: Cancel Recurring Withdrawal
    parameters:
      - name: withdrawalId
        schema: string
        required: true
        description: Withdrawal Id
        example: WITHDRAWAL_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/workplace-employers/v1
    method: getAllEmployers
    httpMethod: get
    tag: Workplace Employers
    typeScriptTag: workplaceEmployers
    description: >-
      Get all workplace employers
      (https://wos-gb.sandbox.wealthos.cloud/admin/documentation
    parameters:
      - name: pageSize
        schema: string
        required: false
        description: >-
          Page size for the query. This end-point has paginations capabilities.
          This value should be a positive integer value. If this is not provided
          or provided without page_number, both page_size and page_number will
          be defaulted to 1000 and 1. Max page size is 8000.
      - name: pageNumber
        schema: string
        required: false
        description: >-
          Page number for the query. This end-point has paginations
          capabilities. This value should be a positive integer value. If this
          is not provided or provided without page_size, both page_size and
          page_number will be defaulted to 1000 and 1.
      - name: sort
        schema: string
        required: false
        description: Sorting order; results are sorted by creation time.
        default: desc
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/workplace-employers/v1
    method: createEmployer
    httpMethod: post
    tag: Workplace Employers
    typeScriptTag: workplaceEmployers
    description: >-
      Create workplace employer
      (https://wos-gb.sandbox.wealthos.cloud/admin/documentation
    parameters:
      - name: name
        schema: string
        required: true
        description: ''
        example: Romayo Ltd
      - name: registration_number
        schema: string
        required: true
        description: ''
        example: '12345678'
      - name: registered_address
        schema: object
        required: true
        description: ''
      - name: correspondence_address
        schema: object
        required: true
        description: ''
      - name: company_structure
        schema: string
        required: false
        description: ''
        example: LLC
      - name: contact_details
        schema: object
        required: false
        description: ''
      - name: kyb_aml_status
        schema: string
        required: false
        description: ''
        example: clear
        default: not_started
      - name: status
        schema: string
        required: true
        description: ''
        example: active
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/workplace-employers/v1/{workplace_employer_id}
    method: getDetails
    httpMethod: get
    tag: Workplace Employers
    typeScriptTag: workplaceEmployers
    description: >-
      Get existing workplace employer
      (https://wos-gb.sandbox.wealthos.cloud/admin/documentation
    parameters:
      - name: workplaceEmployerId
        schema: string
        required: true
        description: Workplace Employer Id
        example: WORKPLACE_EMPLOYER_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/workplace-employers/v1/{workplace_employer_id}
    method: updateEmployerDetails
    httpMethod: patch
    tag: Workplace Employers
    typeScriptTag: workplaceEmployers
    description: >-
      Update workplace employer
      (https://wos-gb.sandbox.wealthos.cloud/admin/documentation
    parameters:
      - name: workplaceEmployerId
        schema: string
        required: true
        description: Workplace Employer Id
        example: WORKPLACE_EMPLOYER_ID
      - name: name
        schema: string
        required: false
        description: ''
        example: Romayo Ltd
      - name: registration_number
        schema: string
        required: false
        description: ''
        example: '12345678'
      - name: registered_address
        schema: object
        required: false
        description: ''
      - name: correspondence_address
        schema: object
        required: false
        description: ''
      - name: company_structure
        schema: string
        required: false
        description: ''
        example: LLC
      - name: contact_details
        schema: object
        required: false
        description: ''
      - name: kyb_aml_status
        schema: string
        required: false
        description: ''
        example: clear
        default: not_started
      - name: status
        schema: string
        required: false
        description: ''
        example: active
      - name: reference_version
        schema: number
        required: true
        description: ''
        example: 1
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/workplace-employers/v1/{workplace_employer_id}/investors
    method: getAllInvestors
    httpMethod: get
    tag: Workplace Employers
    typeScriptTag: workplaceEmployers
    description: >-
      Get all investors of a workplace employer
      (https://wos-gb.sandbox.wealthos.cloud/admin/documentation
    parameters:
      - name: workplaceEmployerId
        schema: string
        required: true
        description: Workplace Employer Id
        example: WORKPLACE_EMPLOYER_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/payments/v1
    method: getAll
    httpMethod: get
    tag: Payments
    typeScriptTag: payments
    description: Get All Payments
    parameters:
      - name: paymentType
        schema: string
        required: false
        description: >-
          Payment type of the payment to be retrieved from the API
          (electronic_fund_transfer, card, direct_debit)
      - name: serviceProvider
        schema: string
        required: false
        description: >-
          Service provider of the payment to be retrieved from the API
          (truelayer, stripe, gocardless, none)
      - name: purpose
        schema: string
        required: false
        description: Purpose of the payment to be retrieved from the API (cash, invest)
      - name: subTransactionType
        schema: string
        required: false
        description: >-
          Sub transaction types of the payments to be retrieved from the API.
          Can give multiple sub transaction types as comma separated values.
          (ex- Lump sum,Regular contribution)
      - name: investorId
        schema: string
        required: false
        description: >-
          investor_id of the payments to be retrieved from the API. Can give
          multiple investor ids as comma separated values. (ex-
          inv-XLZ8990,inv-RFT6758)
      - name: status
        schema: string
        required: false
        description: >-
          status of the payments to be retrieved from the API. Can give multiple
          statuses as comma separated values. (ex-
          succeeded,pending_confirmation)
      - name: sourceId
        schema: string
        required: false
        description: >-
          source_id of the payments to be retrieved from the API. Can give
          multiple source ids as comma separated values. (ex-
          cem-BGJ20491,cem-TGY90961)
      - name: contributionId
        schema: string
        required: false
        description: >-
          contribution_id of the payments to be retrieved from the API. Can give
          multiple contribution ids as comma separated values. (ex-
          BCV-GH-BUH2965,RCB-GC-RGH2065)
      - name: pageSize
        schema: string
        required: false
        description: >-
          Page size for the query. This end-point has paginations capabilities.
          This value should be a positive integer value. If this is not provided
          or provided without page_number, both page_size and page_number will
          be defaulted to 1000 and 1. Max page size is 8000. Results are sorted
          decending order of the created date & time.
      - name: pageNumber
        schema: string
        required: false
        description: >-
          Page number for the query. This end-point has paginations
          capabilities. This value should be a positive integer value. If this
          is not provided or provided without page_size, both page_size and
          page_number will be defaulted to 1000 and 1. Results are sorted
          decending order of the created date & time.
      - name: potId
        schema: string
        required: false
        description: Pot Id
      - name: sort
        schema: string
        required: false
        description: 'Sorting order; results are sorted by creation time. '
        default: desc
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/payments/v1
    method: createPaymentIntent
    httpMethod: post
    tag: Payments
    typeScriptTag: payments
    description: Create Single Payment Intent
    parameters:
      - name: request_id
        schema: string
        required: true
        description: ''
        example: REQUEST_ID
      - name: amount
        schema: string
        required: true
        description: ''
        example: '100.00'
      - name: pot_id
        schema: string
        required: true
        description: ''
        example: pot-UKW3452850
      - name: payment_type
        schema: string
        required: true
        description: ''
        example: electronic_fund_transfer
      - name: service_provider
        schema: string
        required: true
        description: ''
        example: truelayer
      - name: service_provider_params
        schema: object
        required: false
        description: ''
      - name: currency
        schema: string
        required: false
        description: ''
        example: GBP
      - name: sub_transaction_type
        schema: string
        required: false
        description: ''
        example: Lump sum
      - name: source_id
        schema: string
        required: false
        description: ''
        example: cem-ASP43560
      - name: purpose
        schema: string
        required: true
        description: ''
        example: invest
      - name: investment_instructions
        schema: array
        required: false
        description: ''
        example:
          - investment_product_id: isa_1223931892
            quantity: '300'
          - investment_product_id: isa_9913091898
            quantity: '500'
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/portfolio-templates/v1
    method: getAllTemplates
    httpMethod: get
    tag: Portfolio Templates
    typeScriptTag: portfolioTemplates
    description: Get all the Portfolio templates
    parameters: []
    responses:
      - statusCode: '200'
        description: Array of all portfolio templates applicable to the investor
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/portfolio-templates/v1
    method: createNewTemplate
    httpMethod: post
    tag: Portfolio Templates
    typeScriptTag: portfolioTemplates
    description: Create new Portfolio Template
    parameters:
      - name: portfolio_template_id
        schema: string
        required: true
        description: ''
        example: pft-c60c9472-6668-4f7a-aa69
      - name: portfolio_name
        schema: string
        required: true
        description: ''
        example: PFT5689
      - name: owner
        schema: string
        required: false
        description: ''
        example: SYSTEM
      - name: ratios
        schema: array
        required: true
        description: ''
        example:
          - investment_product_id: ETF069GBP
            ratio: '60'
          - investment_product_id: BND058GBP
            ratio: '40'
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/transactions/v1
    method: getAll
    httpMethod: get
    tag: Transactions
    typeScriptTag: transactions
    description: Retrieve All Transactions
    parameters:
      - name: transactionId
        schema: string
        required: false
        description: Unique identifier for the transaction
      - name: parentTransactionId
        schema: string
        required: false
        description: Unique identifier for parent transaction
      - name: aggregatedTransactionId
        schema: string
        required: false
        description: Unique identifier for the aggregated transaction
      - name: investorId
        schema: string
        required: false
        description: Investor ID
      - name: accountId
        schema: string
        required: false
        description: Account ID
      - name: potId
        schema: string
        required: false
        description: Pot ID
      - name: subTransactionType
        schema: string
        required: false
        description: Sub transaction type
      - name: subType
        schema: string
        required: false
        description: >-
          Status of the transaction. Multiple statuses as comma separated string
          can be entered
      - name: startDate
        schema: string
        required: false
        description: >-
          The start date of the withdrawal charges to be retrieved from the API.
          Should be on YYYY-MM-DD format
      - name: endDate
        schema: string
        required: false
        description: >-
          The end date of the withdrawal charges to be retrieved from the API.
          Should be on YYYY-MM-DD format
      - name: pageSize
        schema: string
        required: false
        description: >-
          Page size for the query. This end-point has paginations capabilities.
          This value should be a positive integer value. If this is not provided
          or provided without page_number, both page_size and page_number will
          be defaulted to 1000 and 1. Max page size is [4000]. Results are
          sorted descending order of the created date & time
      - name: pageNumber
        schema: string
        required: false
        description: >-
          Page number for the query. This end-point has paginations
          capabilities. This value should be a positive integer value. If this
          is not provided or provided without page_size, both page_size and
          page_number will be defaulted to 1000 and 1. Results are sorted
          descending order of the created date & time
      - name: sort
        schema: string
        required: false
        description: Sorting order; results are sorted by creation time.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /tenant/withdrawals/v1
    method: createSingleWithdrawal
    httpMethod: post
    tag: Withdrawals
    typeScriptTag: withdrawals
    description: Create Single Withdrawal
    parameters:
      - name: request_id
        schema: string
        required: true
        description: ''
        example: REQUEST_ID
      - name: pot_id
        schema: string
        required: true
        description: ''
        example: pot-SDQ5659730
      - name: currency
        schema: string
        required: true
        description: ''
        example: USD
      - name: transaction_value
        schema: string
        required: true
        description: ''
        example: '123.45'
      - name: sub_transaction_type
        schema: string
        required: true
        description: ''
        example: Withdrawal
      - name: bank_account_id
        schema: string
        required: true
        description: ''
        example: ba-example-bank-account
    responses:
      - statusCode: '201'
        description: JSON for the Withdrawal response
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '429'
        description: ''
      - statusCode: '500'
        description: ''
numberOfSchemas: 675
apiDescription: "Welcome to WealthOS. Here you will find the comprehensive set of information you need to rapidly build rich digital wealth management features. \n# Getting Started\nBefore you start developing your features using the WealthOS API, please make sure that the following steps are complete:\n\n* Set-up your own environment unique to your organisation using the link we have provided\n* Follow the step-by-step [guide](https://wos-gb.sandbox.wealthos.cloud/admin/documentation) to configuring your environment\n* Sign-up and obtain keys for sandbox environments of all 3rd party integrations you require from the market place of available integrations in WealthOS\n* Setup the keys of the 3rd party integrations within the WealthOS Admin UI\n\nOnce you have set yourself up, you can add other users who will be able to collaborate with you.\n\n---\n# WealthOS API Basics\nThe WealthOS API is a RESTful API that provides synchronous communication between your application and the WealthOS platform. For some calls where WealthOS communicates with a 3rd party application (e.g. KYC providers, Payment providers, Custodians) thus causing asynchronicity in communication, WealthOS also provides anebsocket API so you do not have to build a polling function to retrieve responses. \n\nYour API URLs will be in the following formats:\n\n**RESTful API** - https://{unique_tenancy_identifier}.sandbox.wealthos.cloud/tenant/{endpoint}/v1\n\n```           E.g. https://acorn-gb.sandbox.wealthos.cloud/investors/v1```\n\n**Websocket API** - wss://{unique_tenancy_identifier}-ws.sandbox.wealthos.cloud/ws/\n\n```           E.g. wss://acorn-gb-ws.sandbox.wealthos.cloud/ws/```\n\nThe Websocket API is used by WealthOS to push asynchronous notifications to your application.\n\n---\n# Authentication\nThe wealth management organisation is granted a **secret key** that they must use in their API calls to interact with the WealthOS platform securely. This key must be stored securely only in your application server side code. It grants the highest level of access privileges to the WealthOS platform. \n<!-- Each wealth management organisation is granted a set of keys that they must use in their API calls to interact with the WealthOS platform securely.\n\n There are two (2) types of API keys:\n\n * The **secret key**. This must be stored securely only in your application server side code. It grants the highest level of access privileges to the WealthOS platform. \n\n * **Publishable keys**. These are temporary keys with a short life span issued specifically for some activities. These have limited privileges in terms of what types of calls are permitted to be made using them. Usually these are sent as a response to another API call (e.g. creating a payment intent)\n-->\n## Testing your keys\nYou may test your keys by calling on the following endpoints. \n\n### RESTful API\nTo test the **secret key**:&nbsp;Perform a GET call on ```~/tenant/test/hello-world-be```\n<!--\nTo test the **temporary key**:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform a GET call on ```~/tenant/test/hello-world-gui```\n-->\n### Socket API\n In order to authenticate a Websocket API call, a query parameter x-token must be included within the URL. \n\nx-token = your organisation’s secret key \n\nFull URL must read as follows: \n````\nwss://{unique_tenancy_identifier}-ws.sandbox.wealthos.cloud/ws?x-token=<api_secret_key>\n````\n---\n# Idempotency\nSome of the capabilities exposed via WealthOS tenant API needs to be idempotant (from the perspective of the system). For those requests an additional field `request_id` is required to be sent with the request. The purpose of the `request_id` is to give an unique id for the request, so the system can differentiate requests. Advantage of the `request_id` is the system can check whether the request have already reached the system. If a request (that should be idempotant) has already reached the system, the duplicate request will be rejected.\n\n#### Sample response\n\n```json\n\n{\n  \"status\": 400,\n  \"body\": {\n    \"message\" : \"duplicate request\", \n    \"status\" : \"COMPLETE|PROCESSING\", \n    \"response\" : \"<stringified original response body>\"\n  }\n}\n\n```\nThe `request_id` stored for idempotency checks will be deleted after <span style=\"color:red\">**1 hour**</span> after which point a message with the same `request_id` will be considered as a new request.\n\n---\n# Entity Versioning\nWealthOS maintains versioning for reference data entities stored within the platform which can be updated by the Wealth Manager BE. This is to ensure integrity of data in the event the same entity is being updated by multiple users via the API. \n\nWhen requesting for an entity via the API the system will return the latest  `reference_version` which must be provided when the Wealth Manager BE is updating an entity. If the received `reference_version` is different to the latest `reference_version` in the system, the update will be rejected.\n\nWith each sucessful update done to the entity via the API the system will increment the  `reference_version`. \n\n---\n# Limits\n\nCurrently there are limits to the number of requests that can be made to the WealthOS API. Following are these limits:\n* Average requests per second       500\n* Burst requests                    1000\n* Total requests per day            10,000\n\n---\n# FAQ\n\n- **How do I see my API keys and how do I re-new the keys?**\n    - Your API keys are displayed in the developer section of the WOS Admin GUI. You have to be of user type 'developer' or 'admin' to see this. \n\n- **Is it mandatory to connect to the web socket**\n    - Right now this is optional. However it is highly recommended to do so, because the wealth manager BE can avoid polling (Remember: the REST API calls have a daily quota) for certain important events.\n\n---\n# Socket API\n## Intro\nWeb socket API is used by the WOS system to notify (push) asynchronous events to the Wealth Manager BE\n## Accessing the Socket api\nYour Socket API URL would be wss://{socket api root}/ws\n\nFor example lets assume your env is `gb` and tenant id is `acorn`. Then,\n\n- Socket API Root: acorn-gb-ws.sandbox.wealthos.cloud\n\n- Socket API URL: wss://acorn-gb-ws.sandbox.wealthos.cloud/ws\n## Authenticating Socket Connection\nWealthOS requires to authenticate the web socket connection before allowing you to communicate with the system through the socket. For that purpose WealthOS socket API expects a query parameter `x-token` to be attached with the socket URL.\n\n`x-token` is the ApiSecretKey given you by the WealthOS system\n\nSo the actual connection URL must look like\n\n```\nwss://acme-gb-ws.sandbox.wealthos.cloud/ws?x-token=<api_secret_key>\n```\n## Channels\nWealthOS socket api uses the concept of channels to group messages exchanged through web socket. A single socket connection may be used to handle one or many channels. Users are advised to implement a proper load balancing scheme.\n\nMessages sent via the channels will be strictly ordered by the event generation time. However, there is no guarantee of ordering messages across channels.\n\nA generic data message passed through the socket looks like,\n\n```json\n{\n    type: \"a string tag that identifies the message\"\n    resend: \"[optional] Indicates whether this is a resend message. Resends can be sent during explicit recovery servicing or due to server recovering from errors\"\n    ch: \"channel name\" \n    payload: { \n        .... \n    }\n    id: \"unique id for this message\"\n    ts: \"unique sequence number of message\"\n    \n}\n``` \n**Note**: The unique sequence number `ts` is a strictly monotonically increasing timestamp (milliseconds elapsed since January 1, 1970, 00:00:00 UTC). This is unique per channel.\n## Subscribe\nSent from client to server to subscribe to a channel.\n  * Channel name should be specified in the `ch` attribute.\n  * Unique request id must be sent in the `req_id` attribute.\n\n```\n{\n    \"type\": \"subscription\",\n    \"ch\": \"channel to be subscribed\",\n    \"req_id\": \"request ID\",\n    \"from_ts\": past sequence number / Timestamp value (milliseconds)\n}\n```\nServer responds with a **subscribe** message which echoes the request. In addition, a **status** field indicates the subscription status (success or failed) and aneason field indicating the reason in the case of a failure.\n\n```\n{\n    \"type\": \"subscription\",\n    \"ch\": \"subscribed channel\",\n    \"req_id\": \"request ID\",\n    \"status\": \"ACK\"\n}\n```\n\n```\n{\n    \"type\": \"subscription\",\n    \"ch\": \"subscribed channel\",\n    \"req_id\": \"request ID\",\n    \"status\": \"NACK\",\n    \"reason\": \"Error Message\"\n}\n```\n## Unsubscribe\nSent from client to server to unsubscribe from a channel.\n  * Channel name should be specified in the `ch` attribute.\n  * Unique request id must be sent in the `req_id` attribute.\n\n```\n{\n    \"type\": \"unsubscription\",\n    \"ch\": \"channel to be unsubscribed\",\n    \"req_id\": \"request ID\"\n}\n```\nServer responds with a **unsubscribe** message which echoes the request. In addition, a **status** field indicates the unsubscription status (success or failed) and aneason field indicating the reason in the case of a failure.\n\n```\n{\n    \"type\": \"unsubscription\",\n    \"ch\": \"channel to be unsubscribed\",\n    \"req_id\": \"request ID\",\n    \"status\": \"ACK\"\n}\n```\n\n```\n{\n    \"type\": \"unsubscription\",\n    \"ch\": \"channel to be unsubscribed\",\n    \"req_id\": \"request ID\",\n    \"status\": \"NACK\",\n    \"reason\": \"Error Message\"\n}\n```\n**NOTE**\n* Subscribing to an already subscribed channel will be rejected.\n* Client is expected to re-try, if no response is received within 60 secs\n <!--Server will only cache messages for 1 day.-->\n\n## Heart beats\nThe ws client must send a 'heart-beat'  to the server every **60 seconds** to keep the socket connection alive. Server will reply back with heat-beat (HB). Server will disconnect the ws connection if no HBs are recived for **3 HB intervals** (i.e. between 2 to 3 minutes). Client should also disconnet if no data or hb message is received for 3 minutes\n\n```json\n{\n    type: \"hb\",\n    ch: \"system\"\n}\n```\n<div class=\"warning\" style='padding:0.1em; background-color:#FFD2D2; color:#D8000C;'>\n    <span>\n        <p style='margin-top:0.9em;margin-bottom:0.9em;margin-left:1em; text-align:left'>\n            <b>ⓘ</b> A live socket connection will be automatically disconnected by the server after 2 hours\n        </p>\n    </span>\n</div>\n\n\n## Recover missed updates\nThe ws client can send a **past sequence number** with the subscription to receive missed updates from the provided sequence number onwards.\n\n```json\n{\n    \"type\": \"subscription\",\n    \"ch\": \"channel to be subscribed\",\n    \"req_id\": \"request ID\",\n    \"from_ts\": \"past sequence number\"\n}\n```\nServer responds with a **subscribe** message which echoes the request. Then the ws client will receive past socket updates from the provided sequence number onwards.\n\n```\n{\n    \"type\": \"subscription\",\n    \"ch\": \"subscribed channel\",\n    \"req_id\": \"request ID\",\n    \"status\": \"ACK\",\n    \"from_ts\": 1625660972000\n}\n{\n    \"type\": \"investor_status\",\n    \"ch\": \"investors\",\n    \"payload\": {\n        \"investor_id\" : \"<investor_id>\",\n        \"status\" : \"'fail' | 'success'\", \n        \"error\" : \"\",  \n        \"event\": \"'kyc.started' | 'kyc.completed'\" \n    },\n    \"id\": \"fd232671-d47b-4ae2-a4c4-0a37258ffae5\",\n    \"ts\": 1625660972222,\n    \"resend\": true\n}\n```\n**NOTE**\n* If the provided sequence number equals **-1**, Then the system will send all the past socket updates to the client.\n* System only accepts integer type sequence number values.\n\n## Supported Channels\n\n- investors\n- payments\n- transactions  \n- holdings\n- reconciliations\n- notifications\n\n###  publish investors\n\nThis channel publishes investor related updates.\n\n#### Message\n\n\nThe investor channel publishes the following message types:\n- `investor_status` : This message type is used to communicate updates to the KYC/AML status of an investor\n\n##### Payload\n\t\t\t\n| Name   | Type   | Description | Accepted values | \n| ----------- | ----------- | ----------- | ----------- |\n| type | string | message type | `investor_status` |\n| ch   | string  | channel name | `investors` |\n| payload.investor_id | string | unique Id of investor | |\n| payload.status   | string  | | `fail` , `success` |\n| payload.error | string | error text. Populated only on failure | |\n| payload.event   | string  | KYC status. Populated only if request is sucessful | `kyc.started`, `kyc.completed` |\n\n##### Examples\n```json\n{\n    \"type\": \"investor_status\",\n    \"ch\": \"investors\",\n    \"payload\": {\n        \"investor_id\" : \"inv-XUT11265\",\n        \"status\" : \"success\", \n        \"error\" : \"\",  \n        \"event\": \"kyc.completed\" \n    },\n    \"id\": \"fd232671-d47b-4ae2-a4c4-0a37258ffae5\",\n    \"ts\": 1625660972222\n}\n```\n\n<a name=\"payments\"></a>\n\n###  publish payments\n\nThis channel publishes payment status related updates\n\n#### Message\n\nThe payments channel publishes the following message types:\n- `payment_update` : This message type is used to communicate updates to the status of the payment.\n\n##### Payload\n\t\t\t\n| Name   | Type   | Description | Accepted values | \n| ----------- | ----------- | ----------- | ----------- |\n| type | string | | `payment_update` |\n| ch   | string  | | `payments` |\n| payload.transaction_id | string | Unique Id of the payment | |\n| payload.pot_id | string | Id of the pot the payment is directed to | |\n| payload.reason | string | This field populated only when payment intent status is failed or cancelled, with reason for cancellation or failure | |\n| payload.status   | string  | | `pending_confirmation`, `processing`, `succeeded`, `cancelled`, `failed` |\n\n##### Examples\n\n```json\n{\n    \"type\": \"payment_update\",\n    \"ch\": \"payments\",\n    \"payload\": {\n        \"transaction_id\" : \"80784c92-8f9d-4150-b83c-dc\",\n        \"pot_id\" : \"pot-GYQ5423100\",\n        \"status\" : \"succeeded\"\n    },\n    \"id\": \"fd232671-d47b-4ae2-a4c4-0a37258ffae5\",\n    \"ts\": 1625660972222\n}\n```\n\n<a name=\"channel-transactions\"></a>\n\n###  publish transactions\n\nThis channel publishes various transaction related updates.\n\n#### Message\n\nThe transactions channel publishes the following message types:\n- `transaction_initiated` : This message type is used to communicate a new transaction created within the system (e.g. a scheduled fee deduction, individual transactions of a portfolio rebalance etc.)\n- `transaction_updated` : This message type is used to communicate an update to a transaction.\n- `external_transaction_added` : This message type is used to communicate a new transaction created in the system via an external party (e.g. transaction created by a custodian).\n- `transaction_failed` : This message type is used to notify the user of a transaction failure.\n\n\n##### Payload\nFor further information regarding the description of fields in the payload, mandatory fields and conditionally returned fields etc. please refer [GET pending & past transactions of a pot](https://wos-gb.sandbox.wealthos.cloud/admin/documentation). \n\t\t\t\n| Name   | Type   | Description | Accepted values | \n| ----------- | ----------- | ----------- | ----------- |\n| type   | string  | | `transaction_updated`,`transaction_initiated`,`external_transaction_added` |\n| ch | string | | `transactions` |\n| payload.transaction_id | string | Unique Id of the transaction | |\n| payload.parent_transaction_id | string | Parent Transaction ID | |\n| payload.external_transaction_reference | string | External Transaction Reference | |\n| payload.pot_id | string | Pot ID of the transaction | |\n| payload.investment_product_id | string | Invetment Prouct ID or cash | |\n| payload.client_order_id | string | (Optional) Order identifier assigned by the wealth manager | |\n| payload.primary_transaction_type | string | Primary Transaction Type | `Fees`,`Buy`,`Sell`,`Transfers`,`Income`,`Tax`,`Contribution`,`Withdrawal`,`Corporate actions` |\n| payload.sub_transaction_type | string | Sub Transaction Type | `Dividend Reinvestment`,`Interest Reinvestment`,`Reinvestment`,`Buy`,`Sell Cancel`,`Switch Buy`,`Sell`,`Buy Cancel`,`Switch Sell`,`Lump sum`, `Lump sum - non relievable`, `Employer contribution`,`Employee contribution`,`Regular contribution`, `Regular contribution - non relievable`, `Regular contribution - Employer`, `Payment in for fees`,`Internal Transfer - Cash In`,`Internal Transfer - Stock In`,`Internal Transfer - Cash Out`,`Internal Transfer - Stock Out`,`Stock Transfer In`,`Cash Transfer In`,`Stock Transfer Out`,`Cash Transfer Out`,`Commission`,`Ancillary fee`,`Management fee`,`Fee credit`,`Fee rebate`,`Advisor ongoing fee`,`One-off advisor fee`,`Commission rebate`,`Custody fees`,`Dividends`,`Distributions`,`Interest`,`Other income`,`Takeovers, Mergers & Name Changes - Create`,`Takeovers, Mergers & Name Changes - Extinguish`,`Rights Expiry`,`Rights Exercise`,`Warrant Exercise`,`Fixed Income Maturity - Receive Capital`, `Fixed Income Maturity - Extinguish Bond Units`,`Fund Merger - Create New Fund Units`,`Fund Merger - Extinguish Old Fund Units`,`Rights Issue`,`Stock Dividend`,`Spin-Off`,`Warrant Issue`,`Stock Split`,`Fee Tax`,`Tax Relief`,`GST`,`HST`,`PST`,`QST`,`Withholding Tax`,`PAYE Tax`,`Non-resident Tax`,`Penalty`,`Contribution Refund`,`Income Withdrawal`,`Reversal`,`Withdrawal`,`Miscellaneous Corporate Action Exercise - Buy`,`Miscellaneous Corporate Action Exercise - Sell`, `Contribution Bonus` |\n| payload.type | string | Type of the transaction | `pending`,`archived` |\n| payload.sub_type | string | Sub type of the transaction | `instructed`,`confirmed`,`priced`,`rejected`,`settled`,`cancelled`, `scheduled`, `failed` |\n| payload.currency | string | Currency of the pot | |\n| payload.direction | string | Direction of the transaction | `in`,`out` |\n| payload.transaction_quantity | string | Quantity of the investment product transaction. This will be empty for cash transactions | |\n| payload.transaction_value | string | Value of the transaction | |\n| payload.execution_price | string | Executed price of the buy, sell transaction | |\n| payload.trade_date | date | Will indicate the date where this transaction was effected | |\n| payload.settlement_date | date | Intendent settlement date of the pending transaction or actual the settled day of the transaction | |\n| payload.created_at | time | Transaction created date | |\n| payload.updated_at | time | Transaction last updated date | |\n| payload.additional_external_details | Object | Additional external details of the transaction, This may be populated in reconciliation process | |\n| payload.origin | string | Origin of the transaction | `api`, `admin_ui`, `file_upload`, `system` | \n| payload.source_id | string | transactions created for payments intents - employer contributions for SIPP Accumulation Products | | \n| payload.reason | string | This field populated only when status is failed or canceled, with reason for cancellation or failure | | \n##### Examples\n\n```json\n{\n    \"type\": \"transaction_updated\",\n    \"ch\": \"transactions\",\n    \"object\": {\n         \"pot_id\":\"pot-GYQ5423100\",\n         \"transaction_id\":\"80784c92-8f9d-4150-b83c-dc\",\n         \"investment_product_id\":\"GB0000495209\",\n         \"primary_transaction_type\":\"Buy\",\n         \"sub_transaction_type\":\"Buy\",\n         \"type\":\"archived\",\n         \"sub_type\":\"settled\",\n         \"currency\":\"GBP\",\n         \"direction\":\"in\",\n         \"transaction_quantity\":\"20\",\n         \"transaction_value\":\"129.69\",\n         \"execution_price\":\"6.45\",\n         \"trade_date\":\"2021-08-06\",\n         \"settlement_date\":\"2021-08-06\",\n         \"origin\": \"admin_ui\",\n         \"source_id\": \"cem-ASP43560\",\n         \"created_at\":\"2021-08-06T09:25:44.251Z\",\n         \"updated_at\":\"2021-08-06T09:27:18.003Z\",\n         \"external_transaction_reference\": \"117709248888833\"\n     },\n    \"id\":\"8e754ef9-5d63-4c2a-9f43-ac42f588e122\",\n    \"ts\":1628244517263\n}\n```\n<a name=\"holdings\"></a>\n\n###  publish holdings\n\nThis channel publishes holdings related updates.\n\n#### Message\n\nThe holdings channel publishes the following message types:\n- `holding_updated` : This message type is used to communicate an update to the units of an investment product holding, or value of a cash holding.\n\n##### Payload\nFor further information regarding the description of fields in the payload, mandatory fields and conditionally returned fields etc. please refer [GET current holdings of a pot](https://wos-gb.sandbox.wealthos.cloud/admin/documentation). \n\t\t\t\n| Name   | Type   | Description | Accepted values | \n| ----------- | ----------- | ----------- | ----------- |\n| type | string | | `holding_updated` |\n| ch   | string  | | `holdings` | \n| payload.pot_id | string | Id of the pot the payment is directed to | |\n| payload.investment_product_id | string | Investment product ID or 'cash' for cash | |\n| payload.currency | string | Currency of the pot | |\n| payload.total_quantity | string | Total Quantity of the investment product holding. This value is empty for cash holdings | |\n| payload.free_quantity | string | Free Quantity of the investment product holding. This value is empty for cash holdings | |\n| payload.locked_quantity | string | Locked Quantity of the investment product holding. This value is empty for cash holdings | |\n| payload.total_value | string | Total Value of the holding | |\n| payload.free_value | string | Free Value of the holding | |\n| payload.locked_value | string | Locked Value of the holding | |\n| payload.investment_product_name | string | Name of the investment product | |\n| payload.price | string | Price of the holding | |\n| payload.price_date | time | The time which the price is updated | |\n| payload.average_book_cost | string | Per-unit book cost for a particular holding (applicable for investment product holdings only) | |\n| payload.cost_of_holding | string | Total book cost for the total units currently held within the pot (applicable for investment product holdings only) | |\n| payload.settled_cash_position | string | Settled cash amount within the pot (applicable for cash holdings only) | |\n| payload.additional_external_details | Object | Additional external details of the holding, This may be populated in reconciliation process | |\n\n##### Examples\n\n```json\n{\n    \"type\": \"holding_updated\",\n    \"ch\": \"holdings\",\n    \"payload\": {\n         \"pot_id\":\"pot-GYQ5423100\",\n         \"investment_product_id\":\"GB0000495209\",\n         \"currency\":\"GBP\",\n         \"total_quantity\":\"20\",\n         \"free_quantity\":\"20\",\n         \"locked_quantity\":\"0\",\n         \"total_value\":\"137.358\",\n         \"free_value\":\"137.358\",\n         \"locked_value\":\"0\",\n         \"investment_product_name\":\"BlackRock European Dynamic Fund A Accumulation\",\n         \"price\":\"6.8679\",\n         \"price_date\":\"2021-08-06T09:27:37.512Z\",\n         \"average_book_cost\": \"5\",\n         \"cost_of_holding\": \"100\"        \n    },\n    \"id\":\"8e754ef9-5d63-4c2a-9f43-ac42f588e122\",\n    \"ts\":1628244517263\n}\n```\n\n<a name=\"reconciliations\"></a> \n\n###  publish reconciliations\n\nThe reconciliations channel publishes the following message types:\n- `investor_summary` : This message type is used to communicate a summary of investor reconciliation process.\n- `investor_mismatch` : This message type is used to communicate all mismatches in each investor reconciliations process.\n- `pot_summary` : This message type is used to communicate a summary of pot reconciliation process.\n- `pot_mismatch` : This message type is used to communicate all mismatches in each pot reconciliations process.\n- `transaction_summary` : This message type is used to communicate a summary of transaction reconciliation process.\n- `transaction_mismatch` : This message type is used to communicate mismatches in each transaction reconciliations process.\n- `transaction_ingestion_failure` : This message type is used to communicate ingestion failures in each transaction reconciliations process.\n- `transaction_ignored` : This message type is used to communicate all ignored transactions in each transaction reconciliations process.\n- `holdings_summary` : This message type is used to communicate a summary of holding reconciliation process.\n- `holdings_mismatch` : This message type is used to communicate all mismatches in each holding reconciliations process.\n\n#### Investor summary message\n##### Payload\n\t\t\t\n\n| Name   | Type   | Description | Accepted values |\n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `investor_summary` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `reconciliations` |\n| payload.job_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Unique Id of reconciliation process | |\n| payload.job_name <br><font size=\"2\" color=\"red\">Required</font>  | string | type of reconciliations | |\n| payload.date <br><font size=\"2\" color=\"red\">Required</font>  | string | date and time  | |\n| payload.total_records <br><font size=\"2\" color=\"red\">Required</font>  | number | total record count | |\n| payload.mismatched_records <br><font size=\"2\" color=\"red\">Required</font>  | number | mismatched record count | |\n| payload.incoming_records <br><font size=\"2\" color=\"red\">Required</font>  | number | incoming record count | |\n| payload.no_incoming_records <br><font size=\"2\" color=\"red\">Required</font>  | number | no incoming record count | |\n\n\n##### Examples\n\n```json\n{\n    \"type\":\"investor_summary\",\n    \"ch\":\"reconciliations\",\n        \"payload\":\n        {\n            \"job_id\":\"hydrangea-dc-210806-1628240463777\",\n            \"job_name\":\"Investor Details\",\n            \"date\":\"2021-08-09T06:49:34.227Z\",\n            \"total_records\":1,\n            \"mismatched_records\":1,\n            \"incoming_records\": 0,\n            \"no_incoming_records\": 0\n        },\n    \"id\":\"e1c7797f-f590-4490-a452-01894b33d014\",\n    \"ts\":1628244517823\n}\n\n```\n\n#### Investor mismatch message\n##### Payload\n\n| Name   | Type   | Description | Accepted values |\n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `investor_mismatch` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `reconciliations` |\n| payload.job_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Unique Id of reconciliation process | |\n| payload.date <br><font size=\"2\" color=\"red\">Required</font>  | string | date and time  | |\n| payload.record_id <br><font size=\"2\" color=\"red\">Required</font>  | string | unique id of a record | |\n| payload.investor_id | string | unique id of the investor being reconciled (if available) | |\n| payload.record_status <br><font size=\"2\" color=\"red\">Required</font>  | string | record status   |  `reconciled`, `unreconciled`, `not_found`, `key_unavailable` |\n| payload.fields | object | mismatched fields with field, incoming_value, available_value and status   | |\n| payload.fields.field <br><font size=\"2\" color=\"red\">Required</font>  | string | Name of the fields  | |\n| payload.fields.incoming_value | string | Incoming value for the field | |\n| payload.fields.available_value | string | Available value for the field | |\n| payload.fields.status | string | status of the field | `mismatched`, `matched` |\n\n##### Examples\n\n```json\n{\n    \"type\":\"investor_mismatch\",\n    \"ch\":\"reconciliations\",\n    \"payload\":\n    {\n        \"job_id\":\"hydrangea-dc-210806-1628240463777\",\n        \"date\":\"2021-08-09T06:49:34.227Z\",\n        \"record_id\":\"F180010Q\",\n        \"record_status\":\"not_found\",\n        \"fields\":\n        [\n            {\"field\":\"first_name\",\"incoming_value\":\"David\",\"available_value\": \"Dane\", \"status\":\"mismatched\"},\n            {\"field\":\"last_name\",\"incoming_value\":\"Brown\", \"available_value\": \"Black\", \"status\":\"mismatched\"}\n        ]\n    },\n    \"id\":\"8e754ef9-5d63-4c2a-9f43-ac42f588e122\",\n    \"ts\":1628244517263\n}\n\n```\n\n#### Pot summary message\n##### Payload\n\t\t\t\n| Name   | Type   | Description | Accepted values | \n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `pot_summary` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `reconciliations` |\n| payload.job_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Unique Id of reconciliation process | |\n| payload.job_name <br><font size=\"2\" color=\"red\">Required</font>  | string | type of reconciliations | |\n| payload.date <br><font size=\"2\" color=\"red\">Required</font>  | string | date and time  | |\n| payload.total_records <br><font size=\"2\" color=\"red\">Required</font>  | number | total record count | |\n| payload.mismatched_records <br><font size=\"2\" color=\"red\">Required</font>  | number | mismatched record count | |\n| payload.incoming_records <br><font size=\"2\" color=\"red\">Required</font>  | number | incoming record count | |\n| payload.no_incoming_records <br><font size=\"2\" color=\"red\">Required</font>  | number | no incoming record count | |\n\n##### Examples\n\n```json\n{\n    \"type\": \"pot_summary\",\n    \"ch\": \"reconciliations\",\n    \"payload\": {\n        \"job_id\": \"dev14_recon_pot_200\",\n        \"job_name\": \"Pot Details\",\n        \"date\": \"2021-09-02T10:07:40.578Z\",\n        \"total_records\": 91,\n        \"mismatched_records\": 41,\n        \"incoming_records\": 0,\n        \"no_incoming_records\": 0\n    },\n    \"id\": \"c574d276-de4b-4014-80f3-80e54d31d3da\",\n    \"ts\": 1630577304480\n}\n```\n\n#### Pot mismatch message\n##### Payload\n\n| Name   | Type   | Description | Accepted values |  \n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `pot_mismatch` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `reconciliations` |\n| payload.job_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Unique Id of reconciliation process | |\n| payload.date <br><font size=\"2\" color=\"red\">Required</font>  | string | date and time  | |\n| payload.record_id <br><font size=\"2\" color=\"red\">Required</font>  | string | unique id of a record | |\n| payload.pot_id | string | unique id of the pot being reconciled (if available) | |\n| payload.record_status <br><font size=\"2\" color=\"red\">Required</font>  | string | record status   |  `reconciled`, `unreconciled`, `not_found`, `key_unavailable` |\n| payload.fields | object | mismatched fields | |\n| payload.fields.field <br><font size=\"2\" color=\"red\">Required</font>  | string | Name of the fields  | |\n| payload.fields.incoming_value | string | Incoming value for the field | |\n| payload.fields.available_value | string | Available value for the field | |\n| payload.fields.status | string | status of the field | `matched`, `mismatched` |\n\n##### Examples\n\n```json\n{\n    \"type\": \"pot_mismatch\",\n    \"ch\": \"reconciliations\",\n    \"payload\": {\n        \"job_id\": \"dev14_recon_pot_200\",\n        \"date\": \"2021-09-02T10:07:40.578Z\",\n        \"record_id\": \"53_RWM\",\n        \"record_status\": \"not_found\",\n        \"fields\": [\n            {\"field\": \"custodian_account_reference\",\"incoming_value\": \"F3A0023Q\",\"status\": \"mismatched\"},\n            {\"field\": \"pot_currency\",\"incoming_value\": \"GBP\",\"status\": \"mismatched\"}\n \n        ]\n    },\n    \"id\": \"7722f072-4e8d-48ec-ad4f-4543e64fb536\",\n    \"ts\": 1630577304156\n}\n```\n\n#### Transaction summary message\n##### Payload\n\t\t\t\n| Name   | Type   | Description | Accepted values | \n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `transaction_summary` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `reconciliations` |\n| payload.job_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Unique Id of reconciliation process | |\n| payload.job_name <br><font size=\"2\" color=\"red\">Required</font>  | string | Name of the reconciliations job | |\n| payload.date <br><font size=\"2\" color=\"red\">Required</font>  | string | date and time  | |\n| payload.total_records <br><font size=\"2\" color=\"red\">Required</font>  | number | total record count | |\n| payload.mismatched_records <br><font size=\"2\" color=\"red\">Required</font>  | number | mismatched record count | |\n| payload.updated_records <br><font size=\"2\" color=\"red\">Required</font>  | number | updated record count | |\n| payload.unable_to_ingest <br><font size=\"2\" color=\"red\">Required</font>  | number | ingestion failed record count | |\n| payload.ignored_records <br><font size=\"2\" color=\"red\">Required</font>  | number | ignored record count | |\n| payload.incoming_records <br><font size=\"2\" color=\"red\">Required</font>  | number | incoming record count | |\n| payload.no_incoming_records <br><font size=\"2\" color=\"red\">Required</font>  | number | no incoming record count | |\n\n\n##### Examples\n\n```json\n{\n    \"type\": \"transaction_summary\",\n    \"ch\": \"reconciliations\",\n    \"payload\": {\n        \"job_id\": \"dev10_cat_inv_178\",\n        \"job_name\": \"Transaction Details\",\n        \"date\": \"2021-08-18T09:08:27.171Z\",\n        \"total_records\": 8,\n        \"mismatched_records\": 1,\n        \"updated_records\": 4,\n        \"unable_to_ingest\": 1,\n        \"ignored_records\": 1,\n        \"incoming_records\": 7,\n        \"no_incoming_records\": 1\n    },\n    \"id\": \"7d3614c7-3f63-4930-88df-062c5059047d\",\n    \"ts\": 1629277726128\n}\n```\n\n#### Transaction mismatch message\n##### Payload\n\n| Name   | Type   | Description | Accepted values |\n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font> | string | | `transaction_mismatch` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>  | string  | | `reconciliations` |\n| payload.job_id <br><font size=\"2\" color=\"red\">Required</font> | string | Unique Id of reconciliation process | |\n| payload.date <br><font size=\"2\" color=\"red\">Required</font> | string | date and time  | |\n| payload.record_id <br><font size=\"2\" color=\"red\">Required</font> | string | unique id of a record | |\n| payload.external_transaction_reference | string | External transaction reference (if available) | |\n| payload.transaction_ids | object | Transaction ids of mismatched records (if available) | |\n| payload.pot_id | string | Pot ID of the transaction (if available) | |\n| payload.record_status <br><font size=\"2\" color=\"red\">Required</font> | string | record status   |  `unreconciled`,`not_found`,`key_unavailable`, `multiple_found`, `no_incoming_record`, `updated` |\n| payload.fields | object | mismatched fields | |\n| payload.fields.field <br><font size=\"2\" color=\"red\">Required</font> | string | Name of the fields  | |\n| payload.fields.incoming_value | string | Incoming value for the field | |\n| payload.fields.available_value | string | Available value for the field | |\n| payload.fields.status | string | status of the field | `matched`, `mismatched`, `key_value_missing` |\n\n##### Examples\n\n```json\n{\n\t\"type\":\"transaction_mismatch\",\n\t\"ch\":\"reconciliations\",\n\t\"payload\":{\"job_id\":\"peony-transaction_reconciliations-1630493472846\",\n\t\"date\":\"2021-09-01T10:51:18.577Z\",\n\t\"record_id\":\"2_RWM\",\n\t\"external_transaction_reference\":\"117709248888833\",\n    \"transaction_ids\": [ \"80784c92-8f9d-4150-b83c-dc\" ],\n\t\"pot_id\":\"pot-GYQ5423100\",\n\t\"record_status\":\"unreconciled\",\n\t\"fields\":[\n\t{\n\t\t\"field\":\"primary_transaction_type\",\n\t\t\"incoming_value\":\"Buy\",\n\t\t\"available_value\":\"Corporate actions\",\n\t\t\"status\":\"mismatched\"\n\t},\n\t{\n\t\t\"field\":\"sub_transaction_type\",\n\t\t\"incoming_value\":\"Buy\",\n\t\t\"available_value\":\"Stock Split\",\n\t\t\"status\":\"mismatched\"\n    },\n\t{\n\t\t\"field\":\"execution_price\",\n\t\t\"incoming_value\":null,\n\t\t\"status\":\"mismatched\"\n    },\n\t{\n\t\t\"field\":\"trade_date\",\n\t\t\"incoming_value\":\"2021-08-31\",\n\t\t\"status\":\"mismatched\"\n\t},\n\t{\n\t\t\"field\":\"settlement_date\",\n\t\t\"incoming_value\":\"2021-09-02\",\n\t\t\"status\":\"mismatched\"\n\t}\n\t]\n},\n\t\"id\":\"0b3aa3b1-b14c-44ee-ac47-656149645ba9\",\n\t\"ts\":1630493491292\n}\n```\n\n#### Transaction ingestion failure message\n##### Payload\n\n| Name   | Type   | Description | Accepted values | \n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font> | string | | `transaction_ingestion_failure` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>  | string  | | `reconciliations` |\n| payload.job_id <br><font size=\"2\" color=\"red\">Required</font> | string | Unique Id of reconciliation process | |\n| payload.date <br><font size=\"2\" color=\"red\">Required</font> | string | date and time  | |\n| payload.record_id <br><font size=\"2\" color=\"red\">Required</font> | string | unique id of a record | |\n| payload.external_transaction_reference | string | External transaction reference | |\n| payload.pot_id | string | Pot ID of the transaction (if available) | |\n| payload.record_status <br><font size=\"2\" color=\"red\">Required</font> | string | record status | `unable_to_ingest` |\n| payload.fields <br><font size=\"2\" color=\"red\">Required</font> | object | fields | |\n| payload.fields.field <br><font size=\"2\" color=\"red\">Required</font> | string | Name of the fields  | |\n| payload.fields.incoming_value <br><font size=\"2\" color=\"red\">Required</font> | string | Incoming value for the field | |\n| payload.fields.status <br><font size=\"2\" color=\"red\">Required</font> | string | status of the field | `unrecognised`, `key_value_missing` |\n\n##### Examples\n\n```json\n{\n    \"type\": \"transaction_ingestion_failure\",\n    \"ch\": \"reconciliations\",\n    \"payload\": {\n        \"job_id\": \"peony-transaction_reconciliations-1630657432163\",\n        \"date\": \"2021-09-03T08:23:54.373Z\",\n        \"record_id\": \"3_RWM\",\n        \"external_transaction_reference\": \"331738147053699\",\n        \"record_status\": \"unable_to_ingest\",\n        \"fields\": [\n            {\n                \"field\": \"custodian_account_reference\",\n                \"incoming_value\": \"F3A0000A\",\n                \"status\": \"unrecognised\"\n            },\n            {\n                \"field\": \"pot_currency\",\n                \"incoming_value\": \"GBP\",\n                \"status\": \"unrecognised\"\n            },\n            {\n                \"field\": \"investment_product_id\",\n                \"incoming_value\": \"CA1358251\",\n                \"status\": \"unrecognised\"\n            }\n        ]\n    },\n    \"id\": \"718f9758-e2b0-4a07-9cc6-8a6cb5aae419\",\n    \"ts\": 1630657439928\n}\n```\n\n#### Transaction ignored failure message\n##### Payload\n\n| Name   | Type   | Description | Accepted values |  \n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font> | string | | `transaction_ignored` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `reconciliations` |\n| payload.job_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Unique Id of reconciliation process | |\n| payload.date <br><font size=\"2\" color=\"red\">Required</font>  | string | date and time  | |\n| payload.record_id <br><font size=\"2\" color=\"red\">Required</font>  | string | unique id of a record | |\n| payload.record_status <br><font size=\"2\" color=\"red\">Required</font>  | string | record status   | `ignored` |\n\n##### Examples\n\n```json\n{\n    \"type\": \"transaction_ignored\",\n    \"ch\": \"reconciliations\",\n    \"payload\": {\n        \"job_id\": \"peony-transaction_reconciliations-1630657867836\",\n        \"date\": \"2021-09-03T08:31:08.191Z\",\n        \"record_id\": \"3_RWM\",\n        \"record_status\": \"ignored\"\n    },\n    \"id\": \"8a82df6b-d34a-4eb9-91a1-b98cd18aa4e2\",\n    \"ts\": 1630657913417\n}    \n```\n#### Holding summary message\n##### Payload\n\t\t\t\n| Name   | Type   | Description | Accepted values |  \n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `holdings_summary` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `reconciliations` |\n| payload.job_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Unique Id of reconciliation process | |\n| payload.job_name <br><font size=\"2\" color=\"red\">Required</font>  | string | type of reconciliations | |\n| payload.date <br><font size=\"2\" color=\"red\">Required</font>  | string | date and time  | |\n| payload.total_records <br><font size=\"2\" color=\"red\">Required</font>  | number | total record count | |\n| payload.mismatched_records <br><font size=\"2\" color=\"red\">Required</font>  | number | mismatched record count | |\n| payload.incoming_records <br><font size=\"2\" color=\"red\">Required</font>  | number | incoming record count | |\n| payload.no_incoming_records <br><font size=\"2\" color=\"red\">Required</font>  | number | no incoming record count | |\n\n##### Examples\n\n```json\n{\n    \"type\":\"holdings_summary\",\n    \"ch\":\"reconciliations\",\n        \"payload\":\n        {\n            \"job_id\":\"cat-holding_reconciliations-1631619829926\",\n            \"job_name\":\"Holdings Details\",\n            \"date\":\"2021-08-09T06:49:34.227Z\",\n            \"total_records\":10,\n            \"mismatched_records\":5,\n            \"incoming_records\": 0,\n            \"no_incoming_records\": 0\n        },\n    \"id\":\"e1c7797f-f590-4490-a452-01894b33d014\",\n    \"ts\":1628244517823\n}\n\n```\n\n#### Holding mismatch message\n##### Payload\n\n| Name   | Type   | Description | Accepted values | \n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `holding_mismatch` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `reconciliations` |\n| payload.job_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Unique Id of reconciliation process | |\n| payload.date <br><font size=\"2\" color=\"red\">Required</font>  | string | date and time  | |\n| payload.record_id <br><font size=\"2\" color=\"red\">Required</font>  | string | unique id of a record | |\n| payload.pot_id | string | unique id of the pot being reconciled (if available) | |\n| payload.investment_product_id | string | unique id of the investment product being reconciled (if available) | |\n| payload.record_status <br><font size=\"2\" color=\"red\">Required</font> | string | record status   |  `reconciled`, `unreconciled`, `not_found`, `key_unavailable` |\n| payload.fields | object | mismatched fields with field, incoming_value, available_value and status   | |\n| payload.fields.field <br><font size=\"2\" color=\"red\">Required</font>  | string | Name of the fields  | |\n| payload.fields.incoming_value | string | Incoming value for the field | |\n| payload.fields.available_value | string | Available value for the field | |\n| payload.fields.status | string | status of the field | `mismatched`, `matched`, `updated` |\n\n##### Examples\n\n```json\n{\n    \"type\":\"holding_mismatch\",\n    \"ch\":\"reconciliations\",\n    \"payload\":\n    {\n        \"job_id\":\"cat-holding_reconciliations-1631619829926\",\n        \"date\":\"2021-08-09T06:49:34.227Z\",\n        \"record_id\":\"RWM_9_sr\",\n        \"pot_id\": \"pot-GYQ5423100\",\n        \"investment_product_id\": \"pqr\",\n        \"record_status\":\"not_found\",\n        \"fields\":\n        [\n            {\"field\":\"custodian_account_reference\",\"incoming_value\":\"F180010Q\",\"status\":\"mismatched\"},\n            {\"field\":\"free_value\",\"incoming_value\":0, \"status\":\"mismatched\"}\n        ]\n    },\n    \"id\":\"8e754ef9-5d63-4c2a-9f43-ac42f588e122\",\n    \"ts\":1628244517263\n}\n\n```\n\n<a name=\"notifications\"></a> \n\n###  publish notifications\n\nThis channel publishes general notifications.\n\n#### Message\n\n\nThe notifications channel publishes the following message types:\n- `recurring_contribution_activated` : This message type is used to communicate activation of recurring contribution requests\n- `recurring_contribution_cancelled` : This message type is used to communicate cancellation of recurring contribution requests\n- `recurring_contribution_rejected` : This message type is used to communicate rejection of recurring contribution requests\n- `recurring_contribution_authorization_url_received` : This message type is used to communicate that the authorization url is received for the recurring contribution\n- `recurring_contribution_resumed` : This message type is used to communicate resuming of recurring contribution requests\n- `recurring_contribution_finished` : This message type is used to communicate completion of recurring contribution requests\n- `recurring_contribution_updated` : This message type is used to communicate updates (mandate transferr, mandate replacement) of recurring contribution requests\n- `HMRC_LISA_investor_creation_failed` : This message type is used to communicate rejection of HMRC LISA investor creation requests\n- `HMRC_LISA_account_creation_failed` : This message type is used to communicate rejection of HMRC LISA investor account creation requests\n- `HMRC_LISA_account_creation_successful` : This message type is used to communicate completion of HMRC LISA investor and account creation requests\n\n####  Recurring contribution activation message\n##### Payload\n\t\t\t\n| Name   | Type   | Description | Accepted values | \n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `recurring_contribution_activated` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `notifications` |\n| payload.status <br><font size=\"2\" color=\"red\">Required</font>  | string | Status of the recurring contribution | |\n| payload.contribution_name <br><font size=\"2\" color=\"red\">Required</font>  | string | User given identifier for the contribution  | |\n| payload.pot_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Pot ID of investor to direct the payment | |\n| payload.investor_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Investor ID of the investor making the contribution | |\n| payload.amount <br><font size=\"2\" color=\"red\">Required</font>  | string | Amount as a numeral string with two decimal points | |\n| payload.sub_transaction_type <br><font size=\"2\" color=\"red\">Required</font>  | string | Sub transaction type for recurring contribution | `Regular contribution`, `Regular contribution - non relievable`, `Regular contribution - Employer` |\n| payload.currency <br><font size=\"2\" color=\"red\">Required</font>  | string | Currency configured for the pot | |\n| payload.payment_type <br><font size=\"2\" color=\"red\">Required</font>  | string | Type of payment | |\n| payload.service_provider <br><font size=\"2\" color=\"red\">Required</font> | string | Service provider managing the recurring payment subscription  | |\n| payload.purpose <br><font size=\"2\" color=\"red\">Required</font> | string | Purpose of the recurring contribution  | `cash`, `invest` |\n| payload.source_id | string | Only for payments intents for employer contributions made towards SIPP Accumulation Products | |\n| payload.payment_schedule <br><font size=\"2\" color=\"red\">Required</font> | object | Parameters based on payment schedules   | |\n| payload.payment_schedule.interval_unit <br><font size=\"2\" color=\"red\">Required</font>  | string | Repeating interval unit of recurring payment  | `monthly` |\n| payload.payment_schedule.interval <br><font size=\"2\" color=\"red\">Required</font>  | number | Repeating interval of recurring payment  | |\n| payload.payment_schedule.date | number | Date the payment is expected to be triggered if frequency is monthly | |\n| payload.payment_schedule.start_date <br><font size=\"2\" color=\"red\">Required</font>  | string | Date to initiate the recurring payments  | |\n| payload.payment_schedule.end_date | string | Date to conclude the recurring payments, if count is not provided | |\n| payload.payment_schedule.count | number | No of recurring payments to trigger before concluding the payments, if an end date is not provided | |\n| payload.contribution_id <br><font size=\"2\" color=\"red\">Required</font>  | string | System generated unique id | |\n| payload.service_provider_params <br><font size=\"2\" color=\"red\">Required</font> | object | Parameters based on service provider   | |\n| payload.service_provider_params.status <br><font size=\"2\" color=\"red\">Required</font>  | string | Status transitions depend on the service provider  | |\n| payload.service_provider_params.reason <br><font size=\"2\" color=\"red\">Required</font>  | string | Reason for disabling/cancelling the contribution  | |\n\n##### Examples\n```json\n{\n    \"type\": \"recurring_contribution_activated\",\n    \"ch\": \"notifications\",\n    \"payload\": {\n        \"status\": \"Active\",\n        \"contribution_name\": \"GIA contribution-1\",\n        \"pot_id\": \"pot-XWL3805770\",\n        \"investor_id\": \"inv-QRY29279\",\n        \"amount\": \"1000060.12\",\n        \"sub_transaction_type\": \"Regular contribution\",\n        \"currency\": \"GBP\",\n        \"payment_type\": \"direct_debit\",\n        \"service_provider\": \"gocardless\",\n        \"purpose\": \"cash\",\n        \"payment_schedule\": {\n            \"interval_unit\": \"monthly\",\n            \"interval\": 7,\n            \"date\": 1,\n            \"start_date\": \"2024-04-02T00:00:00.000Z\",\n            \"end_date\": \"2024-04-03T00:00:00.000Z\"\n        },\n        \"contribution_id\": \"RCB-GC-JSJ6709\",\n        \"service_provider_params\": {\n            \"status\": \"Subscription created\",\n            \"authorization_reference\" : \"EV0159P7DZB2P6\",\n            \"contribution_reference\" : \"BRQ00030E3DXA4P\",\n            \"request_id\" : \"BRF00014ZXYN5V4F05M90GZEQCARE84K\",\n            \"authorization_url\": \"https://authexample.gocardless-sandbox.com\"\n        }\n    },\n    \"id\": \"952c7d0a-ecc6-4538-86f4-ad021f6855d0\",\n    \"ts\": 1683086449658,\n    \"resend\": true\n}\n```\n\n####  Recurring contribution cancellation message\n##### Payload\n\t\t\t\n| Name   | Type   | Description | Accepted values | \n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `recurring_contribution_cancelled` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `notifications` |\n| payload.status <br><font size=\"2\" color=\"red\">Required</font>  | string | Status of the recurring contribution | |\n| payload.contribution_name <br><font size=\"2\" color=\"red\">Required</font>  | string | User given identifier for the contribution  | |\n| payload.pot_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Pot ID of investor to direct the payment | |\n| payload.investor_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Investor ID of the investor making the contribution | |\n| payload.amount <br><font size=\"2\" color=\"red\">Required</font>  | string | Amount as a numeral string with two decimal points | |\n| payload.sub_transaction_type <br><font size=\"2\" color=\"red\">Required</font>  | string | Sub transaction type for recurring contribution | `Regular contribution`, `Regular contribution - non relievable`, `Regular contribution - Employer` |\n| payload.currency <br><font size=\"2\" color=\"red\">Required</font>  | string | Currency configured for the pot | |\n| payload.payment_type <br><font size=\"2\" color=\"red\">Required</font>  | string | Type of payment | |\n| payload.service_provider <br><font size=\"2\" color=\"red\">Required</font> | string | Service provider managing the recurring payment subscription  | |\n| payload.purpose <br><font size=\"2\" color=\"red\">Required</font> | string | Purpose of the recurring contribution  | `cash`, `invest` |\n| payload.source_id | string | Only for payments intents for employer contributions made towards SIPP Accumulation Products | |\n| payload.payment_schedule <br><font size=\"2\" color=\"red\">Required</font> | object | Parameters based on payment schedules   | |\n| payload.payment_schedule.interval_unit <br><font size=\"2\" color=\"red\">Required</font>  | string | Repeating interval unit of recurring payment  | `monthly` |\n| payload.payment_schedule.interval <br><font size=\"2\" color=\"red\">Required</font>  | number | Repeating interval of recurring payment  | |\n| payload.payment_schedule.date | number | Date the payment is expected to be triggered if frequency is monthly | |\n| payload.payment_schedule.start_date <br><font size=\"2\" color=\"red\">Required</font>  | string | Date to initiate the recurring payments  | |\n| payload.payment_schedule.end_date | string | Date to conclude the recurring payments, if count is not provided | |\n| payload.payment_schedule.count | number | No of recurring payments to trigger before concluding the payments, if an end date is not provided | |\n| payload.contribution_id <br><font size=\"2\" color=\"red\">Required</font>  | string | System generated unique id | |\n| payload.service_provider_params <br><font size=\"2\" color=\"red\">Required</font> | object | Parameters based on service provider   | |\n| payload.service_provider_params.status <br><font size=\"2\" color=\"red\">Required</font>  | string | Status transitions depend on the service provider  | |\n| payload.service_provider_params.reason <br><font size=\"2\" color=\"red\">Required</font>  | string | Reason for disabling/cancelling the contribution  | |\n\n##### Examples\n```json\n{\n    \"type\": \"recurring_contribution_cancelled\",\n    \"ch\": \"notifications\",\n    \"payload\": {\n        \"status\": \"Cancelled\",\n        \"contribution_name\": \"GIA contribution-1\",\n        \"pot_id\": \"pot-XWL3805770\",\n        \"investor_id\": \"inv-QRY29279\",\n        \"amount\": \"1000060.12\",\n        \"sub_transaction_type\": \"Regular contribution\",\n        \"currency\": \"GBP\",\n        \"payment_type\": \"direct_debit\",\n        \"service_provider\": \"gocardless\",\n        \"purpose\": \"cash\",\n        \"payment_schedule\": {\n            \"interval_unit\": \"monthly\",\n            \"interval\": 7,\n            \"date\": 1,\n            \"start_date\": \"2024-04-02T00:00:00.000Z\",\n            \"end_date\": \"2024-04-03T00:00:00.000Z\"\n        },\n        \"contribution_id\": \"RCB-GC-JSJ6709\",\n        \"service_provider_params\": {\n            \"status\": \"Subscription cancelled\",\n            \"authorization_reference\" : \"EV0159P7DZB2P6\",\n            \"contribution_reference\" : \"BRQ00030E3DXA4P\",\n            \"request_id\" : \"BRF00014ZXYN5V4F05M90GZEQCARE84K\",\n            \"authorization_url\": \"https://authexample.gocardless-sandbox.com\",\n            \"reason\" : \"The mandate for this subscription was cancelled at a bank branch.\"\n        }\n    },\n    \"id\": \"952c7d0a-ecc6-4538-86f4-ad021f6855d0\",\n    \"ts\": 1683086449658,\n    \"resend\": true\n}\n```\n\n####  Recurring contribution rejection message\n##### Payload\n\t\t\t\n| Name   | Type   | Description | Accepted values | \n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `recurring_contribution_rejected` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `notifications` |\n| payload.status <br><font size=\"2\" color=\"red\">Required</font>  | string | Status of the recurring contribution | |\n| payload.contribution_name <br><font size=\"2\" color=\"red\">Required</font>  | string | User given identifier for the contribution  | |\n| payload.pot_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Pot ID of investor to direct the payment | |\n| payload.investor_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Investor ID of the investor making the contribution | |\n| payload.amount <br><font size=\"2\" color=\"red\">Required</font>  | string | Amount as a numeral string with two decimal points | |\n| payload.sub_transaction_type <br><font size=\"2\" color=\"red\">Required</font>  | string | Sub transaction type for recurring contribution | `Regular contribution`, `Regular contribution - non relievable`, `Regular contribution - Employer` |\n| payload.currency <br><font size=\"2\" color=\"red\">Required</font>  | string | Currency configured for the pot | |\n| payload.payment_type <br><font size=\"2\" color=\"red\">Required</font>  | string | Type of payment | |\n| payload.service_provider <br><font size=\"2\" color=\"red\">Required</font> | string | Service provider managing the recurring payment subscription  | |\n| payload.purpose <br><font size=\"2\" color=\"red\">Required</font> | string | Purpose of the recurring contribution  | `cash`, `invest` |\n| payload.source_id | string | Only for payments intents for employer contributions made towards SIPP Accumulation Products | |\n| payload.payment_schedule <br><font size=\"2\" color=\"red\">Required</font> | object | Parameters based on payment schedules   | |\n| payload.payment_schedule.interval_unit <br><font size=\"2\" color=\"red\">Required</font>  | string | Repeating interval unit of recurring payment  | `monthly` |\n| payload.payment_schedule.interval <br><font size=\"2\" color=\"red\">Required</font>  | number | Repeating interval of recurring payment  | |\n| payload.payment_schedule.date | number | Date the payment is expected to be triggered if frequency is monthly | |\n| payload.payment_schedule.start_date <br><font size=\"2\" color=\"red\">Required</font>  | string | Date to initiate the recurring payments  | |\n| payload.payment_schedule.end_date | string | Date to conclude the recurring payments, if count is not provided | |\n| payload.payment_schedule.count | number | No of recurring payments to trigger before concluding the payments, if an end date is not provided | |\n| payload.contribution_id <br><font size=\"2\" color=\"red\">Required</font>  | string | System generated unique id | |\n| payload.service_provider_params <br><font size=\"2\" color=\"red\">Required</font> | object | Parameters based on service provider   | |\n| payload.service_provider_params.status <br><font size=\"2\" color=\"red\">Required</font>  | string | Status transitions depend on the service provider  | |\n| payload.service_provider_params.reason <br><font size=\"2\" color=\"red\">Required</font>  | string | Reason for disabling/cancelling the contribution  | |\n\n##### Examples\n```json\n{\n    \"type\": \"recurring_contribution_rejected\",\n    \"ch\": \"notifications\",\n    \"payload\": {\n        \"status\": \"Rejected\",\n        \"contribution_name\": \"GIA contribution-1\",\n        \"pot_id\": \"pot-XWL3805770\",\n        \"investor_id\": \"inv-QRY29279\",\n        \"amount\": \"1000060.12\",\n        \"sub_transaction_type\": \"Regular contribution\",\n        \"currency\": \"GBP\",\n        \"payment_type\": \"direct_debit\",\n        \"service_provider\": \"gocardless\",\n        \"purpose\": \"cash\",\n        \"payment_schedule\": {\n            \"interval_unit\": \"monthly\",\n            \"interval\": 7,\n            \"date\": 1,\n            \"start_date\": \"2024-04-02T00:00:00.000Z\",\n            \"end_date\": \"2024-04-03T00:00:00.000Z\"\n        },\n        \"contribution_id\": \"RCB-GC-JSJ6709\",\n        \"service_provider_params\": {\n            \"status\": \"Pending service provider setup\",\n            \"reason\": \"One of your parameters was incorrectly typed\"\n        }\n    },\n    \"id\": \"952c7d0a-ecc6-4538-86f4-ad021f6855d0\",\n    \"ts\": 1683086449658,\n    \"resend\": true\n}\n```\n\n####  Recurring contribution authorization url received message\n##### Payload\n\t\t\t\n| Name   | Type   | Description | Accepted values | \n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `recurring_contribution_authorization_url_received` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `notifications` |\n| payload.status <br><font size=\"2\" color=\"red\">Required</font>  | string | Status of the recurring contribution | |\n| payload.contribution_name <br><font size=\"2\" color=\"red\">Required</font>  | string | User given identifier for the contribution  | |\n| payload.pot_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Pot ID of investor to direct the payment | |\n| payload.investor_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Investor ID of the investor making the contribution | |\n| payload.amount <br><font size=\"2\" color=\"red\">Required</font>  | string | Amount as a numeral string with two decimal points | |\n| payload.sub_transaction_type <br><font size=\"2\" color=\"red\">Required</font>  | string | Sub transaction type for recurring contribution | `Regular contribution`, `Regular contribution - non relievable`, `Regular contribution - Employer` |\n| payload.currency <br><font size=\"2\" color=\"red\">Required</font>  | string | Currency configured for the pot | |\n| payload.payment_type <br><font size=\"2\" color=\"red\">Required</font>  | string | Type of payment | |\n| payload.service_provider <br><font size=\"2\" color=\"red\">Required</font> | string | Service provider managing the recurring payment subscription  | |\n| payload.purpose <br><font size=\"2\" color=\"red\">Required</font> | string | Purpose of the recurring contribution  | `cash`, `invest` |\n| payload.source_id | string | Only for payments intents for employer contributions made towards SIPP Accumulation Products | |\n| payload.payment_schedule <br><font size=\"2\" color=\"red\">Required</font> | object | Parameters based on payment schedules   | |\n| payload.payment_schedule.interval_unit <br><font size=\"2\" color=\"red\">Required</font>  | string | Repeating interval unit of recurring payment  | `monthly` |\n| payload.payment_schedule.interval <br><font size=\"2\" color=\"red\">Required</font>  | number | Repeating interval of recurring payment  | |\n| payload.payment_schedule.date | number | Date the payment is expected to be triggered if frequency is monthly | |\n| payload.payment_schedule.start_date <br><font size=\"2\" color=\"red\">Required</font>  | string | Date to initiate the recurring payments  | |\n| payload.payment_schedule.end_date | string | Date to conclude the recurring payments, if count is not provided | |\n| payload.payment_schedule.count | number | No of recurring payments to trigger before concluding the payments, if an end date is not provided | |\n| payload.contribution_id <br><font size=\"2\" color=\"red\">Required</font>  | string | System generated unique id | |\n| payload.service_provider_params <br><font size=\"2\" color=\"red\">Required</font> | object | Parameters based on service provider   | |\n| payload.service_provider_params.status <br><font size=\"2\" color=\"red\">Required</font>  | string | Status transitions depend on the service provider  | |\n| payload.service_provider_params.request_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Request ID used to create a contribution with the service provider  | |\n| payload.service_provider_params.authorization_url <br><font size=\"2\" color=\"red\">Required</font>  | string | Authorization URL sent by service provider to setup customer reference data and bank account information  | |\n\n##### Examples\n```json\n{\n    \"type\": \"recurring_contribution_rejected\",\n    \"ch\": \"notifications\",\n    \"payload\": {\n        \"status\": \"Pending\",\n        \"contribution_name\": \"Sanjali SIPP contribution\",\n        \"pot_id\": \"pot-XWL3805775\",\n        \"investor_id\": \"inv-NNO44399\",\n        \"amount\": \"1000\",\n        \"sub_transaction_type\": \"Regular contribution\",\n        \"currency\": \"GBP\",\n        \"payment_type\": \"direct_debit\",\n        \"service_provider\": \"gocardless\",\n        \"purpose\": \"cash\",\n        \"payment_schedule\": {\n            \"interval_unit\": \"monthly\",\n            \"interval\": 1,\n            \"start_date\": \"Thu Jun 01 2023 00:00:00 GMT+0000 (Coordinated Universal Time)\",\n            \"date\": 1,\n            \"count\": 10\n        },\n        \"financial_product_id\": \"sipp_accumulation\",\n        \"contribution_id\": \"RCB-GC-JDJ4807\",\n        \"service_provider_params\": {\n            \"status\": \"Pending service provider setup\",\n            \"request_id\": \"BRQ0003R0RBM2BK\",\n            \"authorization_url\": \"https://pay-sandbox.gocardless.com/billing/static/flow?id=BRF0001BM491H7NWGZ6W2Z5NMVV7GP4T\"\n        }\n    },\n    \"id\": \"852c7d0a-ecc6-4538-86f4-ad021f6855k0\",\n    \"ts\": 1684086449658,\n    \"resend\": true\n}\n```\n\n####  Recurring contribution resume message\n##### Payload\n\t\t\t\n| Name   | Type   | Description | Accepted values | \n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `recurring_contribution_resumed` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `notifications` |\n| payload.status <br><font size=\"2\" color=\"red\">Required</font>  | string | Status of the recurring contribution | |\n| payload.contribution_name <br><font size=\"2\" color=\"red\">Required</font>  | string | User given identifier for the contribution  | |\n| payload.pot_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Pot ID of investor to direct the payment | |\n| payload.investor_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Investor ID of the investor making the contribution | |\n| payload.amount <br><font size=\"2\" color=\"red\">Required</font>  | string | Amount as a numeral string with two decimal points | |\n| payload.sub_transaction_type <br><font size=\"2\" color=\"red\">Required</font>  | string | Sub transaction type for recurring contribution | `Regular contribution`, `Regular contribution - non relievable`, `Regular contribution - Employer` |\n| payload.currency <br><font size=\"2\" color=\"red\">Required</font>  | string | Currency configured for the pot | |\n| payload.payment_type <br><font size=\"2\" color=\"red\">Required</font>  | string | Type of payment | |\n| payload.service_provider <br><font size=\"2\" color=\"red\">Required</font> | string | Service provider managing the recurring payment subscription  | |\n| payload.purpose <br><font size=\"2\" color=\"red\">Required</font> | string | Purpose of the recurring contribution  | `cash`, `invest` |\n| payload.source_id | string | Only for payments intents for employer contributions made towards SIPP Accumulation Products | |\n| payload.payment_schedule <br><font size=\"2\" color=\"red\">Required</font> | object | Parameters based on payment schedules   | |\n| payload.payment_schedule.interval_unit <br><font size=\"2\" color=\"red\">Required</font>  | string | Repeating interval unit of recurring payment  | `monthly` |\n| payload.payment_schedule.interval <br><font size=\"2\" color=\"red\">Required</font>  | number | Repeating interval of recurring payment  | |\n| payload.payment_schedule.date | number | Date the payment is expected to be triggered if frequency is monthly | |\n| payload.payment_schedule.start_date <br><font size=\"2\" color=\"red\">Required</font>  | string | Date to initiate the recurring payments  | |\n| payload.payment_schedule.end_date | string | Date to conclude the recurring payments, if count is not provided | |\n| payload.payment_schedule.count | number | No of recurring payments to trigger before concluding the payments, if an end date is not provided | |\n| payload.contribution_id <br><font size=\"2\" color=\"red\">Required</font>  | string | System generated unique id | |\n| payload.service_provider_params <br><font size=\"2\" color=\"red\">Required</font> | object | Parameters based on service provider   | |\n| payload.service_provider_params.status <br><font size=\"2\" color=\"red\">Required</font>  | string | Status transitions depend on the service provider  | |\n| payload.service_provider_params.reason <br><font size=\"2\" color=\"red\">Required</font>  | string | Reason for disabling/cancelling the contribution  | |\n\n##### Examples\n```json\n{\n    \"type\": \"recurring_contribution_resumed\",\n    \"ch\": \"notifications\",\n    \"payload\": {\n        \"status\": \"Active\",\n        \"contribution_name\": \"GIA contribution-1\",\n        \"pot_id\": \"pot-XWL3805770\",\n        \"investor_id\": \"inv-QRY29279\",\n        \"amount\": \"1000060.12\",\n        \"sub_transaction_type\": \"Regular contribution\",\n        \"currency\": \"GBP\",\n        \"payment_type\": \"direct_debit\",\n        \"service_provider\": \"gocardless\",\n        \"purpose\": \"cash\",\n        \"payment_schedule\": {\n            \"interval_unit\": \"monthly\",\n            \"interval\": 7,\n            \"date\": 1,\n            \"start_date\": \"2024-04-02T00:00:00.000Z\",\n            \"end_date\": \"2024-04-03T00:00:00.000Z\"\n        },\n        \"contribution_id\": \"RCB-GC-JSJ6709\",\n        \"service_provider_params\": {\n            \"status\": \"Subscription resumed\",\n            \"authorization_reference\" : \"EV0159P7DZB2P6\",\n            \"contribution_reference\" : \"BRQ00030E3DXA4P\",\n            \"request_id\" : \"BRF00014ZXYN5V4F05M90GZEQCARE84K\",\n            \"authorization_url\": \"https://authexample.gocardless-sandbox.com\"\n        }\n    },\n    \"id\": \"952c7d0a-ecc6-4538-86f4-ad021f6855d0\",\n    \"ts\": 1683086449658,\n    \"resend\": true\n}\n```\n\n####  Recurring contribution completion message\n##### Payload\n\t\t\t\n| Name   | Type   | Description | Accepted values | \n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `recurring_contribution_finished` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `notifications` |\n| payload.status <br><font size=\"2\" color=\"red\">Required</font>  | string | Status of the recurring contribution | |\n| payload.contribution_name <br><font size=\"2\" color=\"red\">Required</font>  | string | User given identifier for the contribution  | |\n| payload.pot_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Pot ID of investor to direct the payment | |\n| payload.investor_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Investor ID of the investor making the contribution | |\n| payload.amount <br><font size=\"2\" color=\"red\">Required</font>  | string | Amount as a numeral string with two decimal points | |\n| payload.sub_transaction_type <br><font size=\"2\" color=\"red\">Required</font>  | string | Sub transaction type for recurring contribution | `Regular contribution`, `Regular contribution - non relievable`, `Regular contribution - Employer` |\n| payload.currency <br><font size=\"2\" color=\"red\">Required</font>  | string | Currency configured for the pot | |\n| payload.payment_type <br><font size=\"2\" color=\"red\">Required</font>  | string | Type of payment | |\n| payload.service_provider <br><font size=\"2\" color=\"red\">Required</font> | string | Service provider managing the recurring payment subscription  | |\n| payload.purpose <br><font size=\"2\" color=\"red\">Required</font> | string | Purpose of the recurring contribution  | `cash`, `invest` |\n| payload.source_id | string | Only for payments intents for employer contributions made towards SIPP Accumulation Products | |\n| payload.payment_schedule <br><font size=\"2\" color=\"red\">Required</font> | object | Parameters based on payment schedules   | |\n| payload.payment_schedule.interval_unit <br><font size=\"2\" color=\"red\">Required</font>  | string | Repeating interval unit of recurring payment  | `monthly` |\n| payload.payment_schedule.interval <br><font size=\"2\" color=\"red\">Required</font>  | number | Repeating interval of recurring payment  | |\n| payload.payment_schedule.date | number | Date the payment is expected to be triggered if frequency is monthly | |\n| payload.payment_schedule.start_date <br><font size=\"2\" color=\"red\">Required</font>  | string | Date to initiate the recurring payments  | |\n| payload.payment_schedule.end_date | string | Date to conclude the recurring payments, if count is not provided | |\n| payload.payment_schedule.count | number | No of recurring payments to trigger before concluding the payments, if an end date is not provided | |\n| payload.contribution_id <br><font size=\"2\" color=\"red\">Required</font>  | string | System generated unique id | |\n| payload.service_provider_params <br><font size=\"2\" color=\"red\">Required</font> | object | Parameters based on service provider   | |\n| payload.service_provider_params.status <br><font size=\"2\" color=\"red\">Required</font>  | string | Status transitions depend on the service provider  | |\n| payload.service_provider_params.reason <br><font size=\"2\" color=\"red\">Required</font>  | string | Reason for disabling/cancelling the contribution  | |\n\n##### Examples\n```json\n{\n    \"type\": \"recurring_contribution_finished\",\n    \"ch\": \"notifications\",\n    \"payload\": {\n        \"status\": \"Finished\",\n        \"contribution_name\": \"GIA contribution-1\",\n        \"pot_id\": \"pot-XWL3805770\",\n        \"investor_id\": \"inv-QRY29279\",\n        \"amount\": \"1000060.12\",\n        \"sub_transaction_type\": \"Regular contribution\",\n        \"currency\": \"GBP\",\n        \"payment_type\": \"direct_debit\",\n        \"service_provider\": \"gocardless\",\n        \"purpose\": \"cash\",\n        \"payment_schedule\": {\n            \"interval_unit\": \"monthly\",\n            \"interval\": 7,\n            \"date\": 1,\n            \"start_date\": \"2024-04-02T00:00:00.000Z\",\n            \"end_date\": \"2024-04-03T00:00:00.000Z\"\n        },\n        \"contribution_id\": \"RCB-GC-JSJ6709\",\n        \"service_provider_params\": {\n            \"status\": \"Subscription finished\",\n            \"authorization_reference\" : \"EV0159P7DZB2P6\",\n            \"contribution_reference\" : \"BRQ00030E3DXA4P\",\n            \"request_id\" : \"BRF00014ZXYN5V4F05M90GZEQCARE84K\",\n            \"authorization_url\": \"https://authexample.gocardless-sandbox.com\",\n            \"reason\" : \"The subscription has finished.\"\n        }\n    },\n    \"id\": \"952c7d0a-ecc6-4538-86f4-ad021f6855d0\",\n    \"ts\": 1683086449658,\n    \"resend\": true\n}\n```\n\n####  Recurring contribution update message\n##### Payload\n\t\t\t\n| Name   | Type   | Description | Accepted values | \n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `recurring_contribution_updated` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `notifications` |\n| payload.status <br><font size=\"2\" color=\"red\">Required</font>  | string | Status of the recurring contribution | |\n| payload.contribution_name <br><font size=\"2\" color=\"red\">Required</font>  | string | User given identifier for the contribution  | |\n| payload.pot_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Pot ID of investor to direct the payment | |\n| payload.investor_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Investor ID of the investor making the contribution | |\n| payload.amount <br><font size=\"2\" color=\"red\">Required</font>  | string | Amount as a numeral string with two decimal points | |\n| payload.sub_transaction_type <br><font size=\"2\" color=\"red\">Required</font>  | string | Sub transaction type for recurring contribution | `Regular contribution`, `Regular contribution - non relievable`, `Regular contribution - Employer` |\n| payload.currency <br><font size=\"2\" color=\"red\">Required</font>  | string | Currency configured for the pot | |\n| payload.payment_type <br><font size=\"2\" color=\"red\">Required</font>  | string | Type of payment | |\n| payload.service_provider <br><font size=\"2\" color=\"red\">Required</font> | string | Service provider managing the recurring payment subscription  | |\n| payload.purpose <br><font size=\"2\" color=\"red\">Required</font> | string | Purpose of the recurring contribution  | `cash`, `invest` |\n| payload.source_id | string | Only for payments intents for employer contributions made towards SIPP Accumulation Products | |\n| payload.payment_schedule <br><font size=\"2\" color=\"red\">Required</font> | object | Parameters based on payment schedules   | |\n| payload.payment_schedule.interval_unit <br><font size=\"2\" color=\"red\">Required</font>  | string | Repeating interval unit of recurring payment  | `monthly` |\n| payload.payment_schedule.interval <br><font size=\"2\" color=\"red\">Required</font>  | number | Repeating interval of recurring payment  | |\n| payload.payment_schedule.date | number | Date the payment is expected to be triggered if frequency is monthly | |\n| payload.payment_schedule.start_date <br><font size=\"2\" color=\"red\">Required</font>  | string | Date to initiate the recurring payments  | |\n| payload.payment_schedule.end_date | string | Date to conclude the recurring payments, if count is not provided | |\n| payload.payment_schedule.count | number | No of recurring payments to trigger before concluding the payments, if an end date is not provided | |\n| payload.contribution_id <br><font size=\"2\" color=\"red\">Required</font>  | string | System generated unique id | |\n| payload.service_provider_params <br><font size=\"2\" color=\"red\">Required</font> | object | Parameters based on service provider   | |\n| payload.service_provider_params.status <br><font size=\"2\" color=\"red\">Required</font>  | string | Status transitions depend on the service provider  | |\n| payload.service_provider_params.reason <br><font size=\"2\" color=\"red\">Required</font>  | string | Reason for disabling/cancelling the contribution  | |\n\n##### Examples\n```json\n{\n    \"type\": \"recurring_contribution_updated\",\n    \"ch\": \"notifications\",\n    \"payload\": {\n        \"status\": \"Active\",\n        \"contribution_name\": \"GIA contribution-1\",\n        \"pot_id\": \"pot-XWL3805770\",\n        \"investor_id\": \"inv-QRY29279\",\n        \"amount\": \"1000060.12\",\n        \"sub_transaction_type\": \"Regular contribution\",\n        \"currency\": \"GBP\",\n        \"payment_type\": \"direct_debit\",\n        \"service_provider\": \"gocardless\",\n        \"purpose\": \"cash\",\n        \"payment_schedule\": {\n            \"interval_unit\": \"monthly\",\n            \"interval\": 7,\n            \"date\": 1,\n            \"start_date\": \"2024-04-02T00:00:00.000Z\",\n            \"end_date\": \"2024-04-03T00:00:00.000Z\"\n        },\n        \"contribution_id\": \"RCB-GC-JSJ6709\",\n        \"service_provider_params\": {\n            \"status\": \"Mandate replaced\",\n            \"authorization_reference\" : \"EV1059P8HGJ6P6\",\n            \"contribution_reference\" : \"BRQ00030E3DXA4P\",\n            \"request_id\" : \"BRF00014ZXYN5V4F05M90GZEQCARE84K\",\n            \"authorization_url\": \"https://authexample.gocardless-sandbox.com\"\n        }\n    },\n    \"id\": \"952c7d0a-ecc6-4538-86f4-ad021f6855d0\",\n    \"ts\": 1683086449658,\n    \"resend\": true\n}\n```\n\n####  HMRC LISA investor creation failed message\n##### Payload\n\t\t\t\n| Name   | Type   | Description | Accepted values | \n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `HMRC_LISA_investor_creation_failed` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `notifications` |\n| payload.investor_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Investor id of the investor account | |\n| payload.account_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Account id of the investor account  | |\n| payload.hmrc_data <br><font size=\"2\" color=\"red\">Required</font> | object | HMRC related data   | |\n| payload.hmrc_data.status <br><font size=\"2\" color=\"red\">Required</font>  | string | Indicate the status of the LISA investor and investor account creation with HMRC  | |\n| payload.hmrc_data.reason <br><font size=\"2\" color=\"red\">Required</font>  | string | Reason for failure  | |\n\n##### Examples\n```json\n{\n    \"type\": \"HMRC_LISA_investor_creation_failed\",\n    \"ch\": \"notifications\",\n    \"payload\": {\n        \"investor_id\": \"inv-QRY29279\",\n        \"account_id\": \"LISAC1699158978930\",\n        \"hmrc_data\": {\n            \"status\": \"hmrc_investor_creation_failed\",\n            \"reason\": \"The HMRC request contains invalid or missing data\"\n        }\n    },\n    \"id\": \"952c7d0a-ecc6-4538-86f4-ad021f6855d0\",\n    \"ts\": 1683086449658,\n    \"resend\": true\n}\n```\n\n####  HMRC LISA account creation failed message\n##### Payload\n\t\t\t\n| Name   | Type   | Description | Accepted values | \n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `HMRC_LISA_account_creation_failed` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `notifications` |\n| payload.investor_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Investor id of the investor account | |\n| payload.account_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Account id of the investor account  | |\n| payload.hmrc_data <br><font size=\"2\" color=\"red\">Required</font> | object | HMRC related data   | |\n| payload.hmrc_data.status <br><font size=\"2\" color=\"red\">Required</font>  | string | Indicate the status of the LISA investor and investor account creation with HMRC  | |\n| payload.hmrc_data.reason <br><font size=\"2\" color=\"red\">Required</font>  | string | Reason for failure  | |\n\n##### Examples\n```json\n{\n    \"type\": \"HMRC_LISA_account_creation_failed\",\n    \"ch\": \"notifications\",\n    \"payload\": {\n        \"investor_id\": \"inv-QRY29279\",\n        \"account_id\": \"LISAC1699158978930\",\n        \"hmrc_data\": {\n            \"status\": \"hmrc_account_creation_failed\",\n            \"reason\": \"The HMRC request contains invalid or missing data\"\n        }\n    },\n    \"id\": \"952c7d0a-ecc6-4538-86f4-ad021f6855d0\",\n    \"ts\": 1683086449658,\n    \"resend\": true\n}\n```\n\n####  HMRC LISA account creation successful message\n##### Payload\n\t\t\t\n| Name   | Type   | Description | Accepted values | \n| ----------- | ----------- | ----------- | ----------- |\n| type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `HMRC_LISA_account_creation_successful` |\n| ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `notifications` |\n| payload.investor_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Investor id of the investor account | |\n| payload.account_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Account id of the investor account  | |\n| payload.hmrc_data <br><font size=\"2\" color=\"red\">Required</font> | object | HMRC related data   | |\n| payload.hmrc_data.status <br><font size=\"2\" color=\"red\">Required</font>  | string | Indicate the status of the LISA investor and investor account creation with HMRC  | |\n| payload.hmrc_data.lisa_investor_reference <br><font size=\"2\" color=\"red\">Required</font>  | object | HMRC LISA investor reference  | |\n\n##### Examples\n```json\n{\n    \"type\": \"HMRC_LISA_account_creation_successful\",\n    \"ch\": \"notifications\",\n    \"payload\": {\n        \"investor_id\": \"inv-QRY29279\",\n        \"account_id\": \"LISAC1699158978930\",\n        \"hmrc_data\": {\n            \"status\": \"hmrc_account_creation_successful\",\n            \"lisa_investor_reference\": \"5305636328\" \n        }\n    },\n    \"id\": \"952c7d0a-ecc6-4538-86f4-ad021f6855d0\",\n    \"ts\": 1683086449658,\n    \"resend\": true\n}\n```"
