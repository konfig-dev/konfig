hash: 842296316e39ed80e7563e244f54126458ca1492729c803659f65fda70a1bb11
methodObjects:
  - url: /exports
    method: listExports
    httpMethod: get
    tag: Export
    typeScriptTag: export
    description: List Exports
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '403'
        description: ''
  - url: /exports
    method: createNewExport
    httpMethod: post
    tag: Export
    typeScriptTag: export
    description: Create Export
    parameters:
      - name: collections
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '201'
        description: >-
          Some software applications may want programmatic access to their
          newsletter exports.

          This assists with a few niche use cases, such as regular backups or
          data ingestion

          (into a data warehouse), or post-publishing processes that hinge on
          email events.


          In general, you probably won't _need_ to use this endpoint unless you
           _absolutely_ need to use this endpoint.
      - statusCode: '403'
        description: ''
  - url: /exports/{pk}
    method: getExport
    httpMethod: get
    tag: Export
    typeScriptTag: export
    description: Retrieve Export
    parameters:
      - name: pk
        schema: string
        required: true
        description: ''
        example: PK
    responses:
      - statusCode: '200'
        description: >-
          Some software applications may want programmatic access to their
          newsletter exports.

          This assists with a few niche use cases, such as regular backups or
          data ingestion

          (into a data warehouse), or post-publishing processes that hinge on
          email events.


          In general, you probably won't _need_ to use this endpoint unless you
           _absolutely_ need to use this endpoint.
      - statusCode: '403'
        description: ''
  - url: /tags
    method: listTags
    httpMethod: get
    tag: Tag
    typeScriptTag: tag
    description: List Tags
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /tags
    method: createNewTag
    httpMethod: post
    tag: Tag
    typeScriptTag: tag
    description: Create Tag
    parameters:
      - name: description
        schema: string
        required: false
        description: ''
      - name: name
        schema: string
        required: true
        description: ''
        example: NAME
      - name: color
        schema: string
        required: true
        description: ''
        example: COLOR
    responses:
      - statusCode: '201'
        description: >-
          Tags are a way to organize your subscribers. You can create, update,
          and

          delete tags via the API. You can also list all tags for a given
          newsletter.


          Tags don't have any strict functionality on their own, but you can
          send emails

          to subscribers with a given tag (or to all subscribers _without_ a
          given tag.)
      - statusCode: '400'
        description: ''
      - statusCode: '403'
        description: ''
  - url: /tags/{tag_id}
    method: removeTag
    httpMethod: delete
    tag: Tag
    typeScriptTag: tag
    description: Delete Tag
    parameters:
      - name: tagId
        schema: string
        required: true
        description: ''
        example: TAG_ID
    responses:
      - statusCode: '204'
        description: No Content
  - url: /tags/{tag_id}
    method: getTag
    httpMethod: get
    tag: Tag
    typeScriptTag: tag
    description: Retrieve Tag
    parameters:
      - name: tagId
        schema: string
        required: true
        description: ''
        example: TAG_ID
    responses:
      - statusCode: '200'
        description: >-
          Tags are a way to organize your subscribers. You can create, update,
          and

          delete tags via the API. You can also list all tags for a given
          newsletter.


          Tags don't have any strict functionality on their own, but you can
          send emails

          to subscribers with a given tag (or to all subscribers _without_ a
          given tag.)
  - url: /tags/{tag_id}
    method: updateTag
    httpMethod: patch
    tag: Tag
    typeScriptTag: tag
    description: Update Tag
    parameters:
      - name: tagId
        schema: string
        required: true
        description: ''
        example: TAG_ID
      - name: description
        schema: string
        description: ''
      - name: name
        schema: string
        description: ''
      - name: color
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: >-
          Tags are a way to organize your subscribers. You can create, update,
          and

          delete tags via the API. You can also list all tags for a given
          newsletter.


          Tags don't have any strict functionality on their own, but you can
          send emails

          to subscribers with a given tag (or to all subscribers _without_ a
          given tag.)
      - statusCode: '400'
        description: ''
  - url: /ping
    method: pingHealthCheck
    httpMethod: get
    tag: HealthCheck
    typeScriptTag: healthCheck
    description: Ping
    parameters: []
    responses:
      - statusCode: '200'
        description: OK
  - url: /images
    method: createNewImage
    httpMethod: post
    tag: Image
    typeScriptTag: image
    description: Create Image
    parameters:
      - name: image
        schema: string
        required: true
        description: ''
        example: IMAGE
    responses:
      - statusCode: '201'
        description: >-
          Images are, well, images! Buttondown allows you to upload images to
          its secure

          S3 bucket and do with them what you will. This is sort of an odd duck
          of an

          API, to be sure, but if you want to be able to do things like draft

          and send emails completely on your iPad you need a surefire way of
          creating images.
  - url: /images/{image_id}
    method: deleteImage
    httpMethod: delete
    tag: Image
    typeScriptTag: image
    description: Delete Image
    parameters:
      - name: imageId
        schema: string
        required: true
        description: ''
        example: IMAGE_ID
    responses:
      - statusCode: '204'
        description: No Content
  - url: /emails
    method: listEmails
    httpMethod: get
    tag: Email
    typeScriptTag: email
    description: List Emails
    parameters:
      - name: status
        schema: array
        required: false
        description: ''
        default:
          - about_to_send
          - in_flight
          - sent
      - name: includedTags
        schema: array
        required: false
        description: ''
        default: []
      - name: excludedTags
        schema: array
        required: false
        description: ''
        default: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '403'
        description: ''
  - url: /emails
    method: createNewEmail
    httpMethod: post
    tag: Email
    typeScriptTag: email
    description: Create Email
    parameters:
      - name: included_tags
        schema: array
        required: false
        description: ''
        default: []
      - name: excluded_tags
        schema: array
        required: false
        description: ''
        default: []
      - name: publish_date
        schema: string
        required: false
        description: ''
      - name: subject
        schema: string
        required: true
        description: ''
        example: SUBJECT
      - name: body
        schema: string
        required: false
        description: ''
        default: ''
      - name: email_type
        schema: string
        required: false
        description: ''
      - name: status
        schema: string
        required: false
        description: ''
      - name: metadata
        schema: object
        required: false
        description: ''
        default: {}
    responses:
      - statusCode: '201'
        description: >-
          Emails are what you're for here on Buttondown at the end of the day,
          right?

          Creating an email via the API is just like creating one in the
          interface;

          it will instantly trigger sending actual emails,

          based on the tags and email type you provide.
      - statusCode: '400'
        description: ''
      - statusCode: '403'
        description: ''
  - url: /emails/{pk}
    method: getEmail
    httpMethod: get
    tag: Email
    typeScriptTag: email
    description: Retrieve Email
    parameters:
      - name: pk
        schema: string
        required: true
        description: ''
        example: PK
    responses:
      - statusCode: '200'
        description: >-
          Emails are what you're for here on Buttondown at the end of the day,
          right?

          Creating an email via the API is just like creating one in the
          interface;

          it will instantly trigger sending actual emails,

          based on the tags and email type you provide.
      - statusCode: '403'
        description: ''
  - url: /emails/{pk}/analytics
    method: getAnalytics
    httpMethod: get
    tag: Email
    typeScriptTag: email
    description: Retrieve Email Analytics
    parameters:
      - name: pk
        schema: string
        required: true
        description: ''
        example: PK
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '403'
        description: ''
  - url: /subscribers
    method: listSubscribers
    httpMethod: get
    tag: Subscriber
    typeScriptTag: subscriber
    description: List Subscribers
    parameters:
      - name: type
        schema: string
        required: false
        description: ''
      - name: email
        schema: string
        required: false
        description: ''
        default: ''
      - name: tag
        schema: string
        required: false
        description: ''
        default: ''
      - name: tag
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '403'
        description: ''
  - url: /subscribers
    method: createNewSubscriber
    httpMethod: post
    tag: Subscriber
    typeScriptTag: subscriber
    description: Create Subscriber
    parameters:
      - name: tags
        schema: array
        required: false
        description: ''
        default: []
      - name: email
        schema: string
        required: true
        description: ''
        example: EMAIL
      - name: notes
        schema: string
        required: false
        description: ''
        default: ''
      - name: metadata
        schema: object
        required: false
        description: ''
        default: {}
      - name: referrer_url
        schema: string
        required: false
        description: ''
        default: ''
    responses:
      - statusCode: '201'
        description: |-
          Subscribers are the main way you collect email addresses and
          recipients on Buttondown. They're what you see on your
          [subscribers page](https://buttondown.email/subscribers).
      - statusCode: '400'
        description: ''
      - statusCode: '403'
        description: ''
  - url: /subscribers/{pk}
    method: removeSubscriber
    httpMethod: delete
    tag: Subscriber
    typeScriptTag: subscriber
    description: Delete Subscriber
    parameters:
      - name: pk
        schema: string
        required: true
        description: ''
        example: PK
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '403'
        description: ''
  - url: /subscribers/{pk}
    method: getSubscriber
    httpMethod: get
    tag: Subscriber
    typeScriptTag: subscriber
    description: Retrieve Subscriber
    parameters:
      - name: pk
        schema: string
        required: true
        description: ''
        example: PK
    responses:
      - statusCode: '200'
        description: |-
          Subscribers are the main way you collect email addresses and
          recipients on Buttondown. They're what you see on your
          [subscribers page](https://buttondown.email/subscribers).
  - url: /subscribers/{pk}
    method: updateDetails
    httpMethod: patch
    tag: Subscriber
    typeScriptTag: subscriber
    description: Update Subscriber
    parameters:
      - name: pk
        schema: string
        required: true
        description: ''
        example: PK
      - name: tags
        schema: array
        description: ''
      - name: email
        schema: string
        description: ''
      - name: notes
        schema: string
        description: ''
      - name: metadata
        schema: object
        description: ''
      - name: referrer_url
        schema: string
        description: ''
        default: ''
      - name: subscriber_type
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          Subscribers are the main way you collect email addresses and
          recipients on Buttondown. They're what you see on your
          [subscribers page](https://buttondown.email/subscribers).
      - statusCode: '400'
        description: ''
      - statusCode: '403'
        description: ''
  - url: /subscribers/{pk}/send-reminder
    method: sendReminder
    httpMethod: post
    tag: Subscriber
    typeScriptTag: subscriber
    description: Send Reminder
    parameters:
      - name: pk
        schema: string
        required: true
        description: ''
        example: PK
    responses:
      - statusCode: '200'
        description: OK
      - statusCode: '403'
        description: ''
  - url: /subscribers/{pk}/emails/{email_pk}
    method: sendTo
    httpMethod: post
    tag: Email
    typeScriptTag: email
    description: Send Email To
    parameters:
      - name: pk
        schema: string
        required: true
        description: ''
        example: PK
      - name: emailPk
        schema: string
        required: true
        description: ''
        example: EMAIL_PK
    responses:
      - statusCode: '200'
        description: OK
      - statusCode: '400'
        description: ''
      - statusCode: '403'
        description: ''
  - url: /newsletters
    method: listNewsletters
    httpMethod: get
    tag: Newsletter
    typeScriptTag: newsletter
    description: List Newsletters
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '403'
        description: ''
  - url: /newsletters
    method: createNewNewsletter
    httpMethod: post
    tag: Newsletter
    typeScriptTag: newsletter
    description: Create Newsletter
    parameters:
      - name: description
        schema: string
        required: true
        description: ''
        example: DESCRIPTION
      - name: username
        schema: string
        required: true
        description: ''
        example: USERNAME
      - name: name
        schema: string
        required: true
        description: ''
        example: NAME
    responses:
      - statusCode: '201'
        description: |-
          You will likely not need to interact with your newsletter settings
          programmatically, but if you do, this is the endpoint for you. You can
          create, update, and list newsletters via the API; this is ideal for
          integrating with Buttondown as a headless email or newsletter provider
          (e.g. for a SaaS product.)
      - statusCode: '400'
        description: ''
      - statusCode: '403'
        description: ''
  - url: /newsletters/{pk}
    method: deleteById
    httpMethod: delete
    tag: Newsletter
    typeScriptTag: newsletter
    description: Delete Newsletter
    parameters:
      - name: pk
        schema: string
        required: true
        description: ''
        example: PK
    responses:
      - statusCode: '204'
        description: No Content
      - statusCode: '403'
        description: ''
  - url: /newsletters/{pk}
    method: updateContent
    httpMethod: patch
    tag: Newsletter
    typeScriptTag: newsletter
    description: Update Newsletter
    parameters:
      - name: pk
        schema: string
        required: true
        description: ''
        example: PK
      - name: description
        schema: string
        description: ''
      - name: username
        schema: string
        description: ''
      - name: name
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: |-
          You will likely not need to interact with your newsletter settings
          programmatically, but if you do, this is the endpoint for you. You can
          create, update, and list newsletters via the API; this is ideal for
          integrating with Buttondown as a headless email or newsletter provider
          (e.g. for a SaaS product.)
      - statusCode: '400'
        description: ''
      - statusCode: '403'
        description: ''
  - url: /bulk_actions
    method: createBulkAction
    httpMethod: post
    tag: Action
    typeScriptTag: action
    description: Create Bulk Action
    parameters:
      - name: type
        schema: string
        required: true
        description: ''
        example: TYPE
      - name: metadata
        schema: object
        required: true
        description: ''
    responses:
      - statusCode: '201'
        description: >-
          A bulk action represents, well, a bulk action. It is used to perform

          actions on a large number of objects at once. For example, you can

          use it to delete a large number of emails, or to unsubscribe a large

          number of subscribers. The actions within a bulk action are processed

          serially by Buttondown; this should be considered an ergonomic way to

          batch API calls across the network rather than a net-new piece of
          functionality

          in of itself.
      - statusCode: '403'
        description: ''
  - url: /bulk_actions/{pk}
    method: getBulkAction
    httpMethod: get
    tag: Action
    typeScriptTag: action
    description: Retrieve Bulk Action
    parameters:
      - name: pk
        schema: string
        required: true
        description: ''
        example: PK
    responses:
      - statusCode: '200'
        description: >-
          A bulk action represents, well, a bulk action. It is used to perform

          actions on a large number of objects at once. For example, you can

          use it to delete a large number of emails, or to unsubscribe a large

          number of subscribers. The actions within a bulk action are processed

          serially by Buttondown; this should be considered an ergonomic way to

          batch API calls across the network rather than a net-new piece of
          functionality

          in of itself.
      - statusCode: '403'
        description: ''
numberOfSchemas: 42
apiDescription: ''
