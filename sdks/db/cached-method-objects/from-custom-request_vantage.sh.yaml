hash: 0bf6f547354ced0e9775840474408d0d6267174f0e0439d3e674254f81316e14
methodObjects:
  - url: /workspaces
    method: listAccessible
    httpMethod: get
    tag: Workspaces
    typeScriptTag: workspaces
    description: Return all Workspaces that the current API token has access to.
    parameters:
      - name: page
        schema: integer
        required: false
        description: The page of results to return.
      - name: limit
        schema: integer
        required: false
        description: The amount of results to return. The maximum is 1000.
    responses:
      - statusCode: '200'
        description: Workspaces model
  - url: /workspaces/{workspace_token}
    method: getSpecificWorkspace
    httpMethod: get
    tag: Workspaces
    typeScriptTag: workspaces
    description: Return a specific Workspace.
    parameters:
      - name: workspaceToken
        schema: string
        required: true
        description: ''
        example: WORKSPACE_TOKEN
    responses:
      - statusCode: '200'
        description: Workspace model
      - statusCode: '404'
        description: Errors model
  - url: /folders
    method: listCostReports
    httpMethod: get
    tag: Folders
    typeScriptTag: folders
    description: Return all Folders for CostReports.
    parameters:
      - name: page
        schema: integer
        required: false
        description: The page of results to return.
      - name: limit
        schema: integer
        required: false
        description: The amount of results to return. The maximum is 1000.
    responses:
      - statusCode: '200'
        description: Folders model
  - url: /folders
    method: createFolderForCostReports
    httpMethod: post
    tag: Folders
    typeScriptTag: folders
    description: Create a Folder for CostReports.
    parameters:
      - name: title
        schema: string
        required: true
        description: ''
        example: TITLE
      - name: parent_folder_token
        schema: string
        required: false
        description: ''
      - name: saved_filter_tokens
        schema: array
        required: false
        description: ''
      - name: workspace_token
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: Folder model
      - statusCode: '400'
        description: Errors model
  - url: /folders/{folder_token}
    method: deleteFolderForCostReports
    httpMethod: delete
    tag: Folders
    typeScriptTag: folders
    description: Delete a Folder for CostReports.
    parameters:
      - name: folderToken
        schema: string
        required: true
        description: ''
        example: FOLDER_TOKEN
    responses:
      - statusCode: '204'
        description: Folder model
      - statusCode: '404'
        description: Errors model
  - url: /folders/{folder_token}
    method: getSpecificFolder
    httpMethod: get
    tag: Folders
    typeScriptTag: folders
    description: Return a specific Folder for CostReports.
    parameters:
      - name: folderToken
        schema: string
        required: true
        description: ''
        example: FOLDER_TOKEN
    responses:
      - statusCode: '200'
        description: Folder model
      - statusCode: '404'
        description: Errors model
  - url: /folders/{folder_token}
    method: updateFolderForCostReports
    httpMethod: put
    tag: Folders
    typeScriptTag: folders
    description: Update a Folder for CostReports.
    parameters:
      - name: folderToken
        schema: string
        required: true
        description: ''
        example: FOLDER_TOKEN
      - name: title
        schema: string
        description: ''
      - name: parent_folder_token
        schema: string
        description: ''
      - name: saved_filter_tokens
        schema: array
        description: ''
    responses:
      - statusCode: '200'
        description: Folder model
      - statusCode: '400'
        description: Errors model
      - statusCode: '404'
        description: Errors model
  - url: /saved_filters
    method: getCostReportFilters
    httpMethod: get
    tag: Filters
    typeScriptTag: filters
    description: Return all SavedFilters that can be applied to a CostReport.
    parameters:
      - name: page
        schema: integer
        required: false
        description: The page of results to return.
      - name: limit
        schema: integer
        required: false
        description: The amount of results to return. The maximum is 1000.
    responses:
      - statusCode: '200'
        description: SavedFilters model
  - url: /saved_filters
    method: createSavedFilterForCostReports
    httpMethod: post
    tag: Filters
    typeScriptTag: filters
    description: Create a SavedFilter for CostReports.
    parameters:
      - name: title
        schema: string
        required: true
        description: ''
        example: TITLE
      - name: workspace_token
        schema: string
        required: false
        description: ''
      - name: filter
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: SavedFilter model
      - statusCode: '400'
        description: Errors model
      - statusCode: '422'
        description: Errors model
  - url: /saved_filters/{saved_filter_token}
    method: deleteSavedFilter
    httpMethod: delete
    tag: Filters
    typeScriptTag: filters
    description: Delete a SavedFilter for CostReports.
    parameters:
      - name: savedFilterToken
        schema: string
        required: true
        description: ''
        example: SAVED_FILTER_TOKEN
    responses:
      - statusCode: '204'
        description: SavedFilter model
      - statusCode: '404'
        description: Errors model
  - url: /saved_filters/{saved_filter_token}
    method: getSavedFilter
    httpMethod: get
    tag: Filters
    typeScriptTag: filters
    description: Return a specific SavedFilter.
    parameters:
      - name: savedFilterToken
        schema: string
        required: true
        description: ''
        example: SAVED_FILTER_TOKEN
    responses:
      - statusCode: '200'
        description: SavedFilter model
      - statusCode: '404'
        description: Errors model
  - url: /saved_filters/{saved_filter_token}
    method: updateSavedFilterForCostReports
    httpMethod: put
    tag: Filters
    typeScriptTag: filters
    description: Update a SavedFilter for CostReports.
    parameters:
      - name: savedFilterToken
        schema: string
        required: true
        description: ''
        example: SAVED_FILTER_TOKEN
      - name: title
        schema: string
        description: ''
      - name: filter
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: SavedFilter model
      - statusCode: '400'
        description: Errors model
      - statusCode: '404'
        description: Errors model
      - statusCode: '422'
        description: Errors model
  - url: /cost_reports
    method: getAllCostReports
    httpMethod: get
    tag: Costs
    typeScriptTag: costs
    description: Return all CostReports.
    parameters:
      - name: page
        schema: integer
        required: false
        description: The page of results to return.
      - name: limit
        schema: integer
        required: false
        description: The amount of results to return. The maximum is 1000.
    responses:
      - statusCode: '200'
        description: CostReports model
  - url: /cost_reports
    method: createReport
    httpMethod: post
    tag: Costs
    typeScriptTag: costs
    description: Create a CostReport.
    parameters:
      - name: title
        schema: string
        required: true
        description: ''
        example: TITLE
      - name: workspace_token
        schema: string
        required: false
        description: ''
      - name: groupings
        schema: string
        required: false
        description: ''
      - name: filter
        schema: string
        required: false
        description: ''
      - name: saved_filter_tokens
        schema: array
        required: false
        description: ''
      - name: business_metric_tokens_with_metadata
        schema: array
        required: false
        description: ''
      - name: folder_token
        schema: string
        required: false
        description: ''
      - name: settings
        schema: object
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: CostReport model
      - statusCode: '400'
        description: Errors model
      - statusCode: '422'
        description: Errors model
  - url: /cost_reports/{cost_report_token}
    method: deleteCostReport
    httpMethod: delete
    tag: Costs
    typeScriptTag: costs
    description: Delete a CostReport.
    parameters:
      - name: costReportToken
        schema: string
        required: true
        description: ''
        example: COST_REPORT_TOKEN
    responses:
      - statusCode: '204'
        description: CostReport model
      - statusCode: '404'
        description: Errors model
  - url: /cost_reports/{cost_report_token}
    method: getCostReport
    httpMethod: get
    tag: Costs
    typeScriptTag: costs
    description: Return a CostReport.
    parameters:
      - name: costReportToken
        schema: string
        required: true
        description: ''
        example: COST_REPORT_TOKEN
    responses:
      - statusCode: '200'
        description: CostReport model
      - statusCode: '404'
        description: Errors model
  - url: /cost_reports/{cost_report_token}
    method: updateReport
    httpMethod: put
    tag: Costs
    typeScriptTag: costs
    description: Update a CostReport.
    parameters:
      - name: costReportToken
        schema: string
        required: true
        description: ''
        example: COST_REPORT_TOKEN
      - name: title
        schema: string
        description: ''
      - name: groupings
        schema: string
        description: ''
      - name: filter
        schema: string
        description: ''
      - name: saved_filter_tokens
        schema: array
        description: ''
      - name: business_metric_tokens_with_metadata
        schema: array
        description: ''
      - name: folder_token
        schema: string
        description: ''
      - name: settings
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: CostReport model
      - statusCode: '400'
        description: Errors model
      - statusCode: '404'
        description: Errors model
  - url: /segments
    method: list
    httpMethod: get
    tag: Segments
    typeScriptTag: segments
    description: Return all Segments.
    parameters:
      - name: page
        schema: integer
        required: false
        description: The page of results to return.
      - name: limit
        schema: integer
        required: false
        description: The amount of results to return. The maximum is 1000.
    responses:
      - statusCode: '200'
        description: Segments model
  - url: /segments
    method: createSegment
    httpMethod: post
    tag: Segments
    typeScriptTag: segments
    description: Create a Segment.
    parameters:
      - name: title
        schema: string
        required: true
        description: ''
        example: TITLE
      - name: description
        schema: string
        required: false
        description: ''
      - name: priority
        schema: integer
        required: false
        description: ''
      - name: track_unallocated
        schema: boolean
        required: false
        description: ''
        default: false
      - name: report_settings
        schema: object
        required: false
        description: ''
      - name: workspace_token
        schema: string
        required: false
        description: ''
      - name: filter
        schema: string
        required: false
        description: ''
      - name: parent_segment_token
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: Segment model
      - statusCode: '400'
        description: Errors model
      - statusCode: '422'
        description: Errors model
  - url: /segments/{segment_token}
    method: removeSegment
    httpMethod: delete
    tag: Segments
    typeScriptTag: segments
    description: Delete a Segment.
    parameters:
      - name: segmentToken
        schema: string
        required: true
        description: ''
        example: SEGMENT_TOKEN
    responses:
      - statusCode: '204'
        description: Segment model
      - statusCode: '404'
        description: Errors model
  - url: /segments/{segment_token}
    method: getSegmentById
    httpMethod: get
    tag: Segments
    typeScriptTag: segments
    description: Return a Segment.
    parameters:
      - name: segmentToken
        schema: string
        required: true
        description: ''
        example: SEGMENT_TOKEN
    responses:
      - statusCode: '200'
        description: Segment model
      - statusCode: '404'
        description: Errors model
  - url: /segments/{segment_token}
    method: updateSegmentById
    httpMethod: put
    tag: Segments
    typeScriptTag: segments
    description: Update a Segment.
    parameters:
      - name: segmentToken
        schema: string
        required: true
        description: ''
        example: SEGMENT_TOKEN
      - name: title
        schema: string
        description: ''
      - name: description
        schema: string
        description: ''
      - name: priority
        schema: integer
        description: ''
      - name: track_unallocated
        schema: boolean
        description: ''
        default: false
      - name: report_settings
        schema: object
        description: ''
      - name: filter
        schema: string
        description: ''
      - name: parent_segment_token
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: Segment model
      - statusCode: '400'
        description: Errors model
      - statusCode: '404'
        description: Errors model
  - url: /dashboards
    method: getAll
    httpMethod: get
    tag: Dashboards
    typeScriptTag: dashboards
    description: Return all Dashboards.
    parameters:
      - name: page
        schema: integer
        required: false
        description: The page of results to return.
      - name: limit
        schema: integer
        required: false
        description: The amount of results to return. The maximum is 1000.
    responses:
      - statusCode: '200'
        description: Dashboards model
  - url: /dashboards
    method: createDashboard
    httpMethod: post
    tag: Dashboards
    typeScriptTag: dashboards
    description: Create a Dashboard.
    parameters:
      - name: title
        schema: string
        required: true
        description: ''
        example: TITLE
      - name: widget_tokens
        schema: array
        required: false
        description: ''
      - name: saved_filter_tokens
        schema: array
        required: false
        description: ''
      - name: date_bin
        schema: string
        required: false
        description: ''
      - name: date_interval
        schema: string
        required: false
        description: ''
      - name: start_date
        schema: string
        required: false
        description: ''
      - name: end_date
        schema: string
        required: true
        description: ''
        example: END_DATE
      - name: workspace_token
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: Dashboard model
      - statusCode: '400'
        description: Errors model
  - url: /dashboards/{dashboard_token}
    method: deleteDashboard
    httpMethod: delete
    tag: Dashboards
    typeScriptTag: dashboards
    description: Delete a Dashboard.
    parameters:
      - name: dashboardToken
        schema: string
        required: true
        description: ''
        example: DASHBOARD_TOKEN
    responses:
      - statusCode: '204'
        description: Dashboard model
      - statusCode: '404'
        description: Errors model
  - url: /dashboards/{dashboard_token}
    method: getSpecificDashboard
    httpMethod: get
    tag: Dashboards
    typeScriptTag: dashboards
    description: Return a specific Dashboard.
    parameters:
      - name: dashboardToken
        schema: string
        required: true
        description: ''
        example: DASHBOARD_TOKEN
    responses:
      - statusCode: '200'
        description: Dashboard model
      - statusCode: '404'
        description: Errors model
  - url: /dashboards/{dashboard_token}
    method: updateDashboard
    httpMethod: put
    tag: Dashboards
    typeScriptTag: dashboards
    description: Update a Dashboard.
    parameters:
      - name: dashboardToken
        schema: string
        required: true
        description: ''
        example: DASHBOARD_TOKEN
      - name: title
        schema: string
        required: false
        description: ''
      - name: widget_tokens
        schema: array
        required: false
        description: ''
      - name: saved_filter_tokens
        schema: array
        required: false
        description: ''
      - name: date_bin
        schema: string
        required: false
        description: ''
      - name: date_interval
        schema: string
        required: false
        description: ''
      - name: start_date
        schema: string
        required: false
        description: ''
      - name: end_date
        schema: string
        required: true
        description: ''
        example: END_DATE
    responses:
      - statusCode: '200'
        description: Dashboard model
      - statusCode: '400'
        description: Errors model
      - statusCode: '404'
        description: Errors model
  - url: /costs
    method: listCostReport
    httpMethod: get
    tag: Costs
    typeScriptTag: costs
    description: Return all Costs for a CostReport.
    parameters:
      - name: costReportToken
        schema: string
        required: true
        description: The CostReport token.
        example: COST_REPORT_TOKEN
      - name: startDate
        schema: string
        required: false
        description: First date you would like to filter costs from. ISO 8601 formatted.
      - name: endDate
        schema: string
        required: false
        description: Last date you would like to filter costs to. ISO 8601 formatted.
      - name: groupings
        schema: array
        required: false
        description: >-
          Group the results by specific
          field(https://vantage.readme.io/reference/general. Defaults to
          provider, service, account_id. Valid groupings: account_id,
          billing_account_id, charge_type, cost_category, cost_subcategory,
          provider, region, resource_id, service, tagged, tag:<tag_value>. If
          providing multiple groupings, join as comma separated values:
          groupings=provider,service,region
      - name: order
        schema: string
        required: false
        description: Whether to order costs by date in an ascending or descending manner.
        default: desc
      - name: limit
        schema: integer
        required: false
        description: The amount of results to return. The maximum is 1000.
    responses:
      - statusCode: '200'
        description: Costs model
      - statusCode: '400'
        description: Errors model
      - statusCode: '402'
        description: Errors model
      - statusCode: '404'
        description: Errors model
  - url: /teams
    method: listAccessible
    httpMethod: get
    tag: Teams
    typeScriptTag: teams
    description: Return all Teams that the current API token has access to.
    parameters:
      - name: page
        schema: integer
        required: false
        description: The page of results to return.
      - name: limit
        schema: integer
        required: false
        description: The amount of results to return. The maximum is 1000.
    responses:
      - statusCode: '200'
        description: Teams model
  - url: /teams
    method: createNewTeam
    httpMethod: post
    tag: Teams
    typeScriptTag: teams
    description: Create a new Team.
    parameters:
      - name: description
        schema: string
        required: false
        description: ''
      - name: name
        schema: string
        required: true
        description: ''
        example: NAME
      - name: workspace_tokens
        schema: array
        required: false
        description: ''
      - name: user_tokens
        schema: array
        required: false
        description: ''
      - name: user_emails
        schema: array
        required: false
        description: ''
      - name: role
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: Team model
      - statusCode: '400'
        description: Errors model
      - statusCode: '403'
        description: Errors model
      - statusCode: '404'
        description: Errors model
      - statusCode: '422'
        description: Errors model
  - url: /teams/{team_token}
    method: removeTeam
    httpMethod: delete
    tag: Teams
    typeScriptTag: teams
    description: Delete a Team.
    parameters:
      - name: teamToken
        schema: string
        required: true
        description: ''
        example: TEAM_TOKEN
    responses:
      - statusCode: '204'
        description: Team model
      - statusCode: '400'
        description: Errors model
      - statusCode: '403'
        description: Errors model
      - statusCode: '404'
        description: Errors model
      - statusCode: '422'
        description: Errors model
  - url: /teams/{team_token}
    method: getSpecificTeam
    httpMethod: get
    tag: Teams
    typeScriptTag: teams
    description: Return a specific Team.
    parameters:
      - name: teamToken
        schema: string
        required: true
        description: ''
        example: TEAM_TOKEN
    responses:
      - statusCode: '200'
        description: Team model
      - statusCode: '404'
        description: Errors model
  - url: /teams/{team_token}
    method: updateTeam
    httpMethod: put
    tag: Teams
    typeScriptTag: teams
    description: Update a Team.
    parameters:
      - name: teamToken
        schema: string
        required: true
        description: ''
        example: TEAM_TOKEN
      - name: description
        schema: string
        description: ''
      - name: name
        schema: string
        description: ''
      - name: workspace_tokens
        schema: array
        description: ''
      - name: user_tokens
        schema: array
        description: ''
      - name: user_emails
        schema: array
        description: ''
      - name: role
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: Team model
      - statusCode: '400'
        description: Errors model
      - statusCode: '403'
        description: Errors model
      - statusCode: '404'
        description: Errors model
      - statusCode: '422'
        description: Errors model
  - url: /access_grants
    method: listAccessible
    httpMethod: get
    tag: AccessGrants
    typeScriptTag: accessGrants
    description: Return all Access Grants that the current API token has access to.
    parameters:
      - name: page
        schema: integer
        required: false
        description: The page of results to return.
      - name: limit
        schema: integer
        required: false
        description: The amount of results to return. The maximum is 1000.
    responses:
      - statusCode: '200'
        description: AccessGrants model
  - url: /access_grants
    method: createGrant
    httpMethod: post
    tag: AccessGrants
    typeScriptTag: accessGrants
    description: Create an Access Grant.
    parameters:
      - name: resource_token
        schema: string
        required: true
        description: ''
        example: RESOURCE_TOKEN
      - name: team_token
        schema: string
        required: true
        description: ''
        example: TEAM_TOKEN
      - name: access
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: AccessGrant model
      - statusCode: '400'
        description: Errors model
      - statusCode: '403'
        description: Errors model
      - statusCode: '404'
        description: Errors model
      - statusCode: '406'
        description: Errors model
      - statusCode: '422'
        description: Errors model
  - url: /access_grants/{access_grant_token}
    method: delete
    httpMethod: delete
    tag: AccessGrants
    typeScriptTag: accessGrants
    description: Delete an Access Grant.
    parameters:
      - name: accessGrantToken
        schema: string
        required: true
        description: ''
        example: ACCESS_GRANT_TOKEN
    responses:
      - statusCode: '204'
        description: AccessGrant model
      - statusCode: '404'
        description: Errors model
  - url: /access_grants/{access_grant_token}
    method: getSpecificGrant
    httpMethod: get
    tag: AccessGrants
    typeScriptTag: accessGrants
    description: Return a specific Access Grant.
    parameters:
      - name: accessGrantToken
        schema: string
        required: true
        description: ''
        example: ACCESS_GRANT_TOKEN
    responses:
      - statusCode: '200'
        description: AccessGrant model
      - statusCode: '404'
        description: Errors model
  - url: /access_grants/{access_grant_token}
    method: updateGrantToken
    httpMethod: put
    tag: AccessGrants
    typeScriptTag: accessGrants
    description: Update an AccessGrant.
    parameters:
      - name: accessGrantToken
        schema: string
        required: true
        description: ''
        example: ACCESS_GRANT_TOKEN
      - name: access
        schema: string
        required: true
        description: ''
        example: ACCESS
    responses:
      - statusCode: '200'
        description: AccessGrant model
      - statusCode: '400'
        description: Errors model
      - statusCode: '404'
        description: Errors model
  - url: /report_notifications
    method: getAllReportNotifications
    httpMethod: get
    tag: Notifications
    typeScriptTag: notifications
    description: Return all ReportNotifications.
    parameters:
      - name: page
        schema: integer
        required: false
        description: The page of results to return.
      - name: limit
        schema: integer
        required: false
        description: The amount of results to return. The maximum is 1000.
    responses:
      - statusCode: '200'
        description: ReportNotifications model
  - url: /report_notifications
    method: createReportNotification
    httpMethod: post
    tag: Notifications
    typeScriptTag: notifications
    description: Create a ReportNotification.
    parameters:
      - name: title
        schema: string
        required: true
        description: ''
        example: TITLE
      - name: cost_report_token
        schema: string
        required: true
        description: ''
        example: COST_REPORT_TOKEN
      - name: workspace_token
        schema: string
        required: false
        description: ''
      - name: user_tokens
        schema: array
        required: false
        description: ''
      - name: recipient_channels
        schema: array
        required: false
        description: ''
      - name: frequency
        schema: string
        required: true
        description: ''
        example: FREQUENCY
      - name: change
        schema: string
        required: true
        description: ''
        example: CHANGE
    responses:
      - statusCode: '201'
        description: ReportNotification model
      - statusCode: '400'
        description: Errors model
      - statusCode: '422'
        description: Errors model
  - url: /report_notifications/{report_notification_token}
    method: deleteReportNotification
    httpMethod: delete
    tag: Notifications
    typeScriptTag: notifications
    description: Delete a ReportNotification.
    parameters:
      - name: reportNotificationToken
        schema: string
        required: true
        description: ''
        example: REPORT_NOTIFICATION_TOKEN
    responses:
      - statusCode: '204'
        description: ReportNotification model
      - statusCode: '404'
        description: Errors model
  - url: /report_notifications/{report_notification_token}
    method: getReportNotification
    httpMethod: get
    tag: Notifications
    typeScriptTag: notifications
    description: Return a ReportNotification.
    parameters:
      - name: reportNotificationToken
        schema: string
        required: true
        description: ''
        example: REPORT_NOTIFICATION_TOKEN
    responses:
      - statusCode: '200'
        description: ReportNotification model
      - statusCode: '404'
        description: Errors model
  - url: /report_notifications/{report_notification_token}
    method: updateReportNotification
    httpMethod: put
    tag: Notifications
    typeScriptTag: notifications
    description: Update a ReportNotification.
    parameters:
      - name: reportNotificationToken
        schema: string
        required: true
        description: ''
        example: REPORT_NOTIFICATION_TOKEN
      - name: title
        schema: string
        description: ''
      - name: cost_report_token
        schema: string
        description: ''
      - name: user_tokens
        schema: array
        description: ''
      - name: recipient_channels
        schema: array
        description: ''
      - name: frequency
        schema: string
        description: ''
      - name: change
        schema: string
        description: ''
    responses:
      - statusCode: '200'
        description: ReportNotification model
      - statusCode: '400'
        description: Errors model
      - statusCode: '404'
        description: Errors model
  - url: /users
    method: listAccessible
    httpMethod: get
    tag: Users
    typeScriptTag: users
    description: Return all Users that the current API token has access to.
    parameters:
      - name: page
        schema: integer
        required: false
        description: The page of results to return.
      - name: limit
        schema: integer
        required: false
        description: The amount of results to return. The maximum is 1000.
    responses:
      - statusCode: '200'
        description: Users model
      - statusCode: '403'
        description: Errors model
  - url: /users/{user_token}
    method: getSpecificUser
    httpMethod: get
    tag: Users
    typeScriptTag: users
    description: Return a specific User.
    parameters:
      - name: userToken
        schema: string
        required: true
        description: ''
        example: USER_TOKEN
    responses:
      - statusCode: '200'
        description: User model
      - statusCode: '404'
        description: Errors model
  - url: /business_metrics
    method: getAllMetrics
    httpMethod: get
    tag: BusinessMetrics
    typeScriptTag: businessMetrics
    description: Return all Business Metrics that the current API token has access to.
    parameters:
      - name: page
        schema: integer
        required: false
        description: The page of results to return.
      - name: limit
        schema: integer
        required: false
        description: The amount of results to return. The maximum is 1000.
    responses:
      - statusCode: '200'
        description: BusinessMetrics model
  - url: /business_metrics
    method: createNewMetric
    httpMethod: post
    tag: BusinessMetrics
    typeScriptTag: businessMetrics
    description: Create a new Business Metric.
    parameters:
      - name: title
        schema: string
        required: true
        description: ''
        example: TITLE
      - name: cost_report_tokens_with_metadata
        schema: array
        required: false
        description: ''
      - name: values
        schema: array
        required: false
        description: ''
    responses:
      - statusCode: '201'
        description: BusinessMetric model
      - statusCode: '400'
        description: Errors model
      - statusCode: '403'
        description: Errors model
      - statusCode: '404'
        description: Errors model
      - statusCode: '422'
        description: Errors model
  - url: /business_metrics/{business_metric_token}
    method: deleteExistingMetric
    httpMethod: delete
    tag: BusinessMetrics
    typeScriptTag: businessMetrics
    description: Deletes an existing BusinessMetric.
    parameters:
      - name: businessMetricToken
        schema: string
        required: true
        description: ''
        example: BUSINESS_METRIC_TOKEN
    responses:
      - statusCode: '204'
        description: BusinessMetric model
      - statusCode: '403'
        description: Errors model
      - statusCode: '404'
        description: Errors model
  - url: /business_metrics/{business_metric_token}
    method: getMetricById
    httpMethod: get
    tag: BusinessMetrics
    typeScriptTag: businessMetrics
    description: Return a specific Business Metric.
    parameters:
      - name: businessMetricToken
        schema: string
        required: true
        description: ''
        example: BUSINESS_METRIC_TOKEN
    responses:
      - statusCode: '200'
        description: BusinessMetric model
      - statusCode: '404'
        description: Errors model
  - url: /business_metrics/{business_metric_token}
    method: updateExistingMetric
    httpMethod: put
    tag: BusinessMetrics
    typeScriptTag: businessMetrics
    description: Updates an existing BusinessMetric.
    parameters:
      - name: businessMetricToken
        schema: string
        required: true
        description: ''
        example: BUSINESS_METRIC_TOKEN
      - name: title
        schema: string
        description: ''
      - name: cost_report_tokens_with_metadata
        schema: array
        description: ''
      - name: values
        schema: array
        description: ''
    responses:
      - statusCode: '201'
        description: BusinessMetric model
      - statusCode: '400'
        description: Errors model
      - statusCode: '403'
        description: Errors model
      - statusCode: '404'
        description: Errors model
      - statusCode: '422'
        description: Errors model
  - url: /business_metrics/{business_metric_token}/values.csv
    method: updateValuesCsv
    httpMethod: put
    tag: BusinessMetrics
    typeScriptTag: businessMetrics
    description: Updates the values for an existing BusinessMetric from a CSV file.
    parameters:
      - name: businessMetricToken
        schema: string
        required: true
        description: ''
        example: BUSINESS_METRIC_TOKEN
      - name: csv
        schema: string
        required: true
        description: ''
        example: CSV
    responses:
      - statusCode: '201'
        description: BusinessMetric model
      - statusCode: '400'
        description: Errors model
      - statusCode: '403'
        description: Errors model
      - statusCode: '404'
        description: Errors model
      - statusCode: '422'
        description: Errors model
  - url: /products
    method: listAvailableProducts
    httpMethod: get
    tag: Prices
    typeScriptTag: prices
    description: >-
      Return available Products for a Service. For example, with a Provider of
      AWS and a Service of EC2, Products will be a list of all EC2 Instances. By
      default, this endpoint returns all Products across all Services and
      Providers but has optional query parameters for filtering listed below.
    parameters:
      - name: providerId
        schema: string
        required: false
        description: >-
          Query by Provider to list all Products across all Services for a
          Provider. e.g. aws
      - name: serviceId
        schema: string
        required: false
        description: >-
          Query by Service to list all Products for a specific provider service.
          e.g. aws-ec2
      - name: name
        schema: string
        required: false
        description: >-
          Query by name of the Product to see a list of products which match
          that name. e.g. m5a.16xlarge
      - name: page
        schema: integer
        required: false
        description: The page of results to return.
      - name: limit
        schema: integer
        required: false
        description: The amount of results to return. The maximum is 1000
    responses:
      - statusCode: '200'
        description: Products model
  - url: /products/{id}
    method: getProduct
    httpMethod: get
    tag: Prices
    typeScriptTag: prices
    description: Return a product
    parameters:
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: Product model
  - url: /products/{product_id}/prices
    method: getProductPrices
    httpMethod: get
    tag: Prices
    typeScriptTag: prices
    description: Return available Prices across all Regions for a Product.
    parameters:
      - name: productId
        schema: string
        required: true
        description: ''
        example: PRODUCT_ID
      - name: page
        schema: integer
        required: false
        description: The page of results to return.
      - name: limit
        schema: integer
        required: false
        description: The amount of results to return. The maximum is 1000
    responses:
      - statusCode: '200'
        description: Prices model
  - url: /products/{product_id}/prices/{id}
    method: getProductPrice
    httpMethod: get
    tag: Prices
    typeScriptTag: prices
    description: Returns a price
    parameters:
      - name: productId
        schema: string
        required: true
        description: ''
        example: PRODUCT_ID
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: Price model
  - url: /resource_reports
    method: getAll
    httpMethod: get
    tag: ResourceReports
    typeScriptTag: resourceReports
    description: Return all ResourceReports.
    parameters:
      - name: page
        schema: integer
        required: false
        description: The page of results to return.
      - name: limit
        schema: integer
        required: false
        description: The number of results to return. The maximum is 1000.
    responses:
      - statusCode: '200'
        description: ResourceReports model
  - url: /resource_reports/{resource_report_token}
    method: removeReport
    httpMethod: delete
    tag: ResourceReports
    typeScriptTag: resourceReports
    description: Delete a ResourceReport.
    parameters:
      - name: resourceReportToken
        schema: string
        required: true
        description: ''
        example: RESOURCE_REPORT_TOKEN
    responses:
      - statusCode: '204'
        description: ResourceReport model
      - statusCode: '404'
        description: Errors model
  - url: /resource_reports/{resource_report_token}
    method: getResourceReport
    httpMethod: get
    tag: ResourceReports
    typeScriptTag: resourceReports
    description: Return a ResourceReport.
    parameters:
      - name: resourceReportToken
        schema: string
        required: true
        description: ''
        example: RESOURCE_REPORT_TOKEN
    responses:
      - statusCode: '200'
        description: ResourceReport model
      - statusCode: '404'
        description: Errors model
  - url: /financial_commitment_reports
    method: getAllReports
    httpMethod: get
    tag: FinancialCommitmentReports
    typeScriptTag: financialCommitmentReports
    description: Return all FinancialCommitmentReports.
    parameters:
      - name: page
        schema: integer
        required: false
        description: The page of results to return.
      - name: limit
        schema: integer
        required: false
        description: The amount of results to return. The maximum is 1000.
    responses:
      - statusCode: '200'
        description: FinancialCommitmentReports model
  - url: /financial_commitment_reports/{financial_commitment_report_token}
    method: deleteReport
    httpMethod: delete
    tag: FinancialCommitmentReports
    typeScriptTag: financialCommitmentReports
    description: Delete a FinancialCommitmentReport.
    parameters:
      - name: financialCommitmentReportToken
        schema: string
        required: true
        description: ''
        example: FINANCIAL_COMMITMENT_REPORT_TOKEN
    responses:
      - statusCode: '204'
        description: FinancialCommitmentReport model
      - statusCode: '404'
        description: Errors model
  - url: /financial_commitment_reports/{financial_commitment_report_token}
    method: get
    httpMethod: get
    tag: FinancialCommitmentReports
    typeScriptTag: financialCommitmentReports
    description: Return a FinancialCommitmentReport.
    parameters:
      - name: financialCommitmentReportToken
        schema: string
        required: true
        description: ''
        example: FINANCIAL_COMMITMENT_REPORT_TOKEN
    responses:
      - statusCode: '200'
        description: FinancialCommitmentReport model
      - statusCode: '404'
        description: Errors model
  - url: /ping
    method: healthCheck
    httpMethod: get
    tag: Ping
    typeScriptTag: ping
    description: >-
      This is a health check endpoint that can be used to determine Vantage API
      healthiness. It will return 200 if everything is running smoothly.
    parameters: []
    responses:
      - statusCode: '200'
        description: >-
          This is a health check endpoint that can be used to determine Vantage
          API healthiness. It will return 200 if everything is running smoothly.
numberOfSchemas: 52
apiDescription: Vantage API
