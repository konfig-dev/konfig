hash: 07aea60c0765b7df7dcca6f934e76a2e6377f343a9989574ad014e820d61ce0a
methodObjects:
  - url: /v1/op/data-sources
    method: getSources
    httpMethod: get
    tag: DataIntake
    typeScriptTag: dataIntake
    description: Retrieve a list of sources
    parameters: []
    responses:
      - statusCode: '200'
        description: The existing sources.
      - statusCode: default
        description: >-
          The `Status` type defines a logical error model that is suitable for
          different programming environments, including REST APIs and RPC APIs.
          It is used by [gRPC](https://github.com/grpc). Each `Status` message
          contains three pieces of data: error code, error message, and error
          details. You can find out more about this error model and how to work
          with it in the [API Design
          Guide](https://cloud.google.com/apis/design/errors).
  - url: /v1/op/data-transfer-sessions
    method: startTransfer
    httpMethod: post
    tag: DataIntake
    typeScriptTag: dataIntake
    description: Start a transfer session
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: >-
          The `Status` type defines a logical error model that is suitable for
          different programming environments, including REST APIs and RPC APIs.
          It is used by [gRPC](https://github.com/grpc). Each `Status` message
          contains three pieces of data: error code, error message, and error
          details. You can find out more about this error model and how to work
          with it in the [API Design
          Guide](https://cloud.google.com/apis/design/errors).
  - url: /v1/op/data-transfer-sessions/{transferSessionId}/add
    method: pushData
    httpMethod: put
    tag: DataIntake
    typeScriptTag: dataIntake
    description: Transfer data to sources via JSON
    parameters:
      - name: transferSessionId
        schema: string
        required: true
        description: >-
          The transfer session ID returned after the data transfer session
          starts.
        example: TRANSFERSESSIONID
      - name: sourceId
        schema: string
        description: >-
          The unique identifier associated with the source you want to transfer
          data to.
      - name: sequence
        schema: integer
        description: The unique sequence number associated with a batch of records.
      - name: tenantCode
        schema: string
        description: >-
          The code of the tenant you want to transfer data to. For example,
          WFF_j1r or WFF_j1r~c7o.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: >-
          The `Status` type defines a logical error model that is suitable for
          different programming environments, including REST APIs and RPC APIs.
          It is used by [gRPC](https://github.com/grpc). Each `Status` message
          contains three pieces of data: error code, error message, and error
          details. You can find out more about this error model and how to work
          with it in the [API Design
          Guide](https://cloud.google.com/apis/design/errors).
  - url: /v1/op/data-transfer-sessions/{transferSessionId}/cancel
    method: pushDataCancel
    httpMethod: put
    tag: DataIntake
    typeScriptTag: dataIntake
    description: Cancel a transfer session
    parameters:
      - name: transferSessionId
        schema: string
        required: true
        description: The transfer session ID to cancel.
        example: TRANSFERSESSIONID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: >-
          The `Status` type defines a logical error model that is suitable for
          different programming environments, including REST APIs and RPC APIs.
          It is used by [gRPC](https://github.com/grpc). Each `Status` message
          contains three pieces of data: error code, error message, and error
          details. You can find out more about this error model and how to work
          with it in the [API Design
          Guide](https://cloud.google.com/apis/design/errors).
  - url: /v1/op/data-transfer-sessions/{transferSessionId}/upload
    method: uploadData
    httpMethod: put
    tag: DataIntake
    typeScriptTag: dataIntake
    description: Transfer data to sources via file upload
    parameters:
      - name: transferSessionId
        schema: string
        required: true
        description: >-
          The transfer session ID returned after the data transfer session
          starts.
        example: TRANSFERSESSIONID
      - name: sourceId
        schema: string
        description: >-
          The unique identifier associated with the source you want to transfer
          data to.
      - name: sequence
        schema: string
        description: The unique sequence number associated with a batch of records.
      - name: tenantCode
        schema: string
        description: >-
          The code of the tenant you want to transfer data to. For example,
          WFF_j1r or WFF_j1r~c7o.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: >-
          The `Status` type defines a logical error model that is suitable for
          different programming environments, including REST APIs and RPC APIs.
          It is used by [gRPC](https://github.com/grpc). Each `Status` message
          contains three pieces of data: error code, error message, and error
          details. You can find out more about this error model and how to work
          with it in the [API Design
          Guide](https://cloud.google.com/apis/design/errors).
  - url: /v1/op/jobs/processing-jobs/{receivingJobId}
    method: getProcessingJobsByParentReceivingJobId
    httpMethod: get
    tag: DataIntake
    typeScriptTag: dataIntake
    description: Retrieve processing job statuses by receiving job ID
    parameters:
      - name: receivingJobId
        schema: string
        required: true
        description: The receiving job ID.
        example: RECEIVINGJOBID
      - name: tenantCode
        schema: string
        description: >-
          The tenant code of the tenant you want to retrieve the processing jobs
          for. Use this if you are only interested in the results for one
          analytic tenant.
      - name: limit
        schema: integer
        description: The limit of processing jobs to retrieve per page.
      - name: start
        schema: integer
        description: >-
          The index to start retrieving results from, also known as offset. The
          index begins at 0.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: >-
          The `Status` type defines a logical error model that is suitable for
          different programming environments, including REST APIs and RPC APIs.
          It is used by [gRPC](https://github.com/grpc). Each `Status` message
          contains three pieces of data: error code, error message, and error
          details. You can find out more about this error model and how to work
          with it in the [API Design
          Guide](https://cloud.google.com/apis/design/errors).
  - url: /v1/op/jobs/receiving-jobs
    method: pushDataComplete
    httpMethod: post
    tag: DataIntake
    typeScriptTag: dataIntake
    description: Complete a transfer session
    parameters:
      - name: transferSessionId
        schema: string
        description: ''
      - name: processingData
        schema: boolean
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: >-
          The `Status` type defines a logical error model that is suitable for
          different programming environments, including REST APIs and RPC APIs.
          It is used by [gRPC](https://github.com/grpc). Each `Status` message
          contains three pieces of data: error code, error message, and error
          details. You can find out more about this error model and how to work
          with it in the [API Design
          Guide](https://cloud.google.com/apis/design/errors).
  - url: /v1/op/jobs/receiving-jobs/{receivingJobId}
    method: receivingJobStatus
    httpMethod: get
    tag: DataIntake
    typeScriptTag: dataIntake
    description: Retrieve a receiving jobâ€™s status
    parameters:
      - name: receivingJobId
        schema: string
        required: true
        description: >-
          The **dataReceivingJobId** provided after a data transfer session
          completes. See **`/v1/op/jobs/receiving-jobs`**.
        example: RECEIVINGJOBID
      - name: jobs
        schema: boolean
        description: >-
          If true, returns the status of receiving jobs spawned by the receiving
          job specified by receivingJobId.
      - name: tenantCode
        schema: string
        description: >-
          The tenant code of the tenant you want to retrieve the receiving jobs
          for. Use this if you are only interested in the results for one
          analytic tenant.
      - name: start
        schema: integer
        description: >-
          The index to start retrieving results from, also known as offset. The
          index begins at 0.
      - name: limit
        schema: integer
        description: The number of job statuses to return per page.
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: default
        description: >-
          The `Status` type defines a logical error model that is suitable for
          different programming environments, including REST APIs and RPC APIs.
          It is used by [gRPC](https://github.com/grpc). Each `Status` message
          contains three pieces of data: error code, error message, and error
          details. You can find out more about this error model and how to work
          with it in the [API Design
          Guide](https://cloud.google.com/apis/design/errors).
  - url: /v1alpha/data/upload/files/{filename}
    method: fileToVisier
    httpMethod: put
    tag: DataUpload
    typeScriptTag: dataUpload
    description: Upload a data file to Visier
    parameters:
      - name: filename
        schema: string
        required: true
        description: >-
          The filename of the data file to upload, including the file extension
          (such as .zip or .csv).
        example: FILENAME
    responses:
      - statusCode: '307'
        description: Redirect to Visier's upload infrastructure.
      - statusCode: default
        description: >-
          The `Status` type defines a logical error model that is suitable for
          different programming environments, including REST APIs and RPC APIs.
          It is used by [gRPC](https://github.com/grpc). Each `Status` message
          contains three pieces of data: error code, error message, and error
          details. You can find out more about this error model and how to work
          with it in the [API Design
          Guide](https://cloud.google.com/apis/design/errors).
numberOfSchemas: 19
apiDescription: Visier APIs for sending raw or untransformed source data to Visier
