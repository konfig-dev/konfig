{
  "providerName": "storecove.com",
  "openApiRaw": "https://www.storecove.com/api/v2/openapi.json",
  "securitySchemes": {
    "Bearer": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "categories": [
    "financial"
  ],
  "homepage": "storecove.com",
  "apiVersion": "2.0.1",
  "methods": [
    {
      "url": "/discovery/exists",
      "method": "discoveryExists",
      "httpMethod": "post",
      "tag": "Discovery",
      "typeScriptTag": "discovery",
      "description": "Discover Network Participant Existence",
      "parameters": [
        {
          "name": "documentTypes",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "identifier",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "metaScheme",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "network",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "scheme",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A public identifier for this customer."
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/discovery/identifiers",
      "method": "discoveryIdentifiers",
      "httpMethod": "get",
      "tag": "Discovery",
      "typeScriptTag": "discovery",
      "description": "Discover Country Identifiers ** EXPERIMENTAL",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/discovery/receives",
      "method": "discoveryReceives",
      "httpMethod": "post",
      "tag": "Discovery",
      "typeScriptTag": "discovery",
      "description": "Disover Network Participant",
      "parameters": [
        {
          "name": "documentTypes",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "identifier",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "metaScheme",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "network",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "scheme",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A public identifier for this customer."
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/document_submissions",
      "method": "createDocumentSubmission",
      "httpMethod": "post",
      "tag": "DocumentSubmissions",
      "typeScriptTag": "documentSubmissions",
      "description": "Submit a new document.",
      "parameters": [
        {
          "name": "attachments",
          "schema": "array",
          "description": ""
        },
        {
          "name": "createPrimaryImage",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "document",
          "schema": "object",
          "description": ""
        },
        {
          "name": "idempotencyGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "legalEntityId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "receiveGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "routing",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The result of a document submission"
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/document_submissions/{guid}/evidence/{evidence_type}",
      "method": "showDocumentSubmissionEvidence",
      "httpMethod": "get",
      "tag": "DocumentSubmissions",
      "typeScriptTag": "documentSubmissions",
      "description": "Get DocumentSubmission Evidence",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "DocumentSubmission GUID"
        },
        {
          "name": "evidenceType",
          "schema": "string",
          "required": true,
          "description": "Type of evidence requested"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/invoice_submissions",
      "method": "createInvoiceSubmission",
      "httpMethod": "post",
      "tag": "InvoiceSubmissions",
      "typeScriptTag": "invoiceSubmissions",
      "description": "Submit a new invoice",
      "parameters": [
        {
          "name": "attachments",
          "schema": "array",
          "description": ""
        },
        {
          "name": "createPrimaryImage",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "document",
          "schema": "string",
          "description": ""
        },
        {
          "name": "documentUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "idempotencyGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "invoice",
          "schema": "object",
          "description": ""
        },
        {
          "name": "invoiceData",
          "schema": "object",
          "description": ""
        },
        {
          "name": "invoiceRecipient",
          "schema": "object",
          "description": ""
        },
        {
          "name": "legalEntityId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "legalSupplierId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "mode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "routing",
          "schema": "object",
          "description": ""
        },
        {
          "name": "supplierId",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The result of an invoice submission"
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/invoice_submissions/preflight",
      "method": "preflightInvoiceRecipient",
      "httpMethod": "post",
      "tag": "InvoiceSubmissions",
      "typeScriptTag": "invoiceSubmissions",
      "description": "DEPRECATED. Preflight an invoice recipient",
      "parameters": [
        {
          "name": "publicIdentifiers",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The result of preflighting an invoice recipient"
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/invoice_submissions/{guid}/evidence",
      "method": "showInvoiceSubmissionEvidence",
      "httpMethod": "get",
      "tag": "InvoiceSubmissions",
      "typeScriptTag": "invoiceSubmissions",
      "description": "DEPRECATED. Get InvoiceSubmission Evidence",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "InvoiceSubmission GUID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/legal_entities",
      "method": "createLegalEntity",
      "httpMethod": "post",
      "tag": "LegalEntities",
      "typeScriptTag": "legalEntities",
      "description": "Create a new LegalEntity",
      "parameters": [
        {
          "name": "advertisements",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "county",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "line1",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "line2",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "party_name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "public",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "rea",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "tenant_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "third_party_password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "third_party_username",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "zip",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/legal_entities/{id}",
      "method": "deleteLegalEntity",
      "httpMethod": "delete",
      "tag": "LegalEntities",
      "typeScriptTag": "legalEntities",
      "description": "Delete LegalEntity",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "legal_entity id"
        }
      ],
      "responses": []
    },
    {
      "url": "/legal_entities/{id}",
      "method": "getLegalEntity",
      "httpMethod": "get",
      "tag": "LegalEntities",
      "typeScriptTag": "legalEntities",
      "description": "Get LegalEntity",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "legal_entity id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/legal_entities/{id}",
      "method": "updateLegalEntity",
      "httpMethod": "patch",
      "tag": "LegalEntities",
      "typeScriptTag": "legalEntities",
      "description": "Update LegalEntity",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "legal_entity id"
        },
        {
          "name": "advertisements",
          "schema": "array",
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "description": ""
        },
        {
          "name": "county",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "line1",
          "schema": "string",
          "description": ""
        },
        {
          "name": "line2",
          "schema": "string",
          "description": ""
        },
        {
          "name": "party_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "public",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "rea",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "smart_inbox",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tenant_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "third_party_password",
          "schema": "string",
          "description": ""
        },
        {
          "name": "third_party_username",
          "schema": "string",
          "description": ""
        },
        {
          "name": "zip",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/legal_entities/{legal_entity_id}/additional_tax_identifiers",
      "method": "createAdditionalTaxIdentifier",
      "httpMethod": "post",
      "tag": "AdditionalTaxIdentifiers",
      "typeScriptTag": "additionalTaxIdentifiers",
      "description": "Create a new AdditionalTaxIdentifier",
      "parameters": [
        {
          "name": "legalEntityId",
          "schema": "integer",
          "required": true,
          "description": "The id of the LegalEntity for which to create the AdditionalTaxIdentifier"
        },
        {
          "name": "country",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "county",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "identifier",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "scheme",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "superscheme",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "third_party_password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "third_party_username",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/legal_entities/{legal_entity_id}/additional_tax_identifiers/{id}",
      "method": "deleteAdditionalTaxIdentifier",
      "httpMethod": "delete",
      "tag": "AdditionalTaxIdentifiers",
      "typeScriptTag": "additionalTaxIdentifiers",
      "description": "Delete AdditionalTaxIdentifier",
      "parameters": [
        {
          "name": "legalEntityId",
          "schema": "integer",
          "required": true,
          "description": "The id of the LegalEntity the AdditionalTaxIdentifier belongs to"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The id of the AdditionalTaxIdentifier"
        }
      ],
      "responses": []
    },
    {
      "url": "/legal_entities/{legal_entity_id}/additional_tax_identifiers/{id}",
      "method": "getAdditionalTaxIdentifier",
      "httpMethod": "get",
      "tag": "AdditionalTaxIdentifiers",
      "typeScriptTag": "additionalTaxIdentifiers",
      "description": "Get AdditionalTaxIdentifier",
      "parameters": [
        {
          "name": "legalEntityId",
          "schema": "integer",
          "required": true,
          "description": "The id of the LegalEntity the AdditionalTaxIdentifier belongs to"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The id of the AdditionalTaxIdentifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/legal_entities/{legal_entity_id}/additional_tax_identifiers/{id}",
      "method": "updateAdditionalTaxIdentifier",
      "httpMethod": "patch",
      "tag": "AdditionalTaxIdentifiers",
      "typeScriptTag": "additionalTaxIdentifiers",
      "description": "Update AdditionalTaxIdentifier",
      "parameters": [
        {
          "name": "legalEntityId",
          "schema": "integer",
          "required": true,
          "description": "The id of the LegalEntity the AdditionalTaxIdentifier belongs to"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The id of the AdditionalTaxIdentifier to be updated"
        },
        {
          "name": "identifier",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "third_party_password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "third_party_username",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/legal_entities/{legal_entity_id}/administrations",
      "method": "createAdministration",
      "httpMethod": "post",
      "tag": "Administrations",
      "typeScriptTag": "administrations",
      "description": "Create a new Administration",
      "parameters": [
        {
          "name": "legalEntityId",
          "schema": "integer",
          "required": true,
          "description": "The id of the LegalEntity for which to create the Administration"
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "legal_entity_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "package_version",
          "schema": "string",
          "description": ""
        },
        {
          "name": "packaging",
          "schema": "string",
          "description": ""
        },
        {
          "name": "sender_email_identity_id",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/legal_entities/{legal_entity_id}/administrations/{id}",
      "method": "deleteAdministration",
      "httpMethod": "delete",
      "tag": "Administrations",
      "typeScriptTag": "administrations",
      "description": "Delete Administration",
      "parameters": [
        {
          "name": "legalEntityId",
          "schema": "integer",
          "required": true,
          "description": "The id of the LegalEntity the Administration belongs to"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The id of the Administration"
        }
      ],
      "responses": []
    },
    {
      "url": "/legal_entities/{legal_entity_id}/administrations/{id}",
      "method": "getAdministration",
      "httpMethod": "get",
      "tag": "Administrations",
      "typeScriptTag": "administrations",
      "description": "Get Administration",
      "parameters": [
        {
          "name": "legalEntityId",
          "schema": "integer",
          "required": true,
          "description": "The id of the LegalEntity the Administration belongs to"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The id of the Administration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/legal_entities/{legal_entity_id}/administrations/{id}",
      "method": "updateAdministration",
      "httpMethod": "patch",
      "tag": "Administrations",
      "typeScriptTag": "administrations",
      "description": "Update Administration",
      "parameters": [
        {
          "name": "legalEntityId",
          "schema": "integer",
          "required": true,
          "description": "The id of the LegalEntity the Administration belongs to"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The id of the Administration to be updated"
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "package_version",
          "schema": "string",
          "description": ""
        },
        {
          "name": "packaging",
          "schema": "string",
          "description": ""
        },
        {
          "name": "sender_email_identity_id",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/legal_entities/{legal_entity_id}/peppol_identifiers",
      "method": "createPeppolIdentifier",
      "httpMethod": "post",
      "tag": "PeppolIdentifiers",
      "typeScriptTag": "peppolIdentifiers",
      "description": "Create a new PeppolIdentifier",
      "parameters": [
        {
          "name": "legalEntityId",
          "schema": "integer",
          "required": true,
          "description": "The id of the LegalEntity for which to create the PeppolIdentifier"
        },
        {
          "name": "corppass",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "identifier",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "scheme",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "superscheme",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/legal_entities/{legal_entity_id}/peppol_identifiers/{superscheme}/{scheme}/{identifier}",
      "method": "deletePeppolIdentifier",
      "httpMethod": "delete",
      "tag": "PeppolIdentifiers",
      "typeScriptTag": "peppolIdentifiers",
      "description": "Delete PeppolIdentifier",
      "parameters": [
        {
          "name": "legalEntityId",
          "schema": "integer",
          "required": true,
          "description": "The id of the LegalEntity this PeppolIdentifier belongs to"
        },
        {
          "name": "superscheme",
          "schema": "string",
          "required": true,
          "description": "The superscheme of the identifier. Should always be \"iso6523-actorid-upis\"."
        },
        {
          "name": "scheme",
          "schema": "string",
          "required": true,
          "description": "PEPPOL identifier scheme id, e.g. \"DE:VAT\". For a full list see <<_receiver_identifiers_list>>."
        },
        {
          "name": "identifier",
          "schema": "string",
          "required": true,
          "description": "PEPPOL identifier"
        }
      ],
      "responses": []
    },
    {
      "url": "/legal_entities/{legal_entity_id}/received_documents",
      "method": "receiveDocument",
      "httpMethod": "post",
      "tag": "ReceivedDocuments",
      "typeScriptTag": "receivedDocuments",
      "description": "Receive a new Document",
      "parameters": [
        {
          "name": "legalEntityId",
          "schema": "integer",
          "required": true,
          "description": "The id of the LegalEntity for which the document was received."
        },
        {
          "name": "document",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "parseStrategy",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/purchase_invoices/{guid}",
      "method": "getInvoiceJson",
      "httpMethod": "get",
      "tag": "PurchaseInvoices",
      "typeScriptTag": "purchaseInvoices",
      "description": "Get Purchase invoice data as JSON",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "The guid of the purchase invoice, from the webhook."
        },
        {
          "name": "pmv",
          "schema": "string",
          "required": false,
          "description": "The PaymentMeans version. The default (and deprecated) version 1.0 will give BankPaymentMean, DirectDebitPaymentMean, CardPaymentMean, NppPaymentMean, SeBankGiroPaymentMean, SePlusGiroPaymentMean, SgCardPaymentMean, SgGiroPaymentMean, SgPaynowPaymentMean.\n\nVersion 2.0 deprecates BankPaymentMean (now CreditTransferPaymentMean), CardPaymentMean (now CreditCardPaymentMean), NppPaymentMean (now AunzNppPayidPaymentMean), SeBankGiroPaymentMean (now SeBankgiroPaymentMean  -- note the lower 'g' in 'bankgiro'). It also adds OnlinePaymentServicePaymentMean, StandingAgreementPaymentMean, AunzNppPaytoPaymentMean, AunzBpayPaymentMean, AunzPostbillpayPaymentMean, AunzUriPaymentMean."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/purchase_invoices/{guid}/{packaging}",
      "method": "getInvoiceUbl",
      "httpMethod": "get",
      "tag": "PurchaseInvoices",
      "typeScriptTag": "purchaseInvoices",
      "description": "Get Purchase invoice data in a selectable format",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "purchase invoice guid"
        },
        {
          "name": "packaging",
          "schema": "string",
          "required": true,
          "description": "How to package the purchase invoice."
        },
        {
          "name": "pmv",
          "schema": "string",
          "required": false,
          "description": "The PaymentMeans version. The default (and deprecated) version 1.0 will give BankPaymentMean, DirectDebitPaymentMean, CardPaymentMean, NppPaymentMean, SeBankGiroPaymentMean, SePlusGiroPaymentMean, SgCardPaymentMean, SgGiroPaymentMean, SgPaynowPaymentMean.\n\nVersion 2.0 deprecates BankPaymentMean (now CreditTransferPaymentMean), CardPaymentMean (now CreditCardPaymentMean), NppPaymentMean (now AunzNppPayidPaymentMean), SeBankGiroPaymentMean (now SeBankgiroPaymentMean  -- note the lower 'g' in 'bankgiro'). It also adds OnlinePaymentServicePaymentMean, StandingAgreementPaymentMean, AunzNppPaytoPaymentMean, AunzBpayPaymentMean, AunzPostbillpayPaymentMean, AunzUriPaymentMean."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/purchase_invoices/{guid}/{packaging}/{package_version}",
      "method": "getInvoiceUblVersioned",
      "httpMethod": "get",
      "tag": "PurchaseInvoices",
      "typeScriptTag": "purchaseInvoices",
      "description": "Get Purchase invoice data as JSON with a Base64-encoded UBL string in the specified version",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "purchase invoice guid"
        },
        {
          "name": "packaging",
          "schema": "string",
          "required": true,
          "description": "How to package the purchase invoice."
        },
        {
          "name": "packageVersion",
          "schema": "string",
          "required": true,
          "description": "The version of the package."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/received_documents/{guid}/{format}",
      "method": "getReceivedDocument",
      "httpMethod": "get",
      "tag": "ReceivedDocuments",
      "typeScriptTag": "receivedDocuments",
      "description": "Get a new ReceivedDocument",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "The guid of the document that was received. This is the \"document_guid\" property of the \"received_document\" webhook."
        },
        {
          "name": "syntax",
          "schema": "string",
          "required": true,
          "description": "The syntax in which to receive the received document."
        },
        {
          "name": "format",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhook_instances/",
      "method": "getWebhookInstances",
      "httpMethod": "get",
      "tag": "WebhookInstances",
      "typeScriptTag": "webhookInstances",
      "description": "GET a WebhookInstance",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhook_instances/{guid}",
      "method": "deleteWebhookInstance",
      "httpMethod": "delete",
      "tag": "WebhookInstances",
      "typeScriptTag": "webhookInstances",
      "description": "DELETE a WebhookInstance",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "WebhookInstance guid"
        }
      ],
      "responses": []
    }
  ],
  "apiBaseUrl": "https://api.storecove.com/api/v2",
  "apiDescription": "Storecove API",
  "apiTitle": "Storecove API",
  "endpoints": 23,
  "sdkMethods": 29,
  "schemas": 91,
  "parameters": 122,
  "contactEmail": "apisupport@storecove.nl",
  "difficultyScore": 105,
  "difficulty": "Medium"
}