{
  "providerName": "dnd5eapi.co",
  "openApiRaw": "https://www.dnd5eapi.co/swagger/openapi.json",
  "securitySchemes": {},
  "categories": [
    "open_data"
  ],
  "homepage": "dnd5eapi.co",
  "apiVersion": "0.1",
  "methods": [
    {
      "url": "/api",
      "method": "/apiGet",
      "httpMethod": "get",
      "tag": "Common",
      "typeScriptTag": "common",
      "description": "Get all resource URLs.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/ability-scores/{index}",
      "method": "/api/abilityScores/{index}Get",
      "httpMethod": "get",
      "tag": "Character Data",
      "typeScriptTag": "characterData",
      "description": "Get an ability score by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the ability score to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`AbilityScore`\n"
        }
      ]
    },
    {
      "url": "/api/alignments/{index}",
      "method": "/api/alignments/{index}Get",
      "httpMethod": "get",
      "tag": "Character Data",
      "typeScriptTag": "characterData",
      "description": "Get an alignment by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the alignment to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Alignment`\n"
        }
      ]
    },
    {
      "url": "/api/backgrounds/{index}",
      "method": "/api/backgrounds/{index}Get",
      "httpMethod": "get",
      "tag": "Character Data",
      "typeScriptTag": "characterData",
      "description": "Get a background by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the background to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Background`\n"
        }
      ]
    },
    {
      "url": "/api/classes/{index}",
      "method": "/api/classes/{index}Get",
      "httpMethod": "get",
      "tag": "Class",
      "typeScriptTag": "class",
      "description": "Get a class by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the class to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Class`\n"
        }
      ]
    },
    {
      "url": "/api/classes/{index}/features",
      "method": "/api/classes/{index}/featuresGet",
      "httpMethod": "get",
      "tag": "Class Resource Lists",
      "typeScriptTag": "classResourceLists",
      "description": "Get features available for a class.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the class to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`APIReferenceList`\n"
        }
      ]
    },
    {
      "url": "/api/classes/{index}/levels",
      "method": "/api/classes/{index}/levelsGet",
      "httpMethod": "get",
      "tag": "Class Levels",
      "typeScriptTag": "classLevels",
      "description": "Get all level resources for a class.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the class to get.\n"
        },
        {
          "name": "subclass",
          "schema": "string",
          "required": false,
          "description": "Adds subclasses for class to the response"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/classes/{index}/levels/{class_level}",
      "method": "/api/classes/{index}/levels/{classLevel}Get",
      "httpMethod": "get",
      "tag": "Class Levels",
      "typeScriptTag": "classLevels",
      "description": "Get level resource for a class and level.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the class to get.\n"
        },
        {
          "name": "classLevel",
          "schema": "number",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`ClassLevel`\n"
        }
      ]
    },
    {
      "url": "/api/classes/{index}/levels/{class_level}/features",
      "method": "/api/classes/{index}/levels/{classLevel}/featuresGet",
      "httpMethod": "get",
      "tag": "Class Levels",
      "typeScriptTag": "classLevels",
      "description": "Get features available to a class at the requested level.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the class to get.\n"
        },
        {
          "name": "classLevel",
          "schema": "number",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`APIReferenceList`\n"
        }
      ]
    },
    {
      "url": "/api/classes/{index}/levels/{spell_level}/spells",
      "method": "/api/classes/{index}/levels/{spellLevel}/spellsGet",
      "httpMethod": "get",
      "tag": "Class Levels",
      "typeScriptTag": "classLevels",
      "description": "Get spells of the requested level available to the class.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the class to get.\n"
        },
        {
          "name": "spellLevel",
          "schema": "number",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`APIReferenceList`\n"
        }
      ]
    },
    {
      "url": "/api/classes/{index}/multi-classing",
      "method": "/api/classes/{index}/multiClassingGet",
      "httpMethod": "get",
      "tag": "Class",
      "typeScriptTag": "class",
      "description": "Get multiclassing resource for a class.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the class to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Multiclassing`\n"
        }
      ]
    },
    {
      "url": "/api/classes/{index}/proficiencies",
      "method": "/api/classes/{index}/proficienciesGet",
      "httpMethod": "get",
      "tag": "Class Resource Lists",
      "typeScriptTag": "classResourceLists",
      "description": "Get proficiencies available for a class.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the class to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`APIReferenceList`\n"
        }
      ]
    },
    {
      "url": "/api/classes/{index}/spellcasting",
      "method": "/api/classes/{index}/spellcastingGet",
      "httpMethod": "get",
      "tag": "Class",
      "typeScriptTag": "class",
      "description": "Get spellcasting info for a class.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the class to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Spellcasting`\n"
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/classes/{index}/spells",
      "method": "/api/classes/{index}/spellsGet",
      "httpMethod": "get",
      "tag": "Class Resource Lists",
      "typeScriptTag": "classResourceLists",
      "description": "Get spells available for a class.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the class to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`APIReferenceList`\n"
        }
      ]
    },
    {
      "url": "/api/classes/{index}/subclasses",
      "method": "/api/classes/{index}/subclassesGet",
      "httpMethod": "get",
      "tag": "Class Resource Lists",
      "typeScriptTag": "classResourceLists",
      "description": "Get subclasses available for a class.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the class to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`APIReferenceList`\n"
        }
      ]
    },
    {
      "url": "/api/conditions/{index}",
      "method": "/api/conditions/{index}Get",
      "httpMethod": "get",
      "tag": "Game Mechanics",
      "typeScriptTag": "gameMechanics",
      "description": "Get a condition by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the condition to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Condition`\n"
        }
      ]
    },
    {
      "url": "/api/damage-types/{index}",
      "method": "/api/damageTypes/{index}Get",
      "httpMethod": "get",
      "tag": "Game Mechanics",
      "typeScriptTag": "gameMechanics",
      "description": "Get a damage type by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the damage type to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`DamageType`\n"
        }
      ]
    },
    {
      "url": "/api/equipment-categories/{index}",
      "method": "/api/equipmentCategories/{index}Get",
      "httpMethod": "get",
      "tag": "Equipment",
      "typeScriptTag": "equipment",
      "description": "Get an equipment category by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the equipment category score to get.\n\nAvailable values can be found in the resource list for this endpoint.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`EquipmentCategory`\n"
        }
      ]
    },
    {
      "url": "/api/equipment/{index}",
      "method": "/api/equipment/{index}Get",
      "httpMethod": "get",
      "tag": "Equipment",
      "typeScriptTag": "equipment",
      "description": "Get an equipment item by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the equipment to get.\n\nAvailable values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `equipment`.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Equipment`\n"
        }
      ]
    },
    {
      "url": "/api/feats/{index}",
      "method": "/api/feats/{index}Get",
      "httpMethod": "get",
      "tag": "Feats",
      "typeScriptTag": "feats",
      "description": "Get a feat by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the feat to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Feat`\n"
        }
      ]
    },
    {
      "url": "/api/features/{index}",
      "method": "/api/features/{index}Get",
      "httpMethod": "get",
      "tag": "Features",
      "typeScriptTag": "features",
      "description": "Get a feature by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the feature to get.\n\nAvailable values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `features`.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Feature`\n"
        }
      ]
    },
    {
      "url": "/api/languages/{index}",
      "method": "/api/languages/{index}Get",
      "httpMethod": "get",
      "tag": "Character Data",
      "typeScriptTag": "characterData",
      "description": "Get a language by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the language to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Language`\n"
        }
      ]
    },
    {
      "url": "/api/magic-items/{index}",
      "method": "/api/magicItems/{index}Get",
      "httpMethod": "get",
      "tag": "Equipment",
      "typeScriptTag": "equipment",
      "description": "Get a magic item by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the magic item to get.\n\nAvailable values can be found in the resource list for this endpoint.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`MagicItem`\n"
        }
      ]
    },
    {
      "url": "/api/magic-schools/{index}",
      "method": "/api/magicSchools/{index}Get",
      "httpMethod": "get",
      "tag": "Game Mechanics",
      "typeScriptTag": "gameMechanics",
      "description": "Get a magic school by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the magic school to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`MagicSchool`\n"
        }
      ]
    },
    {
      "url": "/api/monsters",
      "method": "/api/monstersGet",
      "httpMethod": "get",
      "tag": "Monsters",
      "typeScriptTag": "monsters",
      "description": "Get list of monsters with optional filtering",
      "parameters": [
        {
          "name": "challengeRating",
          "schema": "array",
          "required": false,
          "description": "The challenge rating or ratings to filter on."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`APIReferenceList`\n"
        }
      ]
    },
    {
      "url": "/api/monsters/{index}",
      "method": "/api/monsters/{index}Get",
      "httpMethod": "get",
      "tag": "Monsters",
      "typeScriptTag": "monsters",
      "description": "Get monster by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the `Monster` to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Monster`\n"
        }
      ]
    },
    {
      "url": "/api/proficiencies/{index}",
      "method": "/api/proficiencies/{index}Get",
      "httpMethod": "get",
      "tag": "Character Data",
      "typeScriptTag": "characterData",
      "description": "Get a proficiency by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the proficiency to get.\n\nAvailable values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `proficiencies`.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Proficiency`\n"
        }
      ]
    },
    {
      "url": "/api/races/{index}",
      "method": "/api/races/{index}Get",
      "httpMethod": "get",
      "tag": "Races",
      "typeScriptTag": "races",
      "description": "Get a race by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the race to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Race`\n"
        }
      ]
    },
    {
      "url": "/api/races/{index}/proficiencies",
      "method": "/api/races/{index}/proficienciesGet",
      "httpMethod": "get",
      "tag": "Races",
      "typeScriptTag": "races",
      "description": "Get proficiencies available for a race.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the race to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`APIReferenceList`\n"
        }
      ]
    },
    {
      "url": "/api/races/{index}/subraces",
      "method": "/api/races/{index}/subracesGet",
      "httpMethod": "get",
      "tag": "Races",
      "typeScriptTag": "races",
      "description": "Get subraces available for a race.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the race to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`APIReferenceList`\n"
        }
      ]
    },
    {
      "url": "/api/races/{index}/traits",
      "method": "/api/races/{index}/traitsGet",
      "httpMethod": "get",
      "tag": "Races",
      "typeScriptTag": "races",
      "description": "Get traits available for a race.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the race to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`APIReferenceList`\n"
        }
      ]
    },
    {
      "url": "/api/rule-sections/{index}",
      "method": "/api/ruleSections/{index}Get",
      "httpMethod": "get",
      "tag": "Rules",
      "typeScriptTag": "rules",
      "description": "Get a rule section by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the rule section to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`RuleSection`\n"
        }
      ]
    },
    {
      "url": "/api/rules/{index}",
      "method": "/api/rules/{index}Get",
      "httpMethod": "get",
      "tag": "Rules",
      "typeScriptTag": "rules",
      "description": "Get a rule by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the rule to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Rule`\n"
        }
      ]
    },
    {
      "url": "/api/skills/{index}",
      "method": "/api/skills/{index}Get",
      "httpMethod": "get",
      "tag": "Character Data",
      "typeScriptTag": "characterData",
      "description": "Get a skill by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the skill to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Skill`\n"
        }
      ]
    },
    {
      "url": "/api/spells",
      "method": "/api/spellsGet",
      "httpMethod": "get",
      "tag": "Spells",
      "typeScriptTag": "spells",
      "description": "Get list of spells with optional filtering.",
      "parameters": [
        {
          "name": "level",
          "schema": "array",
          "required": false,
          "description": "The level or levels to filter on."
        },
        {
          "name": "school",
          "schema": "array",
          "required": false,
          "description": "The magic school or schools to filter on."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`APIReferenceList`\n"
        }
      ]
    },
    {
      "url": "/api/spells/{index}",
      "method": "/api/spells/{index}Get",
      "httpMethod": "get",
      "tag": "Spells",
      "typeScriptTag": "spells",
      "description": "Get a spell by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the `Spell` to get.\n\nAvailable values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `spells`.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Spell`\n"
        }
      ]
    },
    {
      "url": "/api/subclasses/{index}",
      "method": "/api/subclasses/{index}Get",
      "httpMethod": "get",
      "tag": "Subclasses",
      "typeScriptTag": "subclasses",
      "description": "Get a subclass by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the subclass to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Subclass`\n"
        }
      ]
    },
    {
      "url": "/api/subclasses/{index}/features",
      "method": "/api/subclasses/{index}/featuresGet",
      "httpMethod": "get",
      "tag": "Subclasses",
      "typeScriptTag": "subclasses",
      "description": "Get features available for a subclass.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the subclass to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`APIReferenceList`\n"
        }
      ]
    },
    {
      "url": "/api/subclasses/{index}/levels",
      "method": "/api/subclasses/{index}/levelsGet",
      "httpMethod": "get",
      "tag": "Subclasses",
      "typeScriptTag": "subclasses",
      "description": "Get all level resources for a subclass.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the subclass to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/subclasses/{index}/levels/{subclass_level}",
      "method": "/api/subclasses/{index}/levels/{subclassLevel}Get",
      "httpMethod": "get",
      "tag": "Subclasses",
      "typeScriptTag": "subclasses",
      "description": "Get level resources for a subclass and level.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the subclass to get.\n"
        },
        {
          "name": "subclassLevel",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`SubclassLevel`\n"
        }
      ]
    },
    {
      "url": "/api/subclasses/{index}/levels/{subclass_level}/features",
      "method": "/api/subclasses/{index}/levels/{subclassLevel}/featuresGet",
      "httpMethod": "get",
      "tag": "Subclasses",
      "typeScriptTag": "subclasses",
      "description": "Get features of the requested spell level available to the class.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the subclass to get.\n"
        },
        {
          "name": "subclassLevel",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`APIReferenceList`\n"
        }
      ]
    },
    {
      "url": "/api/subraces/{index}",
      "method": "/api/subraces/{index}Get",
      "httpMethod": "get",
      "tag": "Subraces",
      "typeScriptTag": "subraces",
      "description": "Get a subrace by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the subrace to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Subrace`\n"
        }
      ]
    },
    {
      "url": "/api/subraces/{index}/proficiencies",
      "method": "/api/subraces/{index}/proficienciesGet",
      "httpMethod": "get",
      "tag": "Subraces",
      "typeScriptTag": "subraces",
      "description": "Get proficiences available for a subrace.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the subrace to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`APIReferenceList`\n"
        }
      ]
    },
    {
      "url": "/api/subraces/{index}/traits",
      "method": "/api/subraces/{index}/traitsGet",
      "httpMethod": "get",
      "tag": "Subraces",
      "typeScriptTag": "subraces",
      "description": "Get traits available for a subrace.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the subrace to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`APIReferenceList`\n"
        }
      ]
    },
    {
      "url": "/api/traits/{index}",
      "method": "/api/traits/{index}Get",
      "httpMethod": "get",
      "tag": "Traits",
      "typeScriptTag": "traits",
      "description": "Get a trait by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the `Trait` to get."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`Trait`\n"
        }
      ]
    },
    {
      "url": "/api/weapon-properties/{index}",
      "method": "/api/weaponProperties/{index}Get",
      "httpMethod": "get",
      "tag": "Equipment",
      "typeScriptTag": "equipment",
      "description": "Get a weapon property by index.",
      "parameters": [
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "The `index` of the weapon property to get.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "WeaponProperty"
        }
      ]
    },
    {
      "url": "/api/{endpoint}",
      "method": "/api/{endpoint}Get",
      "httpMethod": "get",
      "tag": "Common",
      "typeScriptTag": "common",
      "description": "Get list of all available resources for an endpoint.",
      "parameters": [
        {
          "name": "endpoint",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`APIReferenceList`\n"
        }
      ]
    }
  ],
  "apiBaseUrl": "https://www.dnd5eapi.co",
  "apiDescription": "# Introduction\n\nWelcome to the dnd5eapi, the Dungeons & Dragons 5th Edition API!\nThis documentation should help you familiarize yourself with the resources\navailable and how to consume them with HTTP requests. Read through the getting\nstarted section before you dive in. Most of your problems should be solved\njust by reading through it.\n\n## Getting Started\n\nLet's make our first API request to the D&D 5th Edition API!\n\nOpen up a terminal and use [curl](http://curl.haxx.se/) or [httpie](http://httpie.org/)\nto make an API request for a resource. You can also scroll through the\ndefinitions below and send requests directly from the endpoint documentation!\n\nFor example, if you paste and run this `curl` command:\n```bash\ncurl -X GET \"https://www.dnd5eapi.co/api/ability-scores/cha\" -H \"Accept: application/json\"\n```\n\nWe should see a result containing details about the Charisma ability score:\n```bash\n{\n  \"index\": \"cha\",\n  \"name\": \"CHA\",\n  \"full_name\": \"Charisma\",\n  \"desc\": [\n    \"Charisma measures your ability to interact effectively with others. It\n      includes such factors as confidence and eloquence, and it can represent\n      a charming or commanding personality.\",\n    \"A Charisma check might arise when you try to influence or entertain\n      others, when you try to make an impression or tell a convincing lie,\n      or when you are navigating a tricky social situation. The Deception,\n      Intimidation, Performance, and Persuasion skills reflect aptitude in\n      certain kinds of Charisma checks.\"\n  ],\n  \"skills\": [\n    {\n      \"name\": \"Deception\",\n      \"index\": \"deception\",\n      \"url\": \"/api/skills/deception\"\n    },\n    {\n      \"name\": \"Intimidation\",\n      \"index\": \"intimidation\",\n      \"url\": \"/api/skills/intimidation\"\n    },\n    {\n      \"name\": \"Performance\",\n      \"index\": \"performance\",\n      \"url\": \"/api/skills/performance\"\n    },\n    {\n      \"name\": \"Persuasion\",\n      \"index\": \"persuasion\",\n      \"url\": \"/api/skills/persuasion\"\n    }\n  ],\n  \"url\": \"/api/ability-scores/cha\"\n}\n```\n\n## Authentication\n\nThe dnd5eapi is a completely open API. No authentication is required to query\nand get data. This also means that we've limited what you can do to just\n`GET`-ing the data. If you find a mistake in the data, feel free to\n[message us](https://discord.gg/TQuYTv7).\n\n## GraphQL\n\nThis API supports [GraphQL](https://graphql.org/). The GraphQL URL for this API\nis `https://www.dnd5eapi.co/graphql`. Most of your questions regarding the GraphQL schema can be answered\nby querying the endpoint with the Apollo sandbox explorer.\n\n## Schemas\n\nDefinitions of all schemas will be accessible in a future update. Two of the most common schemas are described here.\n\n### `APIReference`\nRepresents a minimal representation of a resource. The detailed representation of the referenced resource can be retrieved by making a request to the referenced `URL`.\n```\nAPIReference {\n  index     string\n  name      string\n  url       string\n}\n```\n<hr>\n\n### `DC`\nRepresents a difficulty check.\n```\nDC {\n  dc_type       APIReference\n  dc_value      number\n  success_type  \"none\" | \"half\" | \"other\"\n}\n```\n<hr>\n\n### `Damage`\nRepresents damage.\n```\nDamage {\n  damage_type     APIReference\n  damage_dice     string\n}\n```\n<hr>\n\n### `Choice`\nRepresents a choice made by a player. Commonly seen related to decisions made during character creation or combat (e.g.: the description of the cleric class, under **Proficiencies**, states \"Skills: Choose two from\tHistory, Insight, Medicine, Persuasion, and\tReligion\" [[SRD p15]](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=15))\n```\nChoice {\n  desc      string\n  choose    number\n  type      string\n  from      OptionSet\n}\n```\n<hr>\n\n### `OptionSet`\nThe OptionSet structure provides the options to be chosen from, or sufficient data to fetch and interpret the options. All OptionSets have an `option_set_type` attribute that indicates the structure of the object that contains the options. The possible values are `options_array`, `equipment_category`, and `reference_list`. Other attributes on the OptionSet depend on the value of this attribute.\n- `options_array`\n  - `options` (array): An array of Option objects. Each item in the array represents an option that can be chosen.\n- `equipment_category`\n  - `equipment_category` (APIReference): A reference to an EquipmentCategory. Each item in the EquipmentCategory's `equipment` array represents one option that can be chosen.\n- `resource_list`\n  - `resource_list_url` (string): A reference (by URL) to a collection in the database. The URL may include query parameters. Each item in the resulting ResourceList's `results` array represents one option that can be chosen.\n<hr>\n\n### `Option`\nWhen the options are given in an `options_array`, each item in the array inherits from the Option structure. All Options have an `option_type` attribute that indicates the structure of the option. The value of this attribute indicates how the option should be handled, and each type has different attributes. The possible values and their corresponding attributes are listed below.\n- `reference` - A terminal option. Contains a reference to a Document that can be added to the list of options chosen.\n  - `item` (APIReference): A reference to the chosen item.\n- `action` - A terminal option. Contains information describing an action, for use within Multiattack actions.\n  - `action_name` (string): The name of the action, according to its `name` attribute.\n  - `count` (number | string): The number of times this action can be repeated if this option is chosen.\n  - `type` (string = `\"melee\" | \"ranged\" | \"ability\" | \"magic\"`, optional): For attack actions that can be either melee, ranged, abilities, or magic.\n- `multiple` - When this option is chosen, all of its child options are chosen, and must be resolved the same way as a normal option.\n  - `items` (array): An array of Option objects. All of them must be taken if the option is chosen.\n- `choice` - A nested choice. If this option is chosen, the Choice structure contained within must be resolved like a normal Choice structure, and the results are the chosen options.\n  - `choice` (Choice): The Choice to resolve.\n- `string` - A terminal option. Contains a reference to a string.\n  - `string` (string): The string.\n- `ideal` - A terminal option. Contains information about an ideal.\n  - `desc` (string): A description of the ideal.\n  - `alignments` (ApiReference[]): A list of alignments of those who might follow the ideal.\n- `counted_reference` - A terminal option. Contains a reference to something else in the API along with a count.\n  - `count` (number): Count.\n  - `of` (ApiReference): Thing being referenced.\n- `score_prerequisite` - A terminal option. Contains a reference to an ability score and a minimum score.\n  - `ability_score` (ApiReference): Ability score being referenced.\n  - `minimum_score` (number): The minimum score required to satisfy the prerequisite.\n- `ability_bonus` - A terminal option. Contains a reference to an ability score and a bonus\n  - `ability_score` (ApiReference): Ability score being referenced\n  - `bonus` (number): The bonus being applied to the ability score\n- `breath` - A terminal option: Contains a reference to information about a breath attack.\n  - `name` (string): Name of the breath.\n  - `dc` (DC): Difficulty check of the breath attack.\n  - `damage` ([Damage]): Damage dealt by the breath attack, if any.\n- `damage` - A terminal option. Contains information about damage.\n  - `damage_type` (ApiReference): Reference to type of damage.\n  - `damage_dice` (string): Damage expressed in dice (e.g. \"13d6\").\n  - `notes` (string): Information regarding the damage.\n\n## FAQ\n\n### What is the SRD?\nThe SRD, or Systems Reference Document, contains guidelines for publishing content under the OGL. This allows for some of the data for D&D 5e to be open source. The API only covers data that can be found in the SRD. [Here's a link to the full text of the SRD.](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf)\n\n### What is the OGL?\nThe Open Game License (OGL) is a public copyright license by Wizards of the Coast that may be used by tabletop role-playing game developers to grant permission to modify, copy, and redistribute some of the content designed for their games, notably game mechanics. However, they must share-alike copies and derivative works. [More information about the OGL can be found here.](https://en.wikipedia.org/wiki/Open_Game_License)\n\n### A monster, spell, subclass, etc. is missing from the API / Database. Can I add it?\nPlease check if the data is within the SRD. If it is, feel free to open an issue or PR to add it yourself. Otherwise, due to legal reasons, we cannot add it.\n\n### Can this API be self hosted?\nYes it can! You can also host the data yourself if you don't want to use the API at all. You can also make changes and add extra data if you like. However, it is up to you to merge in new changes to the data and API.\n\n#### Can I publish is on <insert platform>? Is this free use?\nYes, you can. The API itself is under the [MIT license](https://opensource.org/licenses/MIT), and the underlying data accessible via the API is supported under the SRD and OGL.\n\n# Status Page\n\nThe status page for the API can be found here: https://5e-bits.github.io/dnd-uptime/\n\n# Chat\n\nCome hang out with us [on Discord](https://discord.gg/TQuYTv7)!\n\n# Contribute\n\nThis API is built from two repositories.\n  - The repo containing the data lives here: https://github.com/bagelbits/5e-database\n  - The repo with the API implementation lives here: https://github.com/bagelbits/5e-srd-api\n\nThis is a evolving API and having fresh ideas are always welcome! You can\nopen an issue in either repo, open a PR for changes, or just discuss with\nother users in this discord.\n",
  "apiTitle": "D&D 5e API",
  "endpoints": 47,
  "sdkMethods": 47,
  "schemas": 49,
  "parameters": 53,
  "contactUrl": "https://github.com/5e-bits",
  "difficultyScore": 84.75,
  "difficulty": "Easy"
}