{
  "providerName": "avaza.com",
  "openApiRaw": "https://api.avaza.com/swagger/docs/v1",
  "securitySchemes": {
    "oauth2": {
      "description": "OAuth2 Implicit Grant",
      "type": "oauth2",
      "flows": {
        "implicit": {
          "authorizationUrl": "https://any.avaza.com/oauth2/authorize",
          "scopes": {
            "read_account": "Read access to Account metadata",
            "read_contacts": "Read access to Customers, Contacts",
            "read_expenses": "Read access to Expense Details",
            "read_financials": "Read access to Estimates, Invoices, Payments, Credit Notes",
            "read_projects": "Read access to Projects, Project Settings, Tasks",
            "read_schedule": "Read access to Schedule Details",
            "read_timesheets": "Read access to Timesheet Details",
            "read_users": "Read access to User Profiles",
            "webhook_notifications": "Read access to webhook notification events",
            "write_account": "Write access to Account metadata",
            "write_contacts": "Write access to Customers, Contacts",
            "write_expenses": "Write access to Expense module",
            "write_financials": "Write access to Estimates, Invoices, Payments, Credit Notes",
            "write_projects": "Write access to Projects, Project Settings, Tasks",
            "write_schedule": "Write access to Schedule module",
            "write_timesheets": "Write access to Timesheets module",
            "write_users": "Write access to User Profiles"
          }
        }
      }
    }
  },
  "homepage": "avaza.com",
  "apiVersion": "v1",
  "methods": [
    {
      "url": "/ScheduleSeries/AddBooking",
      "method": "scheduleSeriesAddBooking",
      "httpMethod": "post",
      "tag": "ScheduleSeries",
      "description": "Create new Schedule Booking",
      "parameters": [
        {
          "name": "CategoryIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "DurationType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "EndDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "HoursPerDay",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Notes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ProjectIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ScheduleOnDaysOff",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "StartDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "TaskIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "TotalDuration",
          "schema": "number",
          "description": ""
        },
        {
          "name": "UserIDFK",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ScheduleSeries/AddLeave",
      "method": "scheduleSeriesAddLeave",
      "httpMethod": "post",
      "tag": "ScheduleSeries",
      "description": "Create new Leave Booking",
      "parameters": [
        {
          "name": "LeaveEndDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "LeaveHoursPerDay",
          "schema": "number",
          "description": ""
        },
        {
          "name": "LeaveNotes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "LeaveNotify",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "LeaveStartDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "LeaveTypeIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "LeaveUserIDFK",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ScheduleSeries/EditBooking",
      "method": "scheduleSeriesEditBooking",
      "httpMethod": "put",
      "tag": "ScheduleSeries",
      "description": "Edit Booking",
      "parameters": [
        {
          "name": "CategoryIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "DurationType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "EndDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "HoursPerDay",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Notes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ProjectIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ScheduleOnDaysOff",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ScheduleSeriesID",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "StartDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "TaskIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "TotalDuration",
          "schema": "number",
          "description": ""
        },
        {
          "name": "UserIDFK",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ScheduleSeries/EditLeave",
      "method": "scheduleSeriesEditLeave",
      "httpMethod": "put",
      "tag": "ScheduleSeries",
      "description": "Edit Leave Booking",
      "parameters": [
        {
          "name": "EndDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "HoursPerDay",
          "schema": "number",
          "description": ""
        },
        {
          "name": "LeaveTypeIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Notes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ScheduleSeriesID",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "StartDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "UserIDFK",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Account",
      "method": "accountGet",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Account Details",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Bill",
      "method": "billGet",
      "httpMethod": "get",
      "tag": "Bill",
      "description": "Gets list of Bills",
      "parameters": [
        {
          "name": "UpdatedAfter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        },
        {
          "name": "Sort",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "CompanyIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Bill",
      "method": "billPost",
      "httpMethod": "post",
      "tag": "Bill",
      "description": "Create a new draft Bill",
      "parameters": [
        {
          "name": "BillNumber",
          "schema": "string",
          "description": ""
        },
        {
          "name": "BillTemplateIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "CompanyIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "CompanyName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CurrencyCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "DateIssued",
          "schema": "string",
          "description": ""
        },
        {
          "name": "DueDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExchangeRate",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Firstname",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Lastname",
          "schema": "string",
          "description": ""
        },
        {
          "name": "LineItems",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Notes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PaymentTerms",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Subject",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SupplierPONumber",
          "schema": "string",
          "description": ""
        },
        {
          "name": "TransactionPrefix",
          "schema": "string",
          "description": ""
        },
        {
          "name": "TransactionTaxConfigCode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Bill/{id}",
      "method": "billGetById",
      "httpMethod": "get",
      "tag": "Bill",
      "description": "Gets a Bill by Bill ID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Bill Transaction ID number"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/BillPayment",
      "method": "billPaymentGet",
      "httpMethod": "get",
      "tag": "BillPayment",
      "description": "Gets list of Bill Payments",
      "parameters": [
        {
          "name": "UpdatedAfter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/BillPayment",
      "method": "billPaymentPost",
      "httpMethod": "post",
      "tag": "BillPayment",
      "description": "Create new Bill Payment and optionally assign payment allocations to Bills",
      "parameters": [
        {
          "name": "Amount",
          "schema": "number",
          "description": ""
        },
        {
          "name": "CompanyIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "CurrencyCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "DateIssued",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExchangeRate",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Notes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PaymentAllocations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "PaymentNumber",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PaymentProviderCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "TransactionPrefix",
          "schema": "string",
          "description": ""
        },
        {
          "name": "TransactionReference",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/BillPayment/{id}",
      "method": "billPaymentGetById",
      "httpMethod": "get",
      "tag": "BillPayment",
      "description": "Gets a Bill Payment by Payment Transaction ID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Invoice Transaction ID Number"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Company",
      "method": "companyGet",
      "httpMethod": "get",
      "tag": "Company",
      "description": "Gets list of Companies",
      "parameters": [
        {
          "name": "UpdatedAfter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of results per page"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "1 based page number to retrieve"
        },
        {
          "name": "Sort",
          "schema": "string",
          "required": false,
          "description": "(optional) Supply one of: \"DateUpdated\", \"DateCreated\", \"CompanyName\",\"DateUpdated desc\",\"DateCreated desc\", \"CompanyName desc\""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Company",
      "method": "companyPost",
      "httpMethod": "post",
      "tag": "Company",
      "description": "Create a Company",
      "parameters": [
        {
          "name": "BillingAddress",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "BillingAddressCity",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "BillingAddressLine",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "BillingAddressPostCode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "BillingAddressState",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "BillingCountryCode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "Comments",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "CompanyName",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "CurrencyCode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "Fax",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "Phone",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "TaxNumber",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "website",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Company",
      "method": "companyPut",
      "httpMethod": "put",
      "tag": "Company",
      "description": "Update a Company record.",
      "parameters": [
        {
          "name": "BillingAddress",
          "schema": "string",
          "description": ""
        },
        {
          "name": "BillingAddressCity",
          "schema": "string",
          "description": ""
        },
        {
          "name": "BillingAddressLine",
          "schema": "string",
          "description": ""
        },
        {
          "name": "BillingAddressPostCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "BillingAddressState",
          "schema": "string",
          "description": ""
        },
        {
          "name": "BillingCountryCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Comments",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CompanyID",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "CompanyName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Fax",
          "schema": "string",
          "description": ""
        },
        {
          "name": "FieldsToUpdate",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Phone",
          "schema": "string",
          "description": ""
        },
        {
          "name": "TaxNumber",
          "schema": "string",
          "description": ""
        },
        {
          "name": "website",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Company/Lookup",
      "method": "companyLookup",
      "httpMethod": "get",
      "tag": "Company",
      "description": "Gets minimal list of Companies.",
      "parameters": [
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search string to match against Company title"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Company/{id}",
      "method": "companyGetById",
      "httpMethod": "get",
      "tag": "Company",
      "description": "Gets Company by Company ID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Company ID Number"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Contact",
      "method": "contactGet",
      "httpMethod": "get",
      "tag": "Contact",
      "description": "Gets list of Contacts",
      "parameters": [
        {
          "name": "UpdatedAfter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        },
        {
          "name": "Sort",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "CompanyIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Contact",
      "method": "contactPost",
      "httpMethod": "post",
      "tag": "Contact",
      "description": "Create a Contact",
      "parameters": [
        {
          "name": "CompanyBillingAddress",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "CompanyBillingAddressCity",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "CompanyBillingAddressCountryCode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "CompanyBillingAddressLine",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "CompanyBillingAddressPostCode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "CompanyBillingAddressState",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "CompanyIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "CompanyName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ContactEmail",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "CurrencyCode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "Firstname",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "Lastname",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "Mobile",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "Phone",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "PositionTitle",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "UpdateExisting",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Contact/{id}",
      "method": "contactGetById",
      "httpMethod": "get",
      "tag": "Contact",
      "description": "Gets Contact by Contact ID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Contact ID number"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/CreditNote",
      "method": "creditNoteGet",
      "httpMethod": "get",
      "tag": "CreditNote",
      "description": "Gets list of CreditNotes",
      "parameters": [
        {
          "name": "UpdatedAfter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/CreditNote/{id}",
      "method": "creditNoteGetById",
      "httpMethod": "get",
      "tag": "CreditNote",
      "description": "Gets Credit Note by CreditNoteID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Credit Note ID Number"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Currency",
      "method": "currencyGet",
      "httpMethod": "get",
      "tag": "Currency",
      "description": "Gets list of Currencies",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Estimate",
      "method": "estimateGet",
      "httpMethod": "get",
      "tag": "Estimate",
      "description": "Gets list of Estimates",
      "parameters": [
        {
          "name": "UpdatedAfter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        },
        {
          "name": "Sort",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "CompanyIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Estimate",
      "method": "estimatePost",
      "httpMethod": "post",
      "tag": "Estimate",
      "description": "Create a new draft Estimate",
      "parameters": [
        {
          "name": "CompanyIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "CompanyName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CurrencyCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CustomerPONumber",
          "schema": "string",
          "description": ""
        },
        {
          "name": "DateIssued",
          "schema": "string",
          "description": ""
        },
        {
          "name": "DueDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "EstimateNumber",
          "schema": "string",
          "description": ""
        },
        {
          "name": "EstimatePrefix",
          "schema": "string",
          "description": ""
        },
        {
          "name": "EstimateTaxConfigCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExchangeRate",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Firstname",
          "schema": "string",
          "description": ""
        },
        {
          "name": "InvoiceTemplateIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Lastname",
          "schema": "string",
          "description": ""
        },
        {
          "name": "LineItems",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Notes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Subject",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Estimate/{id}",
      "method": "estimateGetById",
      "httpMethod": "get",
      "tag": "Estimate",
      "description": "Gets Estimate by Estimate ID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Estimate Estimate ID number"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/Expense",
      "method": "expenseDelete",
      "httpMethod": "delete",
      "tag": "Expense",
      "description": "Delete a Timesheet Entry",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Expense",
      "method": "expenseGet",
      "httpMethod": "get",
      "tag": "Expense",
      "description": "Gets list of Expenses",
      "parameters": [
        {
          "name": "UpdatedAfter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ExpenseDateFrom",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ExpenseDateTo",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "UserEmail",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "UserID",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "CategoryName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "CustomerID",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "ProjectID",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "isChargeable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isInvoiced",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "ExpenseReimbursementIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "ExpensePaymentMethodIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "ExpenseApprovalStatusCode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "Search",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        },
        {
          "name": "Sort",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Expense",
      "method": "expensePost",
      "httpMethod": "post",
      "tag": "Expense",
      "description": "Create an Expense",
      "parameters": [
        {
          "name": "Amount",
          "schema": "number",
          "description": ""
        },
        {
          "name": "CurrencyCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CustomerIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "CustomerName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExchangeRate",
          "schema": "number",
          "description": ""
        },
        {
          "name": "ExpenseCategoryIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ExpenseCategoryName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExpenseDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExpensePaymentMethodIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "FileAttachmentIDs",
          "schema": "array",
          "description": ""
        },
        {
          "name": "GroupTripName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Merchant",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MerchantTaxNumber",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Notes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ProjectIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ProjectName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Quantity",
          "schema": "number",
          "description": ""
        },
        {
          "name": "TaskIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "TaxIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "TaxName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "TransactionTaxConfigCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "UserEmail",
          "schema": "string",
          "description": ""
        },
        {
          "name": "UserIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "VerifyAndSave",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "isChargeable",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "isReimbursable",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Expense",
      "method": "expensePut",
      "httpMethod": "put",
      "tag": "Expense",
      "description": "Update an Expense",
      "parameters": [
        {
          "name": "Amount",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "CurrencyCode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "CustomerIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "ExchangeRate",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "ExpenseCategoryIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "ExpenseDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ExpenseID",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "ExpensePaymentMethodIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "FieldsToUpdate",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "FileAttachmentIDs",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "GroupTripName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "Merchant",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "MerchantTaxNumber",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "Notes",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ProjectIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "Quantity",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "TaskIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "TaxIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "TransactionTaxConfigCode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "VerifyAndSave",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isChargeable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isReimbursable",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Expense/Attachment",
      "method": "expenseAttachment",
      "httpMethod": "post",
      "tag": "Expense",
      "description": "",
      "parameters": [
        {
          "name": "File",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Expense/{id}",
      "method": "expenseGetById",
      "httpMethod": "get",
      "tag": "Expense",
      "description": "Gets an Expense Entry by Expense ID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Expense ID number"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/ExpenseApproval/Submit",
      "method": "expenseApproval",
      "httpMethod": "post",
      "tag": "Expense",
      "description": "Submit Expenses for Approval.",
      "parameters": [
        {
          "name": "UserID",
          "schema": "integer",
          "required": false,
          "description": "The user to submit the Expenses for. Defaults to current user. Only allowed to be different from the current user when the current user has rights to Impersonate other users."
        },
        {
          "name": "SendNotifications",
          "schema": "boolean",
          "required": false,
          "description": "Send email alerts to expense approvers. Defaults to true"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/ExpenseCategory",
      "method": "expenseCategoryGet",
      "httpMethod": "get",
      "tag": "ExpenseCategory",
      "description": "Gets list of Expense Categories",
      "parameters": [
        {
          "name": "isEnabled",
          "schema": "boolean",
          "required": false,
          "description": "Optional filter on for enabled/disabled categories. Defaults to true."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/ExpenseGroup/Lookup",
      "method": "expenseGroupLookup",
      "httpMethod": "get",
      "tag": "ExpenseGroup",
      "description": "Gets minimal list of Expense Groups.",
      "parameters": [
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search string to match against Expense Group Name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/ExpenseMerchant/Lookup",
      "method": "expenseMerchangeLookup",
      "httpMethod": "get",
      "tag": "ExpenseMerchant",
      "description": "Gets minimal list of Expense Merchants.",
      "parameters": [
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search string to match against Expense Group Name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/ExpensePaymentMethod/Lookup",
      "method": "expensePaymentMethodLookup",
      "httpMethod": "get",
      "tag": "ExpensePaymentMethod",
      "description": "Gets minimal list of Expense Payment Methods.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/ExpenseSummary",
      "method": "expenseSummaryGet",
      "httpMethod": "get",
      "tag": "ExpenseSummary",
      "description": "Gets Basic Summary of Expense Statistics",
      "parameters": [
        {
          "name": "model.groupBy",
          "schema": "array",
          "required": false,
          "description": "(Optional) Combine one, two or three levels of Grouping. Combine these possible grouping values: \"Category\", \"ChargeableStatus\", \"Merchant\", \"ApprovalStatus\", \"ReimbursementStatus\", \"Customer\", \"Project\", \"User\", \"Task\", \"Year\", \"Month\", \"Day\", \"Week\"."
        },
        {
          "name": "model.expenseDateFrom",
          "schema": "string",
          "required": false,
          "description": "(Required) Filter for expenses with expense dates greater or equal to the specified date. e.g. 2019-01-25."
        },
        {
          "name": "model.expenseDateTo",
          "schema": "string",
          "required": false,
          "description": "(Required) Filter for expenses with an expense date smaller or equal to the specified  date. e.g. 2019-01-25."
        },
        {
          "name": "model.userID",
          "schema": "array",
          "required": false,
          "description": "(Optional) Defaults to the current user. Provide one or more UserIDs of Users whose expenses should be retrieved. If the current user doesn't have impersonation rights, then they will only see their own data."
        },
        {
          "name": "model.projectID",
          "schema": "integer",
          "required": false,
          "description": "(Optional) Filter by Project"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/FixedAmount",
      "method": "fixedAmountGet",
      "httpMethod": "get",
      "tag": "FixedAmount",
      "description": "Gets list of Fixed Amounts",
      "parameters": [
        {
          "name": "UpdatedAfter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "EntryDateFrom",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "EntryDateTo",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ProjectID",
          "schema": "integer",
          "required": false,
          "description": "(Optional) The ProjectID of a Project to filter Fixed Amounts for"
        },
        {
          "name": "TaskID",
          "schema": "integer",
          "required": false,
          "description": "(Optional) The TaskID of a Task to filter Fixed Amounts for"
        },
        {
          "name": "isInvoiced",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        },
        {
          "name": "Sort",
          "schema": "string",
          "required": false,
          "description": "Optional sorting instruction. Currently possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\",\"EntryDate\", \"EntryDate desc\", \"StartTimeLocal\",\"StartTimeLocal desc\", \"TimeSheetEntryID\", \"TimeSheetEntryID desc\""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Inventory",
      "method": "inventoryGet",
      "httpMethod": "get",
      "tag": "Inventory",
      "description": "Gets list of Inventory",
      "parameters": [
        {
          "name": "UpdatedAfter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Inventory/{id}",
      "method": "inventoryGetById",
      "httpMethod": "get",
      "tag": "Inventory",
      "description": "Gets InventoryItem by InventoryItem ID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "InventoryItem ID number"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/Invoice",
      "method": "invoiceGet",
      "httpMethod": "get",
      "tag": "Invoice",
      "description": "Gets list of Invoices",
      "parameters": [
        {
          "name": "UpdatedAfter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        },
        {
          "name": "Sort",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "CompanyIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Invoice",
      "method": "invoicePost",
      "httpMethod": "post",
      "tag": "Invoice",
      "description": "Create a new draft invoice",
      "parameters": [
        {
          "name": "CompanyIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "CompanyName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CurrencyCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CustomerPONumber",
          "schema": "string",
          "description": ""
        },
        {
          "name": "DateIssued",
          "schema": "string",
          "description": ""
        },
        {
          "name": "DueDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExchangeRate",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Firstname",
          "schema": "string",
          "description": ""
        },
        {
          "name": "InvoiceNumber",
          "schema": "string",
          "description": ""
        },
        {
          "name": "InvoiceTemplateIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Lastname",
          "schema": "string",
          "description": ""
        },
        {
          "name": "LineItems",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Notes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PaymentTerms",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Subject",
          "schema": "string",
          "description": ""
        },
        {
          "name": "TransactionPrefix",
          "schema": "string",
          "description": ""
        },
        {
          "name": "TransactionTaxConfigCode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Invoice/{id}",
      "method": "invoiceGetById",
      "httpMethod": "get",
      "tag": "Invoice",
      "description": "Gets Invoice by Invoice ID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Invoice Transaction ID number"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/Payment",
      "method": "paymentGet",
      "httpMethod": "get",
      "tag": "Payment",
      "description": "Gets list of Payments",
      "parameters": [
        {
          "name": "InvoiceTransactionID",
          "schema": "integer",
          "required": false,
          "description": "Filter for Payments that have at least one allocation against a given Invoice Transaction ID"
        },
        {
          "name": "UpdatedAfter",
          "schema": "string",
          "required": false,
          "description": "Filter for Payments updated after a given date"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Payment",
      "method": "paymentPost",
      "httpMethod": "post",
      "tag": "Payment",
      "description": "Create new Payment and optionally assign payment allocations to Invoices",
      "parameters": [
        {
          "name": "Amount",
          "schema": "number",
          "description": ""
        },
        {
          "name": "CustomerIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "DateIssued",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExchangeRate",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Notes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PaymentAllocations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "PaymentNumber",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PaymentProviderCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "TransactionPrefix",
          "schema": "string",
          "description": ""
        },
        {
          "name": "TransactionReference",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Payment/{id}",
      "method": "paymentGetById",
      "httpMethod": "get",
      "tag": "Payment",
      "description": "Gets Payment by Payment Transaction ID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Invoice Transaction ID Number"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Project",
      "method": "projectGet",
      "httpMethod": "get",
      "tag": "Project",
      "description": "Gets list of Projects",
      "parameters": [
        {
          "name": "UpdatedAfter",
          "schema": "string",
          "required": false,
          "description": "Only show project records updated after a certain date (UTC)"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        },
        {
          "name": "Sort",
          "schema": "string",
          "required": false,
          "description": "A column to sort on. Current possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\""
        },
        {
          "name": "TimesheetUserID",
          "schema": "integer",
          "required": false,
          "description": "Filter to the projects that the supplied UserID can add timesheets to"
        },
        {
          "name": "includeArchived",
          "schema": "boolean",
          "required": false,
          "description": "Include Archived Projects in the results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Project",
      "method": "projectPost",
      "httpMethod": "post",
      "tag": "Project",
      "description": "Create a Project",
      "parameters": [
        {
          "name": "BudgetAmount",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "BudgetHours",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "CompanyIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "CompanyName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "CurrencyCode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "EndDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "PopulateDefaultProjectMembers",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "ProjectCategoryIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "ProjectCode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ProjectNotes",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ProjectStatusCode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ProjectTitle",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "StartDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "TimesheetApprovalRequiredbyDefault",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isTaskRequiredOnTimesheet",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Project",
      "method": "projectPut",
      "httpMethod": "put",
      "tag": "Project",
      "description": "Update an Project",
      "parameters": [
        {
          "name": "BudgetAmount",
          "schema": "number",
          "description": ""
        },
        {
          "name": "BudgetHours",
          "schema": "number",
          "description": ""
        },
        {
          "name": "EndDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "FieldsToUpdate",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ProjectBillableTypeCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ProjectBudgetTypeCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ProjectCategoryIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ProjectID",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ProjectNotes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ProjectStatusCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ProjectTitle",
          "schema": "string",
          "description": ""
        },
        {
          "name": "StartDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "TimesheetApprovalRequiredbyDefault",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "isTaskRequiredOnTimesheet",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Project/Lookup",
      "method": "projectLookup",
      "httpMethod": "get",
      "tag": "Project",
      "description": "Gets minimal list of active Projects for the current user",
      "parameters": [
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        },
        {
          "name": "TimesheetUserID",
          "schema": "integer",
          "required": false,
          "description": "Optionally Filter to the projects that the supplied UserID can add timesheets to"
        },
        {
          "name": "CompanyIDFK",
          "schema": "integer",
          "required": false,
          "description": "Optionally Filter for a specific Company ID"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search string to match against Project title and Customer name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Project/{id}",
      "method": "projectGetById",
      "httpMethod": "get",
      "tag": "Project",
      "description": "Gets Project by Project ID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Project ID number"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/ProjectMember",
      "method": "projectMemberGet",
      "httpMethod": "get",
      "tag": "ProjectMember",
      "description": "Gets list of Project Members",
      "parameters": [
        {
          "name": "ProjectID",
          "schema": "integer",
          "required": false,
          "description": "Get Project members filtered by ProjectID"
        },
        {
          "name": "UserID",
          "schema": "integer",
          "required": false,
          "description": "Get Project members filtered by UserID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/ProjectMember",
      "method": "projectMemberPost",
      "httpMethod": "post",
      "tag": "ProjectMember",
      "description": "Assign a user as a Member of a Project",
      "parameters": [
        {
          "name": "BudgetAmount",
          "schema": "number",
          "description": ""
        },
        {
          "name": "CostAmount",
          "schema": "number",
          "description": ""
        },
        {
          "name": "ProjectIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "RateAmount",
          "schema": "number",
          "description": ""
        },
        {
          "name": "UserIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "canCommentOnTasks",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "canCreateTasks",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "canDeleteTasks",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "canUpdateTasks",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "isTimesheetAllowed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "isTimesheetApprovalRequired",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "isTimesheetApprover",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/ProjectMember",
      "method": "projectMemberPut",
      "httpMethod": "put",
      "tag": "ProjectMember",
      "description": "Update a Member of a Project",
      "parameters": [
        {
          "name": "BudgetAmount",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "CostAmount",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "FieldsToUpdate",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "ProjectIDFK",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "RateAmount",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "UserIDFK",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "canCommentOnTasks",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "canCreateTasks",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "canDeleteTasks",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "canUpdateTasks",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isTimesheetAllowed",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isTimesheetApprovalRequired",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isTimesheetApprover",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/ProjectTimesheetCategory",
      "method": "projectTimesheetCategoryGet",
      "httpMethod": "get",
      "tag": "ProjectTimesheetCategory",
      "description": "Gets list of Project Timesheet Categories",
      "parameters": [
        {
          "name": "ProjectID",
          "schema": "integer",
          "required": false,
          "description": "Get categories filtered by ProjectID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/ProjectTimesheetCategory",
      "method": "projectTimesheetCategoryPost",
      "httpMethod": "post",
      "tag": "ProjectTimesheetCategory",
      "description": "Assign a TimeSheetCategory to a Project.",
      "parameters": [
        {
          "name": "BudgetHours",
          "schema": "number",
          "description": ""
        },
        {
          "name": "CostAmount",
          "schema": "number",
          "description": ""
        },
        {
          "name": "ProjectIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "RateAmount",
          "schema": "number",
          "description": ""
        },
        {
          "name": "TimesheetCategoryIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "isBillable",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "isPayable",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/ScheduleAssignment",
      "method": "scheduleAssignmentGet",
      "httpMethod": "get",
      "tag": "ScheduleAssignment",
      "description": "Gets list of Schedule Assignments.",
      "parameters": [
        {
          "name": "UpdatedAfter",
          "schema": "string",
          "required": false,
          "description": "Limit results to records updated after the specified date"
        },
        {
          "name": "ScheduleDateFrom",
          "schema": "string",
          "required": false,
          "description": "Filter for schedule assignement  that are  on or after a specific date"
        },
        {
          "name": "ScheduleDateTo",
          "schema": "string",
          "required": false,
          "description": "Filter for schedules that are on or before a specific date"
        },
        {
          "name": "ScheduleSeriesID",
          "schema": "integer",
          "required": false,
          "description": "Filter to records for a particular Schedule Series"
        },
        {
          "name": "UserID",
          "schema": "integer",
          "required": false,
          "description": "The UserID of a schedule user to filter assignments for. Only api users with Admin role can see all schedules across all users. Users with ScheduleUser role can access their own ScheduleSeries."
        },
        {
          "name": "UserEmail",
          "schema": "string",
          "required": false,
          "description": "The email of the user who has been scheduled"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        },
        {
          "name": "Sort",
          "schema": "string",
          "required": false,
          "description": "Optional sorting instruction. Currently possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/ScheduleSeries",
      "method": "scheduleSeriesGet",
      "httpMethod": "get",
      "tag": "ScheduleSeries",
      "description": "Gets list of Schedule Series",
      "parameters": [
        {
          "name": "UpdatedAfter",
          "schema": "string",
          "required": false,
          "description": "Limit results to records updated after the specified date"
        },
        {
          "name": "ScheduleStartDateFrom",
          "schema": "string",
          "required": false,
          "description": "Filter for schedules that start on or after a specific date"
        },
        {
          "name": "ScheduleStartDateTo",
          "schema": "string",
          "required": false,
          "description": "Filter for schedules that start on or before a specific date"
        },
        {
          "name": "ScheduleEndDateFrom",
          "schema": "string",
          "required": false,
          "description": "Filter for schedules that end on or after a specific date"
        },
        {
          "name": "ScheduleEndDateTo",
          "schema": "string",
          "required": false,
          "description": "Filter for schedules that end on or before a specific date"
        },
        {
          "name": "UserID",
          "schema": "integer",
          "required": false,
          "description": "The UserID of a schedule user to filter assignments for. Only api users with Admin role can see all schedules across all users. Users with ScheduleUser role can access their own ScheduleSeries."
        },
        {
          "name": "UserEmail",
          "schema": "string",
          "required": false,
          "description": "The email of the user who has been scheduled"
        },
        {
          "name": "TimeSheetCategoryID",
          "schema": "integer",
          "required": false,
          "description": "Filter for schedule records linked to a specific timesheeet category"
        },
        {
          "name": "TimeSheetCategoryName",
          "schema": "string",
          "required": false,
          "description": "Filter for schedule records with a specific timesheeet category name (exact string match)"
        },
        {
          "name": "LeaveTypeID",
          "schema": "integer",
          "required": false,
          "description": "Filter to records of a particular leave type"
        },
        {
          "name": "ProjectID",
          "schema": "integer",
          "required": false,
          "description": "Filter to only include books linked to a specific project"
        },
        {
          "name": "CompanyID",
          "schema": "integer",
          "required": false,
          "description": "Filter to only include records linked to projects, where that project belongs to a specific customer company"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        },
        {
          "name": "Sort",
          "schema": "string",
          "required": false,
          "description": "Optional sorting instruction. Currently possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Section",
      "method": "sectionDelete",
      "httpMethod": "delete",
      "tag": "Section",
      "description": "Delete a Section",
      "parameters": [
        {
          "name": "SectionID",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Section",
      "method": "sectionGet",
      "httpMethod": "get",
      "tag": "Section",
      "description": "Gets list of Sections",
      "parameters": [
        {
          "name": "ProjectID",
          "schema": "integer",
          "required": true,
          "description": "Get sections for Project with ProjectID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Section",
      "method": "sectionPost",
      "httpMethod": "post",
      "tag": "Section",
      "description": "Create a Section",
      "parameters": [
        {
          "name": "EndDateUTC",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ProjectIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "StartDateUTC",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Title",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Task",
      "method": "taskDelete",
      "httpMethod": "delete",
      "tag": "Task",
      "description": "Delete a Task",
      "parameters": [
        {
          "name": "TaskID",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Task",
      "method": "taskGet",
      "httpMethod": "get",
      "tag": "Task",
      "description": "Gets list of Tasks",
      "parameters": [
        {
          "name": "UpdatedAfter",
          "schema": "string",
          "required": false,
          "description": "Optional filter to records updated after a specific date."
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page. Defaults to 20."
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1. Defaults to 1"
        },
        {
          "name": "Sort",
          "schema": "string",
          "required": false,
          "description": "Optional sorting instruction. Currently possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\", \"SectionTitle\", \"Title\""
        },
        {
          "name": "isComplete",
          "schema": "boolean",
          "required": false,
          "description": "Optional filter to only display tasks linked to a Task Status where isComplete=false, or where isComplete=true"
        },
        {
          "name": "ProjectID",
          "schema": "integer",
          "required": false,
          "description": "Optional filter to only display tasks belonging to a specific ProjectID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Task",
      "method": "taskPost",
      "httpMethod": "post",
      "tag": "Task",
      "description": "Create a Task",
      "parameters": [
        {
          "name": "AccountTaskTypeIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "AssignedToUserIDFKs",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "DateDue",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "DateStart",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "Description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "EstimatedEffort",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "ProjectIDFK",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "SectionIDFK",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "Tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "TaskPriorityCode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "Title",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Task",
      "method": "taskPut",
      "httpMethod": "put",
      "tag": "Task",
      "description": "Update a Task.",
      "parameters": [
        {
          "name": "AssignedToUserIDFK",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "DateDue",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "DateStart",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "Description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "EstimatedEffort",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "FieldsToUpdate",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "PercentComplete",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "SectionIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "Tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "TaskID",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "TaskPriorityCode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "TaskStatusCode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "Title",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Task/Lookup",
      "method": "taskLookup",
      "httpMethod": "get",
      "tag": "Task",
      "description": "Gets minimal list of Tasks for the current user",
      "parameters": [
        {
          "name": "projectID",
          "schema": "integer",
          "required": true,
          "description": "(required) The ProjectID to use when filtering Tasks"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        },
        {
          "name": "hideCompleted",
          "schema": "boolean",
          "required": false,
          "description": "(optional) true/false to hide completed tasks. Defaults false"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "(optional) Search string to match against Task title. Performs begins-with match"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Task/{id}",
      "method": "taskGetById",
      "httpMethod": "get",
      "tag": "Task",
      "description": "Gets Task by Task ID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Task ID number"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/TaskStatus",
      "method": "taskStatusGet",
      "httpMethod": "get",
      "tag": "TaskStatus",
      "description": "Gets list of Task Statuses",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/TaskType",
      "method": "taskTypeGet",
      "httpMethod": "get",
      "tag": "TaskType",
      "description": "Gets list of Task Types",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Tax",
      "method": "taxGet",
      "httpMethod": "get",
      "tag": "Tax",
      "description": "Get List of Taxes configured in the Avaza account.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Timesheet",
      "method": "timesheetGet",
      "httpMethod": "get",
      "tag": "Timesheet",
      "description": "Gets list of Timsheets",
      "parameters": [
        {
          "name": "UpdatedAfter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "EntryDateFrom",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "EntryDateTo",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "UserID",
          "schema": "integer",
          "required": false,
          "description": "The UserID of a timesheet user to filter timesheets for. Only api users with certain higher roles can see timesheets across multiple users."
        },
        {
          "name": "UserEmail",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "CategoryName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ProjectID",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "isBillable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isInvoiced",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isTimerRunning",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "Number of items per page (max 1000)"
        },
        {
          "name": "pageNumber",
          "schema": "integer",
          "required": false,
          "description": "Page to display. Starts from 1."
        },
        {
          "name": "includeInvoiceDetails",
          "schema": "boolean",
          "required": false,
          "description": "Defaults to false. When true, the InvoiceIDFK value will be included in the response."
        },
        {
          "name": "Sort",
          "schema": "string",
          "required": false,
          "description": "Optional sorting instruction. Currently possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\",\"EntryDate\", \"EntryDate desc\", \"StartTimeLocal\",\"StartTimeLocal desc\", \"TimeSheetEntryID\", \"TimeSheetEntryID desc\""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Timesheet",
      "method": "timesheetPost",
      "httpMethod": "post",
      "tag": "Timesheet",
      "description": "Create a new Timesheet Entry",
      "parameters": [
        {
          "name": "CustomMetadata",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Duration",
          "schema": "number",
          "description": ""
        },
        {
          "name": "EntryDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Notes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ProjectIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "TaskIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "TimesheetCategoryIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "UserIDFK",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "hasStartEndTime",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "isInvoiced",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Timesheet",
      "method": "timesheetPut",
      "httpMethod": "put",
      "tag": "Timesheet",
      "description": "Update a Timesheet",
      "parameters": [
        {
          "name": "CustomMetadata",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "Duration",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "EntryDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "FieldsToUpdate",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "Notes",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ProjectIDFK",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "TaskIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "TimeSheetEntryID",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "TimesheetCategoryIDFK",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "hasStartEndTime",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Timesheet/{id}",
      "method": "timesheetDelete",
      "httpMethod": "delete",
      "tag": "Timesheet",
      "description": "Delete a Timesheet Entry",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The id of the timesheet entry to be deleted"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Timesheet/{id}",
      "method": "timesheetGetById",
      "httpMethod": "get",
      "tag": "Timesheet",
      "description": "Gets a Timesheet Entry by Timesheet ID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Timesheet ID number"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/TimesheetSubmission",
      "method": "timesheetSubmissionPost",
      "httpMethod": "post",
      "tag": "TimesheetSubmission",
      "description": "Submit Timesheets for Approval.",
      "parameters": [
        {
          "name": "SendNotifications",
          "schema": "boolean",
          "required": false,
          "description": "Send email alerts to timesheet approvers. Defaults to true"
        },
        {
          "name": "WholeWeekOf",
          "schema": "string",
          "required": false,
          "description": "A date (yyyy-MM-dd) that falls within  a Week to have all timesheets in that week submitted. Respects the First Day of Week setting in your account Timesheet Settings to determine the week range."
        },
        {
          "name": "WholeDayOf",
          "schema": "string",
          "required": false,
          "description": "A date (yyyy-MM-dd) to submit all timesheets on this day"
        },
        {
          "name": "UserID",
          "schema": "integer",
          "required": false,
          "description": "The user to submit timesheets for. Defaults to current user. Only allowed to be different from the current user when the current user has rights to Impersonate other users."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/TimesheetSummary",
      "method": "timesheetSummaryGet",
      "httpMethod": "get",
      "tag": "TimesheetSummary",
      "description": "Gets Basic Summary of Timesheet Statistics",
      "parameters": [
        {
          "name": "model.groupBy",
          "schema": "array",
          "required": false,
          "description": "(Optional) Combine one, two or three levels of Grouping. Combine these possible grouping values: \"Customer\", \"Project\", \"Category\", \"User\", \"Task\", \"Year\", \"Month\", \"Day\", \"Week\"."
        },
        {
          "name": "model.entryDateFrom",
          "schema": "string",
          "required": false,
          "description": "(Required) Filter for timesheets greater or equal to the specified date. e.g. 2019-01-25. You can optionally include a time component, otherwise it assumes 00:00"
        },
        {
          "name": "model.entryDateTo",
          "schema": "string",
          "required": false,
          "description": "(Required) Filter for timesheets with an entry date smaller or equal to the specified  date. e.g. 2019-01-25. You can optionally include a time component, otherwise it assumes 00:00"
        },
        {
          "name": "model.userID",
          "schema": "array",
          "required": false,
          "description": "(Optional) Defaults to the current user. Provide one or more UserIDs of Users whose timesheets should be retrieved. If the current user doesn't have impersonation rights, then they will only see their own data."
        },
        {
          "name": "model.projectID",
          "schema": "integer",
          "required": false,
          "description": "(Optional) Filter by Project"
        },
        {
          "name": "model.isBillable",
          "schema": "boolean",
          "required": false,
          "description": "(Optional) Filter by the billable status of Timesheets."
        },
        {
          "name": "model.isInvoiced",
          "schema": "boolean",
          "required": false,
          "description": "(Optional) Filter for timesheets by whether they have been Invoiced or not."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/TimesheetTimer",
      "method": "timesheetTimerGetRunningTimer",
      "httpMethod": "get",
      "tag": "TimesheetTimer",
      "description": "Gets the  Running Timer if there is one for a user.",
      "parameters": [
        {
          "name": "UserID",
          "schema": "integer",
          "required": false,
          "description": "Optional - User ID number if impersonating a different user. Otherwise assumes the current user. Only users with certain security roles have permission to impersonate other users"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/TimesheetTimer/{id}",
      "method": "timesheetTimerStopTimer",
      "httpMethod": "delete",
      "tag": "TimesheetTimer",
      "description": "Stop the timer running on an existing Timesheet Entry",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the existing timesheet entry that needs its timer stopped"
        },
        {
          "name": "UserID",
          "schema": "integer",
          "required": false,
          "description": "Optional - User ID number if impersonating a different user. Otherwise assumes the current user. Only users with certain security roles have permission to impersonate other users"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/TimesheetTimer/{id}",
      "method": "timesheetTimerStartTimer",
      "httpMethod": "post",
      "tag": "TimesheetTimer",
      "description": "Starts a Timer running on an existing Timesheet Entry",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of timesheet entry that should be used as the basis for running a timer. If the existing timesheet is not on the current day, or you have start/end times enabled, then a new timesheet will be created for the timer."
        },
        {
          "name": "UserID",
          "schema": "integer",
          "required": false,
          "description": "Optional - User ID number if impersonating a different user. Otherwise assumes the current user. Only users with certain security roles have permission to impersonate other users"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/UserProfile",
      "method": "userProfileGet",
      "httpMethod": "get",
      "tag": "UserProfile",
      "description": "Get Collection of Users who have roles in the current Avaza account.",
      "parameters": [
        {
          "name": "Roles",
          "schema": "string",
          "required": false,
          "description": "Optional list of comma separated role codes to filter users by (e.g. \"TimesheetUser,Admin\")"
        },
        {
          "name": "Tags",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "CurrentUserOnly",
          "schema": "boolean",
          "required": false,
          "description": "Optional boolean (true/false) to filter to only show current authenticated user (always true for non Admin/InvoiceManager users)"
        },
        {
          "name": "CompanyIDFK",
          "schema": "integer",
          "required": false,
          "description": "Optionally filter by Company ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Webhook",
      "method": "webhookDeleteByUrl",
      "httpMethod": "delete",
      "tag": "Webhook",
      "description": "Delete webhook subscription by URL",
      "parameters": [
        {
          "name": "target_url",
          "schema": "string",
          "required": true,
          "description": "Target URL that should be used to delete subscriptions"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Webhook",
      "method": "webhookGet",
      "httpMethod": "get",
      "tag": "Webhook",
      "description": "Get list of Webhook Subscriptions",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Webhook",
      "method": "webhookPost",
      "httpMethod": "post",
      "tag": "Webhook",
      "description": "Subscribe to Webhook. On success, returns ID of webhook subscription.",
      "parameters": [
        {
          "name": "event",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "target_url",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Webhook/{id}",
      "method": "webhookDelete",
      "httpMethod": "delete",
      "tag": "Webhook",
      "description": "Delete Webhook Subscription by ID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Subscription id to be deleted"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/Webhook/{id}",
      "method": "webhookGetById",
      "httpMethod": "get",
      "tag": "Webhook",
      "description": "Get Webhook Subscription by SubscriptionID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.avaza.com",
  "apiDescription": "Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>",
  "apiTitle": "Avaza API Documentation",
  "endpoints": 58,
  "sdkMethods": 86,
  "schemas": 132,
  "parameters": 498,
  "difficultyScore": 276.5,
  "difficulty": "Hard"
}