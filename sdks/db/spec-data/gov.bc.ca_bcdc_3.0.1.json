{
  "providerName": "gov.bc.ca",
  "openApiRaw": "https://raw.githubusercontent.com/bcgov/api-specs/master/bcdc/bcdc.json",
  "securitySchemes": {
    "githubAccessCode": {
      "flows": {
        "authorizationCode": {
          "authorizationUrl": "https://github.com/login/oauth/authorize",
          "scopes": {
            "admin:org": "Fully manage organization, teams, and memberships.",
            "admin:public_key": "Fully manage public keys.",
            "admin:repo_hook": "Grants read, write, ping, and delete access to hooks in public or private repositories.",
            "delete_repo": "Grants access to delete adminable repositories.",
            "gist": "Grants write access to gists.",
            "notifications": "Grants read access to a user's notifications. repo also provides this access.",
            "public_repo": "Grants read/write access to code, commit statuses, and deployment statuses for public repositories and organizations.",
            "read:org": "Read-only access to organization, teams, and membership.",
            "read:public_key": "List and view details for public keys.",
            "read:repo_hook": "Grants read and ping access to hooks in public or private repositories.",
            "repo": "Grants read/write access to code, commit statuses, and deployment statuses for public and private repositories and organizations.",
            "repo:status": "Grants read/write access to public and private repository commit statuses. This scope is only necessary to grant other users or services access to private repository commit statuses without granting access to the code.",
            "repo_deployment": "Grants access to deployment statuses for public and private repositories. This scope is only necessary to grant other users or services access to deployment statuses, without granting access to the code.",
            "user": "Grants read/write access to profile info only. Note that this scope includes user:email and user:follow.",
            "user:email": "Grants read access to a user's email addresses.",
            "user:follow": "Grants access to follow or unfollow other users.",
            "write:org": "Publicize and unpublicize organization membership.",
            "write:public_key": "Create, list, and view details for public keys.",
            "write:repo_hook": "Grants read, write, and ping access to hooks in public or private repositories."
          },
          "tokenUrl": "https://github.com/login/oauth/access_token"
        }
      },
      "type": "oauth2"
    },
    "internalApiKey": {
      "in": "header",
      "name": "ckan_api_key",
      "type": "apiKey"
    }
  },
  "homepage": "gov.bc.ca",
  "serviceName": "bcdc",
  "apiVersion": "3.0.1",
  "methods": [
    {
      "url": "/action/organization_activity_list",
      "method": "/action/organizationActivityListGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Get the activity stream of an organization",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "The id or name of the organization"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/organization_activity_list_html",
      "method": "/action/organizationActivityListHtmlGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Get the activity stream of an organization, HTML format",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "The id or name of the organization"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/organization_autocomplete",
      "method": "/action/organizationAutocompleteGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Get names of organizations that match a query string",
      "parameters": [
        {
          "name": "q",
          "schema": "string",
          "description": "The string to search for"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "The maximum number of organizations to return (optional)"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/organization_follower_count",
      "method": "/action/organizationFollowerCountGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Get number of followers of an organization",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "The id or name of the organization"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/organization_follower_list",
      "method": "/action/organizationFollowerListGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Get users following an organization",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "The id or name of the organization"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/organization_list",
      "method": "/action/organizationListGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Get names of all organizations",
      "parameters": [
        {
          "name": "offset",
          "schema": "integer",
          "description": "The offset (index) of the first organizations to return"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "The number of organizations to be returned per page"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/organization_list_for_user",
      "method": "/action/organizationListForUserGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Get organizations that a user has a given permission for",
      "parameters": [
        {
          "name": "permission",
          "schema": "string",
          "description": "The permission the user has against the returned organization"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/organization_revision_list",
      "method": "/action/organizationRevisionListGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Get organization revisions",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "The name or id of the organization"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/organization_show",
      "method": "/action/organizationShowGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Get details of a specific organization",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "The id or name of the organization"
        },
        {
          "name": "includeDatasets",
          "schema": "boolean",
          "description": "include a list of the organization's datasets"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/package_activity_list",
      "method": "/action/packageActivityListGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Get the activity stream of a package (dataset)",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "The id or name of the package"
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "Where to start getting activity items from"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "The maximum number of activities to return"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/package_activity_list_html",
      "method": "/action/packageActivityListHtmlGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Get the activity stream of a package (dataset), HTML format",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "The id or name of the package"
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "Where to start getting activity items from"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "The maximum number of activities to return"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/package_autocomplete",
      "method": "/action/packageAutocompleteGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Find packages (datasets) matching a query",
      "parameters": [
        {
          "name": "q",
          "schema": "string",
          "description": "The string to query"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "The maximum number of resource formats to return"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/package_list",
      "method": "/action/packageListGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Get a list of all packages (datasets)",
      "parameters": [
        {
          "name": "offset",
          "schema": "integer",
          "description": "The offset (index) of the first package to return"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "The number of packages to be returned per page"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/package_relationships_list",
      "method": "/action/packageRelationshipsListGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Get package (dataset) relationships",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "The id or name of the first package"
        },
        {
          "name": "id2",
          "schema": "string",
          "description": "The id or name of the second package"
        },
        {
          "name": "rel",
          "schema": "string",
          "description": "relationship as string"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/package_revision_list",
      "method": "/action/packageRevisionListGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Get list of revisions for a package (dataset)",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "The id or name of the dataset"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/package_search",
      "method": "/action/packageSearchGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Find packages (datasets) matching query terms",
      "parameters": [
        {
          "name": "q",
          "schema": "string",
          "description": "A query string"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/package_show",
      "method": "/action/packageShowGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Get metadata about one specific package (dataset)",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "The package name"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/related_list",
      "method": "/action/relatedListGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Gets items related to a package (dataset)",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "id or name of the dataset (optional)"
        },
        {
          "name": "dataset",
          "schema": "string",
          "description": "Dataset dictionary of the dataset (optional)"
        },
        {
          "name": "typeFilter",
          "schema": "string",
          "description": "The type of related item to show (optional)"
        },
        {
          "name": "sort",
          "schema": "string",
          "description": "The order to sort the related items in"
        },
        {
          "name": "featured",
          "schema": "string",
          "description": "whether or not to restrict the results to only featured items"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/resource_search",
      "method": "/action/resourceSearchGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Find resources",
      "parameters": [
        {
          "name": "query",
          "schema": "string",
          "description": "The search criteria string or list of strings of the form ``{field}:{term1}``"
        },
        {
          "name": "fields",
          "schema": "string",
          "description": "Depreciated"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "description": "A field on the resource model that orders the results"
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "Apply an offset to the query"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Apply a limit to the query"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/resource_show",
      "method": "/action/resourceShowGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Get metadata for a specific resource",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "The id of the resource"
        },
        {
          "name": "includeTracking",
          "schema": "boolean",
          "description": "Add tracking information to dataset"
        }
      ],
      "responses": []
    },
    {
      "url": "/action/status_show",
      "method": "/action/statusShowGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Get the site status",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/action/tag_list",
      "method": "/action/tagListGet",
      "httpMethod": "get",
      "tag": "action",
      "typeScriptTag": "action",
      "description": "Get a list of tags",
      "parameters": [
        {
          "name": "offset",
          "schema": "integer",
          "description": "The offset (index) of the first tag to return"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "The number of tags to be returned per page"
        }
      ],
      "responses": []
    }
  ],
  "apiBaseUrl": "https://catalogue.data.gov.bc.ca/api/3",
  "apiDescription": "This API provides live access to the BC Data Catalogue. Further documentation on the API is available from http://docs.ckan.org/en/latest/ Confirm the version of the API available from the catalogue by requesting https://catalogue.data.gov.bc.ca/api/3/action/status_show. \n\nPlease note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.",
  "apiTitle": "BC Data Catalogue API",
  "endpoints": 22,
  "sdkMethods": 22,
  "schemas": 0,
  "parameters": 42,
  "contactUrl": "http://data.gov.bc.ca/",
  "contactEmail": "data@gov.bc.ca",
  "difficultyScore": 32.5,
  "difficulty": "Easy"
}