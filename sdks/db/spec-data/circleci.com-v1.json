{
  "providerName": "circleci.com",
  "openApiRaw": "https://raw.githubusercontent.com/kamikazechaser/spec-circleci/master/swagger.yml",
  "homepage": "circleci.com",
  "apiVersion": "v1",
  "methods": [
    {
      "url": "/me",
      "method": "/meGet",
      "httpMethod": "get",
      "description": "Provides information about the signed in user.\n",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/project/{username}/{project}",
      "method": "/project/{username}/{project}Get",
      "httpMethod": "get",
      "description": "Build summary for each of the last 30 builds for a single git repo.\n",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The number of builds to return. Maximum 100, defaults to 30.\n"
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The API returns builds starting from this offset, defaults to 0.\n"
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "Restricts which builds are returned.\nSet to \"completed\", \"successful\", \"failed\", \"running\", or defaults to no filter.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/project/{username}/{project}",
      "method": "/project/{username}/{project}Post",
      "httpMethod": "post",
      "description": "Triggers a new build, returns a summary of the build.\n",
      "parameters": [
        {
          "name": "build_parameters",
          "schema": "object",
          "description": ""
        },
        {
          "name": "parallel",
          "schema": "string",
          "description": ""
        },
        {
          "name": "revision",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tag",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/project/{username}/{project}/build-cache",
      "method": "/project/{username}/{project}/buildCacheDelete",
      "httpMethod": "delete",
      "description": "Clears the cache for a project.\n",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/project/{username}/{project}/checkout-key",
      "method": "/project/{username}/{project}/checkoutKeyGet",
      "httpMethod": "get",
      "description": "Lists checkout keys.\n",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/project/{username}/{project}/checkout-key",
      "method": "/project/{username}/{project}/checkoutKeyPost",
      "httpMethod": "post",
      "description": "Creates a new checkout key.\nOnly usable with a user API token.\n",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/project/{username}/{project}/checkout-key/{fingerprint}",
      "method": "/project/{username}/{project}/checkoutKey/{fingerprint}Delete",
      "httpMethod": "delete",
      "description": "Delete a checkout key.\n",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/project/{username}/{project}/checkout-key/{fingerprint}",
      "method": "/project/{username}/{project}/checkoutKey/{fingerprint}Get",
      "httpMethod": "get",
      "description": "Get a checkout key.\n",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/project/{username}/{project}/envvar",
      "method": "/project/{username}/{project}/envvarGet",
      "httpMethod": "get",
      "description": "Lists the environment variables for :project\n",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/project/{username}/{project}/envvar",
      "method": "/project/{username}/{project}/envvarPost",
      "httpMethod": "post",
      "description": "Creates a new environment variable\n",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/project/{username}/{project}/envvar/{name}",
      "method": "/project/{username}/{project}/envvar/{name}Delete",
      "httpMethod": "delete",
      "description": "Deletes the environment variable named ':name'\n",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/project/{username}/{project}/envvar/{name}",
      "method": "/project/{username}/{project}/envvar/{name}Get",
      "httpMethod": "get",
      "description": "Gets the hidden value of environment variable :name\n",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/project/{username}/{project}/ssh-key",
      "method": "/project/{username}/{project}/sshKeyPost",
      "httpMethod": "post",
      "description": "Create an ssh key used to access external systems that require SSH key-based authentication\n",
      "parameters": [
        {
          "name": "Content-Type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "hostname",
          "schema": "string",
          "description": ""
        },
        {
          "name": "private_key",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/project/{username}/{project}/tree/{branch}",
      "method": "/project/{username}/{project}/tree/{branch}Post",
      "httpMethod": "post",
      "description": "Triggers a new build, returns a summary of the build.\nOptional build parameters can be set using an experimental API.\n\nNote: For more about build parameters, read about [using parameterized builds](https://circleci.com/docs/parameterized-builds/)\n",
      "parameters": [
        {
          "name": "build_parameters",
          "schema": "object",
          "description": ""
        },
        {
          "name": "parallel",
          "schema": "string",
          "description": ""
        },
        {
          "name": "revision",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/project/{username}/{project}/{build_num}",
      "method": "/project/{username}/{project}/{buildNum}Get",
      "httpMethod": "get",
      "description": "Full details for a single build. The response includes all of the fields from the build summary.\nThis is also the payload for the [notification webhooks](/docs/configuration/#notify), in which case this object is the value to a key named 'payload'.\n",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "previous build"
        }
      ]
    },
    {
      "url": "/project/{username}/{project}/{build_num}/artifacts",
      "method": "/project/{username}/{project}/{buildNum}/artifactsGet",
      "httpMethod": "get",
      "description": "List the artifacts produced by a given build.\n",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/project/{username}/{project}/{build_num}/cancel",
      "method": "/project/{username}/{project}/{buildNum}/cancelPost",
      "httpMethod": "post",
      "description": "Cancels the build, returns a summary of the build.\n",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/project/{username}/{project}/{build_num}/retry",
      "method": "/project/{username}/{project}/{buildNum}/retryPost",
      "httpMethod": "post",
      "description": "Retries the build, returns a summary of the new build.\n",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/project/{username}/{project}/{build_num}/tests",
      "method": "/project/{username}/{project}/{buildNum}/testsGet",
      "httpMethod": "get",
      "description": "Provides test metadata for a build\nNote: [Learn how to set up your builds to collect test metadata](https://circleci.com/docs/test-metadata/)\n",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects",
      "method": "/projectsGet",
      "httpMethod": "get",
      "description": "List of all the projects you're following on CircleCI, with build information organized by branch.\n",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/recent-builds",
      "method": "/recentBuildsGet",
      "httpMethod": "get",
      "description": "Build summary for each of the last 30 recent builds, ordered by build_num.\n",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The number of builds to return. Maximum 100, defaults to 30.\n"
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The API returns builds starting from this offset, defaults to 0.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/heroku-key",
      "method": "/user/herokuKeyPost",
      "httpMethod": "post",
      "description": "Adds your Heroku API key to CircleCI, takes apikey as form param name.\n",
      "parameters": [],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://circleci.com/api/v1",
  "apiDescription": "The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI.\nYou can access all information and trigger all actions.\nThe only thing we don’t provide access to is billing functions, which must be done from the CircleCI web UI.\n",
  "apiTitle": "CircleCI REST API",
  "endpoints": 17,
  "sdkMethods": 35,
  "schemas": 28,
  "parameters": 15,
  "difficultyScore": 52.75,
  "difficulty": "Easy"
}