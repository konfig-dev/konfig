{
  "providerName": "listennotes.com",
  "openApiRaw": "https://listen-api.listennotes.com/api/v2/openapi.yaml",
  "homepage": "listennotes.com",
  "apiVersion": "2.0",
  "methods": [
    {
      "url": "/best_podcasts",
      "method": "getBestPodcasts",
      "httpMethod": "get",
      "tag": "Directory API",
      "description": "Fetch a list of best podcasts by genre",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "genre_id",
          "schema": "string",
          "required": false,
          "description": "You can get the id from `GET /genres`. If not specified, it'll be the overall best podcasts, which can be considered as a special genre."
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page number of those podcasts in this genre."
        },
        {
          "name": "region",
          "schema": "string",
          "required": false,
          "description": "Filter best podcasts by country/region.\nPlease note that podcasts that are \"best\" in a country/region may not be produced in that country/region.\nFor example, a podcast from the US may be very popular in Canada.\nYou can get the supported country codes (e.g., us, jp, gb...) from `GET /regions`.\nIf not specified, you'll get \"best podcasts\" in United States.\n"
        },
        {
          "name": "publisher_region",
          "schema": "string",
          "required": false,
          "description": "Filter best podcasts by the publisher's country/region.\nThis is to narrow down the results to include \"best podcasts\" produced in a specific country/region.\nYou can get the supported country codes (e.g., us, jp, gb...) from `GET /regions`.\nIf not specified, you'll get \"best podcasts\" produced in any country/region.\nIf you want to get a country/region's \"best podcasts\" that are also produced in that country/region,\nthen you need to specify both **region** and **publisher_region**,\ne.g., `region=jp` and `publisher_region=jp`.\n"
        },
        {
          "name": "language",
          "schema": "string",
          "required": false,
          "description": "Filter best podcasts by language.\nYou can get a list of supported languages (e.g., English, Chinese, Japanese...) from `GET /languages`.\nIf not specified, you'll get \"best podcasts\" in any language.\n"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "How do you want to sort these podcasts?\nIf you'd like to sort by popularity, please use **listen_score**.\n"
        },
        {
          "name": "safe_mode",
          "schema": "integer",
          "required": false,
          "description": "Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/curated_podcasts",
      "method": "getCuratedPodcasts",
      "httpMethod": "get",
      "tag": "Directory API",
      "description": "Fetch curated lists of podcasts",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page number of curated lists."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/curated_podcasts/{id}",
      "method": "getCuratedPodcastById",
      "httpMethod": "get",
      "tag": "Directory API",
      "description": "Fetch a curated list of podcasts by id",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "id for a specific curated list of podcasts. You can get the id from the response of `GET /search?type=curated` or `GET /curated_podcasts`.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/episodes",
      "method": "getEpisodesInBatch",
      "httpMethod": "post",
      "tag": "Directory API",
      "description": "Batch fetch basic meta data for episodes",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "ids",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/episodes/{id}",
      "method": "getEpisodeById",
      "httpMethod": "get",
      "tag": "Directory API",
      "description": "Fetch detailed meta data for an episode by id",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "id for a specific episode. You can get episode id from using other endpoints, e.g., `GET /search`..."
        },
        {
          "name": "show_transcript",
          "schema": "integer",
          "required": false,
          "description": "To include the transcript of this episode or not? If it is 1, then include the transcript in the **transcript** field. The default value is 0 - we don't include transcript by default, because 1) it would make the response data very big, thus slow response time; 2) less than 1% of episodes have transcripts. The transcript field is available only in the PRO/ENTERPRISE plan."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/episodes/{id}/recommendations",
      "method": "getEpisodeRecommendations",
      "httpMethod": "get",
      "tag": "Directory API",
      "description": "Fetch recommendations for an episode",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Episode id."
        },
        {
          "name": "safe_mode",
          "schema": "integer",
          "required": false,
          "description": "Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/genres",
      "method": "getGenres",
      "httpMethod": "get",
      "tag": "Directory API",
      "description": "Fetch a list of podcast genres",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "top_level_only",
          "schema": "integer",
          "required": false,
          "description": "Just show top level genres? If 1, yes, just show top level genres. If 0, no, show all genres.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/just_listen",
      "method": "justListen",
      "httpMethod": "get",
      "tag": "Directory API",
      "description": "Fetch a random podcast episode",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/languages",
      "method": "getLanguages",
      "httpMethod": "get",
      "tag": "Directory API",
      "description": "Fetch a list of supported languages for podcasts",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/playlists",
      "method": "getPlaylists",
      "httpMethod": "get",
      "tag": "Playlist API",
      "description": "Fetch a list of your playlists.",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "How do you want to sort playlists?\n"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page number of playlists.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/playlists/{id}",
      "method": "getPlaylistById",
      "httpMethod": "get",
      "tag": "Playlist API",
      "description": "Fetch a playlist's info and items (i.e., episodes or podcasts).",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Playlist id (always 11 characters, e.g., m1pe7z60bsw).\nYou can get the podcast id from the url of a playlist, e.g.,\nm1pe7z60bsw is the playlist id of listennotes.com/listen/podcasts-about-podcasting-m1pe7z60bsw\n"
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "The type of this playlist, which should be either **episode_list** or **podcast_list**.\n"
        },
        {
          "name": "last_timestamp_ms",
          "schema": "integer",
          "required": false,
          "description": "For playlist items pagination.\nIt's the value of **last_timestamp_ms** from the response of last request.\nIf it's 0 or not specified, just return the latest or the oldest 20 items,\ndepending on the value of the **sort** parameter.\n"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "How do you want to sort playlist items?\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/podcasts",
      "method": "getPodcastsInBatch",
      "httpMethod": "post",
      "tag": "Directory API",
      "description": "Batch fetch basic meta data for podcasts",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "ids",
          "schema": "string",
          "description": ""
        },
        {
          "name": "itunes_ids",
          "schema": "string",
          "description": ""
        },
        {
          "name": "next_episode_pub_date",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "rsses",
          "schema": "string",
          "description": ""
        },
        {
          "name": "show_latest_episodes",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "spotify_ids",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/podcasts/domains/{domain_name}",
      "method": "getPodcastsByDomainName",
      "httpMethod": "get",
      "tag": "Insights API",
      "description": "Fetch podcasts by a publisher's domain name",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "domain_name",
          "schema": "string",
          "required": true,
          "description": "A publisher's domain name, e.g., nytimes.com, wondery.com, npr.org..."
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page number of the podcasts from this domain name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/podcasts/submit",
      "method": "submitPodcast",
      "httpMethod": "post",
      "tag": "Podcaster API",
      "description": "Submit a podcast to Listen Notes database",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "rss",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/podcasts/{id}",
      "method": "deletePodcastById",
      "httpMethod": "delete",
      "tag": "Podcaster API",
      "description": "Request to delete a podcast",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Podcast id. You can get podcast id from using other endpoints, e.g., `GET /search`, `GET /best_podcasts`..."
        },
        {
          "name": "reason",
          "schema": "string",
          "required": false,
          "description": "The reason why this podcast should be deleted, e.g., copyright violation, the podcaster wants to delete it... You can put \"testing\" here to indicate that you are testing this endpoint, so we will not actually delete the podcast."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/podcasts/{id}",
      "method": "getPodcastById",
      "httpMethod": "get",
      "tag": "Directory API",
      "description": "Fetch detailed meta data and episodes for a podcast by id",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Podcast id. You can get podcast id from using other endpoints, e.g., `GET /search`, `GET /best_podcasts`..."
        },
        {
          "name": "next_episode_pub_date",
          "schema": "integer",
          "required": false,
          "description": "For episodes pagination. It's the value of **next_episode_pub_date** from the response of last request. If not specified, just return latest 10 episodes or oldest 10 episodes, depending on the value of the **sort** parameter.\n"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "How do you want to sort the episodes of this podcast?\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/podcasts/{id}/audience",
      "method": "getPodcastAudience",
      "httpMethod": "get",
      "tag": "Insights API",
      "description": "Fetch audience demographics for a podcast",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Podcast id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/podcasts/{id}/recommendations",
      "method": "getPodcastRecommendations",
      "httpMethod": "get",
      "tag": "Directory API",
      "description": "Fetch recommendations for a podcast",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Podcast id."
        },
        {
          "name": "safe_mode",
          "schema": "integer",
          "required": false,
          "description": "Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/regions",
      "method": "getRegions",
      "httpMethod": "get",
      "tag": "Directory API",
      "description": "Fetch a list of supported countries/regions for best podcasts",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/related_searches",
      "method": "getRelatedSearches",
      "httpMethod": "get",
      "tag": "Search API",
      "description": "Fetch related search terms",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "q",
          "schema": "string",
          "required": true,
          "description": "Search term, e.g., person, place, topic...\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/search",
      "method": "search",
      "httpMethod": "get",
      "tag": "Search API",
      "description": "Full-text search",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "q",
          "schema": "string",
          "required": true,
          "description": "Search term, e.g., person, place, topic... You can use double quotes to do verbatim match, e.g., \"game of thrones\". Otherwise, it's fuzzy search.\n"
        },
        {
          "name": "sort_by_date",
          "schema": "integer",
          "required": false,
          "description": "Sort by date or not? If 0, then sort by relevance. If 1, then sort by date.\n"
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "What type of contents do you want to search for? \n"
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Offset for search results, for pagination. You'll use **next_offset** from response for this parameter.\n"
        },
        {
          "name": "len_min",
          "schema": "integer",
          "required": false,
          "description": "Minimum audio length in minutes. Applicable only when **type** parameter is **episode** or **podcast**.\nIf **type** parameter is **episode**, it's for audio length of an episode.\nIf **type** parameter is **podcast**, it's for average audio length of all episodes in a podcast.\n"
        },
        {
          "name": "len_max",
          "schema": "integer",
          "required": false,
          "description": "Maximum audio length in minutes. Applicable only when **type** parameter is **episode** or **podcast**.\nIf **type** parameter is **episode**, it's for audio length of an episode.\nIf **type** parameter is **podcast**, it's for average audio length of all episodes in a podcast.\n"
        },
        {
          "name": "episode_count_min",
          "schema": "integer",
          "required": false,
          "description": "Minimum number of episodes. Applicable only when type parameter is **podcast**.\n"
        },
        {
          "name": "episode_count_max",
          "schema": "integer",
          "required": false,
          "description": "Maximum number of episodes. Applicable only when type parameter is **podcast**.\n"
        },
        {
          "name": "update_freq_min",
          "schema": "integer",
          "required": false,
          "description": "Minimum update frequency in hours (how frequently does a podcast release a new episode). For example, if you want to find \"weekly\" podcasts, then you can set **update_freq_min**=144 hours (or 6 days) and **update_freq_max**=192 hours (or 8 days). Applicable only when type parameter is **podcast**.\n"
        },
        {
          "name": "update_freq_max",
          "schema": "integer",
          "required": false,
          "description": "Maximum update frequency in hours (how frequently does a podcast release a new episode). For example, if you want to find \"weekly\" podcasts, then you can set **update_freq_min**=144 hours (or 6 days) and **update_freq_max**=192 hours (or 8 days). Applicable only when type parameter is **podcast**.\n"
        },
        {
          "name": "genre_ids",
          "schema": "string",
          "required": false,
          "description": "A comma-delimited string of a list of genre ids. If not specified, then all genres are included. You can find the id and the name of all genres from `GET /genres`. It works only when **type** is *episode* or *podcast*.\n"
        },
        {
          "name": "published_before",
          "schema": "integer",
          "required": false,
          "description": "Only show episodes/podcasts/curated lists published before this timestamp (in milliseconds). If **published_before** & **published_after** are used at the same time, **published_before** should be bigger than **published_after**.\n"
        },
        {
          "name": "published_after",
          "schema": "integer",
          "required": false,
          "description": "Only show episodes/podcasts/curated lists published after this timestamp (in milliseconds). If **published_before** & **published_after** are used at the same time, **published_before** should be bigger than **published_after**.\n"
        },
        {
          "name": "only_in",
          "schema": "string",
          "required": false,
          "description": "A comma-delimited string to search only in specific fields. Allowed values are title, description, author, and audio. If not specified, then search every fields.\n"
        },
        {
          "name": "language",
          "schema": "string",
          "required": false,
          "description": "Limit search results to a specific language. If not specified, it'll be any language. You can get a list of supported languages from `GET /languages`. It works only when **type** is *episode* or *podcast*.\n"
        },
        {
          "name": "region",
          "schema": "string",
          "required": false,
          "description": "Limit search results to a specific region (e.g., us, gb, in...). If not specified, it'll be any region. You can get the supported country codes from `GET /regions`. It works only when **type** is *episode* or *podcast*.\n"
        },
        {
          "name": "ocid",
          "schema": "string",
          "required": false,
          "description": "A comma-delimited string of podcast ids (up to 5 podcasts) - you can get a podcast id from the **podcast_id** field in response. This parameter is to limit search results from only a few specific podcasts. It works only when **type** is *episode*.\n"
        },
        {
          "name": "ncid",
          "schema": "string",
          "required": false,
          "description": "A comma-delimited string of podcast ids (up to 5 podcasts) - you can get a podcast id from the **podcast_id** field in response. This parameter is to exclude search results of a few specific podcasts. It works only when **type** is *episode*.\n"
        },
        {
          "name": "safe_mode",
          "schema": "integer",
          "required": false,
          "description": "Whether or not to exclude podcasts/episodes with explicit language. 1 is yes and 0 is no. It works only when **type** is *episode* or *podcast*.\n"
        },
        {
          "name": "unique_podcasts",
          "schema": "integer",
          "required": false,
          "description": "Whether or not to keep only one episode per podcast in search results. 1 is yes and 0 is no. It works only when **type** is *episode*.\n"
        },
        {
          "name": "page_size",
          "schema": "integer",
          "required": false,
          "description": "The maximum number of search results per page. A valid value should be an integer between 1 and 10 (inclusive).\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/spellcheck",
      "method": "spellcheck",
      "httpMethod": "get",
      "tag": "Search API",
      "description": "Spell check on a search term",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "q",
          "schema": "string",
          "required": true,
          "description": "Search term, e.g., person, place, topic...\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/trending_searches",
      "method": "getTrendingSearches",
      "httpMethod": "get",
      "tag": "Search API",
      "description": "Fetch trending search terms",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/typeahead",
      "method": "typeahead",
      "httpMethod": "get",
      "tag": "Search API",
      "description": "Typeahead search",
      "parameters": [
        {
          "name": "X-ListenAPI-Key",
          "schema": "string",
          "required": true,
          "description": "Get API Key on listennotes.com/api"
        },
        {
          "name": "q",
          "schema": "string",
          "required": true,
          "description": "Search term, e.g., person, place, topic... You can use double quotes to do verbatim match, e.g., \"game of thrones\". Otherwise, it's fuzzy search.\n"
        },
        {
          "name": "show_podcasts",
          "schema": "integer",
          "required": false,
          "description": "Autosuggest podcasts. This only searches podcast title and publisher and returns very limited info of 5 podcasts. 1 is yes, 0 is no. It's a bit slow to autosuggest podcasts, so we turn it off by default. If show_podcasts=1, you can also pass iTunes id (e.g., 474722933) to the q parameter to fetch podcast meta data.\n"
        },
        {
          "name": "show_genres",
          "schema": "integer",
          "required": false,
          "description": "Whether or not to autosuggest genres. 1 is yes, 0 is no.\n"
        },
        {
          "name": "safe_mode",
          "schema": "integer",
          "required": false,
          "description": "Whether or not to exclude podcasts/episodes with explicit language. 1 is yes and 0 is no. It works only when **show_podcasts** is *1*.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://listen-api.listennotes.com/api/v2",
  "apiDescription": "Simple & no-nonsense podcast search & directory API. Search all podcasts and episodes by people, places, or topics.\n",
  "apiTitle": "Listen API: Podcast Search, Directory, and Insights API",
  "endpoints": 23,
  "sdkMethods": 24,
  "schemas": 102,
  "parameters": 90,
  "contactUrl": "https://www.listennotes.com/api/",
  "contactEmail": "hello@listennotes.com",
  "difficultyScore": 97.5,
  "difficulty": "Medium"
}