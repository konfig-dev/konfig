{
  "providerName": "jellyfin.local",
  "openApiRaw": "https://repo.jellyfin.org/releases/openapi/stable/jellyfin-openapi-10.7.0-rc2.json",
  "securitySchemes": {
    "CustomAuthentication": {
      "description": "API key header parameter",
      "in": "header",
      "name": "X-Emby-Authorization",
      "type": "apiKey"
    }
  },
  "homepage": "jellyfin.local",
  "apiVersion": "v1",
  "methods": [
    {
      "url": "/Albums/{id}/InstantMix",
      "method": "getInstantMixFromAlbum",
      "httpMethod": "get",
      "tag": "InstantMix",
      "description": "Creates an instant playlist based on a given song.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional. Include image information in output."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. Include user data."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. The max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Albums/{itemId}/Similar",
      "method": "getSimilarAlbums",
      "httpMethod": "get",
      "tag": "Library",
      "description": "Gets similar items.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "excludeArtistIds",
          "schema": "array",
          "description": "Exclude artist ids."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Artists",
      "method": "getArtists",
      "httpMethod": "get",
      "tag": "Artists",
      "description": "Gets all artists from a given item, folder, or the entire library.",
      "parameters": [
        {
          "name": "minCommunityRating",
          "schema": "number",
          "description": "Optional filter by minimum community rating."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "searchTerm",
          "schema": "string",
          "description": "Optional. Search term."
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": "Specify this to localize the search to a specific item or folder. Omit to use the root."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "excludeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited."
        },
        {
          "name": "includeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited."
        },
        {
          "name": "filters",
          "schema": "array",
          "description": "Optional. Specify additional filters to apply."
        },
        {
          "name": "isFavorite",
          "schema": "boolean",
          "description": "Optional filter by items that are marked as favorite, or not."
        },
        {
          "name": "mediaTypes",
          "schema": "array",
          "description": "Optional filter by MediaType. Allows multiple, comma delimited."
        },
        {
          "name": "genres",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited."
        },
        {
          "name": "genreIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited."
        },
        {
          "name": "officialRatings",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited."
        },
        {
          "name": "tags",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited."
        },
        {
          "name": "years",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional, include user data."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional, the max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "person",
          "schema": "string",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified person."
        },
        {
          "name": "personIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified person ids."
        },
        {
          "name": "personTypes",
          "schema": "array",
          "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited."
        },
        {
          "name": "studios",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited."
        },
        {
          "name": "studioIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "User id."
        },
        {
          "name": "nameStartsWithOrGreater",
          "schema": "string",
          "description": "Optional filter by items whose name is sorted equally or greater than a given input string."
        },
        {
          "name": "nameStartsWith",
          "schema": "string",
          "description": "Optional filter by items whose name is sorted equally than a given input string."
        },
        {
          "name": "nameLessThan",
          "schema": "string",
          "description": "Optional filter by items whose name is equally or lesser than a given input string."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional, include image information in output."
        },
        {
          "name": "enableTotalRecordCount",
          "schema": "boolean",
          "description": "Total record count."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Artists/AlbumArtists",
      "method": "getAlbumArtists",
      "httpMethod": "get",
      "tag": "Artists",
      "description": "Gets all album artists from a given item, folder, or the entire library.",
      "parameters": [
        {
          "name": "minCommunityRating",
          "schema": "number",
          "description": "Optional filter by minimum community rating."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "searchTerm",
          "schema": "string",
          "description": "Optional. Search term."
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": "Specify this to localize the search to a specific item or folder. Omit to use the root."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "excludeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited."
        },
        {
          "name": "includeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited."
        },
        {
          "name": "filters",
          "schema": "array",
          "description": "Optional. Specify additional filters to apply."
        },
        {
          "name": "isFavorite",
          "schema": "boolean",
          "description": "Optional filter by items that are marked as favorite, or not."
        },
        {
          "name": "mediaTypes",
          "schema": "array",
          "description": "Optional filter by MediaType. Allows multiple, comma delimited."
        },
        {
          "name": "genres",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited."
        },
        {
          "name": "genreIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited."
        },
        {
          "name": "officialRatings",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited."
        },
        {
          "name": "tags",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited."
        },
        {
          "name": "years",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional, include user data."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional, the max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "person",
          "schema": "string",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified person."
        },
        {
          "name": "personIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified person ids."
        },
        {
          "name": "personTypes",
          "schema": "array",
          "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited."
        },
        {
          "name": "studios",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited."
        },
        {
          "name": "studioIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "User id."
        },
        {
          "name": "nameStartsWithOrGreater",
          "schema": "string",
          "description": "Optional filter by items whose name is sorted equally or greater than a given input string."
        },
        {
          "name": "nameStartsWith",
          "schema": "string",
          "description": "Optional filter by items whose name is sorted equally than a given input string."
        },
        {
          "name": "nameLessThan",
          "schema": "string",
          "description": "Optional filter by items whose name is equally or lesser than a given input string."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional, include image information in output."
        },
        {
          "name": "enableTotalRecordCount",
          "schema": "boolean",
          "description": "Total record count."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Artists/{id}/InstantMix",
      "method": "getInstantMixFromArtists",
      "httpMethod": "get",
      "tag": "InstantMix",
      "description": "Creates an instant playlist based on a given song.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional. Include image information in output."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. Include user data."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. The max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Artists/{itemId}/Similar",
      "method": "getSimilarArtists",
      "httpMethod": "get",
      "tag": "Library",
      "description": "Gets similar items.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "excludeArtistIds",
          "schema": "array",
          "description": "Exclude artist ids."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Artists/{name}",
      "method": "getArtistByName",
      "httpMethod": "get",
      "tag": "Artists",
      "description": "Gets an artist by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Studio name."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is strictly used as a data transfer object from the api layer.\r\nThis holds information about a BaseItem in a format that is convenient for the client."
        }
      ]
    },
    {
      "url": "/Artists/{name}/Images/{imageType}/{imageIndex}",
      "method": "getArtistImage",
      "httpMethod": "get",
      "tag": "Image",
      "description": "Get artist image by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Artist name."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Artists/{name}/Images/{imageType}/{imageIndex}",
      "method": "headArtistImage",
      "httpMethod": "head",
      "tag": "Image",
      "description": "Get artist image by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Artist name."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Audio/{itemId}/hls/{segmentId}/stream.aac",
      "method": "getHlsAudioSegmentLegacyAac",
      "httpMethod": "get",
      "tag": "HlsSegment",
      "description": "Gets the specified audio segment for an audio item.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "segmentId",
          "schema": "string",
          "required": true,
          "description": "The segment id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Audio/{itemId}/hls/{segmentId}/stream.mp3",
      "method": "getHlsAudioSegmentLegacyMp3",
      "httpMethod": "get",
      "tag": "HlsSegment",
      "description": "Gets the specified audio segment for an audio item.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "segmentId",
          "schema": "string",
          "required": true,
          "description": "The segment id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Audio/{itemId}/hls1/{playlistId}/{segmentId}.{container}",
      "method": "getHlsAudioSegment",
      "httpMethod": "get",
      "tag": "DynamicHls",
      "description": "Gets a video stream using HTTP live streaming.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "playlistId",
          "schema": "string",
          "required": true,
          "description": "The playlist id."
        },
        {
          "name": "segmentId",
          "schema": "integer",
          "required": true,
          "description": "The segment id."
        },
        {
          "name": "container",
          "schema": "string",
          "required": true,
          "description": "The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv."
        },
        {
          "name": "static",
          "schema": "boolean",
          "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false."
        },
        {
          "name": "params",
          "schema": "string",
          "description": "The streaming parameters."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The tag."
        },
        {
          "name": "deviceProfileId",
          "schema": "string",
          "description": "Optional. The dlna device profile id to utilize."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "segmentContainer",
          "schema": "string",
          "description": "The segment container."
        },
        {
          "name": "segmentLength",
          "schema": "integer",
          "description": "The segment length."
        },
        {
          "name": "minSegments",
          "schema": "integer",
          "description": "The minimum number of segments."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma."
        },
        {
          "name": "enableAutoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true."
        },
        {
          "name": "allowVideoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the video stream url."
        },
        {
          "name": "allowAudioStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the audio stream url."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "audioSampleRate",
          "schema": "integer",
          "description": "Optional. Specify a specific audio sample rate, e.g. 44100."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "maxStreamingBitrate",
          "schema": "integer",
          "description": "Optional. The maximum streaming bitrate."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "audioChannels",
          "schema": "integer",
          "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "profile",
          "schema": "string",
          "description": "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high."
        },
        {
          "name": "level",
          "schema": "string",
          "description": "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1."
        },
        {
          "name": "framerate",
          "schema": "number",
          "description": "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "maxFramerate",
          "schema": "number",
          "description": "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "Optional. The fixed horizontal resolution of the encoded video."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "Optional. The fixed vertical resolution of the encoded video."
        },
        {
          "name": "videoBitRate",
          "schema": "integer",
          "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used."
        },
        {
          "name": "subtitleMethod",
          "schema": "string",
          "description": "Optional. Specify the subtitle delivery method."
        },
        {
          "name": "maxRefFrames",
          "schema": "integer",
          "description": "Optional."
        },
        {
          "name": "maxVideoBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum video bit depth."
        },
        {
          "name": "requireAvc",
          "schema": "boolean",
          "description": "Optional. Whether to require avc."
        },
        {
          "name": "deInterlace",
          "schema": "boolean",
          "description": "Optional. Whether to deinterlace the video."
        },
        {
          "name": "requireNonAnamorphic",
          "schema": "boolean",
          "description": "Optional. Whether to require a non anamorphic stream."
        },
        {
          "name": "transcodingMaxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels to transcode."
        },
        {
          "name": "cpuCoreLimit",
          "schema": "integer",
          "description": "Optional. The limit of how many cpu cores to use."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "enableMpegtsM2TsMode",
          "schema": "boolean",
          "description": "Optional. Whether to enable the MpegtsM2Ts mode."
        },
        {
          "name": "videoCodec",
          "schema": "string",
          "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv."
        },
        {
          "name": "subtitleCodec",
          "schema": "string",
          "description": "Optional. Specify a subtitle codec to encode to."
        },
        {
          "name": "transcodeReasons",
          "schema": "string",
          "description": "Optional. The transcoding reason."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used."
        },
        {
          "name": "videoStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used."
        },
        {
          "name": "context",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Dlna.EncodingContext."
        },
        {
          "name": "streamOptions",
          "schema": "object",
          "description": "Optional. The streaming options."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Audio/{itemId}/main.m3u8",
      "method": "getVariantHlsAudioPlaylist",
      "httpMethod": "get",
      "tag": "DynamicHls",
      "description": "Gets an audio stream using HTTP live streaming.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "static",
          "schema": "boolean",
          "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false."
        },
        {
          "name": "params",
          "schema": "string",
          "description": "The streaming parameters."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The tag."
        },
        {
          "name": "deviceProfileId",
          "schema": "string",
          "description": "Optional. The dlna device profile id to utilize."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "segmentContainer",
          "schema": "string",
          "description": "The segment container."
        },
        {
          "name": "segmentLength",
          "schema": "integer",
          "description": "The segment length."
        },
        {
          "name": "minSegments",
          "schema": "integer",
          "description": "The minimum number of segments."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma."
        },
        {
          "name": "enableAutoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true."
        },
        {
          "name": "allowVideoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the video stream url."
        },
        {
          "name": "allowAudioStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the audio stream url."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "audioSampleRate",
          "schema": "integer",
          "description": "Optional. Specify a specific audio sample rate, e.g. 44100."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "maxStreamingBitrate",
          "schema": "integer",
          "description": "Optional. The maximum streaming bitrate."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "audioChannels",
          "schema": "integer",
          "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "profile",
          "schema": "string",
          "description": "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high."
        },
        {
          "name": "level",
          "schema": "string",
          "description": "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1."
        },
        {
          "name": "framerate",
          "schema": "number",
          "description": "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "maxFramerate",
          "schema": "number",
          "description": "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "Optional. The fixed horizontal resolution of the encoded video."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "Optional. The fixed vertical resolution of the encoded video."
        },
        {
          "name": "videoBitRate",
          "schema": "integer",
          "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used."
        },
        {
          "name": "subtitleMethod",
          "schema": "string",
          "description": "Optional. Specify the subtitle delivery method."
        },
        {
          "name": "maxRefFrames",
          "schema": "integer",
          "description": "Optional."
        },
        {
          "name": "maxVideoBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum video bit depth."
        },
        {
          "name": "requireAvc",
          "schema": "boolean",
          "description": "Optional. Whether to require avc."
        },
        {
          "name": "deInterlace",
          "schema": "boolean",
          "description": "Optional. Whether to deinterlace the video."
        },
        {
          "name": "requireNonAnamorphic",
          "schema": "boolean",
          "description": "Optional. Whether to require a non anamorphic stream."
        },
        {
          "name": "transcodingMaxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels to transcode."
        },
        {
          "name": "cpuCoreLimit",
          "schema": "integer",
          "description": "Optional. The limit of how many cpu cores to use."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "enableMpegtsM2TsMode",
          "schema": "boolean",
          "description": "Optional. Whether to enable the MpegtsM2Ts mode."
        },
        {
          "name": "videoCodec",
          "schema": "string",
          "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv."
        },
        {
          "name": "subtitleCodec",
          "schema": "string",
          "description": "Optional. Specify a subtitle codec to encode to."
        },
        {
          "name": "transcodeReasons",
          "schema": "string",
          "description": "Optional. The transcoding reason."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used."
        },
        {
          "name": "videoStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used."
        },
        {
          "name": "context",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Dlna.EncodingContext."
        },
        {
          "name": "streamOptions",
          "schema": "object",
          "description": "Optional. The streaming options."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Audio/{itemId}/master.m3u8",
      "method": "getMasterHlsAudioPlaylist",
      "httpMethod": "get",
      "tag": "DynamicHls",
      "description": "Gets an audio hls playlist stream.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "static",
          "schema": "boolean",
          "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false."
        },
        {
          "name": "params",
          "schema": "string",
          "description": "The streaming parameters."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The tag."
        },
        {
          "name": "deviceProfileId",
          "schema": "string",
          "description": "Optional. The dlna device profile id to utilize."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "segmentContainer",
          "schema": "string",
          "description": "The segment container."
        },
        {
          "name": "segmentLength",
          "schema": "integer",
          "description": "The segment length."
        },
        {
          "name": "minSegments",
          "schema": "integer",
          "description": "The minimum number of segments."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "required": true,
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma."
        },
        {
          "name": "enableAutoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true."
        },
        {
          "name": "allowVideoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the video stream url."
        },
        {
          "name": "allowAudioStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the audio stream url."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "audioSampleRate",
          "schema": "integer",
          "description": "Optional. Specify a specific audio sample rate, e.g. 44100."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "maxStreamingBitrate",
          "schema": "integer",
          "description": "Optional. The maximum streaming bitrate."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "audioChannels",
          "schema": "integer",
          "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "profile",
          "schema": "string",
          "description": "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high."
        },
        {
          "name": "level",
          "schema": "string",
          "description": "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1."
        },
        {
          "name": "framerate",
          "schema": "number",
          "description": "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "maxFramerate",
          "schema": "number",
          "description": "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "Optional. The fixed horizontal resolution of the encoded video."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "Optional. The fixed vertical resolution of the encoded video."
        },
        {
          "name": "videoBitRate",
          "schema": "integer",
          "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used."
        },
        {
          "name": "subtitleMethod",
          "schema": "string",
          "description": "Optional. Specify the subtitle delivery method."
        },
        {
          "name": "maxRefFrames",
          "schema": "integer",
          "description": "Optional."
        },
        {
          "name": "maxVideoBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum video bit depth."
        },
        {
          "name": "requireAvc",
          "schema": "boolean",
          "description": "Optional. Whether to require avc."
        },
        {
          "name": "deInterlace",
          "schema": "boolean",
          "description": "Optional. Whether to deinterlace the video."
        },
        {
          "name": "requireNonAnamorphic",
          "schema": "boolean",
          "description": "Optional. Whether to require a non anamorphic stream."
        },
        {
          "name": "transcodingMaxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels to transcode."
        },
        {
          "name": "cpuCoreLimit",
          "schema": "integer",
          "description": "Optional. The limit of how many cpu cores to use."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "enableMpegtsM2TsMode",
          "schema": "boolean",
          "description": "Optional. Whether to enable the MpegtsM2Ts mode."
        },
        {
          "name": "videoCodec",
          "schema": "string",
          "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv."
        },
        {
          "name": "subtitleCodec",
          "schema": "string",
          "description": "Optional. Specify a subtitle codec to encode to."
        },
        {
          "name": "transcodeReasons",
          "schema": "string",
          "description": "Optional. The transcoding reason."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used."
        },
        {
          "name": "videoStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used."
        },
        {
          "name": "context",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Dlna.EncodingContext."
        },
        {
          "name": "streamOptions",
          "schema": "object",
          "description": "Optional. The streaming options."
        },
        {
          "name": "enableAdaptiveBitrateStreaming",
          "schema": "boolean",
          "description": "Enable adaptive bitrate streaming."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Audio/{itemId}/master.m3u8",
      "method": "headMasterHlsAudioPlaylist",
      "httpMethod": "head",
      "tag": "DynamicHls",
      "description": "Gets an audio hls playlist stream.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "static",
          "schema": "boolean",
          "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false."
        },
        {
          "name": "params",
          "schema": "string",
          "description": "The streaming parameters."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The tag."
        },
        {
          "name": "deviceProfileId",
          "schema": "string",
          "description": "Optional. The dlna device profile id to utilize."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "segmentContainer",
          "schema": "string",
          "description": "The segment container."
        },
        {
          "name": "segmentLength",
          "schema": "integer",
          "description": "The segment length."
        },
        {
          "name": "minSegments",
          "schema": "integer",
          "description": "The minimum number of segments."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "required": true,
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma."
        },
        {
          "name": "enableAutoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true."
        },
        {
          "name": "allowVideoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the video stream url."
        },
        {
          "name": "allowAudioStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the audio stream url."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "audioSampleRate",
          "schema": "integer",
          "description": "Optional. Specify a specific audio sample rate, e.g. 44100."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "maxStreamingBitrate",
          "schema": "integer",
          "description": "Optional. The maximum streaming bitrate."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "audioChannels",
          "schema": "integer",
          "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "profile",
          "schema": "string",
          "description": "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high."
        },
        {
          "name": "level",
          "schema": "string",
          "description": "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1."
        },
        {
          "name": "framerate",
          "schema": "number",
          "description": "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "maxFramerate",
          "schema": "number",
          "description": "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "Optional. The fixed horizontal resolution of the encoded video."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "Optional. The fixed vertical resolution of the encoded video."
        },
        {
          "name": "videoBitRate",
          "schema": "integer",
          "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used."
        },
        {
          "name": "subtitleMethod",
          "schema": "string",
          "description": "Optional. Specify the subtitle delivery method."
        },
        {
          "name": "maxRefFrames",
          "schema": "integer",
          "description": "Optional."
        },
        {
          "name": "maxVideoBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum video bit depth."
        },
        {
          "name": "requireAvc",
          "schema": "boolean",
          "description": "Optional. Whether to require avc."
        },
        {
          "name": "deInterlace",
          "schema": "boolean",
          "description": "Optional. Whether to deinterlace the video."
        },
        {
          "name": "requireNonAnamorphic",
          "schema": "boolean",
          "description": "Optional. Whether to require a non anamorphic stream."
        },
        {
          "name": "transcodingMaxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels to transcode."
        },
        {
          "name": "cpuCoreLimit",
          "schema": "integer",
          "description": "Optional. The limit of how many cpu cores to use."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "enableMpegtsM2TsMode",
          "schema": "boolean",
          "description": "Optional. Whether to enable the MpegtsM2Ts mode."
        },
        {
          "name": "videoCodec",
          "schema": "string",
          "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv."
        },
        {
          "name": "subtitleCodec",
          "schema": "string",
          "description": "Optional. Specify a subtitle codec to encode to."
        },
        {
          "name": "transcodeReasons",
          "schema": "string",
          "description": "Optional. The transcoding reason."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used."
        },
        {
          "name": "videoStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used."
        },
        {
          "name": "context",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Dlna.EncodingContext."
        },
        {
          "name": "streamOptions",
          "schema": "object",
          "description": "Optional. The streaming options."
        },
        {
          "name": "enableAdaptiveBitrateStreaming",
          "schema": "boolean",
          "description": "Enable adaptive bitrate streaming."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Audio/{itemId}/stream",
      "method": "getAudioStream",
      "httpMethod": "get",
      "tag": "Audio",
      "description": "Gets an audio stream.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "container",
          "schema": "string",
          "description": "The audio container."
        },
        {
          "name": "static",
          "schema": "boolean",
          "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false."
        },
        {
          "name": "params",
          "schema": "string",
          "description": "The streaming parameters."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The tag."
        },
        {
          "name": "deviceProfileId",
          "schema": "string",
          "description": "Optional. The dlna device profile id to utilize."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "segmentContainer",
          "schema": "string",
          "description": "The segment container."
        },
        {
          "name": "segmentLength",
          "schema": "integer",
          "description": "The segment length."
        },
        {
          "name": "minSegments",
          "schema": "integer",
          "description": "The minimum number of segments."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma."
        },
        {
          "name": "enableAutoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true."
        },
        {
          "name": "allowVideoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the video stream url."
        },
        {
          "name": "allowAudioStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the audio stream url."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "audioSampleRate",
          "schema": "integer",
          "description": "Optional. Specify a specific audio sample rate, e.g. 44100."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "audioChannels",
          "schema": "integer",
          "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "profile",
          "schema": "string",
          "description": "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high."
        },
        {
          "name": "level",
          "schema": "string",
          "description": "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1."
        },
        {
          "name": "framerate",
          "schema": "number",
          "description": "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "maxFramerate",
          "schema": "number",
          "description": "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "Optional. The fixed horizontal resolution of the encoded video."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "Optional. The fixed vertical resolution of the encoded video."
        },
        {
          "name": "videoBitRate",
          "schema": "integer",
          "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used."
        },
        {
          "name": "subtitleMethod",
          "schema": "string",
          "description": "Optional. Specify the subtitle delivery method."
        },
        {
          "name": "maxRefFrames",
          "schema": "integer",
          "description": "Optional."
        },
        {
          "name": "maxVideoBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum video bit depth."
        },
        {
          "name": "requireAvc",
          "schema": "boolean",
          "description": "Optional. Whether to require avc."
        },
        {
          "name": "deInterlace",
          "schema": "boolean",
          "description": "Optional. Whether to deinterlace the video."
        },
        {
          "name": "requireNonAnamorphic",
          "schema": "boolean",
          "description": "Optional. Whether to require a non anamorphic stream."
        },
        {
          "name": "transcodingMaxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels to transcode."
        },
        {
          "name": "cpuCoreLimit",
          "schema": "integer",
          "description": "Optional. The limit of how many cpu cores to use."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "enableMpegtsM2TsMode",
          "schema": "boolean",
          "description": "Optional. Whether to enable the MpegtsM2Ts mode."
        },
        {
          "name": "videoCodec",
          "schema": "string",
          "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv."
        },
        {
          "name": "subtitleCodec",
          "schema": "string",
          "description": "Optional. Specify a subtitle codec to encode to."
        },
        {
          "name": "transcodeReasons",
          "schema": "string",
          "description": "Optional. The transcoding reason."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used."
        },
        {
          "name": "videoStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used."
        },
        {
          "name": "context",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Dlna.EncodingContext."
        },
        {
          "name": "streamOptions",
          "schema": "object",
          "description": "Optional. The streaming options."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Audio/{itemId}/stream",
      "method": "headAudioStream",
      "httpMethod": "head",
      "tag": "Audio",
      "description": "Gets an audio stream.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "container",
          "schema": "string",
          "description": "The audio container."
        },
        {
          "name": "static",
          "schema": "boolean",
          "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false."
        },
        {
          "name": "params",
          "schema": "string",
          "description": "The streaming parameters."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The tag."
        },
        {
          "name": "deviceProfileId",
          "schema": "string",
          "description": "Optional. The dlna device profile id to utilize."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "segmentContainer",
          "schema": "string",
          "description": "The segment container."
        },
        {
          "name": "segmentLength",
          "schema": "integer",
          "description": "The segment length."
        },
        {
          "name": "minSegments",
          "schema": "integer",
          "description": "The minimum number of segments."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma."
        },
        {
          "name": "enableAutoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true."
        },
        {
          "name": "allowVideoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the video stream url."
        },
        {
          "name": "allowAudioStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the audio stream url."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "audioSampleRate",
          "schema": "integer",
          "description": "Optional. Specify a specific audio sample rate, e.g. 44100."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "audioChannels",
          "schema": "integer",
          "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "profile",
          "schema": "string",
          "description": "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high."
        },
        {
          "name": "level",
          "schema": "string",
          "description": "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1."
        },
        {
          "name": "framerate",
          "schema": "number",
          "description": "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "maxFramerate",
          "schema": "number",
          "description": "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "Optional. The fixed horizontal resolution of the encoded video."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "Optional. The fixed vertical resolution of the encoded video."
        },
        {
          "name": "videoBitRate",
          "schema": "integer",
          "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used."
        },
        {
          "name": "subtitleMethod",
          "schema": "string",
          "description": "Optional. Specify the subtitle delivery method."
        },
        {
          "name": "maxRefFrames",
          "schema": "integer",
          "description": "Optional."
        },
        {
          "name": "maxVideoBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum video bit depth."
        },
        {
          "name": "requireAvc",
          "schema": "boolean",
          "description": "Optional. Whether to require avc."
        },
        {
          "name": "deInterlace",
          "schema": "boolean",
          "description": "Optional. Whether to deinterlace the video."
        },
        {
          "name": "requireNonAnamorphic",
          "schema": "boolean",
          "description": "Optional. Whether to require a non anamorphic stream."
        },
        {
          "name": "transcodingMaxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels to transcode."
        },
        {
          "name": "cpuCoreLimit",
          "schema": "integer",
          "description": "Optional. The limit of how many cpu cores to use."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "enableMpegtsM2TsMode",
          "schema": "boolean",
          "description": "Optional. Whether to enable the MpegtsM2Ts mode."
        },
        {
          "name": "videoCodec",
          "schema": "string",
          "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv."
        },
        {
          "name": "subtitleCodec",
          "schema": "string",
          "description": "Optional. Specify a subtitle codec to encode to."
        },
        {
          "name": "transcodeReasons",
          "schema": "string",
          "description": "Optional. The transcoding reason."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used."
        },
        {
          "name": "videoStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used."
        },
        {
          "name": "context",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Dlna.EncodingContext."
        },
        {
          "name": "streamOptions",
          "schema": "object",
          "description": "Optional. The streaming options."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Audio/{itemId}/stream.{container}",
      "method": "getAudioStreamByContainer",
      "httpMethod": "get",
      "tag": "Audio",
      "description": "Gets an audio stream.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "container",
          "schema": "string",
          "required": true,
          "description": "The audio container."
        },
        {
          "name": "static",
          "schema": "boolean",
          "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false."
        },
        {
          "name": "params",
          "schema": "string",
          "description": "The streaming parameters."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The tag."
        },
        {
          "name": "deviceProfileId",
          "schema": "string",
          "description": "Optional. The dlna device profile id to utilize."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "segmentContainer",
          "schema": "string",
          "description": "The segment container."
        },
        {
          "name": "segmentLength",
          "schema": "integer",
          "description": "The segment lenght."
        },
        {
          "name": "minSegments",
          "schema": "integer",
          "description": "The minimum number of segments."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma."
        },
        {
          "name": "enableAutoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true."
        },
        {
          "name": "allowVideoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the video stream url."
        },
        {
          "name": "allowAudioStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the audio stream url."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "audioSampleRate",
          "schema": "integer",
          "description": "Optional. Specify a specific audio sample rate, e.g. 44100."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "audioChannels",
          "schema": "integer",
          "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "profile",
          "schema": "string",
          "description": "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high."
        },
        {
          "name": "level",
          "schema": "string",
          "description": "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1."
        },
        {
          "name": "framerate",
          "schema": "number",
          "description": "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "maxFramerate",
          "schema": "number",
          "description": "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "Optional. The fixed horizontal resolution of the encoded video."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "Optional. The fixed vertical resolution of the encoded video."
        },
        {
          "name": "videoBitRate",
          "schema": "integer",
          "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used."
        },
        {
          "name": "subtitleMethod",
          "schema": "string",
          "description": "Optional. Specify the subtitle delivery method."
        },
        {
          "name": "maxRefFrames",
          "schema": "integer",
          "description": "Optional."
        },
        {
          "name": "maxVideoBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum video bit depth."
        },
        {
          "name": "requireAvc",
          "schema": "boolean",
          "description": "Optional. Whether to require avc."
        },
        {
          "name": "deInterlace",
          "schema": "boolean",
          "description": "Optional. Whether to deinterlace the video."
        },
        {
          "name": "requireNonAnamorphic",
          "schema": "boolean",
          "description": "Optional. Whether to require a non anamporphic stream."
        },
        {
          "name": "transcodingMaxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels to transcode."
        },
        {
          "name": "cpuCoreLimit",
          "schema": "integer",
          "description": "Optional. The limit of how many cpu cores to use."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "enableMpegtsM2TsMode",
          "schema": "boolean",
          "description": "Optional. Whether to enable the MpegtsM2Ts mode."
        },
        {
          "name": "videoCodec",
          "schema": "string",
          "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv."
        },
        {
          "name": "subtitleCodec",
          "schema": "string",
          "description": "Optional. Specify a subtitle codec to encode to."
        },
        {
          "name": "transcodeReasons",
          "schema": "string",
          "description": "Optional. The transcoding reason."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used."
        },
        {
          "name": "videoStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used."
        },
        {
          "name": "context",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Dlna.EncodingContext."
        },
        {
          "name": "streamOptions",
          "schema": "object",
          "description": "Optional. The streaming options."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Audio/{itemId}/stream.{container}",
      "method": "headAudioStreamByContainer",
      "httpMethod": "head",
      "tag": "Audio",
      "description": "Gets an audio stream.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "container",
          "schema": "string",
          "required": true,
          "description": "The audio container."
        },
        {
          "name": "static",
          "schema": "boolean",
          "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false."
        },
        {
          "name": "params",
          "schema": "string",
          "description": "The streaming parameters."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The tag."
        },
        {
          "name": "deviceProfileId",
          "schema": "string",
          "description": "Optional. The dlna device profile id to utilize."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "segmentContainer",
          "schema": "string",
          "description": "The segment container."
        },
        {
          "name": "segmentLength",
          "schema": "integer",
          "description": "The segment lenght."
        },
        {
          "name": "minSegments",
          "schema": "integer",
          "description": "The minimum number of segments."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma."
        },
        {
          "name": "enableAutoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true."
        },
        {
          "name": "allowVideoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the video stream url."
        },
        {
          "name": "allowAudioStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the audio stream url."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "audioSampleRate",
          "schema": "integer",
          "description": "Optional. Specify a specific audio sample rate, e.g. 44100."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "audioChannels",
          "schema": "integer",
          "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "profile",
          "schema": "string",
          "description": "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high."
        },
        {
          "name": "level",
          "schema": "string",
          "description": "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1."
        },
        {
          "name": "framerate",
          "schema": "number",
          "description": "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "maxFramerate",
          "schema": "number",
          "description": "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "Optional. The fixed horizontal resolution of the encoded video."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "Optional. The fixed vertical resolution of the encoded video."
        },
        {
          "name": "videoBitRate",
          "schema": "integer",
          "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used."
        },
        {
          "name": "subtitleMethod",
          "schema": "string",
          "description": "Optional. Specify the subtitle delivery method."
        },
        {
          "name": "maxRefFrames",
          "schema": "integer",
          "description": "Optional."
        },
        {
          "name": "maxVideoBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum video bit depth."
        },
        {
          "name": "requireAvc",
          "schema": "boolean",
          "description": "Optional. Whether to require avc."
        },
        {
          "name": "deInterlace",
          "schema": "boolean",
          "description": "Optional. Whether to deinterlace the video."
        },
        {
          "name": "requireNonAnamorphic",
          "schema": "boolean",
          "description": "Optional. Whether to require a non anamporphic stream."
        },
        {
          "name": "transcodingMaxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels to transcode."
        },
        {
          "name": "cpuCoreLimit",
          "schema": "integer",
          "description": "Optional. The limit of how many cpu cores to use."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "enableMpegtsM2TsMode",
          "schema": "boolean",
          "description": "Optional. Whether to enable the MpegtsM2Ts mode."
        },
        {
          "name": "videoCodec",
          "schema": "string",
          "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv."
        },
        {
          "name": "subtitleCodec",
          "schema": "string",
          "description": "Optional. Specify a subtitle codec to encode to."
        },
        {
          "name": "transcodeReasons",
          "schema": "string",
          "description": "Optional. The transcoding reason."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used."
        },
        {
          "name": "videoStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used."
        },
        {
          "name": "context",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Dlna.EncodingContext."
        },
        {
          "name": "streamOptions",
          "schema": "object",
          "description": "Optional. The streaming options."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Audio/{itemId}/universal",
      "method": "getUniversalAudioStream",
      "httpMethod": "get",
      "tag": "UniversalAudio",
      "description": "Gets an audio stream.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "container",
          "schema": "array",
          "description": "Optional. The audio container."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. The user id."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. The audio codec to transcode to."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels."
        },
        {
          "name": "transcodingAudioChannels",
          "schema": "integer",
          "description": "Optional. The number of how many audio channels to transcode to."
        },
        {
          "name": "maxStreamingBitrate",
          "schema": "integer",
          "description": "Optional. The maximum streaming bitrate."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "transcodingContainer",
          "schema": "string",
          "description": "Optional. The container to transcode to."
        },
        {
          "name": "transcodingProtocol",
          "schema": "string",
          "description": "Optional. The transcoding protocol."
        },
        {
          "name": "maxAudioSampleRate",
          "schema": "integer",
          "description": "Optional. The maximum audio sample rate."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "enableRemoteMedia",
          "schema": "boolean",
          "description": "Optional. Whether to enable remote media."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "enableRedirection",
          "schema": "boolean",
          "description": "Whether to enable redirection. Defaults to true."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Audio/{itemId}/universal",
      "method": "headUniversalAudioStream",
      "httpMethod": "head",
      "tag": "UniversalAudio",
      "description": "Gets an audio stream.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "container",
          "schema": "array",
          "description": "Optional. The audio container."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. The user id."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. The audio codec to transcode to."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels."
        },
        {
          "name": "transcodingAudioChannels",
          "schema": "integer",
          "description": "Optional. The number of how many audio channels to transcode to."
        },
        {
          "name": "maxStreamingBitrate",
          "schema": "integer",
          "description": "Optional. The maximum streaming bitrate."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "transcodingContainer",
          "schema": "string",
          "description": "Optional. The container to transcode to."
        },
        {
          "name": "transcodingProtocol",
          "schema": "string",
          "description": "Optional. The transcoding protocol."
        },
        {
          "name": "maxAudioSampleRate",
          "schema": "integer",
          "description": "Optional. The maximum audio sample rate."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "enableRemoteMedia",
          "schema": "boolean",
          "description": "Optional. Whether to enable remote media."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "enableRedirection",
          "schema": "boolean",
          "description": "Whether to enable redirection. Defaults to true."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Auth/Keys",
      "method": "getKeys",
      "httpMethod": "get",
      "tag": "ApiKey",
      "description": "Get all keys.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Auth/Keys",
      "method": "createKey",
      "httpMethod": "post",
      "tag": "ApiKey",
      "description": "Create a new api key.",
      "parameters": [
        {
          "name": "app",
          "schema": "string",
          "required": true,
          "description": "Name of the app using the authentication key."
        }
      ],
      "responses": []
    },
    {
      "url": "/Auth/Keys/{key}",
      "method": "revokeKey",
      "httpMethod": "delete",
      "tag": "ApiKey",
      "description": "Remove an api key.",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "The access token to delete."
        }
      ],
      "responses": []
    },
    {
      "url": "/Auth/PasswordResetProviders",
      "method": "getPasswordResetProviders",
      "httpMethod": "get",
      "tag": "Session",
      "description": "Get all password reset providers.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Auth/Providers",
      "method": "getAuthProviders",
      "httpMethod": "get",
      "tag": "Session",
      "description": "Get all auth providers.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Branding/Configuration",
      "method": "getBrandingOptions",
      "httpMethod": "get",
      "tag": "Branding",
      "description": "Gets branding configuration.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Branding/Css",
      "method": "getBrandingCss",
      "httpMethod": "get",
      "tag": "Branding",
      "description": "Gets branding css.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Branding/Css.css",
      "method": "getBrandingCss2",
      "httpMethod": "get",
      "tag": "Branding",
      "description": "Gets branding css.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Channels",
      "method": "getChannels",
      "httpMethod": "get",
      "tag": "Channels",
      "description": "Gets available channels.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "description": "User Id to filter by. Use System.Guid.Empty to not filter by user."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "supportsLatestItems",
          "schema": "boolean",
          "description": "Optional. Filter by channels that support getting latest items."
        },
        {
          "name": "supportsMediaDeletion",
          "schema": "boolean",
          "description": "Optional. Filter by channels that support media deletion."
        },
        {
          "name": "isFavorite",
          "schema": "boolean",
          "description": "Optional. Filter by channels that are favorite."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Channels/Features",
      "method": "getAllChannelFeatures",
      "httpMethod": "get",
      "tag": "Channels",
      "description": "Get all channel features.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Channels/Items/Latest",
      "method": "getLatestChannelItems",
      "httpMethod": "get",
      "tag": "Channels",
      "description": "Gets latest channel items.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. User Id."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "filters",
          "schema": "array",
          "description": "Optional. Specify additional filters to apply."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "channelIds",
          "schema": "array",
          "description": "Optional. Specify one or more channel id's, comma delimited."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Channels/{channelId}/Features",
      "method": "getChannelFeatures",
      "httpMethod": "get",
      "tag": "Channels",
      "description": "Get channel features.",
      "parameters": [
        {
          "name": "channelId",
          "schema": "string",
          "required": true,
          "description": "Channel id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Channels/{channelId}/Items",
      "method": "getChannelItems",
      "httpMethod": "get",
      "tag": "Channels",
      "description": "Get channel items.",
      "parameters": [
        {
          "name": "channelId",
          "schema": "string",
          "required": true,
          "description": "Channel Id."
        },
        {
          "name": "folderId",
          "schema": "string",
          "description": "Optional. Folder Id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. User Id."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "sortOrder",
          "schema": "string",
          "description": "Optional. Sort Order - Ascending,Descending."
        },
        {
          "name": "filters",
          "schema": "array",
          "description": "Optional. Specify additional filters to apply."
        },
        {
          "name": "sortBy",
          "schema": "string",
          "description": "Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Collections",
      "method": "createCollection",
      "httpMethod": "post",
      "tag": "Collection",
      "description": "Creates a new collection.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": "The name of the collection."
        },
        {
          "name": "ids",
          "schema": "array",
          "description": "Item Ids to add to the collection."
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": "Optional. Create the collection within a specific folder."
        },
        {
          "name": "isLocked",
          "schema": "boolean",
          "description": "Whether or not to lock the new collection."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Collections/{collectionId}/Items",
      "method": "removeFromCollection",
      "httpMethod": "delete",
      "tag": "Collection",
      "description": "Removes items from a collection.",
      "parameters": [
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "The collection id."
        },
        {
          "name": "ids",
          "schema": "array",
          "required": true,
          "description": "Item ids, comma delimited."
        }
      ],
      "responses": []
    },
    {
      "url": "/Collections/{collectionId}/Items",
      "method": "addToCollection",
      "httpMethod": "post",
      "tag": "Collection",
      "description": "Adds items to a collection.",
      "parameters": [
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "The collection id."
        },
        {
          "name": "ids",
          "schema": "array",
          "required": true,
          "description": "Item ids, comma delimited."
        }
      ],
      "responses": []
    },
    {
      "url": "/Devices",
      "method": "deleteDevice",
      "httpMethod": "delete",
      "tag": "Devices",
      "description": "Deletes a device.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Device Id."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Devices",
      "method": "getDevices",
      "httpMethod": "get",
      "tag": "Devices",
      "description": "Get Devices.",
      "parameters": [
        {
          "name": "supportsSync",
          "schema": "boolean",
          "description": "Gets or sets a value indicating whether [supports synchronize]."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Gets or sets the user identifier."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Devices/Info",
      "method": "getDeviceInfo",
      "httpMethod": "get",
      "tag": "Devices",
      "description": "Get info for a device.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Device Id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Devices/Options",
      "method": "getDeviceOptions",
      "httpMethod": "get",
      "tag": "Devices",
      "description": "Get options for a device.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Device Id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Devices/Options",
      "method": "updateDeviceOptions",
      "httpMethod": "post",
      "tag": "Devices",
      "description": "Update device options.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Device Id."
        },
        {
          "name": "CustomName",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/DisplayPreferences/{displayPreferencesId}",
      "method": "getDisplayPreferences",
      "httpMethod": "get",
      "tag": "DisplayPreferences",
      "description": "Get Display Preferences.",
      "parameters": [
        {
          "name": "displayPreferencesId",
          "schema": "string",
          "required": true,
          "description": "Display preferences id."
        },
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "client",
          "schema": "string",
          "required": true,
          "description": "Client."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Defines the display preferences for any item that supports them (usually Folders)."
        }
      ]
    },
    {
      "url": "/DisplayPreferences/{displayPreferencesId}",
      "method": "updateDisplayPreferences",
      "httpMethod": "post",
      "tag": "DisplayPreferences",
      "description": "Update Display Preferences.",
      "parameters": [
        {
          "name": "displayPreferencesId",
          "schema": "string",
          "required": true,
          "description": "Display preferences id."
        },
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User Id."
        },
        {
          "name": "client",
          "schema": "string",
          "required": true,
          "description": "Client."
        },
        {
          "name": "Client",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CustomPrefs",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "IndexBy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PrimaryImageHeight",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "PrimaryImageWidth",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "RememberIndexing",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "RememberSorting",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ScrollDirection",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ShowBackdrop",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ShowSidebar",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "SortBy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SortOrder",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ViewType",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/Dlna/ProfileInfos",
      "method": "getProfileInfos",
      "httpMethod": "get",
      "tag": "Dlna",
      "description": "Get profile infos.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/Profiles",
      "method": "createProfile",
      "httpMethod": "post",
      "tag": "Dlna",
      "description": "Creates a profile.",
      "parameters": [
        {
          "name": "AlbumArtPn",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CodecProfiles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ContainerProfiles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "DirectPlayProfiles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "EnableAlbumArtInDidl",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableMSMediaReceiverRegistrar",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableSingleAlbumArtLimit",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableSingleSubtitleLimit",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "FriendlyName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Identification",
          "schema": "object",
          "description": ""
        },
        {
          "name": "IgnoreTranscodeByteRangeRequests",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Manufacturer",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ManufacturerUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MaxAlbumArtHeight",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxAlbumArtWidth",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxIconHeight",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxIconWidth",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxStaticBitrate",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxStaticMusicBitrate",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxStreamingBitrate",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ModelDescription",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ModelName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ModelNumber",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ModelUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MusicStreamingTranscodingBitrate",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ProtocolInfo",
          "schema": "string",
          "description": ""
        },
        {
          "name": "RequiresPlainFolders",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "RequiresPlainVideoItems",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ResponseProfiles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "SerialNumber",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SonyAggregationFlags",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SubtitleProfiles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "SupportedMediaTypes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "TimelineOffsetSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "TranscodingProfiles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "UserId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "XmlRootAttributes",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/Dlna/Profiles/Default",
      "method": "getDefaultProfile",
      "httpMethod": "get",
      "tag": "Dlna",
      "description": "Gets the default profile.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Defines the MediaBrowser.Model.Dlna.DeviceProfile."
        }
      ]
    },
    {
      "url": "/Dlna/Profiles/{profileId}",
      "method": "deleteProfile",
      "httpMethod": "delete",
      "tag": "Dlna",
      "description": "Deletes a profile.",
      "parameters": [
        {
          "name": "profileId",
          "schema": "string",
          "required": true,
          "description": "Profile id."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/Profiles/{profileId}",
      "method": "getProfile",
      "httpMethod": "get",
      "tag": "Dlna",
      "description": "Gets a single profile.",
      "parameters": [
        {
          "name": "profileId",
          "schema": "string",
          "required": true,
          "description": "Profile Id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Defines the MediaBrowser.Model.Dlna.DeviceProfile."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/Profiles/{profileId}",
      "method": "updateProfile",
      "httpMethod": "post",
      "tag": "Dlna",
      "description": "Updates a profile.",
      "parameters": [
        {
          "name": "profileId",
          "schema": "string",
          "required": true,
          "description": "Profile id."
        },
        {
          "name": "AlbumArtPn",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CodecProfiles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ContainerProfiles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "DirectPlayProfiles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "EnableAlbumArtInDidl",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableMSMediaReceiverRegistrar",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableSingleAlbumArtLimit",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableSingleSubtitleLimit",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "FriendlyName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Identification",
          "schema": "object",
          "description": ""
        },
        {
          "name": "IgnoreTranscodeByteRangeRequests",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Manufacturer",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ManufacturerUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MaxAlbumArtHeight",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxAlbumArtWidth",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxIconHeight",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxIconWidth",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxStaticBitrate",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxStaticMusicBitrate",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxStreamingBitrate",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ModelDescription",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ModelName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ModelNumber",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ModelUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MusicStreamingTranscodingBitrate",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ProtocolInfo",
          "schema": "string",
          "description": ""
        },
        {
          "name": "RequiresPlainFolders",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "RequiresPlainVideoItems",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ResponseProfiles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "SerialNumber",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SonyAggregationFlags",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SubtitleProfiles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "SupportedMediaTypes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "TimelineOffsetSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "TranscodingProfiles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "UserId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "XmlRootAttributes",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/icons/{fileName}",
      "method": "getIcon",
      "httpMethod": "get",
      "tag": "DlnaServer",
      "description": "Gets a server icon.",
      "parameters": [
        {
          "name": "fileName",
          "schema": "string",
          "required": true,
          "description": "The icon filename."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/{serverId}/ConnectionManager",
      "method": "getConnectionManager",
      "httpMethod": "get",
      "tag": "DlnaServer",
      "description": "Gets Dlna media receiver registrar xml.",
      "parameters": [
        {
          "name": "serverId",
          "schema": "string",
          "required": true,
          "description": "Server UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/{serverId}/ConnectionManager/ConnectionManager",
      "method": "getConnectionManager2",
      "httpMethod": "get",
      "tag": "DlnaServer",
      "description": "Gets Dlna media receiver registrar xml.",
      "parameters": [
        {
          "name": "serverId",
          "schema": "string",
          "required": true,
          "description": "Server UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/{serverId}/ConnectionManager/ConnectionManager.xml",
      "method": "getConnectionManager3",
      "httpMethod": "get",
      "tag": "DlnaServer",
      "description": "Gets Dlna media receiver registrar xml.",
      "parameters": [
        {
          "name": "serverId",
          "schema": "string",
          "required": true,
          "description": "Server UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/{serverId}/ConnectionManager/Control",
      "method": "processConnectionManagerControlRequest",
      "httpMethod": "post",
      "tag": "DlnaServer",
      "description": "Process a connection manager control request.",
      "parameters": [
        {
          "name": "serverId",
          "schema": "string",
          "required": true,
          "description": "Server UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/{serverId}/ContentDirectory",
      "method": "getContentDirectory",
      "httpMethod": "get",
      "tag": "DlnaServer",
      "description": "Gets Dlna content directory xml.",
      "parameters": [
        {
          "name": "serverId",
          "schema": "string",
          "required": true,
          "description": "Server UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/{serverId}/ContentDirectory/ContentDirectory",
      "method": "getContentDirectory2",
      "httpMethod": "get",
      "tag": "DlnaServer",
      "description": "Gets Dlna content directory xml.",
      "parameters": [
        {
          "name": "serverId",
          "schema": "string",
          "required": true,
          "description": "Server UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/{serverId}/ContentDirectory/ContentDirectory.xml",
      "method": "getContentDirectory3",
      "httpMethod": "get",
      "tag": "DlnaServer",
      "description": "Gets Dlna content directory xml.",
      "parameters": [
        {
          "name": "serverId",
          "schema": "string",
          "required": true,
          "description": "Server UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/{serverId}/ContentDirectory/Control",
      "method": "processContentDirectoryControlRequest",
      "httpMethod": "post",
      "tag": "DlnaServer",
      "description": "Process a content directory control request.",
      "parameters": [
        {
          "name": "serverId",
          "schema": "string",
          "required": true,
          "description": "Server UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/{serverId}/MediaReceiverRegistrar",
      "method": "getMediaReceiverRegistrar",
      "httpMethod": "get",
      "tag": "DlnaServer",
      "description": "Gets Dlna media receiver registrar xml.",
      "parameters": [
        {
          "name": "serverId",
          "schema": "string",
          "required": true,
          "description": "Server UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/{serverId}/MediaReceiverRegistrar/Control",
      "method": "processMediaReceiverRegistrarControlRequest",
      "httpMethod": "post",
      "tag": "DlnaServer",
      "description": "Process a media receiver registrar control request.",
      "parameters": [
        {
          "name": "serverId",
          "schema": "string",
          "required": true,
          "description": "Server UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar",
      "method": "getMediaReceiverRegistrar2",
      "httpMethod": "get",
      "tag": "DlnaServer",
      "description": "Gets Dlna media receiver registrar xml.",
      "parameters": [
        {
          "name": "serverId",
          "schema": "string",
          "required": true,
          "description": "Server UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar.xml",
      "method": "getMediaReceiverRegistrar3",
      "httpMethod": "get",
      "tag": "DlnaServer",
      "description": "Gets Dlna media receiver registrar xml.",
      "parameters": [
        {
          "name": "serverId",
          "schema": "string",
          "required": true,
          "description": "Server UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/{serverId}/description",
      "method": "getDescriptionXml",
      "httpMethod": "get",
      "tag": "DlnaServer",
      "description": "Get Description Xml.",
      "parameters": [
        {
          "name": "serverId",
          "schema": "string",
          "required": true,
          "description": "Server UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/{serverId}/description.xml",
      "method": "getDescriptionXml2",
      "httpMethod": "get",
      "tag": "DlnaServer",
      "description": "Get Description Xml.",
      "parameters": [
        {
          "name": "serverId",
          "schema": "string",
          "required": true,
          "description": "Server UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Dlna/{serverId}/icons/{fileName}",
      "method": "getIconId",
      "httpMethod": "get",
      "tag": "DlnaServer",
      "description": "Gets a server icon.",
      "parameters": [
        {
          "name": "serverId",
          "schema": "string",
          "required": true,
          "description": "Server UUID."
        },
        {
          "name": "fileName",
          "schema": "string",
          "required": true,
          "description": "The icon filename."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Environment/DefaultDirectoryBrowser",
      "method": "getDefaultDirectoryBrowser",
      "httpMethod": "get",
      "tag": "Environment",
      "description": "Get Default directory browser.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Default directory browser info."
        }
      ]
    },
    {
      "url": "/Environment/DirectoryContents",
      "method": "getDirectoryContents",
      "httpMethod": "get",
      "tag": "Environment",
      "description": "Gets the contents of a given directory in the file system.",
      "parameters": [
        {
          "name": "path",
          "schema": "string",
          "required": true,
          "description": "The path."
        },
        {
          "name": "includeFiles",
          "schema": "boolean",
          "description": "An optional filter to include or exclude files from the results. true/false."
        },
        {
          "name": "includeDirectories",
          "schema": "boolean",
          "description": "An optional filter to include or exclude folders from the results. true/false."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Environment/Drives",
      "method": "getDrives",
      "httpMethod": "get",
      "tag": "Environment",
      "description": "Gets available drives from the server's file system.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Environment/NetworkShares",
      "method": "getNetworkShares",
      "httpMethod": "get",
      "tag": "Environment",
      "description": "Gets network paths.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Environment/ParentPath",
      "method": "getParentPath",
      "httpMethod": "get",
      "tag": "Environment",
      "description": "Gets the parent path of a given path.",
      "parameters": [
        {
          "name": "path",
          "schema": "string",
          "required": true,
          "description": "The path."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Environment/ValidatePath",
      "method": "validatePath",
      "httpMethod": "post",
      "tag": "Environment",
      "description": "Validates path.",
      "parameters": [
        {
          "name": "IsFile",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Path",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ValidateWritable",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/FallbackFont/Fonts",
      "method": "getFallbackFontList",
      "httpMethod": "get",
      "tag": "Subtitle",
      "description": "Gets a list of available fallback font files.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/FallbackFont/Fonts/{name}",
      "method": "getFallbackFont",
      "httpMethod": "get",
      "tag": "Subtitle",
      "description": "Gets a fallback font file.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the fallback font file to get."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Genres",
      "method": "getGenres",
      "httpMethod": "get",
      "tag": "Genres",
      "description": "Gets all genres from a given item, folder, or the entire library.",
      "parameters": [
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "searchTerm",
          "schema": "string",
          "description": "The search term."
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": "Specify this to localize the search to a specific item or folder. Omit to use the root."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "excludeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited."
        },
        {
          "name": "includeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered in based on item type. This allows multiple, comma delimited."
        },
        {
          "name": "isFavorite",
          "schema": "boolean",
          "description": "Optional filter by items that are marked as favorite, or not."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional, the max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "User id."
        },
        {
          "name": "nameStartsWithOrGreater",
          "schema": "string",
          "description": "Optional filter by items whose name is sorted equally or greater than a given input string."
        },
        {
          "name": "nameStartsWith",
          "schema": "string",
          "description": "Optional filter by items whose name is sorted equally than a given input string."
        },
        {
          "name": "nameLessThan",
          "schema": "string",
          "description": "Optional filter by items whose name is equally or lesser than a given input string."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional, include image information in output."
        },
        {
          "name": "enableTotalRecordCount",
          "schema": "boolean",
          "description": "Optional. Include total record count."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Genres/{genreName}",
      "method": "getGenre",
      "httpMethod": "get",
      "tag": "Genres",
      "description": "Gets a genre, by name.",
      "parameters": [
        {
          "name": "genreName",
          "schema": "string",
          "required": true,
          "description": "The genre name."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "The user id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is strictly used as a data transfer object from the api layer.\r\nThis holds information about a BaseItem in a format that is convenient for the client."
        }
      ]
    },
    {
      "url": "/Genres/{name}/Images/{imageType}",
      "method": "getGenreImage",
      "httpMethod": "get",
      "tag": "Image",
      "description": "Get genre image by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Genre name."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "description": "Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Genres/{name}/Images/{imageType}",
      "method": "headGenreImage",
      "httpMethod": "head",
      "tag": "Image",
      "description": "Get genre image by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Genre name."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "description": "Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Genres/{name}/Images/{imageType}/{imageIndex}",
      "method": "getGenreImageByIndex",
      "httpMethod": "get",
      "tag": "Image",
      "description": "Get genre image by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Genre name."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "Image index."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Genres/{name}/Images/{imageType}/{imageIndex}",
      "method": "headGenreImageByIndex",
      "httpMethod": "head",
      "tag": "Image",
      "description": "Get genre image by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Genre name."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "Image index."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/GetUtcTime",
      "method": "getUtcTime",
      "httpMethod": "get",
      "tag": "TimeSync",
      "description": "Gets the current UTC time.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class UtcTimeResponse."
        }
      ]
    },
    {
      "url": "/Images/General",
      "method": "getGeneralImages",
      "httpMethod": "get",
      "tag": "ImageByName",
      "description": "Get all general images.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Images/General/{name}/{type}",
      "method": "getGeneralImage",
      "httpMethod": "get",
      "tag": "ImageByName",
      "description": "Get General Image.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the image."
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "Image Type (primary, backdrop, logo, etc)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Images/MediaInfo",
      "method": "getMediaInfoImages",
      "httpMethod": "get",
      "tag": "ImageByName",
      "description": "Get all media info images.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Images/MediaInfo/{theme}/{name}",
      "method": "getMediaInfoImage",
      "httpMethod": "get",
      "tag": "ImageByName",
      "description": "Get media info image.",
      "parameters": [
        {
          "name": "theme",
          "schema": "string",
          "required": true,
          "description": "The theme to get the image from."
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the image."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Images/Ratings",
      "method": "getRatingImages",
      "httpMethod": "get",
      "tag": "ImageByName",
      "description": "Get all general images.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Images/Ratings/{theme}/{name}",
      "method": "getRatingImage",
      "httpMethod": "get",
      "tag": "ImageByName",
      "description": "Get rating image.",
      "parameters": [
        {
          "name": "theme",
          "schema": "string",
          "required": true,
          "description": "The theme to get the image from."
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the image."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Images/Remote",
      "method": "getRemoteImage",
      "httpMethod": "get",
      "tag": "RemoteImage",
      "description": "Gets a remote image.",
      "parameters": [
        {
          "name": "imageUrl",
          "schema": "string",
          "required": true,
          "description": "The image url."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items",
      "method": "deleteItems",
      "httpMethod": "delete",
      "tag": "Library",
      "description": "Deletes items from the library and filesystem.",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "description": "The item ids."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items",
      "method": "getItems",
      "httpMethod": "get",
      "tag": "Items",
      "description": "Gets items based on a query.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "description": "The user id supplied as query parameter."
        },
        {
          "name": "maxOfficialRating",
          "schema": "string",
          "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc)."
        },
        {
          "name": "hasThemeSong",
          "schema": "boolean",
          "description": "Optional filter by items with theme songs."
        },
        {
          "name": "hasThemeVideo",
          "schema": "boolean",
          "description": "Optional filter by items with theme videos."
        },
        {
          "name": "hasSubtitles",
          "schema": "boolean",
          "description": "Optional filter by items with subtitles."
        },
        {
          "name": "hasSpecialFeature",
          "schema": "boolean",
          "description": "Optional filter by items with special features."
        },
        {
          "name": "hasTrailer",
          "schema": "boolean",
          "description": "Optional filter by items with trailers."
        },
        {
          "name": "adjacentTo",
          "schema": "string",
          "description": "Optional. Return items that are siblings of a supplied item."
        },
        {
          "name": "parentIndexNumber",
          "schema": "integer",
          "description": "Optional filter by parent index number."
        },
        {
          "name": "hasParentalRating",
          "schema": "boolean",
          "description": "Optional filter by items that have or do not have a parental rating."
        },
        {
          "name": "isHd",
          "schema": "boolean",
          "description": "Optional filter by items that are HD or not."
        },
        {
          "name": "is4K",
          "schema": "boolean",
          "description": "Optional filter by items that are 4K or not."
        },
        {
          "name": "locationTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited."
        },
        {
          "name": "excludeLocationTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited."
        },
        {
          "name": "isMissing",
          "schema": "boolean",
          "description": "Optional filter by items that are missing episodes or not."
        },
        {
          "name": "isUnaired",
          "schema": "boolean",
          "description": "Optional filter by items that are unaired episodes or not."
        },
        {
          "name": "minCommunityRating",
          "schema": "number",
          "description": "Optional filter by minimum community rating."
        },
        {
          "name": "minCriticRating",
          "schema": "number",
          "description": "Optional filter by minimum critic rating."
        },
        {
          "name": "minPremiereDate",
          "schema": "string",
          "description": "Optional. The minimum premiere date. Format = ISO."
        },
        {
          "name": "minDateLastSaved",
          "schema": "string",
          "description": "Optional. The minimum last saved date. Format = ISO."
        },
        {
          "name": "minDateLastSavedForUser",
          "schema": "string",
          "description": "Optional. The minimum last saved date for the current user. Format = ISO."
        },
        {
          "name": "maxPremiereDate",
          "schema": "string",
          "description": "Optional. The maximum premiere date. Format = ISO."
        },
        {
          "name": "hasOverview",
          "schema": "boolean",
          "description": "Optional filter by items that have an overview or not."
        },
        {
          "name": "hasImdbId",
          "schema": "boolean",
          "description": "Optional filter by items that have an imdb id or not."
        },
        {
          "name": "hasTmdbId",
          "schema": "boolean",
          "description": "Optional filter by items that have a tmdb id or not."
        },
        {
          "name": "hasTvdbId",
          "schema": "boolean",
          "description": "Optional filter by items that have a tvdb id or not."
        },
        {
          "name": "excludeItemIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "recursive",
          "schema": "boolean",
          "description": "When searching within folders, this determines whether or not the search will be recursive. true/false."
        },
        {
          "name": "searchTerm",
          "schema": "string",
          "description": "Optional. Filter based on a search term."
        },
        {
          "name": "sortOrder",
          "schema": "string",
          "description": "Sort Order - Ascending,Descending."
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": "Specify this to localize the search to a specific item or folder. Omit to use the root."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines."
        },
        {
          "name": "excludeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited."
        },
        {
          "name": "includeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited."
        },
        {
          "name": "filters",
          "schema": "array",
          "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes."
        },
        {
          "name": "isFavorite",
          "schema": "boolean",
          "description": "Optional filter by items that are marked as favorite, or not."
        },
        {
          "name": "mediaTypes",
          "schema": "array",
          "description": "Optional filter by MediaType. Allows multiple, comma delimited."
        },
        {
          "name": "imageTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited."
        },
        {
          "name": "sortBy",
          "schema": "string",
          "description": "Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime."
        },
        {
          "name": "isPlayed",
          "schema": "boolean",
          "description": "Optional filter by items that are played, or not."
        },
        {
          "name": "genres",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited."
        },
        {
          "name": "officialRatings",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited."
        },
        {
          "name": "tags",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited."
        },
        {
          "name": "years",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional, include user data."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional, the max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "person",
          "schema": "string",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified person."
        },
        {
          "name": "personIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified person id."
        },
        {
          "name": "personTypes",
          "schema": "array",
          "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited."
        },
        {
          "name": "studios",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited."
        },
        {
          "name": "artists",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited."
        },
        {
          "name": "excludeArtistIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited."
        },
        {
          "name": "artistIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified artist id."
        },
        {
          "name": "albumArtistIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified album artist id."
        },
        {
          "name": "contributingArtistIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified contributing artist id."
        },
        {
          "name": "albums",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited."
        },
        {
          "name": "albumIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited."
        },
        {
          "name": "ids",
          "schema": "array",
          "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited."
        },
        {
          "name": "videoTypes",
          "schema": "array",
          "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited."
        },
        {
          "name": "minOfficialRating",
          "schema": "string",
          "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc)."
        },
        {
          "name": "isLocked",
          "schema": "boolean",
          "description": "Optional filter by items that are locked."
        },
        {
          "name": "isPlaceHolder",
          "schema": "boolean",
          "description": "Optional filter by items that are placeholders."
        },
        {
          "name": "hasOfficialRating",
          "schema": "boolean",
          "description": "Optional filter by items that have official ratings."
        },
        {
          "name": "collapseBoxSetItems",
          "schema": "boolean",
          "description": "Whether or not to hide items behind their boxsets."
        },
        {
          "name": "minWidth",
          "schema": "integer",
          "description": "Optional. Filter by the minimum width of the item."
        },
        {
          "name": "minHeight",
          "schema": "integer",
          "description": "Optional. Filter by the minimum height of the item."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "Optional. Filter by the maximum width of the item."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "Optional. Filter by the maximum height of the item."
        },
        {
          "name": "is3D",
          "schema": "boolean",
          "description": "Optional filter by items that are 3D, or not."
        },
        {
          "name": "seriesStatus",
          "schema": "array",
          "description": "Optional filter by Series Status. Allows multiple, comma delimited."
        },
        {
          "name": "nameStartsWithOrGreater",
          "schema": "string",
          "description": "Optional filter by items whose name is sorted equally or greater than a given input string."
        },
        {
          "name": "nameStartsWith",
          "schema": "string",
          "description": "Optional filter by items whose name is sorted equally than a given input string."
        },
        {
          "name": "nameLessThan",
          "schema": "string",
          "description": "Optional filter by items whose name is equally or lesser than a given input string."
        },
        {
          "name": "studioIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited."
        },
        {
          "name": "genreIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited."
        },
        {
          "name": "enableTotalRecordCount",
          "schema": "boolean",
          "description": "Optional. Enable the total record count."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional, include image information in output."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/Counts",
      "method": "getItemCounts",
      "httpMethod": "get",
      "tag": "Library",
      "description": "Get item counts.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Get counts from a specific user's library."
        },
        {
          "name": "isFavorite",
          "schema": "boolean",
          "description": "Optional. Get counts of favorite items."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class LibrarySummary."
        }
      ]
    },
    {
      "url": "/Items/Filters",
      "method": "getQueryFiltersLegacy",
      "httpMethod": "get",
      "tag": "Filter",
      "description": "Gets legacy query filters.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. User id."
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": "Optional. Parent id."
        },
        {
          "name": "includeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited."
        },
        {
          "name": "mediaTypes",
          "schema": "array",
          "description": "Optional. Filter by MediaType. Allows multiple, comma delimited."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/Filters2",
      "method": "getQueryFilters",
      "httpMethod": "get",
      "tag": "Filter",
      "description": "Gets query filters.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. User id."
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": "Optional. Specify this to localize the search to a specific item or folder. Omit to use the root."
        },
        {
          "name": "includeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited."
        },
        {
          "name": "isAiring",
          "schema": "boolean",
          "description": "Optional. Is item airing."
        },
        {
          "name": "isMovie",
          "schema": "boolean",
          "description": "Optional. Is item movie."
        },
        {
          "name": "isSports",
          "schema": "boolean",
          "description": "Optional. Is item sports."
        },
        {
          "name": "isKids",
          "schema": "boolean",
          "description": "Optional. Is item kids."
        },
        {
          "name": "isNews",
          "schema": "boolean",
          "description": "Optional. Is item news."
        },
        {
          "name": "isSeries",
          "schema": "boolean",
          "description": "Optional. Is item series."
        },
        {
          "name": "recursive",
          "schema": "boolean",
          "description": "Optional. Search recursive."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/RemoteSearch/Apply/{itemId}",
      "method": "applySearchCriteria",
      "httpMethod": "post",
      "tag": "ItemLookup",
      "description": "Applies search criteria to an item and refreshes metadata.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        },
        {
          "name": "replaceAllImages",
          "schema": "boolean",
          "description": "Optional. Whether or not to replace all images. Default: True."
        },
        {
          "name": "AlbumArtist",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Artists",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ImageUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "IndexNumber",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "IndexNumberEnd",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Overview",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentIndexNumber",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "PremiereDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ProductionYear",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ProviderIds",
          "schema": "object",
          "description": ""
        },
        {
          "name": "SearchProviderName",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/Items/RemoteSearch/Book",
      "method": "getBookRemoteSearchResults",
      "httpMethod": "post",
      "tag": "ItemLookup",
      "description": "Get book remote search.",
      "parameters": [
        {
          "name": "IncludeDisabledProviders",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SearchInfo",
          "schema": "object",
          "description": ""
        },
        {
          "name": "SearchProviderName",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/RemoteSearch/BoxSet",
      "method": "getBoxSetRemoteSearchResults",
      "httpMethod": "post",
      "tag": "ItemLookup",
      "description": "Get box set remote search.",
      "parameters": [
        {
          "name": "IncludeDisabledProviders",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SearchInfo",
          "schema": "object",
          "description": ""
        },
        {
          "name": "SearchProviderName",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/RemoteSearch/Image",
      "method": "getRemoteSearchImage",
      "httpMethod": "get",
      "tag": "ItemLookup",
      "description": "Gets a remote image.",
      "parameters": [
        {
          "name": "imageUrl",
          "schema": "string",
          "required": true,
          "description": "The image url."
        },
        {
          "name": "providerName",
          "schema": "string",
          "required": true,
          "description": "The provider name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/RemoteSearch/Movie",
      "method": "getMovieRemoteSearchResults",
      "httpMethod": "post",
      "tag": "ItemLookup",
      "description": "Get movie remote search.",
      "parameters": [
        {
          "name": "IncludeDisabledProviders",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SearchInfo",
          "schema": "object",
          "description": ""
        },
        {
          "name": "SearchProviderName",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/RemoteSearch/MusicAlbum",
      "method": "getMusicAlbumRemoteSearchResults",
      "httpMethod": "post",
      "tag": "ItemLookup",
      "description": "Get music album remote search.",
      "parameters": [
        {
          "name": "IncludeDisabledProviders",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SearchInfo",
          "schema": "object",
          "description": ""
        },
        {
          "name": "SearchProviderName",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/RemoteSearch/MusicArtist",
      "method": "getMusicArtistRemoteSearchResults",
      "httpMethod": "post",
      "tag": "ItemLookup",
      "description": "Get music artist remote search.",
      "parameters": [
        {
          "name": "IncludeDisabledProviders",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SearchInfo",
          "schema": "object",
          "description": ""
        },
        {
          "name": "SearchProviderName",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/RemoteSearch/MusicVideo",
      "method": "getMusicVideoRemoteSearchResults",
      "httpMethod": "post",
      "tag": "ItemLookup",
      "description": "Get music video remote search.",
      "parameters": [
        {
          "name": "IncludeDisabledProviders",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SearchInfo",
          "schema": "object",
          "description": ""
        },
        {
          "name": "SearchProviderName",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/RemoteSearch/Person",
      "method": "getPersonRemoteSearchResults",
      "httpMethod": "post",
      "tag": "ItemLookup",
      "description": "Get person remote search.",
      "parameters": [
        {
          "name": "IncludeDisabledProviders",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SearchInfo",
          "schema": "object",
          "description": ""
        },
        {
          "name": "SearchProviderName",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/RemoteSearch/Series",
      "method": "getSeriesRemoteSearchResults",
      "httpMethod": "post",
      "tag": "ItemLookup",
      "description": "Get series remote search.",
      "parameters": [
        {
          "name": "IncludeDisabledProviders",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SearchInfo",
          "schema": "object",
          "description": ""
        },
        {
          "name": "SearchProviderName",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/RemoteSearch/Trailer",
      "method": "getTrailerRemoteSearchResults",
      "httpMethod": "post",
      "tag": "ItemLookup",
      "description": "Get trailer remote search.",
      "parameters": [
        {
          "name": "IncludeDisabledProviders",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SearchInfo",
          "schema": "object",
          "description": ""
        },
        {
          "name": "SearchProviderName",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{id}/InstantMix",
      "method": "getInstantMixFromItem",
      "httpMethod": "get",
      "tag": "InstantMix",
      "description": "Creates an instant playlist based on a given song.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional. Include image information in output."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. Include user data."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. The max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}",
      "method": "deleteItem",
      "httpMethod": "delete",
      "tag": "Library",
      "description": "Deletes an item from the library and filesystem.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}",
      "method": "updateItem",
      "httpMethod": "post",
      "tag": "ItemUpdate",
      "description": "Updates an item.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "AirDays",
          "schema": "array",
          "description": ""
        },
        {
          "name": "AirTime",
          "schema": "string",
          "description": ""
        },
        {
          "name": "AirsAfterSeasonNumber",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "AirsBeforeEpisodeNumber",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "AirsBeforeSeasonNumber",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Album",
          "schema": "string",
          "description": ""
        },
        {
          "name": "AlbumArtist",
          "schema": "string",
          "description": ""
        },
        {
          "name": "AlbumArtists",
          "schema": "array",
          "description": ""
        },
        {
          "name": "AlbumCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "AlbumId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "AlbumPrimaryImageTag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Altitude",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Aperture",
          "schema": "number",
          "description": ""
        },
        {
          "name": "ArtistCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ArtistItems",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Artists",
          "schema": "array",
          "description": ""
        },
        {
          "name": "AspectRatio",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Audio",
          "schema": "string",
          "description": ""
        },
        {
          "name": "BackdropImageTags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "CameraMake",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CameraModel",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CanDelete",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "CanDownload",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ChannelId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ChannelName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ChannelNumber",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ChannelPrimaryImageTag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ChannelType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Chapters",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ChildCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "CollectionType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CommunityRating",
          "schema": "number",
          "description": ""
        },
        {
          "name": "CompletionPercentage",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Container",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CriticRating",
          "schema": "number",
          "description": ""
        },
        {
          "name": "CumulativeRunTimeTicks",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "CurrentProgram",
          "schema": "object",
          "description": ""
        },
        {
          "name": "CustomRating",
          "schema": "string",
          "description": ""
        },
        {
          "name": "DateCreated",
          "schema": "string",
          "description": ""
        },
        {
          "name": "DateLastMediaAdded",
          "schema": "string",
          "description": ""
        },
        {
          "name": "DisplayOrder",
          "schema": "string",
          "description": ""
        },
        {
          "name": "DisplayPreferencesId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "EnableMediaSourceDisplay",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EndDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "EpisodeCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "EpisodeTitle",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Etag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExposureTime",
          "schema": "number",
          "description": ""
        },
        {
          "name": "ExternalUrls",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ExtraType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "FocalLength",
          "schema": "number",
          "description": ""
        },
        {
          "name": "ForcedSortName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "GenreItems",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Genres",
          "schema": "array",
          "description": ""
        },
        {
          "name": "HasSubtitles",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Height",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ImageBlurHashes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "ImageOrientation",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ImageTags",
          "schema": "object",
          "description": ""
        },
        {
          "name": "IndexNumber",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "IndexNumberEnd",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "IsFolder",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsHD",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsKids",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsLive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsMovie",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsNews",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsPlaceHolder",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsPremiere",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsRepeat",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsSeries",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsSports",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsoSpeedRating",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "IsoType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Latitude",
          "schema": "number",
          "description": ""
        },
        {
          "name": "LocalTrailerCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "LocationType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "LockData",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "LockedFields",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Longitude",
          "schema": "number",
          "description": ""
        },
        {
          "name": "MediaSourceCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MediaSources",
          "schema": "array",
          "description": ""
        },
        {
          "name": "MediaStreams",
          "schema": "array",
          "description": ""
        },
        {
          "name": "MediaType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MovieCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MusicVideoCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Number",
          "schema": "string",
          "description": ""
        },
        {
          "name": "OfficialRating",
          "schema": "string",
          "description": ""
        },
        {
          "name": "OriginalTitle",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Overview",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentArtImageTag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentArtItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentBackdropImageTags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ParentBackdropItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentIndexNumber",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ParentLogoImageTag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentLogoItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentPrimaryImageItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentPrimaryImageTag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentThumbImageTag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentThumbItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PartCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Path",
          "schema": "string",
          "description": ""
        },
        {
          "name": "People",
          "schema": "array",
          "description": ""
        },
        {
          "name": "PlayAccess",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PlaylistItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PreferredMetadataCountryCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PreferredMetadataLanguage",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PremiereDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PrimaryImageAspectRatio",
          "schema": "number",
          "description": ""
        },
        {
          "name": "ProductionLocations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ProductionYear",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ProgramCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ProgramId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ProviderIds",
          "schema": "object",
          "description": ""
        },
        {
          "name": "RecursiveItemCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "RemoteTrailers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "RunTimeTicks",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ScreenshotImageTags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "SeasonId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SeasonName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SeriesCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "SeriesId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SeriesName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SeriesPrimaryImageTag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SeriesStudio",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SeriesThumbImageTag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SeriesTimerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ServerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ShutterSpeed",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Software",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SongCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "SortName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SourceType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SpecialFeatureCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "StartDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Status",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Studios",
          "schema": "array",
          "description": ""
        },
        {
          "name": "SupportsSync",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Taglines",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "TimerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "TrailerCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "UserData",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Video3DFormat",
          "schema": "string",
          "description": ""
        },
        {
          "name": "VideoType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Width",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/Ancestors",
      "method": "getAncestors",
      "httpMethod": "get",
      "tag": "Library",
      "description": "Gets all parents of an item.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/ContentType",
      "method": "updateItemContentType",
      "httpMethod": "post",
      "tag": "ItemUpdate",
      "description": "Updates an item's content type.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "contentType",
          "schema": "string",
          "description": "The content type of the item."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/CriticReviews",
      "method": "getCriticReviews",
      "httpMethod": "get",
      "tag": "Library",
      "description": "Gets critic review for an item.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/Download",
      "method": "getDownload",
      "httpMethod": "get",
      "tag": "Library",
      "description": "Downloads item media.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/ExternalIdInfos",
      "method": "getExternalIdInfos",
      "httpMethod": "get",
      "tag": "ItemLookup",
      "description": "Get the item's external id info.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/File",
      "method": "getFile",
      "httpMethod": "get",
      "tag": "Library",
      "description": "Get the original file of an item.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/Images",
      "method": "getItemImageInfos",
      "httpMethod": "get",
      "tag": "Image",
      "description": "Get item image infos.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/Images/{imageType}",
      "method": "deleteItemImage",
      "httpMethod": "delete",
      "tag": "Image",
      "description": "Delete an item's image.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "description": "The image index."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/Images/{imageType}",
      "method": "getItemImage",
      "httpMethod": "get",
      "tag": "Image",
      "description": "Gets the item's image.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "description": "Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/Images/{imageType}",
      "method": "headItemImage",
      "httpMethod": "head",
      "tag": "Image",
      "description": "Gets the item's image.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "description": "Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/Images/{imageType}",
      "method": "setItemImage",
      "httpMethod": "post",
      "tag": "Image",
      "description": "Set item image.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/Images/{imageType}/{imageIndex}",
      "method": "deleteItemImageByIndex",
      "httpMethod": "delete",
      "tag": "Image",
      "description": "Delete an item's image.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "The image index."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/Images/{imageType}/{imageIndex}",
      "method": "getItemImageByIndex",
      "httpMethod": "get",
      "tag": "Image",
      "description": "Gets the item's image.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "Image index."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/Images/{imageType}/{imageIndex}",
      "method": "headItemImageByIndex",
      "httpMethod": "head",
      "tag": "Image",
      "description": "Gets the item's image.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "Image index."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/Images/{imageType}/{imageIndex}",
      "method": "setItemImageByIndex",
      "httpMethod": "post",
      "tag": "Image",
      "description": "Set item image.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "(Unused) Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/Images/{imageType}/{imageIndex}/Index",
      "method": "updateItemImageIndex",
      "httpMethod": "post",
      "tag": "Image",
      "description": "Updates the index for an item image.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "Old image index."
        },
        {
          "name": "newIndex",
          "schema": "integer",
          "description": "New image index."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}",
      "method": "getItemImage2",
      "httpMethod": "get",
      "tag": "Image",
      "description": "Gets the item's image.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "required": true,
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "required": true,
          "description": "The maximum image height to return."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "tag",
          "schema": "string",
          "required": true,
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "format",
          "schema": "string",
          "required": true,
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "required": true,
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "required": true,
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}",
      "method": "headItemImage2",
      "httpMethod": "head",
      "tag": "Image",
      "description": "Gets the item's image.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "required": true,
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "required": true,
          "description": "The maximum image height to return."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "tag",
          "schema": "string",
          "required": true,
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "format",
          "schema": "string",
          "required": true,
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "required": true,
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "required": true,
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/MetadataEditor",
      "method": "getMetadataEditorInfo",
      "httpMethod": "get",
      "tag": "ItemUpdate",
      "description": "Gets metadata editor info for an item.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/PlaybackInfo",
      "method": "getPlaybackInfo",
      "httpMethod": "get",
      "tag": "MediaInfo",
      "description": "Gets live playback media info for an item.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "The user id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class PlaybackInfoResponse."
        }
      ]
    },
    {
      "url": "/Items/{itemId}/PlaybackInfo",
      "method": "getPostedPlaybackInfo",
      "httpMethod": "post",
      "tag": "MediaInfo",
      "description": "Gets live playback media info for an item.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "The user id."
        },
        {
          "name": "maxStreamingBitrate",
          "schema": "integer",
          "description": "The maximum streaming bitrate."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "The start time in ticks."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "The audio stream index."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "The subtitle stream index."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "The maximum number of audio channels."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The media source id."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The livestream id."
        },
        {
          "name": "autoOpenLiveStream",
          "schema": "boolean",
          "description": "Whether to auto open the livestream."
        },
        {
          "name": "enableDirectPlay",
          "schema": "boolean",
          "description": "Whether to enable direct play. Default: true."
        },
        {
          "name": "enableDirectStream",
          "schema": "boolean",
          "description": "Whether to enable direct stream. Default: true."
        },
        {
          "name": "enableTranscoding",
          "schema": "boolean",
          "description": "Whether to enable transcoding. Default: true."
        },
        {
          "name": "allowVideoStreamCopy",
          "schema": "boolean",
          "description": "Whether to allow to copy the video stream. Default: true."
        },
        {
          "name": "allowAudioStreamCopy",
          "schema": "boolean",
          "description": "Whether to allow to copy the audio stream. Default: true."
        },
        {
          "name": "AllowAudioStreamCopy",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "AllowVideoStreamCopy",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "AudioStreamIndex",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "AutoOpenLiveStream",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "DeviceProfile",
          "schema": "object",
          "description": ""
        },
        {
          "name": "EnableDirectPlay",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableDirectStream",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableTranscoding",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "LiveStreamId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MaxAudioChannels",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxStreamingBitrate",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MediaSourceId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "StartTimeTicks",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "SubtitleStreamIndex",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "UserId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class PlaybackInfoResponse."
        }
      ]
    },
    {
      "url": "/Items/{itemId}/Refresh",
      "method": "post",
      "httpMethod": "post",
      "tag": "ItemRefresh",
      "description": "Refreshes metadata for an item.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        },
        {
          "name": "metadataRefreshMode",
          "schema": "string",
          "description": "(Optional) Specifies the metadata refresh mode."
        },
        {
          "name": "imageRefreshMode",
          "schema": "string",
          "description": "(Optional) Specifies the image refresh mode."
        },
        {
          "name": "replaceAllMetadata",
          "schema": "boolean",
          "description": "(Optional) Determines if metadata should be replaced. Only applicable if mode is FullRefresh."
        },
        {
          "name": "replaceAllImages",
          "schema": "boolean",
          "description": "(Optional) Determines if images should be replaced. Only applicable if mode is FullRefresh."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/RemoteImages",
      "method": "getRemoteImages",
      "httpMethod": "get",
      "tag": "RemoteImage",
      "description": "Gets available remote images for an item.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item Id."
        },
        {
          "name": "type",
          "schema": "string",
          "description": "The image type."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "providerName",
          "schema": "string",
          "description": "Optional. The image provider to use."
        },
        {
          "name": "includeAllLanguages",
          "schema": "boolean",
          "description": "Optional. Include all languages."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class RemoteImageResult."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/RemoteImages/Download",
      "method": "downloadRemoteImage",
      "httpMethod": "post",
      "tag": "RemoteImage",
      "description": "Downloads a remote image for an item.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item Id."
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "The image type."
        },
        {
          "name": "imageUrl",
          "schema": "string",
          "description": "The image url."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/RemoteImages/Providers",
      "method": "getRemoteImageProviders",
      "httpMethod": "get",
      "tag": "RemoteImage",
      "description": "Gets available remote image providers for an item.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item Id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/RemoteSearch/Subtitles/{language}",
      "method": "searchRemoteSubtitles",
      "httpMethod": "get",
      "tag": "Subtitle",
      "description": "Search remote subtitles.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "language",
          "schema": "string",
          "required": true,
          "description": "The language of the subtitles."
        },
        {
          "name": "isPerfectMatch",
          "schema": "boolean",
          "description": "Optional. Only show subtitles which are a perfect match."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/RemoteSearch/Subtitles/{subtitleId}",
      "method": "downloadRemoteSubtitles",
      "httpMethod": "post",
      "tag": "Subtitle",
      "description": "Downloads a remote subtitle.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "subtitleId",
          "schema": "string",
          "required": true,
          "description": "The subtitle id."
        }
      ],
      "responses": []
    },
    {
      "url": "/Items/{itemId}/Similar",
      "method": "getSimilarItems",
      "httpMethod": "get",
      "tag": "Library",
      "description": "Gets similar items.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "excludeArtistIds",
          "schema": "array",
          "description": "Exclude artist ids."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/ThemeMedia",
      "method": "getThemeMedia",
      "httpMethod": "get",
      "tag": "Library",
      "description": "Get theme songs and videos for an item.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        },
        {
          "name": "inheritFromParent",
          "schema": "boolean",
          "description": "Optional. Determines whether or not parent items should be searched for theme media."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/ThemeSongs",
      "method": "getThemeSongs",
      "httpMethod": "get",
      "tag": "Library",
      "description": "Get theme songs for an item.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        },
        {
          "name": "inheritFromParent",
          "schema": "boolean",
          "description": "Optional. Determines whether or not parent items should be searched for theme media."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class ThemeMediaResult."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Items/{itemId}/ThemeVideos",
      "method": "getThemeVideos",
      "httpMethod": "get",
      "tag": "Library",
      "description": "Get theme videos for an item.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        },
        {
          "name": "inheritFromParent",
          "schema": "boolean",
          "description": "Optional. Determines whether or not parent items should be searched for theme media."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class ThemeMediaResult."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Libraries/AvailableOptions",
      "method": "getLibraryOptionsInfo",
      "httpMethod": "get",
      "tag": "Library",
      "description": "Gets the library options info.",
      "parameters": [
        {
          "name": "libraryContentType",
          "schema": "string",
          "description": "Library content type."
        },
        {
          "name": "isNewLibrary",
          "schema": "boolean",
          "description": "Whether this is a new library."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Library options result dto."
        }
      ]
    },
    {
      "url": "/Library/Media/Updated",
      "method": "postUpdatedMedia",
      "httpMethod": "post",
      "tag": "Library",
      "description": "Reports that new movies have been added by an external source.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/Library/MediaFolders",
      "method": "getMediaFolders",
      "httpMethod": "get",
      "tag": "Library",
      "description": "Gets all user media folders.",
      "parameters": [
        {
          "name": "isHidden",
          "schema": "boolean",
          "description": "Optional. Filter by folders that are marked hidden, or not."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Library/Movies/Added",
      "method": "postAddedMovies",
      "httpMethod": "post",
      "tag": "Library",
      "description": "Reports that new movies have been added by an external source.",
      "parameters": [
        {
          "name": "tmdbId",
          "schema": "string",
          "description": "The tmdbId."
        },
        {
          "name": "imdbId",
          "schema": "string",
          "description": "The imdbId."
        }
      ],
      "responses": []
    },
    {
      "url": "/Library/Movies/Updated",
      "method": "postUpdatedMovies",
      "httpMethod": "post",
      "tag": "Library",
      "description": "Reports that new movies have been added by an external source.",
      "parameters": [
        {
          "name": "tmdbId",
          "schema": "string",
          "description": "The tmdbId."
        },
        {
          "name": "imdbId",
          "schema": "string",
          "description": "The imdbId."
        }
      ],
      "responses": []
    },
    {
      "url": "/Library/PhysicalPaths",
      "method": "getPhysicalPaths",
      "httpMethod": "get",
      "tag": "Library",
      "description": "Gets a list of physical paths from virtual folders.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Library/Refresh",
      "method": "refreshLibrary",
      "httpMethod": "get",
      "tag": "Library",
      "description": "Starts a library scan.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/Library/Series/Added",
      "method": "postAddedSeries",
      "httpMethod": "post",
      "tag": "Library",
      "description": "Reports that new episodes of a series have been added by an external source.",
      "parameters": [
        {
          "name": "tvdbId",
          "schema": "string",
          "description": "The tvdbId."
        }
      ],
      "responses": []
    },
    {
      "url": "/Library/Series/Updated",
      "method": "postUpdatedSeries",
      "httpMethod": "post",
      "tag": "Library",
      "description": "Reports that new episodes of a series have been added by an external source.",
      "parameters": [
        {
          "name": "tvdbId",
          "schema": "string",
          "description": "The tvdbId."
        }
      ],
      "responses": []
    },
    {
      "url": "/Library/VirtualFolders",
      "method": "removeVirtualFolder",
      "httpMethod": "delete",
      "tag": "LibraryStructure",
      "description": "Removes a virtual folder.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": "The name of the folder."
        },
        {
          "name": "refreshLibrary",
          "schema": "boolean",
          "description": "Whether to refresh the library."
        }
      ],
      "responses": []
    },
    {
      "url": "/Library/VirtualFolders",
      "method": "getVirtualFolders",
      "httpMethod": "get",
      "tag": "LibraryStructure",
      "description": "Gets all virtual folders.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Library/VirtualFolders",
      "method": "addVirtualFolder",
      "httpMethod": "post",
      "tag": "LibraryStructure",
      "description": "Adds a virtual folder.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": "The name of the virtual folder."
        },
        {
          "name": "collectionType",
          "schema": "string",
          "description": "The type of the collection."
        },
        {
          "name": "paths",
          "schema": "array",
          "description": "The paths of the virtual folder."
        },
        {
          "name": "refreshLibrary",
          "schema": "boolean",
          "description": "Whether to refresh the library."
        },
        {
          "name": "LibraryOptions",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/Library/VirtualFolders/LibraryOptions",
      "method": "updateLibraryOptions",
      "httpMethod": "post",
      "tag": "LibraryStructure",
      "description": "Update library options.",
      "parameters": [
        {
          "name": "Id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "LibraryOptions",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/Library/VirtualFolders/Name",
      "method": "renameVirtualFolder",
      "httpMethod": "post",
      "tag": "LibraryStructure",
      "description": "Renames a virtual folder.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": "The name of the virtual folder."
        },
        {
          "name": "newName",
          "schema": "string",
          "description": "The new name."
        },
        {
          "name": "refreshLibrary",
          "schema": "boolean",
          "description": "Whether to refresh the library."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/Library/VirtualFolders/Paths",
      "method": "removeMediaPath",
      "httpMethod": "delete",
      "tag": "LibraryStructure",
      "description": "Remove a media path.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": "The name of the library."
        },
        {
          "name": "path",
          "schema": "string",
          "description": "The path to remove."
        },
        {
          "name": "refreshLibrary",
          "schema": "boolean",
          "description": "Whether to refresh the library."
        }
      ],
      "responses": []
    },
    {
      "url": "/Library/VirtualFolders/Paths",
      "method": "addMediaPath",
      "httpMethod": "post",
      "tag": "LibraryStructure",
      "description": "Add a media path to a library.",
      "parameters": [
        {
          "name": "refreshLibrary",
          "schema": "boolean",
          "description": "Whether to refresh the library."
        },
        {
          "name": "Name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "Path",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "PathInfo",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/Library/VirtualFolders/Paths/Update",
      "method": "updateMediaPath",
      "httpMethod": "post",
      "tag": "LibraryStructure",
      "description": "Updates a media path.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": "The name of the library."
        },
        {
          "name": "NetworkPath",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Path",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/LiveStreams/Close",
      "method": "closeLiveStream",
      "httpMethod": "post",
      "tag": "MediaInfo",
      "description": "Closes a media source.",
      "parameters": [
        {
          "name": "liveStreamId",
          "schema": "string",
          "required": true,
          "description": "The livestream id."
        }
      ],
      "responses": []
    },
    {
      "url": "/LiveStreams/Open",
      "method": "openLiveStream",
      "httpMethod": "post",
      "tag": "MediaInfo",
      "description": "Opens a media source.",
      "parameters": [
        {
          "name": "openToken",
          "schema": "string",
          "description": "The open token."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "The user id."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "maxStreamingBitrate",
          "schema": "integer",
          "description": "The maximum streaming bitrate."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "The start time in ticks."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "The audio stream index."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "The subtitle stream index."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "The maximum number of audio channels."
        },
        {
          "name": "itemId",
          "schema": "string",
          "description": "The item id."
        },
        {
          "name": "enableDirectPlay",
          "schema": "boolean",
          "description": "Whether to enable direct play. Default: true."
        },
        {
          "name": "enableDirectStream",
          "schema": "boolean",
          "description": "Whether to enable direct stream. Default: true."
        },
        {
          "name": "AudioStreamIndex",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "DeviceProfile",
          "schema": "object",
          "description": ""
        },
        {
          "name": "DirectPlayProtocols",
          "schema": "array",
          "description": ""
        },
        {
          "name": "EnableDirectPlay",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableDirectStream",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MaxAudioChannels",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxStreamingBitrate",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "OpenToken",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PlaySessionId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "StartTimeTicks",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "SubtitleStreamIndex",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "UserId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/ChannelMappingOptions",
      "method": "getChannelMappingOptions",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Get channel mapping options.",
      "parameters": [
        {
          "name": "providerId",
          "schema": "string",
          "description": "Provider id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Channel mapping options dto."
        }
      ]
    },
    {
      "url": "/LiveTv/ChannelMappings",
      "method": "setChannelMapping",
      "httpMethod": "post",
      "tag": "LiveTv",
      "description": "Set channel mappings.",
      "parameters": [
        {
          "name": "ProviderChannelId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ProviderId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "TunerChannelId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/Channels",
      "method": "getLiveTvChannels",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets available live tv channels.",
      "parameters": [
        {
          "name": "type",
          "schema": "string",
          "description": "Optional. Filter by channel type."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user and attach user data."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "isMovie",
          "schema": "boolean",
          "description": "Optional. Filter for movies."
        },
        {
          "name": "isSeries",
          "schema": "boolean",
          "description": "Optional. Filter for series."
        },
        {
          "name": "isNews",
          "schema": "boolean",
          "description": "Optional. Filter for news."
        },
        {
          "name": "isKids",
          "schema": "boolean",
          "description": "Optional. Filter for kids."
        },
        {
          "name": "isSports",
          "schema": "boolean",
          "description": "Optional. Filter for sports."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "isFavorite",
          "schema": "boolean",
          "description": "Optional. Filter by channels that are favorites, or not."
        },
        {
          "name": "isLiked",
          "schema": "boolean",
          "description": "Optional. Filter by channels that are liked, or not."
        },
        {
          "name": "isDisliked",
          "schema": "boolean",
          "description": "Optional. Filter by channels that are disliked, or not."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional. Include image information in output."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. The max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "\"Optional. The image types to include in the output."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. Include user data."
        },
        {
          "name": "sortBy",
          "schema": "array",
          "description": "Optional. Key to sort by."
        },
        {
          "name": "sortOrder",
          "schema": "string",
          "description": "Optional. Sort order."
        },
        {
          "name": "enableFavoriteSorting",
          "schema": "boolean",
          "description": "Optional. Incorporate favorite and like status into channel sorting."
        },
        {
          "name": "addCurrentProgram",
          "schema": "boolean",
          "description": "Optional. Adds current program info to each channel."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/Channels/{channelId}",
      "method": "getChannel",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets a live tv channel.",
      "parameters": [
        {
          "name": "channelId",
          "schema": "string",
          "required": true,
          "description": "Channel id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Attach user data."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is strictly used as a data transfer object from the api layer.\r\nThis holds information about a BaseItem in a format that is convenient for the client."
        }
      ]
    },
    {
      "url": "/LiveTv/GuideInfo",
      "method": "getGuideInfo",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Get guid info.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/Info",
      "method": "getLiveTvInfo",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets available live tv services.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/ListingProviders",
      "method": "deleteListingProvider",
      "httpMethod": "delete",
      "tag": "LiveTv",
      "description": "Delete listing provider.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "Listing provider id."
        }
      ],
      "responses": []
    },
    {
      "url": "/LiveTv/ListingProviders",
      "method": "addListingProvider",
      "httpMethod": "post",
      "tag": "LiveTv",
      "description": "Adds a listings provider.",
      "parameters": [
        {
          "name": "pw",
          "schema": "string",
          "description": "Password."
        },
        {
          "name": "validateListings",
          "schema": "boolean",
          "description": "Validate listings."
        },
        {
          "name": "validateLogin",
          "schema": "boolean",
          "description": "Validate login."
        },
        {
          "name": "ChannelMappings",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Country",
          "schema": "string",
          "description": ""
        },
        {
          "name": "EnableAllTuners",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnabledTuners",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "KidsCategories",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ListingsId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MovieCategories",
          "schema": "array",
          "description": ""
        },
        {
          "name": "MoviePrefix",
          "schema": "string",
          "description": ""
        },
        {
          "name": "NewsCategories",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Password",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Path",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PreferredLanguage",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SportsCategories",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "UserAgent",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Username",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ZipCode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/ListingProviders/Default",
      "method": "getDefaultListingProvider",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets default listings provider info.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/ListingProviders/Lineups",
      "method": "getLineups",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets available lineups.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "Provider id."
        },
        {
          "name": "type",
          "schema": "string",
          "description": "Provider type."
        },
        {
          "name": "location",
          "schema": "string",
          "description": "Location."
        },
        {
          "name": "country",
          "schema": "string",
          "description": "Country."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/ListingProviders/SchedulesDirect/Countries",
      "method": "getSchedulesDirectCountries",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets available countries.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/LiveRecordings/{recordingId}/stream",
      "method": "getLiveRecordingFile",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets a live tv recording stream.",
      "parameters": [
        {
          "name": "recordingId",
          "schema": "string",
          "required": true,
          "description": "Recording id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/LiveStreamFiles/{streamId}/stream.{container}",
      "method": "getLiveStreamFile",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets a live tv channel stream.",
      "parameters": [
        {
          "name": "streamId",
          "schema": "string",
          "required": true,
          "description": "Stream id."
        },
        {
          "name": "container",
          "schema": "string",
          "required": true,
          "description": "Container type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/Programs",
      "method": "getLiveTvPrograms",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets available live tv epgs.",
      "parameters": [
        {
          "name": "channelIds",
          "schema": "array",
          "description": "The channels to return guide information for."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id."
        },
        {
          "name": "minStartDate",
          "schema": "string",
          "description": "Optional. The minimum premiere start date."
        },
        {
          "name": "hasAired",
          "schema": "boolean",
          "description": "Optional. Filter by programs that have completed airing, or not."
        },
        {
          "name": "isAiring",
          "schema": "boolean",
          "description": "Optional. Filter by programs that are currently airing, or not."
        },
        {
          "name": "maxStartDate",
          "schema": "string",
          "description": "Optional. The maximum premiere start date."
        },
        {
          "name": "minEndDate",
          "schema": "string",
          "description": "Optional. The minimum premiere end date."
        },
        {
          "name": "maxEndDate",
          "schema": "string",
          "description": "Optional. The maximum premiere end date."
        },
        {
          "name": "isMovie",
          "schema": "boolean",
          "description": "Optional. Filter for movies."
        },
        {
          "name": "isSeries",
          "schema": "boolean",
          "description": "Optional. Filter for series."
        },
        {
          "name": "isNews",
          "schema": "boolean",
          "description": "Optional. Filter for news."
        },
        {
          "name": "isKids",
          "schema": "boolean",
          "description": "Optional. Filter for kids."
        },
        {
          "name": "isSports",
          "schema": "boolean",
          "description": "Optional. Filter for sports."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "sortBy",
          "schema": "string",
          "description": "Optional. Specify one or more sort orders, comma delimited. Options: Name, StartDate."
        },
        {
          "name": "sortOrder",
          "schema": "string",
          "description": "Sort Order - Ascending,Descending."
        },
        {
          "name": "genres",
          "schema": "array",
          "description": "The genres to return guide information for."
        },
        {
          "name": "genreIds",
          "schema": "array",
          "description": "The genre ids to return guide information for."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional. Include image information in output."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. The max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. Include user data."
        },
        {
          "name": "seriesTimerId",
          "schema": "string",
          "description": "Optional. Filter by series timer id."
        },
        {
          "name": "librarySeriesId",
          "schema": "string",
          "description": "Optional. Filter by library series id."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "enableTotalRecordCount",
          "schema": "boolean",
          "description": "Retrieve total record count."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/Programs",
      "method": "getPrograms",
      "httpMethod": "post",
      "tag": "LiveTv",
      "description": "Gets available live tv epgs.",
      "parameters": [
        {
          "name": "ChannelIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "EnableImageTypes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "EnableImages",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableTotalRecordCount",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableUserData",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Fields",
          "schema": "array",
          "description": ""
        },
        {
          "name": "GenreIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Genres",
          "schema": "array",
          "description": ""
        },
        {
          "name": "HasAired",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ImageTypeLimit",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "IsAiring",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsKids",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsMovie",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsNews",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsSeries",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsSports",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "LibrarySeriesId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Limit",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxEndDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MaxStartDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MinEndDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MinStartDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SeriesTimerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SortBy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SortOrder",
          "schema": "string",
          "description": ""
        },
        {
          "name": "StartIndex",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "UserId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/Programs/Recommended",
      "method": "getRecommendedPrograms",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets recommended live tv epgs.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. filter by user id."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "isAiring",
          "schema": "boolean",
          "description": "Optional. Filter by programs that are currently airing, or not."
        },
        {
          "name": "hasAired",
          "schema": "boolean",
          "description": "Optional. Filter by programs that have completed airing, or not."
        },
        {
          "name": "isSeries",
          "schema": "boolean",
          "description": "Optional. Filter for series."
        },
        {
          "name": "isMovie",
          "schema": "boolean",
          "description": "Optional. Filter for movies."
        },
        {
          "name": "isNews",
          "schema": "boolean",
          "description": "Optional. Filter for news."
        },
        {
          "name": "isKids",
          "schema": "boolean",
          "description": "Optional. Filter for kids."
        },
        {
          "name": "isSports",
          "schema": "boolean",
          "description": "Optional. Filter for sports."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional. Include image information in output."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. The max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "genreIds",
          "schema": "array",
          "description": "The genres to return guide information for."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. include user data."
        },
        {
          "name": "enableTotalRecordCount",
          "schema": "boolean",
          "description": "Retrieve total record count."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/Programs/{programId}",
      "method": "getProgram",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets a live tv program.",
      "parameters": [
        {
          "name": "programId",
          "schema": "string",
          "required": true,
          "description": "Program id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Attach user data."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is strictly used as a data transfer object from the api layer.\r\nThis holds information about a BaseItem in a format that is convenient for the client."
        }
      ]
    },
    {
      "url": "/LiveTv/Recordings",
      "method": "getRecordings",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets live tv recordings.",
      "parameters": [
        {
          "name": "channelId",
          "schema": "string",
          "description": "Optional. Filter by channel id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user and attach user data."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "status",
          "schema": "string",
          "description": "Optional. Filter by recording status."
        },
        {
          "name": "isInProgress",
          "schema": "boolean",
          "description": "Optional. Filter by recordings that are in progress, or not."
        },
        {
          "name": "seriesTimerId",
          "schema": "string",
          "description": "Optional. Filter by recordings belonging to a series timer."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional. Include image information in output."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. The max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. Include user data."
        },
        {
          "name": "isMovie",
          "schema": "boolean",
          "description": "Optional. Filter for movies."
        },
        {
          "name": "isSeries",
          "schema": "boolean",
          "description": "Optional. Filter for series."
        },
        {
          "name": "isKids",
          "schema": "boolean",
          "description": "Optional. Filter for kids."
        },
        {
          "name": "isSports",
          "schema": "boolean",
          "description": "Optional. Filter for sports."
        },
        {
          "name": "isNews",
          "schema": "boolean",
          "description": "Optional. Filter for news."
        },
        {
          "name": "isLibraryItem",
          "schema": "boolean",
          "description": "Optional. Filter for is library item."
        },
        {
          "name": "enableTotalRecordCount",
          "schema": "boolean",
          "description": "Optional. Return total record count."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/Recordings/Folders",
      "method": "getRecordingFolders",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets recording folders.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user and attach user data."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/Recordings/Groups",
      "method": "getRecordingGroups",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets live tv recording groups.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user and attach user data."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/Recordings/Groups/{groupId}",
      "method": "getRecordingGroup",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Get recording group.",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "Group id."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/Recordings/Series",
      "method": "getRecordingsSeries",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets live tv recording series.",
      "parameters": [
        {
          "name": "channelId",
          "schema": "string",
          "description": "Optional. Filter by channel id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user and attach user data."
        },
        {
          "name": "groupId",
          "schema": "string",
          "description": "Optional. Filter by recording group."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "status",
          "schema": "string",
          "description": "Optional. Filter by recording status."
        },
        {
          "name": "isInProgress",
          "schema": "boolean",
          "description": "Optional. Filter by recordings that are in progress, or not."
        },
        {
          "name": "seriesTimerId",
          "schema": "string",
          "description": "Optional. Filter by recordings belonging to a series timer."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional. Include image information in output."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. The max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. Include user data."
        },
        {
          "name": "enableTotalRecordCount",
          "schema": "boolean",
          "description": "Optional. Return total record count."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/Recordings/{recordingId}",
      "method": "deleteRecording",
      "httpMethod": "delete",
      "tag": "LiveTv",
      "description": "Deletes a live tv recording.",
      "parameters": [
        {
          "name": "recordingId",
          "schema": "string",
          "required": true,
          "description": "Recording id."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/Recordings/{recordingId}",
      "method": "getRecording",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets a live tv recording.",
      "parameters": [
        {
          "name": "recordingId",
          "schema": "string",
          "required": true,
          "description": "Recording id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Attach user data."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is strictly used as a data transfer object from the api layer.\r\nThis holds information about a BaseItem in a format that is convenient for the client."
        }
      ]
    },
    {
      "url": "/LiveTv/SeriesTimers",
      "method": "getSeriesTimers",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets live tv series timers.",
      "parameters": [
        {
          "name": "sortBy",
          "schema": "string",
          "description": "Optional. Sort by SortName or Priority."
        },
        {
          "name": "sortOrder",
          "schema": "string",
          "description": "Optional. Sort in Ascending or Descending order."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/SeriesTimers",
      "method": "createSeriesTimer",
      "httpMethod": "post",
      "tag": "LiveTv",
      "description": "Creates a live tv series timer.",
      "parameters": [
        {
          "name": "ChannelId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ChannelName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ChannelPrimaryImageTag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "DayPattern",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Days",
          "schema": "array",
          "description": ""
        },
        {
          "name": "EndDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExternalChannelId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExternalId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExternalProgramId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ImageTags",
          "schema": "object",
          "description": ""
        },
        {
          "name": "IsPostPaddingRequired",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsPrePaddingRequired",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "KeepUntil",
          "schema": "string",
          "description": ""
        },
        {
          "name": "KeepUpTo",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Overview",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentBackdropImageTags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ParentBackdropItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentPrimaryImageItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentPrimaryImageTag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentThumbImageTag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentThumbItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PostPaddingSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "PrePaddingSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ProgramId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "RecordAnyChannel",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "RecordAnyTime",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "RecordNewOnly",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ServerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ServiceName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SkipEpisodesInLibrary",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "StartDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/LiveTv/SeriesTimers/{timerId}",
      "method": "cancelSeriesTimer",
      "httpMethod": "delete",
      "tag": "LiveTv",
      "description": "Cancels a live tv series timer.",
      "parameters": [
        {
          "name": "timerId",
          "schema": "string",
          "required": true,
          "description": "Timer id."
        }
      ],
      "responses": []
    },
    {
      "url": "/LiveTv/SeriesTimers/{timerId}",
      "method": "getSeriesTimer",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets a live tv series timer.",
      "parameters": [
        {
          "name": "timerId",
          "schema": "string",
          "required": true,
          "description": "Timer id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class SeriesTimerInfoDto."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/SeriesTimers/{timerId}",
      "method": "updateSeriesTimer",
      "httpMethod": "post",
      "tag": "LiveTv",
      "description": "Updates a live tv series timer.",
      "parameters": [
        {
          "name": "timerId",
          "schema": "string",
          "required": true,
          "description": "Timer id."
        },
        {
          "name": "ChannelId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ChannelName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ChannelPrimaryImageTag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "DayPattern",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Days",
          "schema": "array",
          "description": ""
        },
        {
          "name": "EndDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExternalChannelId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExternalId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExternalProgramId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ImageTags",
          "schema": "object",
          "description": ""
        },
        {
          "name": "IsPostPaddingRequired",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsPrePaddingRequired",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "KeepUntil",
          "schema": "string",
          "description": ""
        },
        {
          "name": "KeepUpTo",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Overview",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentBackdropImageTags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ParentBackdropItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentPrimaryImageItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentPrimaryImageTag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentThumbImageTag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentThumbItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PostPaddingSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "PrePaddingSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ProgramId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "RecordAnyChannel",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "RecordAnyTime",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "RecordNewOnly",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ServerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ServiceName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SkipEpisodesInLibrary",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "StartDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/LiveTv/Timers",
      "method": "getTimers",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets the live tv timers.",
      "parameters": [
        {
          "name": "channelId",
          "schema": "string",
          "description": "Optional. Filter by channel id."
        },
        {
          "name": "seriesTimerId",
          "schema": "string",
          "description": "Optional. Filter by timers belonging to a series timer."
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "description": "Optional. Filter by timers that are active."
        },
        {
          "name": "isScheduled",
          "schema": "boolean",
          "description": "Optional. Filter by timers that are scheduled."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/Timers",
      "method": "createTimer",
      "httpMethod": "post",
      "tag": "LiveTv",
      "description": "Creates a live tv timer.",
      "parameters": [
        {
          "name": "ChannelId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ChannelName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ChannelPrimaryImageTag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "EndDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExternalChannelId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExternalId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExternalProgramId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExternalSeriesTimerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "IsPostPaddingRequired",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsPrePaddingRequired",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "KeepUntil",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Overview",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentBackdropImageTags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ParentBackdropItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PostPaddingSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "PrePaddingSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ProgramId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ProgramInfo",
          "schema": "object",
          "description": ""
        },
        {
          "name": "RunTimeTicks",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "SeriesTimerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ServerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ServiceName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "StartDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Status",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/LiveTv/Timers/Defaults",
      "method": "getDefaultTimer",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets the default values for a new timer.",
      "parameters": [
        {
          "name": "programId",
          "schema": "string",
          "description": "Optional. To attach default values based on a program."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class SeriesTimerInfoDto."
        }
      ]
    },
    {
      "url": "/LiveTv/Timers/{timerId}",
      "method": "cancelTimer",
      "httpMethod": "delete",
      "tag": "LiveTv",
      "description": "Cancels a live tv timer.",
      "parameters": [
        {
          "name": "timerId",
          "schema": "string",
          "required": true,
          "description": "Timer id."
        }
      ],
      "responses": []
    },
    {
      "url": "/LiveTv/Timers/{timerId}",
      "method": "getTimer",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Gets a timer.",
      "parameters": [
        {
          "name": "timerId",
          "schema": "string",
          "required": true,
          "description": "Timer id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/Timers/{timerId}",
      "method": "updateTimer",
      "httpMethod": "post",
      "tag": "LiveTv",
      "description": "Updates a live tv timer.",
      "parameters": [
        {
          "name": "timerId",
          "schema": "string",
          "required": true,
          "description": "Timer id."
        },
        {
          "name": "ChannelId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ChannelName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ChannelPrimaryImageTag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "EndDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExternalChannelId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExternalId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExternalProgramId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ExternalSeriesTimerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "IsPostPaddingRequired",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsPrePaddingRequired",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "KeepUntil",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Overview",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ParentBackdropImageTags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ParentBackdropItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PostPaddingSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "PrePaddingSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ProgramId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ProgramInfo",
          "schema": "object",
          "description": ""
        },
        {
          "name": "RunTimeTicks",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "SeriesTimerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ServerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ServiceName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "StartDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Status",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/LiveTv/TunerHosts",
      "method": "deleteTunerHost",
      "httpMethod": "delete",
      "tag": "LiveTv",
      "description": "Deletes a tuner host.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "Tuner host id."
        }
      ],
      "responses": []
    },
    {
      "url": "/LiveTv/TunerHosts",
      "method": "addTunerHost",
      "httpMethod": "post",
      "tag": "LiveTv",
      "description": "Adds a tuner host.",
      "parameters": [
        {
          "name": "AllowHWTranscoding",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "DeviceId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "EnableStreamLooping",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "FriendlyName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ImportFavoritesOnly",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Source",
          "schema": "string",
          "description": ""
        },
        {
          "name": "TunerCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "UserAgent",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/TunerHosts/Types",
      "method": "getTunerHostTypes",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Get tuner host types.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/Tuners/Discover",
      "method": "discoverTuners",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Discover tuners.",
      "parameters": [
        {
          "name": "newDevicesOnly",
          "schema": "boolean",
          "description": "Only discover new tuners."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/Tuners/Discvover",
      "method": "discvoverTuners",
      "httpMethod": "get",
      "tag": "LiveTv",
      "description": "Discover tuners.",
      "parameters": [
        {
          "name": "newDevicesOnly",
          "schema": "boolean",
          "description": "Only discover new tuners."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/LiveTv/Tuners/{tunerId}/Reset",
      "method": "resetTuner",
      "httpMethod": "post",
      "tag": "LiveTv",
      "description": "Resets a tv tuner.",
      "parameters": [
        {
          "name": "tunerId",
          "schema": "string",
          "required": true,
          "description": "Tuner id."
        }
      ],
      "responses": []
    },
    {
      "url": "/Localization/Countries",
      "method": "getCountries",
      "httpMethod": "get",
      "tag": "Localization",
      "description": "Gets known countries.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Localization/Cultures",
      "method": "getCultures",
      "httpMethod": "get",
      "tag": "Localization",
      "description": "Gets known cultures.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Localization/Options",
      "method": "getLocalizationOptions",
      "httpMethod": "get",
      "tag": "Localization",
      "description": "Gets localization options.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Localization/ParentalRatings",
      "method": "getParentalRatings",
      "httpMethod": "get",
      "tag": "Localization",
      "description": "Gets known parental ratings.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Movies/Recommendations",
      "method": "getMovieRecommendations",
      "httpMethod": "get",
      "tag": "Movies",
      "description": "Gets movie recommendations.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": "Specify this to localize the search to a specific item or folder. Omit to use the root."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. The fields to return."
        },
        {
          "name": "categoryLimit",
          "schema": "integer",
          "description": "The max number of categories to return."
        },
        {
          "name": "itemLimit",
          "schema": "integer",
          "description": "The max number of items to return per category."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Movies/{itemId}/Similar",
      "method": "getSimilarMovies",
      "httpMethod": "get",
      "tag": "Library",
      "description": "Gets similar items.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "excludeArtistIds",
          "schema": "array",
          "description": "Exclude artist ids."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/MusicGenres",
      "method": "getMusicGenres",
      "httpMethod": "get",
      "tag": "MusicGenres",
      "description": "Gets all music genres from a given item, folder, or the entire library.",
      "parameters": [
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "searchTerm",
          "schema": "string",
          "description": "The search term."
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": "Specify this to localize the search to a specific item or folder. Omit to use the root."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "excludeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited."
        },
        {
          "name": "includeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered in based on item type. This allows multiple, comma delimited."
        },
        {
          "name": "isFavorite",
          "schema": "boolean",
          "description": "Optional filter by items that are marked as favorite, or not."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional, the max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "User id."
        },
        {
          "name": "nameStartsWithOrGreater",
          "schema": "string",
          "description": "Optional filter by items whose name is sorted equally or greater than a given input string."
        },
        {
          "name": "nameStartsWith",
          "schema": "string",
          "description": "Optional filter by items whose name is sorted equally than a given input string."
        },
        {
          "name": "nameLessThan",
          "schema": "string",
          "description": "Optional filter by items whose name is equally or lesser than a given input string."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional, include image information in output."
        },
        {
          "name": "enableTotalRecordCount",
          "schema": "boolean",
          "description": "Optional. Include total record count."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/MusicGenres/{genreName}",
      "method": "getMusicGenre",
      "httpMethod": "get",
      "tag": "MusicGenres",
      "description": "Gets a music genre, by name.",
      "parameters": [
        {
          "name": "genreName",
          "schema": "string",
          "required": true,
          "description": "The genre name."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is strictly used as a data transfer object from the api layer.\r\nThis holds information about a BaseItem in a format that is convenient for the client."
        }
      ]
    },
    {
      "url": "/MusicGenres/{id}/InstantMix",
      "method": "getInstantMixFromMusicGenres",
      "httpMethod": "get",
      "tag": "InstantMix",
      "description": "Creates an instant playlist based on a given song.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional. Include image information in output."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. Include user data."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. The max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/MusicGenres/{name}/Images/{imageType}",
      "method": "getMusicGenreImage",
      "httpMethod": "get",
      "tag": "Image",
      "description": "Get music genre image by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Music genre name."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "description": "Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/MusicGenres/{name}/Images/{imageType}",
      "method": "headMusicGenreImage",
      "httpMethod": "head",
      "tag": "Image",
      "description": "Get music genre image by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Music genre name."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "description": "Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/MusicGenres/{name}/Images/{imageType}/{imageIndex}",
      "method": "getMusicGenreImageByIndex",
      "httpMethod": "get",
      "tag": "Image",
      "description": "Get music genre image by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Music genre name."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "Image index."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/MusicGenres/{name}/Images/{imageType}/{imageIndex}",
      "method": "headMusicGenreImageByIndex",
      "httpMethod": "head",
      "tag": "Image",
      "description": "Get music genre image by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Music genre name."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "Image index."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/MusicGenres/{name}/InstantMix",
      "method": "getInstantMixFromMusicGenre",
      "httpMethod": "get",
      "tag": "InstantMix",
      "description": "Creates an instant playlist based on a given song.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The genre name."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional. Include image information in output."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. Include user data."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. The max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Notifications/Admin",
      "method": "createAdminNotification",
      "httpMethod": "post",
      "tag": "Notifications",
      "description": "Sends a notification to all admins.",
      "parameters": [
        {
          "name": "url",
          "schema": "string",
          "description": "The URL of the notification."
        },
        {
          "name": "level",
          "schema": "string",
          "description": "The level of the notification."
        },
        {
          "name": "name",
          "schema": "string",
          "description": "The name of the notification."
        },
        {
          "name": "description",
          "schema": "string",
          "description": "The description of the notification."
        }
      ],
      "responses": []
    },
    {
      "url": "/Notifications/Services",
      "method": "getNotificationServices",
      "httpMethod": "get",
      "tag": "Notifications",
      "description": "Gets notification services.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Notifications/Types",
      "method": "getNotificationTypes",
      "httpMethod": "get",
      "tag": "Notifications",
      "description": "Gets notification types.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Notifications/{userId}",
      "method": "getNotifications",
      "httpMethod": "get",
      "tag": "Notifications",
      "description": "Gets a user's notifications.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of notifications with the total record count for pagination."
        }
      ]
    },
    {
      "url": "/Notifications/{userId}/Read",
      "method": "setRead",
      "httpMethod": "post",
      "tag": "Notifications",
      "description": "Sets notifications as read.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/Notifications/{userId}/Summary",
      "method": "getNotificationsSummary",
      "httpMethod": "get",
      "tag": "Notifications",
      "description": "Gets a user's notification summary.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The notification summary DTO."
        }
      ]
    },
    {
      "url": "/Notifications/{userId}/Unread",
      "method": "setUnread",
      "httpMethod": "post",
      "tag": "Notifications",
      "description": "Sets notifications as unread.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/Packages",
      "method": "getPackages",
      "httpMethod": "get",
      "tag": "Package",
      "description": "Gets available packages.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Packages/Installed/{name}",
      "method": "installPackage",
      "httpMethod": "post",
      "tag": "Package",
      "description": "Installs a package.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Package name."
        },
        {
          "name": "assemblyGuid",
          "schema": "string",
          "description": "GUID of the associated assembly."
        },
        {
          "name": "version",
          "schema": "string",
          "description": "Optional version. Defaults to latest version."
        },
        {
          "name": "repositoryUrl",
          "schema": "string",
          "description": "Optional. Specify the repository to install from."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Packages/Installing/{packageId}",
      "method": "cancelPackageInstallation",
      "httpMethod": "delete",
      "tag": "Package",
      "description": "Cancels a package installation.",
      "parameters": [
        {
          "name": "packageId",
          "schema": "string",
          "required": true,
          "description": "Installation Id."
        }
      ],
      "responses": []
    },
    {
      "url": "/Packages/{name}",
      "method": "getPackageInfo",
      "httpMethod": "get",
      "tag": "Package",
      "description": "Gets a package by name or assembly GUID.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the package."
        },
        {
          "name": "assemblyGuid",
          "schema": "string",
          "description": "The GUID of the associated assembly."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class PackageInfo."
        }
      ]
    },
    {
      "url": "/Persons",
      "method": "getPersons",
      "httpMethod": "get",
      "tag": "Persons",
      "description": "Gets all persons.",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "searchTerm",
          "schema": "string",
          "description": "The search term."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "filters",
          "schema": "array",
          "description": "Optional. Specify additional filters to apply."
        },
        {
          "name": "isFavorite",
          "schema": "boolean",
          "description": "Optional filter by items that are marked as favorite, or not. userId is required."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional, include user data."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional, the max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "excludePersonTypes",
          "schema": "array",
          "description": "Optional. If specified results will be filtered to exclude those containing the specified PersonType. Allows multiple, comma-delimited."
        },
        {
          "name": "personTypes",
          "schema": "array",
          "description": "Optional. If specified results will be filtered to include only those containing the specified PersonType. Allows multiple, comma-delimited."
        },
        {
          "name": "appearsInItemId",
          "schema": "string",
          "description": "Optional. If specified, person results will be filtered on items related to said persons."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "User id."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional, include image information in output."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Persons/{name}",
      "method": "getPerson",
      "httpMethod": "get",
      "tag": "Persons",
      "description": "Get person by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Person name."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is strictly used as a data transfer object from the api layer.\r\nThis holds information about a BaseItem in a format that is convenient for the client."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Persons/{name}/Images/{imageType}",
      "method": "getPersonImage",
      "httpMethod": "get",
      "tag": "Image",
      "description": "Get person image by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Person name."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "description": "Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Persons/{name}/Images/{imageType}",
      "method": "headPersonImage",
      "httpMethod": "head",
      "tag": "Image",
      "description": "Get person image by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Person name."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "description": "Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Persons/{name}/Images/{imageType}/{imageIndex}",
      "method": "getPersonImageByIndex",
      "httpMethod": "get",
      "tag": "Image",
      "description": "Get person image by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Person name."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "Image index."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Persons/{name}/Images/{imageType}/{imageIndex}",
      "method": "headPersonImageByIndex",
      "httpMethod": "head",
      "tag": "Image",
      "description": "Get person image by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Person name."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "Image index."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Playback/BitrateTest",
      "method": "getBitrateTestBytes",
      "httpMethod": "get",
      "tag": "MediaInfo",
      "description": "Tests the network with a request with the size of the bitrate.",
      "parameters": [
        {
          "name": "size",
          "schema": "integer",
          "description": "The bitrate. Defaults to 102400."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/Playlists",
      "method": "createPlaylist",
      "httpMethod": "post",
      "tag": "Playlists",
      "description": "Creates a new playlist.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": "The playlist name."
        },
        {
          "name": "ids",
          "schema": "array",
          "description": "The item ids."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "The user id."
        },
        {
          "name": "mediaType",
          "schema": "string",
          "description": "The media type."
        },
        {
          "name": "Ids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "MediaType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "UserId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Playlists/{id}/InstantMix",
      "method": "getInstantMixFromPlaylist",
      "httpMethod": "get",
      "tag": "InstantMix",
      "description": "Creates an instant playlist based on a given song.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional. Include image information in output."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. Include user data."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. The max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Playlists/{playlistId}/Items",
      "method": "removeFromPlaylist",
      "httpMethod": "delete",
      "tag": "Playlists",
      "description": "Removes items from a playlist.",
      "parameters": [
        {
          "name": "playlistId",
          "schema": "string",
          "required": true,
          "description": "The playlist id."
        },
        {
          "name": "entryIds",
          "schema": "array",
          "description": "The item ids, comma delimited."
        }
      ],
      "responses": []
    },
    {
      "url": "/Playlists/{playlistId}/Items",
      "method": "getPlaylistItems",
      "httpMethod": "get",
      "tag": "Playlists",
      "description": "Gets the original items of a playlist.",
      "parameters": [
        {
          "name": "playlistId",
          "schema": "string",
          "required": true,
          "description": "The playlist id."
        },
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional. Include image information in output."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. Include user data."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. The max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Playlists/{playlistId}/Items",
      "method": "addToPlaylist",
      "httpMethod": "post",
      "tag": "Playlists",
      "description": "Adds items to a playlist.",
      "parameters": [
        {
          "name": "playlistId",
          "schema": "string",
          "required": true,
          "description": "The playlist id."
        },
        {
          "name": "ids",
          "schema": "array",
          "description": "Item id, comma delimited."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "The userId."
        }
      ],
      "responses": []
    },
    {
      "url": "/Playlists/{playlistId}/Items/{itemId}/Move/{newIndex}",
      "method": "moveItem",
      "httpMethod": "post",
      "tag": "Playlists",
      "description": "Moves a playlist item.",
      "parameters": [
        {
          "name": "playlistId",
          "schema": "string",
          "required": true,
          "description": "The playlist id."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "newIndex",
          "schema": "integer",
          "required": true,
          "description": "The new index."
        }
      ],
      "responses": []
    },
    {
      "url": "/Plugins",
      "method": "getPlugins",
      "httpMethod": "get",
      "tag": "Plugins",
      "description": "Gets a list of currently installed plugins.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Plugins/SecurityInfo",
      "method": "updatePluginSecurityInfo",
      "httpMethod": "post",
      "tag": "Plugins",
      "description": "Updates plugin security info.",
      "parameters": [
        {
          "name": "IsMbSupporter",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "SupporterKey",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/Plugins/{pluginId}",
      "method": "uninstallPlugin",
      "httpMethod": "delete",
      "tag": "Plugins",
      "description": "Uninstalls a plugin.",
      "parameters": [
        {
          "name": "pluginId",
          "schema": "string",
          "required": true,
          "description": "Plugin id."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Plugins/{pluginId}/Configuration",
      "method": "getPluginConfiguration",
      "httpMethod": "get",
      "tag": "Plugins",
      "description": "Gets plugin configuration.",
      "parameters": [
        {
          "name": "pluginId",
          "schema": "string",
          "required": true,
          "description": "Plugin id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class BasePluginConfiguration."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Plugins/{pluginId}/Configuration",
      "method": "updatePluginConfiguration",
      "httpMethod": "post",
      "tag": "Plugins",
      "description": "Updates plugin configuration.",
      "parameters": [
        {
          "name": "pluginId",
          "schema": "string",
          "required": true,
          "description": "Plugin id."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Plugins/{pluginId}/Manifest",
      "method": "getPluginManifest",
      "httpMethod": "post",
      "tag": "Plugins",
      "description": "Gets a plugin's manifest.",
      "parameters": [
        {
          "name": "pluginId",
          "schema": "string",
          "required": true,
          "description": "Plugin id."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Plugins/{pluginId}/{version}",
      "method": "uninstallPluginByVersion",
      "httpMethod": "delete",
      "tag": "Plugins",
      "description": "Uninstalls a plugin by version.",
      "parameters": [
        {
          "name": "pluginId",
          "schema": "string",
          "required": true,
          "description": "Plugin id."
        },
        {
          "name": "version",
          "schema": "object",
          "required": true,
          "description": "Plugin version."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Plugins/{pluginId}/{version}/Disable",
      "method": "disablePlugin",
      "httpMethod": "post",
      "tag": "Plugins",
      "description": "Disable a plugin.",
      "parameters": [
        {
          "name": "pluginId",
          "schema": "string",
          "required": true,
          "description": "Plugin id."
        },
        {
          "name": "version",
          "schema": "object",
          "required": true,
          "description": "Plugin version."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Plugins/{pluginId}/{version}/Enable",
      "method": "enablePlugin",
      "httpMethod": "post",
      "tag": "Plugins",
      "description": "Enables a disabled plugin.",
      "parameters": [
        {
          "name": "pluginId",
          "schema": "string",
          "required": true,
          "description": "Plugin id."
        },
        {
          "name": "version",
          "schema": "object",
          "required": true,
          "description": "Plugin version."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Plugins/{pluginId}/{version}/Image",
      "method": "getPluginImage",
      "httpMethod": "get",
      "tag": "Plugins",
      "description": "Gets a plugin's image.",
      "parameters": [
        {
          "name": "pluginId",
          "schema": "string",
          "required": true,
          "description": "Plugin id."
        },
        {
          "name": "version",
          "schema": "object",
          "required": true,
          "description": "Plugin version."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Providers/Subtitles/Subtitles/{id}",
      "method": "getRemoteSubtitles",
      "httpMethod": "get",
      "tag": "Subtitle",
      "description": "Gets the remote subtitles.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The item id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/QuickConnect/Activate",
      "method": "activate",
      "httpMethod": "post",
      "tag": "QuickConnect",
      "description": "Temporarily activates quick connect for five minutes.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/QuickConnect/Authorize",
      "method": "authorize",
      "httpMethod": "post",
      "tag": "QuickConnect",
      "description": "Authorizes a pending quick connect request.",
      "parameters": [
        {
          "name": "code",
          "schema": "string",
          "required": true,
          "description": "Quick connect code to authorize."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/QuickConnect/Available",
      "method": "available",
      "httpMethod": "post",
      "tag": "QuickConnect",
      "description": "Enables or disables quick connect.",
      "parameters": [
        {
          "name": "status",
          "schema": "string",
          "description": "New MediaBrowser.Model.QuickConnect.QuickConnectState."
        }
      ],
      "responses": []
    },
    {
      "url": "/QuickConnect/Connect",
      "method": "connect",
      "httpMethod": "get",
      "tag": "QuickConnect",
      "description": "Attempts to retrieve authentication information.",
      "parameters": [
        {
          "name": "secret",
          "schema": "string",
          "required": true,
          "description": "Secret previously returned from the Initiate endpoint."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Stores the result of an incoming quick connect request."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/QuickConnect/Deauthorize",
      "method": "deauthorize",
      "httpMethod": "post",
      "tag": "QuickConnect",
      "description": "Deauthorize all quick connect devices for the current user.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/QuickConnect/Initiate",
      "method": "initiate",
      "httpMethod": "get",
      "tag": "QuickConnect",
      "description": "Initiate a new quick connect request.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Stores the result of an incoming quick connect request."
        }
      ]
    },
    {
      "url": "/QuickConnect/Status",
      "method": "getStatus",
      "httpMethod": "get",
      "tag": "QuickConnect",
      "description": "Gets the current quick connect state.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Quick connect state."
        }
      ]
    },
    {
      "url": "/Repositories",
      "method": "getRepositories",
      "httpMethod": "get",
      "tag": "Package",
      "description": "Gets all package repositories.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Repositories",
      "method": "setRepositories",
      "httpMethod": "post",
      "tag": "Package",
      "description": "Sets the enabled and existing package repositories.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/ScheduledTasks",
      "method": "getTasks",
      "httpMethod": "get",
      "tag": "ScheduledTasks",
      "description": "Get tasks.",
      "parameters": [
        {
          "name": "isHidden",
          "schema": "boolean",
          "description": "Optional filter tasks that are hidden, or not."
        },
        {
          "name": "isEnabled",
          "schema": "boolean",
          "description": "Optional filter tasks that are enabled, or not."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ScheduledTasks/Running/{taskId}",
      "method": "stopTask",
      "httpMethod": "delete",
      "tag": "ScheduledTasks",
      "description": "Stop specified task.",
      "parameters": [
        {
          "name": "taskId",
          "schema": "string",
          "required": true,
          "description": "Task Id."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ScheduledTasks/Running/{taskId}",
      "method": "startTask",
      "httpMethod": "post",
      "tag": "ScheduledTasks",
      "description": "Start specified task.",
      "parameters": [
        {
          "name": "taskId",
          "schema": "string",
          "required": true,
          "description": "Task Id."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ScheduledTasks/{taskId}",
      "method": "getTask",
      "httpMethod": "get",
      "tag": "ScheduledTasks",
      "description": "Get task by id.",
      "parameters": [
        {
          "name": "taskId",
          "schema": "string",
          "required": true,
          "description": "Task Id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class TaskInfo."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ScheduledTasks/{taskId}/Triggers",
      "method": "updateTask",
      "httpMethod": "post",
      "tag": "ScheduledTasks",
      "description": "Update specified task triggers.",
      "parameters": [
        {
          "name": "taskId",
          "schema": "string",
          "required": true,
          "description": "Task Id."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Search/Hints",
      "method": "get",
      "httpMethod": "get",
      "tag": "Search",
      "description": "Gets the search hint result.",
      "parameters": [
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Supply a user id to search within a user's library or omit to search all."
        },
        {
          "name": "searchTerm",
          "schema": "string",
          "required": true,
          "description": "The search term to filter on."
        },
        {
          "name": "includeItemTypes",
          "schema": "array",
          "description": "If specified, only results with the specified item types are returned. This allows multiple, comma delimeted."
        },
        {
          "name": "excludeItemTypes",
          "schema": "array",
          "description": "If specified, results with these item types are filtered out. This allows multiple, comma delimeted."
        },
        {
          "name": "mediaTypes",
          "schema": "array",
          "description": "If specified, only results with the specified media types are returned. This allows multiple, comma delimeted."
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": "If specified, only children of the parent are returned."
        },
        {
          "name": "isMovie",
          "schema": "boolean",
          "description": "Optional filter for movies."
        },
        {
          "name": "isSeries",
          "schema": "boolean",
          "description": "Optional filter for series."
        },
        {
          "name": "isNews",
          "schema": "boolean",
          "description": "Optional filter for news."
        },
        {
          "name": "isKids",
          "schema": "boolean",
          "description": "Optional filter for kids."
        },
        {
          "name": "isSports",
          "schema": "boolean",
          "description": "Optional filter for sports."
        },
        {
          "name": "includePeople",
          "schema": "boolean",
          "description": "Optional filter whether to include people."
        },
        {
          "name": "includeMedia",
          "schema": "boolean",
          "description": "Optional filter whether to include media."
        },
        {
          "name": "includeGenres",
          "schema": "boolean",
          "description": "Optional filter whether to include genres."
        },
        {
          "name": "includeStudios",
          "schema": "boolean",
          "description": "Optional filter whether to include studios."
        },
        {
          "name": "includeArtists",
          "schema": "boolean",
          "description": "Optional filter whether to include artists."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class SearchHintResult."
        }
      ]
    },
    {
      "url": "/Sessions",
      "method": "getSessions",
      "httpMethod": "get",
      "tag": "Session",
      "description": "Gets a list of sessions.",
      "parameters": [
        {
          "name": "controllableByUserId",
          "schema": "string",
          "description": "Filter by sessions that a given user is allowed to remote control."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "Filter by device Id."
        },
        {
          "name": "activeWithinSeconds",
          "schema": "integer",
          "description": "Optional. Filter by sessions that were active in the last n seconds."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Sessions/Capabilities",
      "method": "postCapabilities",
      "httpMethod": "post",
      "tag": "Session",
      "description": "Updates capabilities for a device.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "The session id."
        },
        {
          "name": "playableMediaTypes",
          "schema": "array",
          "description": "A list of playable media types, comma delimited. Audio, Video, Book, Photo."
        },
        {
          "name": "supportedCommands",
          "schema": "array",
          "description": "A list of supported remote control commands, comma delimited."
        },
        {
          "name": "supportsMediaControl",
          "schema": "boolean",
          "description": "Determines whether media can be played remotely.."
        },
        {
          "name": "supportsSync",
          "schema": "boolean",
          "description": "Determines whether sync is supported."
        },
        {
          "name": "supportsPersistentIdentifier",
          "schema": "boolean",
          "description": "Determines whether the device supports a unique identifier."
        }
      ],
      "responses": []
    },
    {
      "url": "/Sessions/Capabilities/Full",
      "method": "postFullCapabilities",
      "httpMethod": "post",
      "tag": "Session",
      "description": "Updates capabilities for a device.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "The session id."
        },
        {
          "name": "AppStoreUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "DeviceProfile",
          "schema": "object",
          "description": ""
        },
        {
          "name": "IconUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MessageCallbackUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PlayableMediaTypes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "SupportedCommands",
          "schema": "array",
          "description": ""
        },
        {
          "name": "SupportsContentUploading",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "SupportsMediaControl",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "SupportsPersistentIdentifier",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "SupportsSync",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/Sessions/Logout",
      "method": "reportSessionEnded",
      "httpMethod": "post",
      "tag": "Session",
      "description": "Reports that a session has ended.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/Sessions/Playing",
      "method": "reportPlaybackStart",
      "httpMethod": "post",
      "tag": "Playstate",
      "description": "Reports playback has started within a session.",
      "parameters": [
        {
          "name": "AspectRatio",
          "schema": "string",
          "description": ""
        },
        {
          "name": "AudioStreamIndex",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Brightness",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "CanSeek",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsMuted",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsPaused",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Item",
          "schema": "object",
          "description": ""
        },
        {
          "name": "ItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "LiveStreamId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MediaSourceId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "NowPlayingQueue",
          "schema": "array",
          "description": ""
        },
        {
          "name": "PlayMethod",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PlaySessionId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PlaybackStartTimeTicks",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "PlaylistItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PositionTicks",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "RepeatMode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SessionId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SubtitleStreamIndex",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "VolumeLevel",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/Sessions/Playing/Ping",
      "method": "pingPlaybackSession",
      "httpMethod": "post",
      "tag": "Playstate",
      "description": "Pings a playback session.",
      "parameters": [
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "Playback session id."
        }
      ],
      "responses": []
    },
    {
      "url": "/Sessions/Playing/Progress",
      "method": "reportPlaybackProgress",
      "httpMethod": "post",
      "tag": "Playstate",
      "description": "Reports playback progress within a session.",
      "parameters": [
        {
          "name": "AspectRatio",
          "schema": "string",
          "description": ""
        },
        {
          "name": "AudioStreamIndex",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Brightness",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "CanSeek",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsMuted",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsPaused",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Item",
          "schema": "object",
          "description": ""
        },
        {
          "name": "ItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "LiveStreamId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MediaSourceId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "NowPlayingQueue",
          "schema": "array",
          "description": ""
        },
        {
          "name": "PlayMethod",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PlaySessionId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PlaybackStartTimeTicks",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "PlaylistItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PositionTicks",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "RepeatMode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SessionId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SubtitleStreamIndex",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "VolumeLevel",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/Sessions/Playing/Stopped",
      "method": "reportPlaybackStopped",
      "httpMethod": "post",
      "tag": "Playstate",
      "description": "Reports playback has stopped within a session.",
      "parameters": [
        {
          "name": "Failed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Item",
          "schema": "object",
          "description": ""
        },
        {
          "name": "ItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "LiveStreamId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MediaSourceId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "NextMediaType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "NowPlayingQueue",
          "schema": "array",
          "description": ""
        },
        {
          "name": "PlaySessionId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PlaylistItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PositionTicks",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "SessionId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/Sessions/Viewing",
      "method": "reportViewing",
      "httpMethod": "post",
      "tag": "Session",
      "description": "Reports that a session is viewing an item.",
      "parameters": [
        {
          "name": "sessionId",
          "schema": "string",
          "description": "The session id."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        }
      ],
      "responses": []
    },
    {
      "url": "/Sessions/{sessionId}/Command",
      "method": "sendFullGeneralCommand",
      "httpMethod": "post",
      "tag": "Session",
      "description": "Issues a full general command to a client.",
      "parameters": [
        {
          "name": "sessionId",
          "schema": "string",
          "required": true,
          "description": "The session id."
        },
        {
          "name": "Arguments",
          "schema": "object",
          "description": ""
        },
        {
          "name": "ControllingUserId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/Sessions/{sessionId}/Command/{command}",
      "method": "sendGeneralCommand",
      "httpMethod": "post",
      "tag": "Session",
      "description": "Issues a general command to a client.",
      "parameters": [
        {
          "name": "sessionId",
          "schema": "string",
          "required": true,
          "description": "The session id."
        },
        {
          "name": "command",
          "schema": "string",
          "required": true,
          "description": "The command to send."
        }
      ],
      "responses": []
    },
    {
      "url": "/Sessions/{sessionId}/Message",
      "method": "sendMessageCommand",
      "httpMethod": "post",
      "tag": "Session",
      "description": "Issues a command to a client to display a message to the user.",
      "parameters": [
        {
          "name": "sessionId",
          "schema": "string",
          "required": true,
          "description": "The session id."
        },
        {
          "name": "text",
          "schema": "string",
          "required": true,
          "description": "The message test."
        },
        {
          "name": "header",
          "schema": "string",
          "description": "The message header."
        },
        {
          "name": "timeoutMs",
          "schema": "integer",
          "description": "The message timeout. If omitted the user will have to confirm viewing the message."
        }
      ],
      "responses": []
    },
    {
      "url": "/Sessions/{sessionId}/Playing",
      "method": "play",
      "httpMethod": "post",
      "tag": "Session",
      "description": "Instructs a session to play an item.",
      "parameters": [
        {
          "name": "sessionId",
          "schema": "string",
          "required": true,
          "description": "The session id."
        },
        {
          "name": "playCommand",
          "schema": "string",
          "required": true,
          "description": "The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now."
        },
        {
          "name": "itemIds",
          "schema": "array",
          "required": true,
          "description": "The ids of the items to play, comma delimited."
        },
        {
          "name": "startPositionTicks",
          "schema": "integer",
          "description": "The starting position of the first item."
        }
      ],
      "responses": []
    },
    {
      "url": "/Sessions/{sessionId}/Playing/{command}",
      "method": "sendPlaystateCommand",
      "httpMethod": "post",
      "tag": "Session",
      "description": "Issues a playstate command to a client.",
      "parameters": [
        {
          "name": "sessionId",
          "schema": "string",
          "required": true,
          "description": "The session id."
        },
        {
          "name": "command",
          "schema": "string",
          "required": true,
          "description": "The MediaBrowser.Model.Session.PlaystateCommand."
        },
        {
          "name": "seekPositionTicks",
          "schema": "integer",
          "description": "The optional position ticks."
        },
        {
          "name": "controllingUserId",
          "schema": "string",
          "description": "The optional controlling user id."
        }
      ],
      "responses": []
    },
    {
      "url": "/Sessions/{sessionId}/System/{command}",
      "method": "sendSystemCommand",
      "httpMethod": "post",
      "tag": "Session",
      "description": "Issues a system command to a client.",
      "parameters": [
        {
          "name": "sessionId",
          "schema": "string",
          "required": true,
          "description": "The session id."
        },
        {
          "name": "command",
          "schema": "string",
          "required": true,
          "description": "The command to send."
        }
      ],
      "responses": []
    },
    {
      "url": "/Sessions/{sessionId}/User/{userId}",
      "method": "removeUserFromSession",
      "httpMethod": "delete",
      "tag": "Session",
      "description": "Removes an additional user from a session.",
      "parameters": [
        {
          "name": "sessionId",
          "schema": "string",
          "required": true,
          "description": "The session id."
        },
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "The user id."
        }
      ],
      "responses": []
    },
    {
      "url": "/Sessions/{sessionId}/User/{userId}",
      "method": "addUserToSession",
      "httpMethod": "post",
      "tag": "Session",
      "description": "Adds an additional user to a session.",
      "parameters": [
        {
          "name": "sessionId",
          "schema": "string",
          "required": true,
          "description": "The session id."
        },
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "The user id."
        }
      ],
      "responses": []
    },
    {
      "url": "/Sessions/{sessionId}/Viewing",
      "method": "displayContent",
      "httpMethod": "post",
      "tag": "Session",
      "description": "Instructs a session to browse to an item or view.",
      "parameters": [
        {
          "name": "sessionId",
          "schema": "string",
          "required": true,
          "description": "The session Id."
        },
        {
          "name": "itemType",
          "schema": "string",
          "required": true,
          "description": "The type of item to browse to."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The Id of the item."
        },
        {
          "name": "itemName",
          "schema": "string",
          "required": true,
          "description": "The name of the item."
        }
      ],
      "responses": []
    },
    {
      "url": "/Shows/NextUp",
      "method": "getNextUp",
      "httpMethod": "get",
      "tag": "TvShows",
      "description": "Gets a list of next up episodes.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "description": "The user id of the user to get the next up episodes for."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "seriesId",
          "schema": "string",
          "description": "Optional. Filter by series id."
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": "Optional. Specify this to localize the search to a specific item or folder. Omit to use the root."
        },
        {
          "name": "enableImges",
          "schema": "boolean",
          "description": "Optional. Include image information in output."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. The max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. Include user data."
        },
        {
          "name": "enableTotalRecordCount",
          "schema": "boolean",
          "description": "Whether to enable the total records count. Defaults to true."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Shows/Upcoming",
      "method": "getUpcomingEpisodes",
      "httpMethod": "get",
      "tag": "TvShows",
      "description": "Gets a list of upcoming episodes.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "description": "The user id of the user to get the upcoming episodes for."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": "Optional. Specify this to localize the search to a specific item or folder. Omit to use the root."
        },
        {
          "name": "enableImges",
          "schema": "boolean",
          "description": "Optional. Include image information in output."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. The max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. Include user data."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Shows/{itemId}/Similar",
      "method": "getSimilarShows",
      "httpMethod": "get",
      "tag": "Library",
      "description": "Gets similar items.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "excludeArtistIds",
          "schema": "array",
          "description": "Exclude artist ids."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Shows/{seriesId}/Episodes",
      "method": "getEpisodes",
      "httpMethod": "get",
      "tag": "TvShows",
      "description": "Gets episodes for a tv season.",
      "parameters": [
        {
          "name": "seriesId",
          "schema": "string",
          "required": true,
          "description": "The series id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "The user id."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls."
        },
        {
          "name": "season",
          "schema": "integer",
          "description": "Optional filter by season number."
        },
        {
          "name": "seasonId",
          "schema": "string",
          "description": "Optional. Filter by season id."
        },
        {
          "name": "isMissing",
          "schema": "boolean",
          "description": "Optional. Filter by items that are missing episodes or not."
        },
        {
          "name": "adjacentTo",
          "schema": "string",
          "description": "Optional. Return items that are siblings of a supplied item."
        },
        {
          "name": "startItemId",
          "schema": "string",
          "description": "Optional. Skip through the list until a given item is found."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional, include image information in output."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional, the max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. Include user data."
        },
        {
          "name": "sortBy",
          "schema": "string",
          "description": "Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Shows/{seriesId}/Seasons",
      "method": "getSeasons",
      "httpMethod": "get",
      "tag": "TvShows",
      "description": "Gets seasons for a tv series.",
      "parameters": [
        {
          "name": "seriesId",
          "schema": "string",
          "required": true,
          "description": "The series id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "The user id."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls."
        },
        {
          "name": "isSpecialSeason",
          "schema": "boolean",
          "description": "Optional. Filter by special season."
        },
        {
          "name": "isMissing",
          "schema": "boolean",
          "description": "Optional. Filter by items that are missing episodes or not."
        },
        {
          "name": "adjacentTo",
          "schema": "string",
          "description": "Optional. Return items that are siblings of a supplied item."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional. Include image information in output."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. The max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. Include user data."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Songs/{id}/InstantMix",
      "method": "getInstantMixFromSong",
      "httpMethod": "get",
      "tag": "InstantMix",
      "description": "Creates an instant playlist based on a given song.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional. Include image information in output."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. Include user data."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. The max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Startup/Complete",
      "method": "completeWizard",
      "httpMethod": "post",
      "tag": "Startup",
      "description": "Completes the startup wizard.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/Startup/Configuration",
      "method": "getStartupConfiguration",
      "httpMethod": "get",
      "tag": "Startup",
      "description": "Gets the initial startup wizard configuration.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The startup configuration DTO."
        }
      ]
    },
    {
      "url": "/Startup/Configuration",
      "method": "updateInitialConfiguration",
      "httpMethod": "post",
      "tag": "Startup",
      "description": "Sets the initial startup wizard configuration.",
      "parameters": [
        {
          "name": "MetadataCountryCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PreferredMetadataLanguage",
          "schema": "string",
          "description": ""
        },
        {
          "name": "UICulture",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/Startup/FirstUser",
      "method": "getFirstUser2",
      "httpMethod": "get",
      "tag": "Startup",
      "description": "Gets the first user.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The startup user DTO."
        }
      ]
    },
    {
      "url": "/Startup/RemoteAccess",
      "method": "setRemoteAccess",
      "httpMethod": "post",
      "tag": "Startup",
      "description": "Sets remote access and UPnP.",
      "parameters": [
        {
          "name": "EnableAutomaticPortMapping",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "EnableRemoteAccess",
          "schema": "boolean",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/Startup/User",
      "method": "getFirstUser",
      "httpMethod": "get",
      "tag": "Startup",
      "description": "Gets the first user.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The startup user DTO."
        }
      ]
    },
    {
      "url": "/Startup/User",
      "method": "updateStartupUser",
      "httpMethod": "post",
      "tag": "Startup",
      "description": "Sets the user name and password.",
      "parameters": [
        {
          "name": "Name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Password",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/Studios",
      "method": "getStudios",
      "httpMethod": "get",
      "tag": "Studios",
      "description": "Gets all studios from a given item, folder, or the entire library.",
      "parameters": [
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "searchTerm",
          "schema": "string",
          "description": "Optional. Search term."
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": "Specify this to localize the search to a specific item or folder. Omit to use the root."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "excludeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited."
        },
        {
          "name": "includeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited."
        },
        {
          "name": "isFavorite",
          "schema": "boolean",
          "description": "Optional filter by items that are marked as favorite, or not."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional, include user data."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional, the max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "User id."
        },
        {
          "name": "nameStartsWithOrGreater",
          "schema": "string",
          "description": "Optional filter by items whose name is sorted equally or greater than a given input string."
        },
        {
          "name": "nameStartsWith",
          "schema": "string",
          "description": "Optional filter by items whose name is sorted equally than a given input string."
        },
        {
          "name": "nameLessThan",
          "schema": "string",
          "description": "Optional filter by items whose name is equally or lesser than a given input string."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional, include image information in output."
        },
        {
          "name": "enableTotalRecordCount",
          "schema": "boolean",
          "description": "Total record count."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Studios/{name}",
      "method": "getStudio",
      "httpMethod": "get",
      "tag": "Studios",
      "description": "Gets a studio by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Studio name."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is strictly used as a data transfer object from the api layer.\r\nThis holds information about a BaseItem in a format that is convenient for the client."
        }
      ]
    },
    {
      "url": "/Studios/{name}/Images/{imageType}",
      "method": "getStudioImage",
      "httpMethod": "get",
      "tag": "Image",
      "description": "Get studio image by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Studio name."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "description": "Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Studios/{name}/Images/{imageType}",
      "method": "headStudioImage",
      "httpMethod": "head",
      "tag": "Image",
      "description": "Get studio image by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Studio name."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "description": "Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Studios/{name}/Images/{imageType}/{imageIndex}",
      "method": "getStudioImageByIndex",
      "httpMethod": "get",
      "tag": "Image",
      "description": "Get studio image by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Studio name."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "Image index."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Studios/{name}/Images/{imageType}/{imageIndex}",
      "method": "headStudioImageByIndex",
      "httpMethod": "head",
      "tag": "Image",
      "description": "Get studio image by name.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Studio name."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "Image index."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/SyncPlay/Buffering",
      "method": "syncPlayBuffering",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Notify SyncPlay group that member is buffering.",
      "parameters": [
        {
          "name": "IsPlaying",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "PlaylistItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PositionTicks",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "When",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/SyncPlay/Join",
      "method": "syncPlayJoinGroup",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Join an existing SyncPlay group.",
      "parameters": [
        {
          "name": "GroupId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/SyncPlay/Leave",
      "method": "syncPlayLeaveGroup",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Leave the joined SyncPlay group.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/SyncPlay/List",
      "method": "syncPlayGetGroups",
      "httpMethod": "get",
      "tag": "SyncPlay",
      "description": "Gets all SyncPlay groups.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/SyncPlay/MovePlaylistItem",
      "method": "syncPlayMovePlaylistItem",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Request to move an item in the playlist in SyncPlay group.",
      "parameters": [
        {
          "name": "NewIndex",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "PlaylistItemId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/SyncPlay/New",
      "method": "syncPlayCreateGroup",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Create a new SyncPlay group.",
      "parameters": [
        {
          "name": "GroupName",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/SyncPlay/NextItem",
      "method": "syncPlayNextItem",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Request next item in SyncPlay group.",
      "parameters": [
        {
          "name": "PlaylistItemId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/SyncPlay/Pause",
      "method": "syncPlayPause",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Request pause in SyncPlay group.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/SyncPlay/Ping",
      "method": "syncPlayPing",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Update session ping.",
      "parameters": [
        {
          "name": "Ping",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/SyncPlay/PreviousItem",
      "method": "syncPlayPreviousItem",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Request previous item in SyncPlay group.",
      "parameters": [
        {
          "name": "PlaylistItemId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/SyncPlay/Queue",
      "method": "syncPlayQueue",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Request to queue items to the playlist of a SyncPlay group.",
      "parameters": [
        {
          "name": "ItemIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Mode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/SyncPlay/Ready",
      "method": "syncPlayReady",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Notify SyncPlay group that member is ready for playback.",
      "parameters": [
        {
          "name": "IsPlaying",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "PlaylistItemId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PositionTicks",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "When",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/SyncPlay/RemoveFromPlaylist",
      "method": "syncPlayRemoveFromPlaylist",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Request to remove items from the playlist in SyncPlay group.",
      "parameters": [
        {
          "name": "PlaylistItemIds",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/SyncPlay/Seek",
      "method": "syncPlaySeek",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Request seek in SyncPlay group.",
      "parameters": [
        {
          "name": "PositionTicks",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/SyncPlay/SetIgnoreWait",
      "method": "syncPlaySetIgnoreWait",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Request SyncPlay group to ignore member during group-wait.",
      "parameters": [
        {
          "name": "IgnoreWait",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/SyncPlay/SetNewQueue",
      "method": "syncPlaySetNewQueue",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Request to set new playlist in SyncPlay group.",
      "parameters": [
        {
          "name": "PlayingItemPosition",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "PlayingQueue",
          "schema": "array",
          "description": ""
        },
        {
          "name": "StartPositionTicks",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/SyncPlay/SetPlaylistItem",
      "method": "syncPlaySetPlaylistItem",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Request to change playlist item in SyncPlay group.",
      "parameters": [
        {
          "name": "PlaylistItemId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/SyncPlay/SetRepeatMode",
      "method": "syncPlaySetRepeatMode",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Request to set repeat mode in SyncPlay group.",
      "parameters": [
        {
          "name": "Mode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/SyncPlay/SetShuffleMode",
      "method": "syncPlaySetShuffleMode",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Request to set shuffle mode in SyncPlay group.",
      "parameters": [
        {
          "name": "Mode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/SyncPlay/Stop",
      "method": "syncPlayStop",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Request stop in SyncPlay group.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/SyncPlay/Unpause",
      "method": "syncPlayUnpause",
      "httpMethod": "post",
      "tag": "SyncPlay",
      "description": "Request unpause in SyncPlay group.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/System/ActivityLog/Entries",
      "method": "getLogEntries",
      "httpMethod": "get",
      "tag": "ActivityLog",
      "description": "Gets activity log entries.",
      "parameters": [
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "minDate",
          "schema": "string",
          "description": "Optional. The minimum date. Format = ISO."
        },
        {
          "name": "hasUserId",
          "schema": "boolean",
          "description": "Optional. Filter log entries if it has user id, or not."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/System/Configuration",
      "method": "getConfiguration",
      "httpMethod": "get",
      "tag": "Configuration",
      "description": "Gets application configuration.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Represents the server configuration."
        }
      ]
    },
    {
      "url": "/System/Configuration",
      "method": "updateConfiguration",
      "httpMethod": "post",
      "tag": "Configuration",
      "description": "Updates application configuration.",
      "parameters": [
        {
          "name": "ActivityLogRetentionDays",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "AutoDiscovery",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "AutoDiscoveryTracing",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "BaseUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CachePath",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CertificatePassword",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CertificatePath",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CodecsUsed",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ContentTypes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "CorsHosts",
          "schema": "array",
          "description": ""
        },
        {
          "name": "DisableLiveTvChannelUserDataName",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "DisablePluginImages",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "DisplaySpecialsWithinSeasons",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableCaseSensitiveItemIds",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableDashboardResponseCaching",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableExternalContentInSuggestions",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableFolderView",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableGroupingIntoCollections",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableHttps",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableIPV4",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableIPV6",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableMetrics",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableMultiSocketBinding",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableNewOmdbSupport",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableNormalizedItemByNameIds",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableRemoteAccess",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableSSDPTracing",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableSimpleArtistDetection",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableSlowResponseWarning",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableUPnP",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "GatewayMonitorPeriod",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "HDHomerunPortRange",
          "schema": "string",
          "description": ""
        },
        {
          "name": "HttpServerPortNumber",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "HttpsPortNumber",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "IgnoreVirtualInterfaces",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ImageExtractionTimeoutMs",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ImageSavingConvention",
          "schema": "string",
          "description": ""
        },
        {
          "name": "IsPortAuthorized",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsRemoteIPFilterBlacklist",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsStartupWizardCompleted",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "KnownProxies",
          "schema": "array",
          "description": ""
        },
        {
          "name": "LibraryMetadataRefreshConcurrency",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "LibraryMonitorDelay",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "LibraryScanFanoutConcurrency",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "LocalNetworkAddresses",
          "schema": "array",
          "description": ""
        },
        {
          "name": "LocalNetworkSubnets",
          "schema": "array",
          "description": ""
        },
        {
          "name": "LogFileRetentionDays",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxAudiobookResume",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxResumePct",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MetadataCountryCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MetadataNetworkPath",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MetadataOptions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "MetadataPath",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MinAudiobookResume",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MinResumeDurationSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MinResumePct",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "PathSubstitutions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "PluginRepositories",
          "schema": "array",
          "description": ""
        },
        {
          "name": "PreferredMetadataLanguage",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PreviousVersion",
          "schema": "object",
          "description": ""
        },
        {
          "name": "PreviousVersionStr",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PublicHttpsPort",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "PublicPort",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "PublishedServerUriBySubnet",
          "schema": "array",
          "description": ""
        },
        {
          "name": "QuickConnectAvailable",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "RemoteClientBitrateLimit",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "RemoteIPFilter",
          "schema": "array",
          "description": ""
        },
        {
          "name": "RemoveOldPlugins",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "RequireHttps",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "SSDPTracingFilter",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SaveMetadataHidden",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ServerName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SkipDeserializationForBasicTypes",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "SlowResponseThresholdMs",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "SortRemoveCharacters",
          "schema": "array",
          "description": ""
        },
        {
          "name": "SortRemoveWords",
          "schema": "array",
          "description": ""
        },
        {
          "name": "SortReplaceCharacters",
          "schema": "array",
          "description": ""
        },
        {
          "name": "TrustAllIP6Interfaces",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "UDPPortRange",
          "schema": "string",
          "description": ""
        },
        {
          "name": "UDPSendCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "UDPSendDelay",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "UICulture",
          "schema": "string",
          "description": ""
        },
        {
          "name": "UPnPCreateHttpPortMap",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "UninstalledPlugins",
          "schema": "array",
          "description": ""
        },
        {
          "name": "VirtualInterfaceNames",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/System/Configuration/MetadataOptions/Default",
      "method": "getDefaultMetadataOptions",
      "httpMethod": "get",
      "tag": "Configuration",
      "description": "Gets a default MetadataOptions object.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class MetadataOptions."
        }
      ]
    },
    {
      "url": "/System/Configuration/{key}",
      "method": "getNamedConfiguration",
      "httpMethod": "get",
      "tag": "Configuration",
      "description": "Gets a named configuration.",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "Configuration key."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/System/Configuration/{key}",
      "method": "updateNamedConfiguration",
      "httpMethod": "post",
      "tag": "Configuration",
      "description": "Updates named configuration.",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "Configuration key."
        }
      ],
      "responses": []
    },
    {
      "url": "/System/Endpoint",
      "method": "getEndpointInfo",
      "httpMethod": "get",
      "tag": "System",
      "description": "Gets information about the request endpoint.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/System/Info",
      "method": "getSystemInfo",
      "httpMethod": "get",
      "tag": "System",
      "description": "Gets information about the server.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class SystemInfo."
        }
      ]
    },
    {
      "url": "/System/Info/Public",
      "method": "getPublicSystemInfo",
      "httpMethod": "get",
      "tag": "System",
      "description": "Gets public information about the server.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/System/Logs",
      "method": "getServerLogs",
      "httpMethod": "get",
      "tag": "System",
      "description": "Gets a list of available server log files.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/System/Logs/Log",
      "method": "getLogFile",
      "httpMethod": "get",
      "tag": "System",
      "description": "Gets a log file.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the log file to get."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/System/MediaEncoder/Path",
      "method": "updateMediaEncoderPath",
      "httpMethod": "post",
      "tag": "Configuration",
      "description": "Updates the path to the media encoder.",
      "parameters": [
        {
          "name": "Path",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PathType",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/System/Ping",
      "method": "getPingSystem",
      "httpMethod": "get",
      "tag": "System",
      "description": "Pings the system.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/System/Ping",
      "method": "postPingSystem",
      "httpMethod": "post",
      "tag": "System",
      "description": "Pings the system.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/System/Restart",
      "method": "restartApplication",
      "httpMethod": "post",
      "tag": "System",
      "description": "Restarts the application.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/System/Shutdown",
      "method": "shutdownApplication",
      "httpMethod": "post",
      "tag": "System",
      "description": "Shuts down the application.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/System/WakeOnLanInfo",
      "method": "getWakeOnLanInfo",
      "httpMethod": "get",
      "tag": "System",
      "description": "Gets wake on lan information.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Trailers",
      "method": "getTrailers",
      "httpMethod": "get",
      "tag": "Trailers",
      "description": "Finds movies and trailers similar to a given trailer.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "description": "The user id."
        },
        {
          "name": "maxOfficialRating",
          "schema": "string",
          "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc)."
        },
        {
          "name": "hasThemeSong",
          "schema": "boolean",
          "description": "Optional filter by items with theme songs."
        },
        {
          "name": "hasThemeVideo",
          "schema": "boolean",
          "description": "Optional filter by items with theme videos."
        },
        {
          "name": "hasSubtitles",
          "schema": "boolean",
          "description": "Optional filter by items with subtitles."
        },
        {
          "name": "hasSpecialFeature",
          "schema": "boolean",
          "description": "Optional filter by items with special features."
        },
        {
          "name": "hasTrailer",
          "schema": "boolean",
          "description": "Optional filter by items with trailers."
        },
        {
          "name": "adjacentTo",
          "schema": "string",
          "description": "Optional. Return items that are siblings of a supplied item."
        },
        {
          "name": "parentIndexNumber",
          "schema": "integer",
          "description": "Optional filter by parent index number."
        },
        {
          "name": "hasParentalRating",
          "schema": "boolean",
          "description": "Optional filter by items that have or do not have a parental rating."
        },
        {
          "name": "isHd",
          "schema": "boolean",
          "description": "Optional filter by items that are HD or not."
        },
        {
          "name": "is4K",
          "schema": "boolean",
          "description": "Optional filter by items that are 4K or not."
        },
        {
          "name": "locationTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited."
        },
        {
          "name": "excludeLocationTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited."
        },
        {
          "name": "isMissing",
          "schema": "boolean",
          "description": "Optional filter by items that are missing episodes or not."
        },
        {
          "name": "isUnaired",
          "schema": "boolean",
          "description": "Optional filter by items that are unaired episodes or not."
        },
        {
          "name": "minCommunityRating",
          "schema": "number",
          "description": "Optional filter by minimum community rating."
        },
        {
          "name": "minCriticRating",
          "schema": "number",
          "description": "Optional filter by minimum critic rating."
        },
        {
          "name": "minPremiereDate",
          "schema": "string",
          "description": "Optional. The minimum premiere date. Format = ISO."
        },
        {
          "name": "minDateLastSaved",
          "schema": "string",
          "description": "Optional. The minimum last saved date. Format = ISO."
        },
        {
          "name": "minDateLastSavedForUser",
          "schema": "string",
          "description": "Optional. The minimum last saved date for the current user. Format = ISO."
        },
        {
          "name": "maxPremiereDate",
          "schema": "string",
          "description": "Optional. The maximum premiere date. Format = ISO."
        },
        {
          "name": "hasOverview",
          "schema": "boolean",
          "description": "Optional filter by items that have an overview or not."
        },
        {
          "name": "hasImdbId",
          "schema": "boolean",
          "description": "Optional filter by items that have an imdb id or not."
        },
        {
          "name": "hasTmdbId",
          "schema": "boolean",
          "description": "Optional filter by items that have a tmdb id or not."
        },
        {
          "name": "hasTvdbId",
          "schema": "boolean",
          "description": "Optional filter by items that have a tvdb id or not."
        },
        {
          "name": "excludeItemIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "recursive",
          "schema": "boolean",
          "description": "When searching within folders, this determines whether or not the search will be recursive. true/false."
        },
        {
          "name": "searchTerm",
          "schema": "string",
          "description": "Optional. Filter based on a search term."
        },
        {
          "name": "sortOrder",
          "schema": "string",
          "description": "Sort Order - Ascending,Descending."
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": "Specify this to localize the search to a specific item or folder. Omit to use the root."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines."
        },
        {
          "name": "excludeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited."
        },
        {
          "name": "filters",
          "schema": "array",
          "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes."
        },
        {
          "name": "isFavorite",
          "schema": "boolean",
          "description": "Optional filter by items that are marked as favorite, or not."
        },
        {
          "name": "mediaTypes",
          "schema": "array",
          "description": "Optional filter by MediaType. Allows multiple, comma delimited."
        },
        {
          "name": "imageTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited."
        },
        {
          "name": "sortBy",
          "schema": "string",
          "description": "Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime."
        },
        {
          "name": "isPlayed",
          "schema": "boolean",
          "description": "Optional filter by items that are played, or not."
        },
        {
          "name": "genres",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited."
        },
        {
          "name": "officialRatings",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited."
        },
        {
          "name": "tags",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited."
        },
        {
          "name": "years",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional, include user data."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional, the max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "person",
          "schema": "string",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified person."
        },
        {
          "name": "personIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified person id."
        },
        {
          "name": "personTypes",
          "schema": "array",
          "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited."
        },
        {
          "name": "studios",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited."
        },
        {
          "name": "artists",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited."
        },
        {
          "name": "excludeArtistIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited."
        },
        {
          "name": "artistIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified artist id."
        },
        {
          "name": "albumArtistIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified album artist id."
        },
        {
          "name": "contributingArtistIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified contributing artist id."
        },
        {
          "name": "albums",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited."
        },
        {
          "name": "albumIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited."
        },
        {
          "name": "ids",
          "schema": "array",
          "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited."
        },
        {
          "name": "videoTypes",
          "schema": "array",
          "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited."
        },
        {
          "name": "minOfficialRating",
          "schema": "string",
          "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc)."
        },
        {
          "name": "isLocked",
          "schema": "boolean",
          "description": "Optional filter by items that are locked."
        },
        {
          "name": "isPlaceHolder",
          "schema": "boolean",
          "description": "Optional filter by items that are placeholders."
        },
        {
          "name": "hasOfficialRating",
          "schema": "boolean",
          "description": "Optional filter by items that have official ratings."
        },
        {
          "name": "collapseBoxSetItems",
          "schema": "boolean",
          "description": "Whether or not to hide items behind their boxsets."
        },
        {
          "name": "minWidth",
          "schema": "integer",
          "description": "Optional. Filter by the minimum width of the item."
        },
        {
          "name": "minHeight",
          "schema": "integer",
          "description": "Optional. Filter by the minimum height of the item."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "Optional. Filter by the maximum width of the item."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "Optional. Filter by the maximum height of the item."
        },
        {
          "name": "is3D",
          "schema": "boolean",
          "description": "Optional filter by items that are 3D, or not."
        },
        {
          "name": "seriesStatus",
          "schema": "array",
          "description": "Optional filter by Series Status. Allows multiple, comma delimited."
        },
        {
          "name": "nameStartsWithOrGreater",
          "schema": "string",
          "description": "Optional filter by items whose name is sorted equally or greater than a given input string."
        },
        {
          "name": "nameStartsWith",
          "schema": "string",
          "description": "Optional filter by items whose name is sorted equally than a given input string."
        },
        {
          "name": "nameLessThan",
          "schema": "string",
          "description": "Optional filter by items whose name is equally or lesser than a given input string."
        },
        {
          "name": "studioIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited."
        },
        {
          "name": "genreIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited."
        },
        {
          "name": "enableTotalRecordCount",
          "schema": "boolean",
          "description": "Optional. Enable the total record count."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional, include image information in output."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Trailers/{itemId}/Similar",
      "method": "getSimilarTrailers",
      "httpMethod": "get",
      "tag": "Library",
      "description": "Gets similar items.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "excludeArtistIds",
          "schema": "array",
          "description": "Exclude artist ids."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users",
      "method": "getUsers",
      "httpMethod": "get",
      "tag": "User",
      "description": "Gets a list of users.",
      "parameters": [
        {
          "name": "isHidden",
          "schema": "boolean",
          "description": "Optional filter by IsHidden=true or false."
        },
        {
          "name": "isDisabled",
          "schema": "boolean",
          "description": "Optional filter by IsDisabled=true or false."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/AuthenticateByName",
      "method": "authenticateUserByName",
      "httpMethod": "post",
      "tag": "User",
      "description": "Authenticates a user by name.",
      "parameters": [
        {
          "name": "Password",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Pw",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Username",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/AuthenticateWithQuickConnect",
      "method": "authenticateWithQuickConnect",
      "httpMethod": "post",
      "tag": "User",
      "description": "Authenticates a user with quick connect.",
      "parameters": [
        {
          "name": "Token",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/ForgotPassword",
      "method": "forgotPassword",
      "httpMethod": "post",
      "tag": "User",
      "description": "Initiates the forgot password process for a local user.",
      "parameters": [
        {
          "name": "EnteredUsername",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/ForgotPassword/Pin",
      "method": "forgotPasswordPin",
      "httpMethod": "post",
      "tag": "User",
      "description": "Redeems a forgot password pin.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/Me",
      "method": "getCurrentUser",
      "httpMethod": "get",
      "tag": "User",
      "description": "Gets the user based on auth token.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class UserDto."
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/New",
      "method": "createUserByName",
      "httpMethod": "post",
      "tag": "User",
      "description": "Creates a user.",
      "parameters": [
        {
          "name": "Name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Password",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class UserDto."
        }
      ]
    },
    {
      "url": "/Users/Public",
      "method": "getPublicUsers",
      "httpMethod": "get",
      "tag": "User",
      "description": "Gets a list of publicly visible users for display on a login screen.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}",
      "method": "deleteUser",
      "httpMethod": "delete",
      "tag": "User",
      "description": "Deletes a user.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "The user id."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}",
      "method": "getUserById",
      "httpMethod": "get",
      "tag": "User",
      "description": "Gets a user by Id.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "The user id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class UserDto."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}",
      "method": "updateUser",
      "httpMethod": "post",
      "tag": "User",
      "description": "Updates a user.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "The user id."
        },
        {
          "name": "Configuration",
          "schema": "object",
          "description": ""
        },
        {
          "name": "EnableAutoLogin",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "HasConfiguredEasyPassword",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "HasConfiguredPassword",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "HasPassword",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "LastActivityDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "LastLoginDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Policy",
          "schema": "object",
          "description": ""
        },
        {
          "name": "PrimaryImageAspectRatio",
          "schema": "number",
          "description": ""
        },
        {
          "name": "PrimaryImageTag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ServerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ServerName",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Authenticate",
      "method": "authenticateUser",
      "httpMethod": "post",
      "tag": "User",
      "description": "Authenticates a user.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "The user id."
        },
        {
          "name": "pw",
          "schema": "string",
          "required": true,
          "description": "The password as plain text."
        },
        {
          "name": "password",
          "schema": "string",
          "description": "The password sha1-hash."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Configuration",
      "method": "updateUserConfiguration",
      "httpMethod": "post",
      "tag": "User",
      "description": "Updates a user configuration.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "The user id."
        },
        {
          "name": "AudioLanguagePreference",
          "schema": "string",
          "description": ""
        },
        {
          "name": "DisplayCollectionsView",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "DisplayMissingEpisodes",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableLocalPassword",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableNextEpisodeAutoPlay",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "GroupedFolders",
          "schema": "array",
          "description": ""
        },
        {
          "name": "HidePlayedInLatest",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "LatestItemsExcludes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "MyMediaExcludes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "OrderedViews",
          "schema": "array",
          "description": ""
        },
        {
          "name": "PlayDefaultAudioTrack",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "RememberAudioSelections",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "RememberSubtitleSelections",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "SubtitleLanguagePreference",
          "schema": "string",
          "description": ""
        },
        {
          "name": "SubtitleMode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/EasyPassword",
      "method": "updateUserEasyPassword",
      "httpMethod": "post",
      "tag": "User",
      "description": "Updates a user's easy password.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "The user id."
        },
        {
          "name": "NewPassword",
          "schema": "string",
          "description": ""
        },
        {
          "name": "NewPw",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ResetPassword",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/FavoriteItems/{itemId}",
      "method": "unmarkFavoriteItem",
      "httpMethod": "delete",
      "tag": "UserLibrary",
      "description": "Unmarks item as a favorite.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class UserItemDataDto."
        }
      ]
    },
    {
      "url": "/Users/{userId}/FavoriteItems/{itemId}",
      "method": "markFavoriteItem",
      "httpMethod": "post",
      "tag": "UserLibrary",
      "description": "Marks an item as a favorite.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class UserItemDataDto."
        }
      ]
    },
    {
      "url": "/Users/{userId}/GroupingOptions",
      "method": "getGroupingOptions",
      "httpMethod": "get",
      "tag": "UserViews",
      "description": "Get user view grouping options.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Images/{imageType}",
      "method": "deleteUserImage",
      "httpMethod": "delete",
      "tag": "Image",
      "description": "Delete the user's image.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User Id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "(Unused) Image type."
        },
        {
          "name": "index",
          "schema": "integer",
          "description": "(Unused) Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Images/{imageType}",
      "method": "getUserImage",
      "httpMethod": "get",
      "tag": "Image",
      "description": "Get user profile image.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "description": "Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Images/{imageType}",
      "method": "headUserImage",
      "httpMethod": "head",
      "tag": "Image",
      "description": "Get user profile image.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "description": "Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Images/{imageType}",
      "method": "postUserImage",
      "httpMethod": "post",
      "tag": "Image",
      "description": "Sets the user image.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User Id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "(Unused) Image type."
        },
        {
          "name": "index",
          "schema": "integer",
          "description": "(Unused) Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Images/{imageType}/{imageIndex}",
      "method": "getUserImageByIndex",
      "httpMethod": "get",
      "tag": "Image",
      "description": "Get user profile image.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "Image index."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Images/{imageType}/{imageIndex}",
      "method": "headUserImageByIndex",
      "httpMethod": "head",
      "tag": "Image",
      "description": "Get user profile image.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "Image type."
        },
        {
          "name": "imageIndex",
          "schema": "integer",
          "required": true,
          "description": "Image index."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Optional. Supply the cache tag from the item object to receive strong caching headers."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "Determines the output format of the image - original,gif,jpg,png."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "The maximum image width to return."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "The maximum image height to return."
        },
        {
          "name": "percentPlayed",
          "schema": "number",
          "description": "Optional. Percent to render for the percent played overlay."
        },
        {
          "name": "unplayedCount",
          "schema": "integer",
          "description": "Optional. Unplayed count overlay to render."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The fixed image width to return."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The fixed image height to return."
        },
        {
          "name": "quality",
          "schema": "integer",
          "description": "Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases."
        },
        {
          "name": "cropWhitespace",
          "schema": "boolean",
          "description": "Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art."
        },
        {
          "name": "addPlayedIndicator",
          "schema": "boolean",
          "description": "Optional. Add a played indicator."
        },
        {
          "name": "blur",
          "schema": "integer",
          "description": "Optional. Blur image."
        },
        {
          "name": "backgroundColor",
          "schema": "string",
          "description": "Optional. Apply a background color for transparent images."
        },
        {
          "name": "foregroundLayer",
          "schema": "string",
          "description": "Optional. Apply a foreground layer on top of the image."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Images/{imageType}/{index}",
      "method": "deleteUserImageByIndex",
      "httpMethod": "delete",
      "tag": "Image",
      "description": "Delete the user's image.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User Id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "(Unused) Image type."
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "(Unused) Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Images/{imageType}/{index}",
      "method": "postUserImageByIndex",
      "httpMethod": "post",
      "tag": "Image",
      "description": "Sets the user image.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User Id."
        },
        {
          "name": "imageType",
          "schema": "string",
          "required": true,
          "description": "(Unused) Image type."
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "(Unused) Image index."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Items",
      "method": "getItemsByUserId",
      "httpMethod": "get",
      "tag": "Items",
      "description": "Gets items based on a query.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "The user id supplied as query parameter."
        },
        {
          "name": "maxOfficialRating",
          "schema": "string",
          "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc)."
        },
        {
          "name": "hasThemeSong",
          "schema": "boolean",
          "description": "Optional filter by items with theme songs."
        },
        {
          "name": "hasThemeVideo",
          "schema": "boolean",
          "description": "Optional filter by items with theme videos."
        },
        {
          "name": "hasSubtitles",
          "schema": "boolean",
          "description": "Optional filter by items with subtitles."
        },
        {
          "name": "hasSpecialFeature",
          "schema": "boolean",
          "description": "Optional filter by items with special features."
        },
        {
          "name": "hasTrailer",
          "schema": "boolean",
          "description": "Optional filter by items with trailers."
        },
        {
          "name": "adjacentTo",
          "schema": "string",
          "description": "Optional. Return items that are siblings of a supplied item."
        },
        {
          "name": "parentIndexNumber",
          "schema": "integer",
          "description": "Optional filter by parent index number."
        },
        {
          "name": "hasParentalRating",
          "schema": "boolean",
          "description": "Optional filter by items that have or do not have a parental rating."
        },
        {
          "name": "isHd",
          "schema": "boolean",
          "description": "Optional filter by items that are HD or not."
        },
        {
          "name": "is4K",
          "schema": "boolean",
          "description": "Optional filter by items that are 4K or not."
        },
        {
          "name": "locationTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted."
        },
        {
          "name": "excludeLocationTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimeted."
        },
        {
          "name": "isMissing",
          "schema": "boolean",
          "description": "Optional filter by items that are missing episodes or not."
        },
        {
          "name": "isUnaired",
          "schema": "boolean",
          "description": "Optional filter by items that are unaired episodes or not."
        },
        {
          "name": "minCommunityRating",
          "schema": "number",
          "description": "Optional filter by minimum community rating."
        },
        {
          "name": "minCriticRating",
          "schema": "number",
          "description": "Optional filter by minimum critic rating."
        },
        {
          "name": "minPremiereDate",
          "schema": "string",
          "description": "Optional. The minimum premiere date. Format = ISO."
        },
        {
          "name": "minDateLastSaved",
          "schema": "string",
          "description": "Optional. The minimum last saved date. Format = ISO."
        },
        {
          "name": "minDateLastSavedForUser",
          "schema": "string",
          "description": "Optional. The minimum last saved date for the current user. Format = ISO."
        },
        {
          "name": "maxPremiereDate",
          "schema": "string",
          "description": "Optional. The maximum premiere date. Format = ISO."
        },
        {
          "name": "hasOverview",
          "schema": "boolean",
          "description": "Optional filter by items that have an overview or not."
        },
        {
          "name": "hasImdbId",
          "schema": "boolean",
          "description": "Optional filter by items that have an imdb id or not."
        },
        {
          "name": "hasTmdbId",
          "schema": "boolean",
          "description": "Optional filter by items that have a tmdb id or not."
        },
        {
          "name": "hasTvdbId",
          "schema": "boolean",
          "description": "Optional filter by items that have a tvdb id or not."
        },
        {
          "name": "excludeItemIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "recursive",
          "schema": "boolean",
          "description": "When searching within folders, this determines whether or not the search will be recursive. true/false."
        },
        {
          "name": "searchTerm",
          "schema": "string",
          "description": "Optional. Filter based on a search term."
        },
        {
          "name": "sortOrder",
          "schema": "string",
          "description": "Sort Order - Ascending,Descending."
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": "Specify this to localize the search to a specific item or folder. Omit to use the root."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines."
        },
        {
          "name": "excludeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted."
        },
        {
          "name": "includeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimeted."
        },
        {
          "name": "filters",
          "schema": "array",
          "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes."
        },
        {
          "name": "isFavorite",
          "schema": "boolean",
          "description": "Optional filter by items that are marked as favorite, or not."
        },
        {
          "name": "mediaTypes",
          "schema": "array",
          "description": "Optional filter by MediaType. Allows multiple, comma delimited."
        },
        {
          "name": "imageTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited."
        },
        {
          "name": "sortBy",
          "schema": "string",
          "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime."
        },
        {
          "name": "isPlayed",
          "schema": "boolean",
          "description": "Optional filter by items that are played, or not."
        },
        {
          "name": "genres",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted."
        },
        {
          "name": "officialRatings",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted."
        },
        {
          "name": "tags",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted."
        },
        {
          "name": "years",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional, include user data."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional, the max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "person",
          "schema": "string",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified person."
        },
        {
          "name": "personIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified person id."
        },
        {
          "name": "personTypes",
          "schema": "array",
          "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited."
        },
        {
          "name": "studios",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted."
        },
        {
          "name": "artists",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimeted."
        },
        {
          "name": "excludeArtistIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimeted."
        },
        {
          "name": "artistIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified artist id."
        },
        {
          "name": "albumArtistIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified album artist id."
        },
        {
          "name": "contributingArtistIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered to include only those containing the specified contributing artist id."
        },
        {
          "name": "albums",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted."
        },
        {
          "name": "albumIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimeted."
        },
        {
          "name": "ids",
          "schema": "array",
          "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited."
        },
        {
          "name": "videoTypes",
          "schema": "array",
          "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted."
        },
        {
          "name": "minOfficialRating",
          "schema": "string",
          "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc)."
        },
        {
          "name": "isLocked",
          "schema": "boolean",
          "description": "Optional filter by items that are locked."
        },
        {
          "name": "isPlaceHolder",
          "schema": "boolean",
          "description": "Optional filter by items that are placeholders."
        },
        {
          "name": "hasOfficialRating",
          "schema": "boolean",
          "description": "Optional filter by items that have official ratings."
        },
        {
          "name": "collapseBoxSetItems",
          "schema": "boolean",
          "description": "Whether or not to hide items behind their boxsets."
        },
        {
          "name": "minWidth",
          "schema": "integer",
          "description": "Optional. Filter by the minimum width of the item."
        },
        {
          "name": "minHeight",
          "schema": "integer",
          "description": "Optional. Filter by the minimum height of the item."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "Optional. Filter by the maximum width of the item."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "Optional. Filter by the maximum height of the item."
        },
        {
          "name": "is3D",
          "schema": "boolean",
          "description": "Optional filter by items that are 3D, or not."
        },
        {
          "name": "seriesStatus",
          "schema": "array",
          "description": "Optional filter by Series Status. Allows multiple, comma delimeted."
        },
        {
          "name": "nameStartsWithOrGreater",
          "schema": "string",
          "description": "Optional filter by items whose name is sorted equally or greater than a given input string."
        },
        {
          "name": "nameStartsWith",
          "schema": "string",
          "description": "Optional filter by items whose name is sorted equally than a given input string."
        },
        {
          "name": "nameLessThan",
          "schema": "string",
          "description": "Optional filter by items whose name is equally or lesser than a given input string."
        },
        {
          "name": "studioIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimeted."
        },
        {
          "name": "genreIds",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimeted."
        },
        {
          "name": "enableTotalRecordCount",
          "schema": "boolean",
          "description": "Optional. Enable the total record count."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional, include image information in output."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Items/Latest",
      "method": "getLatestMedia",
      "httpMethod": "get",
      "tag": "UserLibrary",
      "description": "Gets latest media.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": "Specify this to localize the search to a specific item or folder. Omit to use the root."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "includeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited."
        },
        {
          "name": "isPlayed",
          "schema": "boolean",
          "description": "Filter by items that are played, or not."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional. include image information in output."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. the max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. include user data."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Return item limit."
        },
        {
          "name": "groupItems",
          "schema": "boolean",
          "description": "Whether or not to group items into a parent container."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Items/Resume",
      "method": "getResumeItems",
      "httpMethod": "get",
      "tag": "Items",
      "description": "Gets items based on a query.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "The user id."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "The start index."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "The item limit."
        },
        {
          "name": "searchTerm",
          "schema": "string",
          "description": "The search term."
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": "Specify this to localize the search to a specific item or folder. Omit to use the root."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines."
        },
        {
          "name": "mediaTypes",
          "schema": "array",
          "description": "Optional. Filter by MediaType. Allows multiple, comma delimited."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. Include user data."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. The max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "excludeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited."
        },
        {
          "name": "includeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited."
        },
        {
          "name": "enableTotalRecordCount",
          "schema": "boolean",
          "description": "Optional. Enable the total record count."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional. Include image information in output."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Items/Root",
      "method": "getRootFolder",
      "httpMethod": "get",
      "tag": "UserLibrary",
      "description": "Gets the root folder from a user's library.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is strictly used as a data transfer object from the api layer.\r\nThis holds information about a BaseItem in a format that is convenient for the client."
        }
      ]
    },
    {
      "url": "/Users/{userId}/Items/{itemId}",
      "method": "getItem",
      "httpMethod": "get",
      "tag": "UserLibrary",
      "description": "Gets an item from a user's library.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is strictly used as a data transfer object from the api layer.\r\nThis holds information about a BaseItem in a format that is convenient for the client."
        }
      ]
    },
    {
      "url": "/Users/{userId}/Items/{itemId}/Intros",
      "method": "getIntros",
      "httpMethod": "get",
      "tag": "UserLibrary",
      "description": "Gets intros to play before the main media item plays.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Items/{itemId}/LocalTrailers",
      "method": "getLocalTrailers",
      "httpMethod": "get",
      "tag": "UserLibrary",
      "description": "Gets local trailers for an item.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Items/{itemId}/Rating",
      "method": "deleteUserItemRating",
      "httpMethod": "delete",
      "tag": "UserLibrary",
      "description": "Deletes a user's saved personal rating for an item.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class UserItemDataDto."
        }
      ]
    },
    {
      "url": "/Users/{userId}/Items/{itemId}/Rating",
      "method": "updateUserItemRating",
      "httpMethod": "post",
      "tag": "UserLibrary",
      "description": "Updates a user's rating for an item.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        },
        {
          "name": "likes",
          "schema": "boolean",
          "description": "Whether this M:Jellyfin.Api.Controllers.UserLibraryController.UpdateUserItemRating(System.Guid,System.Guid,System.Nullable{System.Boolean}) is likes."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class UserItemDataDto."
        }
      ]
    },
    {
      "url": "/Users/{userId}/Items/{itemId}/SpecialFeatures",
      "method": "getSpecialFeatures",
      "httpMethod": "get",
      "tag": "UserLibrary",
      "description": "Gets special features for an item.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Password",
      "method": "updateUserPassword",
      "httpMethod": "post",
      "tag": "User",
      "description": "Updates a user's password.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "The user id."
        },
        {
          "name": "CurrentPassword",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CurrentPw",
          "schema": "string",
          "description": ""
        },
        {
          "name": "NewPw",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ResetPassword",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/PlayedItems/{itemId}",
      "method": "markUnplayedItem",
      "httpMethod": "delete",
      "tag": "Playstate",
      "description": "Marks an item as unplayed for user.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class UserItemDataDto."
        }
      ]
    },
    {
      "url": "/Users/{userId}/PlayedItems/{itemId}",
      "method": "markPlayedItem",
      "httpMethod": "post",
      "tag": "Playstate",
      "description": "Marks an item as played for user.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        },
        {
          "name": "datePlayed",
          "schema": "string",
          "description": "Optional. The date the item was played."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Class UserItemDataDto."
        }
      ]
    },
    {
      "url": "/Users/{userId}/PlayingItems/{itemId}",
      "method": "onPlaybackStopped",
      "httpMethod": "delete",
      "tag": "Playstate",
      "description": "Reports that a user has stopped playing an item.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The id of the MediaSource."
        },
        {
          "name": "nextMediaType",
          "schema": "string",
          "description": "The next media type that will play."
        },
        {
          "name": "positionTicks",
          "schema": "integer",
          "description": "Optional. The position, in ticks, where playback stopped. 1 tick = 10000 ms."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        }
      ],
      "responses": []
    },
    {
      "url": "/Users/{userId}/PlayingItems/{itemId}",
      "method": "onPlaybackStart",
      "httpMethod": "post",
      "tag": "Playstate",
      "description": "Reports that a user has begun playing an item.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The id of the MediaSource."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "The audio stream index."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "The subtitle stream index."
        },
        {
          "name": "playMethod",
          "schema": "string",
          "description": "The play method."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "canSeek",
          "schema": "boolean",
          "description": "Indicates if the client can seek."
        }
      ],
      "responses": []
    },
    {
      "url": "/Users/{userId}/PlayingItems/{itemId}/Progress",
      "method": "onPlaybackProgress",
      "httpMethod": "post",
      "tag": "Playstate",
      "description": "Reports a user's playback progress.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "Item id."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The id of the MediaSource."
        },
        {
          "name": "positionTicks",
          "schema": "integer",
          "description": "Optional. The current position, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "The audio stream index."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "The subtitle stream index."
        },
        {
          "name": "volumeLevel",
          "schema": "integer",
          "description": "Scale of 0-100."
        },
        {
          "name": "playMethod",
          "schema": "string",
          "description": "The play method."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "repeatMode",
          "schema": "string",
          "description": "The repeat mode."
        },
        {
          "name": "isPaused",
          "schema": "boolean",
          "description": "Indicates if the player is paused."
        },
        {
          "name": "isMuted",
          "schema": "boolean",
          "description": "Indicates if the player is muted."
        }
      ],
      "responses": []
    },
    {
      "url": "/Users/{userId}/Policy",
      "method": "updateUserPolicy",
      "httpMethod": "post",
      "tag": "User",
      "description": "Updates a user policy.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "The user id."
        },
        {
          "name": "AccessSchedules",
          "schema": "array",
          "description": ""
        },
        {
          "name": "AuthenticationProviderId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "BlockUnratedItems",
          "schema": "array",
          "description": ""
        },
        {
          "name": "BlockedChannels",
          "schema": "array",
          "description": ""
        },
        {
          "name": "BlockedMediaFolders",
          "schema": "array",
          "description": ""
        },
        {
          "name": "BlockedTags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "EnableAllChannels",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableAllDevices",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableAllFolders",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableAudioPlaybackTranscoding",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableContentDeletion",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableContentDeletionFromFolders",
          "schema": "array",
          "description": ""
        },
        {
          "name": "EnableContentDownloading",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableLiveTvAccess",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableLiveTvManagement",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableMediaConversion",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableMediaPlayback",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnablePlaybackRemuxing",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnablePublicSharing",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableRemoteAccess",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableRemoteControlOfOtherUsers",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableSharedDeviceControl",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableSyncTranscoding",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableUserPreferenceAccess",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnableVideoPlaybackTranscoding",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "EnabledChannels",
          "schema": "array",
          "description": ""
        },
        {
          "name": "EnabledDevices",
          "schema": "array",
          "description": ""
        },
        {
          "name": "EnabledFolders",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ForceRemoteSourceTranscoding",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "InvalidLoginAttemptCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "IsAdministrator",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsDisabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "IsHidden",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "LoginAttemptsBeforeLockout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxActiveSessions",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "MaxParentalRating",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "PasswordResetProviderId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "RemoteClientBitrateLimit",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "SyncPlayAccess",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Suggestions",
      "method": "getSuggestions",
      "httpMethod": "get",
      "tag": "Suggestions",
      "description": "Gets suggestions.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "The user id."
        },
        {
          "name": "mediaType",
          "schema": "array",
          "description": "The media types."
        },
        {
          "name": "type",
          "schema": "array",
          "description": "The type."
        },
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Optional. The start index."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The limit."
        },
        {
          "name": "enableTotalRecordCount",
          "schema": "boolean",
          "description": "Whether to enable the total record count."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Users/{userId}/Views",
      "method": "getUserViews",
      "httpMethod": "get",
      "tag": "UserViews",
      "description": "Get user views.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User id."
        },
        {
          "name": "includeExternalContent",
          "schema": "boolean",
          "description": "Whether or not to include external views such as channels or live tv."
        },
        {
          "name": "presetViews",
          "schema": "array",
          "description": "Preset views."
        },
        {
          "name": "includeHidden",
          "schema": "boolean",
          "description": "Whether or not to include hidden content."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/ActiveEncodings",
      "method": "stopEncodingProcess",
      "httpMethod": "delete",
      "tag": "HlsSegment",
      "description": "Stops an active encoding.",
      "parameters": [
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        }
      ],
      "responses": []
    },
    {
      "url": "/Videos/MergeVersions",
      "method": "mergeVersions",
      "httpMethod": "post",
      "tag": "Videos",
      "description": "Merges videos into a single record.",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": true,
          "description": "Item id list. This allows multiple, comma delimited."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/{itemId}/AdditionalParts",
      "method": "getAdditionalPart",
      "httpMethod": "get",
      "tag": "Videos",
      "description": "Gets additional parts for a video.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/{itemId}/AlternateSources",
      "method": "deleteAlternateSources",
      "httpMethod": "delete",
      "tag": "Videos",
      "description": "Removes alternate video sources.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/{itemId}/Subtitles",
      "method": "uploadSubtitle",
      "httpMethod": "post",
      "tag": "Subtitle",
      "description": "Upload an external subtitle file.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item the subtitle belongs to."
        },
        {
          "name": "Data",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "Format",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "IsForced",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "Language",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/Videos/{itemId}/Subtitles/{index}",
      "method": "deleteSubtitle",
      "httpMethod": "delete",
      "tag": "Subtitle",
      "description": "Deletes an external subtitle file.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "The index of the subtitle file."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/{itemId}/hls/{playlistId}/stream.m3u8",
      "method": "getHlsPlaylistLegacy",
      "httpMethod": "get",
      "tag": "HlsSegment",
      "description": "Gets a hls video playlist.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The video id."
        },
        {
          "name": "playlistId",
          "schema": "string",
          "required": true,
          "description": "The playlist id."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/{itemId}/hls/{playlistId}/{segmentId}.{segmentContainer}",
      "method": "getHlsVideoSegmentLegacy",
      "httpMethod": "get",
      "tag": "HlsSegment",
      "description": "Gets a hls video segment.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "playlistId",
          "schema": "string",
          "required": true,
          "description": "The playlist id."
        },
        {
          "name": "segmentId",
          "schema": "string",
          "required": true,
          "description": "The segment id."
        },
        {
          "name": "segmentContainer",
          "schema": "string",
          "required": true,
          "description": "The segment container."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/{itemId}/hls1/{playlistId}/{segmentId}.{container}",
      "method": "getHlsVideoSegment",
      "httpMethod": "get",
      "tag": "DynamicHls",
      "description": "Gets a video stream using HTTP live streaming.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "playlistId",
          "schema": "string",
          "required": true,
          "description": "The playlist id."
        },
        {
          "name": "segmentId",
          "schema": "integer",
          "required": true,
          "description": "The segment id."
        },
        {
          "name": "container",
          "schema": "string",
          "required": true,
          "description": "The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv."
        },
        {
          "name": "static",
          "schema": "boolean",
          "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false."
        },
        {
          "name": "params",
          "schema": "string",
          "description": "The streaming parameters."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The tag."
        },
        {
          "name": "deviceProfileId",
          "schema": "string",
          "description": "Optional. The dlna device profile id to utilize."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "segmentContainer",
          "schema": "string",
          "description": "The segment container."
        },
        {
          "name": "segmentLength",
          "schema": "integer",
          "description": "The segment lenght."
        },
        {
          "name": "minSegments",
          "schema": "integer",
          "description": "The minimum number of segments."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma."
        },
        {
          "name": "enableAutoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true."
        },
        {
          "name": "allowVideoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the video stream url."
        },
        {
          "name": "allowAudioStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the audio stream url."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "audioSampleRate",
          "schema": "integer",
          "description": "Optional. Specify a specific audio sample rate, e.g. 44100."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "audioChannels",
          "schema": "integer",
          "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "profile",
          "schema": "string",
          "description": "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high."
        },
        {
          "name": "level",
          "schema": "string",
          "description": "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1."
        },
        {
          "name": "framerate",
          "schema": "number",
          "description": "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "maxFramerate",
          "schema": "number",
          "description": "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "Optional. The fixed horizontal resolution of the encoded video."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "Optional. The fixed vertical resolution of the encoded video."
        },
        {
          "name": "videoBitRate",
          "schema": "integer",
          "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used."
        },
        {
          "name": "subtitleMethod",
          "schema": "string",
          "description": "Optional. Specify the subtitle delivery method."
        },
        {
          "name": "maxRefFrames",
          "schema": "integer",
          "description": "Optional."
        },
        {
          "name": "maxVideoBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum video bit depth."
        },
        {
          "name": "requireAvc",
          "schema": "boolean",
          "description": "Optional. Whether to require avc."
        },
        {
          "name": "deInterlace",
          "schema": "boolean",
          "description": "Optional. Whether to deinterlace the video."
        },
        {
          "name": "requireNonAnamorphic",
          "schema": "boolean",
          "description": "Optional. Whether to require a non anamorphic stream."
        },
        {
          "name": "transcodingMaxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels to transcode."
        },
        {
          "name": "cpuCoreLimit",
          "schema": "integer",
          "description": "Optional. The limit of how many cpu cores to use."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "enableMpegtsM2TsMode",
          "schema": "boolean",
          "description": "Optional. Whether to enable the MpegtsM2Ts mode."
        },
        {
          "name": "videoCodec",
          "schema": "string",
          "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv."
        },
        {
          "name": "subtitleCodec",
          "schema": "string",
          "description": "Optional. Specify a subtitle codec to encode to."
        },
        {
          "name": "transcodeReasons",
          "schema": "string",
          "description": "Optional. The transcoding reason."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used."
        },
        {
          "name": "videoStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used."
        },
        {
          "name": "context",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Dlna.EncodingContext."
        },
        {
          "name": "streamOptions",
          "schema": "object",
          "description": "Optional. The streaming options."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/{itemId}/live.m3u8",
      "method": "getLiveHlsStream",
      "httpMethod": "get",
      "tag": "VideoHls",
      "description": "Gets a hls live stream.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "container",
          "schema": "string",
          "description": "The audio container."
        },
        {
          "name": "static",
          "schema": "boolean",
          "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false."
        },
        {
          "name": "params",
          "schema": "string",
          "description": "The streaming parameters."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The tag."
        },
        {
          "name": "deviceProfileId",
          "schema": "string",
          "description": "Optional. The dlna device profile id to utilize."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "segmentContainer",
          "schema": "string",
          "description": "The segment container."
        },
        {
          "name": "segmentLength",
          "schema": "integer",
          "description": "The segment lenght."
        },
        {
          "name": "minSegments",
          "schema": "integer",
          "description": "The minimum number of segments."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma."
        },
        {
          "name": "enableAutoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true."
        },
        {
          "name": "allowVideoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the video stream url."
        },
        {
          "name": "allowAudioStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the audio stream url."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "audioSampleRate",
          "schema": "integer",
          "description": "Optional. Specify a specific audio sample rate, e.g. 44100."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "audioChannels",
          "schema": "integer",
          "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "profile",
          "schema": "string",
          "description": "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high."
        },
        {
          "name": "level",
          "schema": "string",
          "description": "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1."
        },
        {
          "name": "framerate",
          "schema": "number",
          "description": "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "maxFramerate",
          "schema": "number",
          "description": "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "Optional. The fixed horizontal resolution of the encoded video."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "Optional. The fixed vertical resolution of the encoded video."
        },
        {
          "name": "videoBitRate",
          "schema": "integer",
          "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used."
        },
        {
          "name": "subtitleMethod",
          "schema": "string",
          "description": "Optional. Specify the subtitle delivery method."
        },
        {
          "name": "maxRefFrames",
          "schema": "integer",
          "description": "Optional."
        },
        {
          "name": "maxVideoBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum video bit depth."
        },
        {
          "name": "requireAvc",
          "schema": "boolean",
          "description": "Optional. Whether to require avc."
        },
        {
          "name": "deInterlace",
          "schema": "boolean",
          "description": "Optional. Whether to deinterlace the video."
        },
        {
          "name": "requireNonAnamorphic",
          "schema": "boolean",
          "description": "Optional. Whether to require a non anamorphic stream."
        },
        {
          "name": "transcodingMaxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels to transcode."
        },
        {
          "name": "cpuCoreLimit",
          "schema": "integer",
          "description": "Optional. The limit of how many cpu cores to use."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "enableMpegtsM2TsMode",
          "schema": "boolean",
          "description": "Optional. Whether to enable the MpegtsM2Ts mode."
        },
        {
          "name": "videoCodec",
          "schema": "string",
          "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv."
        },
        {
          "name": "subtitleCodec",
          "schema": "string",
          "description": "Optional. Specify a subtitle codec to encode to."
        },
        {
          "name": "transcodeReasons",
          "schema": "string",
          "description": "Optional. The transcoding reason."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used."
        },
        {
          "name": "videoStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used."
        },
        {
          "name": "context",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Dlna.EncodingContext."
        },
        {
          "name": "streamOptions",
          "schema": "object",
          "description": "Optional. The streaming options."
        },
        {
          "name": "maxWidth",
          "schema": "integer",
          "description": "Optional. The max width."
        },
        {
          "name": "maxHeight",
          "schema": "integer",
          "description": "Optional. The max height."
        },
        {
          "name": "enableSubtitlesInManifest",
          "schema": "boolean",
          "description": "Optional. Whether to enable subtitles in the manifest."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/{itemId}/main.m3u8",
      "method": "getVariantHlsVideoPlaylist",
      "httpMethod": "get",
      "tag": "DynamicHls",
      "description": "Gets a video stream using HTTP live streaming.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "static",
          "schema": "boolean",
          "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false."
        },
        {
          "name": "params",
          "schema": "string",
          "description": "The streaming parameters."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The tag."
        },
        {
          "name": "deviceProfileId",
          "schema": "string",
          "description": "Optional. The dlna device profile id to utilize."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "segmentContainer",
          "schema": "string",
          "description": "The segment container."
        },
        {
          "name": "segmentLength",
          "schema": "integer",
          "description": "The segment length."
        },
        {
          "name": "minSegments",
          "schema": "integer",
          "description": "The minimum number of segments."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma."
        },
        {
          "name": "enableAutoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true."
        },
        {
          "name": "allowVideoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the video stream url."
        },
        {
          "name": "allowAudioStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the audio stream url."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "audioSampleRate",
          "schema": "integer",
          "description": "Optional. Specify a specific audio sample rate, e.g. 44100."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "audioChannels",
          "schema": "integer",
          "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "profile",
          "schema": "string",
          "description": "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high."
        },
        {
          "name": "level",
          "schema": "string",
          "description": "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1."
        },
        {
          "name": "framerate",
          "schema": "number",
          "description": "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "maxFramerate",
          "schema": "number",
          "description": "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "Optional. The fixed horizontal resolution of the encoded video."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "Optional. The fixed vertical resolution of the encoded video."
        },
        {
          "name": "videoBitRate",
          "schema": "integer",
          "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used."
        },
        {
          "name": "subtitleMethod",
          "schema": "string",
          "description": "Optional. Specify the subtitle delivery method."
        },
        {
          "name": "maxRefFrames",
          "schema": "integer",
          "description": "Optional."
        },
        {
          "name": "maxVideoBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum video bit depth."
        },
        {
          "name": "requireAvc",
          "schema": "boolean",
          "description": "Optional. Whether to require avc."
        },
        {
          "name": "deInterlace",
          "schema": "boolean",
          "description": "Optional. Whether to deinterlace the video."
        },
        {
          "name": "requireNonAnamorphic",
          "schema": "boolean",
          "description": "Optional. Whether to require a non anamorphic stream."
        },
        {
          "name": "transcodingMaxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels to transcode."
        },
        {
          "name": "cpuCoreLimit",
          "schema": "integer",
          "description": "Optional. The limit of how many cpu cores to use."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "enableMpegtsM2TsMode",
          "schema": "boolean",
          "description": "Optional. Whether to enable the MpegtsM2Ts mode."
        },
        {
          "name": "videoCodec",
          "schema": "string",
          "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv."
        },
        {
          "name": "subtitleCodec",
          "schema": "string",
          "description": "Optional. Specify a subtitle codec to encode to."
        },
        {
          "name": "transcodeReasons",
          "schema": "string",
          "description": "Optional. The transcoding reason."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used."
        },
        {
          "name": "videoStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used."
        },
        {
          "name": "context",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Dlna.EncodingContext."
        },
        {
          "name": "streamOptions",
          "schema": "object",
          "description": "Optional. The streaming options."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/{itemId}/master.m3u8",
      "method": "getMasterHlsVideoPlaylist",
      "httpMethod": "get",
      "tag": "DynamicHls",
      "description": "Gets a video hls playlist stream.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "static",
          "schema": "boolean",
          "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false."
        },
        {
          "name": "params",
          "schema": "string",
          "description": "The streaming parameters."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The tag."
        },
        {
          "name": "deviceProfileId",
          "schema": "string",
          "description": "Optional. The dlna device profile id to utilize."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "segmentContainer",
          "schema": "string",
          "description": "The segment container."
        },
        {
          "name": "segmentLength",
          "schema": "integer",
          "description": "The segment length."
        },
        {
          "name": "minSegments",
          "schema": "integer",
          "description": "The minimum number of segments."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "required": true,
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma."
        },
        {
          "name": "enableAutoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true."
        },
        {
          "name": "allowVideoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the video stream url."
        },
        {
          "name": "allowAudioStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the audio stream url."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "audioSampleRate",
          "schema": "integer",
          "description": "Optional. Specify a specific audio sample rate, e.g. 44100."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "audioChannels",
          "schema": "integer",
          "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "profile",
          "schema": "string",
          "description": "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high."
        },
        {
          "name": "level",
          "schema": "string",
          "description": "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1."
        },
        {
          "name": "framerate",
          "schema": "number",
          "description": "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "maxFramerate",
          "schema": "number",
          "description": "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "Optional. The fixed horizontal resolution of the encoded video."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "Optional. The fixed vertical resolution of the encoded video."
        },
        {
          "name": "videoBitRate",
          "schema": "integer",
          "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used."
        },
        {
          "name": "subtitleMethod",
          "schema": "string",
          "description": "Optional. Specify the subtitle delivery method."
        },
        {
          "name": "maxRefFrames",
          "schema": "integer",
          "description": "Optional."
        },
        {
          "name": "maxVideoBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum video bit depth."
        },
        {
          "name": "requireAvc",
          "schema": "boolean",
          "description": "Optional. Whether to require avc."
        },
        {
          "name": "deInterlace",
          "schema": "boolean",
          "description": "Optional. Whether to deinterlace the video."
        },
        {
          "name": "requireNonAnamorphic",
          "schema": "boolean",
          "description": "Optional. Whether to require a non anamorphic stream."
        },
        {
          "name": "transcodingMaxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels to transcode."
        },
        {
          "name": "cpuCoreLimit",
          "schema": "integer",
          "description": "Optional. The limit of how many cpu cores to use."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "enableMpegtsM2TsMode",
          "schema": "boolean",
          "description": "Optional. Whether to enable the MpegtsM2Ts mode."
        },
        {
          "name": "videoCodec",
          "schema": "string",
          "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv."
        },
        {
          "name": "subtitleCodec",
          "schema": "string",
          "description": "Optional. Specify a subtitle codec to encode to."
        },
        {
          "name": "transcodeReasons",
          "schema": "string",
          "description": "Optional. The transcoding reason."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used."
        },
        {
          "name": "videoStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used."
        },
        {
          "name": "context",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Dlna.EncodingContext."
        },
        {
          "name": "streamOptions",
          "schema": "object",
          "description": "Optional. The streaming options."
        },
        {
          "name": "enableAdaptiveBitrateStreaming",
          "schema": "boolean",
          "description": "Enable adaptive bitrate streaming."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/{itemId}/master.m3u8",
      "method": "headMasterHlsVideoPlaylist",
      "httpMethod": "head",
      "tag": "DynamicHls",
      "description": "Gets a video hls playlist stream.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "static",
          "schema": "boolean",
          "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false."
        },
        {
          "name": "params",
          "schema": "string",
          "description": "The streaming parameters."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The tag."
        },
        {
          "name": "deviceProfileId",
          "schema": "string",
          "description": "Optional. The dlna device profile id to utilize."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "segmentContainer",
          "schema": "string",
          "description": "The segment container."
        },
        {
          "name": "segmentLength",
          "schema": "integer",
          "description": "The segment length."
        },
        {
          "name": "minSegments",
          "schema": "integer",
          "description": "The minimum number of segments."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "required": true,
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma."
        },
        {
          "name": "enableAutoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true."
        },
        {
          "name": "allowVideoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the video stream url."
        },
        {
          "name": "allowAudioStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the audio stream url."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "audioSampleRate",
          "schema": "integer",
          "description": "Optional. Specify a specific audio sample rate, e.g. 44100."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "audioChannels",
          "schema": "integer",
          "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "profile",
          "schema": "string",
          "description": "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high."
        },
        {
          "name": "level",
          "schema": "string",
          "description": "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1."
        },
        {
          "name": "framerate",
          "schema": "number",
          "description": "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "maxFramerate",
          "schema": "number",
          "description": "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "Optional. The fixed horizontal resolution of the encoded video."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "Optional. The fixed vertical resolution of the encoded video."
        },
        {
          "name": "videoBitRate",
          "schema": "integer",
          "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used."
        },
        {
          "name": "subtitleMethod",
          "schema": "string",
          "description": "Optional. Specify the subtitle delivery method."
        },
        {
          "name": "maxRefFrames",
          "schema": "integer",
          "description": "Optional."
        },
        {
          "name": "maxVideoBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum video bit depth."
        },
        {
          "name": "requireAvc",
          "schema": "boolean",
          "description": "Optional. Whether to require avc."
        },
        {
          "name": "deInterlace",
          "schema": "boolean",
          "description": "Optional. Whether to deinterlace the video."
        },
        {
          "name": "requireNonAnamorphic",
          "schema": "boolean",
          "description": "Optional. Whether to require a non anamorphic stream."
        },
        {
          "name": "transcodingMaxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels to transcode."
        },
        {
          "name": "cpuCoreLimit",
          "schema": "integer",
          "description": "Optional. The limit of how many cpu cores to use."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "enableMpegtsM2TsMode",
          "schema": "boolean",
          "description": "Optional. Whether to enable the MpegtsM2Ts mode."
        },
        {
          "name": "videoCodec",
          "schema": "string",
          "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv."
        },
        {
          "name": "subtitleCodec",
          "schema": "string",
          "description": "Optional. Specify a subtitle codec to encode to."
        },
        {
          "name": "transcodeReasons",
          "schema": "string",
          "description": "Optional. The transcoding reason."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used."
        },
        {
          "name": "videoStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used."
        },
        {
          "name": "context",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Dlna.EncodingContext."
        },
        {
          "name": "streamOptions",
          "schema": "object",
          "description": "Optional. The streaming options."
        },
        {
          "name": "enableAdaptiveBitrateStreaming",
          "schema": "boolean",
          "description": "Enable adaptive bitrate streaming."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/{itemId}/stream",
      "method": "getVideoStream",
      "httpMethod": "get",
      "tag": "Videos",
      "description": "Gets a video stream.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "container",
          "schema": "string",
          "description": "The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv."
        },
        {
          "name": "static",
          "schema": "boolean",
          "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false."
        },
        {
          "name": "params",
          "schema": "string",
          "description": "The streaming parameters."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The tag."
        },
        {
          "name": "deviceProfileId",
          "schema": "string",
          "description": "Optional. The dlna device profile id to utilize."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "segmentContainer",
          "schema": "string",
          "description": "The segment container."
        },
        {
          "name": "segmentLength",
          "schema": "integer",
          "description": "The segment length."
        },
        {
          "name": "minSegments",
          "schema": "integer",
          "description": "The minimum number of segments."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma."
        },
        {
          "name": "enableAutoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true."
        },
        {
          "name": "allowVideoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the video stream url."
        },
        {
          "name": "allowAudioStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the audio stream url."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "audioSampleRate",
          "schema": "integer",
          "description": "Optional. Specify a specific audio sample rate, e.g. 44100."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "audioChannels",
          "schema": "integer",
          "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "profile",
          "schema": "string",
          "description": "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high."
        },
        {
          "name": "level",
          "schema": "string",
          "description": "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1."
        },
        {
          "name": "framerate",
          "schema": "number",
          "description": "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "maxFramerate",
          "schema": "number",
          "description": "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "Optional. The fixed horizontal resolution of the encoded video."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "Optional. The fixed vertical resolution of the encoded video."
        },
        {
          "name": "videoBitRate",
          "schema": "integer",
          "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used."
        },
        {
          "name": "subtitleMethod",
          "schema": "string",
          "description": "Optional. Specify the subtitle delivery method."
        },
        {
          "name": "maxRefFrames",
          "schema": "integer",
          "description": "Optional."
        },
        {
          "name": "maxVideoBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum video bit depth."
        },
        {
          "name": "requireAvc",
          "schema": "boolean",
          "description": "Optional. Whether to require avc."
        },
        {
          "name": "deInterlace",
          "schema": "boolean",
          "description": "Optional. Whether to deinterlace the video."
        },
        {
          "name": "requireNonAnamorphic",
          "schema": "boolean",
          "description": "Optional. Whether to require a non anamorphic stream."
        },
        {
          "name": "transcodingMaxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels to transcode."
        },
        {
          "name": "cpuCoreLimit",
          "schema": "integer",
          "description": "Optional. The limit of how many cpu cores to use."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "enableMpegtsM2TsMode",
          "schema": "boolean",
          "description": "Optional. Whether to enable the MpegtsM2Ts mode."
        },
        {
          "name": "videoCodec",
          "schema": "string",
          "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv."
        },
        {
          "name": "subtitleCodec",
          "schema": "string",
          "description": "Optional. Specify a subtitle codec to encode to."
        },
        {
          "name": "transcodeReasons",
          "schema": "string",
          "description": "Optional. The transcoding reason."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used."
        },
        {
          "name": "videoStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used."
        },
        {
          "name": "context",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Dlna.EncodingContext."
        },
        {
          "name": "streamOptions",
          "schema": "object",
          "description": "Optional. The streaming options."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/{itemId}/stream",
      "method": "headVideoStream",
      "httpMethod": "head",
      "tag": "Videos",
      "description": "Gets a video stream.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "container",
          "schema": "string",
          "description": "The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv."
        },
        {
          "name": "static",
          "schema": "boolean",
          "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false."
        },
        {
          "name": "params",
          "schema": "string",
          "description": "The streaming parameters."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The tag."
        },
        {
          "name": "deviceProfileId",
          "schema": "string",
          "description": "Optional. The dlna device profile id to utilize."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "segmentContainer",
          "schema": "string",
          "description": "The segment container."
        },
        {
          "name": "segmentLength",
          "schema": "integer",
          "description": "The segment length."
        },
        {
          "name": "minSegments",
          "schema": "integer",
          "description": "The minimum number of segments."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma."
        },
        {
          "name": "enableAutoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true."
        },
        {
          "name": "allowVideoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the video stream url."
        },
        {
          "name": "allowAudioStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the audio stream url."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "audioSampleRate",
          "schema": "integer",
          "description": "Optional. Specify a specific audio sample rate, e.g. 44100."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "audioChannels",
          "schema": "integer",
          "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "profile",
          "schema": "string",
          "description": "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high."
        },
        {
          "name": "level",
          "schema": "string",
          "description": "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1."
        },
        {
          "name": "framerate",
          "schema": "number",
          "description": "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "maxFramerate",
          "schema": "number",
          "description": "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "Optional. The fixed horizontal resolution of the encoded video."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "Optional. The fixed vertical resolution of the encoded video."
        },
        {
          "name": "videoBitRate",
          "schema": "integer",
          "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used."
        },
        {
          "name": "subtitleMethod",
          "schema": "string",
          "description": "Optional. Specify the subtitle delivery method."
        },
        {
          "name": "maxRefFrames",
          "schema": "integer",
          "description": "Optional."
        },
        {
          "name": "maxVideoBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum video bit depth."
        },
        {
          "name": "requireAvc",
          "schema": "boolean",
          "description": "Optional. Whether to require avc."
        },
        {
          "name": "deInterlace",
          "schema": "boolean",
          "description": "Optional. Whether to deinterlace the video."
        },
        {
          "name": "requireNonAnamorphic",
          "schema": "boolean",
          "description": "Optional. Whether to require a non anamorphic stream."
        },
        {
          "name": "transcodingMaxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels to transcode."
        },
        {
          "name": "cpuCoreLimit",
          "schema": "integer",
          "description": "Optional. The limit of how many cpu cores to use."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "enableMpegtsM2TsMode",
          "schema": "boolean",
          "description": "Optional. Whether to enable the MpegtsM2Ts mode."
        },
        {
          "name": "videoCodec",
          "schema": "string",
          "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv."
        },
        {
          "name": "subtitleCodec",
          "schema": "string",
          "description": "Optional. Specify a subtitle codec to encode to."
        },
        {
          "name": "transcodeReasons",
          "schema": "string",
          "description": "Optional. The transcoding reason."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used."
        },
        {
          "name": "videoStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used."
        },
        {
          "name": "context",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Dlna.EncodingContext."
        },
        {
          "name": "streamOptions",
          "schema": "object",
          "description": "Optional. The streaming options."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/Stream.{format}",
      "method": "getSubtitle",
      "httpMethod": "get",
      "tag": "Subtitle",
      "description": "Gets subtitles in a specified format.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "required": true,
          "description": "The media source id."
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "The subtitle stream index."
        },
        {
          "name": "format",
          "schema": "string",
          "required": true,
          "description": "The format of the returned subtitle."
        },
        {
          "name": "endPositionTicks",
          "schema": "integer",
          "description": "Optional. The end position of the subtitle in ticks."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Optional. Whether to copy the timestamps."
        },
        {
          "name": "addVttTimeMap",
          "schema": "boolean",
          "description": "Optional. Whether to add a VTT time map."
        },
        {
          "name": "startPositionTicks",
          "schema": "integer",
          "description": "Optional. The start position of the subtitle in ticks."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/subtitles.m3u8",
      "method": "getSubtitlePlaylist",
      "httpMethod": "get",
      "tag": "Subtitle",
      "description": "Gets an HLS subtitle playlist.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "The subtitle stream index."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "required": true,
          "description": "The media source id."
        },
        {
          "name": "segmentLength",
          "schema": "integer",
          "required": true,
          "description": "The subtitle segment length."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/{startPositionTicks}/Stream.{format}",
      "method": "getSubtitleWithTicks",
      "httpMethod": "get",
      "tag": "Subtitle",
      "description": "Gets subtitles in a specified format.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "required": true,
          "description": "The media source id."
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "The subtitle stream index."
        },
        {
          "name": "startPositionTicks",
          "schema": "integer",
          "required": true,
          "description": "Optional. The start position of the subtitle in ticks."
        },
        {
          "name": "format",
          "schema": "string",
          "required": true,
          "description": "The format of the returned subtitle."
        },
        {
          "name": "endPositionTicks",
          "schema": "integer",
          "description": "Optional. The end position of the subtitle in ticks."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Optional. Whether to copy the timestamps."
        },
        {
          "name": "addVttTimeMap",
          "schema": "boolean",
          "description": "Optional. Whether to add a VTT time map."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/{itemId}/{stream}.{container}",
      "method": "getVideoStreamByContainer",
      "httpMethod": "get",
      "tag": "Videos",
      "description": "Gets a video stream.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "container",
          "schema": "string",
          "required": true,
          "description": "The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv."
        },
        {
          "name": "static",
          "schema": "boolean",
          "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false."
        },
        {
          "name": "params",
          "schema": "string",
          "description": "The streaming parameters."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The tag."
        },
        {
          "name": "deviceProfileId",
          "schema": "string",
          "description": "Optional. The dlna device profile id to utilize."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "segmentContainer",
          "schema": "string",
          "description": "The segment container."
        },
        {
          "name": "segmentLength",
          "schema": "integer",
          "description": "The segment lenght."
        },
        {
          "name": "minSegments",
          "schema": "integer",
          "description": "The minimum number of segments."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma."
        },
        {
          "name": "enableAutoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true."
        },
        {
          "name": "allowVideoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the video stream url."
        },
        {
          "name": "allowAudioStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the audio stream url."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "audioSampleRate",
          "schema": "integer",
          "description": "Optional. Specify a specific audio sample rate, e.g. 44100."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "audioChannels",
          "schema": "integer",
          "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "profile",
          "schema": "string",
          "description": "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high."
        },
        {
          "name": "level",
          "schema": "string",
          "description": "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1."
        },
        {
          "name": "framerate",
          "schema": "number",
          "description": "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "maxFramerate",
          "schema": "number",
          "description": "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "Optional. The fixed horizontal resolution of the encoded video."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "Optional. The fixed vertical resolution of the encoded video."
        },
        {
          "name": "videoBitRate",
          "schema": "integer",
          "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used."
        },
        {
          "name": "subtitleMethod",
          "schema": "string",
          "description": "Optional. Specify the subtitle delivery method."
        },
        {
          "name": "maxRefFrames",
          "schema": "integer",
          "description": "Optional."
        },
        {
          "name": "maxVideoBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum video bit depth."
        },
        {
          "name": "requireAvc",
          "schema": "boolean",
          "description": "Optional. Whether to require avc."
        },
        {
          "name": "deInterlace",
          "schema": "boolean",
          "description": "Optional. Whether to deinterlace the video."
        },
        {
          "name": "requireNonAnamorphic",
          "schema": "boolean",
          "description": "Optional. Whether to require a non anamporphic stream."
        },
        {
          "name": "transcodingMaxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels to transcode."
        },
        {
          "name": "cpuCoreLimit",
          "schema": "integer",
          "description": "Optional. The limit of how many cpu cores to use."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "enableMpegtsM2TsMode",
          "schema": "boolean",
          "description": "Optional. Whether to enable the MpegtsM2Ts mode."
        },
        {
          "name": "videoCodec",
          "schema": "string",
          "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv."
        },
        {
          "name": "subtitleCodec",
          "schema": "string",
          "description": "Optional. Specify a subtitle codec to encode to."
        },
        {
          "name": "transcodeReasons",
          "schema": "string",
          "description": "Optional. The transcoding reason."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used."
        },
        {
          "name": "videoStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used."
        },
        {
          "name": "context",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Dlna.EncodingContext."
        },
        {
          "name": "streamOptions",
          "schema": "object",
          "description": "Optional. The streaming options."
        },
        {
          "name": "stream",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/{itemId}/{stream}.{container}",
      "method": "headVideoStreamByContainer",
      "httpMethod": "head",
      "tag": "Videos",
      "description": "Gets a video stream.",
      "parameters": [
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The item id."
        },
        {
          "name": "container",
          "schema": "string",
          "required": true,
          "description": "The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv."
        },
        {
          "name": "static",
          "schema": "boolean",
          "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false."
        },
        {
          "name": "params",
          "schema": "string",
          "description": "The streaming parameters."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The tag."
        },
        {
          "name": "deviceProfileId",
          "schema": "string",
          "description": "Optional. The dlna device profile id to utilize."
        },
        {
          "name": "playSessionId",
          "schema": "string",
          "description": "The play session id."
        },
        {
          "name": "segmentContainer",
          "schema": "string",
          "description": "The segment container."
        },
        {
          "name": "segmentLength",
          "schema": "integer",
          "description": "The segment lenght."
        },
        {
          "name": "minSegments",
          "schema": "integer",
          "description": "The minimum number of segments."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "description": "The media version id, if playing an alternate version."
        },
        {
          "name": "deviceId",
          "schema": "string",
          "description": "The device id of the client requesting. Used to stop encoding processes when needed."
        },
        {
          "name": "audioCodec",
          "schema": "string",
          "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma."
        },
        {
          "name": "enableAutoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true."
        },
        {
          "name": "allowVideoStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the video stream url."
        },
        {
          "name": "allowAudioStreamCopy",
          "schema": "boolean",
          "description": "Whether or not to allow copying of the audio stream url."
        },
        {
          "name": "breakOnNonKeyFrames",
          "schema": "boolean",
          "description": "Optional. Whether to break on non key frames."
        },
        {
          "name": "audioSampleRate",
          "schema": "integer",
          "description": "Optional. Specify a specific audio sample rate, e.g. 44100."
        },
        {
          "name": "maxAudioBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum audio bit depth."
        },
        {
          "name": "audioBitRate",
          "schema": "integer",
          "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "audioChannels",
          "schema": "integer",
          "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "maxAudioChannels",
          "schema": "integer",
          "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2."
        },
        {
          "name": "profile",
          "schema": "string",
          "description": "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high."
        },
        {
          "name": "level",
          "schema": "string",
          "description": "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1."
        },
        {
          "name": "framerate",
          "schema": "number",
          "description": "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "maxFramerate",
          "schema": "number",
          "description": "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements."
        },
        {
          "name": "copyTimestamps",
          "schema": "boolean",
          "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false."
        },
        {
          "name": "startTimeTicks",
          "schema": "integer",
          "description": "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "Optional. The fixed horizontal resolution of the encoded video."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "Optional. The fixed vertical resolution of the encoded video."
        },
        {
          "name": "videoBitRate",
          "schema": "integer",
          "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults."
        },
        {
          "name": "subtitleStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used."
        },
        {
          "name": "subtitleMethod",
          "schema": "string",
          "description": "Optional. Specify the subtitle delivery method."
        },
        {
          "name": "maxRefFrames",
          "schema": "integer",
          "description": "Optional."
        },
        {
          "name": "maxVideoBitDepth",
          "schema": "integer",
          "description": "Optional. The maximum video bit depth."
        },
        {
          "name": "requireAvc",
          "schema": "boolean",
          "description": "Optional. Whether to require avc."
        },
        {
          "name": "deInterlace",
          "schema": "boolean",
          "description": "Optional. Whether to deinterlace the video."
        },
        {
          "name": "requireNonAnamorphic",
          "schema": "boolean",
          "description": "Optional. Whether to require a non anamporphic stream."
        },
        {
          "name": "transcodingMaxAudioChannels",
          "schema": "integer",
          "description": "Optional. The maximum number of audio channels to transcode."
        },
        {
          "name": "cpuCoreLimit",
          "schema": "integer",
          "description": "Optional. The limit of how many cpu cores to use."
        },
        {
          "name": "liveStreamId",
          "schema": "string",
          "description": "The live stream id."
        },
        {
          "name": "enableMpegtsM2TsMode",
          "schema": "boolean",
          "description": "Optional. Whether to enable the MpegtsM2Ts mode."
        },
        {
          "name": "videoCodec",
          "schema": "string",
          "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv."
        },
        {
          "name": "subtitleCodec",
          "schema": "string",
          "description": "Optional. Specify a subtitle codec to encode to."
        },
        {
          "name": "transcodeReasons",
          "schema": "string",
          "description": "Optional. The transcoding reason."
        },
        {
          "name": "audioStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used."
        },
        {
          "name": "videoStreamIndex",
          "schema": "integer",
          "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used."
        },
        {
          "name": "context",
          "schema": "string",
          "description": "Optional. The MediaBrowser.Model.Dlna.EncodingContext."
        },
        {
          "name": "streamOptions",
          "schema": "object",
          "description": "Optional. The streaming options."
        },
        {
          "name": "stream",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Videos/{videoId}/{mediaSourceId}/Attachments/{index}",
      "method": "getAttachment",
      "httpMethod": "get",
      "tag": "VideoAttachments",
      "description": "Get video attachment.",
      "parameters": [
        {
          "name": "videoId",
          "schema": "string",
          "required": true,
          "description": "Video ID."
        },
        {
          "name": "mediaSourceId",
          "schema": "string",
          "required": true,
          "description": "Media Source ID."
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "Attachment Index."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/Years",
      "method": "getYears",
      "httpMethod": "get",
      "tag": "Years",
      "description": "Get years.",
      "parameters": [
        {
          "name": "startIndex",
          "schema": "integer",
          "description": "Skips over a given number of items within the results. Use for paging."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Optional. The maximum number of records to return."
        },
        {
          "name": "sortOrder",
          "schema": "string",
          "description": "Sort Order - Ascending,Descending."
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": "Specify this to localize the search to a specific item or folder. Omit to use the root."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Optional. Specify additional fields of information to return in the output."
        },
        {
          "name": "excludeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be excluded based on item type. This allows multiple, comma delimited."
        },
        {
          "name": "includeItemTypes",
          "schema": "array",
          "description": "Optional. If specified, results will be included based on item type. This allows multiple, comma delimited."
        },
        {
          "name": "mediaTypes",
          "schema": "array",
          "description": "Optional. Filter by MediaType. Allows multiple, comma delimited."
        },
        {
          "name": "sortBy",
          "schema": "string",
          "description": "Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime."
        },
        {
          "name": "enableUserData",
          "schema": "boolean",
          "description": "Optional. Include user data."
        },
        {
          "name": "imageTypeLimit",
          "schema": "integer",
          "description": "Optional. The max number of images to return, per image type."
        },
        {
          "name": "enableImageTypes",
          "schema": "array",
          "description": "Optional. The image types to include in the output."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "User Id."
        },
        {
          "name": "recursive",
          "schema": "boolean",
          "description": "Search recursively."
        },
        {
          "name": "enableImages",
          "schema": "boolean",
          "description": "Optional. Include image information in output."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/Years/{year}",
      "method": "getYear",
      "httpMethod": "get",
      "tag": "Years",
      "description": "Gets a year.",
      "parameters": [
        {
          "name": "year",
          "schema": "integer",
          "required": true,
          "description": "The year."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "Optional. Filter by user id, and attach user data."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is strictly used as a data transfer object from the api layer.\r\nThis holds information about a BaseItem in a format that is convenient for the client."
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/web/ConfigurationPage",
      "method": "getDashboardConfigurationPage",
      "httpMethod": "get",
      "tag": "Dashboard",
      "description": "Gets a dashboard configuration page.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": "The name of the page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/web/ConfigurationPages",
      "method": "getConfigurationPages",
      "httpMethod": "get",
      "tag": "Dashboard",
      "description": "Gets the configuration pages.",
      "parameters": [
        {
          "name": "enableInMainMenu",
          "schema": "boolean",
          "description": "Whether to enable in the main menu."
        },
        {
          "name": "pageType",
          "schema": "string",
          "description": "The Jellyfin.Api.Models.ConfigurationPageInfo."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "http://jellyfin.local",
  "apiTitle": "Jellyfin API",
  "endpoints": 340,
  "sdkMethods": 408,
  "schemas": 264,
  "parameters": 3292,
  "difficultyScore": 1363,
  "difficulty": "Very Hard"
}