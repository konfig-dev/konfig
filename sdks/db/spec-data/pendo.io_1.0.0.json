{
  "providerName": "pendo.io",
  "openApiRaw": "http://apidoc.receptive.io/receptive.swagger.json",
  "securitySchemes": {
    "userApiKey_query_parameter_": {
      "description": "Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request URL as a query parameter.",
      "in": "query",
      "name": "auth-token",
      "type": "apiKey"
    },
    "userApiKey_request_header_": {
      "description": "Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header.",
      "in": "header",
      "name": "auth-token",
      "type": "apiKey"
    }
  },
  "categories": [
    "ecommerce"
  ],
  "homepage": "pendo.io",
  "apiVersion": "1.0.0",
  "methods": [
    {
      "url": "/accounts",
      "method": "/accountsGet",
      "httpMethod": "get",
      "tag": "account",
      "typeScriptTag": "account",
      "description": "Query accounts",
      "parameters": [
        {
          "name": "limit",
          "schema": "number",
          "required": false,
          "description": "Limit the number of records returned"
        },
        {
          "name": "start",
          "schema": "number",
          "required": false,
          "description": "Offset to start at"
        },
        {
          "name": "orderDir",
          "schema": "string",
          "required": false,
          "description": "The sort direction"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "The field to use for sort"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/accounts/{id}",
      "method": "/accounts/{id}Delete",
      "httpMethod": "delete",
      "tag": "account",
      "typeScriptTag": "account",
      "description": "Delete an Account",
      "parameters": [
        {
          "name": "id",
          "schema": "number",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/accounts/{id}",
      "method": "/accounts/{id}Get",
      "httpMethod": "get",
      "tag": "account",
      "typeScriptTag": "account",
      "description": "Get an Account",
      "parameters": [
        {
          "name": "id",
          "schema": "number",
          "required": true,
          "description": "Account ID (generated by Feedback)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/accounts/{id}",
      "method": "/accounts/{id}Put",
      "httpMethod": "put",
      "tag": "account",
      "typeScriptTag": "account",
      "description": "Update an Account",
      "parameters": [
        {
          "name": "id",
          "schema": "number",
          "required": true,
          "description": "Account ID (generated by Feedback)"
        },
        {
          "name": "monthly_value",
          "schema": "number",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/accounts/{id}/tags",
      "method": "/accounts/{id}/tagsDelete",
      "httpMethod": "delete",
      "tag": "account",
      "typeScriptTag": "account",
      "description": "Delete custom Account tags",
      "parameters": [
        {
          "name": "id",
          "schema": "number",
          "required": true,
          "description": "Account ID (generated by Feedback)"
        }
      ],
      "responses": []
    },
    {
      "url": "/accounts/{id}/tags",
      "method": "/accounts/{id}/tagsGet",
      "httpMethod": "get",
      "tag": "account",
      "typeScriptTag": "account",
      "description": "Get custom Account tags",
      "parameters": [
        {
          "name": "id",
          "schema": "number",
          "required": true,
          "description": "Account ID (generated by Feedback)"
        }
      ],
      "responses": []
    },
    {
      "url": "/accounts/{id}/tags",
      "method": "/accounts/{id}/tagsPost",
      "httpMethod": "post",
      "tag": "account",
      "typeScriptTag": "account",
      "description": "Overwrite current custom Account tags with the given tags",
      "parameters": [
        {
          "name": "id",
          "schema": "number",
          "required": true,
          "description": "Account ID (generated by Feedback)"
        }
      ],
      "responses": []
    },
    {
      "url": "/comments",
      "method": "/commentsGet",
      "httpMethod": "get",
      "tag": "comment",
      "typeScriptTag": "comment",
      "description": "fetch Comment records",
      "parameters": [
        {
          "name": "caseId",
          "schema": "integer",
          "required": true,
          "description": "case_id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/features",
      "method": "/featuresGet",
      "httpMethod": "get",
      "tag": "feature",
      "typeScriptTag": "feature",
      "description": "Query features",
      "parameters": [
        {
          "name": "limit",
          "schema": "number",
          "required": false,
          "description": "Limit the number of records returned"
        },
        {
          "name": "start",
          "schema": "number",
          "required": false,
          "description": "Offset to start at"
        },
        {
          "name": "orderDir",
          "schema": "string",
          "required": false,
          "description": "The sort direction"
        },
        {
          "name": "isPrivate",
          "schema": "boolean",
          "required": false,
          "description": "Filter by whether the features are shown/hidden from customer, if supplied."
        },
        {
          "name": "wantedBy",
          "schema": "integer",
          "required": false,
          "description": "Filter by User ID, if supplied."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "The field to use for sort"
        },
        {
          "name": "tags",
          "schema": "string",
          "required": false,
          "description": "Tags to limit results by. Multiple tags can be provided via comma delimeted string. Tags with contexts can be used. E.g. \"....&tags=TagExample,Multi:TagThis,Multi:TagThat\"."
        },
        {
          "name": "products",
          "schema": "string",
          "required": false,
          "description": "Products to limit results by. Comma delimeted string of either ids or names. E.g. \"...&products=1,2,3\" or \"...products=Product1,Product2\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/features/{id}",
      "method": "/features/{id}Get",
      "httpMethod": "get",
      "tag": "feature",
      "typeScriptTag": "feature",
      "description": "Get a Feature by ID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "ID of the feature"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/features/{id}/tags",
      "method": "/features/{id}/tagsDelete",
      "httpMethod": "delete",
      "tag": "feature",
      "typeScriptTag": "feature",
      "description": "Delete custom Feature tags",
      "parameters": [
        {
          "name": "id",
          "schema": "number",
          "required": true,
          "description": "Feedback's Feature ID"
        }
      ],
      "responses": []
    },
    {
      "url": "/features/{id}/tags",
      "method": "/features/{id}/tagsGet",
      "httpMethod": "get",
      "tag": "feature",
      "typeScriptTag": "feature",
      "description": "Get custom Feature tags",
      "parameters": [
        {
          "name": "id",
          "schema": "number",
          "required": true,
          "description": "Account ID (generated by Feedback)"
        }
      ],
      "responses": []
    },
    {
      "url": "/features/{id}/tags",
      "method": "/features/{id}/tagsPost",
      "httpMethod": "post",
      "tag": "feature",
      "typeScriptTag": "feature",
      "description": "Overwrite current custom Feature tags with the given tags",
      "parameters": [
        {
          "name": "id",
          "schema": "number",
          "required": true,
          "description": "Feedback's Feature ID"
        }
      ],
      "responses": []
    },
    {
      "url": "/health-check/ping",
      "method": "/healthCheck/pingGet",
      "httpMethod": "get",
      "tag": "system",
      "typeScriptTag": "system",
      "description": "Health check for API",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/hooks",
      "method": "/hooksPost",
      "httpMethod": "post",
      "tag": "hooks",
      "typeScriptTag": "hooks",
      "description": "Subscribe to webhooks",
      "parameters": [
        {
          "name": "event",
          "schema": "string",
          "description": ""
        },
        {
          "name": "target_url",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/hooks/unsubscribe",
      "method": "/hooks/unsubscribePost",
      "httpMethod": "post",
      "tag": "hooks",
      "typeScriptTag": "hooks",
      "description": "Unsubscribe from webhooks",
      "parameters": [
        {
          "name": "target_url",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/search",
      "method": "/searchGet",
      "httpMethod": "get",
      "tag": "feature",
      "typeScriptTag": "feature",
      "description": "Search features",
      "parameters": [
        {
          "name": "scope",
          "schema": "string",
          "required": true,
          "description": "Specifies the type of entity being searched for. Must be set to 'feature'"
        },
        {
          "name": "q",
          "schema": "string",
          "required": true,
          "description": "The search term."
        },
        {
          "name": "status",
          "schema": "string",
          "required": false,
          "description": "A comma seperated list of status values to filter by, if required. Valid values: 'new', 'waiting', 'planned', 'developing', 'released', 'declined'."
        },
        {
          "name": "tags",
          "schema": "string",
          "required": false,
          "description": "Tags to limit results by - only applies when scope is 'case' or 'feature'. Multiple tags can be provided via comma delimeted string. Tags with contexts can be used. E.g. \"....&tags=TagExample,Multi:TagThis,Multi:TagThat\"."
        },
        {
          "name": "products",
          "schema": "string",
          "required": false,
          "description": "Products to limit results by. Comma delimeted string of either ids or names. E.g. \"...&products=1,2,3\" or \"...products=Product1,Product2\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users",
      "method": "/usersGet",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "fetch User records",
      "parameters": [
        {
          "name": "role",
          "schema": "string",
          "required": true,
          "description": "role"
        },
        {
          "name": "account",
          "schema": "integer",
          "required": false,
          "description": "Filter by Account ID, if supplied. Only useful if role param is endUser"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset to start at"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "Limit the number of records returned. Max value can be 300. If limit is set to more than 300 the api will return an error"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "The field to use for sort"
        },
        {
          "name": "orderDir",
          "schema": "string",
          "required": false,
          "description": "The sort direction"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users",
      "method": "/usersPost",
      "httpMethod": "post",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Ping to create or update an EndUser and Account in one call",
      "parameters": [
        {
          "name": "account",
          "schema": "object",
          "description": ""
        },
        {
          "name": "return_url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/users/invite_end_user",
      "method": "/users/inviteEndUserPost",
      "httpMethod": "post",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Invite an EndUser (customer)",
      "parameters": [
        {
          "name": "account_external_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "account_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "account_status",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "full_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "monthly_value",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "send_invite",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "user_external_id",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/users/invite_vendor_user",
      "method": "/users/inviteVendorUserPost",
      "httpMethod": "post",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Invite a VendorUser (Team member)",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "external_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "full_name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "permission_group_id",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "team",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/users/search",
      "method": "/users/searchGet",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Find a User with a query",
      "parameters": [
        {
          "name": "externalId",
          "schema": "string",
          "required": false,
          "description": "Find using your external ID, rather than the ID generated by Feedback"
        },
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": "Find user by their email address. Role param must be specified when using this option"
        },
        {
          "name": "role",
          "schema": "string",
          "description": "Users role ('vendorUser' or 'endUser'). Only useful when finding a user by their email address"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{id}",
      "method": "/users/{id}Delete",
      "httpMethod": "delete",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Delete a User",
      "parameters": [
        {
          "name": "id",
          "schema": "number",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{id}",
      "method": "/users/{id}Get",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Get a User record",
      "parameters": [
        {
          "name": "id",
          "schema": "number",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{id}",
      "method": "/users/{id}Put",
      "httpMethod": "put",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Update a User",
      "parameters": [
        {
          "name": "id",
          "schema": "number",
          "required": true,
          "description": "Feedback's User ID"
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "external_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "permission_group_id",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{id}/tags",
      "method": "/users/{id}/tagsDelete",
      "httpMethod": "delete",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Delete custom User tags",
      "parameters": [
        {
          "name": "id",
          "schema": "number",
          "required": true,
          "description": "Feedback's User ID"
        }
      ],
      "responses": []
    },
    {
      "url": "/users/{id}/tags",
      "method": "/users/{id}/tagsGet",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Get custom User tags",
      "parameters": [
        {
          "name": "id",
          "schema": "number",
          "required": true,
          "description": "Feedback's User ID"
        }
      ],
      "responses": []
    },
    {
      "url": "/users/{id}/tags",
      "method": "/users/{id}/tagsPost",
      "httpMethod": "post",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Overwrite current custom User tags with the given tags",
      "parameters": [
        {
          "name": "id",
          "schema": "number",
          "required": true,
          "description": "Feedback's User ID"
        }
      ],
      "responses": []
    },
    {
      "url": "/vendor_users",
      "method": "/vendorUsersPost",
      "httpMethod": "post",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Create or update a team member by their external_id",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "external_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "full_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "permission_group_id",
          "schema": "number",
          "description": ""
        },
        {
          "name": "team",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/votes",
      "method": "/votesGet",
      "httpMethod": "get",
      "tag": "votes",
      "typeScriptTag": "votes",
      "description": "",
      "parameters": [
        {
          "name": "userId",
          "schema": "integer",
          "required": false,
          "description": "Include only votes by User that voted on a feature."
        },
        {
          "name": "featureId",
          "schema": "integer",
          "required": false,
          "description": "Include only votes for Feature with this Feature ID"
        },
        {
          "name": "positive",
          "schema": "boolean",
          "required": false,
          "description": "Include only votes that are positive"
        },
        {
          "name": "negative",
          "schema": "boolean",
          "required": false,
          "description": "Include only votes that are negative"
        },
        {
          "name": "offset",
          "schema": "number",
          "required": false,
          "description": "Offset to start at"
        },
        {
          "name": "limit",
          "schema": "number",
          "required": false,
          "description": "Limit the number of records returned"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/votes",
      "method": "/votesPost",
      "httpMethod": "post",
      "tag": "votes",
      "typeScriptTag": "votes",
      "description": "update specified votes for a User",
      "parameters": [
        {
          "name": "user_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "votes",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    }
  ],
  "apiBaseUrl": "https://api.feedback.eu.pendo.io",
  "apiDescription": "## Who is this for?\n\nThis documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.\n\n## Authentication\n\nAPI calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.\n\n## Endpoint\n\nAPI endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.\n\n## Notes\n\nAPI endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.\n\n## Generating client code\n\nThis documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)",
  "apiTitle": "Pendo Feedback API",
  "endpoints": 19,
  "sdkMethods": 31,
  "schemas": 11,
  "parameters": 82,
  "contactEmail": "support@receptive.io",
  "difficultyScore": 57,
  "difficulty": "Easy"
}