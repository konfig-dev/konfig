{
  "providerName": "wowza.com",
  "openApiRaw": "https://sandbox.cloud.wowza.com/en/docs/api/v1",
  "securitySchemes": {
    "wsc-access-key": {
      "description": "A valid 64-digit, alphanumeric API access key.",
      "in": "header",
      "name": "wsc-access-key",
      "type": "apiKey"
    },
    "wsc-api-key": {
      "description": "Your account's 64-digit, alphanumeric API key. ",
      "in": "header",
      "name": "wsc-api-key",
      "type": "apiKey"
    }
  },
  "homepage": "wowza.com",
  "apiVersion": "1",
  "methods": [
    {
      "url": "/api/v1/specs",
      "method": "specs",
      "httpMethod": "get",
      "tag": "specs",
      "description": "Fetch Swagger information",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_streams",
      "method": "listLiveStreams",
      "httpMethod": "get",
      "tag": "live_streams",
      "description": "Fetch all live streams",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. <strong>Next</strong> and <strong>Previous</strong> links allow you to navigate multiple pages of results. Omit the <em>page</em> parameter or specify an integer that's less than or equal to <strong>0</strong> to view all (unpaginated) results."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "For use with the <em>page</em> parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is <strong>10</strong>."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_streams",
      "method": "createLiveStream",
      "httpMethod": "post",
      "tag": "live_streams",
      "description": "Create a live stream",
      "parameters": [
        {
          "name": "live_stream",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_streams/{id}",
      "method": "deleteLiveStream",
      "httpMethod": "delete",
      "tag": "live_streams",
      "description": "Delete a live stream",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the live stream."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_streams/{id}",
      "method": "showLiveStream",
      "httpMethod": "get",
      "tag": "live_streams",
      "description": "Fetch a live stream",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the live stream."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_streams/{id}",
      "method": "updateLiveStream",
      "httpMethod": "patch",
      "tag": "live_streams",
      "description": "Update a live stream",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the live stream."
        },
        {
          "name": "live_stream",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_streams/{id}/regenerate_connection_code",
      "method": "regenerateConnectionCodeLiveStream",
      "httpMethod": "put",
      "tag": "live_streams",
      "description": "Regenerate the connection code for a live stream",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the live stream."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_streams/{id}/reset",
      "method": "resetLiveStream",
      "httpMethod": "put",
      "tag": "live_streams",
      "description": "Reset a live stream",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the live stream."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_streams/{id}/start",
      "method": "startLiveStream",
      "httpMethod": "put",
      "tag": "live_streams",
      "description": "Start a live stream",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the live stream."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_streams/{id}/state",
      "method": "showLiveStreamState",
      "httpMethod": "get",
      "tag": "live_streams",
      "description": "Fetch the state of a live stream",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the live stream."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_streams/{id}/stats",
      "method": "showLiveStreamStats",
      "httpMethod": "get",
      "tag": "live_streams",
      "description": "Fetch metrics for an active live stream",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the live stream."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_streams/{id}/stop",
      "method": "stopLiveStream",
      "httpMethod": "put",
      "tag": "live_streams",
      "description": "Stop a live stream",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the live stream."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/live_streams/{id}/thumbnail_url",
      "method": "showLiveStreamThumbnailUrl",
      "httpMethod": "get",
      "tag": "live_streams",
      "description": "Fetch the thumbnail URL of a live stream",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the live stream."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/players",
      "method": "listPlayers",
      "httpMethod": "get",
      "tag": "players",
      "description": "Fetch all players",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. <strong>Next</strong> and <strong>Previous</strong> links allow you to navigate multiple pages of results. Omit the <em>page</em> parameter or specify an integer that's less than or equal to <strong>0</strong> to view all (unpaginated) results."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "For use with the <em>page</em> parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is <strong>10</strong>."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/players/{id}",
      "method": "showPlayer",
      "httpMethod": "get",
      "tag": "players",
      "description": "Fetch a player",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the player."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/players/{id}",
      "method": "updatePlayer",
      "httpMethod": "patch",
      "tag": "players",
      "description": "Update a player",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the player."
        },
        {
          "name": "player",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/players/{id}/rebuild",
      "method": "requestPlayerRebuild",
      "httpMethod": "post",
      "tag": "players",
      "description": "Rebuild player code",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the player."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/players/{id}/state",
      "method": "showPlayerState",
      "httpMethod": "get",
      "tag": "players",
      "description": "Fetch the state of a player",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the player."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/players/{player_id}/urls",
      "method": "listPlayerUrls",
      "httpMethod": "get",
      "tag": "players",
      "description": "Fetch all player URLs",
      "parameters": [
        {
          "name": "playerId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the player."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/players/{player_id}/urls",
      "method": "createPlayerUrl",
      "httpMethod": "post",
      "tag": "players",
      "description": "Create a player URL",
      "parameters": [
        {
          "name": "playerId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the player."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/players/{player_id}/urls/{id}",
      "method": "deletePlayerUrl",
      "httpMethod": "delete",
      "tag": "players",
      "description": "Delete a player URL",
      "parameters": [
        {
          "name": "playerId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the player."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the player URL."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/players/{player_id}/urls/{id}",
      "method": "showPlayerUrl",
      "httpMethod": "get",
      "tag": "players",
      "description": "Fetch a player URL",
      "parameters": [
        {
          "name": "playerId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the player."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the player URL."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/players/{player_id}/urls/{id}",
      "method": "updatePlayerUrl",
      "httpMethod": "patch",
      "tag": "players",
      "description": "Update a player URL",
      "parameters": [
        {
          "name": "playerId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the player."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the player URL."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/recordings",
      "method": "listRecordings",
      "httpMethod": "get",
      "tag": "recordings",
      "description": "Fetch all recordings",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. <strong>Next</strong> and <strong>Previous</strong> links allow you to navigate multiple pages of results. Omit the <em>page</em> parameter or specify an integer that's less than or equal to <strong>0</strong> to view all (unpaginated) results."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "For use with the <em>page</em> parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is <strong>10</strong>."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/recordings/{id}",
      "method": "deleteRecording",
      "httpMethod": "delete",
      "tag": "recordings",
      "description": "Delete a recording",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the recording."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/recordings/{id}",
      "method": "showRecording",
      "httpMethod": "get",
      "tag": "recordings",
      "description": "Fetch a recording",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the recording."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/recordings/{id}/state",
      "method": "showRecordingState",
      "httpMethod": "get",
      "tag": "recordings",
      "description": "Fetch the state of a recording",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the recording."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/schedules",
      "method": "listSchedules",
      "httpMethod": "get",
      "tag": "schedules",
      "description": "Fetch all schedules",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. <strong>Next</strong> and <strong>Previous</strong> links allow you to navigate multiple pages of results. Omit the <em>page</em> parameter or specify an integer that's less than or equal to <strong>0</strong> to view all (unpaginated) results."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "For use with the <em>page</em> parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is <strong>10</strong>."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/schedules",
      "method": "createSchedule",
      "httpMethod": "post",
      "tag": "schedules",
      "description": "Create a schedule",
      "parameters": [
        {
          "name": "schedule",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/schedules/{id}",
      "method": "deleteSchedule",
      "httpMethod": "delete",
      "tag": "schedules",
      "description": "Delete a schedule",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the schedule."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/schedules/{id}",
      "method": "showSchedule",
      "httpMethod": "get",
      "tag": "schedules",
      "description": "Fetch a schedule",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the schedule."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/schedules/{id}",
      "method": "updateSchedule",
      "httpMethod": "patch",
      "tag": "schedules",
      "description": "Update a schedule",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the schedule."
        },
        {
          "name": "schedule",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/schedules/{id}/disable",
      "method": "disableSchedule",
      "httpMethod": "put",
      "tag": "schedules",
      "description": "Disable a schedule",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the schedule."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/schedules/{id}/enable",
      "method": "enableSchedule",
      "httpMethod": "put",
      "tag": "schedules",
      "description": "Enable a schedule",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the schedule."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/schedules/{id}/state",
      "method": "showScheduleState",
      "httpMethod": "get",
      "tag": "schedules",
      "description": "Fetch the state of a schedule",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the schedule."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_sources",
      "method": "listStreamSources",
      "httpMethod": "get",
      "tag": "stream_sources",
      "description": "Fetch all stream sources",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. <strong>Next</strong> and <strong>Previous</strong> links allow you to navigate multiple pages of results. Omit the <em>page</em> parameter or specify an integer that's less than or equal to <strong>0</strong> to view all (unpaginated) results."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "For use with the <em>page</em> parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is <strong>10</strong>."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_sources",
      "method": "createStreamSource",
      "httpMethod": "post",
      "tag": "stream_sources",
      "description": "Add a stream source",
      "parameters": [
        {
          "name": "stream_source",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_sources/add",
      "method": "addStreamSource",
      "httpMethod": "post",
      "tag": "stream_sources",
      "description": "Deprecated operation",
      "parameters": [
        {
          "name": "stream_source",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_sources/{id}",
      "method": "deleteStreamSource",
      "httpMethod": "delete",
      "tag": "stream_sources",
      "description": "Delete a stream source",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream source."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_sources/{id}",
      "method": "showStreamSource",
      "httpMethod": "get",
      "tag": "stream_sources",
      "description": "Fetch a stream source",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream source."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_sources/{id}",
      "method": "updateStreamSource",
      "httpMethod": "patch",
      "tag": "stream_sources",
      "description": "Update a stream source",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream source."
        },
        {
          "name": "stream_source",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets",
      "method": "listStreamTargets",
      "httpMethod": "get",
      "tag": "stream_targets",
      "description": "Fetch all stream targets",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. <strong>Next</strong> and <strong>Previous</strong> links allow you to navigate multiple pages of results. Omit the <em>page</em> parameter or specify an integer that's less than or equal to <strong>0</strong> to view all (unpaginated) results."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "For use with the <em>page</em> parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is <strong>10</strong>."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets",
      "method": "createStreamTarget",
      "httpMethod": "post",
      "tag": "stream_targets",
      "description": "Create a stream target",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets/add",
      "method": "addStreamTarget",
      "httpMethod": "post",
      "tag": "stream_targets",
      "description": "Deprecated operation",
      "parameters": [
        {
          "name": "stream_target",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets/{id}",
      "method": "deleteStreamTarget",
      "httpMethod": "delete",
      "tag": "stream_targets",
      "description": "Delete a stream target",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets/{id}",
      "method": "showStreamTarget",
      "httpMethod": "get",
      "tag": "stream_targets",
      "description": "Fetch a stream target",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets/{id}",
      "method": "updateStreamTarget",
      "httpMethod": "patch",
      "tag": "stream_targets",
      "description": "Update a stream target",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        },
        {
          "name": "stream_target",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets/{id}/metrics/current",
      "method": "showStreamTargetMetricsCurrent",
      "httpMethod": "get",
      "tag": "stream_targets",
      "description": "Fetch current health metrics for an active Wowza ultra low latency stream target",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets/{id}/metrics/historic",
      "method": "showStreamTargetMetricsHistoric",
      "httpMethod": "get",
      "tag": "stream_targets",
      "description": "Fetch historic health metrics for a Wowza ultra low latency stream target",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        },
        {
          "name": "from",
          "schema": "string",
          "required": false,
          "description": "The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of <strong>YYYY-MM-DDTHH:MM:SSZ</strong> where <strong>HH</strong> is a 24-hour clock in UTC."
        },
        {
          "name": "to",
          "schema": "string",
          "required": false,
          "description": "The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of <strong>YYYY-MM-DDTHH:MM:SSZ</strong> where <strong>HH</strong> is a 24-hour clock in UTC."
        },
        {
          "name": "interval",
          "schema": "string",
          "required": false,
          "description": "The length of time for a block of metrics. The default is **10m** (10 minutes)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets/{id}/regenerate_connection_code",
      "method": "regenerateConnectionCodeStreamTarget",
      "httpMethod": "put",
      "tag": "stream_targets",
      "description": "Regenerate the connection code for a stream target",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets/{stream_target_id}/geoblock",
      "method": "showStreamTargetGeoblock",
      "httpMethod": "get",
      "tag": "stream_targets",
      "description": "Fetch geo-blocking for a stream target",
      "parameters": [
        {
          "name": "streamTargetId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets/{stream_target_id}/geoblock",
      "method": "updateStreamTargetGeoblock",
      "httpMethod": "patch",
      "tag": "stream_targets",
      "description": "Update geo-blocking for a stream target",
      "parameters": [
        {
          "name": "streamTargetId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets/{stream_target_id}/geoblock",
      "method": "createStreamTargetGeoblock",
      "httpMethod": "post",
      "tag": "stream_targets",
      "description": "Create geo-blocking for a stream target",
      "parameters": [
        {
          "name": "streamTargetId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets/{stream_target_id}/properties",
      "method": "listStreamTargetProperties",
      "httpMethod": "get",
      "tag": "stream_targets",
      "description": "Fetch all properties of a stream target",
      "parameters": [
        {
          "name": "streamTargetId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets/{stream_target_id}/properties",
      "method": "createStreamTargetProperty",
      "httpMethod": "post",
      "tag": "stream_targets",
      "description": "Create a property for a stream target",
      "parameters": [
        {
          "name": "streamTargetId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        },
        {
          "name": "property",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets/{stream_target_id}/properties/{id}",
      "method": "deleteStreamTargetProperty",
      "httpMethod": "delete",
      "tag": "stream_targets",
      "description": "Delete a stream target property",
      "parameters": [
        {
          "name": "streamTargetId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique string that identifies the stream target property. The string contains the <em>section</em> and the <em>key</em>, connected by a dash. For example, <strong>hls-chunkSize</strong>."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets/{stream_target_id}/properties/{id}",
      "method": "showStreamTargetProperty",
      "httpMethod": "get",
      "tag": "stream_targets",
      "description": "Fetch a property of a stream target",
      "parameters": [
        {
          "name": "streamTargetId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique string that identifies the stream target property. The string contains the <em>section</em> and the <em>key</em>, connected by a dash. For example, <strong>hls-chunkSize</strong>."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets/{stream_target_id}/token_auth",
      "method": "showStreamTargetTokenAuth",
      "httpMethod": "get",
      "tag": "stream_targets",
      "description": "Fetch token authorization for a stream target",
      "parameters": [
        {
          "name": "streamTargetId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets/{stream_target_id}/token_auth",
      "method": "updateStreamTargetTokenAuth",
      "httpMethod": "patch",
      "tag": "stream_targets",
      "description": "Update token authorization for a stream target",
      "parameters": [
        {
          "name": "streamTargetId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        },
        {
          "name": "token_auth",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/stream_targets/{stream_target_id}/token_auth",
      "method": "createStreamTargetTokenAuth",
      "httpMethod": "post",
      "tag": "stream_targets",
      "description": "Create token authorization for a stream target",
      "parameters": [
        {
          "name": "streamTargetId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        },
        {
          "name": "token_auth",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders",
      "method": "listTranscoders",
      "httpMethod": "get",
      "tag": "transcoders",
      "description": "Fetch all transcoders",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. <strong>Next</strong> and <strong>Previous</strong> links allow you to navigate multiple pages of results. Omit the <em>page</em> parameter or specify an integer that's less than or equal to <strong>0</strong> to view all (unpaginated) results."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "For use with the <em>page</em> parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is <strong>10</strong>."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders",
      "method": "createTranscoder",
      "httpMethod": "post",
      "tag": "transcoders",
      "description": "Create a transcoder",
      "parameters": [
        {
          "name": "transcoder",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{id}",
      "method": "deleteTranscoder",
      "httpMethod": "delete",
      "tag": "transcoders",
      "description": "Delete a transcoder",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{id}",
      "method": "showTranscoder",
      "httpMethod": "get",
      "tag": "transcoders",
      "description": "Fetch a transcoder",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{id}",
      "method": "updateTranscoder",
      "httpMethod": "patch",
      "tag": "transcoders",
      "description": "Update a transcoder",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "transcoder",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{id}/disable_all_stream_targets",
      "method": "disableAllStreamTargetsTranscoder",
      "httpMethod": "put",
      "tag": "transcoders",
      "description": "Disable a transcoder's stream targets",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{id}/enable_all_stream_targets",
      "method": "enableAllStreamTargetsTranscoder",
      "httpMethod": "put",
      "tag": "transcoders",
      "description": "Enable a transcoder's stream targets",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{id}/recordings",
      "method": "listTranscoderRecordings",
      "httpMethod": "get",
      "tag": "transcoders",
      "description": "Fetch a transcoder's recordings",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{id}/reset",
      "method": "resetTranscoder",
      "httpMethod": "put",
      "tag": "transcoders",
      "description": "Reset a transcoder",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{id}/schedules",
      "method": "listTranscoderSchedules",
      "httpMethod": "get",
      "tag": "transcoders",
      "description": "Fetch transcoder's schedules",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{id}/start",
      "method": "startTranscoder",
      "httpMethod": "put",
      "tag": "transcoders",
      "description": "Start a transcoder",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{id}/state",
      "method": "showTranscoderState",
      "httpMethod": "get",
      "tag": "transcoders",
      "description": "Fetch the state and uptime ID of a transcoder",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{id}/stats",
      "method": "showTranscoderStats",
      "httpMethod": "get",
      "tag": "transcoders",
      "description": "Fetch statistics for a current transcoder",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{id}/stop",
      "method": "stopTranscoder",
      "httpMethod": "put",
      "tag": "transcoders",
      "description": "Stop a transcoder",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{id}/thumbnail_url",
      "method": "showTranscoderThumbnailUrl",
      "httpMethod": "get",
      "tag": "transcoders",
      "description": "Fetch the thumbnail URL of a transcoder",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/outputs",
      "method": "listTranscoderOutputs",
      "httpMethod": "get",
      "tag": "transcoders",
      "description": "Fetch all outputs of a transcoder",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/outputs",
      "method": "createTranscoderOutput",
      "httpMethod": "post",
      "tag": "transcoders",
      "description": "Create an output",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/outputs/{id}",
      "method": "deleteTranscoderOutput",
      "httpMethod": "delete",
      "tag": "transcoders",
      "description": "Delete an output",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the output rendition."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/outputs/{id}",
      "method": "showTranscoderOutput",
      "httpMethod": "get",
      "tag": "transcoders",
      "description": "Fetch an output",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the output rendition."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/outputs/{id}",
      "method": "updateTranscoderOutput",
      "httpMethod": "patch",
      "tag": "transcoders",
      "description": "Update an output",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the output rendition."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/outputs/{id}/add_stream_target",
      "method": "addStreamTargetToTranscoderOutput",
      "httpMethod": "post",
      "tag": "transcoders",
      "description": "Deprecated operation",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the output rendition."
        },
        {
          "name": "output_stream_target",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/outputs/{id}/remove_stream_target",
      "method": "removeStreamTargetToTranscoderOutput",
      "httpMethod": "delete",
      "tag": "transcoders",
      "description": "Deprecated operation",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the output rendition."
        },
        {
          "name": "output_stream_target",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets",
      "method": "listTranscoderOutputOutputStreamTargets",
      "httpMethod": "get",
      "tag": "transcoders",
      "description": "Fetch all output stream targets of an output of a transcoder",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "outputId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the output rendition."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets",
      "method": "createTranscoderOutputOutputStreamTarget",
      "httpMethod": "post",
      "tag": "transcoders",
      "description": "Create an output stream target",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "outputId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the output rendition."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}",
      "method": "deleteTranscoderOutputOutputStreamTarget",
      "httpMethod": "delete",
      "tag": "transcoders",
      "description": "Delete an output stream target",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "outputId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the output rendition."
        },
        {
          "name": "streamTargetId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}",
      "method": "showTranscoderOutputOutputStreamTarget",
      "httpMethod": "get",
      "tag": "transcoders",
      "description": "Fetch an output stream target",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "outputId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the output rendition."
        },
        {
          "name": "streamTargetId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}",
      "method": "updateTranscoderOutputOutputStreamTarget",
      "httpMethod": "patch",
      "tag": "transcoders",
      "description": "Update an output stream target",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "outputId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the output rendition."
        },
        {
          "name": "streamTargetId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}/disable",
      "method": "disableTranscoderOutputOutputStreamTarget",
      "httpMethod": "put",
      "tag": "transcoders",
      "description": "Disable an output stream target",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "outputId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the output rendition."
        },
        {
          "name": "streamTargetId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}/enable",
      "method": "enableTranscoderOutputOutputStreamTarget",
      "httpMethod": "put",
      "tag": "transcoders",
      "description": "Enable an output stream target",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "outputId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the output rendition."
        },
        {
          "name": "streamTargetId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}/restart",
      "method": "restartTranscoderOutputOutputStreamTarget",
      "httpMethod": "put",
      "tag": "transcoders",
      "description": "Restart an output stream target",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "outputId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the output rendition."
        },
        {
          "name": "streamTargetId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/properties",
      "method": "listTranscoderProperties",
      "httpMethod": "get",
      "tag": "transcoders",
      "description": "Fetch a transcoder's properties",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/properties",
      "method": "createTranscoderProperty",
      "httpMethod": "post",
      "tag": "transcoders",
      "description": "Create a property for a transcoder",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "property",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/properties/{id}",
      "method": "deleteTranscoderProperty",
      "httpMethod": "delete",
      "tag": "transcoders",
      "description": "Delete a transcoder's property",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/properties/{id}",
      "method": "showTranscoderProperty",
      "httpMethod": "get",
      "tag": "transcoders",
      "description": "Fetch a property for a transcoder",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/uptimes",
      "method": "indexUptimes",
      "httpMethod": "get",
      "tag": "transcoders",
      "description": "Fetch all uptime records for a transcoder",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed first. <strong>Next</strong> and <strong>Previous</strong> links allow you to navigate multiple pages of results. Omit the <em>page</em> parameter or specify an integer that's less than or equal to <strong>0</strong> to view all (unpaginated) results."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "For use with the <em>page</em> parameter. Indicates how many records should be included on each page of results. A valid value is any positive integer. The default is <strong>10</strong>."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/uptimes/{id}",
      "method": "showUptime",
      "httpMethod": "get",
      "tag": "transcoders",
      "description": "Fetch an uptime record",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the uptime record."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/uptimes/{id}/metrics/current",
      "method": "showUptimeMetricsCurrent",
      "httpMethod": "get",
      "tag": "transcoders",
      "description": "Fetch current stream health metrics for an active transcoder",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the uptime record."
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of fields to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/transcoders/{transcoder_id}/uptimes/{id}/metrics/historic",
      "method": "showUptimeMetricsHistoric",
      "httpMethod": "get",
      "tag": "transcoders",
      "description": "Fetch historic stream health metrics for a transcoder",
      "parameters": [
        {
          "name": "transcoderId",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the transcoder."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the uptime record."
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of fields to return."
        },
        {
          "name": "from",
          "schema": "string",
          "required": false,
          "description": "The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of <strong>YYYY-MM-DDTHH:MM:SSZ</strong> where <strong>HH</strong> is a 24-hour clock in UTC."
        },
        {
          "name": "to",
          "schema": "string",
          "required": false,
          "description": "The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of <strong>YYYY-MM-DDTHH:MM:SSZ</strong> where <strong>HH</strong> is a 24-hour clock in UTC."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    },
    {
      "url": "/usage/network/stream_sources",
      "method": "usageNetworkStreamSourcesIndex",
      "httpMethod": "get",
      "tag": "network",
      "description": "Fetch network usage for all stream sources",
      "parameters": [
        {
          "name": "from",
          "schema": "string",
          "required": false,
          "description": "The start of the range of time you want to view. Specify <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC. The <em>from</em> default is the last billing date."
        },
        {
          "name": "to",
          "schema": "string",
          "required": false,
          "description": "The end of the range of time you want to view. Specify <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC. The <em>to</em> default is the end of the current day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/usage/network/stream_targets",
      "method": "usageNetworkStreamTargetsIndex",
      "httpMethod": "get",
      "tag": "network",
      "description": "Fetch network usage for all stream targets",
      "parameters": [
        {
          "name": "from",
          "schema": "string",
          "required": false,
          "description": "The start of the range of time you want to view. Specify <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC. The <em>from</em> default is the last billing date."
        },
        {
          "name": "to",
          "schema": "string",
          "required": false,
          "description": "The end of the range of time you want to view. Specify <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC. The <em>to</em> default is the end of the current day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/usage/network/transcoders",
      "method": "usageNetworkTranscodersIndex",
      "httpMethod": "get",
      "tag": "network",
      "description": "Fetch network usage for all transcoders",
      "parameters": [
        {
          "name": "from",
          "schema": "string",
          "required": false,
          "description": "The start of the range of time you want to view. Specify <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC. The <em>from</em> default is the last billing date."
        },
        {
          "name": "to",
          "schema": "string",
          "required": false,
          "description": "The end of the range of time you want to view. Specify <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC. The <em>to</em> default is the end of the current day."
        },
        {
          "name": "transcoderType",
          "schema": "string",
          "required": false,
          "description": "The type of transcoder. The default is <strong>transcoded</strong>."
        },
        {
          "name": "billingMode",
          "schema": "string",
          "required": false,
          "description": "The billing mode for the transcoder. The default is <strong>pay_as_you_go</strong>."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/usage/storage/peak_recording",
      "method": "usageStoragePeakRecordingIndex",
      "httpMethod": "get",
      "tag": "storage",
      "description": "Fetch peak recording storage",
      "parameters": [
        {
          "name": "from",
          "schema": "string",
          "required": false,
          "description": "The start of the range of time you want to view. Specify <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC. The <em>from</em> default is the last billing date."
        },
        {
          "name": "to",
          "schema": "string",
          "required": false,
          "description": "The end of the range of time you want to view. Specify <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC. The <em>to</em> default is the end of the current day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/usage/time/transcoders",
      "method": "usageTimeTranscodersIndex",
      "httpMethod": "get",
      "tag": "processing time",
      "description": "Fetch stream processing time",
      "parameters": [
        {
          "name": "from",
          "schema": "string",
          "required": false,
          "description": "The start of the range of time you want to view. Specify <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC. The <em>from</em> default is the last billing date."
        },
        {
          "name": "to",
          "schema": "string",
          "required": false,
          "description": "The end of the range of time you want to view. Specify <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC. The <em>to</em> default is the end of the current day."
        },
        {
          "name": "transcoderType",
          "schema": "string",
          "required": false,
          "description": "The type of transcoder. The default is <strong>transcoded</strong>."
        },
        {
          "name": "billingMode",
          "schema": "string",
          "required": false,
          "description": "The billing mode for the transcoder. The default is <strong>pay_as_you_go</strong>."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/usage/viewer_data/stream_targets/{id}",
      "method": "showViewerDataStreamTarget",
      "httpMethod": "get",
      "tag": "viewer data",
      "description": "Fetch viewer data for a stream target",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique alphanumeric string that identifies the stream target."
        },
        {
          "name": "from",
          "schema": "string",
          "required": false,
          "description": "The start of the range of time you want to view. Specify <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC. The <em>from</em> default is the last billing date."
        },
        {
          "name": "to",
          "schema": "string",
          "required": false,
          "description": "The end of the range of time you want to view. Specify <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC. The <em>to</em> default is the end of the current day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "410",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api-sandbox.cloud.wowza.com/api/v1",
  "apiDescription": "\n# About the REST API\n\nThe Wowza Streaming Cloud<sup>TM</sup> REST API (application programming interface) offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.\n\nThe Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS.\nCORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.\n\nIn order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits).\n# About this documentation\nThis reference documentation is based on the open-source [Swagger framework](http://swagger.io/specification/).\nIt allows you to view the operations, parameters, and request and reponse schemas for every resource. Request samples are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON.\n\nFor more information and examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).\n\n# Query requirements\nThe Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, two authentication keys, and the correct version number in the base path.\n\n## JSON\nThe Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.\n\nResponses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.\n\n## Authentication\nRequests to the Wowza Streaming Cloud REST API must be authenticated with two keys: an API key and an access key. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud.\n\nUse the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):\n\n```bash\ncurl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'\n```\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n## Version\nThe Wowza Streaming Cloud API is currently at version 1.0.0. Use `v1` in your base path in every request, like this path to the live_streams endpoint:\n```\nhttps://api.cloud.wowza.com/api/v1/live_streams\n```\n## Example query\nHere is a complete example POST request, in cURL, with proper JSON syntax, headers, authentication, and version information:\n```bash\ncurl -H 'wsc-api-key: [64-character-api-key-goes-here]' -H 'wsc-access-key: [64-character-access-key-goes-here]'\n  -H 'Content-Type: application/json' -X POST -d '{\n    \"live_stream\": {\n      \"name\": \"My live Stream\",\n      \"...\": \"...\"\n    }\n  }' https://api.cloud.wowza.com/api/v1/live_streams\n```\n",
  "apiTitle": "Wowza Streaming Cloud REST API Reference Documentation",
  "endpoints": 70,
  "sdkMethods": 104,
  "schemas": 107,
  "parameters": 170,
  "contactUrl": "https://www.wowza.com/contact",
  "difficultyScore": 200,
  "difficulty": "Hard"
}