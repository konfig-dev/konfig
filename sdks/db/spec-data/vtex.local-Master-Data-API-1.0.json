{
  "providerName": "vtex.local",
  "openApiRaw": "https://raw.githubusercontent.com/vtex/openapi-schemas/master/VTEX - Master Data API - v2.json",
  "securitySchemes": {
    "appKey": {
      "in": "header",
      "name": "X-VTEX-API-AppKey",
      "type": "apiKey"
    },
    "appToken": {
      "in": "header",
      "name": "X-VTEX-API-AppToken",
      "type": "apiKey"
    }
  },
  "homepage": "vtex.local",
  "serviceName": "Master-Data-API-",
  "apiVersion": "1.0",
  "methods": [
    {
      "url": "/api/dataentities/Address/documents",
      "method": "createNewCustomerAddress",
      "httpMethod": "post",
      "tag": "Addresses",
      "description": "Create new customer address",
      "parameters": [
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "accept",
          "schema": "string",
          "required": true,
          "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."
        },
        {
          "name": "schema",
          "schema": "string",
          "required": false,
          "description": "Name of the schema the document to be created needs to be compliant with."
        },
        {
          "name": "addressName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "addressType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "description": ""
        },
        {
          "name": "complement",
          "schema": "string",
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "description": ""
        },
        {
          "name": "neighborhood",
          "schema": "string",
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "description": ""
        },
        {
          "name": "postalCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "receiverName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "reference",
          "schema": "string",
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "street",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/dataentities/Address/documents/{id}",
      "method": "deleteCustomerAddress",
      "httpMethod": "delete",
      "tag": "Addresses",
      "description": "Delete customer address",
      "parameters": [
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "accept",
          "schema": "string",
          "required": true,
          "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the Document."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/dataentities/Address/documents/{id}",
      "method": "updateCustomerAddress",
      "httpMethod": "patch",
      "tag": "Addresses",
      "description": "Update customer address",
      "parameters": [
        {
          "name": "schema",
          "schema": "string",
          "required": false,
          "description": "Name of the schema the document to be created needs to be compliant with."
        },
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "accept",
          "schema": "string",
          "required": true,
          "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the Document."
        },
        {
          "name": "addressName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "addressType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "description": ""
        },
        {
          "name": "complement",
          "schema": "string",
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "description": ""
        },
        {
          "name": "neighborhood",
          "schema": "string",
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "description": ""
        },
        {
          "name": "postalCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "receiverName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "reference",
          "schema": "string",
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "street",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/dataentities/Client/documents",
      "method": "createNewCustomerProfilev2",
      "httpMethod": "post",
      "tag": "Customer profiles",
      "description": "Create new customer profile",
      "parameters": [
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "accept",
          "schema": "string",
          "required": true,
          "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."
        },
        {
          "name": "schema",
          "schema": "string",
          "required": false,
          "description": "Name of the schema the document to be created needs to be compliant with."
        },
        {
          "name": "document",
          "schema": "string",
          "description": ""
        },
        {
          "name": "documentType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "firstName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "isCorporate",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "isNewsletterOptIn",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "lastName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "localeDefault",
          "schema": "string",
          "description": ""
        },
        {
          "name": "phone",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/dataentities/Client/documents/{id}",
      "method": "deleteCustomerProfile",
      "httpMethod": "delete",
      "tag": "Customer profiles",
      "description": "Delete customer profile",
      "parameters": [
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "accept",
          "schema": "string",
          "required": true,
          "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the Document."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/dataentities/Client/documents/{id}",
      "method": "updateCustomerProfile",
      "httpMethod": "patch",
      "tag": "Customer profiles",
      "description": "Update customer profile",
      "parameters": [
        {
          "name": "schema",
          "schema": "string",
          "required": false,
          "description": "Name of the schema the document to be created needs to be compliant with."
        },
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "accept",
          "schema": "string",
          "required": true,
          "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the Document."
        },
        {
          "name": "document",
          "schema": "string",
          "description": ""
        },
        {
          "name": "documentType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "firstName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "isCorporate",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "isNewsletterOptIn",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "lastName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "localeDefault",
          "schema": "string",
          "description": ""
        },
        {
          "name": "phone",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/dataentities/{dataEntityName}/documents",
      "method": "createorupdatepartialdocument",
      "httpMethod": "patch",
      "tag": "Documents",
      "description": "Create partial document",
      "parameters": [
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "schema",
          "schema": "string",
          "required": false,
          "description": "Name of the schema the document to be created needs to be compliant with."
        },
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "accept",
          "schema": "string",
          "required": true,
          "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/dataentities/{dataEntityName}/documents",
      "method": "createnewdocument",
      "httpMethod": "post",
      "tag": "Documents",
      "description": "Create new document",
      "parameters": [
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "accept",
          "schema": "string",
          "required": true,
          "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."
        },
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "schema",
          "schema": "string",
          "required": false,
          "description": "Name of the schema the document to be created needs to be compliant with."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/dataentities/{dataEntityName}/documents/{id}",
      "method": "deletedocument",
      "httpMethod": "delete",
      "tag": "Documents",
      "description": "Delete document",
      "parameters": [
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "accept",
          "schema": "string",
          "required": true,
          "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the Document."
        }
      ],
      "responses": []
    },
    {
      "url": "/api/dataentities/{dataEntityName}/documents/{id}",
      "method": "getdocument",
      "httpMethod": "get",
      "tag": "Documents",
      "description": "Get document",
      "parameters": [
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "accept",
          "schema": "string",
          "required": true,
          "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the Document."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/dataentities/{dataEntityName}/documents/{id}",
      "method": "updatepartialdocument",
      "httpMethod": "patch",
      "tag": "Documents",
      "description": "Update partial document",
      "parameters": [
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "where",
          "schema": "string",
          "required": false,
          "description": "Filter specification."
        },
        {
          "name": "schema",
          "schema": "string",
          "required": false,
          "description": "Name of the schema the document to be created needs to be compliant with."
        },
        {
          "name": "accept",
          "schema": "string",
          "required": true,
          "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the Document."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/dataentities/{dataEntityName}/documents/{id}",
      "method": "updateentiredocument",
      "httpMethod": "put",
      "tag": "Documents",
      "description": "Update entire document",
      "parameters": [
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "where",
          "schema": "string",
          "required": false,
          "description": "Filter specification."
        },
        {
          "name": "schema",
          "schema": "string",
          "required": false,
          "description": "Name of the schema the document to be created needs to be compliant with."
        },
        {
          "name": "accept",
          "schema": "string",
          "required": true,
          "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the Document."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/dataentities/{dataEntityName}/documents/{id}/clusters",
      "method": "validatedocumentbyclusters",
      "httpMethod": "post",
      "tag": "Clusters",
      "description": "Validate document by clusters",
      "parameters": [
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "accept",
          "schema": "string",
          "required": true,
          "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the Document."
        }
      ],
      "responses": []
    },
    {
      "url": "/api/dataentities/{dataEntityName}/documents/{id}/versions",
      "method": "listversions",
      "httpMethod": "get",
      "tag": "Versions",
      "description": "List versions",
      "parameters": [
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "accept",
          "schema": "string",
          "required": true,
          "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the Document."
        },
        {
          "name": "load",
          "schema": "boolean",
          "required": false,
          "description": "If true, return all the fields in each version of the document"
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "If `load` is true, the response will return only these specific fields"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/dataentities/{dataEntityName}/documents/{id}/versions/{versionId}",
      "method": "getversion",
      "httpMethod": "get",
      "tag": "Versions",
      "description": "Get version",
      "parameters": [
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "accept",
          "schema": "string",
          "required": true,
          "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the Document."
        },
        {
          "name": "versionId",
          "schema": "string",
          "required": true,
          "description": "ID of the version to update."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/dataentities/{dataEntityName}/documents/{id}/versions/{versionId}",
      "method": "putversion",
      "httpMethod": "put",
      "tag": "Versions",
      "description": "Put version",
      "parameters": [
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "accept",
          "schema": "string",
          "required": true,
          "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the Document."
        },
        {
          "name": "versionId",
          "schema": "string",
          "required": true,
          "description": "ID of the version to update"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/dataentities/{dataEntityName}/indices",
      "method": "getindices",
      "httpMethod": "get",
      "tag": "Indices",
      "description": "Get indices",
      "parameters": [
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        }
      ],
      "responses": []
    },
    {
      "url": "/api/dataentities/{dataEntityName}/indices",
      "method": "putindices",
      "httpMethod": "put",
      "tag": "Indices",
      "description": "Put indices",
      "parameters": [
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "fields",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "multiple",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/dataentities/{dataEntityName}/indices/{index_name}",
      "method": "deleteindexbyname",
      "httpMethod": "delete",
      "tag": "Indices",
      "description": "Delete index by name",
      "parameters": [
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "indexName",
          "schema": "string",
          "required": true,
          "description": "Name of the index."
        }
      ],
      "responses": []
    },
    {
      "url": "/api/dataentities/{dataEntityName}/indices/{index_name}",
      "method": "getindexbyname",
      "httpMethod": "get",
      "tag": "Indices",
      "description": "Get index by name",
      "parameters": [
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "indexName",
          "schema": "string",
          "required": true,
          "description": "Name of the index."
        }
      ],
      "responses": []
    },
    {
      "url": "/api/dataentities/{dataEntityName}/schemas",
      "method": "getschemas",
      "httpMethod": "get",
      "tag": "Schemas",
      "description": "Get schemas",
      "parameters": [
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        }
      ],
      "responses": []
    },
    {
      "url": "/api/dataentities/{dataEntityName}/schemas/{schemaName}",
      "method": "deleteschemabyname",
      "httpMethod": "delete",
      "tag": "Schemas",
      "description": "Delete schema by name",
      "parameters": [
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "schemaName",
          "schema": "string",
          "required": true,
          "description": "Name of the schema."
        }
      ],
      "responses": []
    },
    {
      "url": "/api/dataentities/{dataEntityName}/schemas/{schemaName}",
      "method": "getschemabyname",
      "httpMethod": "get",
      "tag": "Schemas",
      "description": "Get schema by name",
      "parameters": [
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "schemaName",
          "schema": "string",
          "required": true,
          "description": "Name of the schema."
        }
      ],
      "responses": []
    },
    {
      "url": "/api/dataentities/{dataEntityName}/schemas/{schemaName}",
      "method": "saveschemabyname",
      "httpMethod": "put",
      "tag": "Schemas",
      "description": "Save schema by name",
      "parameters": [
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "schemaName",
          "schema": "string",
          "required": true,
          "description": "Name of the schema."
        },
        {
          "name": "properties",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/dataentities/{dataEntityName}/scroll",
      "method": "scrolldocuments",
      "httpMethod": "get",
      "tag": "Scroll",
      "description": "Scroll documents",
      "parameters": [
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "accept",
          "schema": "string",
          "required": true,
          "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."
        },
        {
          "name": "token",
          "schema": "string",
          "required": false,
          "description": "Value of the header `X-VTEX-MD-TOKEN` returned in your first request. Send its value in this query string in the subsequent requests. The token has a timeout of 10 minutes, which refreshes after each new request."
        },
        {
          "name": "restRange",
          "schema": "string",
          "required": true,
          "description": "Defines the collection of documents to be returned. A range within the collection limited by 100 documents per query."
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "Fields that should be returned by document. Separate fields' names with commas. For example `_fields=email,firstName,document`. You can also use `_all` to fetch all fields."
        },
        {
          "name": "where",
          "schema": "string",
          "required": false,
          "description": "Filter specification."
        },
        {
          "name": "schema",
          "schema": "string",
          "required": false,
          "description": "Name of the schema the document to be created needs to be compliant with."
        },
        {
          "name": "keyword",
          "schema": "string",
          "required": false,
          "description": "String to search. Use quotes for a partial query. For example, `_keyword=Maria` or `_keyword=\"Maria\"`."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sets sorting mode in two parts. The first part is the name of the field you want to sort by. In the second part, use `ASC` for ascending or `DESC` for descending."
        }
      ],
      "responses": [
        {
          "statusCode": "429",
          "description": "Wildcard queries temporarily blocked due to excessive usage. Consider adjusting your code to remove them or reduce the rate of search requests with wildcards (*). This temporary block may also be due to excessive use of requests with the parameter `keyword`."
        }
      ]
    },
    {
      "url": "/api/dataentities/{dataEntityName}/search",
      "method": "searchdocuments",
      "httpMethod": "get",
      "tag": "Search",
      "description": "Search documents",
      "parameters": [
        {
          "name": "dataEntityName",
          "schema": "string",
          "required": true,
          "description": "Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."
        },
        {
          "name": "contentType",
          "schema": "string",
          "required": true,
          "description": "Type of the content being sent."
        },
        {
          "name": "accept",
          "schema": "string",
          "required": true,
          "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."
        },
        {
          "name": "restRange",
          "schema": "string",
          "required": true,
          "description": "Defines the collection of documents to be returned. A range within the collection limited by 100 documents per query."
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "Fields that should be returned by document. Separate fields' names with commas. For example `_fields=email,firstName,document`. You can also use `_all` to fetch all fields."
        },
        {
          "name": "where",
          "schema": "string",
          "required": false,
          "description": "Filter specification."
        },
        {
          "name": "schema",
          "schema": "string",
          "required": false,
          "description": "Name of the schema the document to be created needs to be compliant with."
        },
        {
          "name": "keyword",
          "schema": "string",
          "required": false,
          "description": "String to search. Use quotes for a partial query. For example, `_keyword=Maria` or `_keyword=\"Maria\"`."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sets sorting mode in two parts. The first part is the name of the field you want to sort by. In the second part, use `ASC` for ascending or `DESC` for descending."
        }
      ],
      "responses": [
        {
          "statusCode": "503",
          "description": "Wildcard queries temporarily blocked due to excessive usage. Consider adjusting your code to remove them or reduce the rate of search requests with wildcards (*). This temporary block may also be due to excessive use of requests with the parameter `keyword`."
        }
      ]
    }
  ],
  "apiBaseUrl": "https://vtex.local",
  "apiDescription": "# ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**\r\n\r\n\r\n## Welcome!\r\n\r\nVTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.\r\n\r\nThere are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.\r\n\r\nThere are two ways to use Master Data:\r\n\r\n1. Directly from the storefront\r\n2. External integration\r\n\r\n### Directly from the storefront\r\n\r\nIf your scenario is to be used inside the storefront, be aware of the following observations:\r\n\r\n1. Use the storefront host to query or store information to avoid **CORS**;\r\n2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;\r\n3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);\r\n4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);\r\n\r\n**It's important to avoid CORS using the relative path**\r\n\r\n### External Integration\r\n\r\nIf your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:\r\n\r\n1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;\r\n2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);\r\n\r\n### Most used attributes listed here\r\n\r\n| Name | Description |\r\n| -------- | -------- |\r\n| accountName | Account name in VTEX License Manager |\r\n| name | Data Entity name |\r\n| schema | JSON Schema of a Data Entity |\r\n| id | Identifier of a document |\r\n| x-vtex-api-appKey | User key |\r\n| x-vtex-api-appToken | User token |",
  "apiTitle": "Master Data API - v2",
  "endpoints": 15,
  "sdkMethods": 26,
  "schemas": 17,
  "parameters": 151,
  "difficultyScore": 72.25,
  "difficulty": "Easy"
}