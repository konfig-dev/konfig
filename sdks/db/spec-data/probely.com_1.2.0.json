{
  "providerName": "probely.com",
  "openApiRaw": "https://developers.probely.com/openapi.yaml",
  "securitySchemes": {
    "jwtAuth": {
      "bearerFormat": "JWT",
      "scheme": "bearer",
      "type": "http"
    }
  },
  "homepage": "probely.com",
  "apiVersion": "1.2.0",
  "methods": [
    {
      "url": "/account/",
      "method": "/account/Get",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Retrieve account information",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/auth/obtain/",
      "method": "/auth/obtain/Post",
      "httpMethod": "post",
      "tag": "Login",
      "typeScriptTag": "login",
      "description": "Authenticate user",
      "parameters": [
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/auth/refresh/",
      "method": "/auth/refresh/Post",
      "httpMethod": "post",
      "tag": "Login",
      "typeScriptTag": "login",
      "description": "Replace token with a new one",
      "parameters": [
        {
          "name": "token",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/auth/revoke/",
      "method": "/auth/revoke/Post",
      "httpMethod": "post",
      "tag": "Login",
      "typeScriptTag": "login",
      "description": "Revoke a token",
      "parameters": [
        {
          "name": "token",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/auth/verify/",
      "method": "/auth/verify/Post",
      "httpMethod": "post",
      "tag": "Login",
      "typeScriptTag": "login",
      "description": "Verify a token",
      "parameters": [
        {
          "name": "token",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/billing/",
      "method": "/billing/Get",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Retrieve billing information",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/billing/",
      "method": "/billing/Patch",
      "httpMethod": "patch",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Partial update billing information",
      "parameters": [
        {
          "name": "address",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "first_name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "last_name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "other",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "reg_number",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "vat_number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "zip",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/billing/",
      "method": "/billing/Put",
      "httpMethod": "put",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Update billing information",
      "parameters": [
        {
          "name": "address",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "first_name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "last_name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "other",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "reg_number",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "vat_number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "zip",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/billing/actions/",
      "method": "/billing/actions/Post",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Action that should be taken to enable the selected targets",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/billing/estimate/",
      "method": "/billing/estimate/Post",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Estimate costs of updating a subscription",
      "parameters": [
        {
          "name": "coupon_ids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "plan_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "target_ids",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/billing/subscribe/",
      "method": "/billing/subscribe/Post",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Update a subscription",
      "parameters": [
        {
          "name": "coupon_ids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "plan_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "target_ids",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/check/",
      "method": "/check/Post",
      "httpMethod": "post",
      "tag": "Password Reset",
      "typeScriptTag": "passwordReset",
      "description": "Check validity of password reset token",
      "parameters": [
        {
          "name": "token",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/enterprise/auth/obtain/",
      "method": "/enterprise/auth/obtain/Post",
      "httpMethod": "post",
      "tag": "Login",
      "typeScriptTag": "login",
      "description": "Enterprise user authentication",
      "parameters": [
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/enterprise/auth/refresh/",
      "method": "/enterprise/auth/refresh/Post",
      "httpMethod": "post",
      "tag": "Login",
      "typeScriptTag": "login",
      "description": "Enterprise token refresh",
      "parameters": [
        {
          "name": "token",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/enterprise/auth/revoke/",
      "method": "/enterprise/auth/revoke/Post",
      "httpMethod": "post",
      "tag": "Login",
      "typeScriptTag": "login",
      "description": "Enterprise token revokation",
      "parameters": [
        {
          "name": "token",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/enterprise/auth/verify/",
      "method": "/enterprise/auth/verify/Post",
      "httpMethod": "post",
      "tag": "Login",
      "typeScriptTag": "login",
      "description": "Enterprise token verification",
      "parameters": [
        {
          "name": "token",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/events/",
      "method": "/events/Get",
      "httpMethod": "get",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "List account events",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/events/{id}/",
      "method": "/events/{id}/Get",
      "httpMethod": "get",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Retrieve account event",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/frameworks/",
      "method": "/frameworks/Get",
      "httpMethod": "get",
      "tag": "Frameworks",
      "typeScriptTag": "frameworks",
      "description": "List frameworks",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page number within the paginated result set"
        },
        {
          "name": "length",
          "schema": "integer",
          "required": false,
          "description": "Number of results to return per page"
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Which field to use when ordering the results, prefix with `-` to invert ordering.\n"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search term"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/frameworks/{id}/",
      "method": "/frameworks/{id}/Get",
      "httpMethod": "get",
      "tag": "Frameworks",
      "typeScriptTag": "frameworks",
      "description": "Retrieve framework",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/integrations/",
      "method": "/integrations/Get",
      "httpMethod": "get",
      "tag": "Integrations",
      "typeScriptTag": "integrations",
      "description": "Integrations available and installed in the account",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Available and installed integrations"
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/integrations/jira-cloud/projects/",
      "method": "/integrations/jiraCloud/projects/Get",
      "httpMethod": "get",
      "tag": "Jira Cloud Integration",
      "typeScriptTag": "jiraCloudIntegration",
      "description": "List Jira Projects",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/integrations/jira-cloud/projects/{project_id}/issue_types/",
      "method": "/integrations/jiraCloud/projects/{projectId}/issueTypes/Get",
      "httpMethod": "get",
      "tag": "Jira Cloud Integration",
      "typeScriptTag": "jiraCloudIntegration",
      "description": "Retrieve project issue types",
      "parameters": [
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "Jira Project Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/integrations/jira-cloud/projects/{project_id}/issue_types/{issue_type_id}/priorities/",
      "method": "/integrations/jiraCloud/projects/{projectId}/issueTypes/{issueTypeId}/priorities/Get",
      "httpMethod": "get",
      "tag": "Jira Cloud Integration",
      "typeScriptTag": "jiraCloudIntegration",
      "description": "Retrieve issue priorities",
      "parameters": [
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "Jira Project Id"
        },
        {
          "name": "issueTypeId",
          "schema": "string",
          "required": true,
          "description": "Jira issue type id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/integrations/jira-cloud/projects/{project_id}/issue_types/{issue_type_id}/status/",
      "method": "/integrations/jiraCloud/projects/{projectId}/issueTypes/{issueTypeId}/status/Get",
      "httpMethod": "get",
      "tag": "Jira Cloud Integration",
      "typeScriptTag": "jiraCloudIntegration",
      "description": "Retrieve issue statuses",
      "parameters": [
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "Jira Project Id"
        },
        {
          "name": "issueTypeId",
          "schema": "string",
          "required": true,
          "description": "Jira issue type id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/integrations/jira-server/projects/",
      "method": "/integrations/jiraServer/projects/Get",
      "httpMethod": "get",
      "tag": "Jira Server Integration",
      "typeScriptTag": "jiraServerIntegration",
      "description": "List Jira Projects",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/integrations/jira-server/projects/{project_id}/issue_types/",
      "method": "/integrations/jiraServer/projects/{projectId}/issueTypes/Get",
      "httpMethod": "get",
      "tag": "Jira Server Integration",
      "typeScriptTag": "jiraServerIntegration",
      "description": "Retrieve project issue types",
      "parameters": [
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "Jira Project Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/integrations/jira-server/projects/{project_id}/issue_types/{issue_type_id}/priorities/",
      "method": "/integrations/jiraServer/projects/{projectId}/issueTypes/{issueTypeId}/priorities/Get",
      "httpMethod": "get",
      "tag": "Jira Server Integration",
      "typeScriptTag": "jiraServerIntegration",
      "description": "Retrieve issue priorities",
      "parameters": [
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "Jira Project Id"
        },
        {
          "name": "issueTypeId",
          "schema": "string",
          "required": true,
          "description": "Jira issue type id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/integrations/jira-server/projects/{project_id}/issue_types/{issue_type_id}/status/",
      "method": "/integrations/jiraServer/projects/{projectId}/issueTypes/{issueTypeId}/status/Get",
      "httpMethod": "get",
      "tag": "Jira Server Integration",
      "typeScriptTag": "jiraServerIntegration",
      "description": "Retrieve issue statuses",
      "parameters": [
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "Jira Project Id"
        },
        {
          "name": "issueTypeId",
          "schema": "string",
          "required": true,
          "description": "Jira issue type id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/keys/",
      "method": "/keys/Get",
      "httpMethod": "get",
      "tag": "API Keys",
      "typeScriptTag": "apiKeys",
      "description": "List API keys allowed to operate on account",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page number within the paginated result set"
        },
        {
          "name": "length",
          "schema": "integer",
          "required": false,
          "description": "Number of results to return per page"
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Which field to use when ordering the results, prefix with `-` to invert ordering.\n"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search term"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/keys/",
      "method": "/keys/Post",
      "httpMethod": "post",
      "tag": "API Keys",
      "typeScriptTag": "apiKeys",
      "description": "Create account API key",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "API Key object"
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/keys/{id}/",
      "method": "/keys/{id}/Delete",
      "httpMethod": "delete",
      "tag": "API Keys",
      "typeScriptTag": "apiKeys",
      "description": "Delete account API key",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/keys/{id}/",
      "method": "/keys/{id}/Get",
      "httpMethod": "get",
      "tag": "API Keys",
      "typeScriptTag": "apiKeys",
      "description": "Retrieve account API key",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API Key object"
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/labels/",
      "method": "/labels/Get",
      "httpMethod": "get",
      "tag": "Labels",
      "typeScriptTag": "labels",
      "description": "List labels",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page number within the paginated result set"
        },
        {
          "name": "length",
          "schema": "integer",
          "required": false,
          "description": "Number of results to return per page"
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Which field to use when ordering the results, prefix with `-` to invert ordering.\n"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search term"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/labels/",
      "method": "/labels/Post",
      "httpMethod": "post",
      "tag": "Labels",
      "typeScriptTag": "labels",
      "description": "Create label",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/labels/{id}/",
      "method": "/labels/{id}/Delete",
      "httpMethod": "delete",
      "tag": "Labels",
      "typeScriptTag": "labels",
      "description": "Delete label",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/labels/{id}/",
      "method": "/labels/{id}/Get",
      "httpMethod": "get",
      "tag": "Labels",
      "typeScriptTag": "labels",
      "description": "Retrieve framework",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/labels/{id}/",
      "method": "/labels/{id}/Patch",
      "httpMethod": "patch",
      "tag": "Labels",
      "typeScriptTag": "labels",
      "description": "Partial update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/labels/{id}/",
      "method": "/labels/{id}/Put",
      "httpMethod": "put",
      "tag": "Labels",
      "typeScriptTag": "labels",
      "description": "Update label",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/plans/",
      "method": "/plans/Get",
      "httpMethod": "get",
      "tag": "Plan",
      "typeScriptTag": "plan",
      "description": "Subscription plans",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/",
      "method": "/profile/Get",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "User data",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page number within the paginated result set"
        },
        {
          "name": "length",
          "schema": "integer",
          "required": false,
          "description": "Number of results to return per page"
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Which field to use when ordering the results, prefix with `-` to invert ordering.\n"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search term"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/change_password/",
      "method": "/profile/changePassword/Post",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Change user password",
      "parameters": [
        {
          "name": "confpassword",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "current_password",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "password",
          "schema": "undefined",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/reset/",
      "method": "/reset/Post",
      "httpMethod": "post",
      "tag": "Password Reset",
      "typeScriptTag": "passwordReset",
      "description": "Send reset password email",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/setpassword/",
      "method": "/setpassword/Post",
      "httpMethod": "post",
      "tag": "Password Reset",
      "typeScriptTag": "passwordReset",
      "description": "Reset password after asking for a reset (with the token sent by email).\n",
      "parameters": [
        {
          "name": "confpassword",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "password",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "token",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/target-actions/",
      "method": "/targetActions/Post",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Available actions for the selected targets",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/",
      "method": "/targets/Get",
      "httpMethod": "get",
      "tag": "Targets",
      "typeScriptTag": "targets",
      "description": "List targets",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page number within the paginated result set"
        },
        {
          "name": "length",
          "schema": "integer",
          "required": false,
          "description": "Number of results to return per page"
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Which field to use when ordering the results, prefix with `-` to invert ordering.\n"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search term"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/",
      "method": "/targets/Post",
      "httpMethod": "post",
      "tag": "Targets",
      "typeScriptTag": "targets",
      "description": "Create target",
      "parameters": [
        {
          "name": "allowed_scan_profiles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "assets",
          "schema": "array",
          "description": ""
        },
        {
          "name": "changed",
          "schema": "string",
          "description": ""
        },
        {
          "name": "changed_by",
          "schema": "object",
          "description": ""
        },
        {
          "name": "connected_target",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "environment",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "labels",
          "schema": "array",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "report_type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scan_profile",
          "schema": "string",
          "description": ""
        },
        {
          "name": "site",
          "schema": "object",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/activate/",
      "method": "/targets/activate/Post",
      "httpMethod": "post",
      "tag": "Archive",
      "typeScriptTag": "archive",
      "description": "Activate targets",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/all/average_fix_time/",
      "method": "/targets/all/averageFixTime/Get",
      "httpMethod": "get",
      "tag": "Statistics",
      "typeScriptTag": "statistics",
      "description": "Average fix time graph data (all targets)",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/all/needs_attention_pie/",
      "method": "/targets/all/needsAttentionPie/Get",
      "httpMethod": "get",
      "tag": "Statistics",
      "typeScriptTag": "statistics",
      "description": "Targets with open vulnerabilities pie chart data",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/all/needs_attention_top/",
      "method": "/targets/all/needsAttentionTop/Get",
      "httpMethod": "get",
      "tag": "Statistics",
      "typeScriptTag": "statistics",
      "description": "Targets with open vulnerabilities",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/all/risk_trend/",
      "method": "/targets/all/riskTrend/Get",
      "httpMethod": "get",
      "tag": "Statistics",
      "typeScriptTag": "statistics",
      "description": "Risk trend graph data (all targets)",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/all/scans/",
      "method": "/targets/all/scans/Get",
      "httpMethod": "get",
      "tag": "Scans",
      "typeScriptTag": "scans",
      "description": "List scans for all targets",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page number within the paginated result set"
        },
        {
          "name": "length",
          "schema": "integer",
          "required": false,
          "description": "Number of results to return per page"
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Which field to use when ordering the results, prefix with `-` to invert ordering.\n"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search term"
        },
        {
          "name": "started",
          "schema": "array",
          "required": false,
          "description": "Filter by scan start dates"
        },
        {
          "name": "status",
          "schema": "string",
          "required": false,
          "description": "Filter by scan statuses"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/all/scheduledscans/expanded/",
      "method": "/targets/all/scheduledscans/expanded/Get",
      "httpMethod": "get",
      "tag": "Scheduled",
      "typeScriptTag": "scheduled",
      "description": "List scheduled scans for all targets expanding recurrence",
      "parameters": [
        {
          "name": "length",
          "schema": "integer",
          "required": false,
          "description": "Number of results to return per page"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/all/severity_trend/",
      "method": "/targets/all/severityTrend/Get",
      "httpMethod": "get",
      "tag": "Statistics",
      "typeScriptTag": "statistics",
      "description": "Severity trend graph data (all targets)",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/all/top_vulns/",
      "method": "/targets/all/topVulns/Get",
      "httpMethod": "get",
      "tag": "Statistics",
      "typeScriptTag": "statistics",
      "description": "Top 5 vulnerabilities (all targets).",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/archive/",
      "method": "/targets/archive/Post",
      "httpMethod": "post",
      "tag": "Archive",
      "typeScriptTag": "archive",
      "description": "Archive targets",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/archived/",
      "method": "/targets/archived/Post",
      "httpMethod": "post",
      "tag": "Archive",
      "typeScriptTag": "archive",
      "description": "List archived targets",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{id}/",
      "method": "/targets/{id}/Delete",
      "httpMethod": "delete",
      "tag": "Targets",
      "typeScriptTag": "targets",
      "description": "Delete target",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{id}/",
      "method": "/targets/{id}/Get",
      "httpMethod": "get",
      "tag": "Targets",
      "typeScriptTag": "targets",
      "description": "Retrieve target",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{id}/",
      "method": "/targets/{id}/Patch",
      "httpMethod": "patch",
      "tag": "Targets",
      "typeScriptTag": "targets",
      "description": "Partial update target",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "allowed_scan_profiles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "assets",
          "schema": "array",
          "description": ""
        },
        {
          "name": "changed",
          "schema": "string",
          "description": ""
        },
        {
          "name": "changed_by",
          "schema": "object",
          "description": ""
        },
        {
          "name": "connected_target",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "environment",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "labels",
          "schema": "array",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "report_type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scan_profile",
          "schema": "string",
          "description": ""
        },
        {
          "name": "site",
          "schema": "object",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{id}/",
      "method": "/targets/{id}/Put",
      "httpMethod": "put",
      "tag": "Targets",
      "typeScriptTag": "targets",
      "description": "Update target",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "allowed_scan_profiles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "assets",
          "schema": "array",
          "description": ""
        },
        {
          "name": "changed",
          "schema": "string",
          "description": ""
        },
        {
          "name": "changed_by",
          "schema": "object",
          "description": ""
        },
        {
          "name": "connected_target",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "environment",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "labels",
          "schema": "array",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "report_type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scan_profile",
          "schema": "string",
          "description": ""
        },
        {
          "name": "site",
          "schema": "object",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/assets/",
      "method": "/targets/{targetId}/assets/Get",
      "httpMethod": "get",
      "tag": "Assets",
      "typeScriptTag": "assets",
      "description": "List target's assets",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page number within the paginated result set"
        },
        {
          "name": "length",
          "schema": "integer",
          "required": false,
          "description": "Number of results to return per page"
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Which field to use when ordering the results, prefix with `-` to invert ordering.\n"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search term"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/assets/",
      "method": "/targets/{targetId}/assets/Post",
      "httpMethod": "post",
      "tag": "Assets",
      "typeScriptTag": "assets",
      "description": "Create new asset",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "changed",
          "schema": "string",
          "description": ""
        },
        {
          "name": "changed_by",
          "schema": "object",
          "description": ""
        },
        {
          "name": "cookies",
          "schema": "array",
          "description": ""
        },
        {
          "name": "desc",
          "schema": "string",
          "description": ""
        },
        {
          "name": "headers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "host",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "include",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "stack",
          "schema": "array",
          "description": ""
        },
        {
          "name": "verification_date",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verification_last_error",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verification_method",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verification_token",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verified",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Secondary domain of a target"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/assets/{id}/",
      "method": "/targets/{targetId}/assets/{id}/Delete",
      "httpMethod": "delete",
      "tag": "Assets",
      "typeScriptTag": "assets",
      "description": "Delete asset",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/assets/{id}/",
      "method": "/targets/{targetId}/assets/{id}/Get",
      "httpMethod": "get",
      "tag": "Assets",
      "typeScriptTag": "assets",
      "description": "Retrieve asset",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Secondary domain of a target"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/assets/{id}/",
      "method": "/targets/{targetId}/assets/{id}/Patch",
      "httpMethod": "patch",
      "tag": "Assets",
      "typeScriptTag": "assets",
      "description": "Partial update assets",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "changed",
          "schema": "string",
          "description": ""
        },
        {
          "name": "changed_by",
          "schema": "object",
          "description": ""
        },
        {
          "name": "cookies",
          "schema": "array",
          "description": ""
        },
        {
          "name": "desc",
          "schema": "string",
          "description": ""
        },
        {
          "name": "headers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "host",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "include",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "stack",
          "schema": "array",
          "description": ""
        },
        {
          "name": "verification_date",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verification_last_error",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verification_method",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verification_token",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verified",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Secondary domain of a target"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/assets/{id}/",
      "method": "/targets/{targetId}/assets/{id}/Put",
      "httpMethod": "put",
      "tag": "Assets",
      "typeScriptTag": "assets",
      "description": "Update asset",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "changed",
          "schema": "string",
          "description": ""
        },
        {
          "name": "changed_by",
          "schema": "object",
          "description": ""
        },
        {
          "name": "cookies",
          "schema": "array",
          "description": ""
        },
        {
          "name": "desc",
          "schema": "string",
          "description": ""
        },
        {
          "name": "headers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "host",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "include",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "stack",
          "schema": "array",
          "description": ""
        },
        {
          "name": "verification_date",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verification_last_error",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verification_method",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verification_token",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verified",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Secondary domain of a target"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/assets/{id}/verify/",
      "method": "/targets/{targetId}/assets/{id}/verify/Post",
      "httpMethod": "post",
      "tag": "Assets",
      "typeScriptTag": "assets",
      "description": "Verify asset ownership",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/average_fix_time/",
      "method": "/targets/{targetId}/averageFixTime/Get",
      "httpMethod": "get",
      "tag": "Statistics",
      "typeScriptTag": "statistics",
      "description": "Average vulnerability trend graph data",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/events/",
      "method": "/targets/{targetId}/events/Get",
      "httpMethod": "get",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "List target events",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/events/{id}/",
      "method": "/targets/{targetId}/events/{id}/Get",
      "httpMethod": "get",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Retrieve target event",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/findings/",
      "method": "/targets/{targetId}/findings/Get",
      "httpMethod": "get",
      "tag": "Findings",
      "typeScriptTag": "findings",
      "description": "List target findings",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "scan",
          "schema": "array",
          "required": false,
          "description": "Filter by scan ids"
        },
        {
          "name": "severity",
          "schema": "string",
          "required": false,
          "description": "Filter by finding severity"
        },
        {
          "name": "state",
          "schema": "string",
          "required": false,
          "description": "Filter by finding states"
        },
        {
          "name": "assignee",
          "schema": "array",
          "required": false,
          "description": "Filter by assignee ids"
        },
        {
          "name": "label",
          "schema": "array",
          "required": false,
          "description": "Filter by finding labels"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page number within the paginated result set"
        },
        {
          "name": "length",
          "schema": "integer",
          "required": false,
          "description": "Number of results to return per page"
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Which field to use when ordering the results, prefix with `-` to invert ordering.\n"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search term"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/findings/bulk/report/",
      "method": "/targets/{targetId}/findings/bulk/report/Post",
      "httpMethod": "post",
      "tag": "Findings",
      "typeScriptTag": "findings",
      "description": "Finding report",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "ids",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/findings/bulk/retest/",
      "method": "/targets/{targetId}/findings/bulk/retest/Post",
      "httpMethod": "post",
      "tag": "Findings",
      "typeScriptTag": "findings",
      "description": "Bulk retest findings",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/findings/bulk/update/",
      "method": "/targets/{targetId}/findings/bulk/update/Patch",
      "httpMethod": "patch",
      "tag": "Findings",
      "typeScriptTag": "findings",
      "description": "Bulk update findings",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/findings/report/",
      "method": "/targets/{targetId}/findings/report/Get",
      "httpMethod": "get",
      "tag": "Findings",
      "typeScriptTag": "findings",
      "description": "Retrieve finding report PDF format",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "token",
          "schema": "string",
          "required": true,
          "description": "Token received from the finding report endpoint."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/findings/{id}/",
      "method": "/targets/{targetId}/findings/{id}/Get",
      "httpMethod": "get",
      "tag": "Findings",
      "typeScriptTag": "findings",
      "description": "Retrieve finding",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/findings/{id}/",
      "method": "/targets/{targetId}/findings/{id}/Patch",
      "httpMethod": "patch",
      "tag": "Findings",
      "typeScriptTag": "findings",
      "description": "Partial update finding",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "assignee",
          "schema": "object",
          "description": ""
        },
        {
          "name": "changed",
          "schema": "string",
          "description": ""
        },
        {
          "name": "changed_by",
          "schema": "object",
          "description": ""
        },
        {
          "name": "comment",
          "schema": "string",
          "description": ""
        },
        {
          "name": "cvss_score",
          "schema": "number",
          "description": ""
        },
        {
          "name": "cvss_vector",
          "schema": "string",
          "description": ""
        },
        {
          "name": "definition",
          "schema": "object",
          "description": ""
        },
        {
          "name": "evidence",
          "schema": "string",
          "description": ""
        },
        {
          "name": "extra",
          "schema": "string",
          "description": ""
        },
        {
          "name": "fix",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "insertion_point",
          "schema": "string",
          "description": ""
        },
        {
          "name": "labels",
          "schema": "array",
          "description": ""
        },
        {
          "name": "last_found",
          "schema": "string",
          "description": ""
        },
        {
          "name": "method",
          "schema": "string",
          "description": ""
        },
        {
          "name": "parameter",
          "schema": "string",
          "description": ""
        },
        {
          "name": "params",
          "schema": "string",
          "description": ""
        },
        {
          "name": "path",
          "schema": "string",
          "description": ""
        },
        {
          "name": "reporter",
          "schema": "object",
          "description": ""
        },
        {
          "name": "requests",
          "schema": "array",
          "description": ""
        },
        {
          "name": "scans",
          "schema": "array",
          "description": ""
        },
        {
          "name": "severity",
          "schema": "string",
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "target",
          "schema": "object",
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/findings/{id}/",
      "method": "/targets/{targetId}/findings/{id}/Put",
      "httpMethod": "put",
      "tag": "Findings",
      "typeScriptTag": "findings",
      "description": "Update finding",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "assignee",
          "schema": "object",
          "description": ""
        },
        {
          "name": "changed",
          "schema": "string",
          "description": ""
        },
        {
          "name": "changed_by",
          "schema": "object",
          "description": ""
        },
        {
          "name": "comment",
          "schema": "string",
          "description": ""
        },
        {
          "name": "cvss_score",
          "schema": "number",
          "description": ""
        },
        {
          "name": "cvss_vector",
          "schema": "string",
          "description": ""
        },
        {
          "name": "definition",
          "schema": "object",
          "description": ""
        },
        {
          "name": "evidence",
          "schema": "string",
          "description": ""
        },
        {
          "name": "extra",
          "schema": "string",
          "description": ""
        },
        {
          "name": "fix",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "insertion_point",
          "schema": "string",
          "description": ""
        },
        {
          "name": "labels",
          "schema": "array",
          "description": ""
        },
        {
          "name": "last_found",
          "schema": "string",
          "description": ""
        },
        {
          "name": "method",
          "schema": "string",
          "description": ""
        },
        {
          "name": "parameter",
          "schema": "string",
          "description": ""
        },
        {
          "name": "params",
          "schema": "string",
          "description": ""
        },
        {
          "name": "path",
          "schema": "string",
          "description": ""
        },
        {
          "name": "reporter",
          "schema": "object",
          "description": ""
        },
        {
          "name": "requests",
          "schema": "array",
          "description": ""
        },
        {
          "name": "scans",
          "schema": "array",
          "description": ""
        },
        {
          "name": "severity",
          "schema": "string",
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "target",
          "schema": "object",
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/findings/{id}/integrations/jira-cloud/",
      "method": "/targets/{targetId}/findings/{id}/integrations/jiraCloud/Get",
      "httpMethod": "get",
      "tag": "Jira Cloud Integration",
      "typeScriptTag": "jiraCloudIntegration",
      "description": "Retrieve Jira Cloud finding configuration",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/findings/{id}/integrations/jira-cloud/",
      "method": "/targets/{targetId}/findings/{id}/integrations/jiraCloud/Patch",
      "httpMethod": "patch",
      "tag": "Jira Cloud Integration",
      "typeScriptTag": "jiraCloudIntegration",
      "description": "Update Jira Cloud finding configuration",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "issue_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "selective_sync",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/findings/{id}/integrations/jira-cloud/",
      "method": "/targets/{targetId}/findings/{id}/integrations/jiraCloud/Put",
      "httpMethod": "put",
      "tag": "Jira Cloud Integration",
      "typeScriptTag": "jiraCloudIntegration",
      "description": "Update Jira Cloud finding configuration",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "issue_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "selective_sync",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/findings/{id}/integrations/jira-server/",
      "method": "/targets/{targetId}/findings/{id}/integrations/jiraServer/Get",
      "httpMethod": "get",
      "tag": "Jira Server Integration",
      "typeScriptTag": "jiraServerIntegration",
      "description": "Retrieve Jira Server finding configuration",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/findings/{id}/integrations/jira-server/",
      "method": "/targets/{targetId}/findings/{id}/integrations/jiraServer/Patch",
      "httpMethod": "patch",
      "tag": "Jira Server Integration",
      "typeScriptTag": "jiraServerIntegration",
      "description": "Update Jira Server finding configuration",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "issue_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "selective_sync",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/findings/{id}/integrations/jira-server/",
      "method": "/targets/{targetId}/findings/{id}/integrations/jiraServer/Put",
      "httpMethod": "put",
      "tag": "Jira Server Integration",
      "typeScriptTag": "jiraServerIntegration",
      "description": "Update Jira Server finding configuration",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "issue_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "selective_sync",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/findings/{id}/log/",
      "method": "/targets/{targetId}/findings/{id}/log/Get",
      "httpMethod": "get",
      "tag": "Findings",
      "typeScriptTag": "findings",
      "description": "Finding activity log.",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/findings/{id}/retest/",
      "method": "/targets/{targetId}/findings/{id}/retest/Post",
      "httpMethod": "post",
      "tag": "Findings",
      "typeScriptTag": "findings",
      "description": "Retest finding",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/integrations/",
      "method": "/targets/{targetId}/integrations/Get",
      "httpMethod": "get",
      "tag": "Integrations",
      "typeScriptTag": "integrations",
      "description": "Integrations available and installed for the target",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Available and installed integrations"
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/integrations/jira-cloud/",
      "method": "/targets/{targetId}/integrations/jiraCloud/Get",
      "httpMethod": "get",
      "tag": "Jira Cloud Integration",
      "typeScriptTag": "jiraCloudIntegration",
      "description": "Retrieve Jira Cloud Target configuration",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/integrations/jira-cloud/",
      "method": "/targets/{targetId}/integrations/jiraCloud/Patch",
      "httpMethod": "patch",
      "tag": "Jira Cloud Integration",
      "typeScriptTag": "jiraCloudIntegration",
      "description": "Update Jira Cloud target configuration",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "allow_jira",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "auto_sync",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "issue_type_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "priority_mapping",
          "schema": "object",
          "description": ""
        },
        {
          "name": "project_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "status_mapping",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/integrations/jira-cloud/",
      "method": "/targets/{targetId}/integrations/jiraCloud/Put",
      "httpMethod": "put",
      "tag": "Jira Cloud Integration",
      "typeScriptTag": "jiraCloudIntegration",
      "description": "Update Jira Cloud target configuration",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "allow_jira",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "auto_sync",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "issue_type_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "priority_mapping",
          "schema": "object",
          "description": ""
        },
        {
          "name": "project_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "status_mapping",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/integrations/jira-server/",
      "method": "/targets/{targetId}/integrations/jiraServer/Get",
      "httpMethod": "get",
      "tag": "Jira Server Integration",
      "typeScriptTag": "jiraServerIntegration",
      "description": "Retrieve Jira Server Target configuration",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/integrations/jira-server/",
      "method": "/targets/{targetId}/integrations/jiraServer/Patch",
      "httpMethod": "patch",
      "tag": "Jira Server Integration",
      "typeScriptTag": "jiraServerIntegration",
      "description": "Update Jira Server target configuration",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "allow_jira",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "auto_sync",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "issue_type_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "priority_mapping",
          "schema": "object",
          "description": ""
        },
        {
          "name": "project_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "status_mapping",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/integrations/jira-server/",
      "method": "/targets/{targetId}/integrations/jiraServer/Put",
      "httpMethod": "put",
      "tag": "Jira Server Integration",
      "typeScriptTag": "jiraServerIntegration",
      "description": "Update Jira Server target configuration",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "allow_jira",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "auto_sync",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "issue_type_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "priority_mapping",
          "schema": "object",
          "description": ""
        },
        {
          "name": "project_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "status_mapping",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/integrations/slack/",
      "method": "/targets/{targetId}/integrations/slack/Get",
      "httpMethod": "get",
      "tag": "Slack Integration",
      "typeScriptTag": "slackIntegration",
      "description": "Retrieve slack integration data",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Options for slack notifications"
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/integrations/slack/",
      "method": "/targets/{targetId}/integrations/slack/Patch",
      "httpMethod": "patch",
      "tag": "Slack Integration",
      "typeScriptTag": "slackIntegration",
      "description": "Update slack integration data",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "notify_finding_fixed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "notify_high_findings",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "notify_low_findings",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "notify_medium_findings",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "notify_scan_completed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "notify_scan_started",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "webhook_url",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Options for slack notifications"
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/integrations/slack/",
      "method": "/targets/{targetId}/integrations/slack/Put",
      "httpMethod": "put",
      "tag": "Slack Integration",
      "typeScriptTag": "slackIntegration",
      "description": "Update slack integration data",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "notify_finding_fixed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "notify_high_findings",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "notify_low_findings",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "notify_medium_findings",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "notify_scan_completed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "notify_scan_started",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "webhook_url",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Options for slack notifications"
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/keys/",
      "method": "/targets/{targetId}/keys/Get",
      "httpMethod": "get",
      "tag": "API Keys",
      "typeScriptTag": "apiKeys",
      "description": "List target specific API keys",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page number within the paginated result set"
        },
        {
          "name": "length",
          "schema": "integer",
          "required": false,
          "description": "Number of results to return per page"
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Which field to use when ordering the results, prefix with `-` to invert ordering.\n"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search term"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/keys/",
      "method": "/targets/{targetId}/keys/Post",
      "httpMethod": "post",
      "tag": "API Keys",
      "typeScriptTag": "apiKeys",
      "description": "Create target API key",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "API Key object"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/keys/{id}/",
      "method": "/targets/{targetId}/keys/{id}/Delete",
      "httpMethod": "delete",
      "tag": "API Keys",
      "typeScriptTag": "apiKeys",
      "description": "Delete target API key",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/keys/{id}/",
      "method": "/targets/{targetId}/keys/{id}/Get",
      "httpMethod": "get",
      "tag": "API Keys",
      "typeScriptTag": "apiKeys",
      "description": "Retrieve target API key",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "API Key object"
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/risk_trend/",
      "method": "/targets/{targetId}/riskTrend/Get",
      "httpMethod": "get",
      "tag": "Statistics",
      "typeScriptTag": "statistics",
      "description": "Risk trend graph data",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/scan_now/",
      "method": "/targets/{targetId}/scanNow/Post",
      "httpMethod": "post",
      "tag": "Scans",
      "typeScriptTag": "scans",
      "description": "Start a scan on the target",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "scan_profile",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/scans/",
      "method": "/targets/{targetId}/scans/Get",
      "httpMethod": "get",
      "tag": "Scans",
      "typeScriptTag": "scans",
      "description": "List scans",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page number within the paginated result set"
        },
        {
          "name": "length",
          "schema": "integer",
          "required": false,
          "description": "Number of results to return per page"
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Which field to use when ordering the results, prefix with `-` to invert ordering.\n"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search term"
        },
        {
          "name": "started",
          "schema": "array",
          "required": false,
          "description": "Filter by scan start dates"
        },
        {
          "name": "status",
          "schema": "string",
          "required": false,
          "description": "Filter by scan statuses"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/scans/dates/",
      "method": "/targets/{targetId}/scans/dates/Get",
      "httpMethod": "get",
      "tag": "Scans",
      "typeScriptTag": "scans",
      "description": "Dates where scans have ocurred",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Dates for which there are scans"
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/scans/retrieve_page/",
      "method": "/targets/{targetId}/scans/retrievePage/Get",
      "httpMethod": "get",
      "tag": "Scans",
      "typeScriptTag": "scans",
      "description": "Scan page",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "length",
          "schema": "integer",
          "required": false,
          "description": "Number of results to return per page"
        },
        {
          "name": "date",
          "schema": "string",
          "required": true,
          "description": "Date"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/scans/{id}/",
      "method": "/targets/{targetId}/scans/{id}/Get",
      "httpMethod": "get",
      "tag": "Scans",
      "typeScriptTag": "scans",
      "description": "Retrieve scan",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/scans/{id}/cancel/",
      "method": "/targets/{targetId}/scans/{id}/cancel/Post",
      "httpMethod": "post",
      "tag": "Scans",
      "typeScriptTag": "scans",
      "description": "Cancel running scan",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/scans/{id}/endpoints/",
      "method": "/targets/{targetId}/scans/{id}/endpoints/Get",
      "httpMethod": "get",
      "tag": "Scans",
      "typeScriptTag": "scans",
      "description": "Scan endpoints file",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/scans/{id}/report/",
      "method": "/targets/{targetId}/scans/{id}/report/Get",
      "httpMethod": "get",
      "tag": "Scans",
      "typeScriptTag": "scans",
      "description": "Scan report PDF, using the report type specified for the target",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/scans/{id}/report/default/",
      "method": "/targets/{targetId}/scans/{id}/report/default/Get",
      "httpMethod": "get",
      "tag": "Scans",
      "typeScriptTag": "scans",
      "description": "Scan report PDF, using the default report type",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/scans/{id}/report/owasp/",
      "method": "/targets/{targetId}/scans/{id}/report/owasp/Get",
      "httpMethod": "get",
      "tag": "Scans",
      "typeScriptTag": "scans",
      "description": "Scan report PDF, using the OWASP report type",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/scans/{id}/report/pci/",
      "method": "/targets/{targetId}/scans/{id}/report/pci/Get",
      "httpMethod": "get",
      "tag": "Scans",
      "typeScriptTag": "scans",
      "description": "Scan report PDF, using the PCI report type",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/scheduledscans/",
      "method": "/targets/{targetId}/scheduledscans/Get",
      "httpMethod": "get",
      "tag": "Scheduled",
      "typeScriptTag": "scheduled",
      "description": "List scheduled scans",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page number within the paginated result set"
        },
        {
          "name": "length",
          "schema": "integer",
          "required": false,
          "description": "Number of results to return per page"
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Which field to use when ordering the results, prefix with `-` to invert ordering.\n"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search term"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/scheduledscans/",
      "method": "/targets/{targetId}/scheduledscans/Post",
      "httpMethod": "post",
      "tag": "Scheduled",
      "typeScriptTag": "scheduled",
      "description": "Create new scheduled scan",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "date_time",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "recurrence",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/scheduledscans/expanded/",
      "method": "/targets/{targetId}/scheduledscans/expanded/Get",
      "httpMethod": "get",
      "tag": "Scheduled",
      "typeScriptTag": "scheduled",
      "description": "List scheduled scans expanding recurrence",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "length",
          "schema": "integer",
          "required": false,
          "description": "Number of results to return per page"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/scheduledscans/{id}/",
      "method": "/targets/{targetId}/scheduledscans/{id}/Delete",
      "httpMethod": "delete",
      "tag": "Scheduled",
      "typeScriptTag": "scheduled",
      "description": "Delete",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/scheduledscans/{id}/",
      "method": "/targets/{targetId}/scheduledscans/{id}/Get",
      "httpMethod": "get",
      "tag": "Scheduled",
      "typeScriptTag": "scheduled",
      "description": "Retrieve a scheduled scan",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/scheduledscans/{id}/",
      "method": "/targets/{targetId}/scheduledscans/{id}/Patch",
      "httpMethod": "patch",
      "tag": "Scheduled",
      "typeScriptTag": "scheduled",
      "description": "Partial update",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "date_time",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "recurrence",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/scheduledscans/{id}/",
      "method": "/targets/{targetId}/scheduledscans/{id}/Put",
      "httpMethod": "put",
      "tag": "Scheduled",
      "typeScriptTag": "scheduled",
      "description": "Update a scheduled scan",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "date_time",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "recurrence",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/severity_trend/",
      "method": "/targets/{targetId}/severityTrend/Get",
      "httpMethod": "get",
      "tag": "Statistics",
      "typeScriptTag": "statistics",
      "description": "Severity trend graph data.",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/site/",
      "method": "/targets/{targetId}/site/Get",
      "httpMethod": "get",
      "tag": "Site",
      "typeScriptTag": "site",
      "description": "Retrieve target's site",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Main resource associated with a target"
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/site/",
      "method": "/targets/{targetId}/site/Patch",
      "httpMethod": "patch",
      "tag": "Site",
      "typeScriptTag": "site",
      "description": "Partial update target's site",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "basic_auth",
          "schema": "object",
          "description": ""
        },
        {
          "name": "changed",
          "schema": "string",
          "description": ""
        },
        {
          "name": "changed_by",
          "schema": "object",
          "description": ""
        },
        {
          "name": "cookies",
          "schema": "array",
          "description": ""
        },
        {
          "name": "desc",
          "schema": "string",
          "description": ""
        },
        {
          "name": "form_login",
          "schema": "array",
          "description": ""
        },
        {
          "name": "form_login_check_pattern",
          "schema": "string",
          "description": ""
        },
        {
          "name": "form_login_url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "has_basic_auth",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "has_form_login",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "headers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "host",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "stack",
          "schema": "array",
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verification_date",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verification_last_error",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verification_method",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verification_token",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verified",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "whitelist",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Main resource associated with a target"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/site/",
      "method": "/targets/{targetId}/site/Put",
      "httpMethod": "put",
      "tag": "Site",
      "typeScriptTag": "site",
      "description": "Update target's site",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "basic_auth",
          "schema": "object",
          "description": ""
        },
        {
          "name": "changed",
          "schema": "string",
          "description": ""
        },
        {
          "name": "changed_by",
          "schema": "object",
          "description": ""
        },
        {
          "name": "cookies",
          "schema": "array",
          "description": ""
        },
        {
          "name": "desc",
          "schema": "string",
          "description": ""
        },
        {
          "name": "form_login",
          "schema": "array",
          "description": ""
        },
        {
          "name": "form_login_check_pattern",
          "schema": "string",
          "description": ""
        },
        {
          "name": "form_login_url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "has_basic_auth",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "has_form_login",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "headers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "host",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "stack",
          "schema": "array",
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verification_date",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verification_last_error",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verification_method",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verification_token",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verified",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "whitelist",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Main resource associated with a target"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/site/verify/",
      "method": "/targets/{targetId}/site/verify/Post",
      "httpMethod": "post",
      "tag": "Site",
      "typeScriptTag": "site",
      "description": "Verify site ownership",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/top_vulns/",
      "method": "/targets/{targetId}/topVulns/Get",
      "httpMethod": "get",
      "tag": "Statistics",
      "typeScriptTag": "statistics",
      "description": "Top 5 vulnerabilities",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/webhooks/",
      "method": "/targets/{targetId}/webhooks/Get",
      "httpMethod": "get",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "List target webhooks",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/webhooks/",
      "method": "/targets/{targetId}/webhooks/Post",
      "httpMethod": "post",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Create new target webhook",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "api_version",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "changed",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "changed_by",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "check_cert",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "created_by",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/webhooks/{id}/",
      "method": "/targets/{targetId}/webhooks/{id}/Delete",
      "httpMethod": "delete",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Delete target webhook",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/webhooks/{id}/",
      "method": "/targets/{targetId}/webhooks/{id}/Get",
      "httpMethod": "get",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Retrieve target webhook",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/webhooks/{id}/",
      "method": "/targets/{targetId}/webhooks/{id}/Patch",
      "httpMethod": "patch",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Partial update target webhook",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "api_version",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "changed",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "changed_by",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "check_cert",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "created_by",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/targets/{target_id}/webhooks/{id}/",
      "method": "/targets/{targetId}/webhooks/{id}/Put",
      "httpMethod": "put",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Update target webhook",
      "parameters": [
        {
          "name": "targetId",
          "schema": "string",
          "required": true,
          "description": "Target id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "api_version",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "changed",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "changed_by",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "check_cert",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "created_by",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/",
      "method": "/users/Get",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "List users",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page number within the paginated result set"
        },
        {
          "name": "length",
          "schema": "integer",
          "required": false,
          "description": "Number of results to return per page"
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Which field to use when ordering the results, prefix with `-` to invert ordering.\n"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search term"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/",
      "method": "/users/Post",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Create/Reactivate a user.",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "is_admin",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{id}/",
      "method": "/users/{id}/Delete",
      "httpMethod": "delete",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Deactivate a user",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{id}/",
      "method": "/users/{id}/Get",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Retrieve user",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{id}/",
      "method": "/users/{id}/Patch",
      "httpMethod": "patch",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Partial update user",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "is_admin",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{id}/",
      "method": "/users/{id}/Put",
      "httpMethod": "put",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Update user",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "is_admin",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/vulnerability_definitions/",
      "method": "/vulnerabilityDefinitions/Get",
      "httpMethod": "get",
      "tag": "Vulnerabilities",
      "typeScriptTag": "vulnerabilities",
      "description": "List vulnerability definitions",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page number within the paginated result set"
        },
        {
          "name": "length",
          "schema": "integer",
          "required": false,
          "description": "Number of results to return per page"
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Which field to use when ordering the results, prefix with `-` to invert ordering.\n"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search term"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/vulnerability_definitions/{id}/",
      "method": "/vulnerabilityDefinitions/{id}/Get",
      "httpMethod": "get",
      "tag": "Vulnerabilities",
      "typeScriptTag": "vulnerabilities",
      "description": "Retrieve vulnerability definition",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks/",
      "method": "/webhooks/Get",
      "httpMethod": "get",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "List account webhooks",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks/",
      "method": "/webhooks/Post",
      "httpMethod": "post",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Create new account webhook",
      "parameters": [
        {
          "name": "api_version",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "changed",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "changed_by",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "check_cert",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "created_by",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks/{id}/",
      "method": "/webhooks/{id}/Delete",
      "httpMethod": "delete",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Delete account webhook",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks/{id}/",
      "method": "/webhooks/{id}/Get",
      "httpMethod": "get",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Retrieve account webhook",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks/{id}/",
      "method": "/webhooks/{id}/Patch",
      "httpMethod": "patch",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Partial update account webhook",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "api_version",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "changed",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "changed_by",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "check_cert",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "created_by",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks/{id}/",
      "method": "/webhooks/{id}/Put",
      "httpMethod": "put",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Update account webhook",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Object Id"
        },
        {
          "name": "api_version",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "changed",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "changed_by",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "check_cert",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "created_by",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.probely.com",
  "apiDescription": "Probely is a Web Vulnerability Scanning suite for Agile Teams. It provides\ncontinuous scanning of your Web Applications and lets you efficiently\nmanage the lifecycle of the vulnerabilities found, in a sleek and\nintuitive ~~web interface~~ API.\n\n## Quick-Start\n\n### Authentication\n\nTo use the API, you first need to create a token (API Key).\nTo create a token, select a target from the drop-down list, go to the\n\"Settings\" page, and click on the \"Integrations\" tab.\n\nWrite a name for the API Key. For example, if you want to use the API Key\nfor travis,\nyou could name it \"travis\". In this example, we chose \"**example.com_key**\"\n\n![Creating API key][1]\n\n  [1]: assets/qs/create_api_key_1.png\n\n\n\nThe API key was created successfully:\n\n![API key created][2]\n\n  [2]: assets/qs/create_api_key_2.png\n\n\nOn every request, you need to pass this token in the authorization header,\nlike this:\n\n\n```yaml\nAuthorization: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJBRlNJQlp\n3elFsMDEiLCJ1c2VybmFtZSI6IkNIZ2tkSUROdzV0NSJ9.90UwiPGS2hlvgOLktFU0LfKuatNKm\nmEP79u17VnqT9M\n```\n\n\n**WARNING: Treat this token as a password. With this token, you have the\npower to fully manage the target.**\n\nIn the following examples, the token will be named as *PROBELY_AUTH_TOKEN*.\n\n\n### Scan target\n\nFirst let's view our target list:\n\n```bash\ncurl https://api.probely.com/targets/ \\\n  -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: JWT PROBELY_AUTH_TOKEN\"\n```\n\n\nFrom the results, we need the **target id**:\n\n```json\n{\n   \"count\":1,\n   \"page_total\":1,\n   \"page\":1,\n   \"length\":10,\n   \"results\":[\n      {\n         \"id\":\"AxtkqTE0v3E-\",\n         \"name\":\"test-site\",\n         \"desc\":\"\",\n         \"url\":\"https://test-site.example.com\",\n         \"settings\":\n            \"(...)\"\n         ,\n         \"stack\":\n            \"(...)\"\n         ,\n         \"verified\":true,\n         \"(...)\": \"(...)\"\n      }\n   ]\n}\n```\n\n\nNow we can send a request to start a scan on target id **AxtkqTE0v3E-**\n\n```bash\ncurl https://api.probely.com/targets/AxtkqTE0v3E-/scan_now/ \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: JWT PROBELY_AUTH_TOKEN\"\n```\n\n\nAnd we get a response saying that the scan is scheduled: the status is **queued**, and we've got a **scan id**:\n\n```json\n{\n   \"changed\":\"2017-08-01T13:37:00.843339Z\",\n   \"started\":null,\n   \"completed\":null,\n   \"mediums\":0,\n   \"changed_by\":\n    \"(...)\"\n   ,\n   \"highs\":0,\n   \"status\":\"queued\",\n   \"id\":\"S6dOMPn0SnoH\",\n   \"created_by\":\n    \"(...)\"\n   ,\n   \"target\":\n    \"(...)\"\n   ,\n   \"created\":\"2017-08-01T13:37:00.843339Z\",\n   \"lows\":0\n}\n```\n\n\nUsing the scan id **S6dOMPn0SnoH**, we can pool the scan status:\n\n```bash\ncurl https://api.probely.com/targets/AxtkqTE0v3E-/scans/S6dOMPn0SnoH/ \\\n  -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: JWT PROBELY_AUTH_TOKEN\"\n```\n\n\nAnd we get a response saying that the scan status is now **started**:\n\n```json\n{\n   \"id\":\"S6dOMPn0SnoH\",\n   \"changed\":\"2017-08-01T13:38:12.623650Z\",\n   \"started\":null,\n   \"completed\":null,\n   \"mediums\":0,\n   \"changed_by\":\n    \"(...)\"\n   ,\n   \"highs\":0,\n   \"status\":\"started\",\n   \"created_by\":\n    \"(...)\"\n   ,\n   \"target\":\n    \"(...)\"\n   ,\n   \"created\":\"2017-08-01T13:37:00.843339Z\",\n   \"lows\":0\n}\n```\n\n\nThe possible statuses are:\n\n| Status | Name | Description |\n| ------ | ---- | ----------- |\n| queued | Queued | The scan is queued to start |\n| started | Started | The scan is currently running |\n| under_review | Under Review | The scan is complete but has some findings under review |\n| completed | Completed | The scan is complete |\n| completed_with_errors | Completed with errors | The scan is complete even after getting some error(s) |\n| failed | Failed | The scan failed |\n| canceled | Canceled | The scan was canceled |\n| canceling | Canceling | The scan is being canceled |\n\n\nDuring the scan, the keys \"lows\", \"mediums\", and \"highs\" will be updated\nwith the findings, as they are being found.\n\nAfter we get either the status **completed** or **completed_with_errors**,\nwe can view the findings.\n\n\n### Get vulnerabilities\n\nUsing the previous scan id **S6dOMPn0SnoH**, we can get the scan results:\n\n```bash\ncurl https://api.probely.com/targets/AxtkqTE0v3E-/scans/S6dOMPn0SnoH/ \\\n  -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: JWT PROBELY_AUTH_TOKEN\"\n```\n\nWe get a response saying that the scan status is now **completed**, and\nthat **45** vulnerabilities were found. **14** low, **11** medium and\n**20** high:\n\n```json\n{\n   \"id\":\"S6dOMPn0SnoH\",\n   \"target\":\n    \"(...)\"\n   ,\n   \"status\":\"completed\",\n   \"started\":\"2017-08-01T13:37:12.623650Z\",\n   \"completed\":\"2017-08-01T14:17:48.559514Z\",\n   \"lows\":14,\n   \"mediums\":11,\n   \"highs\":20,\n   \"created\":\"2017-08-01T13:37:00.843339Z\",\n   \"created_by\":\n    \"(...)\"\n   ,\n   \"changed\":\"2017-08-01T14:17:48.559514Z\",\n   \"changed_by\":\n    \"(...)\"\n}\n```\n\nYou can now view the results of this scan, or the target findings.\n\n\nLet's start with the scan results:\n\n```bash\ncurl https://api.probely.com/targets/AxtkqTE0v3E-/findings/?scan=S6dOMPn0SnoH&page=1 \\\n  -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: JWT PROBELY_AUTH_TOKEN\"\n```\n\n```json\n{\n   \"count\":45,\n   \"page_total\":5,\n   \"page\":1,\n   \"length\":10,\n   \"results\":[\n      {\n         \"id\":79,\n         \"target\":\n          \"(...)\"\n         ,\n         \"scans\":\n          \"(...)\"\n         ,\n         \"labels\":\n          \"(...)\"\n         ,\n         \"fix\":\"To fix an SQL Injection in PHP, you should use Prepared Statements. Prepared Statements can be thought of as a kind of compiled template for the SQL that an application wants to run, that can be customized using variable parameters.\\n\\nPHP's PDO extension supports Prepared Statements, so that's probably your best option.\\n\\nIn the example below you can see the use of prepared statements. Variables ```$username``` and ```$hashedPassword``` come from user input.\\n\\n```\\n$stmt = $dbg->prepare(\\\"SELECT id, name FROM users\\n                       WHERE username=? AND password=?\\\");\\n$stmt->bindParam(1, $username);\\n$stmt->bindParam(2, $hashedPassword);\\nif ($stmt->execute()) {\\n\\t$user = $stmt->fetch();\\n\\tif ($user) {\\n\\t\\t$_SESSION['authID'] = $user['id'];\\n\\t\\techo \\\"Hello \\\" . $user['name'];\\n\\t} else {\\n\\t\\techo \\\"Invalid Login\\\";\\n\\t}\\n}\\n```  \\n\\nAs an added bonus, if you're executing the same query several times, then it'll be even faster than when you're not using prepared statements. This is because when using prepared statements, the query needs to be parsed (prepared) only once, but can be executed multiple times with the same or different parameters. \\n\",\n         \"requests\":[\n            {\n               \"request\":\"(...)\",\n               \"response\":\"(...)\"\n            },\n            {\n               \"request\":\"(...)\",\n               \"response\":\"(...)\"\n            }\n         ],\n         \"evidence\":null,\n         \"extra\":\"\",\n         \"definition\":{\n            \"id\":\"xnV8PJVmSoLS\",\n            \"name\":\"SQL Injection\",\n            \"desc\":\"SQL Injections are the most common form of injections because SQL databases are very popular in dynamic web applications. This vulnerability allows an attacker to tamper existing SQL queries performed by the web application. Depending on the queries, the attacker might be able to access, modify or even destroy data from the database.\\n\\nSince databases are commonly used to store private data, such as authentication information, personal user data and site content, if an attacker gains access to it, the consequences are typically very severe, ranging from defacement of the web application to users data leakage or loss, or even full control of the web application or database server.\",\n         },\n         \"url\":\"http://test-site.example.com/login.php\",\n         \"path\":\"login.php\",\n         \"method\":\"post\",\n         \"parameter\":\"username\",\n         \"value\":\"\",\n         \"params\":{\n            \"username\":[\n               \"probely'\"\n            ],\n            \"password\":[\n               \"probely\"\n            ]\n         },\n         \"reporter\":\n          \"(...)\"\n         ,\n         \"assignee\":null,\n         \"state\":\"notfixed\",\n         \"severity\":30,\n         \"last_found\":\"2017-08-01T14:03:56.207794Z\",\n         \"changed\":\"2017-08-01T14:03:56.207794Z\",\n         \"changed_by\":\n          \"(...)\"\n         ,\n         \"comment\":\"\"\n      },\n      \"(...)\"\n   ]\n}\n```\n\nYou can also view all the target findings, which will show all the findings\nthat are not yet fixed. \\\\\nThe structure is similar to the previous result.\n\n```bash\ncurl https://api.probely.com/targets/AxtkqTE0v3E-/findings/ \\\n  -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: JWT PROBELY_AUTH_TOKEN\"\n```\n\n\n### Get vulnerability details\n\nYou can also get details for a particular finding in a target. \\\\\nIn this example we will get the details for the same finding as in the previous\nsection:\n\n```bash\ncurl https://api.probely.com/targets/AxtkqTE0v3E-/findings/79/ \\\n  -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: JWT PROBELY_AUTH_TOKEN\"\n```\n\n\nThis will result on the same information, but just for this particular finding:\n\n```json\n{\n   \"id\":79,\n   \"target\":\n    \"(...)\"\n   ,\n   \"scans\":\n    \"(...)\"\n   ,\n   \"labels\":\n    \"(...)\"\n   ,\n   \"fix\":\"To fix an SQL Injection in PHP, you should use Prepared Statements. Prepared Statements can be thought of as a kind of compiled template for the SQL that an application wants to run, that can be customized using variable parameters.\\n\\nPHP's PDO extension supports Prepared Statements, so that's probably your best option.\\n\\nIn the example below you can see the use of prepared statements. Variables ```$username``` and ```$hashedPassword``` come from user input.\\n\\n```\\n$stmt = $dbg->prepare(\\\"SELECT id, name FROM users\\n                       WHERE username=? AND password=?\\\");\\n$stmt->bindParam(1, $username);\\n$stmt->bindParam(2, $hashedPassword);\\nif ($stmt->execute()) {\\n\\t$user = $stmt->fetch();\\n\\tif ($user) {\\n\\t\\t$_SESSION['authID'] = $user['id'];\\n\\t\\techo \\\"Hello \\\" . $user['name'];\\n\\t} else {\\n\\t\\techo \\\"Invalid Login\\\";\\n\\t}\\n}\\n```  \\n\\nAs an added bonus, if you're executing the same query several times, then it'll be even faster than when you're not using prepared statements. This is because when using prepared statements, the query needs to be parsed (prepared) only once, but can be executed multiple times with the same or different parameters. \\n\",\n   \"requests\":[\n      {\n         \"request\":\"(...)\",\n         \"response\":\"(...)\"\n      },\n      {\n         \"request\":\"(...)\",\n         \"response\":\"(...)\"\n      }\n   ],\n   \"evidence\":null,\n   \"extra\":\"\",\n   \"definition\":{\n      \"id\":\"xnV8PJVmSoLS\",\n      \"name\":\"SQL Injection\",\n      \"desc\":\"SQL Injections are the most common form of injections because SQL databases are very popular in dynamic web applications. This vulnerability allows an attacker to tamper existing SQL queries performed by the web application. Depending on the queries, the attacker might be able to access, modify or even destroy data from the database.\\n\\nSince databases are commonly used to store private data, such as authentication information, personal user data and site content, if an attacker gains access to it, the consequences are typically very severe, ranging from defacement of the web application to users data leakage or loss, or even full control of the web application or database server.\",\n   },\n   \"url\":\"http://test-site.example.com/login.php\",\n   \"path\":\"login.php\",\n   \"method\":\"post\",\n   \"parameter\":\"username\",\n   \"value\":\"\",\n   \"params\":{\n      \"username\":[\n         \"probely'\"\n      ],\n      \"password\":[\n         \"probely\"\n      ]\n   },\n   \"reporter\":\n    \"(...)\"\n   ,\n   \"assignee\":null,\n   \"state\":\"notfixed\",\n   \"severity\":30,\n   \"last_found\":\"2017-08-01T14:03:56.207794Z\",\n   \"changed\":\"2017-08-01T14:03:56.207794Z\",\n   \"changed_by\":\n    \"(...)\"\n   ,\n   \"comment\":\"\"\n}\n```\n\n## Concepts\n\nThe short version is that you run *scans* on *targets*, and *findings* are\ncreated for any issue that is found.\nHowever, there are a few more concepts that must be explained in order to\nget a complete picture of how Probely works.\nWe will spend the next few sections detailing the most important concepts.\n\n\n### Target\n\nA *target* defines the scope of a scan, what will and won't be included\nin the scan plan.\nThis is done by filling a *target*'s *site* and *assets*.\n\nThe entry point for the web application (and authentication) is setup\nin the *target*'s *site*.\n\nIn modern web applications, you are probably loading resources from\nmultiple domains.\nA single page app, for example, will usualy load the page from one domain\nand make AJAX requests to another.\nThis is what *assets* are for: they specify what domains our scanner should\nfollow and create requests for.\n\n\n### Site\nA URL is probably not the only thing you will need to setup when scannning your application.\nDoes the application have an authenticated area? Does it use basic auth?\nDoes it expect a certain cookie or header?\nThese parameters are all configured in the *target*'s *site*.\n\n\nWe need to ensure that only allowed web applications are scanned.\nTherefore, we must verify that you have control of any site you wish to include.\nThis can be done by:\n  * Placing a file on a well-known location, on the site's server;\n  * Creating specific DNS records.\n\n\n### Asset\n\nAn *asset* is very similar to a *site*. The difference is that it is a domain instead\nof a URL. Additionally, an *asset* has no login or basic auth support.\nYou can still have custom cookies and headers per *asset*.\n\nAs with the *site*, you will need to prove an *asset*'s ownership. We have added some\nrules to make your life easier, if you already have verified\na *site* and the domains match, the validation is fast-tracked.\n\n### Scans\n\nThis is what you're here for.\nAfter configuring your *target*, you will want to run *scans* against it.\nYou can either start a one off scan, or schedule one for later - recurring\nor not.\n\nDuring the *scan*, we will spider and run several modules to check for\nsecurity issues, which we call *findings*.\nYou can check the *findings* even before a scan ends.\nIf everything goes well, the scan will complete and that is it.\n\nWith some *findings*, our automated processes may have difficulties\ndetermining if it is a false positive or a legitimate issue.\nIn these instances, a scan will be marked as under review, and we will\nfurther analyze the finding before making a decision.\nWe will only show findings that, for some degree of confidence, are true\npositives.\nA finding that we are not sure of will never be displayed.\n\nAs much as we try to prevent it, a *scan* (or a sub-module) can malfunction.\nIf this happens, a *scan* is marked as:\n  * \"failed\": the problem was irrecoverable;\n  * \"completed with errors\": some module failed but the scan itself completed.\n\nDuring a scan, we try to determine what *frameworks* you are using\nand add this information to the *site* and *asset* objects discussed\npreviously.\n\n\n### Findings\n\nThe last core concept is the *finding*, this is a security issue that\nwe have found during our scans.\nIf the same issue is found in a new scan it will not open a new finding but\nupdate the previous.\n\nA *finding* will have a lot of information about the issue.\nNamely, where it was found, URL, insertion point (e.g. cookie), parameter,\nand method.\nEvidence we gathered, and the full request and response that we used.\nSugestions of how to go about fixing it.\nA full description of the vulnerability is also present in the\n*definition* property.\nWe also assign a severity and calculate the CVSS score for each.\n\nBesides all this, there are also actions that you can perform on a *finding*.\nYou can assign it to one user, leave comments for your team or add labels,\nand reduce or increase the severity.\n\nIf you don't plan on fixing the *finding* and accept the risk, or you think\nwe reported a false positive, you can mark the finding to reflect that.\n",
  "apiTitle": "Probely Developers",
  "endpoints": 99,
  "sdkMethods": 147,
  "schemas": 148,
  "parameters": 563,
  "contactUrl": "https://probely.com",
  "contactEmail": "support@probely.com",
  "difficultyScore": 361.75,
  "difficulty": "Hard"
}