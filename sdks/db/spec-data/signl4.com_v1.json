{
  "providerName": "signl4.com",
  "openApiRaw": "https://connect.signl4.com/api/docs/v1/swagger.json",
  "securitySchemes": {
    "oauth2": {
      "flows": {
        "authorizationCode": {
          "authorizationUrl": "https://connect.signl4.com/identity/connect/authorize",
          "refreshUrl": "https://connect.signl4.com/identity/connect/token",
          "scopes": {
            "offline_access": "Access write operations",
            "public_api_read": "Access write operations",
            "public_api_write": "Access read operations"
          },
          "tokenUrl": "https://connect.signl4.com/identity/connect/token"
        }
      },
      "type": "oauth2"
    }
  },
  "homepage": "signl4.com",
  "apiVersion": "v1",
  "methods": [
    {
      "url": "/alerts",
      "method": "/alertsPost",
      "httpMethod": "post",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Trigger Alert",
      "parameters": [
        {
          "name": "attachments",
          "schema": "array",
          "description": ""
        },
        {
          "name": "category",
          "schema": "string",
          "description": ""
        },
        {
          "name": "externalId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "flags",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "parameters",
          "schema": "array",
          "description": ""
        },
        {
          "name": "severity",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "text",
          "schema": "string",
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/acknowledgeAll",
      "method": "/alerts/acknowledgeAllPost",
      "httpMethod": "post",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Confirms all visible alerts",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "description": "User ID of the user to be used to acknowledge the alarms."
        },
        {
          "name": "categoryIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "maxDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "minDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scope",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "teamIds",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/acknowledgeMultiple",
      "method": "/alerts/acknowledgeMultiplePost",
      "httpMethod": "post",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Acknowlegde multiple alerts",
      "parameters": [
        {
          "name": "alertIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/closeAll",
      "method": "/alerts/closeAllPost",
      "httpMethod": "post",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Close all acknowledged alerts.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "description": "User ID of the user to be used to close the alarms."
        },
        {
          "name": "categoryIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "maxDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "minDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scope",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "teamIds",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/closeMultiple",
      "method": "/alerts/closeMultiplePost",
      "httpMethod": "post",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Close multiple alerts",
      "parameters": [
        {
          "name": "alertIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/paged",
      "method": "/alerts/pagedPost",
      "httpMethod": "post",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Gets alerts paged",
      "parameters": [
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.\r\n                Number of alerts could be less if filtered but at least 1."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "User ID of the user you want to get alerts for."
        },
        {
          "name": "alertIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "alertsAfterId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "categoryIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "continuationToken",
          "schema": "object",
          "description": ""
        },
        {
          "name": "maxCreationDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "minCreationDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "modifiedSince",
          "schema": "string",
          "description": ""
        },
        {
          "name": "showPersonalHiddenCategories",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "statusCodes",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/report",
      "method": "/alerts/reportGet",
      "httpMethod": "get",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Get Alert Report",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "description": "User ID of the user for whom you want a report."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/undoAcknowledgeMultiple",
      "method": "/alerts/undoAcknowledgeMultiplePost",
      "httpMethod": "post",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Queue undo of multiple acknowledgments.",
      "parameters": [
        {
          "name": "alertIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/undoCloseMultiple",
      "method": "/alerts/undoCloseMultiplePost",
      "httpMethod": "post",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Withdraw closure of multiple alerts",
      "parameters": [
        {
          "name": "alertIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/{alertId}",
      "method": "/alerts/{alertId}Get",
      "httpMethod": "get",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Get Alert",
      "parameters": [
        {
          "name": "alertId",
          "schema": "string",
          "required": true,
          "description": "Id of the requested Alert."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/{alertId}/acknowledge",
      "method": "/alerts/{alertId}/acknowledgePost",
      "httpMethod": "post",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Acknowledge an alert",
      "parameters": [
        {
          "name": "alertId",
          "schema": "string",
          "required": true,
          "description": "Id to acknowledge an alert."
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/{alertId}/annotate",
      "method": "/alerts/{alertId}/annotatePost",
      "httpMethod": "post",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Annotate Alert",
      "parameters": [
        {
          "name": "alertId",
          "schema": "string",
          "required": true,
          "description": "Id of the alert to annotate."
        },
        {
          "name": "annotationType",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "text",
          "schema": "string",
          "description": ""
        },
        {
          "name": "timestamp",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/{alertId}/annotations",
      "method": "/alerts/{alertId}/annotationsGet",
      "httpMethod": "get",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Get annotations of an alert",
      "parameters": [
        {
          "name": "alertId",
          "schema": "string",
          "required": true,
          "description": "Id of the requested Alert."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/{alertId}/attachments",
      "method": "/alerts/{alertId}/attachmentsGet",
      "httpMethod": "get",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Get attachments of an alert",
      "parameters": [
        {
          "name": "alertId",
          "schema": "string",
          "required": true,
          "description": "Id of the requested Alert."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/{alertId}/attachments/{attachmentId}",
      "method": "/alerts/{alertId}/attachments/{attachmentId}Get",
      "httpMethod": "get",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Gets a specified attachment of a specified alert.",
      "parameters": [
        {
          "name": "alertId",
          "schema": "string",
          "required": true,
          "description": "Id of the alert that contains the wanted attachment."
        },
        {
          "name": "attachmentId",
          "schema": "string",
          "required": true,
          "description": "Id of the attachment, that you want to retrieve."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "Optional parameter defining the wanted width of the picture that is retrieved."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "Optional parameter defining the wanted height of the picture that is retrieved."
        },
        {
          "name": "scale",
          "schema": "boolean",
          "description": "Optional parameter defining whether it's wanted to scale the retrieved image. Default is set to\r\ntrue."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/{alertId}/close",
      "method": "/alerts/{alertId}/closePost",
      "httpMethod": "post",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Close an alert",
      "parameters": [
        {
          "name": "alertId",
          "schema": "string",
          "required": true,
          "description": "Id to acknowledge an alert."
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/{alertId}/notifications",
      "method": "/alerts/{alertId}/notificationsGet",
      "httpMethod": "get",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Get alert notifications",
      "parameters": [
        {
          "name": "alertId",
          "schema": "string",
          "required": true,
          "description": "Id of the requested Alert."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/{alertId}/overview",
      "method": "/alerts/{alertId}/overviewGet",
      "httpMethod": "get",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Get an overview alert.",
      "parameters": [
        {
          "name": "alertId",
          "schema": "string",
          "required": true,
          "description": "Id of the requested Alert."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/{alertId}/undoAcknowledge",
      "method": "/alerts/{alertId}/undoAcknowledgePost",
      "httpMethod": "post",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Undo the acknowledgement of an alert.",
      "parameters": [
        {
          "name": "alertId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/alerts/{alertId}/undoClose",
      "method": "/alerts/{alertId}/undoClosePost",
      "httpMethod": "post",
      "tag": "Alerts",
      "typeScriptTag": "alerts",
      "description": "Undo the closure of an alert.",
      "parameters": [
        {
          "name": "alertId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/images",
      "method": "/categories/imagesGet",
      "httpMethod": "get",
      "tag": "Categories",
      "typeScriptTag": "categories",
      "description": "Gets the names of all alert category images.\r\nYou can get the image by going to account.signl4.com/images/alerts/categoryImageName.svg",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{teamId}",
      "method": "/categories/{teamId}Get",
      "httpMethod": "get",
      "tag": "Categories",
      "typeScriptTag": "categories",
      "description": "Get all categories",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of the team the categories belong to"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{teamId}",
      "method": "/categories/{teamId}Post",
      "httpMethod": "post",
      "tag": "Categories",
      "typeScriptTag": "categories",
      "description": "Create a new category",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of the team the category belongs to"
        },
        {
          "name": "augmentations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "color",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "imageName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "isDefault",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "keywordMatching",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "keywords",
          "schema": "array",
          "description": ""
        },
        {
          "name": "lastMatch",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "options",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "order",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{teamId}/metrics",
      "method": "/categories/{teamId}/metricsGet",
      "httpMethod": "get",
      "tag": "Categories",
      "typeScriptTag": "categories",
      "description": "Get metrics for all categories",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of the team the categories belongs to"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{teamId}/{categoryId}",
      "method": "/categories/{teamId}/{categoryId}Delete",
      "httpMethod": "delete",
      "tag": "Categories",
      "typeScriptTag": "categories",
      "description": "Delete an existing category",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of the team the category belongs to"
        },
        {
          "name": "categoryId",
          "schema": "string",
          "required": true,
          "description": "ID of the category to delete"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{teamId}/{categoryId}",
      "method": "/categories/{teamId}/{categoryId}Get",
      "httpMethod": "get",
      "tag": "Categories",
      "typeScriptTag": "categories",
      "description": "Get a specific category",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of the team the category belongs to"
        },
        {
          "name": "categoryId",
          "schema": "string",
          "required": true,
          "description": "ID of the category to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{teamId}/{categoryId}",
      "method": "/categories/{teamId}/{categoryId}Put",
      "httpMethod": "put",
      "tag": "Categories",
      "typeScriptTag": "categories",
      "description": "Update an existing category",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of the team the category belongs to"
        },
        {
          "name": "categoryId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "augmentations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "color",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "imageName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "isDefault",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "keywordMatching",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "keywords",
          "schema": "array",
          "description": ""
        },
        {
          "name": "lastMatch",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "options",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "order",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{teamId}/{categoryId}/metrics",
      "method": "/categories/{teamId}/{categoryId}/metricsGet",
      "httpMethod": "get",
      "tag": "Categories",
      "typeScriptTag": "categories",
      "description": "Get metrics for a specific category",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of the team the category belongs to"
        },
        {
          "name": "categoryId",
          "schema": "string",
          "required": true,
          "description": "ID of the category to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{teamId}/{categoryId}/subscriptions",
      "method": "/categories/{teamId}/{categoryId}/subscriptionsGet",
      "httpMethod": "get",
      "tag": "Categories",
      "typeScriptTag": "categories",
      "description": "Get category subscriptions",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of the team the category belongs to"
        },
        {
          "name": "categoryId",
          "schema": "string",
          "required": true,
          "description": "Category to get subscriptions for"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{teamId}/{categoryId}/subscriptions",
      "method": "/categories/{teamId}/{categoryId}/subscriptionsPost",
      "httpMethod": "post",
      "tag": "Categories",
      "typeScriptTag": "categories",
      "description": "Set category subscriptions",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of the team the category belongs to"
        },
        {
          "name": "categoryId",
          "schema": "string",
          "required": true,
          "description": "Category to be updated"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/events/paged",
      "method": "/events/pagedPost",
      "httpMethod": "post",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Get overview event paged.",
      "parameters": [
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.\r\n                 Number of alerts could be less if filtered but at least 1."
        },
        {
          "name": "continuationToken",
          "schema": "object",
          "description": ""
        },
        {
          "name": "eventStatusCode",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "maxCreationDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "minCreationDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "modifiedSince",
          "schema": "string",
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/events/{eventId}/overview",
      "method": "/events/{eventId}/overviewGet",
      "httpMethod": "get",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Get overview event",
      "parameters": [
        {
          "name": "eventId",
          "schema": "string",
          "required": true,
          "description": "Id of event to get."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/events/{eventId}/parameters",
      "method": "/events/{eventId}/parametersGet",
      "httpMethod": "get",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Get event parameters",
      "parameters": [
        {
          "name": "eventId",
          "schema": "string",
          "required": true,
          "description": "Event Id of the requested Alert."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/prepaid/balance",
      "method": "/prepaid/balanceGet",
      "httpMethod": "get",
      "tag": "Prepaid",
      "typeScriptTag": "prepaid",
      "description": "Get your subscription's current prepaid balance.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/prepaid/settings",
      "method": "/prepaid/settingsGet",
      "httpMethod": "get",
      "tag": "Prepaid",
      "typeScriptTag": "prepaid",
      "description": "Get your subscription's current prepaid settings.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/prepaid/settings",
      "method": "/prepaid/settingsPut",
      "httpMethod": "put",
      "tag": "Prepaid",
      "typeScriptTag": "prepaid",
      "description": "Update your subscription's current prepaid settings.",
      "parameters": [
        {
          "name": "topUpAmount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "topUpEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "topUpLimit",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/prepaid/transactions",
      "method": "/prepaid/transactionsGet",
      "httpMethod": "get",
      "tag": "Prepaid",
      "typeScriptTag": "prepaid",
      "description": "Get your subscription's prepaid transactions.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/scripts/instances",
      "method": "/scripts/instancesGet",
      "httpMethod": "get",
      "tag": "Scripts",
      "typeScriptTag": "scripts",
      "description": "Returns all script instances of the SIGNL4 team",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/scripts/instances",
      "method": "/scripts/instancesPost",
      "httpMethod": "post",
      "tag": "Scripts",
      "typeScriptTag": "scripts",
      "description": "Creates a new script instance in the in the SIGNL4 team.",
      "parameters": [
        {
          "name": "config",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "customScriptDescription",
          "schema": "string",
          "description": ""
        },
        {
          "name": "customScriptName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "eventPattern",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "instanceId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lastModified",
          "schema": "string",
          "description": ""
        },
        {
          "name": "runtimeInformation",
          "schema": "object",
          "description": ""
        },
        {
          "name": "scriptId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scriptName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "subscriptionId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/scripts/instances/{instanceId}",
      "method": "/scripts/instances/{instanceId}Delete",
      "httpMethod": "delete",
      "tag": "Scripts",
      "typeScriptTag": "scripts",
      "description": "Deletes a script instance.",
      "parameters": [
        {
          "name": "instanceId",
          "schema": "string",
          "required": true,
          "description": "Instance Id of script instance to be returned."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/scripts/instances/{instanceId}",
      "method": "/scripts/instances/{instanceId}Get",
      "httpMethod": "get",
      "tag": "Scripts",
      "typeScriptTag": "scripts",
      "description": "Returns all information about a given script instance which includes its runtime status.",
      "parameters": [
        {
          "name": "instanceId",
          "schema": "string",
          "required": true,
          "description": "Instance Id of script instance to be returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/scripts/instances/{instanceId}",
      "method": "/scripts/instances/{instanceId}Put",
      "httpMethod": "put",
      "tag": "Scripts",
      "typeScriptTag": "scripts",
      "description": "Updates a given script instance, typically used for updating the configuration of a script.",
      "parameters": [
        {
          "name": "instanceId",
          "schema": "string",
          "required": true,
          "description": "InstanceId of the script to be updated."
        },
        {
          "name": "config",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "customScriptDescription",
          "schema": "string",
          "description": ""
        },
        {
          "name": "customScriptName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "eventPattern",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "instanceId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lastModified",
          "schema": "string",
          "description": ""
        },
        {
          "name": "runtimeInformation",
          "schema": "object",
          "description": ""
        },
        {
          "name": "scriptId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scriptName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "subscriptionId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/scripts/instances/{instanceId}/data",
      "method": "/scripts/instances/{instanceId}/dataPut",
      "httpMethod": "put",
      "tag": "Scripts",
      "typeScriptTag": "scripts",
      "description": "Updates custom data of a given script instance which includes its display name.",
      "parameters": [
        {
          "name": "instanceId",
          "schema": "string",
          "required": true,
          "description": "InstanceId of the script to be updated."
        },
        {
          "name": "customScriptDescription",
          "schema": "string",
          "description": ""
        },
        {
          "name": "customScriptName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "instanceId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scriptId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/scripts/instances/{instanceId}/disable",
      "method": "/scripts/instances/{instanceId}/disablePost",
      "httpMethod": "post",
      "tag": "Scripts",
      "typeScriptTag": "scripts",
      "description": "Disables a given script instance.",
      "parameters": [
        {
          "name": "instanceId",
          "schema": "string",
          "required": true,
          "description": "Id of the instance to be disabled."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/scripts/instances/{instanceId}/enable",
      "method": "/scripts/instances/{instanceId}/enablePost",
      "httpMethod": "post",
      "tag": "Scripts",
      "typeScriptTag": "scripts",
      "description": "Enables a script instance.",
      "parameters": [
        {
          "name": "instanceId",
          "schema": "string",
          "required": true,
          "description": "Id of the instance to be enabled."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/scripts/inventory",
      "method": "/scripts/inventoryGet",
      "httpMethod": "get",
      "tag": "Scripts",
      "typeScriptTag": "scripts",
      "description": "Returns all available inventory scripts which can be added to a SIGNL4 subscription.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/scripts/inventory/parsed",
      "method": "/scripts/inventory/parsedGet",
      "httpMethod": "get",
      "tag": "Scripts",
      "typeScriptTag": "scripts",
      "description": "Returns all inventory scripts.",
      "parameters": [
        {
          "name": "language",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/scripts/inventory/parsed/{scriptId}",
      "method": "/scripts/inventory/parsed/{scriptId}Get",
      "httpMethod": "get",
      "tag": "Scripts",
      "typeScriptTag": "scripts",
      "description": "Returns an inventory script by its id.",
      "parameters": [
        {
          "name": "scriptId",
          "schema": "string",
          "required": true,
          "description": "The Id of the script to be returned."
        },
        {
          "name": "language",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions",
      "method": "/subscriptionsGet",
      "httpMethod": "get",
      "tag": "Subscriptions",
      "typeScriptTag": "subscriptions",
      "description": "Get infos of all available/managed subscriptions.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions/{subscriptionId}",
      "method": "/subscriptions/{subscriptionId}Get",
      "httpMethod": "get",
      "tag": "Subscriptions",
      "typeScriptTag": "subscriptions",
      "description": "Get infos of a specific subscription.",
      "parameters": [
        {
          "name": "subscriptionId",
          "schema": "string",
          "required": true,
          "description": "Id of the subscription that's to be retrieved."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions/{subscriptionId}/channelPrices",
      "method": "/subscriptions/{subscriptionId}/channelPricesGet",
      "httpMethod": "get",
      "tag": "Subscriptions",
      "typeScriptTag": "subscriptions",
      "description": "Returns the subscription's channel price information.",
      "parameters": [
        {
          "name": "subscriptionId",
          "schema": "string",
          "required": true,
          "description": "Id of the subscription that needs to be retrieved."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions/{subscriptionId}/features",
      "method": "/subscriptions/{subscriptionId}/featuresGet",
      "httpMethod": "get",
      "tag": "Subscriptions",
      "typeScriptTag": "subscriptions",
      "description": "Returns the features of a specified subscription.",
      "parameters": [
        {
          "name": "subscriptionId",
          "schema": "string",
          "required": true,
          "description": "Id of the subscription from which the features need to be retrieved."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions/{subscriptionId}/prepaidBalance",
      "method": "/subscriptions/{subscriptionId}/prepaidBalanceGet",
      "httpMethod": "get",
      "tag": "Prepaid",
      "typeScriptTag": "prepaid",
      "description": "Get a subscription's current prepaid balance.",
      "parameters": [
        {
          "name": "subscriptionId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions/{subscriptionId}/prepaidSettings",
      "method": "/subscriptions/{subscriptionId}/prepaidSettingsGet",
      "httpMethod": "get",
      "tag": "Prepaid",
      "typeScriptTag": "prepaid",
      "description": "Get a subscription's current prepaid settings.",
      "parameters": [
        {
          "name": "subscriptionId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions/{subscriptionId}/prepaidSettings",
      "method": "/subscriptions/{subscriptionId}/prepaidSettingsPut",
      "httpMethod": "put",
      "tag": "Prepaid",
      "typeScriptTag": "prepaid",
      "description": "Update a subscription's current prepaid settings.",
      "parameters": [
        {
          "name": "subscriptionId",
          "schema": "string",
          "required": true,
          "description": "ID of the subscription"
        },
        {
          "name": "topUpAmount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "topUpEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "topUpLimit",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions/{subscriptionId}/prepaidTransactions",
      "method": "/subscriptions/{subscriptionId}/prepaidTransactionsGet",
      "httpMethod": "get",
      "tag": "Prepaid",
      "typeScriptTag": "prepaid",
      "description": "Get a subscription's prepaid transactions.",
      "parameters": [
        {
          "name": "subscriptionId",
          "schema": "string",
          "required": true,
          "description": "ID of the subscription to get transactions for"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions/{subscriptionId}/profile",
      "method": "/subscriptions/{subscriptionId}/profilePut",
      "httpMethod": "put",
      "tag": "Subscriptions",
      "typeScriptTag": "subscriptions",
      "description": "Updates a subscriptions profile.",
      "parameters": [
        {
          "name": "subscriptionId",
          "schema": "string",
          "required": true,
          "description": "ID of the subscription to be updated"
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions/{subscriptionId}/teams",
      "method": "/subscriptions/{subscriptionId}/teamsGet",
      "httpMethod": "get",
      "tag": "Teams",
      "typeScriptTag": "teams",
      "description": "Get infos for all teams of the subscription.",
      "parameters": [
        {
          "name": "subscriptionId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions/{subscriptionId}/userLicenses",
      "method": "/subscriptions/{subscriptionId}/userLicensesGet",
      "httpMethod": "get",
      "tag": "Subscriptions",
      "typeScriptTag": "subscriptions",
      "description": "Gets a subscription's user licenses.",
      "parameters": [
        {
          "name": "subscriptionId",
          "schema": "string",
          "required": true,
          "description": "ID of the subscription"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams",
      "method": "/teamsGet",
      "httpMethod": "get",
      "tag": "Teams",
      "typeScriptTag": "teams",
      "description": "Get infos of all teams.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}",
      "method": "/teams/{teamId}Get",
      "httpMethod": "get",
      "tag": "Teams",
      "typeScriptTag": "teams",
      "description": "Gets infos of a specific team.",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of the team that should be retrieved."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/alertReports",
      "method": "/teams/{teamId}/alertReportsGet",
      "httpMethod": "get",
      "tag": "Teams",
      "typeScriptTag": "teams",
      "description": "Get information about downloadable alert reports",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of team you want to download reports from."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/alertReports/{fileName}",
      "method": "/teams/{teamId}/alertReports/{fileName}Get",
      "httpMethod": "get",
      "tag": "Teams",
      "typeScriptTag": "teams",
      "description": "Returns Alert Report",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of team you want to get the duty report file infos for."
        },
        {
          "name": "fileName",
          "schema": "string",
          "required": true,
          "description": "File name of file you want to download."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/alertSettings",
      "method": "/teams/{teamId}/alertSettingsGet",
      "httpMethod": "get",
      "tag": "Teams",
      "typeScriptTag": "teams",
      "description": "Gets alert settings of a specific team.",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of the team the settings should be retrieved for."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/alertSettings",
      "method": "/teams/{teamId}/alertSettingsPost",
      "httpMethod": "post",
      "tag": "Teams",
      "typeScriptTag": "teams",
      "description": "Sets alert settings of a specific team.",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of the team the settings should be set for."
        },
        {
          "name": "filterAction",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "filterMode",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "optOutMode",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "persistentNotificicationMode",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "responseMode",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "responseTime",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/dutyReports",
      "method": "/teams/{teamId}/dutyReportsGet",
      "httpMethod": "get",
      "tag": "Duties",
      "typeScriptTag": "duties",
      "description": "Get Information about downloadable reports",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of team you want to get the duty report file infos for."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/dutyReports/{fileName}",
      "method": "/teams/{teamId}/dutyReports/{fileName}Get",
      "httpMethod": "get",
      "tag": "Duties",
      "typeScriptTag": "duties",
      "description": "Download duty report with a specific fileName",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of team you want to download the duty report for."
        },
        {
          "name": "fileName",
          "schema": "string",
          "required": true,
          "description": "Filename of the csv to download."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/dutysummary",
      "method": "/teams/{teamId}/dutysummaryGet",
      "httpMethod": "get",
      "tag": "Duties",
      "typeScriptTag": "duties",
      "description": "Get duty assistant info for a team",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of the team the duty belongs to."
        },
        {
          "name": "lastTwoDuties",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/eventSources",
      "method": "/teams/{teamId}/eventSourcesGet",
      "httpMethod": "get",
      "tag": "Teams",
      "typeScriptTag": "teams",
      "description": "Gets event sources of a specific team.",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of the team the sources should be retrieved for."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/memberships",
      "method": "/teams/{teamId}/membershipsGet",
      "httpMethod": "get",
      "tag": "TeamsMemberships",
      "typeScriptTag": "teamsMemberships",
      "description": "Get all invites of a team.",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "Team ID of team you want to request."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/memberships",
      "method": "/teams/{teamId}/membershipsPost",
      "httpMethod": "post",
      "tag": "TeamsMemberships",
      "typeScriptTag": "teamsMemberships",
      "description": "Invite users to a team",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "Id of team the user should be invited to."
        },
        {
          "name": "inviterId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "invites",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/memberships/resendInviteMail",
      "method": "/teams/{teamId}/memberships/resendInviteMailPost",
      "httpMethod": "post",
      "tag": "TeamsMemberships",
      "typeScriptTag": "teamsMemberships",
      "description": "Sends invite email again if an invite exists",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "Team ID of team with invited user."
        },
        {
          "name": "inviterId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userMail",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/memberships/{userId}",
      "method": "/teams/{teamId}/memberships/{userId}Delete",
      "httpMethod": "delete",
      "tag": "TeamsMemberships",
      "typeScriptTag": "teamsMemberships",
      "description": "Removes a user or invitation from a team, and may delete the user if he is not in any team.",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of the team the user should be deleted from"
        },
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "ID of the user that should be deleted"
        },
        {
          "name": "requesterUserId",
          "schema": "string",
          "description": "User ID of user which will remove the other user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/memberships/{userId}",
      "method": "/teams/{teamId}/memberships/{userId}Put",
      "httpMethod": "put",
      "tag": "TeamsMemberships",
      "typeScriptTag": "teamsMemberships",
      "description": "Update user's team membership.",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "Team the user you want to update belongs to at the moment."
        },
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User ID of user you want to update."
        },
        {
          "name": "requesterUserId",
          "schema": "string",
          "description": "User ID of user which you want to change role with. This must be provided when using an api key. This user must have role administrator (for setting administrator role) or team administrator (for setting  rights."
        },
        {
          "name": "isValid",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "roleId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/profile",
      "method": "/teams/{teamId}/profilePut",
      "httpMethod": "put",
      "tag": "Teams",
      "typeScriptTag": "teams",
      "description": "Updates team profile of a team",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "Team ID of team which should be updated."
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/schedules",
      "method": "/teams/{teamId}/schedulesGet",
      "httpMethod": "get",
      "tag": "Duties",
      "typeScriptTag": "duties",
      "description": "Returns information about all duties that belong to the team.",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "Id of the team the schedules user belongs to"
        },
        {
          "name": "userId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "minDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/schedules",
      "method": "/teams/{teamId}/schedulesPost",
      "httpMethod": "post",
      "tag": "Duties",
      "typeScriptTag": "duties",
      "description": "Create/Update given duty schedule.",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "Id of the team the duty is to be assigned to."
        },
        {
          "name": "end",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "options",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "start",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/schedules/deleteRange",
      "method": "/teams/{teamId}/schedules/deleteRangePost",
      "httpMethod": "post",
      "tag": "Duties",
      "typeScriptTag": "duties",
      "description": "Delete duty schedules in range",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "Team ID you want to delete"
        },
        {
          "name": "from",
          "schema": "string",
          "description": ""
        },
        {
          "name": "to",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/schedules/multiple",
      "method": "/teams/{teamId}/schedules/multiplePost",
      "httpMethod": "post",
      "tag": "Duties",
      "typeScriptTag": "duties",
      "description": "Save multiple schedules. It is possible to override existing schedules if you wish",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "Team ID to set"
        },
        {
          "name": "overrideExisting",
          "schema": "boolean",
          "description": "Override or cut existing schedules if set to true."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/schedules/{dutyId}",
      "method": "/teams/{teamId}/schedules/{dutyId}Delete",
      "httpMethod": "delete",
      "tag": "Duties",
      "typeScriptTag": "duties",
      "description": "Delete a specific duty.",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of the team the duty belongs to."
        },
        {
          "name": "dutyId",
          "schema": "string",
          "required": true,
          "description": "ID of the duty to be deleted."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/schedules/{scheduleId}",
      "method": "/teams/{teamId}/schedules/{scheduleId}Get",
      "httpMethod": "get",
      "tag": "Duties",
      "typeScriptTag": "duties",
      "description": "Returns information of the duty schedule with the specified Id.",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "Id of the team the duty belongs to"
        },
        {
          "name": "scheduleId",
          "schema": "string",
          "required": true,
          "description": "Id of the requested duty schedule."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{teamId}/setupProgress",
      "method": "/teams/{teamId}/setupProgressGet",
      "httpMethod": "get",
      "tag": "Teams",
      "typeScriptTag": "teams",
      "description": "Gets setup progress of a specific team.",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "ID of the team the progress should be retrieved for."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/users",
      "method": "/usersGet",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Get all Users",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{userId}",
      "method": "/users/{userId}Get",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Get User by Id",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "Identifier of the user to get. Use 'Me' to get information about the currently logged in user. This is not possible with an api key.\r\nCan also be an email address of a user in the team or the unique id of an according user object.”"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{userId}/changePassword",
      "method": "/users/{userId}/changePasswordPut",
      "httpMethod": "put",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Updates the password of a user",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "User ID of user whose password should be changed."
        },
        {
          "name": "currentPassword",
          "schema": "string",
          "description": ""
        },
        {
          "name": "newPassword",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{userId}/checkPermissions",
      "method": "/users/{userId}/checkPermissionsPost",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Checks if a user has the provided permission.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "ID of the user to check permissions for."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "items",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{userId}/dutyStatus",
      "method": "/users/{userId}/dutyStatusGet",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Get duty status by user Id",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "Identifier of the user to get. Use 'Me' to get information about the currently logged in user. This is not possible with an api key.\r\nCan also be an email address of a user in the team or the unique id of an according user object.”"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{userId}/image",
      "method": "/users/{userId}/imageGet",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "height",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "width",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{userId}/image",
      "method": "/users/{userId}/imagePost",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Uploaded a profile image for a specified user.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "Id of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{userId}/profile",
      "method": "/users/{userId}/profilePut",
      "httpMethod": "put",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Updates user profile of an user",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "ID of user to update."
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{userId}/punchIn",
      "method": "/users/{userId}/punchInPost",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Punch User in",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "Identifier of the user to punch in. Use 'Me' to get information about the currently logged in\r\nuser. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.”"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{userId}/punchInAsManager",
      "method": "/users/{userId}/punchInAsManagerPost",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Punch User in as Manager",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "Identifier of the user to punch in. Use 'Me' to get information about the currently logged in\r\nuser. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.”"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{userId}/punchOut",
      "method": "/users/{userId}/punchOutPost",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Punch User out",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "Identifier of the user to punch out. Use 'Me' to get information about the currently logged in\r\nuser. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.”"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{userId}/setupProgress",
      "method": "/users/{userId}/setupProgressGet",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Gets setup progress of a specific user.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "ID of the user the progress should be retrieved for."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks",
      "method": "/webhooksGet",
      "httpMethod": "get",
      "tag": "Webhooks",
      "typeScriptTag": "webhooks",
      "description": "Get Webhooks",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks",
      "method": "/webhooksPost",
      "httpMethod": "post",
      "tag": "Webhooks",
      "typeScriptTag": "webhooks",
      "description": "Create Webhook",
      "parameters": [
        {
          "name": "externalAddress",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks/{webhookId}",
      "method": "/webhooks/{webhookId}Delete",
      "httpMethod": "delete",
      "tag": "Webhooks",
      "typeScriptTag": "webhooks",
      "description": "Delete Webhook by Id",
      "parameters": [
        {
          "name": "webhookId",
          "schema": "string",
          "required": true,
          "description": "Id of the outbound webhook that will be deleted."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks/{webhookId}",
      "method": "getWebhookById",
      "httpMethod": "get",
      "tag": "Webhooks",
      "typeScriptTag": "webhooks",
      "description": "Get Webhook by Id",
      "parameters": [
        {
          "name": "webhookId",
          "schema": "string",
          "required": true,
          "description": "Id of the outbound webhook to be retrieved."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks/{webhookId}",
      "method": "/webhooks/{webhookId}Put",
      "httpMethod": "put",
      "tag": "Webhooks",
      "typeScriptTag": "webhooks",
      "description": "Update Webhook by Id",
      "parameters": [
        {
          "name": "webhookId",
          "schema": "string",
          "required": true,
          "description": "Id of the outbound webhook to be updated."
        },
        {
          "name": "externalAddress",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks/{webhookId}/disable",
      "method": "/webhooks/{webhookId}/disablePost",
      "httpMethod": "post",
      "tag": "Webhooks",
      "typeScriptTag": "webhooks",
      "description": "Ability to enable a webHook.",
      "parameters": [
        {
          "name": "webhookId",
          "schema": "string",
          "required": true,
          "description": "Webhook ID for webhook which should be disabled."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks/{webhookId}/enable",
      "method": "/webhooks/{webhookId}/enablePost",
      "httpMethod": "post",
      "tag": "Webhooks",
      "typeScriptTag": "webhooks",
      "description": "Ability to disable a webHook.",
      "parameters": [
        {
          "name": "webhookId",
          "schema": "string",
          "required": true,
          "description": "Webhook ID for webhook which should be enabled."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://connect.signl4.com/api",
  "apiDescription": "<p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright © Derdack GmbH<br></p>",
  "apiTitle": "SIGNL4 API",
  "endpoints": 84,
  "sdkMethods": 101,
  "schemas": 98,
  "parameters": 262,
  "contactUrl": "https://www.signl4.com/feedback-we-love-hear-from-you/",
  "difficultyScore": 215.5,
  "difficulty": "Hard"
}