{
  "providerName": "statsocial.com",
  "openApiRaw": "https://docs.statsocial.com/wp-content/themes/twentyfifteen/json/swagger.json",
  "securitySchemes": {
    "api_key": {
      "in": "header",
      "name": "api_key",
      "type": "apiKey"
    }
  },
  "homepage": "statsocial.com",
  "apiVersion": "1.0.0",
  "methods": [
    {
      "url": "/applications/status/",
      "method": "/applications/status/Get",
      "httpMethod": "get",
      "tag": "Application",
      "typeScriptTag": "application",
      "description": "Used to understand API usage",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "User application key"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/",
      "method": "/reports/Get",
      "httpMethod": "get",
      "tag": "Reports",
      "typeScriptTag": "reports",
      "description": "Obtain report output",
      "parameters": [
        {
          "name": "reportHash",
          "schema": "string",
          "required": true,
          "description": "Unique report hash"
        },
        {
          "name": "baseline",
          "schema": "integer",
          "required": false,
          "description": "Default value will be 'world'"
        },
        {
          "name": "reportDate",
          "schema": "integer",
          "required": false,
          "description": "report_date represents a Unix timestamp of when the report was generated. Default value will be the latest report generated. You can request the /report/dates/ endpoint in order to obtain available timestamps. Date must be in the future."
        },
        {
          "name": "sample",
          "schema": "integer",
          "required": true,
          "description": "Sample report indicator"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/",
      "method": "/reports/Post",
      "httpMethod": "post",
      "tag": "Reports",
      "typeScriptTag": "reports",
      "description": "Obtain report output",
      "parameters": [
        {
          "name": "reportHash",
          "schema": "string",
          "required": true,
          "description": "Unique report hash"
        },
        {
          "name": "baseline",
          "schema": "integer",
          "required": false,
          "description": "Default value will be 'world'"
        },
        {
          "name": "reportDate",
          "schema": "integer",
          "required": false,
          "description": "report_date represents a Unix timestamp of when the report was generated. Default value will be the latest report generated. You can request the /report/dates/ endpoint in order to obtain available timestamps. Date must be in the future."
        },
        {
          "name": "sample",
          "schema": "integer",
          "required": true,
          "description": "Sample report indicator"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/custom/create/",
      "method": "/reports/custom/create/Get",
      "httpMethod": "get",
      "tag": "Custom Reports",
      "typeScriptTag": "customReports",
      "description": "Step 3 of executing custom report",
      "parameters": [
        {
          "name": "uploadHash",
          "schema": "string",
          "required": true,
          "description": "Upload hash to be used for inserting handles"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/custom/create/",
      "method": "/reports/custom/create/Post",
      "httpMethod": "post",
      "tag": "Custom Reports",
      "typeScriptTag": "customReports",
      "description": "Step 3 of executing custom report",
      "parameters": [
        {
          "name": "uploadHash",
          "schema": "string",
          "required": true,
          "description": "Upload hash to be used for inserting handles"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/custom/generate/",
      "method": "/reports/custom/generate/Get",
      "httpMethod": "get",
      "tag": "Custom Reports",
      "typeScriptTag": "customReports",
      "description": "Step 1 of executing custom report",
      "parameters": [
        {
          "name": "reportName",
          "schema": "string",
          "required": true,
          "description": "Name of the report"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/custom/generate/",
      "method": "/reports/custom/generate/Post",
      "httpMethod": "post",
      "tag": "Custom Reports",
      "typeScriptTag": "customReports",
      "description": "Step 1 of executing custom report",
      "parameters": [
        {
          "name": "reportName",
          "schema": "string",
          "required": true,
          "description": "Name of the report"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/custom/insert/",
      "method": "/reports/custom/insert/Get",
      "httpMethod": "get",
      "tag": "Custom Reports",
      "typeScriptTag": "customReports",
      "description": "Step 2 of executing custom report",
      "parameters": [
        {
          "name": "uploadHash",
          "schema": "string",
          "required": true,
          "description": "Upload hash to be used for inserting handles"
        },
        {
          "name": "ids",
          "schema": "array",
          "required": true,
          "description": "List of twitter ids, separated by commas, to be inserted into report. Ids must be enclosed with brackets ie. [177490485] or [177490485,23423434]"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/custom/insert/",
      "method": "/reports/custom/insert/Post",
      "httpMethod": "post",
      "tag": "Custom Reports",
      "typeScriptTag": "customReports",
      "description": "Step 2 of executing custom report",
      "parameters": [
        {
          "name": "uploadHash",
          "schema": "string",
          "required": true,
          "description": "Upload hash to be used for inserting handles"
        },
        {
          "name": "ids",
          "schema": "array",
          "required": true,
          "description": "List of twitter ids, separated by commas, to be inserted into report. Ids must be enclosed with brackets ie. [177490485] or [177490485,23423434]"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/dates/",
      "method": "/reports/dates/Get",
      "httpMethod": "get",
      "tag": "Reports",
      "typeScriptTag": "reports",
      "description": "Get report dates available for a specific report",
      "parameters": [
        {
          "name": "reportHash",
          "schema": "string",
          "required": true,
          "description": "Unique report hash"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/dates/",
      "method": "/reports/dates/Post",
      "httpMethod": "post",
      "tag": "Reports",
      "typeScriptTag": "reports",
      "description": "Get report dates available for a specific report",
      "parameters": [
        {
          "name": "reportHash",
          "schema": "string",
          "required": true,
          "description": "Unique report hash"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/status/",
      "method": "/reports/status/Get",
      "httpMethod": "get",
      "tag": "Reports",
      "typeScriptTag": "reports",
      "description": "Get list of generated reports",
      "parameters": [
        {
          "name": "reportHash",
          "schema": "string",
          "required": true,
          "description": "Unique hash belonging to report"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/status/",
      "method": "/reports/status/Post",
      "httpMethod": "post",
      "tag": "Reports",
      "typeScriptTag": "reports",
      "description": "Get list of generated reports",
      "parameters": [
        {
          "name": "reportHash",
          "schema": "string",
          "required": true,
          "description": "Unique hash belonging to report"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/tweet/create/",
      "method": "/reports/tweet/create/Get",
      "httpMethod": "get",
      "tag": "Tweet Reports",
      "typeScriptTag": "tweetReports",
      "description": "Used to create tweet reports",
      "parameters": [
        {
          "name": "reportName",
          "schema": "string",
          "required": true,
          "description": "Name of report"
        },
        {
          "name": "startDate",
          "schema": "integer",
          "required": true,
          "description": "A unix timestamp. start_date will be set to the previous midnight."
        },
        {
          "name": "endDate",
          "schema": "integer",
          "required": true,
          "description": "A unix timestamp. end_date will be set to the next midnight."
        },
        {
          "name": "terms",
          "schema": "string",
          "required": true,
          "description": "If you are tracking a single term, then the keyword itself is suffice otherwise, tracking multiple terms must be in JSON form, example '[{\"operator\":\"\",\"word\":\"http://google.com\"},{\"operator\":\"or\",\"word\":\"#test\"},{\"operator\":\"and\",\"word\":\"test2\"}]' Which results in filtering tweets containing 'http://google.com' OR '#test' AND 'test2'. (NOTE) Make sure to URL encode the terms value for multiple terms."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/tweet/create/",
      "method": "/reports/tweet/create/Post",
      "httpMethod": "post",
      "tag": "Tweet Reports",
      "typeScriptTag": "tweetReports",
      "description": "Used to create tweet reports",
      "parameters": [
        {
          "name": "reportName",
          "schema": "string",
          "required": true,
          "description": "Name of report"
        },
        {
          "name": "startDate",
          "schema": "integer",
          "required": true,
          "description": "A unix timestamp. start_date will be set to the previous midnight."
        },
        {
          "name": "endDate",
          "schema": "integer",
          "required": true,
          "description": "A unix timestamp. end_date will be set to the next midnight."
        },
        {
          "name": "terms",
          "schema": "string",
          "required": true,
          "description": "If you are tracking a single term, then the keyword itself is suffice otherwise, tracking multiple terms must be in JSON form, example '[{\"operator\":\"\",\"word\":\"http://google.com\"},{\"operator\":\"or\",\"word\":\"#test\"},{\"operator\":\"and\",\"word\":\"test2\"}]' Which results in filtering tweets containing 'http://google.com' OR '#test' AND 'test2'. (NOTE) Make sure to URL encode the terms value for multiple terms."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/twitter/create/",
      "method": "/reports/twitter/create/Get",
      "httpMethod": "get",
      "tag": "Follower Reports",
      "typeScriptTag": "followerReports",
      "description": "Used to create twitter follower report",
      "parameters": [
        {
          "name": "twitterId",
          "schema": "integer",
          "required": false,
          "description": "(required if twitter_handle is not supplied) twitter_id must be sent with all client requests. Multiple handles are separated by commas."
        },
        {
          "name": "twitterHandle",
          "schema": "string",
          "required": false,
          "description": "(required if twitter_id is not supplied) twitter_handle must be sent with all client requests. Multiple ids are separated by commas."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/twitter/create/",
      "method": "/reports/twitter/create/Post",
      "httpMethod": "post",
      "tag": "Follower Reports",
      "typeScriptTag": "followerReports",
      "description": "Used to create twitter follower report",
      "parameters": [
        {
          "name": "twitterId",
          "schema": "integer",
          "required": false,
          "description": "(required if twitter_handle is not supplied) twitter_id must be sent with all client requests. Multiple handles are separated by commas."
        },
        {
          "name": "twitterHandle",
          "schema": "string",
          "required": false,
          "description": "(required if twitter_id is not supplied) twitter_handle must be sent with all client requests. Multiple ids are separated by commas."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "http://api.statsocial.com/api",
  "apiDescription": "API Reference: <br><br> The StatSocial API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and to use HTTP response codes to indicate API errors. We use built-in HTTP features, like HTTP authentication and HTTP verbs, which can be understood by off-the-shelf HTTP clients, and we support cross-origin resource sharing to allow you to interact securely with our API from a client-side web application (remember that you should never expose your secret API key in any public website's client-side code). JSON will be returned in all responses from the API, including errors (though if you're using API bindings, we will convert the response to the appropriate language-specific object).<br><br>Contact help@statsocial.com to obtain a test API key",
  "apiTitle": "StatSocial Platform API",
  "endpoints": 9,
  "sdkMethods": 17,
  "schemas": 34,
  "parameters": 39,
  "difficultyScore": 43.75,
  "difficulty": "Easy"
}