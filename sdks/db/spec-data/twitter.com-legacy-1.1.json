{
  "providerName": "twitter.com",
  "openApiRaw": "http://api.apigee.com/v1/consoles/twitter/apidescription?format=wadl",
  "homepage": "twitter.com",
  "serviceName": "legacy",
  "apiVersion": "1.1",
  "methods": [
    {
      "url": "/account/settings.json",
      "method": "accountSettingsGet",
      "httpMethod": "get",
      "description": "Returns settings (including\ncurrent trend, geo and sleep time information) for the authenticating user.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/account/settings.json",
      "method": "accountSettingsPost",
      "httpMethod": "post",
      "description": "Updates the\nauthenticating user's settings.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/account/update_delivery_device.json",
      "method": "accountUpdateDeliveryDevice",
      "httpMethod": "post",
      "description": "Sets which\ndevice Twitter delivers updates to for the authenticating user. Sending none as the device parameter\nwill disable SMS updates.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/account/update_profile.json",
      "method": "accountUpdateProfile",
      "httpMethod": "post",
      "description": "Sets values that\nusers are able to set under the Account tab of their settings page. Only the parameters specified\nwill be updated.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/account/update_profile_background_image.json",
      "method": "accountsUpdateProfileBackgroundImage",
      "httpMethod": "post",
      "description": "Updates the authenticating user's profile background image. This method can also be used to enable\nor disable the profile background image. Although each parameter is marked as optional, at least one\nof image, tile or use must be provided when making this request.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/account/update_profile_colors.json",
      "method": "accountsUpdateProfileColors",
      "httpMethod": "post",
      "description": "Sets one or\nmore hex values that control the color scheme of the authenticating user's profile page on\ntwitter.com.\nEach parameter's value must be a valid hexidecimal value, and may be either three or six characters\n(ex: #fff or #ffffff).",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/account/update_profile_image.json",
      "method": "accountsUpdateProfileImage",
      "httpMethod": "post",
      "description": "Updates the\nauthenticating user's profile image. Note that this method expects raw multipart data, not a URL to\nan image. This method asynchronously processes the uploaded file before updating the user's profile\nimage URL. You can either update your local cache the next time you request the user's information,\nor, at least 5 seconds after uploading the image, ask for the updated URL using GET\nusers/profile_image/:screen_name\n(https://dev.twitter.com/docs/api/1/get/users/profile_image/:screen_name).",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/application/rate_limit_status.json",
      "method": "applicationRateLimitStatus",
      "httpMethod": "get",
      "description": "Returns the\ncurrent rate limits for\nmethods belonging to the specified resource families.\n\nEach 1.1 API resource belongs to a \"resource family\" which is indicated in its method documentation.\nYou can typically determine a method's resource family from the first component of the path after\nthe resource version.\n\nThis method responds with a map of methods belonging to the families specified by the resources\nparameter, the current remaining uses for each of those resources within the current rate limiting\nwindow, and its expiration time in epoch time. It also includes a rate_limit_context field that\nindicates the current access token context.\n\nYou may also issue requests to this method without any parameters to receive a map of all rate\nlimited GET methods. If your application only uses a few of methods, please explicitly provide a\nresources parameter with the specified resource families you work with.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/blocks/create.json",
      "method": "blocksCreate",
      "httpMethod": "post",
      "description": "Blocks the specified user from\nfollowing the authenticating user. In addition the blocked user will not show in the authenticating\nusers mentions or timeline (unless retweeted by another user). If a follow or friend relationship\nexists it is destroyed.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/blocks/destroy.json",
      "method": "blocksDestroy",
      "httpMethod": "post",
      "description": "Un-blocks the user specified\nin the ID parameter for the authenticating user. Returns the un-blocked user in the requested format\nwhen successful. If relationships existed before the block was instated, they will not be restored.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/blocks/ids.json",
      "method": "blocksIds",
      "httpMethod": "get",
      "description": "Returns an array of numeric user\nids the authenticating user is blocking.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/blocks/list.json",
      "method": "blocksList",
      "httpMethod": "get",
      "description": "Allows one to enable or\ndisable retweets and device notifications from the specified user.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/direct_messages.json",
      "method": "directMessages",
      "httpMethod": "get",
      "description": "Returns the 20 most recent\ndirect messages sent to the authenticating user. Includes detailed information about the sender and\nrecipient user. You can request up to 200 direct messages per call, up to a maximum of 800 incoming\nDMs.\n\nImportant: This method requires an access token with RWD (read, write and direct message)\npermissions.\nConsult The Application Permission Model for more information.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/direct_messages/destroy.json",
      "method": "directMessagesDestroy",
      "httpMethod": "post",
      "description": "Destroys the direct\nmessage specified in the required ID parameter. The authenticating user must be the recipient of the\nspecified direct message.\n\nImportant: This method requires an access token with RWD (read, write and direct message)\npermissions.\nConsult The Application Permission Model for more information.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/direct_messages/new.json",
      "method": "directMessagesNew",
      "httpMethod": "post",
      "description": "Sends a new direct\nmessage to the specified user from the authenticating user. Requires both the user and text\nparameters and must be a POST. Returns the sent message in the requested format if successful.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/direct_messages/sent.json",
      "method": "directMessagesSent",
      "httpMethod": "get",
      "description": "Returns the 20 most\nrecent direct messages sent by the authenticating user. Includes detailed information about the\nsender and recipient user. You can request up to 200 direct messages per call, up to a maximum of\n800 outgoing DMs.\n\nImportant: This method requires an access token with RWD (read, write and direct message)\npermissions. Consult The Application Permission Model for more information.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/direct_messages/show.json",
      "method": "directMessagesShow",
      "httpMethod": "get",
      "description": "Returns a single direct\nmessage, specified by an id parameter. Like the /1.1/direct_messages.format request, this method\nwill include the user objects of the sender and recipient.\n\nImportant: This method requires an access token with RWD (read, write and direct message)\npermissions.\nConsult The Application Permission Model for more information.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/favorites/create.json",
      "method": "favoritesCreate",
      "httpMethod": "post",
      "description": "Favorites the status\nspecified in the ID parameter as the authenticating user. Returns the favorite status when\nsuccessful.\n\nThis process invoked by this method is asynchronous. The immediately returned status may not\nindicate the resultant favorited status of the tweet. A 200 OK response from this method will\nindicate whether the intended action was successful or not.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/favorites/destroy.json",
      "method": "favoritesDestroy",
      "httpMethod": "post",
      "description": "Un-favorites the status\nspecified in the ID parameter as the authenticating user. Returns the un-favorited status in the\nrequested format when successful.\n\nThis process invoked by this method is asynchronous. The immediately returned status may not\nindicate the resultant favorited status of the tweet. A 200 OK response from this method will\nindicate whether the intended action was successful or not.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/favorites/list.json",
      "method": "favoritesList",
      "httpMethod": "get",
      "description": "Returns the 20 most recent\nTweets favorited by the authenticating or specified user.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/followers/ids.json",
      "method": "followersIds",
      "httpMethod": "get",
      "description": "Returns a cursored collection\nof user IDs for every user following the specified user.\n\nAt this time, results are ordered with the most recent following first â€” however, this ordering is\nsubject to unannounced change and eventual consistency issues. Results are given in groups of 5,000\nuser IDs and multiple \"pages\" of results can be navigated through using the next_cursor value in\nsubsequent requests. See Using cursors to navigate collections for more information.\n\nThis method is especially powerful when used in conjunction with GET users/lookup, a method that\nallows you to convert user IDs into full user objects in bulk.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/friends/ids.json",
      "method": "friendsIds",
      "httpMethod": "get",
      "description": "Returns a cursored collection of\nuser IDs for every user the specified user is following (otherwise known as their \"friends\").\n\nAt this time, results are ordered with the most recent following first â€” however, this ordering is\nsubject to unannounced change and eventual consistency issues. Results are given in groups of 5,000\nuser IDs and multiple \"pages\" of results can be navigated through using the next_cursor value in\nsubsequent requests. See Using cursors to navigate collections for more information.\n\nThis method is especially powerful when used in conjunction with GET users/lookup, a method that\nallows you to convert user IDs into full user objects in bulk.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/friendships/create.json",
      "method": "friendshipsCreate",
      "httpMethod": "post",
      "description": "Allows the authenticating\nusers to follow the user specified in the ID parameter.\n\nReturns the befriended user in the requested format when successful. Returns a string describing the\nfailure condition when unsuccessful. If you are already friends with the user a HTTP 403 may be\nreturned, though for performance reasons you may get a 200 OK message even if the friendship already\nexists.\n\nActions taken in this method are asynchronous and changes will be eventually consistent.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/friendships/destroy.json",
      "method": "friendshipsDestroy",
      "httpMethod": "post",
      "description": "Allows the\nauthenticating\nuser to unfollow the user specified in the ID parameter.\n\nReturns the unfollowed user in the requested format when successful. Returns a string describing the\nfailure condition when unsuccessful.\n\nActions taken in this method are asynchronous and changes will be eventually consistent.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/friendships/incoming.json",
      "method": "friendshipsIncoming",
      "httpMethod": "get",
      "description": "Returns the\nrelationships\nof the authenticating user to the comma-separated list of up to 100 screen_names or user_ids\nprovided. Values for connections can be: following, following_requested, followed_by, none.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/friendships/lookup.json",
      "method": "friendshipsLookup",
      "httpMethod": "get",
      "description": "Returns the relationships\nof the authenticating user to the comma-separated list of up to 100 screen_names or user_ids\nprovided. Values for connections can be: following, following_requested, followed_by, none.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/friendships/outgoing.json",
      "method": "friendshipsOutgoing",
      "httpMethod": "get",
      "description": "Returns a collection of\nnumeric IDs for every protected user for whom the authenticating user has a pending follow request.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/friendships/show.json",
      "method": "friendshipsShow",
      "httpMethod": "get",
      "description": "Returns detailed information\nabout the relationship between two arbitrary users.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/friendships/update.json",
      "method": "friendshipsUpdate",
      "httpMethod": "post",
      "description": "Allows one to enable or\ndisable retweets and device notifications from the specified user.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/geo/id/{place_id}.json",
      "method": "geoPlaceId",
      "httpMethod": "get",
      "description": "Returns all the\ninformation about a known place.Example Values: df51dec6f4ee2b2c",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/geo/places.json",
      "method": "geoPlaces",
      "httpMethod": "post",
      "description": "Creates a new place object at the\ngiven latitude and longitude.\n\nBefore creating a place you need to query GET geo/similar_places with the latitude, longitude and\nname of the place you wish to create. The query will return an array of places which are similar to\nthe one you wish to create, and a token. If the place you wish to create isn't in the returned array\nyou can use the token with this method to create a new one.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/geo/reverse_geocode.json",
      "method": "geoReverseGeocode",
      "httpMethod": "get",
      "description": "Given a latitude and a\nlongitude, searches for up to 20 places that can be used as a place_id when updating a status.\n\nThis request is an informative call and will deliver generalized results about geography",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/geo/search.json",
      "method": "geoSearch",
      "httpMethod": "get",
      "description": "Search for places that can be\nattached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name, this\nrequest will return a list of all the valid places that can be used as the place_id when updating a\nstatus.\n\nConceptually, a query can be made from the user's location, retrieve a list of places, have the user\nvalidate the location he or she is at, and then send the ID of this location with a call to POST\nstatuses/update.\n\nThis is the recommended method to use find places that can be attached to statuses/update. Unlike\nGET geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order\nplaces with regards to the user who is authenticated. This approach is also preferred for\ninteractive place matching with the user.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/geo/similar_places.json",
      "method": "geoSimilarPlaces",
      "httpMethod": "get",
      "description": "Locates places near the\ngiven coordinates which are similar in name.\n\nConceptually you would use this method to get a list of known places to choose from first. Then, if\nthe desired place doesn't exist, make a request to POST geo/place to create a new one.\n\nThe token contained in the response is the token needed to be able to create a new place.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/help/configuration.json",
      "method": "helpConfigurations",
      "httpMethod": "get",
      "description": "Returns the current\nconfiguration used by Twitter including twitter.com slugs which are not usernames, maximum photo\nresolutions, and t.co URL lengths.\n\nIt is recommended applications request this endpoint when they are loaded, but no more than once a\nday.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/help/languages.json",
      "method": "helpLanguages",
      "httpMethod": "get",
      "description": "Returns the list of languages\nsupported by Twitter along with their ISO 639-1 code. The ISO 639-1 code is the two letter value to\nuse if you include lang with any of your requests.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/help/privacy.json",
      "method": "helpPrivacy",
      "httpMethod": "get",
      "description": "Returns Twitter's Privacy Policy",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/help/tos.json",
      "method": "helpTos",
      "httpMethod": "get",
      "description": "Returns the Twitter Terms of Service\nin the requested format. These are not the same as the Developer Rules of the Road.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/lists/create.json",
      "method": "listsCreate",
      "httpMethod": "post",
      "description": "Creates a new list for the\nauthenticated user. Note that you can't create more than 20 lists per account.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/lists/destroy.json",
      "method": "listsDestroy",
      "httpMethod": "post",
      "description": "Deletes the specified list.\nThe authenticated user must own the list to be able to destroy it.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/lists/list.json",
      "method": "listsList",
      "httpMethod": "get",
      "description": "Returns all lists the\nauthenticating or specified user subscribes to, including their own. The user is specified using the\nuser_id or screen_name parameters. If no user is given, the authenticating user is used.\n\nThis method used to be GET lists in version 1.0 of the API and has been renamed for consistency with\nother call.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/lists/members.json",
      "method": "listsMembers",
      "httpMethod": "get",
      "description": "Returns the members of the\nspecified list. Private list members will only be shown if the authenticated user owns the specified\nlist.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/lists/members/create.json",
      "method": "listsMembersCreate",
      "httpMethod": "post",
      "description": "Add a member to a list.\nThe authenticated user must own the list to be able to add members to it. Note that lists can't have\nmore than 500 members.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/lists/members/create_all.json",
      "method": "listsMembersCreateAll",
      "httpMethod": "post",
      "description": "Adds multiple\nmembers to a list, by specifying a comma-separated list of member ids or screen names. The\nauthenticated user must own the list to be able to add members to it. Note that lists can't have\nmore than 500 members, and you are limited to adding up to 100 members to a list at a time with this\nmethod.\n\nPlease note that there can be issues with lists that rapidly remove and add memberships. Take care\nwhen using these methods such that you are not too rapidly switching between removals and adds on\nthe same list.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/lists/members/destroy.json",
      "method": "listsMembersDestroy",
      "httpMethod": "post",
      "description": "Removes the specified\nmember from the list. The authenticated user must be the list's owner to remove members from the\nlist.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/lists/members/destroy_all.json",
      "method": "listsMembersDestroyAll",
      "httpMethod": "post",
      "description": "Removes multiple\nmembers from a list, by specifying a comma-separated list of member ids or screen names. The\nauthenticated user must own the list to be able to remove members from it. Note that lists can't\nhave more than 500 members, and you are limited to removing up to 100 members to a list at a time\nwith this method.\n\nPlease note that there can be issues with lists that rapidly remove and add memberships. Take care\nwhen using these methods such that you are not too rapidly switching between removals and adds on\nthe same list.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/lists/members/show.json",
      "method": "listsMembersShow",
      "httpMethod": "get",
      "description": "Check if the specified\nuser is a member of the specified list.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/lists/memberships.json",
      "method": "listsMemberships",
      "httpMethod": "get",
      "description": "Returns the lists the\nspecified user has been added to. If user_id or screen_name are not provided the memberships for the\nauthenticating user are returned.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/lists/show.json",
      "method": "listsShow",
      "httpMethod": "get",
      "description": "Returns the specified list.\nPrivate lists will only be shown if the authenticated user owns the specified list.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/lists/statuses.json",
      "method": "listsStatuses",
      "httpMethod": "get",
      "description": "Returns tweet timeline for\nmembers of the specified list. Retweets are included by default. You can use the include_rts=false\nparameter to omit retweet objects.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/lists/subscribers.json",
      "method": "listsSubscribers",
      "httpMethod": "get",
      "description": "Returns the subscribers of\nthe specified list. Private list subscribers will only be shown if the authenticated user owns the\nspecified list.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/lists/subscribers/create.json",
      "method": "listsSubscribersCreate",
      "httpMethod": "post",
      "description": "Subscribes the\nauthenticated user to the specified list.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/lists/subscribers/destroy.json",
      "method": "listsSubscribersDestroy",
      "httpMethod": "post",
      "description": "Unsubscribes the\nauthenticated user from the specified list.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/lists/subscribers/show.json",
      "method": "listsSubscribersShow",
      "httpMethod": "get",
      "description": "Check if the specified\nuser is a subscriber of the specified list. Returns the user if they are subscriber.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/lists/subscriptions.json",
      "method": "listsSubscriptions",
      "httpMethod": "get",
      "description": "Obtain a collection of\nthe lists the specified user is subscribed to, 20 lists per page by default. Does not include the\nuser's own lists.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/lists/update.json",
      "method": "listsUpdate",
      "httpMethod": "post",
      "description": "Updates the specified list. The\nauthenticated user must own the list to be able to update it.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/saved_searches/create.json",
      "method": "savedSearchesCreate",
      "httpMethod": "post",
      "description": "Create a new saved\nsearch for the authenticated user. A user may only have 25 saved searches.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/saved_searches/destroy/{id}.json",
      "method": "savedSearchesDestroy",
      "httpMethod": "post",
      "description": "Destroys a\nsaved\nsearch for the authenticating user. The authenticating user must be the owner of saved search id\nbeing destroyed.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/saved_searches/list.json",
      "method": "savedSearchesList",
      "httpMethod": "get",
      "description": "Returns the authenticated\nuser's saved search queries.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/saved_searches/show/{id}.json",
      "method": "savedsearchesid",
      "httpMethod": "get",
      "description": "Returns the\nauthenticated user's saved search queries.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/search/tweets.json",
      "method": "searchTweets",
      "httpMethod": "get",
      "description": "Returns a collection of\nrelevant Tweets matching a specified query.\n\nPlease note that Twitter's search service and, by extension, the Search API is not meant to be an\nexhaustive source of Tweets. Not all Tweets will be indexed or made available via the search\ninterface.\n\nIn API v1.1, the response format of the Search API has been improved to return Tweet objects more\nsimilar to the objects you'll find across the REST API and platform. You may need to tolerate some\ninconsistencies and variance in perspectival values (fields that pertain to the perspective of the\nauthenticating user) and embedded user objects.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/statuses/destroy/{id}.json",
      "method": "statusesDestroy",
      "httpMethod": "post",
      "description": "Destroys the status\nspecified by the required ID parameter. The authenticating user must be the author of the specified\nstatus. Returns the destroyed status if successful.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/statuses/home_timeline.json",
      "method": "statusesHomeTimeline",
      "httpMethod": "get",
      "description": "Returns a collection\nof the most recent Tweets and retweets posted by the authenticating user and the users they follow.\nThe home timeline is central to how most users interact with the Twitter service.\n\nUp to 800 Tweets are obtainable on the home timeline. It is more volatile for users that follow many\nusers or follow users who tweet frequently.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/statuses/mentions_timeline.json",
      "method": "statusesMentionsTimeline",
      "httpMethod": "get",
      "description": "Returns the 20\nmost recent mentions (tweets containing a users's @screen_name) for the authenticating user.The\ntimeline returned is the equivalent of the one seen when you view your mentions on twitter.com.This\nmethod can only return up to 800 statuses.This method will include retweets in the JSON response\nregardless of whether the include_rts parameter is set.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/statuses/oembed.json",
      "method": "statusesOembed",
      "httpMethod": "get",
      "description": "Returns information allowing\nthe creation of an embedded representation of a Tweet on third party sites. See the oEmbed\nspecification (http://oembed.com) for information about the response format. Either the id or url\nparameters must be specified in a request, it is not necessary to include both. While this endpoint\nallows a bit of customization for the final appearance of the embedded Tweet, be aware that the\nappearance of the rendered Tweet may change over time to be consistent with Twitter's Display\nGuidelines (https://dev.twitter.com/terms/display-guidelines). Do not rely on any class or id\nparameters to stay constant in the returned markup.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/statuses/retweet/{id}.json",
      "method": "statusesretweetid",
      "httpMethod": "post",
      "description": "Retweets a tweet.\nReturns\nthe original tweet with retweet details embedded.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/statuses/retweets/{id}.json",
      "method": "statusesRetweets",
      "httpMethod": "get",
      "description": "Returns up to 100 of\nthe\nfirst retweets of a given tweet.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/statuses/show/{id}.json",
      "method": "statusesShow",
      "httpMethod": "get",
      "description": "Returns a single status,\nspecified by the id parameter below. The status's author will be returned inline.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/statuses/update.json",
      "method": "statusesUpdate",
      "httpMethod": "post",
      "description": "Updates the authenticating\nuser's status, also known as tweeting. To upload an image to accompany the tweet, use POST\nstatuses/update_with_media (https://dev.twitter.com/docs/api/1/post/statuses/update_with_media). For\neach update attempt, the update text is compared with the authenticating user's recent tweets. Any\nattempt that would result in duplication will be blocked, resulting in a 403 error. Therefore, a\nuser cannot submit the same status twice in a row. While not rate limited by the API a user is\nlimited in the number of tweets they can create at a time. If the number of updates posted by the\nuser reaches the current allowed limit this method will return an HTTP 403 error.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/statuses/update_with_media.json",
      "method": "statusesUpdateWithMedia",
      "httpMethod": "post",
      "description": "Updates the\nauthenticating user's status and attaches media for upload. Unlike POST statuses/update\n(https://dev.twitter.com/docs/api/1.1/post/statuses/update), this method expects raw multipart data.\nYour POST request's Content-Type should be set to multipart/form-data with the media[] parameter.\nThe Tweet text will be rewritten to include the media URL(s), which will reduce the number of\ncharacters allowed in the Tweet text. If the URL(s) cannot be appended without text truncation, the\ntweet will be rejected and this method will return an HTTP 403 error. Important: Make sure that\nyou're using upload.twitter.com as your host while posting statuses with media. It is strongly\nrecommended to use SSL with this method.",
      "parameters": [
        {
          "name": "Content-Type",
          "schema": "string",
          "required": true,
          "description": "Content type."
        }
      ],
      "responses": []
    },
    {
      "url": "/statuses/user_timeline.json",
      "method": "statusesUserTimeline",
      "httpMethod": "get",
      "description": "Returns the 20 most\nrecent statuses posted by the authenticating user. It is also possible to request another user's\ntimeline by using the screen_name or user_id parameter. The other users timeline will only be\nvisible if they are not protected, or if the authenticating user's follow request was accepted by\nthe protected user. The timeline returned is the equivalent of the one seen when you view a user's\nprofile on twitter.com. This method can only return up to 3,200 of a user's most recent statuses.\nNative retweets of other statuses by the user is included in this total, regardless of whether\ninclude_rts is specified when requesting this resource. This method will not include retweets in the\nXML and JSON responses unless the include_rts parameter is set. The RSS and Atom responses will\nalways include retweets as statuses prefixed with RT, regardless of provided parameters. Always\nspecify either an user_id or screen_name when requesting a user timeline.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/trends/available.json",
      "method": "trendsAvailable",
      "httpMethod": "get",
      "description": "Returns the locations that\nTwitter has trending topic information for.\n\nThe response is an array of \"locations\" that encode the location's WOEID and some other\nhuman-readable information such as a canonical name and country the location belongs in.\n\nA WOEID is a Yahoo! Where On Earth ID.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/trends/closest.json",
      "method": "trendsClosest",
      "httpMethod": "get",
      "description": "Returns the locations that\nTwitter has trending topic information for, closest to a specified location.\n\nThe response is an array of \"locations\" that encode the location's WOEID and some other\nhuman-readable information such as a canonical name and country the location belongs in.\n\nA WOEID is a Yahoo! Where On Earth ID.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/trends/place.json",
      "method": "trendsPlace",
      "httpMethod": "get",
      "description": "Returns the top 10 trending\ntopics for a specific WOEID, if trending information is available for it.\n\nThe response is an array of \"trend\" objects that encode the name of the trending topic, the query\nparameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL.\n\nThis information is cached for 5 minutes. Requesting more frequently than that will not return any\nmore data, and will count against your rate limit usage.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/users/contributees.json",
      "method": "usersContributees",
      "httpMethod": "get",
      "description": "Returns a collection of\nusers that the specified user can contribute to.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/users/contributors.json",
      "method": "usersContributors",
      "httpMethod": "get",
      "description": "Returns a collection of\nusers who can contribute to the specified account.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/users/lookup.json",
      "method": "usersLookup",
      "httpMethod": "get",
      "description": "Returns fully-hydrated user\nobjects for up to 100 users per request, as specified by comma-separated values passed to the\nuser_id and/or screen_name parameters.\n\nThis method is especially useful when used in conjunction with collections of user IDs returned from\nGET friends/ids and GET followers/ids.\n\nGET users/show is used to retrieve a single user object.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/users/report_spam.json",
      "method": "usersReportSpam",
      "httpMethod": "post",
      "description": "The user\nspecified in the id is blocked by the authenticated user and reported as a spammer.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/users/search.json",
      "method": "usersSearch",
      "httpMethod": "get",
      "description": "Provides a simple,\nrelevance-based search interface to public user accounts on Twitter. Try querying by topical\ninterest, full name, company name, location, or other criteria. Exact match searches are not\nsupported.\n\nOnly the first 1,000 matching results are available.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/users/show.json",
      "method": "usersShow",
      "httpMethod": "get",
      "description": "Returns a variety of information\nabout the user specified by the required user_id or screen_name parameter. The author's most recent\nTweet will be returned inline when possible.\n\nGET users/lookup is used to retrieve a bulk collection of user objects.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/users/suggestions.json",
      "method": "usersSuggestions",
      "httpMethod": "get",
      "description": "Access to Twitter's\nsuggested user list. This returns the list of suggested user categories. The category can be used in\nGET users/suggestions/:slug to get the users in that category.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/users/suggestions/{slug}.json",
      "method": "usersSuggestionsSlug",
      "httpMethod": "get",
      "description": "Access the users in\na given category of the Twitter suggested user list. It is recommended that applications cache this\ndata for no more than one hour.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/users/suggestions/{slug}/members.json",
      "method": "usersSuggestionsslugmembers",
      "httpMethod": "get",
      "description": "Access the\nusers in a given category of the Twitter suggested user list and return their most recent status if\nthey are not a protected user.",
      "parameters": [],
      "responses": []
    }
  ],
  "apiBaseUrl": "https://api.twitter.com/1.1",
  "apiTitle": "Twitter API",
  "endpoints": 82,
  "sdkMethods": 165,
  "schemas": 0,
  "parameters": 1,
  "contactUrl": "https://dev.twitter.com",
  "contactEmail": "support@twitter.com",
  "difficultyScore": 165.25,
  "difficulty": "Hard"
}