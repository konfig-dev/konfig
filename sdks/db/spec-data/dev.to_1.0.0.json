{
  "providerName": "dev.to",
  "openApiRaw": "https://raw.githubusercontent.com/forem/forem/main/swagger/v1/api_v1.json",
  "securitySchemes": {
    "api-key": {
      "description": "API Key authentication.\n\nAuthentication for some endpoints, like write operations on the\nArticles API require a DEV API key.\n\nAll authenticated endpoints are CORS disabled, the API key is intended for non-browser scripts.\n\n### Getting an API key\n\nTo obtain one, please follow these steps:\n\n  - visit https://dev.to/settings/extensions\n  - in the \"DEV API Keys\" section create a new key by adding a\n    description and clicking on \"Generate API Key\"\n\n    ![obtain a DEV API Key](https://user-images.githubusercontent.com/37842/172718105-bd93664e-76e0-477d-99c4-265dda0b06c5.png)\n\n  - You'll see the newly generated key in the same view\n    ![generated DEV API Key](https://user-images.githubusercontent.com/37842/172718151-e7fe26a0-9937-42e8-96c6-333acdab9e49.png)",
      "in": "header",
      "name": "api-key",
      "type": "apiKey"
    }
  },
  "categories": [
    "social"
  ],
  "homepage": "dev.to",
  "apiVersion": "1.0.0",
  "methods": [
    {
      "url": "/api/admin/users",
      "method": "postAdminUsersCreate",
      "httpMethod": "post",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Invite a User",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/articles",
      "method": "getArticles",
      "httpMethod": "get",
      "tag": "articles",
      "typeScriptTag": "articles",
      "description": "Published articles",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Pagination page"
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
        },
        {
          "name": "tag",
          "schema": "string",
          "required": false,
          "description": "Using this parameter will retrieve articles that contain the requested tag. Articles\nwill be ordered by descending popularity.This parameter can be used in conjuction with `top`."
        },
        {
          "name": "tags",
          "schema": "string",
          "required": false,
          "description": "Using this parameter will retrieve articles with any of the comma-separated tags.\nArticles will be ordered by descending popularity."
        },
        {
          "name": "tagsExclude",
          "schema": "string",
          "required": false,
          "description": "Using this parameter will retrieve articles that do _not_ contain _any_\nof comma-separated tags. Articles will be ordered by descending popularity."
        },
        {
          "name": "username",
          "schema": "string",
          "required": false,
          "description": "Using this parameter will retrieve articles belonging\n            to a User or Organization ordered by descending publication date.\n            If `state=all` the number of items returned will be `1000` instead of the default `30`.\n            This parameter can be used in conjuction with `state`."
        },
        {
          "name": "state",
          "schema": "string",
          "required": false,
          "description": "Using this parameter will allow the client to check which articles are fresh or rising.\n            If `state=fresh` the server will return fresh articles.\n            If `state=rising` the server will return rising articles.\n            This param can be used in conjuction with `username`, only if set to `all`."
        },
        {
          "name": "top",
          "schema": "integer",
          "required": false,
          "description": "Using this parameter will allow the client to return the most popular articles\nin the last `N` days.\n`top` indicates the number of days since publication of the articles returned.\nThis param can be used in conjuction with `tag`."
        },
        {
          "name": "collectionId",
          "schema": "integer",
          "required": false,
          "description": "Adding this will allow the client to return the list of articles\nbelonging to the requested collection, ordered by ascending publication date."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/articles",
      "method": "createArticle",
      "httpMethod": "post",
      "tag": "articles",
      "typeScriptTag": "articles",
      "description": "Publish article",
      "parameters": [
        {
          "name": "article",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/articles/latest",
      "method": "getLatestArticles",
      "httpMethod": "get",
      "tag": "articles",
      "typeScriptTag": "articles",
      "description": "Published articles sorted by published date",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Pagination page"
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/articles/me",
      "method": "getUserArticles",
      "httpMethod": "get",
      "tag": "articles",
      "typeScriptTag": "articles",
      "description": "User's articles",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Pagination page"
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/articles/me/all",
      "method": "getUserAllArticles",
      "httpMethod": "get",
      "tag": "articles",
      "typeScriptTag": "articles",
      "description": "User's all articles",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Pagination page"
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/articles/me/published",
      "method": "getUserPublishedArticles",
      "httpMethod": "get",
      "tag": "articles",
      "typeScriptTag": "articles",
      "description": "User's published articles",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Pagination page"
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/articles/me/unpublished",
      "method": "getUserUnpublishedArticles",
      "httpMethod": "get",
      "tag": "articles",
      "typeScriptTag": "articles",
      "description": "User's unpublished articles",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Pagination page"
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/articles/{id}",
      "method": "getArticleById",
      "httpMethod": "get",
      "tag": "articles",
      "typeScriptTag": "articles",
      "description": "Published article by id",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/articles/{id}",
      "method": "updateArticle",
      "httpMethod": "put",
      "tag": "articles",
      "typeScriptTag": "articles",
      "description": "Update an article by id",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the user to unpublish."
        },
        {
          "name": "article",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/articles/{id}/unpublish",
      "method": "unpublishArticle",
      "httpMethod": "put",
      "tag": "articles",
      "typeScriptTag": "articles",
      "description": "Unpublish an article",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the article to unpublish."
        },
        {
          "name": "note",
          "schema": "string",
          "required": false,
          "description": "Content for the note that's created along with unpublishing"
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/articles/{username}/{slug}",
      "method": "getArticleByPath",
      "httpMethod": "get",
      "tag": "articles",
      "typeScriptTag": "articles",
      "description": "Published article by path",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "slug",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/comments",
      "method": "getCommentsByArticleId",
      "httpMethod": "get",
      "tag": "comments",
      "typeScriptTag": "comments",
      "description": "Comments",
      "parameters": [
        {
          "name": "aId",
          "schema": "string",
          "required": false,
          "description": "Article identifier."
        },
        {
          "name": "pId",
          "schema": "string",
          "required": false,
          "description": "Podcast Episode identifier."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/comments/{id}",
      "method": "getCommentById",
      "httpMethod": "get",
      "tag": "comments",
      "typeScriptTag": "comments",
      "description": "Comment by id",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Comment identifier."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/display_ads",
      "method": "/api/displayAdsGet",
      "httpMethod": "get",
      "tag": "display ads",
      "typeScriptTag": "displayAds",
      "description": "display ads",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/display_ads",
      "method": "/api/displayAdsPost",
      "httpMethod": "post",
      "tag": "display ads",
      "typeScriptTag": "displayAds",
      "description": "display ads",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/display_ads/{id}",
      "method": "/api/displayAds/{id}Get",
      "httpMethod": "get",
      "tag": "display ads",
      "typeScriptTag": "displayAds",
      "description": "display ad",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the display ad."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/display_ads/{id}",
      "method": "/api/displayAds/{id}Put",
      "httpMethod": "put",
      "tag": "display ads",
      "typeScriptTag": "displayAds",
      "description": "display ads",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the display ad."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/display_ads/{id}/unpublish",
      "method": "/api/displayAds/{id}/unpublishPut",
      "httpMethod": "put",
      "tag": "display ads",
      "typeScriptTag": "displayAds",
      "description": "unpublish",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the display ad to unpublish."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/followers/users",
      "method": "getFollowers",
      "httpMethod": "get",
      "tag": "followers",
      "typeScriptTag": "followers",
      "description": "Followers",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Pagination page"
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Default is 'created_at'. Specifies the sort order for the created_at param of the follow\n                                relationship. To sort by newest followers first (descending order) specify\n                                ?sort=-created_at."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/follows/tags",
      "method": "getFollowedTags",
      "httpMethod": "get",
      "tag": "followed_tags",
      "typeScriptTag": "followedTags",
      "description": "Followed Tags",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/organizations/{username}",
      "method": "getOrganization",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "An organization",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/organizations/{username}/articles",
      "method": "getOrgArticles",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Organization's Articles",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Pagination page"
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/organizations/{username}/users",
      "method": "getOrgUsers",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Organization's users",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Pagination page"
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/pages",
      "method": "/api/pagesGet",
      "httpMethod": "get",
      "tag": "pages",
      "typeScriptTag": "pages",
      "description": "show details for all pages",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/pages",
      "method": "/api/pagesPost",
      "httpMethod": "post",
      "tag": "pages",
      "typeScriptTag": "pages",
      "description": "pages",
      "parameters": [
        {
          "name": "body_json",
          "schema": "string",
          "description": ""
        },
        {
          "name": "body_markdown",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "is_top_level_path",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "slug",
          "schema": "string",
          "description": ""
        },
        {
          "name": "template",
          "schema": "string",
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/pages/{id}",
      "method": "/api/pages/{id}Delete",
      "httpMethod": "delete",
      "tag": "pages",
      "typeScriptTag": "pages",
      "description": "remove a page",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Representation of a page object"
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/pages/{id}",
      "method": "/api/pages/{id}Get",
      "httpMethod": "get",
      "tag": "pages",
      "typeScriptTag": "pages",
      "description": "show details for a page",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Representation of a page object"
        }
      ]
    },
    {
      "url": "/api/pages/{id}",
      "method": "/api/pages/{id}Put",
      "httpMethod": "put",
      "tag": "pages",
      "typeScriptTag": "pages",
      "description": "update details for a page",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the page."
        },
        {
          "name": "body_json",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "body_markdown",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "is_top_level_path",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "slug",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "social_image",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "template",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Representation of a page object"
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/podcast_episodes",
      "method": "getPodcastEpisodes",
      "httpMethod": "get",
      "tag": "podcast_episodes",
      "typeScriptTag": "podcastEpisodes",
      "description": "Podcast Episodes",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Pagination page"
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
        },
        {
          "name": "username",
          "schema": "string",
          "required": false,
          "description": "Using this parameter will retrieve episodes belonging to a specific podcast."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/profile_images/{username}",
      "method": "getProfileImage",
      "httpMethod": "get",
      "tag": "profile images",
      "typeScriptTag": "profileImages",
      "description": "A Users or organizations profile image",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "The parameter is the username of the user or the username of the organization."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/reactions",
      "method": "/api/reactionsPost",
      "httpMethod": "post",
      "tag": "reactions",
      "typeScriptTag": "reactions",
      "description": "create reaction",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "reactableId",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "reactableType",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/reactions/toggle",
      "method": "/api/reactions/togglePost",
      "httpMethod": "post",
      "tag": "reactions",
      "typeScriptTag": "reactions",
      "description": "toggle reaction",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "reactableId",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "reactableType",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/readinglist",
      "method": "getReadinglist",
      "httpMethod": "get",
      "tag": "readinglist",
      "typeScriptTag": "readinglist",
      "description": "Readinglist",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Pagination page"
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/tags",
      "method": "getTags",
      "httpMethod": "get",
      "tag": "tags",
      "typeScriptTag": "tags",
      "description": "Tags",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Pagination page"
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/users/me",
      "method": "getUserMe",
      "httpMethod": "get",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "The authenticated user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/users/{id}",
      "method": "getUser",
      "httpMethod": "get",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "A User",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/users/{id}/suspend",
      "method": "suspendUser",
      "httpMethod": "put",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Suspend a User",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the user to suspend."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/users/{id}/unpublish",
      "method": "unpublishUser",
      "httpMethod": "put",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Unpublish a User's Articles and Comments",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the user to unpublish."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/videos",
      "method": "videos",
      "httpMethod": "get",
      "tag": "videos",
      "typeScriptTag": "videos",
      "description": "Articles with a video",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Pagination page"
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://dev.to/api",
  "apiDescription": "Access Forem articles, users and other resources via API.\n        For a real-world example of Forem in action, check out [DEV](https://www.dev.to).\n        All endpoints can be accessed with the 'api-key' header and a accept header, but\n        some of them are accessible publicly without authentication.\n\n        Dates and date times, unless otherwise specified, must be in\n        the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.",
  "apiTitle": "Forem API V1",
  "endpoints": 33,
  "sdkMethods": 40,
  "schemas": 17,
  "parameters": 82,
  "difficultyScore": 69,
  "difficulty": "Easy"
}