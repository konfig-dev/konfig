{
  "providerName": "maif.local",
  "openApiRaw": "https://raw.githubusercontent.com/MAIF/otoroshi/master/docs/manual/code/swagger.json",
  "securitySchemes": {
    "otoroshi_auth": {
      "scheme": "basic",
      "type": "http"
    }
  },
  "homepage": "maif.local",
  "serviceName": "otoroshi",
  "apiVersion": "1.5.0-dev",
  "methods": [
    {
      "url": "/api/apikeys",
      "method": "allApiKeys",
      "httpMethod": "get",
      "tag": "apikeys",
      "description": "Get all api keys",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/auths",
      "method": "findAllGlobalAuthModules",
      "httpMethod": "get",
      "tag": "auth-config",
      "description": "Get all global auth. module configs",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/auths",
      "method": "createGlobalAuthModule",
      "httpMethod": "post",
      "tag": "auth-config",
      "description": "Create one global auth. module config",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/auths/{id}",
      "method": "deleteGlobalAuthModule",
      "httpMethod": "delete",
      "tag": "auth-config",
      "description": "Delete one global auth. module config",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The auth. config id id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/auths/{id}",
      "method": "findGlobalAuthModuleById",
      "httpMethod": "get",
      "tag": "auth-config",
      "description": "Get one global auth. module configs",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The auth. config id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/auths/{id}",
      "method": "patchGlobalAuthModule",
      "httpMethod": "patch",
      "tag": "auth-config",
      "description": "Update one global auth. module config",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The auth. config id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/auths/{id}",
      "method": "updateGlobalAuthModule",
      "httpMethod": "put",
      "tag": "auth-config",
      "description": "Update one global auth. module config",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The auth. config id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/certificates",
      "method": "allCerts",
      "httpMethod": "get",
      "tag": "certificates",
      "description": "Get all certificates",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/certificates",
      "method": "createCert",
      "httpMethod": "post",
      "tag": "certificates",
      "description": "Create one certificate",
      "parameters": [
        {
          "name": "autoRenew",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ca",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "caRef",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "chain",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "from",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "privateKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "selfSigned",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "subject",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "to",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "valid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A SSL/TLS X509 certificate"
        }
      ]
    },
    {
      "url": "/api/certificates/{id}",
      "method": "deleteCert",
      "httpMethod": "delete",
      "tag": "certificates",
      "description": "Delete one certificate by id",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The certificate id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/certificates/{id}",
      "method": "oneCert",
      "httpMethod": "get",
      "tag": "certificates",
      "description": "Get one certificate by id",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The auth. config id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A SSL/TLS X509 certificate"
        }
      ]
    },
    {
      "url": "/api/certificates/{id}",
      "method": "patchCert",
      "httpMethod": "patch",
      "tag": "certificates",
      "description": "Update one certificate by id",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The certificate id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A SSL/TLS X509 certificate"
        }
      ]
    },
    {
      "url": "/api/certificates/{id}",
      "method": "putCert",
      "httpMethod": "put",
      "tag": "certificates",
      "description": "Update one certificate by id",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The certificate id"
        },
        {
          "name": "autoRenew",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ca",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "caRef",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "chain",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "from",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "privateKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "selfSigned",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "subject",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "to",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "valid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A SSL/TLS X509 certificate"
        }
      ]
    },
    {
      "url": "/api/client-validators",
      "method": "findAllClientValidators",
      "httpMethod": "get",
      "tag": "validation-authorities",
      "description": "Get all validation authoritiess",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/client-validators",
      "method": "createClientValidator",
      "httpMethod": "post",
      "tag": "validation-authorities",
      "description": "Create one validation authorities",
      "parameters": [
        {
          "name": "alwaysValid",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "badTtl",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "goodTtl",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "headers",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "host",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "method",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "noCache",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "path",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "timeout",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Settings to access a validation authority server"
        }
      ]
    },
    {
      "url": "/api/client-validators/{id}",
      "method": "deleteClientValidator",
      "httpMethod": "delete",
      "tag": "validation-authorities",
      "description": "Delete one validation authorities by id",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The validation authorities id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/client-validators/{id}",
      "method": "findClientValidatorById",
      "httpMethod": "get",
      "tag": "validation-authorities",
      "description": "Get one validation authorities by id",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The auth. config id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Settings to access a validation authority server"
        }
      ]
    },
    {
      "url": "/api/client-validators/{id}",
      "method": "patchClientValidator",
      "httpMethod": "patch",
      "tag": "validation-authorities",
      "description": "Update one validation authorities by id",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The validation authorities id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Settings to access a validation authority server"
        }
      ]
    },
    {
      "url": "/api/client-validators/{id}",
      "method": "updateClientValidator",
      "httpMethod": "put",
      "tag": "validation-authorities",
      "description": "Update one validation authorities by id",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The validation authorities id"
        },
        {
          "name": "alwaysValid",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "badTtl",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "goodTtl",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "headers",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "host",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "method",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "noCache",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "path",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "timeout",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Settings to access a validation authority server"
        }
      ]
    },
    {
      "url": "/api/data-exporter-configs",
      "method": "findAllDataExporters",
      "httpMethod": "get",
      "tag": "data-exporter-configs",
      "description": "Get all data exporter configs",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/data-exporter-configs",
      "method": "createDataExporterConfig",
      "httpMethod": "post",
      "tag": "data-exporter-configs",
      "description": "Create a new data exporter config",
      "parameters": [
        {
          "name": "bufferSize",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "config",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "desc",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "string",
          "description": ""
        },
        {
          "name": "filtering",
          "schema": "object",
          "description": ""
        },
        {
          "name": "groupDuration",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "groupSize",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "jsonWorkers",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "location",
          "schema": "object",
          "description": ""
        },
        {
          "name": "metadata",
          "schema": "object",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projection",
          "schema": "object",
          "description": ""
        },
        {
          "name": "sendWorkers",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "typ",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Settings to export Otorshi events"
        }
      ]
    },
    {
      "url": "/api/data-exporter-configs/_bulk",
      "method": "deletebulkDataExporterConfig",
      "httpMethod": "delete",
      "tag": "data-exporter-configs",
      "description": "Delete a data exporter config",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/data-exporter-configs/_bulk",
      "method": "patchBulkDataExporterConfig",
      "httpMethod": "patch",
      "tag": "data-exporter-configs",
      "description": "Update a data exporter configs with a diff",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/data-exporter-configs/_bulk",
      "method": "createBulkDataExporterConfigs",
      "httpMethod": "post",
      "tag": "data-exporter-configs",
      "description": "Create a new data exporter configs",
      "parameters": [
        {
          "name": "bufferSize",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "config",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "desc",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "string",
          "description": ""
        },
        {
          "name": "filtering",
          "schema": "object",
          "description": ""
        },
        {
          "name": "groupDuration",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "groupSize",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "jsonWorkers",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "location",
          "schema": "object",
          "description": ""
        },
        {
          "name": "metadata",
          "schema": "object",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projection",
          "schema": "object",
          "description": ""
        },
        {
          "name": "sendWorkers",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "typ",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/data-exporter-configs/_bulk",
      "method": "updateBulkDataExporterConfig",
      "httpMethod": "put",
      "tag": "data-exporter-configs",
      "description": "Update a data exporter configs",
      "parameters": [
        {
          "name": "bufferSize",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "config",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "desc",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "string",
          "description": ""
        },
        {
          "name": "filtering",
          "schema": "object",
          "description": ""
        },
        {
          "name": "groupDuration",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "groupSize",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "jsonWorkers",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "location",
          "schema": "object",
          "description": ""
        },
        {
          "name": "metadata",
          "schema": "object",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projection",
          "schema": "object",
          "description": ""
        },
        {
          "name": "sendWorkers",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "typ",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/data-exporter-configs/_template",
      "method": "dataExporterTemplate",
      "httpMethod": "get",
      "tag": "data-exporter-configs",
      "description": "Get all data exporter configs",
      "parameters": [
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "The data exporter config type"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Settings to export Otorshi events"
        }
      ]
    },
    {
      "url": "/api/data-exporter-configs/{dataExporterConfigId}",
      "method": "deleteDataExporterConfig",
      "httpMethod": "delete",
      "tag": "data-exporter-configs",
      "description": "Delete a data exporter config",
      "parameters": [
        {
          "name": "dataExporterConfigId",
          "schema": "string",
          "required": true,
          "description": "The data exporter config id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/data-exporter-configs/{dataExporterConfigId}",
      "method": "findDataExporterConfigById",
      "httpMethod": "get",
      "tag": "data-exporter-configs",
      "description": "Get a data exporter config",
      "parameters": [
        {
          "name": "dataExporterConfigId",
          "schema": "string",
          "required": true,
          "description": "The data exporter config id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Settings to export Otorshi events"
        }
      ]
    },
    {
      "url": "/api/data-exporter-configs/{dataExporterConfigId}",
      "method": "patchDataExporterConfig",
      "httpMethod": "patch",
      "tag": "data-exporter-configs",
      "description": "Update a data exporter config with a diff",
      "parameters": [
        {
          "name": "dataExporterConfigId",
          "schema": "string",
          "required": true,
          "description": "The data exporter config id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Settings to export Otorshi events"
        }
      ]
    },
    {
      "url": "/api/data-exporter-configs/{dataExporterConfigId}",
      "method": "updateDataExporterConfig",
      "httpMethod": "put",
      "tag": "data-exporter-configs",
      "description": "Update a data exporter config",
      "parameters": [
        {
          "name": "dataExporterConfigId",
          "schema": "string",
          "required": true,
          "description": "The data exporter config id"
        },
        {
          "name": "bufferSize",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "config",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "desc",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "string",
          "description": ""
        },
        {
          "name": "filtering",
          "schema": "object",
          "description": ""
        },
        {
          "name": "groupDuration",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "groupSize",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "jsonWorkers",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "location",
          "schema": "object",
          "description": ""
        },
        {
          "name": "metadata",
          "schema": "object",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projection",
          "schema": "object",
          "description": ""
        },
        {
          "name": "sendWorkers",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "typ",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Settings to export Otorshi events"
        }
      ]
    },
    {
      "url": "/api/globalconfig",
      "method": "globalConfig",
      "httpMethod": "get",
      "tag": "configuration",
      "description": "Get the full configuration of Otoroshi",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The global config object of Otoroshi, used to customize settings of the current Otoroshi instance"
        }
      ]
    },
    {
      "url": "/api/globalconfig",
      "method": "patchGlobalConfig",
      "httpMethod": "patch",
      "tag": "configuration",
      "description": "Update the global configuration with a diff",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The global config object of Otoroshi, used to customize settings of the current Otoroshi instance"
        }
      ]
    },
    {
      "url": "/api/globalconfig",
      "method": "putGlobalConfig",
      "httpMethod": "put",
      "tag": "configuration",
      "description": "Update the global configuration",
      "parameters": [
        {
          "name": "alertsEmails",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "alertsWebhooks",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "analyticsWebhooks",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "apiReadOnly",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "autoLinkToDefaultGroup",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "backofficeAuth0Config",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "cleverSettings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "elasticReadsConfig",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "elasticWritesConfigs",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "endlessIpAddresses",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "ipFiltering",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "limitConcurrentRequests",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "lines",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "mailerSettings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "maxConcurrentRequests",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "maxHttp10ResponseSize",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "maxLogsSize",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "middleFingers",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "perIpThrottlingQuota",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "privateAppsAuth0Config",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "streamEntityOnly",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "throttlingQuota",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "u2fLoginOnly",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "useCircuitBreakers",
          "schema": "boolean",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The global config object of Otoroshi, used to customize settings of the current Otoroshi instance"
        }
      ]
    },
    {
      "url": "/api/groups",
      "method": "allServiceGroups",
      "httpMethod": "get",
      "tag": "groups",
      "description": "Get all service groups",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/groups",
      "method": "createGroup",
      "httpMethod": "post",
      "tag": "groups",
      "description": "Create a new service group",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Otoroshi service group is just a group of service descriptor. It is useful to be able to define Api Keys for the whole group"
        }
      ]
    },
    {
      "url": "/api/groups/{groupId}/apikeys",
      "method": "apiKeysFromGroup",
      "httpMethod": "get",
      "tag": "apikeys",
      "description": "Get all api keys for the group of a service",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "The api key group id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/groups/{groupId}/apikeys",
      "method": "createApiKeyFromGroup",
      "httpMethod": "post",
      "tag": "apikeys",
      "description": "Create a new api key for a group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "The api key group id"
        },
        {
          "name": "authorizedEntities",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientName",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientSecret",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "dailyQuota",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "metadata",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "monthlyQuota",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "throttlingQuota",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Otoroshi Api Key. An Api Key is defined for a group of services to allow usage of the same Api Key for multiple services."
        }
      ]
    },
    {
      "url": "/api/groups/{groupId}/apikeys/{clientId}",
      "method": "deleteApiKeyFromGroup",
      "httpMethod": "delete",
      "tag": "apikeys",
      "description": "Delete an api key",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "The api key group id"
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": "the api key id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/groups/{groupId}/apikeys/{clientId}",
      "method": "apiKeyFromGroup",
      "httpMethod": "get",
      "tag": "apikeys",
      "description": "Get an api key",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "The api key group id"
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": "the api key id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Otoroshi Api Key. An Api Key is defined for a group of services to allow usage of the same Api Key for multiple services."
        }
      ]
    },
    {
      "url": "/api/groups/{groupId}/apikeys/{clientId}",
      "method": "patchApiKeyFromGroup",
      "httpMethod": "patch",
      "tag": "apikeys",
      "description": "Update an api key with a diff",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "The api key group id"
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": "the api key id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Otoroshi Api Key. An Api Key is defined for a group of services to allow usage of the same Api Key for multiple services."
        }
      ]
    },
    {
      "url": "/api/groups/{groupId}/apikeys/{clientId}",
      "method": "updateApiKeyFromGroup",
      "httpMethod": "put",
      "tag": "apikeys",
      "description": "Update an api key",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "The api key group id"
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": "the api key id"
        },
        {
          "name": "authorizedEntities",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientName",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientSecret",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "dailyQuota",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "metadata",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "monthlyQuota",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "throttlingQuota",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Otoroshi Api Key. An Api Key is defined for a group of services to allow usage of the same Api Key for multiple services."
        }
      ]
    },
    {
      "url": "/api/groups/{groupId}/apikeys/{clientId}/quotas",
      "method": "resetApiKeyFromGroupQuotas",
      "httpMethod": "delete",
      "tag": "apikeys",
      "description": "Reset the quota state of an api key",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "The api key group id"
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": "the api key id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Quotas state for an api key on a service group"
        }
      ]
    },
    {
      "url": "/api/groups/{groupId}/apikeys/{clientId}/quotas",
      "method": "apiKeyFromGroupQuotas",
      "httpMethod": "get",
      "tag": "apikeys",
      "description": "Get the quota state of an api key",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "The api key group id"
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": "the api key id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Quotas state for an api key on a service group"
        }
      ]
    },
    {
      "url": "/api/groups/{serviceGroupId}",
      "method": "deleteGroup",
      "httpMethod": "delete",
      "tag": "groups",
      "description": "Delete a service group",
      "parameters": [
        {
          "name": "serviceGroupId",
          "schema": "string",
          "required": true,
          "description": "The service group id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/groups/{serviceGroupId}",
      "method": "serviceGroup",
      "httpMethod": "get",
      "tag": "groups",
      "description": "Get a service group",
      "parameters": [
        {
          "name": "serviceGroupId",
          "schema": "string",
          "required": true,
          "description": "The service group id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Otoroshi service group is just a group of service descriptor. It is useful to be able to define Api Keys for the whole group"
        }
      ]
    },
    {
      "url": "/api/groups/{serviceGroupId}",
      "method": "patchGroup",
      "httpMethod": "patch",
      "tag": "groups",
      "description": "Update a service group with a diff",
      "parameters": [
        {
          "name": "serviceGroupId",
          "schema": "string",
          "required": true,
          "description": "The service group id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Otoroshi service group is just a group of service descriptor. It is useful to be able to define Api Keys for the whole group"
        }
      ]
    },
    {
      "url": "/api/groups/{serviceGroupId}",
      "method": "updateGroup",
      "httpMethod": "put",
      "tag": "groups",
      "description": "Update a service group",
      "parameters": [
        {
          "name": "serviceGroupId",
          "schema": "string",
          "required": true,
          "description": "The service group id"
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Otoroshi service group is just a group of service descriptor. It is useful to be able to define Api Keys for the whole group"
        }
      ]
    },
    {
      "url": "/api/groups/{serviceGroupId}/services",
      "method": "serviceGroupServices",
      "httpMethod": "get",
      "tag": "services",
      "description": "Get all services descriptor for a group",
      "parameters": [
        {
          "name": "serviceGroupId",
          "schema": "string",
          "required": true,
          "description": "The service group id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/import",
      "method": "fullImportFromFile",
      "httpMethod": "post",
      "tag": "import",
      "description": "Import the full state of Otoroshi as a file",
      "parameters": [
        {
          "name": "admins",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "apiKeys",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "appConfig",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "config",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "date",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "dateRaw",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "errorTemplates",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "serviceDescriptors",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "serviceGroups",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "simpleAdmins",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "stats",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/live",
      "method": "globalLiveStats",
      "httpMethod": "get",
      "tag": "stats",
      "description": "Get global otoroshi stats",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Live stats for a service or globally"
        }
      ]
    },
    {
      "url": "/api/live/{id}",
      "method": "serviceLiveStats",
      "httpMethod": "get",
      "tag": "stats",
      "description": "Get live feed of otoroshi stats",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The service id or global for otoroshi stats"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Live stats for a service or globally"
        }
      ]
    },
    {
      "url": "/api/otoroshi.json",
      "method": "fullExport",
      "httpMethod": "get",
      "tag": "import",
      "description": "Export the full state of Otoroshi",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The structure that can be imported to or exported from Otoroshi. It represent the memory state of Otoroshi"
        }
      ]
    },
    {
      "url": "/api/otoroshi.json",
      "method": "fullImport",
      "httpMethod": "post",
      "tag": "import",
      "description": "Import the full state of Otoroshi",
      "parameters": [
        {
          "name": "admins",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "apiKeys",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "appConfig",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "config",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "date",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "dateRaw",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "errorTemplates",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "serviceDescriptors",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "serviceGroups",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "simpleAdmins",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "stats",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/scripts",
      "method": "findAllScripts",
      "httpMethod": "get",
      "tag": "scripts",
      "description": "Get all scripts",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/scripts",
      "method": "createScript",
      "httpMethod": "post",
      "tag": "scripts",
      "description": "Create a new script",
      "parameters": [
        {
          "name": "code",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "desc",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A script to transformer otoroshi requests "
        }
      ]
    },
    {
      "url": "/api/scripts/_compile",
      "method": "compileScript",
      "httpMethod": "post",
      "tag": "scripts",
      "description": "Compile a script",
      "parameters": [
        {
          "name": "code",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "desc",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The result of the compilation of a Script"
        }
      ]
    },
    {
      "url": "/api/scripts/{scriptId}",
      "method": "deleteScript",
      "httpMethod": "delete",
      "tag": "scripts",
      "description": "Delete a script",
      "parameters": [
        {
          "name": "scriptId",
          "schema": "string",
          "required": true,
          "description": "The script id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/scripts/{scriptId}",
      "method": "findScriptById",
      "httpMethod": "get",
      "tag": "scripts",
      "description": "Get a script",
      "parameters": [
        {
          "name": "scriptId",
          "schema": "string",
          "required": true,
          "description": "The script id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A script to transformer otoroshi requests "
        }
      ]
    },
    {
      "url": "/api/scripts/{scriptId}",
      "method": "patchScript",
      "httpMethod": "patch",
      "tag": "scripts",
      "description": "Update a script with a diff",
      "parameters": [
        {
          "name": "scriptId",
          "schema": "string",
          "required": true,
          "description": "The script id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A script to transformer otoroshi requests "
        }
      ]
    },
    {
      "url": "/api/scripts/{scriptId}",
      "method": "updateScript",
      "httpMethod": "put",
      "tag": "scripts",
      "description": "Update a script",
      "parameters": [
        {
          "name": "scriptId",
          "schema": "string",
          "required": true,
          "description": "The script id"
        },
        {
          "name": "code",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "desc",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A script to transformer otoroshi requests "
        }
      ]
    },
    {
      "url": "/api/services",
      "method": "allServices",
      "httpMethod": "get",
      "tag": "services",
      "description": "Get all services",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/services",
      "method": "createService",
      "httpMethod": "post",
      "tag": "services",
      "description": "Create a new service descriptor",
      "parameters": [
        {
          "name": "Canary",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "additionalHeaders",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "api",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "authConfigRef",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "buildMode",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "chaosConfig",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "clientConfig",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "clientValidatorRef",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "cors",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "enforceSecureCommunication",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "env",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "forceHttps",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "groups",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "gzip",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "headersVerification",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "healthCheck",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ipFiltering",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "jwtVerifier",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "localHost",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "localScheme",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "maintenanceMode",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "matchingHeaders",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "matchingRoot",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "metadata",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "overrideHost",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "privateApp",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "privatePatterns",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "publicPatterns",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "redirectToLocal",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "redirection",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "root",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "secComExcludedPatterns",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "secComSettings",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "sendOtoroshiHeadersBack",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "statsdConfig",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "subdomain",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "targets",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "transformerRef",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "userFacing",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "xForwardedHeaders",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An otoroshi service descriptor. Represent a forward HTTP call on a domain to another location with some optional api management mecanism"
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}",
      "method": "deleteService",
      "httpMethod": "delete",
      "tag": "services",
      "description": "Delete a service descriptor",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The service id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}",
      "method": "service",
      "httpMethod": "get",
      "tag": "services",
      "description": "Get a service descriptor",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The service id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An otoroshi service descriptor. Represent a forward HTTP call on a domain to another location with some optional api management mecanism"
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}",
      "method": "patchService",
      "httpMethod": "patch",
      "tag": "services",
      "description": "Update a service descriptor with a diff",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The service id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An otoroshi service descriptor. Represent a forward HTTP call on a domain to another location with some optional api management mecanism"
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}",
      "method": "updateService",
      "httpMethod": "put",
      "tag": "services",
      "description": "Update a service descriptor",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The service id"
        },
        {
          "name": "Canary",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "additionalHeaders",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "api",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "authConfigRef",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "buildMode",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "chaosConfig",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "clientConfig",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "clientValidatorRef",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "cors",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "enforceSecureCommunication",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "env",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "forceHttps",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "groups",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "gzip",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "headersVerification",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "healthCheck",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ipFiltering",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "jwtVerifier",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "localHost",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "localScheme",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "maintenanceMode",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "matchingHeaders",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "matchingRoot",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "metadata",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "overrideHost",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "privateApp",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "privatePatterns",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "publicPatterns",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "redirectToLocal",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "redirection",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "root",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "secComExcludedPatterns",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "secComSettings",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "sendOtoroshiHeadersBack",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "statsdConfig",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "subdomain",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "targets",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "transformerRef",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "userFacing",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "xForwardedHeaders",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An otoroshi service descriptor. Represent a forward HTTP call on a domain to another location with some optional api management mecanism"
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}/apikeys",
      "method": "apiKeys",
      "httpMethod": "get",
      "tag": "apikeys",
      "description": "Get all api keys for the group of a service",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The api key service id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}/apikeys",
      "method": "createApiKey",
      "httpMethod": "post",
      "tag": "apikeys",
      "description": "Create a new api key for a service",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The api key service id"
        },
        {
          "name": "authorizedEntities",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientName",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientSecret",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "dailyQuota",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "metadata",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "monthlyQuota",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "throttlingQuota",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Otoroshi Api Key. An Api Key is defined for a group of services to allow usage of the same Api Key for multiple services."
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}/apikeys/{clientId}",
      "method": "deleteApiKey",
      "httpMethod": "delete",
      "tag": "apikeys",
      "description": "Delete an api key",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The api key service id"
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": "the api key id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}/apikeys/{clientId}",
      "method": "apiKey",
      "httpMethod": "get",
      "tag": "apikeys",
      "description": "Get an api key",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The api key service id"
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": "the api key id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Otoroshi Api Key. An Api Key is defined for a group of services to allow usage of the same Api Key for multiple services."
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}/apikeys/{clientId}",
      "method": "patchApiKey",
      "httpMethod": "patch",
      "tag": "apikeys",
      "description": "Update an api key with a diff",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The api key service id"
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": "the api key id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Otoroshi Api Key. An Api Key is defined for a group of services to allow usage of the same Api Key for multiple services."
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}/apikeys/{clientId}",
      "method": "updateApiKey",
      "httpMethod": "put",
      "tag": "apikeys",
      "description": "Update an api key",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The api key service id"
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": "the api key id"
        },
        {
          "name": "authorizedEntities",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientName",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientSecret",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "dailyQuota",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "metadata",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "monthlyQuota",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "throttlingQuota",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Otoroshi Api Key. An Api Key is defined for a group of services to allow usage of the same Api Key for multiple services."
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}/apikeys/{clientId}/group",
      "method": "apiKeyGroup",
      "httpMethod": "get",
      "tag": "apikeys",
      "description": "Get the group of an api key",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The api key service id"
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": "the api key id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Otoroshi service group is just a group of service descriptor. It is useful to be able to define Api Keys for the whole group"
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}/apikeys/{clientId}/quotas",
      "method": "resetApiKeyQuotas",
      "httpMethod": "delete",
      "tag": "apikeys",
      "description": "Reset the quota state of an api key",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The api key service id"
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": "the api key id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Quotas state for an api key on a service group"
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}/apikeys/{clientId}/quotas",
      "method": "apiKeyQuotas",
      "httpMethod": "get",
      "tag": "apikeys",
      "description": "Get the quota state of an api key",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The api key service id"
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": "the api key id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Quotas state for an api key on a service group"
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}/targets",
      "method": "serviceDeleteTarget",
      "httpMethod": "delete",
      "tag": "services",
      "description": "Delete a service descriptor target",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The service id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}/targets",
      "method": "serviceTargets",
      "httpMethod": "get",
      "tag": "services",
      "description": "Get a service descriptor targets",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The service id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}/targets",
      "method": "updateServiceTargets",
      "httpMethod": "patch",
      "tag": "services",
      "description": "Update a service descriptor targets",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The service id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}/targets",
      "method": "serviceAddTarget",
      "httpMethod": "post",
      "tag": "services",
      "description": "Add a target to a service descriptor",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The service id"
        },
        {
          "name": "host",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "scheme",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}/template",
      "method": "deleteServiceTemplate",
      "httpMethod": "delete",
      "tag": "services",
      "description": "Delete a service descriptor error template",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The service id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}/template",
      "method": "serviceTemplate",
      "httpMethod": "get",
      "tag": "services",
      "description": "Get a service descriptor error template",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The service id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Error templates for a service descriptor"
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}/template",
      "method": "createServiceTemplate",
      "httpMethod": "post",
      "tag": "services",
      "description": "Create a service descriptor error template",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The service id"
        },
        {
          "name": "messages",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "template40x",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "template50x",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "templateBuild",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "templateMaintenance",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Error templates for a service descriptor"
        }
      ]
    },
    {
      "url": "/api/services/{serviceId}/template",
      "method": "updateServiceTemplate",
      "httpMethod": "put",
      "tag": "services",
      "description": "Update an error template to a service descriptor",
      "parameters": [
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": "The service id"
        },
        {
          "name": "messages",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "template40x",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "template50x",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "templateBuild",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "templateMaintenance",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Error templates for a service descriptor"
        }
      ]
    },
    {
      "url": "/api/snowmonkey/_start",
      "method": "startSnowMonkey",
      "httpMethod": "post",
      "tag": "snowmonkey",
      "description": "Start the Snow Monkey",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/snowmonkey/_stop",
      "method": "stopSnowMonkey",
      "httpMethod": "post",
      "tag": "snowmonkey",
      "description": "Stop the Snow Monkey",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/snowmonkey/config",
      "method": "getSnowMonkeyConfig",
      "httpMethod": "get",
      "tag": "snowmonkey",
      "description": "Get current Snow Monkey config",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Configuration for the faults that can be injected in requests. The name Snow Monkey is an hommage to Netflix's Chaos Monkey 😉"
        }
      ]
    },
    {
      "url": "/api/snowmonkey/config",
      "method": "patchSnowMonkey",
      "httpMethod": "patch",
      "tag": "snowmonkey",
      "description": "Update current Snow Monkey config",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Configuration for the faults that can be injected in requests. The name Snow Monkey is an hommage to Netflix's Chaos Monkey 😉"
        }
      ]
    },
    {
      "url": "/api/snowmonkey/config",
      "method": "updateSnowMonkey",
      "httpMethod": "put",
      "tag": "snowmonkey",
      "description": "Update current Snow Monkey config",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Configuration for the faults that can be injected in requests. The name Snow Monkey is an hommage to Netflix's Chaos Monkey 😉"
        }
      ]
    },
    {
      "url": "/api/snowmonkey/outages",
      "method": "resetSnowMonkey",
      "httpMethod": "delete",
      "tag": "snowmonkey",
      "description": "Reset Snow Monkey Outages for the day",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/snowmonkey/outages",
      "method": "getSnowMonkeyOutages",
      "httpMethod": "get",
      "tag": "snowmonkey",
      "description": "Get all current Snow Monkey ourages",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/verifiers",
      "method": "findAllGlobalJwtVerifiers",
      "httpMethod": "get",
      "tag": "jwt-verifiers",
      "description": "Get all global JWT verifiers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/verifiers",
      "method": "createGlobalJwtVerifier",
      "httpMethod": "post",
      "tag": "jwt-verifiers",
      "description": "Create one global JWT verifiers",
      "parameters": [
        {
          "name": "algoSettings",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "desc",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "source",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "strategy",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "strict",
          "schema": "boolean",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A JWT verifier used by multiple service descriptor"
        }
      ]
    },
    {
      "url": "/api/verifiers/{verifierId}",
      "method": "deleteGlobalJwtVerifier",
      "httpMethod": "delete",
      "tag": "jwt-verifiers",
      "description": "Delete one global JWT verifiers",
      "parameters": [
        {
          "name": "verifierId",
          "schema": "string",
          "required": true,
          "description": "The jwt verifier id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/verifiers/{verifierId}",
      "method": "findGlobalJwtVerifiersById",
      "httpMethod": "get",
      "tag": "jwt-verifiers",
      "description": "Get one global JWT verifiers",
      "parameters": [
        {
          "name": "verifierId",
          "schema": "string",
          "required": true,
          "description": "The jwt verifier id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A JWT verifier used by multiple service descriptor"
        }
      ]
    },
    {
      "url": "/api/verifiers/{verifierId}",
      "method": "patchGlobalJwtVerifier",
      "httpMethod": "patch",
      "tag": "jwt-verifiers",
      "description": "Update one global JWT verifiers",
      "parameters": [
        {
          "name": "verifierId",
          "schema": "string",
          "required": true,
          "description": "The jwt verifier id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A JWT verifier used by multiple service descriptor"
        }
      ]
    },
    {
      "url": "/api/verifiers/{verifierId}",
      "method": "updateGlobalJwtVerifier",
      "httpMethod": "put",
      "tag": "jwt-verifiers",
      "description": "Update one global JWT verifiers",
      "parameters": [
        {
          "name": "verifierId",
          "schema": "string",
          "required": true,
          "description": "The jwt verifier id"
        },
        {
          "name": "algoSettings",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "desc",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "source",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "strategy",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "strict",
          "schema": "boolean",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A JWT verifier used by multiple service descriptor"
        }
      ]
    },
    {
      "url": "/health",
      "method": "health",
      "httpMethod": "get",
      "tag": "health",
      "description": "Return current Otoroshi health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The structure that represent current Otoroshi health"
        }
      ]
    },
    {
      "url": "/lines",
      "method": "allLines",
      "httpMethod": "get",
      "tag": "environments",
      "description": "Get all environments",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The name of the environment for service descriptors"
        }
      ]
    },
    {
      "url": "/lines/{line}/services",
      "method": "servicesForALine",
      "httpMethod": "get",
      "tag": "environments",
      "description": "Get all services for an environment",
      "parameters": [
        {
          "name": "line",
          "schema": "string",
          "required": true,
          "description": "The environment where to find services"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/new/apikey",
      "method": "initiateApiKey",
      "httpMethod": "get",
      "tag": "templates",
      "description": "Get a template of an Otoroshi Api Key",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Otoroshi Api Key. An Api Key is defined for a group of services to allow usage of the same Api Key for multiple services."
        }
      ]
    },
    {
      "url": "/new/group",
      "method": "initiateServiceGroup",
      "httpMethod": "get",
      "tag": "templates",
      "description": "Get a template of an Otoroshi service group",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Otoroshi service group is just a group of service descriptor. It is useful to be able to define Api Keys for the whole group"
        }
      ]
    },
    {
      "url": "/new/service",
      "method": "initiateService",
      "httpMethod": "get",
      "tag": "templates",
      "description": "Get a template of an Otoroshi service descriptor",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An otoroshi service descriptor. Represent a forward HTTP call on a domain to another location with some optional api management mecanism"
        }
      ]
    }
  ],
  "apiBaseUrl": "http://otoroshi-api.oto.tools/",
  "apiDescription": "Admin API of the Otoroshi reverse proxy",
  "apiTitle": "Otoroshi Admin API",
  "endpoints": 45,
  "sdkMethods": 102,
  "schemas": 80,
  "parameters": 410,
  "contactEmail": "oss@maif.fr",
  "difficultyScore": 244.5,
  "difficulty": "Hard"
}