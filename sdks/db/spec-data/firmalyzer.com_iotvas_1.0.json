{
  "providerName": "firmalyzer.com",
  "openApiRaw": "https://iotvas-api.firmalyzer.com/api/v1/openapi.json",
  "securitySchemes": {
    "api-key-header": {
      "in": "header",
      "name": "x-api-key",
      "type": "apiKey"
    }
  },
  "homepage": "firmalyzer.com",
  "serviceName": "iotvas",
  "apiVersion": "1.0",
  "methods": [
    {
      "url": "/device/detect",
      "method": "detectDevice",
      "httpMethod": "post",
      "tag": "device",
      "typeScriptTag": "device",
      "description": "Detect iot device by service banners and mac address",
      "parameters": [
        {
          "name": "ftp_banner",
          "schema": "string",
          "description": ""
        },
        {
          "name": "hostname",
          "schema": "string",
          "description": ""
        },
        {
          "name": "http_response",
          "schema": "string",
          "description": ""
        },
        {
          "name": "https_response",
          "schema": "string",
          "description": ""
        },
        {
          "name": "nic_mac",
          "schema": "string",
          "description": ""
        },
        {
          "name": "snmp_sysdescr",
          "schema": "string",
          "description": ""
        },
        {
          "name": "snmp_sysoid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "telnet_banner",
          "schema": "string",
          "description": ""
        },
        {
          "name": "upnp_response",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/firmware/{firmware_hash}/accounts",
      "method": "getAccounts",
      "httpMethod": "get",
      "tag": "firmware",
      "typeScriptTag": "firmware",
      "description": "Get default accounts and password hashes of a firmware",
      "parameters": [
        {
          "name": "firmwareHash",
          "schema": "string",
          "required": true,
          "description": "SHA2 hash of device firmware"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/firmware/{firmware_hash}/config-issues",
      "method": "getConfigIssues",
      "httpMethod": "get",
      "tag": "firmware",
      "typeScriptTag": "firmware",
      "description": "Get default OS configuration issues of a device firmware",
      "parameters": [
        {
          "name": "firmwareHash",
          "schema": "string",
          "required": true,
          "description": "SHA2 hash of device firmware"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/firmware/{firmware_hash}/expired-certs",
      "method": "getExpiredCerts",
      "httpMethod": "get",
      "tag": "firmware",
      "typeScriptTag": "firmware",
      "description": "Get expired digital certificates embedded in a device firmware",
      "parameters": [
        {
          "name": "firmwareHash",
          "schema": "string",
          "required": true,
          "description": "SHA2 hash of device firmware"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/firmware/{firmware_hash}/private-keys",
      "method": "getPrivateKeys",
      "httpMethod": "get",
      "tag": "firmware",
      "typeScriptTag": "firmware",
      "description": "Get private crypto keys embedded in a device firmware",
      "parameters": [
        {
          "name": "firmwareHash",
          "schema": "string",
          "required": true,
          "description": "SHA2 hash of device firmware"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/firmware/{firmware_hash}/risk",
      "method": "getRisk",
      "httpMethod": "get",
      "tag": "firmware",
      "typeScriptTag": "firmware",
      "description": "Get iot device firmware risk analysis",
      "parameters": [
        {
          "name": "firmwareHash",
          "schema": "string",
          "required": true,
          "description": "SHA2 hash of device firmware"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/firmware/{firmware_hash}/weak-certs",
      "method": "getWeakCerts",
      "httpMethod": "get",
      "tag": "firmware",
      "typeScriptTag": "firmware",
      "description": "Get certificates with weak fingerprinting algorithms that are mebedded in a device firmware",
      "parameters": [
        {
          "name": "firmwareHash",
          "schema": "string",
          "required": true,
          "description": "SHA2 hash of device firmware"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/firmware/{firmware_hash}/weak-keys",
      "method": "getWeakKeys",
      "httpMethod": "get",
      "tag": "firmware",
      "typeScriptTag": "firmware",
      "description": "Get weak crypto keys with short length",
      "parameters": [
        {
          "name": "firmwareHash",
          "schema": "string",
          "required": true,
          "description": "SHA2 hash of device firmware"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "/api/v1",
  "apiDescription": "IOTVAS API enables you to discover IoT/Connected devices in the network and provides \n    detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.\n    Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.\n    IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,\n    we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner \n    to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other \n    solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).",
  "apiTitle": "IoTVAS API",
  "endpoints": 8,
  "sdkMethods": 8,
  "schemas": 15,
  "parameters": 16,
  "difficultyScore": 19.5,
  "difficulty": "Easy"
}