{
  "providerName": "digitalocean.com",
  "openApiRaw": "https://raw.githubusercontent.com/digitalocean/openapi/main/specification/DigitalOcean-public.v2.yaml",
  "securitySchemes": {
    "bearer_auth": {
      "description": "## OAuth Authentication\n\nIn order to interact with the DigitalOcean API, you or your application must\nauthenticate.\n\nThe DigitalOcean API handles this through OAuth, an open standard for\nauthorization. OAuth allows you to delegate access to your account in full\nor in read-only mode.\n\nYou can generate an OAuth token by visiting the [Apps & API](https://cloud.digitalocean.com/account/api/tokens)\nsection of the DigitalOcean control panel for your account.\n\nAn OAuth token functions as a complete authentication request. In effect, it\nacts as a substitute for a username and password pair.\n\nBecause of this, it is absolutely **essential** that you keep your OAuth\ntokens secure. In fact, upon generation, the web interface will only display\neach token a single time in order to prevent the token from being compromised.\n\nDigitalOcean access tokens begin with an identifiable prefix in order to\ndistinguish them from other similar tokens.\n\n- `dop_v1_` for personal access tokens generated in the control panel\n- `doo_v1_` for tokens generated by applications using [the OAuth flow](https://docs.digitalocean.com/reference/api/oauth-api/)\n- `dor_v1_` for OAuth refresh tokens\n\n### How to Authenticate with OAuth\n\nIn order to make an authenticated request, include a bearer-type\n`Authorization` header containing your OAuth token. All requests must be\nmade over HTTPS.\n\n### Authenticate with a Bearer Authorization Header\n\n```\ncurl -X $HTTP_METHOD -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \"https://api.digitalocean.com/v2/$OBJECT\"\n```\n",
      "scheme": "bearer",
      "type": "http"
    }
  },
  "homepage": "digitalocean.com",
  "apiVersion": "2.0",
  "methods": [
    {
      "url": "/v2/1-clicks",
      "method": "oneClicksList",
      "httpMethod": "get",
      "tag": "1-Click Applications",
      "typeScriptTag": "1ClickApplications",
      "description": "List 1-Click Applications",
      "parameters": [
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "Restrict results to a certain type of 1-Click."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/1-clicks/kubernetes",
      "method": "oneClicksInstallKubernetes",
      "httpMethod": "post",
      "tag": "1-Click Applications",
      "typeScriptTag": "1ClickApplications",
      "description": "Install Kubernetes 1-Click Applications",
      "parameters": [
        {
          "name": "addon_slugs",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "cluster_uuid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/account",
      "method": "accountGet",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Get User Information",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/account/keys",
      "method": "sshKeysList",
      "httpMethod": "get",
      "tag": "SSH Keys",
      "typeScriptTag": "sshKeys",
      "description": "List All SSH Keys",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/account/keys",
      "method": "sshKeysCreate",
      "httpMethod": "post",
      "tag": "SSH Keys",
      "typeScriptTag": "sshKeys",
      "description": "Create a New SSH Key",
      "parameters": [
        {
          "name": "fingerprint",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "public_key",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/account/keys/{ssh_key_identifier}",
      "method": "sshKeysDelete",
      "httpMethod": "delete",
      "tag": "SSH Keys",
      "typeScriptTag": "sshKeys",
      "description": "Delete an SSH Key",
      "parameters": [
        {
          "name": "sshKeyIdentifier",
          "schema": "undefined",
          "required": true,
          "description": "Either the ID or the fingerprint of an existing SSH key."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/account/keys/{ssh_key_identifier}",
      "method": "sshKeysGet",
      "httpMethod": "get",
      "tag": "SSH Keys",
      "typeScriptTag": "sshKeys",
      "description": "Retrieve an Existing SSH Key",
      "parameters": [
        {
          "name": "sshKeyIdentifier",
          "schema": "undefined",
          "required": true,
          "description": "Either the ID or the fingerprint of an existing SSH key."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/account/keys/{ssh_key_identifier}",
      "method": "sshKeysUpdate",
      "httpMethod": "put",
      "tag": "SSH Keys",
      "typeScriptTag": "sshKeys",
      "description": "Update an SSH Key's Name",
      "parameters": [
        {
          "name": "sshKeyIdentifier",
          "schema": "undefined",
          "required": true,
          "description": "Either the ID or the fingerprint of an existing SSH key."
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/actions",
      "method": "actionsList",
      "httpMethod": "get",
      "tag": "Actions",
      "typeScriptTag": "actions",
      "description": "List All Actions",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/actions/{action_id}",
      "method": "actionsGet",
      "httpMethod": "get",
      "tag": "Actions",
      "typeScriptTag": "actions",
      "description": "Retrieve an Existing Action",
      "parameters": [
        {
          "name": "actionId",
          "schema": "integer",
          "required": true,
          "description": "A unique numeric ID that can be used to identify and reference an action."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps",
      "method": "appsList",
      "httpMethod": "get",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "List All Apps",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "withProjects",
          "schema": "boolean",
          "description": "Whether the project_id of listed apps should be fetched and included."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps",
      "method": "appsCreate",
      "httpMethod": "post",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Create a New App",
      "parameters": [
        {
          "name": "accept",
          "schema": "string",
          "description": "The content-type that should be used by the response. By default, the response will be `application/json`. `application/yaml` is also supported."
        },
        {
          "name": "contentType",
          "schema": "string",
          "description": "The content-type used for the request. By default, the requests are assumed to use `application/json`. `application/yaml` is also supported."
        },
        {
          "name": "project_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "spec",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/metrics/bandwidth_daily",
      "method": "appsListMetricsBandwidthDaily",
      "httpMethod": "post",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Retrieve Multiple Apps' Daily Bandwidth Metrics",
      "parameters": [
        {
          "name": "app_ids",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "date",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/propose",
      "method": "appsValidateAppSpec",
      "httpMethod": "post",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Propose an App Spec",
      "parameters": [
        {
          "name": "app_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "spec",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/regions",
      "method": "appsListRegions",
      "httpMethod": "get",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "List App Regions",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/tiers",
      "method": "appsListTiers",
      "httpMethod": "get",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "List App Tiers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/tiers/instance_sizes",
      "method": "appsListInstanceSizes",
      "httpMethod": "get",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "List Instance Sizes",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/tiers/instance_sizes/{slug}",
      "method": "appsGetInstanceSize",
      "httpMethod": "get",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Retrieve an Instance Size",
      "parameters": [
        {
          "name": "slug",
          "schema": "string",
          "required": true,
          "description": "The slug of the instance size"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/tiers/{slug}",
      "method": "appsGetTier",
      "httpMethod": "get",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Retrieve an App Tier",
      "parameters": [
        {
          "name": "slug",
          "schema": "string",
          "required": true,
          "description": "The slug of the tier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/{app_id}/alerts",
      "method": "appsListAlerts",
      "httpMethod": "get",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "List all app alerts",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/{app_id}/alerts/{alert_id}/destinations",
      "method": "appsAssignAlertDestinations",
      "httpMethod": "post",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Update destinations for alerts",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app ID"
        },
        {
          "name": "alertId",
          "schema": "string",
          "required": true,
          "description": "The alert ID"
        },
        {
          "name": "emails",
          "schema": "array",
          "description": ""
        },
        {
          "name": "slack_webhooks",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/{app_id}/components/{component_name}/logs",
      "method": "appsGetLogsActiveDeployment",
      "httpMethod": "get",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Retrieve Active Deployment Logs",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app ID"
        },
        {
          "name": "componentName",
          "schema": "string",
          "required": true,
          "description": "An optional component name. If set, logs will be limited to this component only."
        },
        {
          "name": "follow",
          "schema": "boolean",
          "description": "Whether the logs should follow live updates."
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "The type of logs to retrieve\n- BUILD: Build-time logs\n- DEPLOY: Deploy-time logs\n- RUN: Live run-time logs"
        },
        {
          "name": "podConnectionTimeout",
          "schema": "string",
          "description": "An optional time duration to wait if the underlying component instance is not immediately available. Default: `3m`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/{app_id}/deployments",
      "method": "appsListDeployments",
      "httpMethod": "get",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "List App Deployments",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app ID"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/{app_id}/deployments",
      "method": "appsCreateDeployment",
      "httpMethod": "post",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Create an App Deployment",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app ID"
        },
        {
          "name": "force_build",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/{app_id}/deployments/{deployment_id}",
      "method": "appsGetDeployment",
      "httpMethod": "get",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Retrieve an App Deployment",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app ID"
        },
        {
          "name": "deploymentId",
          "schema": "string",
          "required": true,
          "description": "The deployment ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/{app_id}/deployments/{deployment_id}/cancel",
      "method": "appsCancelDeployment",
      "httpMethod": "post",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Cancel a Deployment",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app ID"
        },
        {
          "name": "deploymentId",
          "schema": "string",
          "required": true,
          "description": "The deployment ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/{app_id}/deployments/{deployment_id}/components/{component_name}/logs",
      "method": "appsGetLogs",
      "httpMethod": "get",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Retrieve Deployment Logs",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app ID"
        },
        {
          "name": "deploymentId",
          "schema": "string",
          "required": true,
          "description": "The deployment ID"
        },
        {
          "name": "componentName",
          "schema": "string",
          "required": true,
          "description": "An optional component name. If set, logs will be limited to this component only."
        },
        {
          "name": "follow",
          "schema": "boolean",
          "description": "Whether the logs should follow live updates."
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "The type of logs to retrieve\n- BUILD: Build-time logs\n- DEPLOY: Deploy-time logs\n- RUN: Live run-time logs"
        },
        {
          "name": "podConnectionTimeout",
          "schema": "string",
          "description": "An optional time duration to wait if the underlying component instance is not immediately available. Default: `3m`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/{app_id}/deployments/{deployment_id}/logs",
      "method": "appsGetLogsAggregate",
      "httpMethod": "get",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Retrieve Aggregate Deployment Logs",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app ID"
        },
        {
          "name": "deploymentId",
          "schema": "string",
          "required": true,
          "description": "The deployment ID"
        },
        {
          "name": "follow",
          "schema": "boolean",
          "description": "Whether the logs should follow live updates."
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "The type of logs to retrieve\n- BUILD: Build-time logs\n- DEPLOY: Deploy-time logs\n- RUN: Live run-time logs"
        },
        {
          "name": "podConnectionTimeout",
          "schema": "string",
          "description": "An optional time duration to wait if the underlying component instance is not immediately available. Default: `3m`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/{app_id}/logs",
      "method": "appsGetLogsActiveDeploymentAggregate",
      "httpMethod": "get",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Retrieve Active Deployment Aggregate Logs",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app ID"
        },
        {
          "name": "follow",
          "schema": "boolean",
          "description": "Whether the logs should follow live updates."
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "The type of logs to retrieve\n- BUILD: Build-time logs\n- DEPLOY: Deploy-time logs\n- RUN: Live run-time logs"
        },
        {
          "name": "podConnectionTimeout",
          "schema": "string",
          "description": "An optional time duration to wait if the underlying component instance is not immediately available. Default: `3m`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/{app_id}/metrics/bandwidth_daily",
      "method": "appsGetMetricsBandwidthDaily",
      "httpMethod": "get",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Retrieve App Daily Bandwidth Metrics",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app ID"
        },
        {
          "name": "date",
          "schema": "string",
          "description": "Optional day to query. Only the date component of the timestamp will be considered. Default: yesterday."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/{app_id}/rollback",
      "method": "appsCreateRollback",
      "httpMethod": "post",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Rollback App",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app ID"
        },
        {
          "name": "deployment_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "skip_pin",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/{app_id}/rollback/commit",
      "method": "appsCommitRollback",
      "httpMethod": "post",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Commit App Rollback",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app ID"
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/{app_id}/rollback/revert",
      "method": "appsRevertRollback",
      "httpMethod": "post",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Revert App Rollback",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/{app_id}/rollback/validate",
      "method": "appsValidateRollback",
      "httpMethod": "post",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Validate App Rollback",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "The app ID"
        },
        {
          "name": "deployment_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "skip_pin",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/{id}",
      "method": "appsDelete",
      "httpMethod": "delete",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Delete an App",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the app"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/{id}",
      "method": "appsGet",
      "httpMethod": "get",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Retrieve an Existing App",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the app"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "The name of the app to retrieve."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/apps/{id}",
      "method": "appsUpdate",
      "httpMethod": "put",
      "tag": "Apps",
      "typeScriptTag": "apps",
      "description": "Update an App",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the app"
        },
        {
          "name": "spec",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/cdn/endpoints",
      "method": "cdnListEndpoints",
      "httpMethod": "get",
      "tag": "CDN Endpoints",
      "typeScriptTag": "cdnEndpoints",
      "description": "List All CDN Endpoints",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/cdn/endpoints",
      "method": "cdnCreateEndpoint",
      "httpMethod": "post",
      "tag": "CDN Endpoints",
      "typeScriptTag": "cdnEndpoints",
      "description": "Create a New CDN Endpoint",
      "parameters": [
        {
          "name": "certificate_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "created_at",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "custom_domain",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "endpoint",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "origin",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ttl",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/cdn/endpoints/{cdn_id}",
      "method": "cdnDeleteEndpoint",
      "httpMethod": "delete",
      "tag": "CDN Endpoints",
      "typeScriptTag": "cdnEndpoints",
      "description": "Delete a CDN Endpoint",
      "parameters": [
        {
          "name": "cdnId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a CDN endpoint."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/cdn/endpoints/{cdn_id}",
      "method": "cdnGetEndpoint",
      "httpMethod": "get",
      "tag": "CDN Endpoints",
      "typeScriptTag": "cdnEndpoints",
      "description": "Retrieve an Existing CDN Endpoint",
      "parameters": [
        {
          "name": "cdnId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a CDN endpoint."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/cdn/endpoints/{cdn_id}",
      "method": "cdnUpdateEndpoints",
      "httpMethod": "put",
      "tag": "CDN Endpoints",
      "typeScriptTag": "cdnEndpoints",
      "description": "Update a CDN Endpoint",
      "parameters": [
        {
          "name": "cdnId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a CDN endpoint."
        },
        {
          "name": "certificate_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "custom_domain",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ttl",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/cdn/endpoints/{cdn_id}/cache",
      "method": "cdnPurgeCache",
      "httpMethod": "delete",
      "tag": "CDN Endpoints",
      "typeScriptTag": "cdnEndpoints",
      "description": "Purge the Cache for an Existing CDN Endpoint",
      "parameters": [
        {
          "name": "cdnId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a CDN endpoint."
        },
        {
          "name": "files",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/certificates",
      "method": "certificatesList",
      "httpMethod": "get",
      "tag": "Certificates",
      "typeScriptTag": "certificates",
      "description": "List All Certificates",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/certificates",
      "method": "certificatesCreate",
      "httpMethod": "post",
      "tag": "Certificates",
      "typeScriptTag": "certificates",
      "description": "Create a New Certificate",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/certificates/{certificate_id}",
      "method": "certificatesDelete",
      "httpMethod": "delete",
      "tag": "Certificates",
      "typeScriptTag": "certificates",
      "description": "Delete a Certificate",
      "parameters": [
        {
          "name": "certificateId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a certificate."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/certificates/{certificate_id}",
      "method": "certificatesGet",
      "httpMethod": "get",
      "tag": "Certificates",
      "typeScriptTag": "certificates",
      "description": "Retrieve an Existing Certificate",
      "parameters": [
        {
          "name": "certificateId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a certificate."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/customers/my/balance",
      "method": "balanceGet",
      "httpMethod": "get",
      "tag": "Billing",
      "typeScriptTag": "billing",
      "description": "Get Customer Balance",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/customers/my/billing_history",
      "method": "billingHistoryList",
      "httpMethod": "get",
      "tag": "Billing",
      "typeScriptTag": "billing",
      "description": "List Billing History",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/customers/my/invoices",
      "method": "invoicesList",
      "httpMethod": "get",
      "tag": "Billing",
      "typeScriptTag": "billing",
      "description": "List All Invoices",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/customers/my/invoices/{invoice_uuid}",
      "method": "invoicesGetByUuid",
      "httpMethod": "get",
      "tag": "Billing",
      "typeScriptTag": "billing",
      "description": "Retrieve an Invoice by UUID",
      "parameters": [
        {
          "name": "invoiceUuid",
          "schema": "string",
          "required": true,
          "description": "UUID of the invoice"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/customers/my/invoices/{invoice_uuid}/csv",
      "method": "invoicesGetCsvByUuid",
      "httpMethod": "get",
      "tag": "Billing",
      "typeScriptTag": "billing",
      "description": "Retrieve an Invoice CSV by UUID",
      "parameters": [
        {
          "name": "invoiceUuid",
          "schema": "string",
          "required": true,
          "description": "UUID of the invoice"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/customers/my/invoices/{invoice_uuid}/pdf",
      "method": "invoicesGetPdfByUuid",
      "httpMethod": "get",
      "tag": "Billing",
      "typeScriptTag": "billing",
      "description": "Retrieve an Invoice PDF by UUID",
      "parameters": [
        {
          "name": "invoiceUuid",
          "schema": "string",
          "required": true,
          "description": "UUID of the invoice"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/customers/my/invoices/{invoice_uuid}/summary",
      "method": "invoicesGetSummaryByUuid",
      "httpMethod": "get",
      "tag": "Billing",
      "typeScriptTag": "billing",
      "description": "Retrieve an Invoice Summary by UUID",
      "parameters": [
        {
          "name": "invoiceUuid",
          "schema": "string",
          "required": true,
          "description": "UUID of the invoice"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases",
      "method": "databasesListClusters",
      "httpMethod": "get",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "List All Database Clusters",
      "parameters": [
        {
          "name": "tagName",
          "schema": "string",
          "required": false,
          "description": "Limits the results to database clusters with a specific tag."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases",
      "method": "databasesCreateCluster",
      "httpMethod": "post",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Create a New Database Cluster",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/options",
      "method": "databasesListOptions",
      "httpMethod": "get",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "List Database Options",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}",
      "method": "databasesDestroyCluster",
      "httpMethod": "delete",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Destroy a Database Cluster",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}",
      "method": "databasesGetCluster",
      "httpMethod": "get",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Retrieve an Existing Database Cluster",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/backups",
      "method": "databasesListBackups",
      "httpMethod": "get",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "List Backups for a Database Cluster",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/ca",
      "method": "databasesGetCa",
      "httpMethod": "get",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Retrieve the Public Certificate",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/config",
      "method": "databasesGetConfig",
      "httpMethod": "get",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Retrieve an Existing Database Cluster Configuration",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/config",
      "method": "databasesPatchConfig",
      "httpMethod": "patch",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Update the Database Configuration for an Existing Database",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "config",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/dbs",
      "method": "databasesList",
      "httpMethod": "get",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "List All Databases",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/dbs",
      "method": "databasesAdd",
      "httpMethod": "post",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Add a New Database",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/dbs/{database_name}",
      "method": "databasesDelete",
      "httpMethod": "delete",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Delete a Database",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "databaseName",
          "schema": "string",
          "required": true,
          "description": "The name of the database."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/dbs/{database_name}",
      "method": "databasesGet",
      "httpMethod": "get",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Retrieve an Existing Database",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "databaseName",
          "schema": "string",
          "required": true,
          "description": "The name of the database."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/eviction_policy",
      "method": "databasesGetEvictionPolicy",
      "httpMethod": "get",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Retrieve the Eviction Policy for a Redis Cluster",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/eviction_policy",
      "method": "databasesUpdateEvictionPolicy",
      "httpMethod": "put",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Configure the Eviction Policy for a Redis Cluster",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "eviction_policy",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/firewall",
      "method": "databasesListFirewallRules",
      "httpMethod": "get",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "List Firewall Rules (Trusted Sources) for a Database Cluster",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/firewall",
      "method": "databasesUpdateFirewallRules",
      "httpMethod": "put",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Update Firewall Rules (Trusted Sources) for a Database",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "rules",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/maintenance",
      "method": "databasesUpdateMaintenanceWindow",
      "httpMethod": "put",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Configure a Database Cluster's Maintenance Window",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "day",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "hour",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "pending",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/migrate",
      "method": "databasesUpdateRegion",
      "httpMethod": "put",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Migrate a Database Cluster to a New Region",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "region",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/online-migration",
      "method": "databasesGetMigrationStatus",
      "httpMethod": "get",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Retrieve the Status of an Online Migration",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/online-migration",
      "method": "databasesUpdateOnlineMigration",
      "httpMethod": "put",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Start an Online Migration",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "disable_ssl",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "source",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/online-migration/{migration_id}",
      "method": "databasesDeleteOnlineMigration",
      "httpMethod": "delete",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Stop an Online Migration",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "migrationId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier assigned to the online migration."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/pools",
      "method": "databasesListConnectionPools",
      "httpMethod": "get",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "List Connection Pools (PostgreSQL)",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/pools",
      "method": "databasesAddConnectionPool",
      "httpMethod": "post",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Add a New Connection Pool (PostgreSQL)",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "connection",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "db",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "mode",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "private_connection",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "size",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "user",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/pools/{pool_name}",
      "method": "databasesDeleteConnectionPool",
      "httpMethod": "delete",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Delete a Connection Pool (PostgreSQL)",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "poolName",
          "schema": "string",
          "required": true,
          "description": "The name used to identify the connection pool."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/pools/{pool_name}",
      "method": "databasesGetConnectionPool",
      "httpMethod": "get",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Retrieve Existing Connection Pool (PostgreSQL)",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "poolName",
          "schema": "string",
          "required": true,
          "description": "The name used to identify the connection pool."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/pools/{pool_name}",
      "method": "databasesUpdateConnectionPool",
      "httpMethod": "put",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Update Connection Pools (PostgreSQL)",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "poolName",
          "schema": "string",
          "required": true,
          "description": "The name used to identify the connection pool."
        },
        {
          "name": "db",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "mode",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "size",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "user",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/replicas",
      "method": "databasesListReplicas",
      "httpMethod": "get",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "List All Read-only Replicas",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/replicas",
      "method": "databasesCreateReplica",
      "httpMethod": "post",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Create a Read-only Replica",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/replicas/{replica_name}",
      "method": "databasesDestroyReplica",
      "httpMethod": "delete",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Destroy a Read-only Replica",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "replicaName",
          "schema": "string",
          "required": true,
          "description": "The name of the database replica."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/replicas/{replica_name}",
      "method": "databasesGetReplica",
      "httpMethod": "get",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Retrieve an Existing Read-only Replica",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "replicaName",
          "schema": "string",
          "required": true,
          "description": "The name of the database replica."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/replicas/{replica_name}/promote",
      "method": "databasesPromoteReplica",
      "httpMethod": "put",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Promote a Read-only Replica to become a Primary Cluster",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "replicaName",
          "schema": "string",
          "required": true,
          "description": "The name of the database replica."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/resize",
      "method": "databasesUpdateClusterSize",
      "httpMethod": "put",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Resize a Database Cluster",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "num_nodes",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "size",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/sql_mode",
      "method": "databasesGetSqlMode",
      "httpMethod": "get",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Retrieve the SQL Modes for a MySQL Cluster",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/sql_mode",
      "method": "databasesUpdateSqlMode",
      "httpMethod": "put",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Update SQL Mode for a Cluster",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "sql_mode",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/upgrade",
      "method": "databasesUpdateMajorVersion",
      "httpMethod": "put",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Upgrade Major Version for a Database",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "version",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/users",
      "method": "databasesListUsers",
      "httpMethod": "get",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "List all Database Users",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/users",
      "method": "databasesAddUser",
      "httpMethod": "post",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Add a Database User",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "mysql_settings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "role",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/users/{username}",
      "method": "databasesDeleteUser",
      "httpMethod": "delete",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Remove a Database User",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "The name of the database user."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/users/{username}",
      "method": "databasesGetUser",
      "httpMethod": "get",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Retrieve an Existing Database User",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "The name of the database user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/databases/{database_cluster_uuid}/users/{username}/reset_auth",
      "method": "databasesResetAuth",
      "httpMethod": "post",
      "tag": "Databases",
      "typeScriptTag": "databases",
      "description": "Reset a Database User's Password or Authentication Method",
      "parameters": [
        {
          "name": "databaseClusterUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a database cluster."
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "The name of the database user."
        },
        {
          "name": "mysql_settings",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/domains",
      "method": "domainsList",
      "httpMethod": "get",
      "tag": "Domains",
      "typeScriptTag": "domains",
      "description": "List All Domains",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/domains",
      "method": "domainsCreate",
      "httpMethod": "post",
      "tag": "Domains",
      "typeScriptTag": "domains",
      "description": "Create a New Domain",
      "parameters": [
        {
          "name": "ip_address",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ttl",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "zone_file",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/domains/{domain_name}",
      "method": "domainsDelete",
      "httpMethod": "delete",
      "tag": "Domains",
      "typeScriptTag": "domains",
      "description": "Delete a Domain",
      "parameters": [
        {
          "name": "domainName",
          "schema": "string",
          "required": true,
          "description": "The name of the domain itself."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/domains/{domain_name}",
      "method": "domainsGet",
      "httpMethod": "get",
      "tag": "Domains",
      "typeScriptTag": "domains",
      "description": "Retrieve an Existing Domain",
      "parameters": [
        {
          "name": "domainName",
          "schema": "string",
          "required": true,
          "description": "The name of the domain itself."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/domains/{domain_name}/records",
      "method": "domainsListRecords",
      "httpMethod": "get",
      "tag": "Domain Records",
      "typeScriptTag": "domainRecords",
      "description": "List All Domain Records",
      "parameters": [
        {
          "name": "domainName",
          "schema": "string",
          "required": true,
          "description": "The name of the domain itself."
        },
        {
          "name": "name",
          "schema": "string",
          "description": "A fully qualified record name. For example, to only include records matching sub.example.com, send a GET request to `/v2/domains/$DOMAIN_NAME/records?name=sub.example.com`."
        },
        {
          "name": "type",
          "schema": "string",
          "description": "The type of the DNS record. For example: A, CNAME, TXT, ..."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/domains/{domain_name}/records",
      "method": "domainsCreateRecord",
      "httpMethod": "post",
      "tag": "Domain Records",
      "typeScriptTag": "domainRecords",
      "description": "Create a New Domain Record",
      "parameters": [
        {
          "name": "domainName",
          "schema": "string",
          "required": true,
          "description": "The name of the domain itself."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/domains/{domain_name}/records/{domain_record_id}",
      "method": "domainsDeleteRecord",
      "httpMethod": "delete",
      "tag": "Domain Records",
      "typeScriptTag": "domainRecords",
      "description": "Delete a Domain Record",
      "parameters": [
        {
          "name": "domainName",
          "schema": "string",
          "required": true,
          "description": "The name of the domain itself."
        },
        {
          "name": "domainRecordId",
          "schema": "integer",
          "required": true,
          "description": "The unique identifier of the domain record."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/domains/{domain_name}/records/{domain_record_id}",
      "method": "domainsGetRecord",
      "httpMethod": "get",
      "tag": "Domain Records",
      "typeScriptTag": "domainRecords",
      "description": "Retrieve an Existing Domain Record",
      "parameters": [
        {
          "name": "domainName",
          "schema": "string",
          "required": true,
          "description": "The name of the domain itself."
        },
        {
          "name": "domainRecordId",
          "schema": "integer",
          "required": true,
          "description": "The unique identifier of the domain record."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/domains/{domain_name}/records/{domain_record_id}",
      "method": "domainsPatchRecord",
      "httpMethod": "patch",
      "tag": "Domain Records",
      "typeScriptTag": "domainRecords",
      "description": "Update a Domain Record",
      "parameters": [
        {
          "name": "domainName",
          "schema": "string",
          "required": true,
          "description": "The name of the domain itself."
        },
        {
          "name": "domainRecordId",
          "schema": "integer",
          "required": true,
          "description": "The unique identifier of the domain record."
        },
        {
          "name": "data",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "flags",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "port",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "priority",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "tag",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ttl",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "weight",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/domains/{domain_name}/records/{domain_record_id}",
      "method": "domainsUpdateRecord",
      "httpMethod": "put",
      "tag": "Domain Records",
      "typeScriptTag": "domainRecords",
      "description": "Update a Domain Record",
      "parameters": [
        {
          "name": "domainName",
          "schema": "string",
          "required": true,
          "description": "The name of the domain itself."
        },
        {
          "name": "domainRecordId",
          "schema": "integer",
          "required": true,
          "description": "The unique identifier of the domain record."
        },
        {
          "name": "data",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "flags",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "port",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "priority",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "tag",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ttl",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "weight",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets",
      "method": "dropletsDestroyByTag",
      "httpMethod": "delete",
      "tag": "Droplets",
      "typeScriptTag": "droplets",
      "description": "Deleting Droplets by Tag",
      "parameters": [
        {
          "name": "tagName",
          "schema": "string",
          "required": true,
          "description": "Specifies Droplets to be deleted by tag."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets",
      "method": "dropletsList",
      "httpMethod": "get",
      "tag": "Droplets",
      "typeScriptTag": "droplets",
      "description": "List All Droplets",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        },
        {
          "name": "tagName",
          "schema": "string",
          "required": false,
          "description": "Used to filter Droplets by a specific tag. Can not be combined with `name`."
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "Used to filter list response by Droplet name returning only exact matches. It is case-insensitive and can not be combined with `tag_name`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets",
      "method": "dropletsCreate",
      "httpMethod": "post",
      "tag": "Droplets",
      "typeScriptTag": "droplets",
      "description": "Create a New Droplet",
      "parameters": [],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets/actions",
      "method": "dropletActionsPostByTag",
      "httpMethod": "post",
      "tag": "Droplet Actions",
      "typeScriptTag": "dropletActions",
      "description": "Acting on Tagged Droplets",
      "parameters": [
        {
          "name": "tagName",
          "schema": "string",
          "required": false,
          "description": "Used to filter Droplets by a specific tag. Can not be combined with `name`."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets/{droplet_id}",
      "method": "dropletsDestroy",
      "httpMethod": "delete",
      "tag": "Droplets",
      "typeScriptTag": "droplets",
      "description": "Delete an Existing Droplet",
      "parameters": [
        {
          "name": "dropletId",
          "schema": "integer",
          "required": true,
          "description": "A unique identifier for a Droplet instance."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets/{droplet_id}",
      "method": "dropletsGet",
      "httpMethod": "get",
      "tag": "Droplets",
      "typeScriptTag": "droplets",
      "description": "Retrieve an Existing Droplet",
      "parameters": [
        {
          "name": "dropletId",
          "schema": "integer",
          "required": true,
          "description": "A unique identifier for a Droplet instance."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets/{droplet_id}/actions",
      "method": "dropletActionsList",
      "httpMethod": "get",
      "tag": "Droplet Actions",
      "typeScriptTag": "dropletActions",
      "description": "List Actions for a Droplet",
      "parameters": [
        {
          "name": "dropletId",
          "schema": "integer",
          "required": true,
          "description": "A unique identifier for a Droplet instance."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets/{droplet_id}/actions",
      "method": "dropletActionsPost",
      "httpMethod": "post",
      "tag": "Droplet Actions",
      "typeScriptTag": "dropletActions",
      "description": "Initiate a Droplet Action",
      "parameters": [
        {
          "name": "dropletId",
          "schema": "integer",
          "required": true,
          "description": "A unique identifier for a Droplet instance."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets/{droplet_id}/actions/{action_id}",
      "method": "dropletActionsGet",
      "httpMethod": "get",
      "tag": "Droplet Actions",
      "typeScriptTag": "dropletActions",
      "description": "Retrieve a Droplet Action",
      "parameters": [
        {
          "name": "dropletId",
          "schema": "integer",
          "required": true,
          "description": "A unique identifier for a Droplet instance."
        },
        {
          "name": "actionId",
          "schema": "integer",
          "required": true,
          "description": "A unique numeric ID that can be used to identify and reference an action."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets/{droplet_id}/backups",
      "method": "dropletsListBackups",
      "httpMethod": "get",
      "tag": "Droplets",
      "typeScriptTag": "droplets",
      "description": "List Backups for a Droplet",
      "parameters": [
        {
          "name": "dropletId",
          "schema": "integer",
          "required": true,
          "description": "A unique identifier for a Droplet instance."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets/{droplet_id}/destroy_with_associated_resources",
      "method": "dropletsListAssociatedResources",
      "httpMethod": "get",
      "tag": "Droplets",
      "typeScriptTag": "droplets",
      "description": "List Associated Resources for a Droplet",
      "parameters": [
        {
          "name": "dropletId",
          "schema": "integer",
          "required": true,
          "description": "A unique identifier for a Droplet instance."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets/{droplet_id}/destroy_with_associated_resources/dangerous",
      "method": "dropletsDestroyWithAssociatedResourcesDangerous",
      "httpMethod": "delete",
      "tag": "Droplets",
      "typeScriptTag": "droplets",
      "description": "Destroy a Droplet and All of its Associated Resources (Dangerous)",
      "parameters": [
        {
          "name": "dropletId",
          "schema": "integer",
          "required": true,
          "description": "A unique identifier for a Droplet instance."
        },
        {
          "name": "xDangerous",
          "schema": "boolean",
          "required": true,
          "description": "Acknowledge this action will destroy the Droplet and all associated resources and _can not_ be reversed."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets/{droplet_id}/destroy_with_associated_resources/retry",
      "method": "dropletsDestroyRetryWithAssociatedResources",
      "httpMethod": "post",
      "tag": "Droplets",
      "typeScriptTag": "droplets",
      "description": "Retry a Droplet Destroy with Associated Resources Request",
      "parameters": [
        {
          "name": "dropletId",
          "schema": "integer",
          "required": true,
          "description": "A unique identifier for a Droplet instance."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets/{droplet_id}/destroy_with_associated_resources/selective",
      "method": "dropletsDestroyWithAssociatedResourcesSelective",
      "httpMethod": "delete",
      "tag": "Droplets",
      "typeScriptTag": "droplets",
      "description": "Selectively Destroy a Droplet and its Associated Resources",
      "parameters": [
        {
          "name": "dropletId",
          "schema": "integer",
          "required": true,
          "description": "A unique identifier for a Droplet instance."
        },
        {
          "name": "floating_ips",
          "schema": "array",
          "description": ""
        },
        {
          "name": "reserved_ips",
          "schema": "array",
          "description": ""
        },
        {
          "name": "snapshots",
          "schema": "array",
          "description": ""
        },
        {
          "name": "volume_snapshots",
          "schema": "array",
          "description": ""
        },
        {
          "name": "volumes",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets/{droplet_id}/destroy_with_associated_resources/status",
      "method": "dropletsGetDestroyAssociatedResourcesStatus",
      "httpMethod": "get",
      "tag": "Droplets",
      "typeScriptTag": "droplets",
      "description": "Check Status of a Droplet Destroy with Associated Resources Request",
      "parameters": [
        {
          "name": "dropletId",
          "schema": "integer",
          "required": true,
          "description": "A unique identifier for a Droplet instance."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An objects containing information about a resources scheduled for deletion."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets/{droplet_id}/firewalls",
      "method": "dropletsListFirewalls",
      "httpMethod": "get",
      "tag": "Droplets",
      "typeScriptTag": "droplets",
      "description": "List all Firewalls Applied to a Droplet",
      "parameters": [
        {
          "name": "dropletId",
          "schema": "integer",
          "required": true,
          "description": "A unique identifier for a Droplet instance."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets/{droplet_id}/kernels",
      "method": "dropletsListKernels",
      "httpMethod": "get",
      "tag": "Droplets",
      "typeScriptTag": "droplets",
      "description": "List All Available Kernels for a Droplet",
      "parameters": [
        {
          "name": "dropletId",
          "schema": "integer",
          "required": true,
          "description": "A unique identifier for a Droplet instance."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets/{droplet_id}/neighbors",
      "method": "dropletsListNeighbors",
      "httpMethod": "get",
      "tag": "Droplets",
      "typeScriptTag": "droplets",
      "description": "List Neighbors for a Droplet",
      "parameters": [
        {
          "name": "dropletId",
          "schema": "integer",
          "required": true,
          "description": "A unique identifier for a Droplet instance."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/droplets/{droplet_id}/snapshots",
      "method": "dropletsListSnapshots",
      "httpMethod": "get",
      "tag": "Droplets",
      "typeScriptTag": "droplets",
      "description": "List Snapshots for a Droplet",
      "parameters": [
        {
          "name": "dropletId",
          "schema": "integer",
          "required": true,
          "description": "A unique identifier for a Droplet instance."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/firewalls",
      "method": "firewallsList",
      "httpMethod": "get",
      "tag": "Firewalls",
      "typeScriptTag": "firewalls",
      "description": "List All Firewalls",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/firewalls",
      "method": "firewallsCreate",
      "httpMethod": "post",
      "tag": "Firewalls",
      "typeScriptTag": "firewalls",
      "description": "Create a New Firewall",
      "parameters": [],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/firewalls/{firewall_id}",
      "method": "firewallsDelete",
      "httpMethod": "delete",
      "tag": "Firewalls",
      "typeScriptTag": "firewalls",
      "description": "Delete a Firewall",
      "parameters": [
        {
          "name": "firewallId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to identify and reference a firewall."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/firewalls/{firewall_id}",
      "method": "firewallsGet",
      "httpMethod": "get",
      "tag": "Firewalls",
      "typeScriptTag": "firewalls",
      "description": "Retrieve an Existing Firewall",
      "parameters": [
        {
          "name": "firewallId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to identify and reference a firewall."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/firewalls/{firewall_id}",
      "method": "firewallsUpdate",
      "httpMethod": "put",
      "tag": "Firewalls",
      "typeScriptTag": "firewalls",
      "description": "Update a Firewall",
      "parameters": [
        {
          "name": "firewallId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to identify and reference a firewall."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/firewalls/{firewall_id}/droplets",
      "method": "firewallsDeleteDroplets",
      "httpMethod": "delete",
      "tag": "Firewalls",
      "typeScriptTag": "firewalls",
      "description": "Remove Droplets from a Firewall",
      "parameters": [
        {
          "name": "firewallId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to identify and reference a firewall."
        },
        {
          "name": "droplet_ids",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/firewalls/{firewall_id}/droplets",
      "method": "firewallsAssignDroplets",
      "httpMethod": "post",
      "tag": "Firewalls",
      "typeScriptTag": "firewalls",
      "description": "Add Droplets to a Firewall",
      "parameters": [
        {
          "name": "firewallId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to identify and reference a firewall."
        },
        {
          "name": "droplet_ids",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/firewalls/{firewall_id}/rules",
      "method": "firewallsDeleteRules",
      "httpMethod": "delete",
      "tag": "Firewalls",
      "typeScriptTag": "firewalls",
      "description": "Remove Rules from a Firewall",
      "parameters": [
        {
          "name": "firewallId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to identify and reference a firewall."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/firewalls/{firewall_id}/rules",
      "method": "firewallsAddRules",
      "httpMethod": "post",
      "tag": "Firewalls",
      "typeScriptTag": "firewalls",
      "description": "Add Rules to a Firewall",
      "parameters": [
        {
          "name": "firewallId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to identify and reference a firewall."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/firewalls/{firewall_id}/tags",
      "method": "firewallsDeleteTags",
      "httpMethod": "delete",
      "tag": "Firewalls",
      "typeScriptTag": "firewalls",
      "description": "Remove Tags from a Firewall",
      "parameters": [
        {
          "name": "firewallId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to identify and reference a firewall."
        },
        {
          "name": "tags",
          "schema": "undefined",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/firewalls/{firewall_id}/tags",
      "method": "firewallsAddTags",
      "httpMethod": "post",
      "tag": "Firewalls",
      "typeScriptTag": "firewalls",
      "description": "Add Tags to a Firewall",
      "parameters": [
        {
          "name": "firewallId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to identify and reference a firewall."
        },
        {
          "name": "tags",
          "schema": "undefined",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/floating_ips",
      "method": "floatingIPsList",
      "httpMethod": "get",
      "tag": "Floating IPs",
      "typeScriptTag": "floatingIPs",
      "description": "List All Floating IPs",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/floating_ips",
      "method": "floatingIPsCreate",
      "httpMethod": "post",
      "tag": "Floating IPs",
      "typeScriptTag": "floatingIPs",
      "description": "Create a New Floating IP",
      "parameters": [],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/floating_ips/{floating_ip}",
      "method": "floatingIPsDelete",
      "httpMethod": "delete",
      "tag": "Floating IPs",
      "typeScriptTag": "floatingIPs",
      "description": "Delete a Floating IP",
      "parameters": [
        {
          "name": "floatingIp",
          "schema": "string",
          "required": true,
          "description": "A floating IP address."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/floating_ips/{floating_ip}",
      "method": "floatingIPsGet",
      "httpMethod": "get",
      "tag": "Floating IPs",
      "typeScriptTag": "floatingIPs",
      "description": "Retrieve an Existing Floating IP",
      "parameters": [
        {
          "name": "floatingIp",
          "schema": "string",
          "required": true,
          "description": "A floating IP address."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/floating_ips/{floating_ip}/actions",
      "method": "floatingIPsActionList",
      "httpMethod": "get",
      "tag": "Floating IP Actions",
      "typeScriptTag": "floatingIpActions",
      "description": "List All Actions for a Floating IP",
      "parameters": [
        {
          "name": "floatingIp",
          "schema": "string",
          "required": true,
          "description": "A floating IP address."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/floating_ips/{floating_ip}/actions",
      "method": "floatingIPsActionPost",
      "httpMethod": "post",
      "tag": "Floating IP Actions",
      "typeScriptTag": "floatingIpActions",
      "description": "Initiate a Floating IP Action",
      "parameters": [
        {
          "name": "floatingIp",
          "schema": "string",
          "required": true,
          "description": "A floating IP address."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/floating_ips/{floating_ip}/actions/{action_id}",
      "method": "floatingIPsActionGet",
      "httpMethod": "get",
      "tag": "Floating IP Actions",
      "typeScriptTag": "floatingIpActions",
      "description": "Retrieve an Existing Floating IP Action",
      "parameters": [
        {
          "name": "floatingIp",
          "schema": "string",
          "required": true,
          "description": "A floating IP address."
        },
        {
          "name": "actionId",
          "schema": "integer",
          "required": true,
          "description": "A unique numeric ID that can be used to identify and reference an action."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/functions/namespaces",
      "method": "functionsListNamespaces",
      "httpMethod": "get",
      "tag": "Functions",
      "typeScriptTag": "functions",
      "description": "List Namespaces",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/functions/namespaces",
      "method": "functionsCreateNamespace",
      "httpMethod": "post",
      "tag": "Functions",
      "typeScriptTag": "functions",
      "description": "Create Namespace",
      "parameters": [
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/functions/namespaces/{namespace_id}",
      "method": "functionsDeleteNamespace",
      "httpMethod": "delete",
      "tag": "Functions",
      "typeScriptTag": "functions",
      "description": "Delete Namespace",
      "parameters": [
        {
          "name": "namespaceId",
          "schema": "string",
          "required": true,
          "description": "The ID of the namespace to be managed."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/functions/namespaces/{namespace_id}",
      "method": "functionsGetNamespace",
      "httpMethod": "get",
      "tag": "Functions",
      "typeScriptTag": "functions",
      "description": "Get Namespace",
      "parameters": [
        {
          "name": "namespaceId",
          "schema": "string",
          "required": true,
          "description": "The ID of the namespace to be managed."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/functions/namespaces/{namespace_id}/triggers",
      "method": "functionsListTriggers",
      "httpMethod": "get",
      "tag": "Functions",
      "typeScriptTag": "functions",
      "description": "List Triggers",
      "parameters": [
        {
          "name": "namespaceId",
          "schema": "string",
          "required": true,
          "description": "The ID of the namespace to be managed."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/functions/namespaces/{namespace_id}/triggers",
      "method": "functionsCreateTrigger",
      "httpMethod": "post",
      "tag": "Functions",
      "typeScriptTag": "functions",
      "description": "Create Trigger",
      "parameters": [
        {
          "name": "namespaceId",
          "schema": "string",
          "required": true,
          "description": "The ID of the namespace to be managed."
        },
        {
          "name": "function",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "scheduled_details",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/functions/namespaces/{namespace_id}/triggers/{trigger_name}",
      "method": "functionsDeleteTrigger",
      "httpMethod": "delete",
      "tag": "Functions",
      "typeScriptTag": "functions",
      "description": "Delete Trigger",
      "parameters": [
        {
          "name": "namespaceId",
          "schema": "string",
          "required": true,
          "description": "The ID of the namespace to be managed."
        },
        {
          "name": "triggerName",
          "schema": "string",
          "required": true,
          "description": "The name of the trigger to be managed."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/functions/namespaces/{namespace_id}/triggers/{trigger_name}",
      "method": "functionsGetTrigger",
      "httpMethod": "get",
      "tag": "Functions",
      "typeScriptTag": "functions",
      "description": "Get Trigger",
      "parameters": [
        {
          "name": "namespaceId",
          "schema": "string",
          "required": true,
          "description": "The ID of the namespace to be managed."
        },
        {
          "name": "triggerName",
          "schema": "string",
          "required": true,
          "description": "The name of the trigger to be managed."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/functions/namespaces/{namespace_id}/triggers/{trigger_name}",
      "method": "functionsUpdateTrigger",
      "httpMethod": "put",
      "tag": "Functions",
      "typeScriptTag": "functions",
      "description": "Update Trigger",
      "parameters": [
        {
          "name": "namespaceId",
          "schema": "string",
          "required": true,
          "description": "The ID of the namespace to be managed."
        },
        {
          "name": "triggerName",
          "schema": "string",
          "required": true,
          "description": "The name of the trigger to be managed."
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "scheduled_details",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/images",
      "method": "imagesList",
      "httpMethod": "get",
      "tag": "Images",
      "typeScriptTag": "images",
      "description": "List All Images",
      "parameters": [
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "Filters results based on image type which can be either `application` or `distribution`."
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": false,
          "description": "Used to filter only user images."
        },
        {
          "name": "tagName",
          "schema": "string",
          "required": false,
          "description": "Used to filter images by a specific tag."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/images",
      "method": "imagesCreateCustom",
      "httpMethod": "post",
      "tag": "Images",
      "typeScriptTag": "images",
      "description": "Create a Custom Image",
      "parameters": [],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/images/{image_id}",
      "method": "imagesDelete",
      "httpMethod": "delete",
      "tag": "Images",
      "typeScriptTag": "images",
      "description": "Delete an Image",
      "parameters": [
        {
          "name": "imageId",
          "schema": "integer",
          "required": true,
          "description": "A unique number that can be used to identify and reference a specific image."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/images/{image_id}",
      "method": "imagesGet",
      "httpMethod": "get",
      "tag": "Images",
      "typeScriptTag": "images",
      "description": "Retrieve an Existing Image",
      "parameters": [
        {
          "name": "imageId",
          "schema": "undefined",
          "required": true,
          "description": "A unique number (id) or string (slug) used to identify and reference a\nspecific image.\n\n**Public** images can be identified by image `id` or `slug`.\n\n**Private** images *must* be identified by image `id`.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/images/{image_id}",
      "method": "imagesUpdate",
      "httpMethod": "put",
      "tag": "Images",
      "typeScriptTag": "images",
      "description": "Update an Image",
      "parameters": [
        {
          "name": "imageId",
          "schema": "integer",
          "required": true,
          "description": "A unique number that can be used to identify and reference a specific image."
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "distribution",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/images/{image_id}/actions",
      "method": "imageActionsList",
      "httpMethod": "get",
      "tag": "Image Actions",
      "typeScriptTag": "imageActions",
      "description": "List All Actions for an Image",
      "parameters": [
        {
          "name": "imageId",
          "schema": "integer",
          "required": true,
          "description": "A unique number that can be used to identify and reference a specific image."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/images/{image_id}/actions",
      "method": "imageActionsPost",
      "httpMethod": "post",
      "tag": "Image Actions",
      "typeScriptTag": "imageActions",
      "description": "Initiate an Image Action",
      "parameters": [
        {
          "name": "imageId",
          "schema": "integer",
          "required": true,
          "description": "A unique number that can be used to identify and reference a specific image."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/images/{image_id}/actions/{action_id}",
      "method": "imageActionsGet",
      "httpMethod": "get",
      "tag": "Image Actions",
      "typeScriptTag": "imageActions",
      "description": "Retrieve an Existing Action",
      "parameters": [
        {
          "name": "imageId",
          "schema": "integer",
          "required": true,
          "description": "A unique number that can be used to identify and reference a specific image."
        },
        {
          "name": "actionId",
          "schema": "integer",
          "required": true,
          "description": "A unique numeric ID that can be used to identify and reference an action."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters",
      "method": "kubernetesListClusters",
      "httpMethod": "get",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "List All Kubernetes Clusters",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters",
      "method": "kubernetesCreateCluster",
      "httpMethod": "post",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Create a New Kubernetes Cluster",
      "parameters": [
        {
          "name": "auto_upgrade",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "cluster_subnet",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "created_at",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "endpoint",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ha",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ipv4",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "maintenance_policy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "node_pools",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "registry_enabled",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "service_subnet",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "status",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "surge_upgrade",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "updated_at",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "vpc_uuid",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}",
      "method": "kubernetesDeleteCluster",
      "httpMethod": "delete",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Delete a Kubernetes Cluster",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}",
      "method": "kubernetesGetCluster",
      "httpMethod": "get",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Retrieve an Existing Kubernetes Cluster",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}",
      "method": "kubernetesUpdateCluster",
      "httpMethod": "put",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Update a Kubernetes Cluster",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        },
        {
          "name": "auto_upgrade",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "ha",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "maintenance_policy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "surge_upgrade",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}/clusterlint",
      "method": "kubernetesGetClusterLintResults",
      "httpMethod": "get",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Fetch Clusterlint Diagnostics for a Kubernetes Cluster",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        },
        {
          "name": "runId",
          "schema": "string",
          "required": false,
          "description": "Specifies the clusterlint run whose results will be retrieved."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}/clusterlint",
      "method": "kubernetesRunClusterLint",
      "httpMethod": "post",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Run Clusterlint Checks on a Kubernetes Cluster",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        },
        {
          "name": "exclude_checks",
          "schema": "array",
          "description": ""
        },
        {
          "name": "exclude_groups",
          "schema": "array",
          "description": ""
        },
        {
          "name": "include_checks",
          "schema": "array",
          "description": ""
        },
        {
          "name": "include_groups",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}/credentials",
      "method": "kubernetesGetCredentials",
      "httpMethod": "get",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Retrieve Credentials for a Kubernetes Cluster",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        },
        {
          "name": "expirySeconds",
          "schema": "integer",
          "required": false,
          "description": "The duration in seconds that the returned Kubernetes credentials will be valid. If not set or 0, the credentials will have a 7 day expiry."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}/destroy_with_associated_resources",
      "method": "kubernetesListAssociatedResources",
      "httpMethod": "get",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "List Associated Resources for Cluster Deletion",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An object containing the IDs of resources associated with a Kubernetes cluster."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}/destroy_with_associated_resources/dangerous",
      "method": "kubernetesDestroyAssociatedResourcesDangerous",
      "httpMethod": "delete",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Delete a Cluster and All of its Associated Resources (Dangerous)",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}/destroy_with_associated_resources/selective",
      "method": "kubernetesDestroyAssociatedResourcesSelective",
      "httpMethod": "delete",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Selectively Delete a Cluster and its Associated Resources",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        },
        {
          "name": "load_balancers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "volume_snapshots",
          "schema": "array",
          "description": ""
        },
        {
          "name": "volumes",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}/kubeconfig",
      "method": "kubernetesGetKubeconfig",
      "httpMethod": "get",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Retrieve the kubeconfig for a Kubernetes Cluster",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        },
        {
          "name": "expirySeconds",
          "schema": "integer",
          "required": false,
          "description": "The duration in seconds that the returned Kubernetes credentials will be valid. If not set or 0, the credentials will have a 7 day expiry."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}/node_pools",
      "method": "kubernetesListNodePools",
      "httpMethod": "get",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "List All Node Pools in a Kubernetes Clusters",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}/node_pools",
      "method": "kubernetesAddNodePool",
      "httpMethod": "post",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Add a Node Pool to a Kubernetes Cluster",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}",
      "method": "kubernetesDeleteNodePool",
      "httpMethod": "delete",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Delete a Node Pool in a Kubernetes Cluster",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        },
        {
          "name": "nodePoolId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes node pool."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}",
      "method": "kubernetesGetNodePool",
      "httpMethod": "get",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Retrieve a Node Pool for a Kubernetes Cluster",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        },
        {
          "name": "nodePoolId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes node pool."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}",
      "method": "kubernetesUpdateNodePool",
      "httpMethod": "put",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Update a Node Pool in a Kubernetes Cluster",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        },
        {
          "name": "nodePoolId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes node pool."
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}/nodes/{node_id}",
      "method": "kubernetesDeleteNode",
      "httpMethod": "delete",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Delete a Node in a Kubernetes Cluster",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        },
        {
          "name": "nodePoolId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes node pool."
        },
        {
          "name": "nodeId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a node in a Kubernetes node pool."
        },
        {
          "name": "skipDrain",
          "schema": "integer",
          "required": false,
          "description": "Specifies whether or not to drain workloads from a node before it is deleted. Setting it to `1` causes node draining to be skipped. Omitting the query parameter or setting its value to `0` carries out draining prior to deletion."
        },
        {
          "name": "replace",
          "schema": "integer",
          "required": false,
          "description": "Specifies whether or not to replace a node after it has been deleted. Setting it to `1` causes the node to be replaced by a new one after deletion. Omitting the query parameter or setting its value to `0` deletes without replacement."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}/recycle",
      "method": "kubernetesRecycleNodePool",
      "httpMethod": "post",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Recycle a Kubernetes Node Pool",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        },
        {
          "name": "nodePoolId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes node pool."
        },
        {
          "name": "nodes",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}/upgrade",
      "method": "kubernetesUpgradeCluster",
      "httpMethod": "post",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Upgrade a Kubernetes Cluster",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        },
        {
          "name": "version",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}/upgrades",
      "method": "kubernetesGetAvailableUpgrades",
      "httpMethod": "get",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Retrieve Available Upgrades for an Existing Kubernetes Cluster",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/clusters/{cluster_id}/user",
      "method": "kubernetesGetClusterUser",
      "httpMethod": "get",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Retrieve User Information for a Kubernetes Cluster",
      "parameters": [
        {
          "name": "clusterId",
          "schema": "string",
          "required": true,
          "description": "A unique ID that can be used to reference a Kubernetes cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/options",
      "method": "kubernetesListOptions",
      "httpMethod": "get",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "List Available Regions, Node Sizes, and Versions of Kubernetes",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/registry",
      "method": "kubernetesRemoveRegistry",
      "httpMethod": "delete",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Remove Container Registry from Kubernetes Clusters",
      "parameters": [
        {
          "name": "cluster_uuids",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/kubernetes/registry",
      "method": "kubernetesAddRegistry",
      "httpMethod": "post",
      "tag": "Kubernetes",
      "typeScriptTag": "kubernetes",
      "description": "Add Container Registry to Kubernetes Clusters",
      "parameters": [
        {
          "name": "cluster_uuids",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/load_balancers",
      "method": "loadBalancersList",
      "httpMethod": "get",
      "tag": "Load Balancers",
      "typeScriptTag": "loadBalancers",
      "description": "List All Load Balancers",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/load_balancers",
      "method": "loadBalancersCreate",
      "httpMethod": "post",
      "tag": "Load Balancers",
      "typeScriptTag": "loadBalancers",
      "description": "Create a New Load Balancer",
      "parameters": [],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/load_balancers/{lb_id}",
      "method": "loadBalancersDelete",
      "httpMethod": "delete",
      "tag": "Load Balancers",
      "typeScriptTag": "loadBalancers",
      "description": "Delete a Load Balancer",
      "parameters": [
        {
          "name": "lbId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a load balancer."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/load_balancers/{lb_id}",
      "method": "loadBalancersGet",
      "httpMethod": "get",
      "tag": "Load Balancers",
      "typeScriptTag": "loadBalancers",
      "description": "Retrieve an Existing Load Balancer",
      "parameters": [
        {
          "name": "lbId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a load balancer."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/load_balancers/{lb_id}",
      "method": "loadBalancersUpdate",
      "httpMethod": "put",
      "tag": "Load Balancers",
      "typeScriptTag": "loadBalancers",
      "description": "Update a Load Balancer",
      "parameters": [
        {
          "name": "lbId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a load balancer."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/load_balancers/{lb_id}/droplets",
      "method": "loadBalancersRemoveDroplets",
      "httpMethod": "delete",
      "tag": "Load Balancers",
      "typeScriptTag": "loadBalancers",
      "description": "Remove Droplets from a Load Balancer",
      "parameters": [
        {
          "name": "lbId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a load balancer."
        },
        {
          "name": "droplet_ids",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/load_balancers/{lb_id}/droplets",
      "method": "loadBalancersAddDroplets",
      "httpMethod": "post",
      "tag": "Load Balancers",
      "typeScriptTag": "loadBalancers",
      "description": "Add Droplets to a Load Balancer",
      "parameters": [
        {
          "name": "lbId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a load balancer."
        },
        {
          "name": "droplet_ids",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/load_balancers/{lb_id}/forwarding_rules",
      "method": "loadBalancersRemoveForwardingRules",
      "httpMethod": "delete",
      "tag": "Load Balancers",
      "typeScriptTag": "loadBalancers",
      "description": "Remove Forwarding Rules from a Load Balancer",
      "parameters": [
        {
          "name": "lbId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a load balancer."
        },
        {
          "name": "forwarding_rules",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/load_balancers/{lb_id}/forwarding_rules",
      "method": "loadBalancersAddForwardingRules",
      "httpMethod": "post",
      "tag": "Load Balancers",
      "typeScriptTag": "loadBalancers",
      "description": "Add Forwarding Rules to a Load Balancer",
      "parameters": [
        {
          "name": "lbId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a load balancer."
        },
        {
          "name": "forwarding_rules",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/monitoring/alerts",
      "method": "monitoringListAlertPolicy",
      "httpMethod": "get",
      "tag": "Monitoring",
      "typeScriptTag": "monitoring",
      "description": "List Alert Policies",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/monitoring/alerts",
      "method": "monitoringCreateAlertPolicy",
      "httpMethod": "post",
      "tag": "Monitoring",
      "typeScriptTag": "monitoring",
      "description": "Create Alert Policy",
      "parameters": [
        {
          "name": "alerts",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "compare",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "entities",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "value",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "window",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/monitoring/alerts/{alert_uuid}",
      "method": "monitoringDeleteAlertPolicy",
      "httpMethod": "delete",
      "tag": "Monitoring",
      "typeScriptTag": "monitoring",
      "description": "Delete an Alert Policy",
      "parameters": [
        {
          "name": "alertUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for an alert policy."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/monitoring/alerts/{alert_uuid}",
      "method": "monitoringGetAlertPolicy",
      "httpMethod": "get",
      "tag": "Monitoring",
      "typeScriptTag": "monitoring",
      "description": "Retrieve an Existing Alert Policy",
      "parameters": [
        {
          "name": "alertUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for an alert policy."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/monitoring/alerts/{alert_uuid}",
      "method": "monitoringUpdateAlertPolicy",
      "httpMethod": "put",
      "tag": "Monitoring",
      "typeScriptTag": "monitoring",
      "description": "Update an Alert Policy",
      "parameters": [
        {
          "name": "alertUuid",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for an alert policy."
        },
        {
          "name": "alerts",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "compare",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "entities",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "value",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "window",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/monitoring/metrics/droplet/bandwidth",
      "method": "monitoringGetDropletBandwidthMetrics",
      "httpMethod": "get",
      "tag": "Monitoring",
      "typeScriptTag": "monitoring",
      "description": "Get Droplet Bandwidth Metrics",
      "parameters": [
        {
          "name": "hostId",
          "schema": "string",
          "required": true,
          "description": "The droplet ID."
        },
        {
          "name": "interface",
          "schema": "string",
          "required": true,
          "description": "The network interface."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": true,
          "description": "The traffic direction."
        },
        {
          "name": "start",
          "schema": "string",
          "required": true,
          "description": "Timestamp to start metric window."
        },
        {
          "name": "end",
          "schema": "string",
          "required": true,
          "description": "Timestamp to end metric window."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/monitoring/metrics/droplet/cpu",
      "method": "monitoringGetDropletCpuMetrics",
      "httpMethod": "get",
      "tag": "Monitoring",
      "typeScriptTag": "monitoring",
      "description": "Get Droplet CPU Metrics",
      "parameters": [
        {
          "name": "hostId",
          "schema": "string",
          "required": true,
          "description": "The droplet ID."
        },
        {
          "name": "start",
          "schema": "string",
          "required": true,
          "description": "Timestamp to start metric window."
        },
        {
          "name": "end",
          "schema": "string",
          "required": true,
          "description": "Timestamp to end metric window."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/monitoring/metrics/droplet/filesystem_free",
      "method": "monitoringGetDropletFilesystemFreeMetrics",
      "httpMethod": "get",
      "tag": "Monitoring",
      "typeScriptTag": "monitoring",
      "description": "Get Droplet Filesystem Free Metrics",
      "parameters": [
        {
          "name": "hostId",
          "schema": "string",
          "required": true,
          "description": "The droplet ID."
        },
        {
          "name": "start",
          "schema": "string",
          "required": true,
          "description": "Timestamp to start metric window."
        },
        {
          "name": "end",
          "schema": "string",
          "required": true,
          "description": "Timestamp to end metric window."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/monitoring/metrics/droplet/filesystem_size",
      "method": "monitoringGetDropletFilesystemSizeMetrics",
      "httpMethod": "get",
      "tag": "Monitoring",
      "typeScriptTag": "monitoring",
      "description": "Get Droplet Filesystem Size Metrics",
      "parameters": [
        {
          "name": "hostId",
          "schema": "string",
          "required": true,
          "description": "The droplet ID."
        },
        {
          "name": "start",
          "schema": "string",
          "required": true,
          "description": "Timestamp to start metric window."
        },
        {
          "name": "end",
          "schema": "string",
          "required": true,
          "description": "Timestamp to end metric window."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/monitoring/metrics/droplet/load_1",
      "method": "monitoringGetDropletLoad1Metrics",
      "httpMethod": "get",
      "tag": "Monitoring",
      "typeScriptTag": "monitoring",
      "description": "Get Droplet Load1 Metrics",
      "parameters": [
        {
          "name": "hostId",
          "schema": "string",
          "required": true,
          "description": "The droplet ID."
        },
        {
          "name": "start",
          "schema": "string",
          "required": true,
          "description": "Timestamp to start metric window."
        },
        {
          "name": "end",
          "schema": "string",
          "required": true,
          "description": "Timestamp to end metric window."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/monitoring/metrics/droplet/load_15",
      "method": "monitoringGetDropletLoad15Metrics",
      "httpMethod": "get",
      "tag": "Monitoring",
      "typeScriptTag": "monitoring",
      "description": "Get Droplet Load15 Metrics",
      "parameters": [
        {
          "name": "hostId",
          "schema": "string",
          "required": true,
          "description": "The droplet ID."
        },
        {
          "name": "start",
          "schema": "string",
          "required": true,
          "description": "Timestamp to start metric window."
        },
        {
          "name": "end",
          "schema": "string",
          "required": true,
          "description": "Timestamp to end metric window."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/monitoring/metrics/droplet/load_5",
      "method": "monitoringGetDropletLoad5Metrics",
      "httpMethod": "get",
      "tag": "Monitoring",
      "typeScriptTag": "monitoring",
      "description": "Get Droplet Load5 Metrics",
      "parameters": [
        {
          "name": "hostId",
          "schema": "string",
          "required": true,
          "description": "The droplet ID."
        },
        {
          "name": "start",
          "schema": "string",
          "required": true,
          "description": "Timestamp to start metric window."
        },
        {
          "name": "end",
          "schema": "string",
          "required": true,
          "description": "Timestamp to end metric window."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/monitoring/metrics/droplet/memory_available",
      "method": "monitoringGetDropletMemoryAvailableMetrics",
      "httpMethod": "get",
      "tag": "Monitoring",
      "typeScriptTag": "monitoring",
      "description": "Get Droplet Available Memory Metrics",
      "parameters": [
        {
          "name": "hostId",
          "schema": "string",
          "required": true,
          "description": "The droplet ID."
        },
        {
          "name": "start",
          "schema": "string",
          "required": true,
          "description": "Timestamp to start metric window."
        },
        {
          "name": "end",
          "schema": "string",
          "required": true,
          "description": "Timestamp to end metric window."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/monitoring/metrics/droplet/memory_cached",
      "method": "monitoringGetDropletMemoryCachedMetrics",
      "httpMethod": "get",
      "tag": "Monitoring",
      "typeScriptTag": "monitoring",
      "description": "Get Droplet Cached Memory Metrics",
      "parameters": [
        {
          "name": "hostId",
          "schema": "string",
          "required": true,
          "description": "The droplet ID."
        },
        {
          "name": "start",
          "schema": "string",
          "required": true,
          "description": "Timestamp to start metric window."
        },
        {
          "name": "end",
          "schema": "string",
          "required": true,
          "description": "Timestamp to end metric window."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/monitoring/metrics/droplet/memory_free",
      "method": "monitoringGetDropletMemoryFreeMetrics",
      "httpMethod": "get",
      "tag": "Monitoring",
      "typeScriptTag": "monitoring",
      "description": "Get Droplet Free Memory Metrics",
      "parameters": [
        {
          "name": "hostId",
          "schema": "string",
          "required": true,
          "description": "The droplet ID."
        },
        {
          "name": "start",
          "schema": "string",
          "required": true,
          "description": "Timestamp to start metric window."
        },
        {
          "name": "end",
          "schema": "string",
          "required": true,
          "description": "Timestamp to end metric window."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/monitoring/metrics/droplet/memory_total",
      "method": "monitoringGetDropletMemoryTotalMetrics",
      "httpMethod": "get",
      "tag": "Monitoring",
      "typeScriptTag": "monitoring",
      "description": "Get Droplet Total Memory Metrics",
      "parameters": [
        {
          "name": "hostId",
          "schema": "string",
          "required": true,
          "description": "The droplet ID."
        },
        {
          "name": "start",
          "schema": "string",
          "required": true,
          "description": "Timestamp to start metric window."
        },
        {
          "name": "end",
          "schema": "string",
          "required": true,
          "description": "Timestamp to end metric window."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/projects",
      "method": "projectsList",
      "httpMethod": "get",
      "tag": "Projects",
      "typeScriptTag": "projects",
      "description": "List All Projects",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/projects",
      "method": "projectsCreate",
      "httpMethod": "post",
      "tag": "Projects",
      "typeScriptTag": "projects",
      "description": "Create a Project",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/projects/default",
      "method": "projectsGetDefault",
      "httpMethod": "get",
      "tag": "Projects",
      "typeScriptTag": "projects",
      "description": "Retrieve the Default Project",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/projects/default",
      "method": "projectsPatchDefault",
      "httpMethod": "patch",
      "tag": "Projects",
      "typeScriptTag": "projects",
      "description": "Patch the Default Project",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/projects/default",
      "method": "projectsUpdateDefault",
      "httpMethod": "put",
      "tag": "Projects",
      "typeScriptTag": "projects",
      "description": "Update the Default Project",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/projects/default/resources",
      "method": "projectsListResourcesDefault",
      "httpMethod": "get",
      "tag": "Project Resources",
      "typeScriptTag": "projectResources",
      "description": "List Default Project Resources",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/projects/default/resources",
      "method": "projectsAssignResourcesDefault",
      "httpMethod": "post",
      "tag": "Project Resources",
      "typeScriptTag": "projectResources",
      "description": "Assign Resources to Default Project",
      "parameters": [
        {
          "name": "resources",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/projects/{project_id}",
      "method": "projectsDelete",
      "httpMethod": "delete",
      "tag": "Projects",
      "typeScriptTag": "projects",
      "description": "Delete an Existing Project",
      "parameters": [
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a project."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "412",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/projects/{project_id}",
      "method": "projectsGet",
      "httpMethod": "get",
      "tag": "Projects",
      "typeScriptTag": "projects",
      "description": "Retrieve an Existing Project",
      "parameters": [
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a project."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/projects/{project_id}",
      "method": "projectsPatch",
      "httpMethod": "patch",
      "tag": "Projects",
      "typeScriptTag": "projects",
      "description": "Patch a Project",
      "parameters": [
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a project."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/projects/{project_id}",
      "method": "projectsUpdate",
      "httpMethod": "put",
      "tag": "Projects",
      "typeScriptTag": "projects",
      "description": "Update a Project",
      "parameters": [
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a project."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/projects/{project_id}/resources",
      "method": "projectsListResources",
      "httpMethod": "get",
      "tag": "Project Resources",
      "typeScriptTag": "projectResources",
      "description": "List Project Resources",
      "parameters": [
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a project."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/projects/{project_id}/resources",
      "method": "projectsAssignResources",
      "httpMethod": "post",
      "tag": "Project Resources",
      "typeScriptTag": "projectResources",
      "description": "Assign Resources to a Project",
      "parameters": [
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a project."
        },
        {
          "name": "resources",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/regions",
      "method": "regionsList",
      "httpMethod": "get",
      "tag": "Regions",
      "typeScriptTag": "regions",
      "description": "List All Data Center Regions",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/registry",
      "method": "registryDelete",
      "httpMethod": "delete",
      "tag": "Container Registry",
      "typeScriptTag": "containerRegistry",
      "description": "Delete Container Registry",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/registry",
      "method": "registryGet",
      "httpMethod": "get",
      "tag": "Container Registry",
      "typeScriptTag": "containerRegistry",
      "description": "Get Container Registry Information",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/registry",
      "method": "registryCreate",
      "httpMethod": "post",
      "tag": "Container Registry",
      "typeScriptTag": "containerRegistry",
      "description": "Create Container Registry",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "subscription_tier_slug",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/registry/docker-credentials",
      "method": "registryGetDockerCredentials",
      "httpMethod": "get",
      "tag": "Container Registry",
      "typeScriptTag": "containerRegistry",
      "description": "Get Docker Credentials for Container Registry",
      "parameters": [
        {
          "name": "expirySeconds",
          "schema": "integer",
          "required": false,
          "description": "The duration in seconds that the returned registry credentials will be valid. If not set or 0, the credentials will not expire."
        },
        {
          "name": "readWrite",
          "schema": "boolean",
          "required": false,
          "description": "By default, the registry credentials allow for read-only access. Set this query parameter to `true` to obtain read-write credentials."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/registry/options",
      "method": "registryGetOptions",
      "httpMethod": "get",
      "tag": "Container Registry",
      "typeScriptTag": "containerRegistry",
      "description": "List Registry Options (Subscription Tiers and Available Regions)",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/registry/subscription",
      "method": "registryGetSubscription",
      "httpMethod": "get",
      "tag": "Container Registry",
      "typeScriptTag": "containerRegistry",
      "description": "Get Subscription Information",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/registry/subscription",
      "method": "registryUpdateSubscription",
      "httpMethod": "post",
      "tag": "Container Registry",
      "typeScriptTag": "containerRegistry",
      "description": "Update Subscription Tier",
      "parameters": [
        {
          "name": "tier_slug",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/registry/validate-name",
      "method": "registryValidateName",
      "httpMethod": "post",
      "tag": "Container Registry",
      "typeScriptTag": "containerRegistry",
      "description": "Validate a Container Registry Name",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/registry/{registry_name}/garbage-collection",
      "method": "registryGetGarbageCollection",
      "httpMethod": "get",
      "tag": "Container Registry",
      "typeScriptTag": "containerRegistry",
      "description": "Get Active Garbage Collection",
      "parameters": [
        {
          "name": "registryName",
          "schema": "string",
          "required": true,
          "description": "The name of a container registry."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/registry/{registry_name}/garbage-collection",
      "method": "registryRunGarbageCollection",
      "httpMethod": "post",
      "tag": "Container Registry",
      "typeScriptTag": "containerRegistry",
      "description": "Start Garbage Collection",
      "parameters": [
        {
          "name": "registryName",
          "schema": "string",
          "required": true,
          "description": "The name of a container registry."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/registry/{registry_name}/garbage-collection/{garbage_collection_uuid}",
      "method": "registryUpdateGarbageCollection",
      "httpMethod": "put",
      "tag": "Container Registry",
      "typeScriptTag": "containerRegistry",
      "description": "Update Garbage Collection",
      "parameters": [
        {
          "name": "registryName",
          "schema": "string",
          "required": true,
          "description": "The name of a container registry."
        },
        {
          "name": "garbageCollectionUuid",
          "schema": "string",
          "required": true,
          "description": "The UUID of a garbage collection run."
        },
        {
          "name": "cancel",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/registry/{registry_name}/garbage-collections",
      "method": "registryListGarbageCollections",
      "httpMethod": "get",
      "tag": "Container Registry",
      "typeScriptTag": "containerRegistry",
      "description": "List Garbage Collections",
      "parameters": [
        {
          "name": "registryName",
          "schema": "string",
          "required": true,
          "description": "The name of a container registry."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/registry/{registry_name}/repositories",
      "method": "registryListRepositories",
      "httpMethod": "get",
      "tag": "Container Registry",
      "typeScriptTag": "containerRegistry",
      "description": "List All Container Registry Repositories",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        },
        {
          "name": "registryName",
          "schema": "string",
          "required": true,
          "description": "The name of a container registry."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/registry/{registry_name}/repositoriesV2",
      "method": "registryListRepositoriesV2",
      "httpMethod": "get",
      "tag": "Container Registry",
      "typeScriptTag": "containerRegistry",
      "description": "List All Container Registry Repositories (V2)",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return. Ignored when 'page_token' is provided."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "Token to retrieve of the next or previous set of results more quickly than using 'page'."
        },
        {
          "name": "registryName",
          "schema": "string",
          "required": true,
          "description": "The name of a container registry."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/registry/{registry_name}/{repository_name}/digests",
      "method": "registryListRepositoryManifests",
      "httpMethod": "get",
      "tag": "Container Registry",
      "typeScriptTag": "containerRegistry",
      "description": "List All Container Registry Repository Manifests",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        },
        {
          "name": "registryName",
          "schema": "string",
          "required": true,
          "description": "The name of a container registry."
        },
        {
          "name": "repositoryName",
          "schema": "string",
          "required": true,
          "description": "The name of a container registry repository. If the name contains `/` characters, they must be URL-encoded, e.g. `%2F`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/registry/{registry_name}/{repository_name}/digests/{manifest_digest}",
      "method": "registryDeleteRepositoryManifest",
      "httpMethod": "delete",
      "tag": "Container Registry",
      "typeScriptTag": "containerRegistry",
      "description": "Delete Container Registry Repository Manifest",
      "parameters": [
        {
          "name": "registryName",
          "schema": "string",
          "required": true,
          "description": "The name of a container registry."
        },
        {
          "name": "repositoryName",
          "schema": "string",
          "required": true,
          "description": "The name of a container registry repository. If the name contains `/` characters, they must be URL-encoded, e.g. `%2F`."
        },
        {
          "name": "manifestDigest",
          "schema": "string",
          "required": true,
          "description": "The manifest digest of a container registry repository tag."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/registry/{registry_name}/{repository_name}/tags",
      "method": "registryListRepositoryTags",
      "httpMethod": "get",
      "tag": "Container Registry",
      "typeScriptTag": "containerRegistry",
      "description": "List All Container Registry Repository Tags",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        },
        {
          "name": "registryName",
          "schema": "string",
          "required": true,
          "description": "The name of a container registry."
        },
        {
          "name": "repositoryName",
          "schema": "string",
          "required": true,
          "description": "The name of a container registry repository. If the name contains `/` characters, they must be URL-encoded, e.g. `%2F`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/registry/{registry_name}/{repository_name}/tags/{repository_tag}",
      "method": "registryDeleteRepositoryTag",
      "httpMethod": "delete",
      "tag": "Container Registry",
      "typeScriptTag": "containerRegistry",
      "description": "Delete Container Registry Repository Tag",
      "parameters": [
        {
          "name": "registryName",
          "schema": "string",
          "required": true,
          "description": "The name of a container registry."
        },
        {
          "name": "repositoryName",
          "schema": "string",
          "required": true,
          "description": "The name of a container registry repository. If the name contains `/` characters, they must be URL-encoded, e.g. `%2F`."
        },
        {
          "name": "repositoryTag",
          "schema": "string",
          "required": true,
          "description": "The name of a container registry repository tag."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/reports/droplet_neighbors_ids",
      "method": "dropletsListNeighborsIds",
      "httpMethod": "get",
      "tag": "Droplets",
      "typeScriptTag": "droplets",
      "description": "List All Droplet Neighbors",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/reserved_ips",
      "method": "reservedIPsList",
      "httpMethod": "get",
      "tag": "Reserved IPs",
      "typeScriptTag": "reservedIPs",
      "description": "List All Reserved IPs",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/reserved_ips",
      "method": "reservedIPsCreate",
      "httpMethod": "post",
      "tag": "Reserved IPs",
      "typeScriptTag": "reservedIPs",
      "description": "Create a New Reserved IP",
      "parameters": [],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/reserved_ips/{reserved_ip}",
      "method": "reservedIPsDelete",
      "httpMethod": "delete",
      "tag": "Reserved IPs",
      "typeScriptTag": "reservedIPs",
      "description": "Delete a Reserved IP",
      "parameters": [
        {
          "name": "reservedIp",
          "schema": "string",
          "required": true,
          "description": "A reserved IP address."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/reserved_ips/{reserved_ip}",
      "method": "reservedIPsGet",
      "httpMethod": "get",
      "tag": "Reserved IPs",
      "typeScriptTag": "reservedIPs",
      "description": "Retrieve an Existing Reserved IP",
      "parameters": [
        {
          "name": "reservedIp",
          "schema": "string",
          "required": true,
          "description": "A reserved IP address."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/reserved_ips/{reserved_ip}/actions",
      "method": "reservedIPsActionsList",
      "httpMethod": "get",
      "tag": "Reserved IP Actions",
      "typeScriptTag": "reservedIpActions",
      "description": "List All Actions for a Reserved IP",
      "parameters": [
        {
          "name": "reservedIp",
          "schema": "string",
          "required": true,
          "description": "A reserved IP address."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/reserved_ips/{reserved_ip}/actions",
      "method": "reservedIPsActionsPost",
      "httpMethod": "post",
      "tag": "Reserved IP Actions",
      "typeScriptTag": "reservedIpActions",
      "description": "Initiate a Reserved IP Action",
      "parameters": [
        {
          "name": "reservedIp",
          "schema": "string",
          "required": true,
          "description": "A reserved IP address."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/reserved_ips/{reserved_ip}/actions/{action_id}",
      "method": "reservedIPsActionsGet",
      "httpMethod": "get",
      "tag": "Reserved IP Actions",
      "typeScriptTag": "reservedIpActions",
      "description": "Retrieve an Existing Reserved IP Action",
      "parameters": [
        {
          "name": "reservedIp",
          "schema": "string",
          "required": true,
          "description": "A reserved IP address."
        },
        {
          "name": "actionId",
          "schema": "integer",
          "required": true,
          "description": "A unique numeric ID that can be used to identify and reference an action."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/sizes",
      "method": "sizesList",
      "httpMethod": "get",
      "tag": "Sizes",
      "typeScriptTag": "sizes",
      "description": "List All Droplet Sizes",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/snapshots",
      "method": "snapshotsList",
      "httpMethod": "get",
      "tag": "Snapshots",
      "typeScriptTag": "snapshots",
      "description": "List All Snapshots",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        },
        {
          "name": "resourceType",
          "schema": "string",
          "required": false,
          "description": "Used to filter snapshots by a resource type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/snapshots/{snapshot_id}",
      "method": "snapshotsDelete",
      "httpMethod": "delete",
      "tag": "Snapshots",
      "typeScriptTag": "snapshots",
      "description": "Delete a Snapshot",
      "parameters": [
        {
          "name": "snapshotId",
          "schema": "undefined",
          "required": true,
          "description": "Either the ID of an existing snapshot. This will be an integer for a Droplet snapshot or a string for a volume snapshot."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/snapshots/{snapshot_id}",
      "method": "snapshotsGet",
      "httpMethod": "get",
      "tag": "Snapshots",
      "typeScriptTag": "snapshots",
      "description": "Retrieve an Existing Snapshot",
      "parameters": [
        {
          "name": "snapshotId",
          "schema": "undefined",
          "required": true,
          "description": "Either the ID of an existing snapshot. This will be an integer for a Droplet snapshot or a string for a volume snapshot."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/tags",
      "method": "tagsList",
      "httpMethod": "get",
      "tag": "Tags",
      "typeScriptTag": "tags",
      "description": "List All Tags",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/tags",
      "method": "tagsCreate",
      "httpMethod": "post",
      "tag": "Tags",
      "typeScriptTag": "tags",
      "description": "Create a New Tag",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "resources",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/tags/{tag_id}",
      "method": "tagsDelete",
      "httpMethod": "delete",
      "tag": "Tags",
      "typeScriptTag": "tags",
      "description": "Delete a Tag",
      "parameters": [
        {
          "name": "tagId",
          "schema": "string",
          "required": true,
          "description": "The name of the tag. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per tag."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/tags/{tag_id}",
      "method": "tagsGet",
      "httpMethod": "get",
      "tag": "Tags",
      "typeScriptTag": "tags",
      "description": "Retrieve a Tag",
      "parameters": [
        {
          "name": "tagId",
          "schema": "string",
          "required": true,
          "description": "The name of the tag. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per tag."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/tags/{tag_id}/resources",
      "method": "tagsUnassignResources",
      "httpMethod": "delete",
      "tag": "Tags",
      "typeScriptTag": "tags",
      "description": "Untag a Resource",
      "parameters": [
        {
          "name": "tagId",
          "schema": "string",
          "required": true,
          "description": "The name of the tag. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per tag."
        },
        {
          "name": "resources",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/tags/{tag_id}/resources",
      "method": "tagsAssignResources",
      "httpMethod": "post",
      "tag": "Tags",
      "typeScriptTag": "tags",
      "description": "Tag a Resource",
      "parameters": [
        {
          "name": "tagId",
          "schema": "string",
          "required": true,
          "description": "The name of the tag. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per tag."
        },
        {
          "name": "resources",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/uptime/checks",
      "method": "uptimeChecksList",
      "httpMethod": "get",
      "tag": "Uptime",
      "typeScriptTag": "uptime",
      "description": "List All Checks",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/uptime/checks",
      "method": "uptimeCheckCreate",
      "httpMethod": "post",
      "tag": "Uptime",
      "typeScriptTag": "uptime",
      "description": "Create a New Check",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/uptime/checks/{check_id}",
      "method": "uptimeCheckDelete",
      "httpMethod": "delete",
      "tag": "Uptime",
      "typeScriptTag": "uptime",
      "description": "Delete a Check",
      "parameters": [
        {
          "name": "checkId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a check."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/uptime/checks/{check_id}",
      "method": "uptimeCheckGet",
      "httpMethod": "get",
      "tag": "Uptime",
      "typeScriptTag": "uptime",
      "description": "Retrieve an Existing Check",
      "parameters": [
        {
          "name": "checkId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a check."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/uptime/checks/{check_id}",
      "method": "uptimeCheckUpdate",
      "httpMethod": "put",
      "tag": "Uptime",
      "typeScriptTag": "uptime",
      "description": "Update a Check",
      "parameters": [
        {
          "name": "checkId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a check."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/uptime/checks/{check_id}/alerts",
      "method": "uptimeCheckAlertsList",
      "httpMethod": "get",
      "tag": "Uptime",
      "typeScriptTag": "uptime",
      "description": "List All Alerts",
      "parameters": [
        {
          "name": "checkId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a check."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/uptime/checks/{check_id}/alerts",
      "method": "uptimeAlertCreate",
      "httpMethod": "post",
      "tag": "Uptime",
      "typeScriptTag": "uptime",
      "description": "Create a New Alert",
      "parameters": [
        {
          "name": "checkId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a check."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/uptime/checks/{check_id}/alerts/{alert_id}",
      "method": "uptimeAlertDelete",
      "httpMethod": "delete",
      "tag": "Uptime",
      "typeScriptTag": "uptime",
      "description": "Delete an Alert",
      "parameters": [
        {
          "name": "checkId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a check."
        },
        {
          "name": "alertId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for an alert."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/uptime/checks/{check_id}/alerts/{alert_id}",
      "method": "uptimeAlertGet",
      "httpMethod": "get",
      "tag": "Uptime",
      "typeScriptTag": "uptime",
      "description": "Retrieve an Existing Alert",
      "parameters": [
        {
          "name": "checkId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a check."
        },
        {
          "name": "alertId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for an alert."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/uptime/checks/{check_id}/alerts/{alert_id}",
      "method": "uptimeAlertUpdate",
      "httpMethod": "put",
      "tag": "Uptime",
      "typeScriptTag": "uptime",
      "description": "Update an Alert",
      "parameters": [
        {
          "name": "checkId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a check."
        },
        {
          "name": "alertId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for an alert."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/uptime/checks/{check_id}/state",
      "method": "uptimeCheckStateGet",
      "httpMethod": "get",
      "tag": "Uptime",
      "typeScriptTag": "uptime",
      "description": "Retrieve Check State",
      "parameters": [
        {
          "name": "checkId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a check."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/volumes",
      "method": "volumesDeleteByName",
      "httpMethod": "delete",
      "tag": "Block Storage",
      "typeScriptTag": "blockStorage",
      "description": "Delete a Block Storage Volume by Name",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": "The block storage volume's name."
        },
        {
          "name": "region",
          "schema": "string",
          "description": "The slug identifier for the region where the resource is available."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/volumes",
      "method": "volumesList",
      "httpMethod": "get",
      "tag": "Block Storage",
      "typeScriptTag": "blockStorage",
      "description": "List All Block Storage Volumes",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": "The block storage volume's name."
        },
        {
          "name": "region",
          "schema": "string",
          "description": "The slug identifier for the region where the resource is available."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/volumes",
      "method": "volumesCreate",
      "httpMethod": "post",
      "tag": "Block Storage",
      "typeScriptTag": "blockStorage",
      "description": "Create a New Block Storage Volume",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/volumes/actions",
      "method": "volumeActionsPost",
      "httpMethod": "post",
      "tag": "Block Storage Actions",
      "typeScriptTag": "blockStorageActions",
      "description": "Initiate A Block Storage Action By Volume Name",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/volumes/snapshots/{snapshot_id}",
      "method": "volumeSnapshotsDeleteById",
      "httpMethod": "delete",
      "tag": "Block Storage",
      "typeScriptTag": "blockStorage",
      "description": "Delete a Volume Snapshot",
      "parameters": [
        {
          "name": "snapshotId",
          "schema": "undefined",
          "required": true,
          "description": "Either the ID of an existing snapshot. This will be an integer for a Droplet snapshot or a string for a volume snapshot."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/volumes/snapshots/{snapshot_id}",
      "method": "volumeSnapshotsGetById",
      "httpMethod": "get",
      "tag": "Block Storage",
      "typeScriptTag": "blockStorage",
      "description": "Retrieve an Existing Volume Snapshot",
      "parameters": [
        {
          "name": "snapshotId",
          "schema": "undefined",
          "required": true,
          "description": "Either the ID of an existing snapshot. This will be an integer for a Droplet snapshot or a string for a volume snapshot."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/volumes/{volume_id}",
      "method": "volumesDelete",
      "httpMethod": "delete",
      "tag": "Block Storage",
      "typeScriptTag": "blockStorage",
      "description": "Delete a Block Storage Volume",
      "parameters": [
        {
          "name": "volumeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the block storage volume."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/volumes/{volume_id}",
      "method": "volumesGet",
      "httpMethod": "get",
      "tag": "Block Storage",
      "typeScriptTag": "blockStorage",
      "description": "Retrieve an Existing Block Storage Volume",
      "parameters": [
        {
          "name": "volumeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the block storage volume."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/volumes/{volume_id}/actions",
      "method": "volumeActionsList",
      "httpMethod": "get",
      "tag": "Block Storage Actions",
      "typeScriptTag": "blockStorageActions",
      "description": "List All Actions for a Volume",
      "parameters": [
        {
          "name": "volumeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the block storage volume."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/volumes/{volume_id}/actions",
      "method": "volumeActionsPostById",
      "httpMethod": "post",
      "tag": "Block Storage Actions",
      "typeScriptTag": "blockStorageActions",
      "description": "Initiate A Block Storage Action By Volume Id",
      "parameters": [
        {
          "name": "volumeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the block storage volume."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/volumes/{volume_id}/actions/{action_id}",
      "method": "volumeActionsGet",
      "httpMethod": "get",
      "tag": "Block Storage Actions",
      "typeScriptTag": "blockStorageActions",
      "description": "Retrieve an Existing Volume Action",
      "parameters": [
        {
          "name": "volumeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the block storage volume."
        },
        {
          "name": "actionId",
          "schema": "integer",
          "required": true,
          "description": "A unique numeric ID that can be used to identify and reference an action."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/volumes/{volume_id}/snapshots",
      "method": "volumeSnapshotsList",
      "httpMethod": "get",
      "tag": "Block Storage",
      "typeScriptTag": "blockStorage",
      "description": "List Snapshots for a Volume",
      "parameters": [
        {
          "name": "volumeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the block storage volume."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/volumes/{volume_id}/snapshots",
      "method": "volumeSnapshotsCreate",
      "httpMethod": "post",
      "tag": "Block Storage",
      "typeScriptTag": "blockStorage",
      "description": "Create Snapshot from a Volume",
      "parameters": [
        {
          "name": "volumeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the block storage volume."
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/vpcs",
      "method": "vpcsList",
      "httpMethod": "get",
      "tag": "VPCs",
      "typeScriptTag": "vpCs",
      "description": "List All VPCs",
      "parameters": [
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/vpcs",
      "method": "vpcsCreate",
      "httpMethod": "post",
      "tag": "VPCs",
      "typeScriptTag": "vpCs",
      "description": "Create a New VPC",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/vpcs/{vpc_id}",
      "method": "vpcsDelete",
      "httpMethod": "delete",
      "tag": "VPCs",
      "typeScriptTag": "vpCs",
      "description": "Delete a VPC",
      "parameters": [
        {
          "name": "vpcId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a VPC."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/vpcs/{vpc_id}",
      "method": "vpcsGet",
      "httpMethod": "get",
      "tag": "VPCs",
      "typeScriptTag": "vpCs",
      "description": "Retrieve an Existing VPC",
      "parameters": [
        {
          "name": "vpcId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a VPC."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/vpcs/{vpc_id}",
      "method": "vpcsPatch",
      "httpMethod": "patch",
      "tag": "VPCs",
      "typeScriptTag": "vpCs",
      "description": "Partially Update a VPC",
      "parameters": [
        {
          "name": "vpcId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a VPC."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/vpcs/{vpc_id}",
      "method": "vpcsUpdate",
      "httpMethod": "put",
      "tag": "VPCs",
      "typeScriptTag": "vpCs",
      "description": "Update a VPC",
      "parameters": [
        {
          "name": "vpcId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a VPC."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/vpcs/{vpc_id}/members",
      "method": "vpcsListMembers",
      "httpMethod": "get",
      "tag": "VPCs",
      "typeScriptTag": "vpCs",
      "description": "List the Member Resources of a VPC",
      "parameters": [
        {
          "name": "vpcId",
          "schema": "string",
          "required": true,
          "description": "A unique identifier for a VPC."
        },
        {
          "name": "resourceType",
          "schema": "string",
          "required": false,
          "description": "Used to filter VPC members by a resource type."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "required": false,
          "description": "Number of items returned per page"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Which 'page' of paginated results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.digitalocean.com",
  "apiDescription": "# Introduction\n\nThe DigitalOcean API allows you to manage Droplets and resources within the\nDigitalOcean cloud in a simple, programmatic way using conventional HTTP requests.\n\nAll of the functionality that you are familiar with in the DigitalOcean\ncontrol panel is also available through the API, allowing you to script the\ncomplex actions that your situation requires.\n\nThe API documentation will start with a general overview about the design\nand technology that has been implemented, followed by reference information\nabout specific endpoints.\n\n## Requests\n\nAny tool that is fluent in HTTP can communicate with the API simply by\nrequesting the correct URI. Requests should be made using the HTTPS protocol\nso that traffic is encrypted. The interface responds to different methods\ndepending on the action required.\n\n|Method|Usage|\n|--- |--- |\n|GET|For simple retrieval of information about your account, Droplets, or environment, you should use the GET method.  The information you request will be returned to you as a JSON object. The attributes defined by the JSON object can be used to form additional requests.  Any request using the GET method is read-only and will not affect any of the objects you are querying.|\n|DELETE|To destroy a resource and remove it from your account and environment, the DELETE method should be used.  This will remove the specified object if it is found.  If it is not found, the operation will return a response indicating that the object was not found. This idempotency means that you do not have to check for a resource's availability prior to issuing a delete command, the final state will be the same regardless of its existence.|\n|PUT|To update the information about a resource in your account, the PUT method is available. Like the DELETE Method, the PUT method is idempotent.  It sets the state of the target using the provided values, regardless of their current values. Requests using the PUT method do not need to check the current attributes of the object.|\n|PATCH|Some resources support partial modification. In these cases, the PATCH method is available. Unlike PUT which generally requires a complete representation of a resource, a PATCH request is is a set of instructions on how to modify a resource updating only specific attributes.|\n|POST|To create a new object, your request should specify the POST method. The POST request includes all of the attributes necessary to create a new object.  When you wish to create a new object, send a POST request to the target endpoint.|\n|HEAD|Finally, to retrieve metadata information, you should use the HEAD method to get the headers.  This returns only the header of what would be returned with an associated GET request. Response headers contain some useful information about your API access and the results that are available for your request. For instance, the headers contain your current rate-limit value and the amount of time available until the limit resets. It also contains metrics about the total number of objects found, pagination information, and the total content length.|\n\n\n## HTTP Statuses\n\nAlong with the HTTP methods that the API responds to, it will also return\nstandard HTTP statuses, including error codes.\n\nIn the event of a problem, the status will contain the error code, while the\nbody of the response will usually contain additional information about the\nproblem that was encountered.\n\nIn general, if the status returned is in the 200 range, it indicates that\nthe request was fulfilled successfully and that no error was encountered.\n\nReturn codes in the 400 range typically indicate that there was an issue\nwith the request that was sent. Among other things, this could mean that you\ndid not authenticate correctly, that you are requesting an action that you\ndo not have authorization for, that the object you are requesting does not\nexist, or that your request is malformed.\n\nIf you receive a status in the 500 range, this generally indicates a\nserver-side problem. This means that we are having an issue on our end and\ncannot fulfill your request currently.\n\n400 and 500 level error responses will include a JSON object in their body,\nincluding the following attributes:\n\n|Name|Type|Description|\n|--- |--- |--- |\n|id|string|A short identifier corresponding to the HTTP status code returned. For example, the ID for a response returning a 404 status code would be \"not_found.\"|\n|message|string|A message providing additional information about the error, including details to help resolve it when possible.|\n|request_id|string|Optionally, some endpoints may include a request ID that should be provided when reporting bugs or opening support tickets to help identify the issue.|\n\n### Example Error Response\n\n```\n    HTTP/1.1 403 Forbidden\n    {\n      \"id\":       \"forbidden\",\n      \"message\":  \"You do not have access for the attempted action.\"\n    }\n```\n\n## Responses\n\nWhen a request is successful, a response body will typically be sent back in\nthe form of a JSON object. An exception to this is when a DELETE request is\nprocessed, which will result in a successful HTTP 204 status and an empty\nresponse body.\n\nInside of this JSON object, the resource root that was the target of the\nrequest will be set as the key. This will be the singular form of the word\nif the request operated on a single object, and the plural form of the word\nif a collection was processed.\n\nFor example, if you send a GET request to `/v2/droplets/$DROPLET_ID` you\nwill get back an object with a key called \"`droplet`\". However, if you send\nthe GET request to the general collection at `/v2/droplets`, you will get\nback an object with a key called \"`droplets`\".\n\nThe value of these keys will generally be a JSON object for a request on a\nsingle object and an array of objects for a request on a collection of\nobjects.\n\n### Response for a Single Object\n\n```\n    {\n        \"droplet\": {\n            \"name\": \"example.com\"\n            . . .\n        }\n    }\n```\n\n### Response for an Object Collection\n\n```\n    {\n        \"droplets\": [\n            {\n                \"name\": \"example.com\"\n                . . .\n            },\n            {\n                \"name\": \"second.com\"\n                . . .\n            }\n        ]\n    }\n```\n\n## Meta\n\nIn addition to the main resource root, the response may also contain a\n`meta` object. This object contains information about the response itself.\n\nThe `meta` object contains a `total` key that is set to the total number of\nobjects returned by the request. This has implications on the `links` object\nand pagination.\n\nThe `meta` object will only be displayed when it has a value. Currently, the\n`meta` object will have a value when a request is made on a collection (like\n`droplets` or `domains`).\n\n\n### Sample Meta Object\n\n```\n    {\n        . . .\n        \"meta\": {\n            \"total\": 43\n        }\n        . . .\n    }\n```\n\n## Links & Pagination\n\nThe `links` object is returned as part of the response body when pagination\nis enabled. By default, 20 objects are returned per page. If the response\ncontains 20 objects or fewer, no `links` object will be returned. If the\nresponse contains more than 20 objects, the first 20 will be returned along\nwith the `links` object.\n\nYou can request a different pagination limit or force pagination by\nappending `?per_page=` to the request with the number of items you would\nlike per page. For instance, to show only two results per page, you could\nadd `?per_page=2` to the end of your query. The maximum number of results\nper page is 200.\n\nThe `links` object contains a `pages` object. The `pages` object, in turn,\ncontains keys indicating the relationship of additional pages. The values of\nthese are the URLs of the associated pages. The keys will be one of the\nfollowing:\n\n*   **first**: The URI of the first page of results.\n*   **prev**: The URI of the previous sequential page of results.\n*   **next**: The URI of the next sequential page of results.\n*   **last**: The URI of the last page of results.\n\nThe `pages` object will only include the links that make sense. So for the\nfirst page of results, no `first` or `prev` links will ever be set. This\nconvention holds true in other situations where a link would not make sense.\n\n### Sample Links Object\n\n```\n    {\n        . . .\n        \"links\": {\n            \"pages\": {\n                \"last\": \"https://api.digitalocean.com/v2/images?page=2\",\n                \"next\": \"https://api.digitalocean.com/v2/images?page=2\"\n            }\n        }\n        . . .\n    }\n```\n\n## Rate Limit\n\nRequests through the API are rate limited per OAuth token. Current rate limits:\n\n*   5,000 requests per hour\n*   250 requests per minute (5% of the hourly total)\n\nOnce you exceed either limit, you will be rate limited until the next cycle\nstarts. Space out any requests that you would otherwise issue in bursts for\nthe best results.\n\nThe rate limiting information is contained within the response headers of\neach request. The relevant headers are:\n\n*   **ratelimit-limit**: The number of requests that can be made per hour.\n*   **ratelimit-remaining**: The number of requests that remain before you hit your request limit. See the information below for how the request limits expire.\n*   **ratelimit-reset**: This represents the time when the oldest request will expire. The value is given in [Unix epoch time](http://en.wikipedia.org/wiki/Unix_time). See below for more information about how request limits expire.\n\nAs long as the `ratelimit-remaining` count is above zero, you will be able\nto make additional requests.\n\nThe way that a request expires and is removed from the current limit count\nis important to understand. Rather than counting all of the requests for an\nhour and resetting the `ratelimit-remaining` value at the end of the hour,\neach request instead has its own timer.\n\nThis means that each request contributes toward the `ratelimit-remaining`\ncount for one complete hour after the request is made. When that request's\ntimer runs out, it is no longer counted towards the request limit.\n\nThis has implications on the meaning of the `ratelimit-reset` header as\nwell. Because the entire rate limit is not reset at one time, the value of\nthis header is set to the time when the _oldest_ request will expire.\n\nKeep this in mind if you see your `ratelimit-reset` value change, but not\nmove an entire hour into the future.\n\nIf the `ratelimit-remaining` reaches zero, subsequent requests will receive\na 429 error code until the request reset has been reached. You can see the\nformat of the response in the examples.\n\n**Note:** The following endpoints have special rate limit requirements that\nare independent of the limits defined above.\n\n*   Only 12 `POST` requests to the `/v2/floating_ips` endpoint to create Floating IPs can be made per 60 seconds.\n*   Only 10 `GET` requests to the `/v2/account/keys` endpoint to list SSH keys can be made per 60 seconds.\n*   Only 5 requests to any and all `v2/cdn/endpoints` can be made per 10 seconds. This includes `v2/cdn/endpoints`, \n    `v2/cdn/endpoints/$ENDPOINT_ID`, and `v2/cdn/endpoints/$ENDPOINT_ID/cache`.\n*   Only 50 strings within the `files` json struct in the `v2/cdn/endpoints/$ENDPOINT_ID/cache` [payload](https://docs.digitalocean.com/reference/api/api-reference/#operation/cdn_purge_cache) \n    can be requested every 20 seconds.\n\n### Sample Rate Limit Headers\n\n```\n    . . .\n    ratelimit-limit: 1200\n    ratelimit-remaining: 1193\n    rateLimit-reset: 1402425459\n    . . .\n```\n\n### Sample Rate Exceeded Response\n\n```\n    429 Too Many Requests\n    {\n            id: \"too_many_requests\",\n            message: \"API Rate limit exceeded.\"\n    }\n```\n\n## Curl Examples\n\nThroughout this document, some example API requests will be given using the\n`curl` command. This will allow us to demonstrate the various endpoints in a\nsimple, textual format.\n  \n  These examples assume that you are using a Linux or macOS command line. To run\nthese commands on a Windows machine, you can either use cmd.exe, PowerShell, or WSL:\n\n* For cmd.exe, use the `set VAR=VALUE` [syntax](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/set_1)\nto define environment variables, call them with `%VAR%`, then replace all backslashes (`\\`) in the examples with carets (`^`).\n\n* For PowerShell, use the `$Env:VAR = \"VALUE\"` [syntax](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables?view=powershell-7.2)\nto define environment variables, call them with `$Env:VAR`, then replace `curl` with `curl.exe` and all backslashes (`\\`) in the examples with backticks (`` ` ``).\n\n* WSL is a compatibility layer that allows you to emulate a Linux terminal on a Windows machine.\nInstall WSL with our [community tutorial](https://www.digitalocean.com/community/tutorials/how-to-install-the-windows-subsystem-for-linux-2-on-microsoft-windows-10), \nthen follow this API documentation normally.\n\nThe names of account-specific references (like Droplet IDs, for instance)\nwill be represented by variables. For instance, a Droplet ID may be\nrepresented by a variable called `$DROPLET_ID`. You can set the associated\nvariables in your environment if you wish to use the examples without\nmodification.\n\nThe first variable that you should set to get started is your OAuth\nauthorization token. The next section will go over the details of this, but\nyou can set an environmental variable for it now.\n\nGenerate a token by going to the [Apps & API](https://cloud.digitalocean.com/settings/applications)\nsection of the DigitalOcean control panel. Use an existing token if you have\nsaved one, or generate a new token with the \"Generate new token\" button.\nCopy the generated token and use it to set and export the TOKEN variable in\nyour environment as the example shows.\n\nYou may also wish to set some other variables now or as you go along. For\nexample, you may wish to set the `DROPLET_ID` variable to one of your\nDroplet IDs since this will be used frequently in the API.\n\nIf you are following along, make sure you use a Droplet ID that you control\nso that your commands will execute correctly.\n\nIf you need access to the headers of a response through `curl`, you can pass\nthe `-i` flag to display the header information along with the body. If you\nare only interested in the header, you can instead pass the `-I` flag, which\nwill exclude the response body entirely.\n\n\n### Set and Export your OAuth Token\n\n```\nexport DIGITALOCEAN_TOKEN=your_token_here\n```\n\n### Set and Export a Variable\n\n```\nexport DROPLET_ID=1111111\n```\n\n## Parameters\n\nThere are two different ways to pass parameters in a request with the API.\n\nWhen passing parameters to create or update an object, parameters should be\npassed as a JSON object containing the appropriate attribute names and\nvalues as key-value pairs. When you use this format, you should specify that\nyou are sending a JSON object in the header. This is done by setting the\n`Content-Type` header to `application/json`. This ensures that your request\nis interpreted correctly.\n\nWhen passing parameters to filter a response on GET requests, parameters can\nbe passed using standard query attributes. In this case, the parameters\nwould be embedded into the URI itself by appending a `?` to the end of the\nURI and then setting each attribute with an equal sign. Attributes can be\nseparated with a `&`. Tools like `curl` can create the appropriate URI when\ngiven parameters and values; this can also be done using the `-F` flag and\nthen passing the key and value as an argument. The argument should take the\nform of a quoted string with the attribute being set to a value with an\nequal sign.\n\n### Pass Parameters as a JSON Object\n\n```\n    curl -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n        -H \"Content-Type: application/json\" \\\n        -d '{\"name\": \"example.com\", \"ip_address\": \"127.0.0.1\"}' \\\n        -X POST \"https://api.digitalocean.com/v2/domains\"\n```\n\n### Pass Filter Parameters as a Query String\n\n```\n     curl -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n         -X GET \\\n         \"https://api.digitalocean.com/v2/images?private=true\"\n```\n\n## Cross Origin Resource Sharing\n\nIn order to make requests to the API from other domains, the API implements\nCross Origin Resource Sharing (CORS) support.\n\nCORS support is generally used to create AJAX requests outside of the domain\nthat the request originated from. This is necessary to implement projects\nlike control panels utilizing the API. This tells the browser that it can\nsend requests to an outside domain.\n\nThe procedure that the browser initiates in order to perform these actions\n(other than GET requests) begins by sending a \"preflight\" request. This sets\nthe `Origin` header and uses the `OPTIONS` method. The server will reply\nback with the methods it allows and some of the limits it imposes. The\nclient then sends the actual request if it falls within the allowed\nconstraints.\n\nThis process is usually done in the background by the browser, but you can\nuse curl to emulate this process using the example provided. The headers\nthat will be set to show the constraints are:\n\n*   **Access-Control-Allow-Origin**: This is the domain that is sent by the client or browser as the origin of the request. It is set through an `Origin` header.\n*   **Access-Control-Allow-Methods**: This specifies the allowed options for requests from that domain. This will generally be all available methods.\n*   **Access-Control-Expose-Headers**: This will contain the headers that will be available to requests from the origin domain.\n*   **Access-Control-Max-Age**: This is the length of time that the access is considered valid. After this expires, a new preflight should be sent.\n*   **Access-Control-Allow-Credentials**: This will be set to `true`. It basically allows you to send your OAuth token for authentication.\n\nYou should not need to be concerned with the details of these headers,\nbecause the browser will typically do all of the work for you.\n",
  "apiTitle": "DigitalOcean API",
  "endpoints": 183,
  "sdkMethods": 290,
  "schemas": 0,
  "parameters": 593,
  "contactEmail": "api-engineering@digitalocean.com",
  "difficultyScore": 438.25,
  "difficulty": "Hard"
}