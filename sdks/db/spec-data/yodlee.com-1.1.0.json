{
  "providerName": "yodlee.com",
  "openApiRaw": "https://developer.yodlee.com/sites/default/files/api_spec/coreapisoas3.yml",
  "securitySchemes": {},
  "homepage": "yodlee.com",
  "apiVersion": "1.1.0",
  "methods": [
    {
      "url": "/accounts",
      "method": "getAllAccounts",
      "httpMethod": "get",
      "tag": "Accounts",
      "description": "Get Accounts",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "description": "Comma separated accountIds."
        },
        {
          "name": "container",
          "schema": "string",
          "description": "bank/creditCard/investment/insurance/loan/reward/realEstate/otherAssets/otherLiabilities"
        },
        {
          "name": "include",
          "schema": "string",
          "description": "profile, holder, fullAccountNumber, fullAccountNumberList, paymentProfile, autoRefresh<br><b>Note:</b>fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response."
        },
        {
          "name": "providerAccountId",
          "schema": "string",
          "description": "Comma separated providerAccountIds."
        },
        {
          "name": "requestId",
          "schema": "string",
          "description": "The unique identifier that returns contextual data"
        },
        {
          "name": "status",
          "schema": "string",
          "description": "ACTIVE,INACTIVE,TO_BE_CLOSED,CLOSED"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/accounts",
      "method": "createManualAccount",
      "httpMethod": "post",
      "tag": "Accounts",
      "description": "Add Manual Account",
      "parameters": [
        {
          "name": "account",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/accounts/evaluateAddress",
      "method": "evaluateAddress",
      "httpMethod": "post",
      "tag": "Accounts",
      "description": "Evaluate Address",
      "parameters": [
        {
          "name": "address",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/accounts/historicalBalances",
      "method": "getHistoricalBalances",
      "httpMethod": "get",
      "tag": "Accounts",
      "description": "Get Historical Balances",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "description": "accountId"
        },
        {
          "name": "fromDate",
          "schema": "string",
          "description": "from date for balance retrieval (YYYY-MM-DD)"
        },
        {
          "name": "includeCF",
          "schema": "boolean",
          "description": "Consider carry forward logic for missing balances"
        },
        {
          "name": "interval",
          "schema": "string",
          "description": "D-daily, W-weekly or M-monthly"
        },
        {
          "name": "skip",
          "schema": "integer",
          "description": "skip (Min 0)"
        },
        {
          "name": "toDate",
          "schema": "string",
          "description": "toDate for balance retrieval (YYYY-MM-DD)"
        },
        {
          "name": "top",
          "schema": "integer",
          "description": "top (Max 500)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/accounts/{accountId}",
      "method": "deleteAccount",
      "httpMethod": "delete",
      "tag": "Accounts",
      "description": "Delete Account",
      "parameters": [
        {
          "name": "accountId",
          "schema": "integer",
          "required": true,
          "description": "accountId"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/accounts/{accountId}",
      "method": "getAccount",
      "httpMethod": "get",
      "tag": "Accounts",
      "description": "Get Account Details",
      "parameters": [
        {
          "name": "accountId",
          "schema": "integer",
          "required": true,
          "description": "accountId"
        },
        {
          "name": "include",
          "schema": "string",
          "description": "profile, holder, fullAccountNumber, fullAccountNumberList, paymentProfile, autoRefresh<br><b>Note:</b>fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/accounts/{accountId}",
      "method": "updateAccount",
      "httpMethod": "put",
      "tag": "Accounts",
      "description": "Update Account",
      "parameters": [
        {
          "name": "accountId",
          "schema": "integer",
          "required": true,
          "description": "accountId"
        },
        {
          "name": "account",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/auth/apiKey",
      "method": "getApiKeys",
      "httpMethod": "get",
      "tag": "Auth",
      "description": "Get API Keys",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/auth/apiKey",
      "method": "generateApiKey",
      "httpMethod": "post",
      "tag": "Auth",
      "description": "Generate API Key",
      "parameters": [
        {
          "name": "publicKey",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/auth/apiKey/{key}",
      "method": "deleteApiKey",
      "httpMethod": "delete",
      "tag": "Auth",
      "description": "Delete API Key",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "key"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/auth/token",
      "method": "deleteToken",
      "httpMethod": "delete",
      "tag": "Auth",
      "description": "Delete Token",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/auth/token",
      "method": "generateAccessToken",
      "httpMethod": "post",
      "tag": "Auth",
      "description": "Generate Access Token",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/cobrand/config/notifications/events",
      "method": "getSubscribedEvents",
      "httpMethod": "get",
      "tag": "Cobrand",
      "description": "Get Subscribed Events",
      "parameters": [
        {
          "name": "eventName",
          "schema": "string",
          "description": "eventName"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cobrand/config/notifications/events/{eventName}",
      "method": "deleteSubscribedEvent",
      "httpMethod": "delete",
      "tag": "Cobrand",
      "description": "Delete Subscription",
      "parameters": [
        {
          "name": "eventName",
          "schema": "string",
          "required": true,
          "description": "eventName"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/cobrand/config/notifications/events/{eventName}",
      "method": "createSubscriptionEvent",
      "httpMethod": "post",
      "tag": "Cobrand",
      "description": "Subscribe Event",
      "parameters": [
        {
          "name": "eventName",
          "schema": "string",
          "required": true,
          "description": "eventName"
        },
        {
          "name": "event",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/cobrand/config/notifications/events/{eventName}",
      "method": "updateSubscribedEvent",
      "httpMethod": "put",
      "tag": "Cobrand",
      "description": "Update Subscription",
      "parameters": [
        {
          "name": "eventName",
          "schema": "string",
          "required": true,
          "description": "eventName"
        },
        {
          "name": "event",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/cobrand/login",
      "method": "cobrandLogin",
      "httpMethod": "post",
      "tag": "Cobrand",
      "description": "Cobrand Login",
      "parameters": [
        {
          "name": "cobrand",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/cobrand/logout",
      "method": "cobrandLogout",
      "httpMethod": "post",
      "tag": "Cobrand",
      "description": "Cobrand Logout",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/cobrand/publicKey",
      "method": "getPublicKey",
      "httpMethod": "get",
      "tag": "Cobrand",
      "description": "Get Public Key",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/configs/notifications/events",
      "method": "getSubscribedNotificationEvents",
      "httpMethod": "get",
      "tag": "Configs",
      "description": "Get Subscribed Notification Events",
      "parameters": [
        {
          "name": "eventName",
          "schema": "string",
          "description": "eventName"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/configs/notifications/events/{eventName}",
      "method": "deleteSubscribedNotificationEvent",
      "httpMethod": "delete",
      "tag": "Configs",
      "description": "Delete Notification Subscription",
      "parameters": [
        {
          "name": "eventName",
          "schema": "string",
          "required": true,
          "description": "eventName"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/configs/notifications/events/{eventName}",
      "method": "createSubscriptionNotificationEvent",
      "httpMethod": "post",
      "tag": "Configs",
      "description": "Subscribe For Notification Event",
      "parameters": [
        {
          "name": "eventName",
          "schema": "string",
          "required": true,
          "description": "eventName"
        },
        {
          "name": "event",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/configs/notifications/events/{eventName}",
      "method": "updateSubscribedNotificationEvent",
      "httpMethod": "put",
      "tag": "Configs",
      "description": "Update Notification Subscription",
      "parameters": [
        {
          "name": "eventName",
          "schema": "string",
          "required": true,
          "description": "eventName"
        },
        {
          "name": "event",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/configs/publicKey",
      "method": "getPublicEncryptionKey",
      "httpMethod": "get",
      "tag": "Configs",
      "description": "Get Public Key",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/dataExtracts/events",
      "method": "getDataExtractsEvents",
      "httpMethod": "get",
      "tag": "DataExtracts",
      "description": "Get Events",
      "parameters": [
        {
          "name": "eventName",
          "schema": "string",
          "required": true,
          "description": "Event Name"
        },
        {
          "name": "fromDate",
          "schema": "string",
          "required": true,
          "description": "From DateTime (YYYY-MM-DDThh:mm:ssZ)"
        },
        {
          "name": "toDate",
          "schema": "string",
          "required": true,
          "description": "To DateTime (YYYY-MM-DDThh:mm:ssZ)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/dataExtracts/userData",
      "method": "getDataExtractsUserData",
      "httpMethod": "get",
      "tag": "DataExtracts",
      "description": "Get userData",
      "parameters": [
        {
          "name": "fromDate",
          "schema": "string",
          "required": true,
          "description": "From DateTime (YYYY-MM-DDThh:mm:ssZ)"
        },
        {
          "name": "loginName",
          "schema": "string",
          "required": true,
          "description": "Login Name"
        },
        {
          "name": "toDate",
          "schema": "string",
          "required": true,
          "description": "To DateTime (YYYY-MM-DDThh:mm:ssZ)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/derived/holdingSummary",
      "method": "getHoldingSummary",
      "httpMethod": "get",
      "tag": "Derived",
      "description": "Get Holding Summary",
      "parameters": [
        {
          "name": "accountIds",
          "schema": "string",
          "description": "Comma separated accountIds"
        },
        {
          "name": "classificationType",
          "schema": "string",
          "description": "e.g. Country, Sector, etc."
        },
        {
          "name": "include",
          "schema": "string",
          "description": "details"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/derived/networth",
      "method": "getNetworth",
      "httpMethod": "get",
      "tag": "Derived",
      "description": "Get Networth Summary",
      "parameters": [
        {
          "name": "accountIds",
          "schema": "string",
          "description": "comma separated accountIds"
        },
        {
          "name": "container",
          "schema": "string",
          "description": "bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities"
        },
        {
          "name": "fromDate",
          "schema": "string",
          "description": "from date for balance retrieval (YYYY-MM-DD)"
        },
        {
          "name": "include",
          "schema": "string",
          "description": "details"
        },
        {
          "name": "interval",
          "schema": "string",
          "description": "D-daily, W-weekly or M-monthly"
        },
        {
          "name": "skip",
          "schema": "integer",
          "description": "skip (Min 0)"
        },
        {
          "name": "toDate",
          "schema": "string",
          "description": "toDate for balance retrieval (YYYY-MM-DD)"
        },
        {
          "name": "top",
          "schema": "integer",
          "description": "top (Max 500)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/derived/transactionSummary",
      "method": "getTransactionSummary",
      "httpMethod": "get",
      "tag": "Derived",
      "description": "Get Transaction Summary",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "description": "comma separated account Ids"
        },
        {
          "name": "categoryId",
          "schema": "string",
          "description": "comma separated categoryIds"
        },
        {
          "name": "categoryType",
          "schema": "string",
          "description": "INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION"
        },
        {
          "name": "fromDate",
          "schema": "string",
          "description": "YYYY-MM-DD format"
        },
        {
          "name": "groupBy",
          "schema": "string",
          "required": true,
          "description": "CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY"
        },
        {
          "name": "include",
          "schema": "string",
          "description": "details"
        },
        {
          "name": "includeUserCategory",
          "schema": "boolean",
          "description": "TRUE/FALSE"
        },
        {
          "name": "interval",
          "schema": "string",
          "description": "D-daily, W-weekly, M-mothly or Y-yearly"
        },
        {
          "name": "toDate",
          "schema": "string",
          "description": "YYYY-MM-DD format"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/documents",
      "method": "getDocuments",
      "httpMethod": "get",
      "tag": "Documents",
      "description": "Get Documents",
      "parameters": [
        {
          "name": "Keyword",
          "schema": "string",
          "description": "The string used to search a document by its name."
        },
        {
          "name": "accountId",
          "schema": "string",
          "description": "The unique identifier of an account. Retrieve documents for a given accountId."
        },
        {
          "name": "docType",
          "schema": "string",
          "description": "Accepts only one of the following valid document types: STMT, TAX, and EBILL."
        },
        {
          "name": "fromDate",
          "schema": "string",
          "description": "The date from which documents have to be retrieved."
        },
        {
          "name": "toDate",
          "schema": "string",
          "description": "The date to which documents have to be retrieved."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/documents/{documentId}",
      "method": "deleteDocument",
      "httpMethod": "delete",
      "tag": "Documents",
      "description": "Delete Document",
      "parameters": [
        {
          "name": "documentId",
          "schema": "string",
          "required": true,
          "description": "documentId"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/documents/{documentId}",
      "method": "downloadDocument",
      "httpMethod": "get",
      "tag": "Documents",
      "description": "Download a Document",
      "parameters": [
        {
          "name": "documentId",
          "schema": "string",
          "required": true,
          "description": "documentId"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/holdings",
      "method": "getHoldings",
      "httpMethod": "get",
      "tag": "Holdings",
      "description": "Get Holdings",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "description": "Comma separated accountId"
        },
        {
          "name": "assetClassification.classificationType",
          "schema": "string",
          "description": "e.g. Country, Sector, etc."
        },
        {
          "name": "classificationValue",
          "schema": "string",
          "description": "e.g. US"
        },
        {
          "name": "include",
          "schema": "string",
          "description": "assetClassification"
        },
        {
          "name": "providerAccountId",
          "schema": "string",
          "description": "providerAccountId"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/holdings/assetClassificationList",
      "method": "getAssetClassificationList",
      "httpMethod": "get",
      "tag": "Holdings",
      "description": "Get Asset Classification List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/holdings/holdingTypeList",
      "method": "getHoldingTypeList",
      "httpMethod": "get",
      "tag": "Holdings",
      "description": "Get Holding Type List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/holdings/securities",
      "method": "getSecurities",
      "httpMethod": "get",
      "tag": "Holdings",
      "description": "Get Security Details",
      "parameters": [
        {
          "name": "holdingId",
          "schema": "string",
          "description": "Comma separated holdingId"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/providerAccounts",
      "method": "getAllProviderAccounts",
      "httpMethod": "get",
      "tag": "ProviderAccounts",
      "description": "Get Provider Accounts",
      "parameters": [
        {
          "name": "include",
          "schema": "string",
          "description": "include"
        },
        {
          "name": "providerIds",
          "schema": "string",
          "description": "Comma separated providerIds."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/providerAccounts",
      "method": "editCredentialsOrRefreshProviderAccount",
      "httpMethod": "put",
      "tag": "ProviderAccounts",
      "description": "Update Account",
      "parameters": [
        {
          "name": "providerAccountIds",
          "schema": "string",
          "required": true,
          "description": "comma separated providerAccountIds"
        },
        {
          "name": "aggregationSource",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "consentId",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "dataset",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "datasetName",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "field",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "preferences",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/providerAccounts/profile",
      "method": "getProviderAccountProfiles",
      "httpMethod": "get",
      "tag": "ProviderAccounts",
      "description": "Get User Profile Details",
      "parameters": [
        {
          "name": "providerAccountId",
          "schema": "string",
          "description": "Comma separated providerAccountIds."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/providerAccounts/{providerAccountId}",
      "method": "deleteProviderAccount",
      "httpMethod": "delete",
      "tag": "ProviderAccounts",
      "description": "Delete Provider Account",
      "parameters": [
        {
          "name": "providerAccountId",
          "schema": "integer",
          "required": true,
          "description": "providerAccountId"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/providerAccounts/{providerAccountId}",
      "method": "getProviderAccount",
      "httpMethod": "get",
      "tag": "ProviderAccounts",
      "description": "Get Provider Account Details",
      "parameters": [
        {
          "name": "include",
          "schema": "string",
          "description": "include credentials,questions"
        },
        {
          "name": "providerAccountId",
          "schema": "integer",
          "required": true,
          "description": "providerAccountId"
        },
        {
          "name": "requestId",
          "schema": "string",
          "description": "The unique identifier for the request that returns contextual data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/providerAccounts/{providerAccountId}/preferences",
      "method": "updatePreferences",
      "httpMethod": "put",
      "tag": "ProviderAccounts",
      "description": "Update Preferences",
      "parameters": [
        {
          "name": "providerAccountId",
          "schema": "integer",
          "required": true,
          "description": "providerAccountId"
        },
        {
          "name": "preferences",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/providers",
      "method": "getAllProviders",
      "httpMethod": "get",
      "tag": "Providers",
      "description": "Get Providers",
      "parameters": [
        {
          "name": "capability",
          "schema": "string",
          "description": "CHALLENGE_DEPOSIT_VERIFICATION - capability search is deprecated"
        },
        {
          "name": "dataset$filter",
          "schema": "string",
          "description": "Expression to filter the providers by dataset(s) or dataset attribute(s). The default value will be the dataset or dataset attributes configured as default for the customer."
        },
        {
          "name": "fullAccountNumberFields",
          "schema": "string",
          "description": "Specify to filter the providers with values paymentAccountNumber,unmaskedAccountNumber."
        },
        {
          "name": "institutionId",
          "schema": "integer",
          "description": "Institution Id for Single site selection"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "Name in minimum 1 character or routing number."
        },
        {
          "name": "priority",
          "schema": "string",
          "description": "Search priority"
        },
        {
          "name": "providerId",
          "schema": "string",
          "description": "Max 5 Comma seperated Provider Ids"
        },
        {
          "name": "skip",
          "schema": "integer",
          "description": "skip (Min 0) - This is not applicable along with 'name' parameter."
        },
        {
          "name": "top",
          "schema": "integer",
          "description": "top (Max 500) - This is not applicable along with 'name' parameter."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/providers/count",
      "method": "getProvidersCount",
      "httpMethod": "get",
      "tag": "Providers",
      "description": "Get Providers Count",
      "parameters": [
        {
          "name": "capability",
          "schema": "string",
          "description": "CHALLENGE_DEPOSIT_VERIFICATION - capability search is deprecated"
        },
        {
          "name": "dataset$filter",
          "schema": "string",
          "description": "Expression to filter the providers by dataset(s) or dataset attribute(s). The default value will be the dataset or dataset attributes configured as default for the customer."
        },
        {
          "name": "fullAccountNumberFields",
          "schema": "string",
          "description": "Specify to filter the providers with values paymentAccountNumber,unmaskedAccountNumber."
        },
        {
          "name": "name",
          "schema": "string",
          "description": "Name in minimum 1 character or routing number."
        },
        {
          "name": "priority",
          "schema": "string",
          "description": "Search priority"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/providers/{providerId}",
      "method": "getProvider",
      "httpMethod": "get",
      "tag": "Providers",
      "description": "Get Provider Details",
      "parameters": [
        {
          "name": "providerId",
          "schema": "integer",
          "required": true,
          "description": "providerId"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/statements",
      "method": "getStatements",
      "httpMethod": "get",
      "tag": "Statements",
      "description": "Get Statements",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "description": "accountId"
        },
        {
          "name": "container",
          "schema": "string",
          "description": "creditCard/loan/insurance"
        },
        {
          "name": "fromDate",
          "schema": "string",
          "description": "from date for statement retrieval (YYYY-MM-DD)"
        },
        {
          "name": "isLatest",
          "schema": "string",
          "description": "isLatest (true/false)"
        },
        {
          "name": "status",
          "schema": "string",
          "description": "ACTIVE,TO_BE_CLOSED,CLOSED"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions",
      "method": "getTransactions",
      "httpMethod": "get",
      "tag": "Transactions",
      "description": "Get Transactions",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "description": "Comma separated accountIds"
        },
        {
          "name": "baseType",
          "schema": "string",
          "description": "DEBIT/CREDIT"
        },
        {
          "name": "categoryId",
          "schema": "string",
          "description": "Comma separated categoryIds"
        },
        {
          "name": "categoryType",
          "schema": "string",
          "description": "Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION)"
        },
        {
          "name": "container",
          "schema": "string",
          "description": "bank/creditCard/investment/insurance/loan"
        },
        {
          "name": "detailCategoryId",
          "schema": "string",
          "description": "Comma separated detailCategoryIds"
        },
        {
          "name": "fromDate",
          "schema": "string",
          "description": "Transaction from date(YYYY-MM-DD)"
        },
        {
          "name": "highLevelCategoryId",
          "schema": "string",
          "description": "Comma separated highLevelCategoryIds"
        },
        {
          "name": "keyword",
          "schema": "string",
          "description": "Transaction search text"
        },
        {
          "name": "skip",
          "schema": "integer",
          "description": "skip (Min 0)"
        },
        {
          "name": "toDate",
          "schema": "string",
          "description": "Transaction end date (YYYY-MM-DD)"
        },
        {
          "name": "top",
          "schema": "integer",
          "description": "top (Max 500)"
        },
        {
          "name": "type",
          "schema": "string",
          "description": "Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/categories",
      "method": "getTransactionCategories",
      "httpMethod": "get",
      "tag": "Transactions",
      "description": "Get Transaction Category List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/categories",
      "method": "createTransactionCategory",
      "httpMethod": "post",
      "tag": "Transactions",
      "description": "Create Category",
      "parameters": [
        {
          "name": "categoryName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "parentCategoryId",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "source",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/categories",
      "method": "updateTransactionCategory",
      "httpMethod": "put",
      "tag": "Transactions",
      "description": "Update Category",
      "parameters": [
        {
          "name": "categoryName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "highLevelCategoryName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "source",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/categories/rules",
      "method": "getTransactionCategorizationRulesDeprecated",
      "httpMethod": "get",
      "tag": "Transactions",
      "description": "Get Transaction Categorization Rules",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/categories/rules",
      "method": "createOrRunTransactionCategorizationRules",
      "httpMethod": "post",
      "tag": "Transactions",
      "description": "Create or Run Transaction Categorization Rule",
      "parameters": [
        {
          "name": "action",
          "schema": "string",
          "description": "To run rules, pass action=run. Only value run is supported"
        },
        {
          "name": "ruleParam",
          "schema": "string",
          "description": "rules(JSON format) to categorize the transactions"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/categories/rules/{ruleId}",
      "method": "deleteTransactionCategorizationRule",
      "httpMethod": "delete",
      "tag": "Transactions",
      "description": "Delete Transaction Categorization Rule",
      "parameters": [
        {
          "name": "ruleId",
          "schema": "integer",
          "required": true,
          "description": "ruleId"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/categories/rules/{ruleId}",
      "method": "runTransactionCategorizationRule",
      "httpMethod": "post",
      "tag": "Transactions",
      "description": "Run Transaction Categorization Rule",
      "parameters": [
        {
          "name": "action",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ruleId",
          "schema": "integer",
          "required": true,
          "description": "Unique id of the categorization rule"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/categories/rules/{ruleId}",
      "method": "updateTransactionCategorizationRule",
      "httpMethod": "put",
      "tag": "Transactions",
      "description": "Update Transaction Categorization Rule",
      "parameters": [
        {
          "name": "ruleId",
          "schema": "integer",
          "required": true,
          "description": "ruleId"
        },
        {
          "name": "rule",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/categories/txnRules",
      "method": "getTransactionCategorizationRules",
      "httpMethod": "get",
      "tag": "Transactions",
      "description": "Get Transaction Categorization Rules",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/categories/{categoryId}",
      "method": "deleteTransactionCategory",
      "httpMethod": "delete",
      "tag": "Transactions",
      "description": "Delete Category",
      "parameters": [
        {
          "name": "categoryId",
          "schema": "integer",
          "required": true,
          "description": "categoryId"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/count",
      "method": "getTransactionsCount",
      "httpMethod": "get",
      "tag": "Transactions",
      "description": "Get Transactions Count",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "description": "Comma separated accountIds\t"
        },
        {
          "name": "baseType",
          "schema": "string",
          "description": "DEBIT/CREDIT"
        },
        {
          "name": "categoryId",
          "schema": "string",
          "description": "Comma separated categoryIds"
        },
        {
          "name": "categoryType",
          "schema": "string",
          "description": "Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION)"
        },
        {
          "name": "container",
          "schema": "string",
          "description": "bank/creditCard/investment/insurance/loan"
        },
        {
          "name": "detailCategoryId",
          "schema": "string",
          "description": "Comma separated detailCategoryIds"
        },
        {
          "name": "fromDate",
          "schema": "string",
          "description": "Transaction from date(YYYY-MM-DD)"
        },
        {
          "name": "highLevelCategoryId",
          "schema": "string",
          "description": "Comma separated highLevelCategoryIds"
        },
        {
          "name": "keyword",
          "schema": "string",
          "description": "Transaction search text\t"
        },
        {
          "name": "toDate",
          "schema": "string",
          "description": "Transaction end date (YYYY-MM-DD)"
        },
        {
          "name": "type",
          "schema": "string",
          "description": "Transaction Type(SELL,SWEEP, etc.)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/{transactionId}",
      "method": "updateTransaction",
      "httpMethod": "put",
      "tag": "Transactions",
      "description": "Update Transaction",
      "parameters": [
        {
          "name": "transactionId",
          "schema": "integer",
          "required": true,
          "description": "transactionId"
        },
        {
          "name": "transaction",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/user",
      "method": "getUser",
      "httpMethod": "get",
      "tag": "User",
      "description": "Get User Details",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user",
      "method": "updateUser",
      "httpMethod": "put",
      "tag": "User",
      "description": "Update User Details",
      "parameters": [
        {
          "name": "user",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/user/accessTokens",
      "method": "getAccessTokens",
      "httpMethod": "get",
      "tag": "User",
      "description": "Get Access Tokens",
      "parameters": [
        {
          "name": "appIds",
          "schema": "string",
          "required": true,
          "description": "appIds"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/logout",
      "method": "userLogout",
      "httpMethod": "post",
      "tag": "User",
      "description": "User Logout",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/user/register",
      "method": "registerUser",
      "httpMethod": "post",
      "tag": "User",
      "description": "Register User",
      "parameters": [
        {
          "name": "user",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/samlLogin",
      "method": "samlLogin",
      "httpMethod": "post",
      "tag": "User",
      "description": "Saml Login",
      "parameters": [
        {
          "name": "issuer",
          "schema": "string",
          "required": true,
          "description": "issuer"
        },
        {
          "name": "samlResponse",
          "schema": "string",
          "required": true,
          "description": "samlResponse"
        },
        {
          "name": "source",
          "schema": "string",
          "description": "source"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/unregister",
      "method": "unregister",
      "httpMethod": "delete",
      "tag": "User",
      "description": "Delete User",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/verification",
      "method": "getVerificationStatus",
      "httpMethod": "get",
      "tag": "Verification",
      "description": "Get Verification Status",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "description": "Comma separated accountId"
        },
        {
          "name": "providerAccountId",
          "schema": "string",
          "description": "Comma separated providerAccountId"
        },
        {
          "name": "verificationType",
          "schema": "string",
          "description": "verificationType"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/verification",
      "method": "initiateMatchingOrChallengeDepositeVerification",
      "httpMethod": "post",
      "tag": "Verification",
      "description": "Initiaite Matching Service and Challenge Deposit",
      "parameters": [
        {
          "name": "verification",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/verification",
      "method": "verifyChallengeDeposit",
      "httpMethod": "put",
      "tag": "Verification",
      "description": "Verify Challenge Deposit",
      "parameters": [
        {
          "name": "verification",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/verifyAccount/{providerAccountId}",
      "method": "initiateAccountVerification",
      "httpMethod": "post",
      "tag": "Verify Account",
      "description": "Verify Accounts Using Transactions",
      "parameters": [
        {
          "name": "providerAccountId",
          "schema": "string",
          "required": true,
          "description": "providerAccountId"
        },
        {
          "name": "accountId",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "container",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "transactionCriteria",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "/",
  "apiDescription": "This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.",
  "apiTitle": "Yodlee Core APIs",
  "endpoints": 50,
  "sdkMethods": 70,
  "schemas": 179,
  "parameters": 166,
  "contactEmail": "developer@yodlee.com",
  "difficultyScore": 201,
  "difficulty": "Hard"
}