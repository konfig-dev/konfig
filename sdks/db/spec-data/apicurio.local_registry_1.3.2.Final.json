{
  "providerName": "apicurio.local",
  "openApiRaw": "https://raw.githubusercontent.com/Apicurio/apicurio-registry/master/app/src/main/resources-unfiltered/META-INF/resources/api-specifications/registry/v1/openapi.json",
  "securitySchemes": {},
  "homepage": "apicurio.local",
  "serviceName": "registry",
  "apiVersion": "1.3.2.Final",
  "methods": [
    {
      "url": "/artifacts",
      "method": "listArtifacts",
      "httpMethod": "get",
      "tag": "Artifacts",
      "typeScriptTag": "artifacts",
      "description": "List all artifact IDs",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts",
      "method": "createArtifact",
      "httpMethod": "post",
      "tag": "Artifacts",
      "typeScriptTag": "artifacts",
      "description": "Create artifact",
      "parameters": [
        {
          "name": "xRegistryArtifactType",
          "schema": "string",
          "description": "Specifies the type of the artifact being added. Possible values include:\n\n* Avro (`AVRO`)\n* Protobuf (`PROTOBUF`)\n* Protobuf File Descriptor (`PROTOBUF_FD`)\n* JSON Schema (`JSON`)\n* Kafka Connect (`KCONNECT`)\n* OpenAPI (`OPENAPI`)\n* AsyncAPI (`ASYNCAPI`)\n* GraphQL (`GRAPHQL`)\n* Web Services Description Language (`WSDL`)\n* XML Schema (`XSD`)"
        },
        {
          "name": "xRegistryArtifactId",
          "schema": "string",
          "description": "A client-provided, globally unique identifier for the new artifact."
        },
        {
          "name": "ifExists",
          "schema": "string",
          "description": "Set this option to instruct the server on what to do if the artifact already exists."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "409",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}",
      "method": "deleteArtifact",
      "httpMethod": "delete",
      "tag": "Artifacts",
      "typeScriptTag": "artifacts",
      "description": "Delete artifact",
      "parameters": [],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}",
      "method": "getLatestArtifact",
      "httpMethod": "get",
      "tag": "Artifacts",
      "typeScriptTag": "artifacts",
      "description": "Get latest artifact",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}",
      "method": "updateArtifact",
      "httpMethod": "put",
      "tag": "Artifacts",
      "typeScriptTag": "artifacts",
      "description": "Update artifact",
      "parameters": [
        {
          "name": "xRegistryArtifactType",
          "schema": "string",
          "required": false,
          "description": "Specifies the type of the artifact being added.  Possible values include:\n\n* Avro (`AVRO`)\n* Protobuf (`PROTOBUF`)\n* Protobuf File Descriptor (`PROTOBUF_FD`)\n* JSON Schema (`JSON`)\n* Kafka Connect (`KCONNECT`)\n* OpenAPI (`OPENAPI`)\n* AsyncAPI (`ASYNCAPI`)\n* GraphQL (`GRAPHQL`)\n* Web Services Description Language (`WSDL`)\n* XML Schema (`XSD`)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "409",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}/meta",
      "method": "getArtifactMetaData",
      "httpMethod": "get",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Get artifact metadata",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}/meta",
      "method": "getArtifactMetaDataByContent",
      "httpMethod": "post",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Get artifact metadata by content",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}/meta",
      "method": "updateArtifactMetaData",
      "httpMethod": "put",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Update artifact metadata",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "labels",
          "schema": "array",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "properties",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}/rules",
      "method": "deleteArtifactRules",
      "httpMethod": "delete",
      "tag": "Artifact rules",
      "typeScriptTag": "artifactRules",
      "description": "Delete artifact rules",
      "parameters": [],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}/rules",
      "method": "listArtifactRules",
      "httpMethod": "get",
      "tag": "Artifact rules",
      "typeScriptTag": "artifactRules",
      "description": "List artifact rules",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}/rules",
      "method": "createArtifactRule",
      "httpMethod": "post",
      "tag": "Artifact rules",
      "typeScriptTag": "artifactRules",
      "description": "Create artifact rule",
      "parameters": [
        {
          "name": "config",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}/rules/{rule}",
      "method": "deleteArtifactRule",
      "httpMethod": "delete",
      "tag": "Artifact rules",
      "typeScriptTag": "artifactRules",
      "description": "Delete artifact rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}/rules/{rule}",
      "method": "getArtifactRuleConfig",
      "httpMethod": "get",
      "tag": "Artifact rules",
      "typeScriptTag": "artifactRules",
      "description": "Get artifact rule configuration",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}/rules/{rule}",
      "method": "updateArtifactRuleConfig",
      "httpMethod": "put",
      "tag": "Artifact rules",
      "typeScriptTag": "artifactRules",
      "description": "Update artifact rule configuration",
      "parameters": [
        {
          "name": "config",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}/state",
      "method": "updateArtifactState",
      "httpMethod": "put",
      "tag": "Artifacts",
      "typeScriptTag": "artifacts",
      "description": "Update artifact state",
      "parameters": [
        {
          "name": "state",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}/test",
      "method": "testUpdateArtifact",
      "httpMethod": "put",
      "tag": "Artifact rules",
      "typeScriptTag": "artifactRules",
      "description": "Test update artifact",
      "parameters": [
        {
          "name": "xRegistryArtifactType",
          "schema": "string",
          "description": "This header parameter can be used to indicate the type of the artifact being added.  Possible values include: \n* Avro (`AVRO`)  \n* Protobuf (`PROTOBUF`)  \n* Protobuf File Descriptor (`PROTOBUF_FD`)  \n* JSON Schema (`JSON`)  \n* Kafka Connect (`KCONNECT`)  \n* OpenAPI (`OPENAPI`)  \n* AsyncAPI (`ASYNCAPI`) \n* GraphQL (`GRAPHQL`)  \n* Web Services Description Language (`WSDL`)  \n* XML Schema (`XSD`)"
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "409",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}/versions",
      "method": "listArtifactVersions",
      "httpMethod": "get",
      "tag": "Versions",
      "typeScriptTag": "versions",
      "description": "List artifact versions",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}/versions",
      "method": "createArtifactVersion",
      "httpMethod": "post",
      "tag": "Versions",
      "typeScriptTag": "versions",
      "description": "Create artifact version",
      "parameters": [
        {
          "name": "xRegistryArtifactType",
          "schema": "string",
          "description": "This header parameter can be used to indicate the type of the artifact being added. Possible values include: \n* Avro (`AVRO`)   \n* Protobuf (`PROTOBUF`)  \n* Protobuf File Descriptor (`PROTOBUF_FD`)   \n* JSON Schema (`JSON`)   \n* Kafka Connect (`KCONNECT`)   \n* OpenAPI (`OPENAPI`)   \n* AsyncAPI (`ASYNCAPI`)  \n* GraphQL (`GRAPHQL`)   \n* Web Services Description Language (`WSDL`)   \n* XML Schema (`XSD`)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "409",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}/versions/{version}",
      "method": "getArtifactVersion",
      "httpMethod": "get",
      "tag": "Versions",
      "typeScriptTag": "versions",
      "description": "Get artifact version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}/versions/{version}/meta",
      "method": "deleteArtifactVersionMetaData",
      "httpMethod": "delete",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Delete artifact version metadata",
      "parameters": [],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}/versions/{version}/meta",
      "method": "getArtifactVersionMetaData",
      "httpMethod": "get",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Get artifact version metadata",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}/versions/{version}/meta",
      "method": "updateArtifactVersionMetaData",
      "httpMethod": "put",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Update artifact version metadata",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "labels",
          "schema": "array",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "properties",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/artifacts/{artifactId}/versions/{version}/state",
      "method": "updateArtifactVersionState",
      "httpMethod": "put",
      "tag": "Versions",
      "typeScriptTag": "versions",
      "description": "Update artifact version state",
      "parameters": [
        {
          "name": "state",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/ids/{globalId}",
      "method": "getArtifactByGlobalId",
      "httpMethod": "get",
      "tag": "Artifacts",
      "typeScriptTag": "artifacts",
      "description": "Get artifact by global ID",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ids/{globalId}/meta",
      "method": "getArtifactMetaDataByGlobalId",
      "httpMethod": "get",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Get global artifact metadata",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/rules",
      "method": "deleteAllGlobalRules",
      "httpMethod": "delete",
      "tag": "Global rules",
      "typeScriptTag": "globalRules",
      "description": "Delete all global rules",
      "parameters": [],
      "responses": [
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/rules",
      "method": "listGlobalRules",
      "httpMethod": "get",
      "tag": "Global rules",
      "typeScriptTag": "globalRules",
      "description": "List global rules",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/rules",
      "method": "createGlobalRule",
      "httpMethod": "post",
      "tag": "Global rules",
      "typeScriptTag": "globalRules",
      "description": "Create global rule",
      "parameters": [
        {
          "name": "config",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "409",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/rules/{rule}",
      "method": "deleteGlobalRule",
      "httpMethod": "delete",
      "tag": "Global rules",
      "typeScriptTag": "globalRules",
      "description": "Delete global rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/rules/{rule}",
      "method": "getGlobalRuleConfig",
      "httpMethod": "get",
      "tag": "Global rules",
      "typeScriptTag": "globalRules",
      "description": "Get global rule configuration",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/rules/{rule}",
      "method": "updateGlobalRuleConfig",
      "httpMethod": "put",
      "tag": "Global rules",
      "typeScriptTag": "globalRules",
      "description": "Update global rule configuration",
      "parameters": [
        {
          "name": "config",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/search/artifacts",
      "method": "searchArtifacts",
      "httpMethod": "get",
      "tag": "Search",
      "typeScriptTag": "search",
      "description": "Search for artifacts",
      "parameters": [
        {
          "name": "search",
          "schema": "string",
          "description": "The text to search."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": true,
          "description": "The number of artifacts to skip before starting to collect the result set."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": true,
          "description": "The number of artifacts to return."
        },
        {
          "name": "over",
          "schema": "string",
          "required": false,
          "description": "What fields to search."
        },
        {
          "name": "order",
          "schema": "string",
          "required": false,
          "description": "Sort order, ascending or descending."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Describes the response received when searching for artifacts."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/search/artifacts/{artifactId}/versions",
      "method": "searchVersions",
      "httpMethod": "get",
      "tag": "Search",
      "typeScriptTag": "search",
      "description": "Search artifact versions",
      "parameters": [
        {
          "name": "offset",
          "schema": "integer",
          "required": true,
          "description": "The number of versions to skip before starting to collect the result set."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": true,
          "description": "The number of versions to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Describes the response received when searching for artifacts."
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    }
  ],
  "apiBaseUrl": "http://apicurio.local",
  "apiDescription": "Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.\n\nThe Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata. \n\nThe supported artifact types include:\n- Apache Avro schema\n- AsyncAPI specification\n- Google protocol buffers (schema and file descriptor)\n- GraphQL schema\n- JSON Schema\n- Kafka Connect schema\n- OpenAPI specification\n- Web Services Description Language\n- XML Schema Definition\n\n\n**Note**: The Apicurio Registry REST API is available from `http://MY-REGISTRY-URL/api`. You must prefix all API operation paths with `/api`, for example, `api/ids/{globalId}`.\n",
  "apiTitle": "Apicurio Registry API",
  "endpoints": 17,
  "sdkMethods": 64,
  "schemas": 16,
  "parameters": 31,
  "contactUrl": "https://github.com/apicurio/apicurio-registry",
  "contactEmail": "apicurio@lists.jboss.org",
  "difficultyScore": 79.75,
  "difficulty": "Easy"
}