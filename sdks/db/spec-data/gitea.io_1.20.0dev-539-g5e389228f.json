{
  "providerName": "gitea.io",
  "openApiRaw": "https://try.gitea.io/swagger.v1.json",
  "securitySchemes": {
    "AccessToken": {
      "in": "query",
      "name": "access_token",
      "type": "apiKey"
    },
    "AuthorizationHeaderToken": {
      "description": "API tokens must be prepended with \"token\" followed by a space.",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    },
    "BasicAuth": {
      "scheme": "basic",
      "type": "http"
    },
    "SudoHeader": {
      "description": "Sudo API request as the user provided as the key. Admin privileges are required.",
      "in": "header",
      "name": "Sudo",
      "type": "apiKey"
    },
    "SudoParam": {
      "description": "Sudo API request as the user provided as the key. Admin privileges are required.",
      "in": "query",
      "name": "sudo",
      "type": "apiKey"
    },
    "TOTPHeader": {
      "description": "Must be used in combination with BasicAuth if two-factor authentication is enabled.",
      "in": "header",
      "name": "X-GITEA-OTP",
      "type": "apiKey"
    },
    "Token": {
      "in": "query",
      "name": "token",
      "type": "apiKey"
    }
  },
  "homepage": "gitea.io",
  "apiVersion": "1.20.0+dev-539-g5e389228f",
  "methods": [
    {
      "url": "/activitypub/user-id/{user-id}",
      "method": "activitypubPerson",
      "httpMethod": "get",
      "tag": "activitypub",
      "typeScriptTag": "activitypub",
      "description": "Returns the Person actor for a user",
      "parameters": [
        {
          "name": "userId",
          "schema": "integer",
          "required": true,
          "description": "user ID of the user"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "ActivityPub type"
        }
      ]
    },
    {
      "url": "/activitypub/user-id/{user-id}/inbox",
      "method": "activitypubPersonInbox",
      "httpMethod": "post",
      "tag": "activitypub",
      "typeScriptTag": "activitypub",
      "description": "Send to the inbox",
      "parameters": [
        {
          "name": "userId",
          "schema": "integer",
          "required": true,
          "description": "user ID of the user"
        }
      ],
      "responses": []
    },
    {
      "url": "/admin/cron",
      "method": "adminCronList",
      "httpMethod": "get",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "List cron tasks",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/admin/cron/{task}",
      "method": "adminCronRun",
      "httpMethod": "post",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "Run cron task",
      "parameters": [
        {
          "name": "task",
          "schema": "string",
          "required": true,
          "description": "task to run"
        }
      ],
      "responses": []
    },
    {
      "url": "/admin/emails",
      "method": "adminGetAllEmails",
      "httpMethod": "get",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "List all emails",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/admin/emails/search",
      "method": "adminSearchEmails",
      "httpMethod": "get",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "Search all emails",
      "parameters": [
        {
          "name": "q",
          "schema": "string",
          "description": "keyword"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/admin/hooks",
      "method": "adminListHooks",
      "httpMethod": "get",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "List system's webhooks",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/admin/hooks",
      "method": "adminCreateHook",
      "httpMethod": "post",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "Create a hook",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "authorization_header",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "branch_filter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "config",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "events",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Hook a hook is a web hook when one repository changed"
        }
      ]
    },
    {
      "url": "/admin/hooks/{id}",
      "method": "adminGetHook",
      "httpMethod": "get",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "Get a hook",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the hook to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Hook a hook is a web hook when one repository changed"
        }
      ]
    },
    {
      "url": "/admin/hooks/{id}",
      "method": "adminEditHook",
      "httpMethod": "patch",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "Update a hook",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the hook to update"
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "authorization_header",
          "schema": "string",
          "description": ""
        },
        {
          "name": "branch_filter",
          "schema": "string",
          "description": ""
        },
        {
          "name": "config",
          "schema": "object",
          "description": ""
        },
        {
          "name": "events",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Hook a hook is a web hook when one repository changed"
        }
      ]
    },
    {
      "url": "/admin/orgs",
      "method": "adminGetAllOrgs",
      "httpMethod": "get",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "List all organizations",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/admin/unadopted",
      "method": "adminUnadoptedList",
      "httpMethod": "get",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "List unadopted repositories",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        },
        {
          "name": "pattern",
          "schema": "string",
          "description": "pattern of repositories to search for"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/admin/unadopted/{owner}/{repo}",
      "method": "adminDeleteUnadoptedRepository",
      "httpMethod": "delete",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "Delete unadopted files",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": []
    },
    {
      "url": "/admin/unadopted/{owner}/{repo}",
      "method": "adminAdoptRepository",
      "httpMethod": "post",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "Adopt unadopted files as a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": []
    },
    {
      "url": "/admin/users",
      "method": "adminSearchUsers",
      "httpMethod": "get",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "Search users according filter conditions",
      "parameters": [
        {
          "name": "sourceId",
          "schema": "integer",
          "description": "ID of the user's login source to search for"
        },
        {
          "name": "loginName",
          "schema": "string",
          "description": "user's login name to search for"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/admin/users",
      "method": "adminCreateUser",
      "httpMethod": "post",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "Create a user",
      "parameters": [
        {
          "name": "created_at",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "full_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "login_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "must_change_password",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "restricted",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "send_notify",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "source_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "visibility",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "User represents a user"
        }
      ]
    },
    {
      "url": "/admin/users/{username}",
      "method": "adminDeleteUser",
      "httpMethod": "delete",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "Delete a user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user to delete"
        },
        {
          "name": "purge",
          "schema": "boolean",
          "description": "purge the user from the system completely"
        }
      ],
      "responses": []
    },
    {
      "url": "/admin/users/{username}",
      "method": "adminEditUser",
      "httpMethod": "patch",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "Edit an existing user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user to edit"
        },
        {
          "name": "active",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "admin",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "allow_create_organization",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "allow_git_hook",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "allow_import_local",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "full_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "location",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "login_name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "max_repo_creation",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "must_change_password",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "prohibit_login",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "restricted",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "source_id",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "visibility",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "website",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "User represents a user"
        }
      ]
    },
    {
      "url": "/admin/users/{username}/keys",
      "method": "adminCreatePublicKey",
      "httpMethod": "post",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "Add a public key on behalf of a user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of the user"
        },
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "read_only",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "PublicKey publickey is a user key to push code to repository"
        }
      ]
    },
    {
      "url": "/admin/users/{username}/keys/{id}",
      "method": "adminDeleteUserPublicKey",
      "httpMethod": "delete",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "Delete a user's public key",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the key to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/admin/users/{username}/orgs",
      "method": "adminCreateOrg",
      "httpMethod": "post",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "Create an organization",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of the user that will own the created organization"
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "full_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "location",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "repo_admin_change_team_access",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "visibility",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "website",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Organization represents an organization"
        }
      ]
    },
    {
      "url": "/admin/users/{username}/rename",
      "method": "adminRenameUser",
      "httpMethod": "post",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "Rename a user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "existing username of user"
        },
        {
          "name": "new_username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/admin/users/{username}/repos",
      "method": "adminCreateRepo",
      "httpMethod": "post",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "Create a repository on behalf of a user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of the user. This user will own the created repository"
        },
        {
          "name": "auto_init",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "default_branch",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "gitignores",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "issue_labels",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "license",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "readme",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "template",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "trust_model",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Repository represents a repository"
        }
      ]
    },
    {
      "url": "/amdin/hooks/{id}",
      "method": "adminDeleteHook",
      "httpMethod": "delete",
      "tag": "admin",
      "typeScriptTag": "admin",
      "description": "Delete a hook",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the hook to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/markdown",
      "method": "renderMarkdown",
      "httpMethod": "post",
      "tag": "miscellaneous",
      "typeScriptTag": "miscellaneous",
      "description": "Render a markdown document as HTML",
      "parameters": [
        {
          "name": "Context",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Mode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Text",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Wiki",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/markdown/raw",
      "method": "renderMarkdownRaw",
      "httpMethod": "post",
      "tag": "miscellaneous",
      "typeScriptTag": "miscellaneous",
      "description": "Render raw markdown as HTML",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/markup",
      "method": "renderMarkup",
      "httpMethod": "post",
      "tag": "miscellaneous",
      "typeScriptTag": "miscellaneous",
      "description": "Render a markup document as HTML",
      "parameters": [
        {
          "name": "Context",
          "schema": "string",
          "description": ""
        },
        {
          "name": "FilePath",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Mode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Text",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Wiki",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/nodeinfo",
      "method": "getNodeInfo",
      "httpMethod": "get",
      "tag": "miscellaneous",
      "typeScriptTag": "miscellaneous",
      "description": "Returns the nodeinfo of the Gitea application",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "NodeInfo contains standardized way of exposing metadata about a server running one of the distributed social networks"
        }
      ]
    },
    {
      "url": "/notifications",
      "method": "notifyGetList",
      "httpMethod": "get",
      "tag": "notification",
      "typeScriptTag": "notification",
      "description": "List users's notification threads",
      "parameters": [
        {
          "name": "all",
          "schema": "boolean",
          "description": "If true, show notifications marked as read. Default value is false"
        },
        {
          "name": "statusTypes",
          "schema": "array",
          "description": "Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread & pinned."
        },
        {
          "name": "subjectType",
          "schema": "array",
          "description": "filter notifications by subject type"
        },
        {
          "name": "since",
          "schema": "string",
          "description": "Only show notifications updated after the given time. This is a timestamp in RFC 3339 format"
        },
        {
          "name": "before",
          "schema": "string",
          "description": "Only show notifications updated before the given time. This is a timestamp in RFC 3339 format"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/notifications",
      "method": "notifyReadList",
      "httpMethod": "put",
      "tag": "notification",
      "typeScriptTag": "notification",
      "description": "Mark notification threads as read, pinned or unread",
      "parameters": [
        {
          "name": "lastReadAt",
          "schema": "string",
          "description": "Describes the last point that notifications were checked. Anything updated since this time will not be updated."
        },
        {
          "name": "all",
          "schema": "string",
          "description": "If true, mark all notifications on this repo. Default value is false"
        },
        {
          "name": "statusTypes",
          "schema": "array",
          "description": "Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread."
        },
        {
          "name": "toStatus",
          "schema": "string",
          "description": "Status to mark notifications as, Defaults to read."
        }
      ],
      "responses": [
        {
          "statusCode": "205",
          "description": ""
        }
      ]
    },
    {
      "url": "/notifications/new",
      "method": "notifyNewAvailable",
      "httpMethod": "get",
      "tag": "notification",
      "typeScriptTag": "notification",
      "description": "Check if unread notifications exist",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "NotificationCount number of unread notifications"
        }
      ]
    },
    {
      "url": "/notifications/threads/{id}",
      "method": "notifyGetThread",
      "httpMethod": "get",
      "tag": "notification",
      "typeScriptTag": "notification",
      "description": "Get notification thread by ID",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "id of notification thread"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "NotificationThread expose Notification on API"
        }
      ]
    },
    {
      "url": "/notifications/threads/{id}",
      "method": "notifyReadThread",
      "httpMethod": "patch",
      "tag": "notification",
      "typeScriptTag": "notification",
      "description": "Mark notification thread as read by ID",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "id of notification thread"
        },
        {
          "name": "toStatus",
          "schema": "string",
          "description": "Status to mark notifications as"
        }
      ],
      "responses": [
        {
          "statusCode": "205",
          "description": "NotificationThread expose Notification on API"
        }
      ]
    },
    {
      "url": "/org/{org}/repos",
      "method": "createOrgRepoDeprecated",
      "httpMethod": "post",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Create a repository in an organization",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of organization"
        },
        {
          "name": "auto_init",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "default_branch",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "gitignores",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "issue_labels",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "license",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "readme",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "template",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "trust_model",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Repository represents a repository"
        }
      ]
    },
    {
      "url": "/orgs",
      "method": "orgGetAll",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Get list of organizations",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/orgs",
      "method": "orgCreate",
      "httpMethod": "post",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Create an organization",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "full_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "location",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "repo_admin_change_team_access",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "visibility",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "website",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Organization represents an organization"
        }
      ]
    },
    {
      "url": "/orgs/{org}",
      "method": "orgDelete",
      "httpMethod": "delete",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Delete an organization",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "organization that is to be deleted"
        }
      ],
      "responses": []
    },
    {
      "url": "/orgs/{org}",
      "method": "orgGet",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Get an organization",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Organization represents an organization"
        }
      ]
    },
    {
      "url": "/orgs/{org}",
      "method": "orgEdit",
      "httpMethod": "patch",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Edit an organization",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization to edit"
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "full_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "location",
          "schema": "string",
          "description": ""
        },
        {
          "name": "repo_admin_change_team_access",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "visibility",
          "schema": "string",
          "description": ""
        },
        {
          "name": "website",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Organization represents an organization"
        }
      ]
    },
    {
      "url": "/orgs/{org}/activities/feeds",
      "method": "orgListActivityFeeds",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "List an organization's activity feeds",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the org"
        },
        {
          "name": "date",
          "schema": "string",
          "description": "the date of the activities to be found"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/orgs/{org}/hooks",
      "method": "orgListHooks",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "List an organization's webhooks",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/orgs/{org}/hooks",
      "method": "orgCreateHook",
      "httpMethod": "post",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Create a hook",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "active",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "authorization_header",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "branch_filter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "config",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "events",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Hook a hook is a web hook when one repository changed"
        }
      ]
    },
    {
      "url": "/orgs/{org}/hooks/{id}",
      "method": "orgDeleteHook",
      "httpMethod": "delete",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Delete a hook",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the hook to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/orgs/{org}/hooks/{id}",
      "method": "orgGetHook",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Get a hook",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the hook to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Hook a hook is a web hook when one repository changed"
        }
      ]
    },
    {
      "url": "/orgs/{org}/hooks/{id}",
      "method": "orgEditHook",
      "httpMethod": "patch",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Update a hook",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the hook to update"
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "authorization_header",
          "schema": "string",
          "description": ""
        },
        {
          "name": "branch_filter",
          "schema": "string",
          "description": ""
        },
        {
          "name": "config",
          "schema": "object",
          "description": ""
        },
        {
          "name": "events",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Hook a hook is a web hook when one repository changed"
        }
      ]
    },
    {
      "url": "/orgs/{org}/labels",
      "method": "orgListLabels",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "List an organization's labels",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/orgs/{org}/labels",
      "method": "orgCreateLabel",
      "httpMethod": "post",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Create a label for an organization",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "color",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "exclusive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Label a label to an issue or a pr"
        }
      ]
    },
    {
      "url": "/orgs/{org}/labels/{id}",
      "method": "orgDeleteLabel",
      "httpMethod": "delete",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Delete a label",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the label to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/orgs/{org}/labels/{id}",
      "method": "orgGetLabel",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Get a single label",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the label to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Label a label to an issue or a pr"
        }
      ]
    },
    {
      "url": "/orgs/{org}/labels/{id}",
      "method": "orgEditLabel",
      "httpMethod": "patch",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Update a label",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the label to edit"
        },
        {
          "name": "color",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "exclusive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Label a label to an issue or a pr"
        }
      ]
    },
    {
      "url": "/orgs/{org}/members",
      "method": "orgListMembers",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "List an organization's members",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/orgs/{org}/members/{username}",
      "method": "orgDeleteMember",
      "httpMethod": "delete",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Remove a member from an organization",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of the user"
        }
      ],
      "responses": []
    },
    {
      "url": "/orgs/{org}/members/{username}",
      "method": "orgIsMember",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Check if a user is a member of an organization",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of the user"
        }
      ],
      "responses": []
    },
    {
      "url": "/orgs/{org}/public_members",
      "method": "orgListPublicMembers",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "List an organization's public members",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/orgs/{org}/public_members/{username}",
      "method": "orgConcealMember",
      "httpMethod": "delete",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Conceal a user's membership",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of the user"
        }
      ],
      "responses": []
    },
    {
      "url": "/orgs/{org}/public_members/{username}",
      "method": "orgIsPublicMember",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Check if a user is a public member of an organization",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of the user"
        }
      ],
      "responses": []
    },
    {
      "url": "/orgs/{org}/public_members/{username}",
      "method": "orgPublicizeMember",
      "httpMethod": "put",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Publicize a user's membership",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of the user"
        }
      ],
      "responses": []
    },
    {
      "url": "/orgs/{org}/repos",
      "method": "orgListRepos",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "List an organization's repos",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/orgs/{org}/repos",
      "method": "createOrgRepo",
      "httpMethod": "post",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Create a repository in an organization",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of organization"
        },
        {
          "name": "auto_init",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "default_branch",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "gitignores",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "issue_labels",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "license",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "readme",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "template",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "trust_model",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Repository represents a repository"
        }
      ]
    },
    {
      "url": "/orgs/{org}/teams",
      "method": "orgListTeams",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "List an organization's teams",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/orgs/{org}/teams",
      "method": "orgCreateTeam",
      "httpMethod": "post",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Create a team",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "can_create_org_repo",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "includes_all_repositories",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "permission",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "units",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "units_map",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Team represents a team in an organization"
        }
      ]
    },
    {
      "url": "/orgs/{org}/teams/search",
      "method": "teamSearch",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Search for teams within an organization",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        },
        {
          "name": "q",
          "schema": "string",
          "description": "keywords to search"
        },
        {
          "name": "includeDesc",
          "schema": "boolean",
          "description": "include search within team description (defaults to true)"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/packages/{owner}",
      "method": "listPackages",
      "httpMethod": "get",
      "tag": "package",
      "typeScriptTag": "package",
      "description": "Gets all packages of an owner",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the packages"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        },
        {
          "name": "type",
          "schema": "string",
          "description": "package type filter"
        },
        {
          "name": "q",
          "schema": "string",
          "description": "name filter"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/packages/{owner}/{type}/{name}/{version}",
      "method": "deletePackage",
      "httpMethod": "delete",
      "tag": "package",
      "typeScriptTag": "package",
      "description": "Delete a package",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the package"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "type of the package"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "name of the package"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "version of the package"
        }
      ],
      "responses": []
    },
    {
      "url": "/packages/{owner}/{type}/{name}/{version}",
      "method": "getPackage",
      "httpMethod": "get",
      "tag": "package",
      "typeScriptTag": "package",
      "description": "Gets a package",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the package"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "type of the package"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "name of the package"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "version of the package"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Package represents a package"
        }
      ]
    },
    {
      "url": "/packages/{owner}/{type}/{name}/{version}/files",
      "method": "listPackageFiles",
      "httpMethod": "get",
      "tag": "package",
      "typeScriptTag": "package",
      "description": "Gets all files of a package",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the package"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "type of the package"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "name of the package"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "version of the package"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/issues/search",
      "method": "issueSearchIssues",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Search for issues across the repositories that the user has access to",
      "parameters": [
        {
          "name": "state",
          "schema": "string",
          "description": "whether issue is open or closed"
        },
        {
          "name": "labels",
          "schema": "string",
          "description": "comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded"
        },
        {
          "name": "milestones",
          "schema": "string",
          "description": "comma separated list of milestone names. Fetch only issues that have any of this milestones. Non existent are discarded"
        },
        {
          "name": "q",
          "schema": "string",
          "description": "search string"
        },
        {
          "name": "priorityRepoId",
          "schema": "integer",
          "description": "repository to prioritize in the results"
        },
        {
          "name": "type",
          "schema": "string",
          "description": "filter by type (issues / pulls) if set"
        },
        {
          "name": "since",
          "schema": "string",
          "description": "Only show notifications updated after the given time. This is a timestamp in RFC 3339 format"
        },
        {
          "name": "before",
          "schema": "string",
          "description": "Only show notifications updated before the given time. This is a timestamp in RFC 3339 format"
        },
        {
          "name": "assigned",
          "schema": "boolean",
          "description": "filter (issues / pulls) assigned to you, default is false"
        },
        {
          "name": "created",
          "schema": "boolean",
          "description": "filter (issues / pulls) created by you, default is false"
        },
        {
          "name": "mentioned",
          "schema": "boolean",
          "description": "filter (issues / pulls) mentioning you, default is false"
        },
        {
          "name": "reviewRequested",
          "schema": "boolean",
          "description": "filter pulls requesting your review, default is false"
        },
        {
          "name": "reviewed",
          "schema": "boolean",
          "description": "filter pulls reviewed by you, default is false"
        },
        {
          "name": "owner",
          "schema": "string",
          "description": "filter by owner"
        },
        {
          "name": "team",
          "schema": "string",
          "description": "filter by team (requires organization owner parameter to be provided)"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/migrate",
      "method": "repoMigrate",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Migrate a remote git repository",
      "parameters": [
        {
          "name": "auth_password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "auth_token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "auth_username",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "clone_addr",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "issues",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "labels",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lfs",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lfs_endpoint",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "milestones",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "mirror",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "mirror_interval",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "pull_requests",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "releases",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "repo_name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "repo_owner",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "service",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "uid",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "wiki",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Repository represents a repository"
        }
      ]
    },
    {
      "url": "/repos/search",
      "method": "repoSearch",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Search for repositories",
      "parameters": [
        {
          "name": "q",
          "schema": "string",
          "description": "keyword"
        },
        {
          "name": "topic",
          "schema": "boolean",
          "description": "Limit search to repositories with keyword as topic"
        },
        {
          "name": "includeDesc",
          "schema": "boolean",
          "description": "include search of keyword within repository description"
        },
        {
          "name": "uid",
          "schema": "integer",
          "description": "search only for repos that the user with the given id owns or contributes to"
        },
        {
          "name": "priorityOwnerId",
          "schema": "integer",
          "description": "repo owner to prioritize in the results"
        },
        {
          "name": "teamId",
          "schema": "integer",
          "description": "search only for repos that belong to the given team id"
        },
        {
          "name": "starredBy",
          "schema": "integer",
          "description": "search only for repos that the user with the given id has starred"
        },
        {
          "name": "private",
          "schema": "boolean",
          "description": "include private repositories this user has access to (defaults to true)"
        },
        {
          "name": "isPrivate",
          "schema": "boolean",
          "description": "show only pubic, private or all repositories (defaults to all)"
        },
        {
          "name": "template",
          "schema": "boolean",
          "description": "include template repositories this user has access to (defaults to true)"
        },
        {
          "name": "archived",
          "schema": "boolean",
          "description": "show only archived, non-archived or all repositories (defaults to all)"
        },
        {
          "name": "mode",
          "schema": "string",
          "description": "type of repository to search for. Supported values are \"fork\", \"source\", \"mirror\" and \"collaborative\""
        },
        {
          "name": "exclusive",
          "schema": "boolean",
          "description": "if `uid` is given, search only for repos that the user owns"
        },
        {
          "name": "sort",
          "schema": "string",
          "description": "sort repos by attribute. Supported values are \"alpha\", \"created\", \"updated\", \"size\", and \"id\". Default is \"alpha\""
        },
        {
          "name": "order",
          "schema": "string",
          "description": "sort order, either \"asc\" (ascending) or \"desc\" (descending). Default is \"asc\", ignored if \"sort\" is not specified."
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "SearchResults results of a successful search"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}",
      "method": "repoDelete",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Delete a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo to delete"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}",
      "method": "repoGet",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Repository represents a repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}",
      "method": "repoEdit",
      "httpMethod": "patch",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Edit a repository's properties. Only fields that are set will be changed.",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo to edit"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo to edit"
        },
        {
          "name": "allow_manual_merge",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "allow_merge_commits",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "allow_rebase",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "allow_rebase_explicit",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "allow_rebase_update",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "allow_squash_merge",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "archived",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "autodetect_manual_merge",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "default_allow_maintainer_edit",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "default_branch",
          "schema": "string",
          "description": ""
        },
        {
          "name": "default_delete_branch_after_merge",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "default_merge_style",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enable_prune",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "external_tracker",
          "schema": "object",
          "description": ""
        },
        {
          "name": "external_wiki",
          "schema": "object",
          "description": ""
        },
        {
          "name": "has_actions",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "has_issues",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "has_packages",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "has_projects",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "has_pull_requests",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "has_releases",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "has_wiki",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ignore_whitespace_conflicts",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "internal_tracker",
          "schema": "object",
          "description": ""
        },
        {
          "name": "mirror_interval",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "private",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "template",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "website",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Repository represents a repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/activities/feeds",
      "method": "repoListActivityFeeds",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "List a repository's activity feeds",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "date",
          "schema": "string",
          "description": "the date of the activities to be found"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/archive/{archive}",
      "method": "repoGetArchive",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get an archive of a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "archive",
          "schema": "string",
          "required": true,
          "description": "the git reference for download with attached archive format (e.g. master.zip)"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/assignees",
      "method": "repoGetAssignees",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Return all users that have write access and can be assigned to issues",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/branch_protections",
      "method": "repoListBranchProtection",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "List branch protections for a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/branch_protections",
      "method": "repoCreateBranchProtection",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Create a branch protections for a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "approvals_whitelist_teams",
          "schema": "array",
          "description": ""
        },
        {
          "name": "approvals_whitelist_username",
          "schema": "array",
          "description": ""
        },
        {
          "name": "block_on_official_review_requests",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "block_on_outdated_branch",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "block_on_rejected_reviews",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "branch_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dismiss_stale_approvals",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enable_approvals_whitelist",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enable_merge_whitelist",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enable_push",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enable_push_whitelist",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enable_status_check",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "merge_whitelist_teams",
          "schema": "array",
          "description": ""
        },
        {
          "name": "merge_whitelist_usernames",
          "schema": "array",
          "description": ""
        },
        {
          "name": "protected_file_patterns",
          "schema": "string",
          "description": ""
        },
        {
          "name": "push_whitelist_deploy_keys",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "push_whitelist_teams",
          "schema": "array",
          "description": ""
        },
        {
          "name": "push_whitelist_usernames",
          "schema": "array",
          "description": ""
        },
        {
          "name": "require_signed_commits",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "required_approvals",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "rule_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "status_check_contexts",
          "schema": "array",
          "description": ""
        },
        {
          "name": "unprotected_file_patterns",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "BranchProtection represents a branch protection for a repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/branch_protections/{name}",
      "method": "repoDeleteBranchProtection",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Delete a specific branch protection for the repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "name of protected branch"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/branch_protections/{name}",
      "method": "repoGetBranchProtection",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a specific branch protection for the repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "name of protected branch"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "BranchProtection represents a branch protection for a repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/branch_protections/{name}",
      "method": "repoEditBranchProtection",
      "httpMethod": "patch",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Edit a branch protections for a repository. Only fields that are set will be changed",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "name of protected branch"
        },
        {
          "name": "approvals_whitelist_teams",
          "schema": "array",
          "description": ""
        },
        {
          "name": "approvals_whitelist_username",
          "schema": "array",
          "description": ""
        },
        {
          "name": "block_on_official_review_requests",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "block_on_outdated_branch",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "block_on_rejected_reviews",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "dismiss_stale_approvals",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enable_approvals_whitelist",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enable_merge_whitelist",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enable_push",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enable_push_whitelist",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enable_status_check",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "merge_whitelist_teams",
          "schema": "array",
          "description": ""
        },
        {
          "name": "merge_whitelist_usernames",
          "schema": "array",
          "description": ""
        },
        {
          "name": "protected_file_patterns",
          "schema": "string",
          "description": ""
        },
        {
          "name": "push_whitelist_deploy_keys",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "push_whitelist_teams",
          "schema": "array",
          "description": ""
        },
        {
          "name": "push_whitelist_usernames",
          "schema": "array",
          "description": ""
        },
        {
          "name": "require_signed_commits",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "required_approvals",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "status_check_contexts",
          "schema": "array",
          "description": ""
        },
        {
          "name": "unprotected_file_patterns",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "BranchProtection represents a branch protection for a repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/branches",
      "method": "repoListBranches",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "List a repository's branches",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/branches",
      "method": "repoCreateBranch",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Create a branch",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "new_branch_name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "old_branch_name",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Branch represents a repository branch"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/branches/{branch}",
      "method": "repoDeleteBranch",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Delete a specific branch from a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "branch",
          "schema": "string",
          "required": true,
          "description": "branch to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/branches/{branch}",
      "method": "repoGetBranch",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Retrieve a specific branch from a repository, including its effective branch protection",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "branch",
          "schema": "string",
          "required": true,
          "description": "branch to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Branch represents a repository branch"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/collaborators",
      "method": "repoListCollaborators",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "List a repository's collaborators",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/collaborators/{collaborator}",
      "method": "repoDeleteCollaborator",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Delete a collaborator from a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "collaborator",
          "schema": "string",
          "required": true,
          "description": "username of the collaborator to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/collaborators/{collaborator}",
      "method": "repoCheckCollaborator",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Check if a user is a collaborator of a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "collaborator",
          "schema": "string",
          "required": true,
          "description": "username of the collaborator"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/collaborators/{collaborator}",
      "method": "repoAddCollaborator",
      "httpMethod": "put",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Add a collaborator to a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "collaborator",
          "schema": "string",
          "required": true,
          "description": "username of the collaborator to add"
        },
        {
          "name": "permission",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/collaborators/{collaborator}/permission",
      "method": "repoGetRepoPermissions",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get repository permissions for a user",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "collaborator",
          "schema": "string",
          "required": true,
          "description": "username of the collaborator"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "RepoCollaboratorPermission to get repository permission for a collaborator"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/commits",
      "method": "repoGetAllCommits",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a list of all commits from a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "sha",
          "schema": "string",
          "description": "SHA or branch to start listing commits from (usually 'master')"
        },
        {
          "name": "path",
          "schema": "string",
          "description": "filepath of a file/dir"
        },
        {
          "name": "stat",
          "schema": "boolean",
          "description": "include diff stats for every commit (disable for speedup, default 'true')"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results (ignored if used with 'path')"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": "APIError is an api error with a message"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/commits/{ref}/status",
      "method": "repoGetCombinedStatusByRef",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a commit's combined status, by branch/tag/commit reference",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "ref",
          "schema": "string",
          "required": true,
          "description": "name of branch/tag/commit"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "CombinedStatus holds the combined state of several statuses for a single commit"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/commits/{ref}/statuses",
      "method": "repoListStatusesByRef",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a commit's statuses, by branch/tag/commit reference",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "ref",
          "schema": "string",
          "required": true,
          "description": "name of branch/tag/commit"
        },
        {
          "name": "sort",
          "schema": "string",
          "description": "type of sort"
        },
        {
          "name": "state",
          "schema": "string",
          "description": "type of state"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/contents",
      "method": "repoGetContentsList",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Gets the metadata of all the entries of the root dir",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "ref",
          "schema": "string",
          "description": "The name of the commit/branch/tag. Default the repository’s default branch (usually master)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/contents/{filepath}",
      "method": "repoDeleteFile",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Delete a file in a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "filepath",
          "schema": "string",
          "required": true,
          "description": "path of the file to delete"
        },
        {
          "name": "author",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "branch",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "committer",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "dates",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "message",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "new_branch",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sha",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "signoff",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "FileDeleteResponse contains information about a repo's file that was deleted"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/contents/{filepath}",
      "method": "repoGetContents",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "filepath",
          "schema": "string",
          "required": true,
          "description": "path of the dir, file, symlink or submodule in the repo"
        },
        {
          "name": "ref",
          "schema": "string",
          "description": "The name of the commit/branch/tag. Default the repository’s default branch (usually master)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "ContentsResponse contains information about a repo's entry's (dir, file, symlink, submodule) metadata and content"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/contents/{filepath}",
      "method": "repoCreateFile",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Create a file in a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "filepath",
          "schema": "string",
          "required": true,
          "description": "path of the file to create"
        },
        {
          "name": "author",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "branch",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "committer",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "content",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "dates",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "message",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "new_branch",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "signoff",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "FileResponse contains information about a repo's file"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/contents/{filepath}",
      "method": "repoUpdateFile",
      "httpMethod": "put",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Update a file in a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "filepath",
          "schema": "string",
          "required": true,
          "description": "path of the file to update"
        },
        {
          "name": "author",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "branch",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "committer",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "content",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "dates",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "from_path",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "message",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "new_branch",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sha",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "signoff",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "FileResponse contains information about a repo's file"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/diffpatch",
      "method": "repoApplyDiffPatch",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Apply diff patch to repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "author",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "branch",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "committer",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "content",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "dates",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "from_path",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "message",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "new_branch",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sha",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "signoff",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "FileResponse contains information about a repo's file"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/editorconfig/{filepath}",
      "method": "repoGetEditorConfig",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get the EditorConfig definitions of a file in a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "filepath",
          "schema": "string",
          "required": true,
          "description": "filepath of file to get"
        },
        {
          "name": "ref",
          "schema": "string",
          "description": "The name of the commit/branch/tag. Default the repository’s default branch (usually master)"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/forks",
      "method": "listForks",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "List a repository's forks",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/forks",
      "method": "createFork",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Fork a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo to fork"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo to fork"
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "organization",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": "Repository represents a repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/git/blobs/{sha}",
      "method": "getBlob",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Gets the blob of a repository.",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "sha",
          "schema": "string",
          "required": true,
          "description": "sha of the commit"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "GitBlobResponse represents a git blob"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/git/commits/{sha}",
      "method": "repoGetSingleCommit",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a single commit from a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "sha",
          "schema": "string",
          "required": true,
          "description": "a git ref or commit sha"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/git/commits/{sha}.{diffType}",
      "method": "repoDownloadCommitDiffOrPatch",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a commit's diff or patch",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "sha",
          "schema": "string",
          "required": true,
          "description": "SHA of the commit to get"
        },
        {
          "name": "diffType",
          "schema": "string",
          "required": true,
          "description": "whether the output is diff or patch"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/git/notes/{sha}",
      "method": "repoGetNote",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a note corresponding to a single commit from a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "sha",
          "schema": "string",
          "required": true,
          "description": "a git ref or commit sha"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Note contains information related to a git note"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/git/refs",
      "method": "repoListAllGitRefs",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get specified ref or filtered repository's refs",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/git/refs/{ref}",
      "method": "repoListGitRefs",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get specified ref or filtered repository's refs",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "ref",
          "schema": "string",
          "required": true,
          "description": "part or full name of the ref"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/git/tags/{sha}",
      "method": "getAnnotatedTag",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Gets the tag object of an annotated tag (not lightweight tags)",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "sha",
          "schema": "string",
          "required": true,
          "description": "sha of the tag. The Git tags API only supports annotated tag objects, not lightweight tags."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "AnnotatedTag represents an annotated tag"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/git/trees/{sha}",
      "method": "getTree",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Gets the tree of a repository.",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "sha",
          "schema": "string",
          "required": true,
          "description": "sha of the commit"
        },
        {
          "name": "recursive",
          "schema": "boolean",
          "description": "show all directories and files"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number; the 'truncated' field in the response will be true if there are still more items after this page, false if the last page"
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "number of items per page"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "GitTreeResponse returns a git tree"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/hooks",
      "method": "repoListHooks",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "List the hooks in a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/hooks",
      "method": "repoCreateHook",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Create a hook",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "active",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "authorization_header",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "branch_filter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "config",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "events",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Hook a hook is a web hook when one repository changed"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/hooks/git",
      "method": "repoListGitHooks",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "List the Git hooks in a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/hooks/git/{id}",
      "method": "repoDeleteGitHook",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Delete a Git hook in a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "id of the hook to get"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/hooks/git/{id}",
      "method": "repoGetGitHook",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a Git hook",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "id of the hook to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "GitHook represents a Git repository hook"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/hooks/git/{id}",
      "method": "repoEditGitHook",
      "httpMethod": "patch",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Edit a Git hook in a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "id of the hook to get"
        },
        {
          "name": "content",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "GitHook represents a Git repository hook"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/hooks/{id}",
      "method": "repoDeleteHook",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Delete a hook in a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the hook to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/hooks/{id}",
      "method": "repoGetHook",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a hook",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the hook to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Hook a hook is a web hook when one repository changed"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/hooks/{id}",
      "method": "repoEditHook",
      "httpMethod": "patch",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Edit a hook in a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "index of the hook"
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "authorization_header",
          "schema": "string",
          "description": ""
        },
        {
          "name": "branch_filter",
          "schema": "string",
          "description": ""
        },
        {
          "name": "config",
          "schema": "object",
          "description": ""
        },
        {
          "name": "events",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Hook a hook is a web hook when one repository changed"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/hooks/{id}/tests",
      "method": "repoTestHook",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Test a push webhook",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the hook to test"
        },
        {
          "name": "ref",
          "schema": "string",
          "description": "The name of the commit/branch/tag, indicates which commit will be loaded to the webhook payload."
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/issue_config",
      "method": "repoGetIssueConfig",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Returns the issue config for a repo",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issue_config/validate",
      "method": "repoValidateIssueConfig",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Returns the validation information for a issue config",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issue_templates",
      "method": "repoGetIssueTemplates",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get available issue templates for a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues",
      "method": "issueListIssues",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "List a repository's issues",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "state",
          "schema": "string",
          "description": "whether issue is open or closed"
        },
        {
          "name": "labels",
          "schema": "string",
          "description": "comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded"
        },
        {
          "name": "q",
          "schema": "string",
          "description": "search string"
        },
        {
          "name": "type",
          "schema": "string",
          "description": "filter by type (issues / pulls) if set"
        },
        {
          "name": "milestones",
          "schema": "string",
          "description": "comma separated list of milestone names or ids. It uses names and fall back to ids. Fetch only issues that have any of this milestones. Non existent milestones are discarded"
        },
        {
          "name": "since",
          "schema": "string",
          "description": "Only show items updated after the given time. This is a timestamp in RFC 3339 format"
        },
        {
          "name": "before",
          "schema": "string",
          "description": "Only show items updated before the given time. This is a timestamp in RFC 3339 format"
        },
        {
          "name": "createdBy",
          "schema": "string",
          "description": "Only show items which were created by the the given user"
        },
        {
          "name": "assignedBy",
          "schema": "string",
          "description": "Only show items for which the given user is assigned"
        },
        {
          "name": "mentionedBy",
          "schema": "string",
          "description": "Only show items in which the given user was mentioned"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues",
      "method": "issueCreateIssue",
      "httpMethod": "post",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Create an issue. If using deadline only the date will be taken into account, and time of day ignored.",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "assignee",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "assignees",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "body",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "closed",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "due_date",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "labels",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "milestone",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "ref",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Issue represents an issue in a repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/comments",
      "method": "issueGetRepoComments",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "List all comments in a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "since",
          "schema": "string",
          "description": "if provided, only comments updated since the provided time are returned."
        },
        {
          "name": "before",
          "schema": "string",
          "description": "if provided, only comments updated before the provided time are returned."
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/comments/{id}",
      "method": "issueDeleteComment",
      "httpMethod": "delete",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Delete a comment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of comment to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/issues/comments/{id}",
      "method": "issueGetComment",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Get a comment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the comment"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Comment represents a comment on a commit or issue"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/comments/{id}",
      "method": "issueEditComment",
      "httpMethod": "patch",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Edit a comment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the comment to edit"
        },
        {
          "name": "body",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Comment represents a comment on a commit or issue"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/comments/{id}/assets",
      "method": "issueListIssueCommentAttachments",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "List comment's attachments",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the comment"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/comments/{id}/assets",
      "method": "issueCreateIssueCommentAttachment",
      "httpMethod": "post",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Create a comment attachment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the comment"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "name of the attachment"
        },
        {
          "name": "attachment",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Attachment a generic attachment"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}",
      "method": "issueDeleteIssueCommentAttachment",
      "httpMethod": "delete",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Delete a comment attachment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the comment"
        },
        {
          "name": "attachmentId",
          "schema": "integer",
          "required": true,
          "description": "id of the attachment to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}",
      "method": "issueGetIssueCommentAttachment",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Get a comment attachment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the comment"
        },
        {
          "name": "attachmentId",
          "schema": "integer",
          "required": true,
          "description": "id of the attachment to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Attachment a generic attachment"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}",
      "method": "issueEditIssueCommentAttachment",
      "httpMethod": "patch",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Edit a comment attachment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the comment"
        },
        {
          "name": "attachmentId",
          "schema": "integer",
          "required": true,
          "description": "id of the attachment to edit"
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Attachment a generic attachment"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/comments/{id}/reactions",
      "method": "issueDeleteCommentReaction",
      "httpMethod": "delete",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Remove a reaction from a comment of an issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the comment to edit"
        },
        {
          "name": "content",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/issues/comments/{id}/reactions",
      "method": "issueGetCommentReactions",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Get a list of reactions from a comment of an issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the comment to edit"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/comments/{id}/reactions",
      "method": "issuePostCommentReaction",
      "httpMethod": "post",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Add a reaction to a comment of an issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the comment to edit"
        },
        {
          "name": "content",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Reaction contain one reaction"
        },
        {
          "statusCode": "201",
          "description": "Reaction contain one reaction"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}",
      "method": "issueDelete",
      "httpMethod": "delete",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Delete an issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of issue to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}",
      "method": "issueGetIssue",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Get an issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Issue represents an issue in a repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}",
      "method": "issueEditIssue",
      "httpMethod": "patch",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Edit an issue. If using deadline only the date will be taken into account, and time of day ignored.",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue to edit"
        },
        {
          "name": "assignee",
          "schema": "string",
          "description": ""
        },
        {
          "name": "assignees",
          "schema": "array",
          "description": ""
        },
        {
          "name": "body",
          "schema": "string",
          "description": ""
        },
        {
          "name": "due_date",
          "schema": "string",
          "description": ""
        },
        {
          "name": "milestone",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ref",
          "schema": "string",
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "description": ""
        },
        {
          "name": "unset_due_date",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Issue represents an issue in a repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/assets",
      "method": "issueListIssueAttachments",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "List issue's attachments",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/assets",
      "method": "issueCreateIssueAttachment",
      "httpMethod": "post",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Create an issue attachment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "name of the attachment"
        },
        {
          "name": "attachment",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Attachment a generic attachment"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}",
      "method": "issueDeleteIssueAttachment",
      "httpMethod": "delete",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Delete an issue attachment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "attachmentId",
          "schema": "integer",
          "required": true,
          "description": "id of the attachment to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}",
      "method": "issueGetIssueAttachment",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Get an issue attachment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "attachmentId",
          "schema": "integer",
          "required": true,
          "description": "id of the attachment to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Attachment a generic attachment"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}",
      "method": "issueEditIssueAttachment",
      "httpMethod": "patch",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Edit an issue attachment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "attachmentId",
          "schema": "integer",
          "required": true,
          "description": "id of the attachment to edit"
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Attachment a generic attachment"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/blocks",
      "method": "issueRemoveIssueBlocking",
      "httpMethod": "delete",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Unblock the issue given in the body by the issue in path",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "index",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "owner",
          "schema": "string",
          "description": ""
        },
        {
          "name": "repo",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Issue represents an issue in a repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/blocks",
      "method": "issueListBlocks",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "List issues that are blocked by this issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/blocks",
      "method": "issueCreateIssueBlocking",
      "httpMethod": "post",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Block the issue given in the body by the issue in path",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "index",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "owner",
          "schema": "string",
          "description": ""
        },
        {
          "name": "repo",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Issue represents an issue in a repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/comments",
      "method": "issueGetComments",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "List all comments on an issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "since",
          "schema": "string",
          "description": "if provided, only comments updated since the specified time are returned."
        },
        {
          "name": "before",
          "schema": "string",
          "description": "if provided, only comments updated before the provided time are returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/comments",
      "method": "issueCreateComment",
      "httpMethod": "post",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Add a comment to an issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "body",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Comment represents a comment on a commit or issue"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/comments/{id}",
      "method": "issueDeleteCommentDeprecated",
      "httpMethod": "delete",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Delete a comment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "this parameter is ignored"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of comment to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/comments/{id}",
      "method": "issueEditCommentDeprecated",
      "httpMethod": "patch",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Edit a comment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "this parameter is ignored"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the comment to edit"
        },
        {
          "name": "body",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Comment represents a comment on a commit or issue"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/deadline",
      "method": "issueEditIssueDeadline",
      "httpMethod": "post",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored.",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue to create or update a deadline on"
        },
        {
          "name": "due_date",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "IssueDeadline represents an issue deadline"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/dependencies",
      "method": "issueRemoveIssueDependencies",
      "httpMethod": "delete",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Remove an issue dependency",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "index",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "owner",
          "schema": "string",
          "description": ""
        },
        {
          "name": "repo",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Issue represents an issue in a repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/dependencies",
      "method": "issueListIssueDependencies",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "List an issue's dependencies, i.e all issues that block this issue.",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/dependencies",
      "method": "issueCreateIssueDependencies",
      "httpMethod": "post",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Make the issue in the url depend on the issue in the form.",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "index",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "owner",
          "schema": "string",
          "description": ""
        },
        {
          "name": "repo",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Issue represents an issue in a repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/labels",
      "method": "issueClearLabels",
      "httpMethod": "delete",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Remove all labels from an issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/labels",
      "method": "issueGetLabels",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Get an issue's labels",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/labels",
      "method": "issueAddLabel",
      "httpMethod": "post",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Add a label to an issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "labels",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/labels",
      "method": "issueReplaceLabels",
      "httpMethod": "put",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Replace an issue's labels",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "labels",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/labels/{id}",
      "method": "issueRemoveLabel",
      "httpMethod": "delete",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Remove a label from an issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the label to remove"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/reactions",
      "method": "issueDeleteIssueReaction",
      "httpMethod": "delete",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Remove a reaction from an issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "content",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/reactions",
      "method": "issueGetIssueReactions",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Get a list reactions of an issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/reactions",
      "method": "issuePostIssueReaction",
      "httpMethod": "post",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Add a reaction to an issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "content",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Reaction contain one reaction"
        },
        {
          "statusCode": "201",
          "description": "Reaction contain one reaction"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/stopwatch/delete",
      "method": "issueDeleteStopWatch",
      "httpMethod": "delete",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Delete an issue's existing stopwatch.",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue to stop the stopwatch on"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/stopwatch/start",
      "method": "issueStartStopWatch",
      "httpMethod": "post",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Start stopwatch on an issue.",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue to create the stopwatch on"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/stopwatch/stop",
      "method": "issueStopStopWatch",
      "httpMethod": "post",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Stop an issue's existing stopwatch.",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue to stop the stopwatch on"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/subscriptions",
      "method": "issueSubscriptions",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Get users who subscribed on an issue.",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/subscriptions/check",
      "method": "issueCheckSubscription",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Check if user is subscribed to an issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "WatchInfo represents an API watch status of one repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}",
      "method": "issueDeleteSubscription",
      "httpMethod": "delete",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Unsubscribe user from issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "user witch unsubscribe"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}",
      "method": "issueAddSubscription",
      "httpMethod": "put",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Subscribe user to issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "user to subscribe"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/timeline",
      "method": "issueGetCommentsAndTimeline",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "List all comments and events on an issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "since",
          "schema": "string",
          "description": "if provided, only comments updated since the specified time are returned."
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        },
        {
          "name": "before",
          "schema": "string",
          "description": "if provided, only comments updated before the provided time are returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/times",
      "method": "issueResetTime",
      "httpMethod": "delete",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Reset a tracked time of an issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue to add tracked time to"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/times",
      "method": "issueTrackedTimes",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "List an issue's tracked times",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "user",
          "schema": "string",
          "description": "optional filter by user (available for issue managers)"
        },
        {
          "name": "since",
          "schema": "string",
          "description": "Only show times updated after the given time. This is a timestamp in RFC 3339 format"
        },
        {
          "name": "before",
          "schema": "string",
          "description": "Only show times updated before the given time. This is a timestamp in RFC 3339 format"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/times",
      "method": "issueAddTime",
      "httpMethod": "post",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Add tracked time to a issue",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "time",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "user_name",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "TrackedTime worked time for an issue / pr"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/issues/{index}/times/{id}",
      "method": "issueDeleteTime",
      "httpMethod": "delete",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Delete specific tracked time",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the issue"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of time to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/keys",
      "method": "repoListKeys",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "List a repository's keys",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "keyId",
          "schema": "integer",
          "description": "the key_id to search for"
        },
        {
          "name": "fingerprint",
          "schema": "string",
          "description": "fingerprint of the key"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/keys",
      "method": "repoCreateKey",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Add a key to a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "read_only",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "DeployKey a deploy key"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/keys/{id}",
      "method": "repoDeleteKey",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Delete a key from a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the key to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/keys/{id}",
      "method": "repoGetKey",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a repository's key by id",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the key to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "DeployKey a deploy key"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/labels",
      "method": "issueListLabels",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Get all of a repository's labels",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/labels",
      "method": "issueCreateLabel",
      "httpMethod": "post",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Create a label",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "color",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "exclusive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Label a label to an issue or a pr"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/labels/{id}",
      "method": "issueDeleteLabel",
      "httpMethod": "delete",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Delete a label",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the label to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/labels/{id}",
      "method": "issueGetLabel",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Get a single label",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the label to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Label a label to an issue or a pr"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/labels/{id}",
      "method": "issueEditLabel",
      "httpMethod": "patch",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Update a label",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the label to edit"
        },
        {
          "name": "color",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "exclusive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Label a label to an issue or a pr"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/languages",
      "method": "repoGetLanguages",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get languages and number of bytes of code written",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/media/{filepath}",
      "method": "repoGetRawFileOrLfs",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a file or it's LFS object from a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "filepath",
          "schema": "string",
          "required": true,
          "description": "filepath of the file to get"
        },
        {
          "name": "ref",
          "schema": "string",
          "description": "The name of the commit/branch/tag. Default the repository’s default branch (usually master)"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/milestones",
      "method": "issueGetMilestonesList",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Get all of a repository's opened milestones",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "state",
          "schema": "string",
          "description": "Milestone state, Recognized values are open, closed and all. Defaults to \"open\""
        },
        {
          "name": "name",
          "schema": "string",
          "description": "filter by milestone name"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/milestones",
      "method": "issueCreateMilestone",
      "httpMethod": "post",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Create a milestone",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "due_on",
          "schema": "string",
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Milestone milestone is a collection of issues on one repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/milestones/{id}",
      "method": "issueDeleteMilestone",
      "httpMethod": "delete",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Delete a milestone",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "the milestone to delete, identified by ID and if not available by name"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/milestones/{id}",
      "method": "issueGetMilestone",
      "httpMethod": "get",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Get a milestone",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "the milestone to get, identified by ID and if not available by name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Milestone milestone is a collection of issues on one repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/milestones/{id}",
      "method": "issueEditMilestone",
      "httpMethod": "patch",
      "tag": "issue",
      "typeScriptTag": "issue",
      "description": "Update a milestone",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "the milestone to edit, identified by ID and if not available by name"
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "due_on",
          "schema": "string",
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Milestone milestone is a collection of issues on one repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/mirror-sync",
      "method": "repoMirrorSync",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Sync a mirrored repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo to sync"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo to sync"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/notifications",
      "method": "notifyGetRepoList",
      "httpMethod": "get",
      "tag": "notification",
      "typeScriptTag": "notification",
      "description": "List users's notification threads on a specific repo",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "all",
          "schema": "boolean",
          "description": "If true, show notifications marked as read. Default value is false"
        },
        {
          "name": "statusTypes",
          "schema": "array",
          "description": "Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread & pinned"
        },
        {
          "name": "subjectType",
          "schema": "array",
          "description": "filter notifications by subject type"
        },
        {
          "name": "since",
          "schema": "string",
          "description": "Only show notifications updated after the given time. This is a timestamp in RFC 3339 format"
        },
        {
          "name": "before",
          "schema": "string",
          "description": "Only show notifications updated before the given time. This is a timestamp in RFC 3339 format"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/notifications",
      "method": "notifyReadRepoList",
      "httpMethod": "put",
      "tag": "notification",
      "typeScriptTag": "notification",
      "description": "Mark notification threads as read, pinned or unread on a specific repo",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "all",
          "schema": "string",
          "description": "If true, mark all notifications on this repo. Default value is false"
        },
        {
          "name": "statusTypes",
          "schema": "array",
          "description": "Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread."
        },
        {
          "name": "toStatus",
          "schema": "string",
          "description": "Status to mark notifications as. Defaults to read."
        },
        {
          "name": "lastReadAt",
          "schema": "string",
          "description": "Describes the last point that notifications were checked. Anything updated since this time will not be updated."
        }
      ],
      "responses": [
        {
          "statusCode": "205",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/pulls",
      "method": "repoListPullRequests",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "List a repo's pull requests",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "state",
          "schema": "string",
          "description": "State of pull request: open or closed (optional)"
        },
        {
          "name": "sort",
          "schema": "string",
          "description": "Type of sort"
        },
        {
          "name": "milestone",
          "schema": "integer",
          "description": "ID of the milestone"
        },
        {
          "name": "labels",
          "schema": "array",
          "description": "Label IDs"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/pulls",
      "method": "repoCreatePullRequest",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Create a pull request",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "assignee",
          "schema": "string",
          "description": ""
        },
        {
          "name": "assignees",
          "schema": "array",
          "description": ""
        },
        {
          "name": "base",
          "schema": "string",
          "description": ""
        },
        {
          "name": "body",
          "schema": "string",
          "description": ""
        },
        {
          "name": "due_date",
          "schema": "string",
          "description": ""
        },
        {
          "name": "head",
          "schema": "string",
          "description": ""
        },
        {
          "name": "labels",
          "schema": "array",
          "description": ""
        },
        {
          "name": "milestone",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "PullRequest represents a pull request"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}",
      "method": "repoGetPullRequest",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a pull request",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "PullRequest represents a pull request"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}",
      "method": "repoEditPullRequest",
      "httpMethod": "patch",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Update a pull request. If using deadline only the date will be taken into account, and time of day ignored.",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request to edit"
        },
        {
          "name": "allow_maintainer_edit",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "assignee",
          "schema": "string",
          "description": ""
        },
        {
          "name": "assignees",
          "schema": "array",
          "description": ""
        },
        {
          "name": "base",
          "schema": "string",
          "description": ""
        },
        {
          "name": "body",
          "schema": "string",
          "description": ""
        },
        {
          "name": "due_date",
          "schema": "string",
          "description": ""
        },
        {
          "name": "labels",
          "schema": "array",
          "description": ""
        },
        {
          "name": "milestone",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "description": ""
        },
        {
          "name": "unset_due_date",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "PullRequest represents a pull request"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}.{diffType}",
      "method": "repoDownloadPullDiffOrPatch",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a pull request diff or patch",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request to get"
        },
        {
          "name": "diffType",
          "schema": "string",
          "required": true,
          "description": "whether the output is diff or patch"
        },
        {
          "name": "binary",
          "schema": "boolean",
          "description": "whether to include binary file changes. if true, the diff is applicable with `git apply`"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}/commits",
      "method": "repoGetPullRequestCommits",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get commits for a pull request",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request to get"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}/files",
      "method": "repoGetPullRequestFiles",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get changed files for a pull request",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request to get"
        },
        {
          "name": "skipTo",
          "schema": "string",
          "description": "skip to given file"
        },
        {
          "name": "whitespace",
          "schema": "string",
          "description": "whitespace behavior"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}/merge",
      "method": "repoCancelScheduledAutoMerge",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Cancel the scheduled auto merge for the given pull request",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request to merge"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}/merge",
      "method": "repoPullRequestIsMerged",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Check if a pull request has been merged",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}/merge",
      "method": "repoMergePullRequest",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Merge a pull request",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request to merge"
        },
        {
          "name": "Do",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "MergeCommitID",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "MergeMessageField",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "MergeTitleField",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "delete_branch_after_merge",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "force_merge",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "head_commit_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "merge_when_checks_succeed",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}/requested_reviewers",
      "method": "repoDeletePullReviewRequests",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "cancel review requests for a pull request",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request"
        },
        {
          "name": "reviewers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "team_reviewers",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}/requested_reviewers",
      "method": "repoCreatePullReviewRequests",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "create review requests for a pull request",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request"
        },
        {
          "name": "reviewers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "team_reviewers",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}/reviews",
      "method": "repoListPullReviews",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "List all reviews for a pull request",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}/reviews",
      "method": "repoCreatePullReview",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Create a review to an pull request",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request"
        },
        {
          "name": "body",
          "schema": "string",
          "description": ""
        },
        {
          "name": "comments",
          "schema": "array",
          "description": ""
        },
        {
          "name": "commit_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "event",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "PullReview represents a pull request review"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}",
      "method": "repoDeletePullReview",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Delete a specific review from a pull request",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the review"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}",
      "method": "repoGetPullReview",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a specific review for a pull request",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the review"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "PullReview represents a pull request review"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}",
      "method": "repoSubmitPullReview",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Submit a pending review to an pull request",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the review"
        },
        {
          "name": "body",
          "schema": "string",
          "description": ""
        },
        {
          "name": "event",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "PullReview represents a pull request review"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/comments",
      "method": "repoGetPullReviewComments",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a specific review for a pull request",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the review"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/dismissals",
      "method": "repoDismissPullReview",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Dismiss a review for a pull request",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the review"
        },
        {
          "name": "message",
          "schema": "string",
          "description": ""
        },
        {
          "name": "priors",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "PullReview represents a pull request review"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/undismissals",
      "method": "repoUnDismissPullReview",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Cancel to dismiss a review for a pull request",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the review"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "PullReview represents a pull request review"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/pulls/{index}/update",
      "method": "repoUpdatePullRequest",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Merge PR's baseBranch into headBranch",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "index of the pull request to get"
        },
        {
          "name": "style",
          "schema": "string",
          "description": "how to update pull request"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/push_mirrors",
      "method": "repoListPushMirrors",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get all push mirrors of the repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/push_mirrors",
      "method": "repoAddPushMirror",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "add a push mirror to the repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "interval",
          "schema": "string",
          "description": ""
        },
        {
          "name": "remote_address",
          "schema": "string",
          "description": ""
        },
        {
          "name": "remote_password",
          "schema": "string",
          "description": ""
        },
        {
          "name": "remote_username",
          "schema": "string",
          "description": ""
        },
        {
          "name": "sync_on_commit",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "PushMirror represents information of a push mirror"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/push_mirrors-sync",
      "method": "repoPushMirrorSync",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Sync all push mirrored repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo to sync"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo to sync"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/push_mirrors/{name}",
      "method": "repoDeletePushMirror",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "deletes a push mirror from a repository by remoteName",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "remote name of the pushMirror"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/push_mirrors/{name}",
      "method": "repoGetPushMirrorByRemoteName",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get push mirror of the repository by remoteName",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "remote name of push mirror"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "PushMirror represents information of a push mirror"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/raw/{filepath}",
      "method": "repoGetRawFile",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a file from a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "filepath",
          "schema": "string",
          "required": true,
          "description": "filepath of the file to get"
        },
        {
          "name": "ref",
          "schema": "string",
          "description": "The name of the commit/branch/tag. Default the repository’s default branch (usually master)"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/releases",
      "method": "repoListReleases",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "List a repo's releases",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "draft",
          "schema": "boolean",
          "description": "filter (exclude / include) drafts, if you dont have repo write access none will show"
        },
        {
          "name": "preRelease",
          "schema": "boolean",
          "description": "filter (exclude / include) pre-releases"
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "page size of results, deprecated - use limit"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/releases",
      "method": "repoCreateRelease",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Create a release",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "body",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "draft",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "prerelease",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "tag_name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "target_commitish",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Release represents a repository release"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/releases/latest",
      "method": "repoGetLatestRelease",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Gets the most recent non-prerelease, non-draft release of a repository, sorted by created_at",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Release represents a repository release"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/releases/tags/{tag}",
      "method": "repoDeleteReleaseByTag",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Delete a release by tag name",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "tag",
          "schema": "string",
          "required": true,
          "description": "tag name of the release to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/releases/tags/{tag}",
      "method": "repoGetReleaseByTag",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a release by tag name",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "tag",
          "schema": "string",
          "required": true,
          "description": "tag name of the release to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Release represents a repository release"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/releases/{id}",
      "method": "repoDeleteRelease",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Delete a release",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the release to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/releases/{id}",
      "method": "repoGetRelease",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a release",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the release to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Release represents a repository release"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/releases/{id}",
      "method": "repoEditRelease",
      "httpMethod": "patch",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Update a release",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the release to edit"
        },
        {
          "name": "body",
          "schema": "string",
          "description": ""
        },
        {
          "name": "draft",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "prerelease",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "tag_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "target_commitish",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Release represents a repository release"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/releases/{id}/assets",
      "method": "repoListReleaseAttachments",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "List release's attachments",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the release"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/releases/{id}/assets",
      "method": "repoCreateReleaseAttachment",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Create a release attachment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the release"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "name of the attachment"
        },
        {
          "name": "attachment",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Attachment a generic attachment"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}",
      "method": "repoDeleteReleaseAttachment",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Delete a release attachment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the release"
        },
        {
          "name": "attachmentId",
          "schema": "integer",
          "required": true,
          "description": "id of the attachment to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}",
      "method": "repoGetReleaseAttachment",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a release attachment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the release"
        },
        {
          "name": "attachmentId",
          "schema": "integer",
          "required": true,
          "description": "id of the attachment to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Attachment a generic attachment"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}",
      "method": "repoEditReleaseAttachment",
      "httpMethod": "patch",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Edit a release attachment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the release"
        },
        {
          "name": "attachmentId",
          "schema": "integer",
          "required": true,
          "description": "id of the attachment to edit"
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Attachment a generic attachment"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/reviewers",
      "method": "repoGetReviewers",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Return all users that can be requested to review in this repo",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/signing-key.gpg",
      "method": "repoSigningKey",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get signing-key.gpg for given repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/stargazers",
      "method": "repoListStargazers",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "List a repo's stargazers",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/statuses/{sha}",
      "method": "repoListStatuses",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a commit's statuses",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "sha",
          "schema": "string",
          "required": true,
          "description": "sha of the commit"
        },
        {
          "name": "sort",
          "schema": "string",
          "description": "type of sort"
        },
        {
          "name": "state",
          "schema": "string",
          "description": "type of state"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/statuses/{sha}",
      "method": "repoCreateStatus",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Create a commit status",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "sha",
          "schema": "string",
          "required": true,
          "description": "sha of the commit"
        },
        {
          "name": "context",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "target_url",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "CommitStatus holds a single status of a single Commit"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/subscribers",
      "method": "repoListSubscribers",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "List a repo's watchers",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/subscription",
      "method": "userCurrentDeleteSubscription",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Unwatch a repo",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/subscription",
      "method": "userCurrentCheckSubscription",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Check if the current user is watching a repo",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "WatchInfo represents an API watch status of one repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/subscription",
      "method": "userCurrentPutSubscription",
      "httpMethod": "put",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Watch a repo",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "WatchInfo represents an API watch status of one repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/tags",
      "method": "repoListTags",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "List a repository's tags",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results, default maximum page size is 50"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/tags",
      "method": "repoCreateTag",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Create a new git tag in a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "message",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tag_name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "target",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Tag represents a repository tag"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/tags/{tag}",
      "method": "repoDeleteTag",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Delete a repository's tag by name",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "tag",
          "schema": "string",
          "required": true,
          "description": "name of tag to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/tags/{tag}",
      "method": "repoGetTag",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get the tag of a repository by tag name",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "tag",
          "schema": "string",
          "required": true,
          "description": "name of tag"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Tag represents a repository tag"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/teams",
      "method": "repoListTeams",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "List a repository's teams",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/teams/{team}",
      "method": "repoDeleteTeam",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Delete a team from a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "team name"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/teams/{team}",
      "method": "repoCheckTeam",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Check if a team is assigned to a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "team name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Team represents a team in an organization"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/teams/{team}",
      "method": "repoAddTeam",
      "httpMethod": "put",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Add a team to a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "team name"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/times",
      "method": "repoTrackedTimes",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "List a repo's tracked times",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "user",
          "schema": "string",
          "description": "optional filter by user (available for issue managers)"
        },
        {
          "name": "since",
          "schema": "string",
          "description": "Only show times updated after the given time. This is a timestamp in RFC 3339 format"
        },
        {
          "name": "before",
          "schema": "string",
          "description": "Only show times updated before the given time. This is a timestamp in RFC 3339 format"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/times/{user}",
      "method": "userTrackedTimes",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "List a user's tracked times in a repo",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "username of user"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/topics",
      "method": "repoListTopics",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get list of topics that a repository has",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "TopicName a list of repo topic names"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/topics",
      "method": "repoUpdateTopics",
      "httpMethod": "put",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Replace list of topics for a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "topics",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/topics/{topic}",
      "method": "repoDeleteTopic",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Delete a topic from a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "topic",
          "schema": "string",
          "required": true,
          "description": "name of the topic to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/topics/{topic}",
      "method": "repoAddTopic",
      "httpMethod": "put",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Add a topic to a repository",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "topic",
          "schema": "string",
          "required": true,
          "description": "name of the topic to add"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/transfer",
      "method": "repoTransfer",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Transfer a repo ownership",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo to transfer"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo to transfer"
        },
        {
          "name": "new_owner",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "team_ids",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": "Repository represents a repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/transfer/accept",
      "method": "acceptRepoTransfer",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Accept a repo transfer",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo to transfer"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo to transfer"
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": "Repository represents a repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/transfer/reject",
      "method": "rejectRepoTransfer",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Reject a repo transfer",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo to transfer"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo to transfer"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Repository represents a repository"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/wiki/new",
      "method": "repoCreateWikiPage",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Create a wiki page",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "content_base64",
          "schema": "string",
          "description": ""
        },
        {
          "name": "message",
          "schema": "string",
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "WikiPage a wiki page"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/wiki/page/{pageName}",
      "method": "repoDeleteWikiPage",
      "httpMethod": "delete",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Delete a wiki page",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "pageName",
          "schema": "string",
          "required": true,
          "description": "name of the page"
        }
      ],
      "responses": []
    },
    {
      "url": "/repos/{owner}/{repo}/wiki/page/{pageName}",
      "method": "repoGetWikiPage",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a wiki page",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "pageName",
          "schema": "string",
          "required": true,
          "description": "name of the page"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "WikiPage a wiki page"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/wiki/page/{pageName}",
      "method": "repoEditWikiPage",
      "httpMethod": "patch",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Edit a wiki page",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "pageName",
          "schema": "string",
          "required": true,
          "description": "name of the page"
        },
        {
          "name": "content_base64",
          "schema": "string",
          "description": ""
        },
        {
          "name": "message",
          "schema": "string",
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "WikiPage a wiki page"
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/wiki/pages",
      "method": "repoGetWikiPages",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get all wiki pages",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/repos/{owner}/{repo}/wiki/revisions/{pageName}",
      "method": "repoGetWikiPageRevisions",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get revisions of a wiki page",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        },
        {
          "name": "pageName",
          "schema": "string",
          "required": true,
          "description": "name of the page"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "WikiCommitList commit/revision list"
        }
      ]
    },
    {
      "url": "/repos/{template_owner}/{template_repo}/generate",
      "method": "generateRepo",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Create a repository using a template",
      "parameters": [
        {
          "name": "templateOwner",
          "schema": "string",
          "required": true,
          "description": "name of the template repository owner"
        },
        {
          "name": "templateRepo",
          "schema": "string",
          "required": true,
          "description": "name of the template repository"
        },
        {
          "name": "avatar",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "default_branch",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "git_content",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "git_hooks",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "labels",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "topics",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "webhooks",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Repository represents a repository"
        }
      ]
    },
    {
      "url": "/repositories/{id}",
      "method": "repoGetById",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Get a repository by id",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the repo to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Repository represents a repository"
        }
      ]
    },
    {
      "url": "/settings/api",
      "method": "getGeneralApiSettings",
      "httpMethod": "get",
      "tag": "settings",
      "typeScriptTag": "settings",
      "description": "Get instance's global settings for api",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "GeneralAPISettings contains global api settings exposed by it"
        }
      ]
    },
    {
      "url": "/settings/attachment",
      "method": "getGeneralAttachmentSettings",
      "httpMethod": "get",
      "tag": "settings",
      "typeScriptTag": "settings",
      "description": "Get instance's global settings for Attachment",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "GeneralAttachmentSettings contains global Attachment settings exposed by API"
        }
      ]
    },
    {
      "url": "/settings/repository",
      "method": "getGeneralRepositorySettings",
      "httpMethod": "get",
      "tag": "settings",
      "typeScriptTag": "settings",
      "description": "Get instance's global settings for repositories",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "GeneralRepoSettings contains global repository settings exposed by API"
        }
      ]
    },
    {
      "url": "/settings/ui",
      "method": "getGeneralUiSettings",
      "httpMethod": "get",
      "tag": "settings",
      "typeScriptTag": "settings",
      "description": "Get instance's global settings for ui",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "GeneralUISettings contains global ui settings exposed by API"
        }
      ]
    },
    {
      "url": "/signing-key.gpg",
      "method": "getSigningKey",
      "httpMethod": "get",
      "tag": "miscellaneous",
      "typeScriptTag": "miscellaneous",
      "description": "Get default signing-key.gpg",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{id}",
      "method": "orgDeleteTeam",
      "httpMethod": "delete",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Delete a team",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the team to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/teams/{id}",
      "method": "orgGetTeam",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Get a team",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the team to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Team represents a team in an organization"
        }
      ]
    },
    {
      "url": "/teams/{id}",
      "method": "orgEditTeam",
      "httpMethod": "patch",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Edit a team",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the team to edit"
        },
        {
          "name": "can_create_org_repo",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "includes_all_repositories",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "permission",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "units",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "units_map",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Team represents a team in an organization"
        }
      ]
    },
    {
      "url": "/teams/{id}/activities/feeds",
      "method": "orgListTeamActivityFeeds",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "List a team's activity feeds",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the team"
        },
        {
          "name": "date",
          "schema": "string",
          "description": "the date of the activities to be found"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{id}/members",
      "method": "orgListTeamMembers",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "List a team's members",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the team"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{id}/members/{username}",
      "method": "orgRemoveTeamMember",
      "httpMethod": "delete",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Remove a team member",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the team"
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of the user to remove"
        }
      ],
      "responses": []
    },
    {
      "url": "/teams/{id}/members/{username}",
      "method": "orgListTeamMember",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "List a particular member of team",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the team"
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of the member to list"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "User represents a user"
        }
      ]
    },
    {
      "url": "/teams/{id}/members/{username}",
      "method": "orgAddTeamMember",
      "httpMethod": "put",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Add a team member",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the team"
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of the user to add"
        }
      ],
      "responses": []
    },
    {
      "url": "/teams/{id}/repos",
      "method": "orgListTeamRepos",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "List a team's repos",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the team"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/teams/{id}/repos/{org}/{repo}",
      "method": "orgRemoveTeamRepository",
      "httpMethod": "delete",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Remove a repository from a team",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the team"
        },
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "organization that owns the repo to remove"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo to remove"
        }
      ],
      "responses": []
    },
    {
      "url": "/teams/{id}/repos/{org}/{repo}",
      "method": "orgListTeamRepo",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "List a particular repo of team",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the team"
        },
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "organization that owns the repo to list"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo to list"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Repository represents a repository"
        }
      ]
    },
    {
      "url": "/teams/{id}/repos/{org}/{repo}",
      "method": "orgAddTeamRepository",
      "httpMethod": "put",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Add a repository to a team",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the team"
        },
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "organization that owns the repo to add"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo to add"
        }
      ],
      "responses": []
    },
    {
      "url": "/topics/search",
      "method": "topicSearch",
      "httpMethod": "get",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "search topics via keyword",
      "parameters": [
        {
          "name": "q",
          "schema": "string",
          "required": true,
          "description": "keywords to search"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user",
      "method": "userGetCurrent",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Get the authenticated user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "User represents a user"
        }
      ]
    },
    {
      "url": "/user/applications/oauth2",
      "method": "userGetOauth2Application",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List the authenticated user's oauth2 applications",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/applications/oauth2",
      "method": "userCreateOAuth2Application",
      "httpMethod": "post",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "creates a new OAuth2 application",
      "parameters": [
        {
          "name": "confidential_client",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "redirect_uris",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/applications/oauth2/{id}",
      "method": "userDeleteOAuth2Application",
      "httpMethod": "delete",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "delete an OAuth2 Application",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "token to be deleted"
        }
      ],
      "responses": []
    },
    {
      "url": "/user/applications/oauth2/{id}",
      "method": "userGetOAuth2Application",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "get an OAuth2 Application",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Application ID to be found"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/applications/oauth2/{id}",
      "method": "userUpdateOAuth2Application",
      "httpMethod": "patch",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "update an OAuth2 Application, this includes regenerating the client secret",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "application to be updated"
        },
        {
          "name": "confidential_client",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "redirect_uris",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/emails",
      "method": "userDeleteEmail",
      "httpMethod": "delete",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Delete email addresses",
      "parameters": [
        {
          "name": "emails",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/user/emails",
      "method": "userListEmails",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List the authenticated user's email addresses",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/emails",
      "method": "userAddEmail",
      "httpMethod": "post",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Add email addresses",
      "parameters": [
        {
          "name": "emails",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/followers",
      "method": "userCurrentListFollowers",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List the authenticated user's followers",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/following",
      "method": "userCurrentListFollowing",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List the users that the authenticated user is following",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/following/{username}",
      "method": "userCurrentDeleteFollow",
      "httpMethod": "delete",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Unfollow a user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user to unfollow"
        }
      ],
      "responses": []
    },
    {
      "url": "/user/following/{username}",
      "method": "userCurrentCheckFollowing",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Check whether a user is followed by the authenticated user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of followed user"
        }
      ],
      "responses": []
    },
    {
      "url": "/user/following/{username}",
      "method": "userCurrentPutFollow",
      "httpMethod": "put",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Follow a user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user to follow"
        }
      ],
      "responses": []
    },
    {
      "url": "/user/gpg_key_token",
      "method": "getVerificationToken",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Get a Token to verify",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/gpg_key_verify",
      "method": "userVerifyGpgKey",
      "httpMethod": "post",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Verify a GPG key",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": "GPGKey a user GPG key to sign commit and tag in repository"
        }
      ]
    },
    {
      "url": "/user/gpg_keys",
      "method": "userCurrentListGpgKeys",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List the authenticated user's GPG keys",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/gpg_keys",
      "method": "userCurrentPostGpgKey",
      "httpMethod": "post",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Create a GPG key",
      "parameters": [
        {
          "name": "armored_public_key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "armored_signature",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "GPGKey a user GPG key to sign commit and tag in repository"
        }
      ]
    },
    {
      "url": "/user/gpg_keys/{id}",
      "method": "userCurrentDeleteGpgKey",
      "httpMethod": "delete",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Remove a GPG key",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of key to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/user/gpg_keys/{id}",
      "method": "userCurrentGetGpgKey",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Get a GPG key",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of key to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "GPGKey a user GPG key to sign commit and tag in repository"
        }
      ]
    },
    {
      "url": "/user/hooks",
      "method": "userListHooks",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List the authenticated user's webhooks",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/hooks",
      "method": "userCreateHook",
      "httpMethod": "post",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Create a hook",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "authorization_header",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "branch_filter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "config",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "events",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Hook a hook is a web hook when one repository changed"
        }
      ]
    },
    {
      "url": "/user/hooks/{id}",
      "method": "userDeleteHook",
      "httpMethod": "delete",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Delete a hook",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the hook to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/user/hooks/{id}",
      "method": "userGetHook",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Get a hook",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the hook to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Hook a hook is a web hook when one repository changed"
        }
      ]
    },
    {
      "url": "/user/hooks/{id}",
      "method": "userEditHook",
      "httpMethod": "patch",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Update a hook",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of the hook to update"
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "authorization_header",
          "schema": "string",
          "description": ""
        },
        {
          "name": "branch_filter",
          "schema": "string",
          "description": ""
        },
        {
          "name": "config",
          "schema": "object",
          "description": ""
        },
        {
          "name": "events",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Hook a hook is a web hook when one repository changed"
        }
      ]
    },
    {
      "url": "/user/keys",
      "method": "userCurrentListKeys",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List the authenticated user's public keys",
      "parameters": [
        {
          "name": "fingerprint",
          "schema": "string",
          "description": "fingerprint of the key"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/keys",
      "method": "userCurrentPostKey",
      "httpMethod": "post",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Create a public key",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "read_only",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "PublicKey publickey is a user key to push code to repository"
        }
      ]
    },
    {
      "url": "/user/keys/{id}",
      "method": "userCurrentDeleteKey",
      "httpMethod": "delete",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Delete a public key",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of key to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/user/keys/{id}",
      "method": "userCurrentGetKey",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Get a public key",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "id of key to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "PublicKey publickey is a user key to push code to repository"
        }
      ]
    },
    {
      "url": "/user/orgs",
      "method": "orgListCurrentUserOrgs",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "List the current user's organizations",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/repos",
      "method": "userCurrentListRepos",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List the repos that the authenticated user owns",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/repos",
      "method": "createCurrentUserRepo",
      "httpMethod": "post",
      "tag": "repository",
      "typeScriptTag": "repository",
      "description": "Create a repository",
      "parameters": [
        {
          "name": "auto_init",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "default_branch",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "gitignores",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "issue_labels",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "license",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "readme",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "template",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "trust_model",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Repository represents a repository"
        }
      ]
    },
    {
      "url": "/user/settings",
      "method": "getUserSettings",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Get user settings",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/settings",
      "method": "updateUserSettings",
      "httpMethod": "patch",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Update user settings",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "diff_view_style",
          "schema": "string",
          "description": ""
        },
        {
          "name": "full_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "hide_activity",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "hide_email",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "language",
          "schema": "string",
          "description": ""
        },
        {
          "name": "location",
          "schema": "string",
          "description": ""
        },
        {
          "name": "theme",
          "schema": "string",
          "description": ""
        },
        {
          "name": "website",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/starred",
      "method": "userCurrentListStarred",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "The repos that the authenticated user has starred",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/starred/{owner}/{repo}",
      "method": "userCurrentDeleteStar",
      "httpMethod": "delete",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Unstar the given repo",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo to unstar"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo to unstar"
        }
      ],
      "responses": []
    },
    {
      "url": "/user/starred/{owner}/{repo}",
      "method": "userCurrentCheckStarring",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Whether the authenticated is starring the repo",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo"
        }
      ],
      "responses": []
    },
    {
      "url": "/user/starred/{owner}/{repo}",
      "method": "userCurrentPutStar",
      "httpMethod": "put",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Star the given repo",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "owner of the repo to star"
        },
        {
          "name": "repo",
          "schema": "string",
          "required": true,
          "description": "name of the repo to star"
        }
      ],
      "responses": []
    },
    {
      "url": "/user/stopwatches",
      "method": "userGetStopWatches",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Get list of all existing stopwatches",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/subscriptions",
      "method": "userCurrentListSubscriptions",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List repositories watched by the authenticated user",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/teams",
      "method": "userListTeams",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List all the teams a user belongs to",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/times",
      "method": "userCurrentTrackedTimes",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List the current user's tracked times",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        },
        {
          "name": "since",
          "schema": "string",
          "description": "Only show times updated after the given time. This is a timestamp in RFC 3339 format"
        },
        {
          "name": "before",
          "schema": "string",
          "description": "Only show times updated before the given time. This is a timestamp in RFC 3339 format"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/search",
      "method": "userSearch",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Search for users",
      "parameters": [
        {
          "name": "q",
          "schema": "string",
          "description": "keyword"
        },
        {
          "name": "uid",
          "schema": "integer",
          "description": "ID of the user to search for"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{username}",
      "method": "userGet",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Get a user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "User represents a user"
        }
      ]
    },
    {
      "url": "/users/{username}/activities/feeds",
      "method": "userListActivityFeeds",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List a user's activity feeds",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user"
        },
        {
          "name": "onlyPerformedBy",
          "schema": "boolean",
          "description": "if true, only show actions performed by the requested user"
        },
        {
          "name": "date",
          "schema": "string",
          "description": "the date of the activities to be found"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{username}/followers",
      "method": "userListFollowers",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List the given user's followers",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{username}/following",
      "method": "userListFollowing",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List the users that the given user is following",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{username}/following/{target}",
      "method": "userCheckFollowing",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Check if one user is following another user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of following user"
        },
        {
          "name": "target",
          "schema": "string",
          "required": true,
          "description": "username of followed user"
        }
      ],
      "responses": []
    },
    {
      "url": "/users/{username}/gpg_keys",
      "method": "userListGpgKeys",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List the given user's GPG keys",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{username}/heatmap",
      "method": "userGetHeatmapData",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Get a user's heatmap",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{username}/keys",
      "method": "userListKeys",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List the given user's public keys",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user"
        },
        {
          "name": "fingerprint",
          "schema": "string",
          "description": "fingerprint of the key"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{username}/orgs",
      "method": "orgListUserOrgs",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "List a user's organizations",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{username}/orgs/{org}/permissions",
      "method": "orgGetUserPermissions",
      "httpMethod": "get",
      "tag": "organization",
      "typeScriptTag": "organization",
      "description": "Get user permissions in organization",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user"
        },
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "name of the organization"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "OrganizationPermissions list different users permissions on an organization"
        }
      ]
    },
    {
      "url": "/users/{username}/repos",
      "method": "userListRepos",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List the repos owned by the given user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{username}/starred",
      "method": "userListStarred",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "The repos that the given user has starred",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{username}/subscriptions",
      "method": "userListSubscriptions",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List the repositories watched by a user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of the user"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{username}/tokens",
      "method": "userGetTokens",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List the authenticated user's access tokens",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user"
        },
        {
          "name": "page",
          "schema": "integer",
          "description": "page number of results to return (1-based)"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "page size of results"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{username}/tokens",
      "method": "userCreateToken",
      "httpMethod": "post",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Create an access token",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "scopes",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{username}/tokens/{token}",
      "method": "userDeleteAccessToken",
      "httpMethod": "delete",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "delete an access token",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username of user"
        },
        {
          "name": "token",
          "schema": "string",
          "required": true,
          "description": "token to be deleted, identified by ID and if not available by name"
        }
      ],
      "responses": []
    },
    {
      "url": "/version",
      "method": "getVersion",
      "httpMethod": "get",
      "tag": "miscellaneous",
      "typeScriptTag": "miscellaneous",
      "description": "Returns the version of the Gitea application",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "ServerVersion wraps the version of the server"
        }
      ]
    }
  ],
  "apiBaseUrl": "/api/v1",
  "apiDescription": "This documentation describes the Gitea API.",
  "apiTitle": "Gitea API.",
  "endpoints": 217,
  "sdkMethods": 346,
  "schemas": 171,
  "parameters": 1459,
  "difficultyScore": 796.25,
  "difficulty": "Very Hard"
}