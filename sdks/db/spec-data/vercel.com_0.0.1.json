{
  "providerName": "vercel.com",
  "openApiRaw": "https://openapi.vercel.sh",
  "securitySchemes": {
    "bearerToken": {
      "description": "Default authentication mechanism",
      "scheme": "bearer",
      "type": "http"
    },
    "oauth2": {
      "flows": {
        "authorizationCode": {
          "authorizationUrl": "https://api.vercel.com/oauth/authorize",
          "scopes": {},
          "tokenUrl": "https://api.vercel.com/oauth/access_token"
        }
      },
      "type": "oauth2"
    }
  },
  "categories": [
    "hosting"
  ],
  "homepage": "vercel.com",
  "apiVersion": "0.0.1",
  "methods": [
    {
      "url": "/registration",
      "method": "emailLogin",
      "httpMethod": "post",
      "tag": "authentication",
      "typeScriptTag": "authentication",
      "description": "Login with email",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "tokenName",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/registration/verify",
      "method": "verifyToken",
      "httpMethod": "get",
      "tag": "authentication",
      "typeScriptTag": "authentication",
      "description": "Verify a login request to get an authentication token",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": "Email to verify the login."
        },
        {
          "name": "token",
          "schema": "string",
          "required": true,
          "description": "The token returned when the login was requested."
        },
        {
          "name": "tokenName",
          "schema": "string",
          "required": false,
          "description": "The desired name for the token. It will be displayed on the user account details."
        },
        {
          "name": "ssoUserId",
          "schema": "string",
          "required": false,
          "description": "The SAML Profile ID, when connecting a SAML Profile to a Team member for the first time."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/deployments/{deploymentId}/checks",
      "method": "getAllChecks",
      "httpMethod": "get",
      "tag": "checks",
      "typeScriptTag": "checks",
      "description": "Retrieve a list of all checks",
      "parameters": [
        {
          "name": "deploymentId",
          "schema": "string",
          "required": true,
          "description": "The deployment to get all checks for"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/deployments/{deploymentId}/checks",
      "method": "createCheck",
      "httpMethod": "post",
      "tag": "checks",
      "typeScriptTag": "checks",
      "description": "Creates a new Check",
      "parameters": [
        {
          "name": "deploymentId",
          "schema": "string",
          "required": true,
          "description": "The deployment to create the check for."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "blocking",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "detailsUrl",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "externalId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "path",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "rerequestable",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information for the SAML Single Sign-On configuration."
        }
      ]
    },
    {
      "url": "/v1/deployments/{deploymentId}/checks/{checkId}",
      "method": "getCheck",
      "httpMethod": "get",
      "tag": "checks",
      "typeScriptTag": "checks",
      "description": "Get a single check",
      "parameters": [
        {
          "name": "deploymentId",
          "schema": "string",
          "required": true,
          "description": "The deployment to get the check for."
        },
        {
          "name": "checkId",
          "schema": "string",
          "required": true,
          "description": "The check to fetch"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "From T, pick a set of properties whose keys are in the union K"
        }
      ]
    },
    {
      "url": "/v1/deployments/{deploymentId}/checks/{checkId}",
      "method": "updateCheck",
      "httpMethod": "patch",
      "tag": "checks",
      "typeScriptTag": "checks",
      "description": "Update a check",
      "parameters": [
        {
          "name": "deploymentId",
          "schema": "string",
          "required": true,
          "description": "The deployment to update the check for."
        },
        {
          "name": "checkId",
          "schema": "string",
          "required": true,
          "description": "The check being updated"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "conclusion",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "detailsUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "externalId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "output",
          "schema": "object",
          "description": ""
        },
        {
          "name": "path",
          "schema": "string",
          "description": ""
        },
        {
          "name": "status",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information for the SAML Single Sign-On configuration."
        }
      ]
    },
    {
      "url": "/v1/deployments/{deploymentId}/checks/{checkId}/rerequest",
      "method": "rerequestCheck",
      "httpMethod": "post",
      "tag": "checks",
      "typeScriptTag": "checks",
      "description": "Rerequest a check",
      "parameters": [
        {
          "name": "deploymentId",
          "schema": "string",
          "required": true,
          "description": "The deployment to rerun the check for."
        },
        {
          "name": "checkId",
          "schema": "string",
          "required": true,
          "description": "The check to rerun"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/domains/records/{recordId}",
      "method": "updateRecord",
      "httpMethod": "patch",
      "tag": "dns",
      "typeScriptTag": "dns",
      "description": "Update an existing DNS record",
      "parameters": [
        {
          "name": "recordId",
          "schema": "string",
          "required": true,
          "description": "The id of the DNS record"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "mxPriority",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "srv",
          "schema": "object",
          "description": ""
        },
        {
          "name": "ttl",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "From T, pick a set of properties whose keys are in the union K"
        }
      ]
    },
    {
      "url": "/v1/edge-config",
      "method": "getEdgeConfigs",
      "httpMethod": "get",
      "tag": "edge-config",
      "typeScriptTag": "edgeConfig",
      "description": "Get Edge Configs",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of all edge configs."
        }
      ]
    },
    {
      "url": "/v1/edge-config",
      "method": "createEdgeConfig",
      "httpMethod": "post",
      "tag": "edge-config",
      "typeScriptTag": "edgeConfig",
      "description": "Create an Edge Config",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "items",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "slug",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "An Edge Config"
        }
      ]
    },
    {
      "url": "/v1/edge-config/{edgeConfigId}",
      "method": "deleteEdgeConfig",
      "httpMethod": "delete",
      "tag": "edge-config",
      "typeScriptTag": "edgeConfig",
      "description": "Delete an Edge Config",
      "parameters": [
        {
          "name": "edgeConfigId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": []
    },
    {
      "url": "/v1/edge-config/{edgeConfigId}",
      "method": "getEdgeConfig",
      "httpMethod": "get",
      "tag": "edge-config",
      "typeScriptTag": "edgeConfig",
      "description": "Get an Edge Config",
      "parameters": [
        {
          "name": "edgeConfigId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The EdgeConfig."
        }
      ]
    },
    {
      "url": "/v1/edge-config/{edgeConfigId}",
      "method": "updateEdgeConfig",
      "httpMethod": "put",
      "tag": "edge-config",
      "typeScriptTag": "edgeConfig",
      "description": "Update an Edge Config",
      "parameters": [
        {
          "name": "edgeConfigId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "slug",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Edge Config"
        }
      ]
    },
    {
      "url": "/v1/edge-config/{edgeConfigId}/item/{edgeConfigItemKey}",
      "method": "getEdgeConfigItem",
      "httpMethod": "get",
      "tag": "edge-config",
      "typeScriptTag": "edgeConfig",
      "description": "Get an Edge Config item",
      "parameters": [
        {
          "name": "edgeConfigId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "edgeConfigItemKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The EdgeConfig."
        }
      ]
    },
    {
      "url": "/v1/edge-config/{edgeConfigId}/items",
      "method": "getEdgeConfigItems",
      "httpMethod": "get",
      "tag": "edge-config",
      "typeScriptTag": "edgeConfig",
      "description": "Get Edge Config items",
      "parameters": [
        {
          "name": "edgeConfigId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The EdgeConfig."
        }
      ]
    },
    {
      "url": "/v1/edge-config/{edgeConfigId}/items",
      "method": "patchtEdgeConfigItems",
      "httpMethod": "patch",
      "tag": "edge-config",
      "typeScriptTag": "edgeConfig",
      "description": "Update Edge Config items in batch",
      "parameters": [
        {
          "name": "edgeConfigId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "items",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/edge-config/{edgeConfigId}/token",
      "method": "createEdgeConfigToken",
      "httpMethod": "post",
      "tag": "edge-config",
      "typeScriptTag": "edgeConfig",
      "description": "Create an Edge Config token",
      "parameters": [
        {
          "name": "edgeConfigId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/edge-config/{edgeConfigId}/token/{token}",
      "method": "getEdgeConfigToken",
      "httpMethod": "get",
      "tag": "edge-config",
      "typeScriptTag": "edgeConfig",
      "description": "Get Edge Config token meta data",
      "parameters": [
        {
          "name": "edgeConfigId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "token",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The EdgeConfig."
        }
      ]
    },
    {
      "url": "/v1/edge-config/{edgeConfigId}/tokens",
      "method": "deleteEdgeConfigTokens",
      "httpMethod": "delete",
      "tag": "edge-config",
      "typeScriptTag": "edgeConfig",
      "description": "Delete one or more Edge Config tokens",
      "parameters": [
        {
          "name": "edgeConfigId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "tokens",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/v1/edge-config/{edgeConfigId}/tokens",
      "method": "getEdgeConfigTokens",
      "httpMethod": "get",
      "tag": "edge-config",
      "typeScriptTag": "edgeConfig",
      "description": "Get all tokens of an Edge Config",
      "parameters": [
        {
          "name": "edgeConfigId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The EdgeConfig."
        }
      ]
    },
    {
      "url": "/v1/integrations/configuration/{id}",
      "method": "deleteConfiguration",
      "httpMethod": "delete",
      "tag": "integrations",
      "typeScriptTag": "integrations",
      "description": "Delete an integration configuration",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": []
    },
    {
      "url": "/v1/integrations/configuration/{id}",
      "method": "getConfiguration",
      "httpMethod": "get",
      "tag": "integrations",
      "typeScriptTag": "integrations",
      "description": "Retrieve an integration configuration",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the configuration to check"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/integrations/configurations",
      "method": "getConfigurations",
      "httpMethod": "get",
      "tag": "integrations",
      "typeScriptTag": "integrations",
      "description": "Get configurations for the authenticated user or team",
      "parameters": [
        {
          "name": "view",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/integrations/git-namespaces",
      "method": "gitNamespaces",
      "httpMethod": "get",
      "tag": "integrations",
      "typeScriptTag": "integrations",
      "description": "List git namespaces by provider",
      "parameters": [
        {
          "name": "provider",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/integrations/log-drains/{id}",
      "method": "deleteIntegrationLogDrain",
      "httpMethod": "delete",
      "tag": "logDrains",
      "typeScriptTag": "logDrains",
      "description": "Deletes the Integration log drain with the provided `id`",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the log drain to be deleted"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": []
    },
    {
      "url": "/v1/integrations/search-repo",
      "method": "/v1/integrations/searchRepoGet",
      "httpMethod": "get",
      "tag": "integrations",
      "typeScriptTag": "integrations",
      "description": "List git repositories linked to namespace by provider",
      "parameters": [
        {
          "name": "query",
          "schema": "string",
          "description": ""
        },
        {
          "name": "namespaceId",
          "schema": [
            "string",
            "number",
            "null"
          ],
          "description": ""
        },
        {
          "name": "provider",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "installationId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/log-drains",
      "method": "getConfigurableLogDrains",
      "httpMethod": "get",
      "tag": "logDrains",
      "typeScriptTag": "logDrains",
      "description": "Retrieves a list of Configurable Log Drains",
      "parameters": [
        {
          "name": "projectId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/log-drains",
      "method": "createConfigurableLogDrain",
      "httpMethod": "post",
      "tag": "logDrains",
      "typeScriptTag": "logDrains",
      "description": "Creates a Configurable Log Drain",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "branch",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "deliveryFormat",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "environment",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "headers",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "projectIds",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sources",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/log-drains/{id}",
      "method": "deleteConfigurableLogDrain",
      "httpMethod": "delete",
      "tag": "logDrains",
      "typeScriptTag": "logDrains",
      "description": "Deletes a Configurable Log Drain",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": []
    },
    {
      "url": "/v1/log-drains/{id}",
      "method": "getConfigurableLogDrain",
      "httpMethod": "get",
      "tag": "logDrains",
      "typeScriptTag": "logDrains",
      "description": "Retrieves a Configurable Log Drain",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{idOrName}/env/{id}",
      "method": "getProjectEnv",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Retrieve the decrypted value of an environment variable of a project by id",
      "parameters": [
        {
          "name": "idOrName",
          "schema": "string",
          "required": true,
          "description": "The unique project identifier or the project name"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique ID for the environment variable to get the decrypted value."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams",
      "method": "createTeam",
      "httpMethod": "post",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Create a Team",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "slug",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The team was created successfuly"
        }
      ]
    },
    {
      "url": "/v1/teams/{teamId}",
      "method": "deleteTeam",
      "httpMethod": "delete",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Delete a Team",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "reasons",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The Team was successfuly deleted"
        }
      ]
    },
    {
      "url": "/v1/teams/{teamId}/invites/{inviteId}",
      "method": "deleteTeamInviteCode",
      "httpMethod": "delete",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Delete a Team invite code",
      "parameters": [
        {
          "name": "inviteId",
          "schema": "string",
          "required": true,
          "description": "The Team invite code ID."
        },
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{teamId}/members",
      "method": "inviteUserToTeam",
      "httpMethod": "post",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Invite a user",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "role",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "uid",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{teamId}/members/teams/join",
      "method": "joinTeam",
      "httpMethod": "post",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Join a team",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "inviteCode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Successfully joined a team."
        }
      ]
    },
    {
      "url": "/v1/teams/{teamId}/members/{uid}",
      "method": "removeTeamMember",
      "httpMethod": "delete",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Remove a Team Member",
      "parameters": [
        {
          "name": "uid",
          "schema": "string",
          "required": true,
          "description": "The user ID of the member."
        },
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{teamId}/members/{uid}",
      "method": "updateTeamMember",
      "httpMethod": "patch",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Update a Team Member",
      "parameters": [
        {
          "name": "uid",
          "schema": "string",
          "required": true,
          "description": "The ID of the member."
        },
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "confirmed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "joinedFrom",
          "schema": "object",
          "description": ""
        },
        {
          "name": "role",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{teamId}/request",
      "method": "requestAccessToTeam",
      "httpMethod": "post",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Request access to a team",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "joinedFrom",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{teamId}/request/{userId}",
      "method": "getTeamAccessRequest",
      "httpMethod": "get",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Get access request status",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/user",
      "method": "requestDelete",
      "httpMethod": "delete",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Delete User Account",
      "parameters": [
        {
          "name": "reasons",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/webhooks",
      "method": "getWebhooks",
      "httpMethod": "get",
      "tag": "webhooks",
      "typeScriptTag": "webhooks",
      "description": "Get a list of webhooks",
      "parameters": [
        {
          "name": "projectId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/webhooks",
      "method": "createWebhook",
      "httpMethod": "post",
      "tag": "webhooks",
      "typeScriptTag": "webhooks",
      "description": "Creates a webhook",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "events",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "projectIds",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/webhooks/{id}",
      "method": "deleteWebhook",
      "httpMethod": "delete",
      "tag": "webhooks",
      "typeScriptTag": "webhooks",
      "description": "Deletes a webhook",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": []
    },
    {
      "url": "/v1/webhooks/{id}",
      "method": "getWebhook",
      "httpMethod": "get",
      "tag": "webhooks",
      "typeScriptTag": "webhooks",
      "description": "Get a webhook",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v10/projects/{idOrName}/domains",
      "method": "addProjectDomain",
      "httpMethod": "post",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Add a domain to a project",
      "parameters": [
        {
          "name": "idOrName",
          "schema": "string",
          "required": true,
          "description": "The unique project identifier or the project name"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "gitBranch",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "redirect",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "redirectStatusCode",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v10/projects/{idOrName}/env",
      "method": "createProjectEnv",
      "httpMethod": "post",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Create one or more environment variables",
      "parameters": [
        {
          "name": "idOrName",
          "schema": "string",
          "required": true,
          "description": "The unique project identifier or the project name"
        },
        {
          "name": "upsert",
          "schema": "string",
          "required": false,
          "description": "Allow override of environment variable if it already exists"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/v11/deployments/{deploymentId}/builds",
      "method": "listDeploymentBuilds",
      "httpMethod": "get",
      "tag": "deployments",
      "typeScriptTag": "deployments",
      "description": "List Deployment Builds",
      "parameters": [
        {
          "name": "deploymentId",
          "schema": "string",
          "required": true,
          "description": "The deployment unique identifier"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v12/deployments/{id}/cancel",
      "method": "cancelDeployment",
      "httpMethod": "patch",
      "tag": "deployments",
      "typeScriptTag": "deployments",
      "description": "Cancel a deployment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique identifier of the deployment."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v13/deployments",
      "method": "createDeployment",
      "httpMethod": "post",
      "tag": "deployments",
      "typeScriptTag": "deployments",
      "description": "Create a new deployment",
      "parameters": [
        {
          "name": "forceNew",
          "schema": "undefined",
          "description": "Forces a new deployment even if there is a previous similar deployment"
        },
        {
          "name": "skipAutoDetectionConfirmation",
          "schema": "undefined",
          "description": "Allows to skip framework detection so the API would not fail to ask for confirmation"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "$schema",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "alias",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "build",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "buildCommand",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "builds",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "cleanUrls",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "crons",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "deploymentId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "devCommand",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "env",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "files",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "framework",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "functions",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "git",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "gitMetadata",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "gitSource",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "headers",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "ignoreCommand",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "images",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "installCommand",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "meta",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "monorepoManager",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "outputDirectory",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "project",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "projectSettings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "public",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "redirects",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "regions",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "rewrites",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "routes",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "target",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "trailingSlash",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "withLatestCommit",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The successfully created deployment"
        }
      ]
    },
    {
      "url": "/v13/deployments/{idOrUrl}",
      "method": "getDeployment",
      "httpMethod": "get",
      "tag": "deployments",
      "typeScriptTag": "deployments",
      "description": "Get a deployment by ID or URL",
      "parameters": [
        {
          "name": "idOrUrl",
          "schema": "string",
          "required": true,
          "description": "The unique identifier or hostname of the deployment."
        },
        {
          "name": "withGitRepoInfo",
          "schema": "string",
          "required": false,
          "description": "Whether to add in gitRepo information."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v13/deployments/{id}",
      "method": "deleteDeployment",
      "httpMethod": "delete",
      "tag": "deployments",
      "typeScriptTag": "deployments",
      "description": "Delete a Deployment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the deployment to be deleted"
        },
        {
          "name": "url",
          "schema": "string",
          "required": false,
          "description": "A Deployment or Alias URL. In case it is passed, the ID will be ignored"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/aliases/{aliasId}",
      "method": "deleteAlias",
      "httpMethod": "delete",
      "tag": "aliases",
      "typeScriptTag": "aliases",
      "description": "Delete an Alias",
      "parameters": [
        {
          "name": "aliasId",
          "schema": "undefined",
          "required": true,
          "description": "The ID or alias that will be removed"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/deployments/{idOrUrl}/events",
      "method": "getDeploymentEvents",
      "httpMethod": "get",
      "tag": "deployments",
      "typeScriptTag": "deployments",
      "description": "Get deployment events",
      "parameters": [
        {
          "name": "idOrUrl",
          "schema": "string",
          "required": true,
          "description": "The unique identifier or hostname of the deployment."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "Order of the returned events based on the timestamp."
        },
        {
          "name": "follow",
          "schema": "number",
          "required": false,
          "description": "When enabled, this endpoint will return live events as they happen."
        },
        {
          "name": "limit",
          "schema": "number",
          "required": false,
          "description": "Maximum number of events to return. Provide `-1` to return all available logs."
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "Deployment build ID."
        },
        {
          "name": "since",
          "schema": "number",
          "required": false,
          "description": "Timestamp for when build logs should be pulled from."
        },
        {
          "name": "until",
          "schema": "number",
          "required": false,
          "description": "Timestamp for when the build logs should be pulled up until."
        },
        {
          "name": "statusCode",
          "schema": "undefined",
          "required": false,
          "description": "HTTP status code range to filter events by."
        },
        {
          "name": "delimiter",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "builds",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/deployments/{id}/aliases",
      "method": "listDeploymentAliases",
      "httpMethod": "get",
      "tag": "aliases",
      "typeScriptTag": "aliases",
      "description": "List Deployment Aliases",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the deployment the aliases should be listed for"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/deployments/{id}/aliases",
      "method": "assignAlias",
      "httpMethod": "post",
      "tag": "aliases",
      "typeScriptTag": "aliases",
      "description": "Assign an Alias",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The ID of the deployment the aliases should be listed for"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "alias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "redirect",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/domains/{domain}/records",
      "method": "createRecord",
      "httpMethod": "post",
      "tag": "dns",
      "typeScriptTag": "dns",
      "description": "Create a DNS record",
      "parameters": [
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "The domain used to create the DNS record."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/domains/{domain}/records/{recordId}",
      "method": "removeRecord",
      "httpMethod": "delete",
      "tag": "dns",
      "typeScriptTag": "dns",
      "description": "Delete a DNS record",
      "parameters": [
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "recordId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/files",
      "method": "uploadFile",
      "httpMethod": "post",
      "tag": "deployments",
      "typeScriptTag": "deployments",
      "description": "Upload Deployment Files",
      "parameters": [
        {
          "name": "contentLength",
          "schema": "number",
          "description": "The file size in bytes"
        },
        {
          "name": "xVercelDigest",
          "schema": "string",
          "description": "The file SHA1 used to check the integrity"
        },
        {
          "name": "xNowDigest",
          "schema": "string",
          "description": "The file SHA1 used to check the integrity"
        },
        {
          "name": "xNowSize",
          "schema": "number",
          "description": "The file size as an alternative to `Content-Length`"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/integrations/log-drains",
      "method": "getIntegrationLogDrains",
      "httpMethod": "get",
      "tag": "logDrains",
      "typeScriptTag": "logDrains",
      "description": "Retrieves a list of Integration log drains",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/integrations/log-drains",
      "method": "createLogDrain",
      "httpMethod": "post",
      "tag": "logDrains",
      "typeScriptTag": "logDrains",
      "description": "Creates a new Integration Log Drain",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "branch",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "deliveryFormat",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "environment",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "headers",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "projectIds",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sources",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/secrets/{idOrName}",
      "method": "deleteSecret",
      "httpMethod": "delete",
      "tag": "secrets",
      "typeScriptTag": "secrets",
      "description": "Delete a secret",
      "parameters": [
        {
          "name": "idOrName",
          "schema": "string",
          "required": true,
          "description": "The name or the unique identifier to which the secret belongs to."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/secrets/{name}",
      "method": "renameSecret",
      "httpMethod": "patch",
      "tag": "secrets",
      "typeScriptTag": "secrets",
      "description": "Change secret name",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the secret."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/secrets/{name}",
      "method": "createSecret",
      "httpMethod": "post",
      "tag": "secrets",
      "typeScriptTag": "secrets",
      "description": "Create a new secret",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "decryptable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/teams",
      "method": "getTeams",
      "httpMethod": "get",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "List all teams",
      "parameters": [
        {
          "name": "limit",
          "schema": "number",
          "description": "Maximum number of Teams which may be returned."
        },
        {
          "name": "since",
          "schema": "number",
          "description": "Timestamp (in milliseconds) to only include Teams created since then."
        },
        {
          "name": "until",
          "schema": "number",
          "description": "Timestamp (in milliseconds) to only include Teams created until then."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A paginated list of teams."
        }
      ]
    },
    {
      "url": "/v2/teams/{teamId}",
      "method": "getTeam",
      "httpMethod": "get",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Get a Team",
      "parameters": [
        {
          "name": "slug",
          "schema": "string",
          "description": ""
        },
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Data representing a Team."
        }
      ]
    },
    {
      "url": "/v2/teams/{teamId}",
      "method": "patchTeam",
      "httpMethod": "patch",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Update a Team",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "avatar",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "emailDomain",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enablePreviewFeedback",
          "schema": "string",
          "description": ""
        },
        {
          "name": "migrateExistingEnvVariablesToSensitive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "previewDeploymentSuffix",
          "schema": "string",
          "description": ""
        },
        {
          "name": "regenerateInviteCode",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "remoteCaching",
          "schema": "object",
          "description": ""
        },
        {
          "name": "saml",
          "schema": "object",
          "description": ""
        },
        {
          "name": "sensitiveEnvironmentVariablePolicy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "slug",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Data representing a Team."
        }
      ]
    },
    {
      "url": "/v2/teams/{teamId}/members",
      "method": "getTeamMembers",
      "httpMethod": "get",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "List team members",
      "parameters": [
        {
          "name": "limit",
          "schema": "number",
          "required": false,
          "description": "Limit how many teams should be returned"
        },
        {
          "name": "since",
          "schema": "number",
          "required": false,
          "description": "Timestamp in milliseconds to only include members added since then."
        },
        {
          "name": "until",
          "schema": "number",
          "required": false,
          "description": "Timestamp in milliseconds to only include members added until then."
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search team members by their name, username, and email."
        },
        {
          "name": "role",
          "schema": "string",
          "required": false,
          "description": "Only return members with the specified team role."
        },
        {
          "name": "excludeProject",
          "schema": "string",
          "required": false,
          "description": "Exclude members who belong to the specified project."
        },
        {
          "name": "teamId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Paginated list of members for the team."
        }
      ]
    },
    {
      "url": "/v2/user",
      "method": "getAuthUser",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "Get the User",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Successful response."
        }
      ]
    },
    {
      "url": "/v3/events",
      "method": "listUserEvents",
      "httpMethod": "get",
      "tag": "user",
      "typeScriptTag": "user",
      "description": "List User Events",
      "parameters": [
        {
          "name": "limit",
          "schema": "number",
          "description": "Maximum number of items which may be returned."
        },
        {
          "name": "since",
          "schema": "string",
          "description": "Timestamp to only include items created since then."
        },
        {
          "name": "until",
          "schema": "string",
          "description": "Timestamp to only include items created until then."
        },
        {
          "name": "types",
          "schema": "string",
          "description": "Comma-delimited list of event \\\"types\\\" to filter the results by."
        },
        {
          "name": "userId",
          "schema": "string",
          "description": "When retrieving events for a Team, the `userId` parameter may be specified to filter events generated by a specific member of the Team."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Successful response."
        }
      ]
    },
    {
      "url": "/v3/secrets",
      "method": "getSecrets",
      "httpMethod": "get",
      "tag": "secrets",
      "typeScriptTag": "secrets",
      "description": "List secrets",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": "Filter out secrets based on comma separated secret ids."
        },
        {
          "name": "projectId",
          "schema": "string",
          "description": "Filter out secrets that belong to a project."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v3/secrets/{idOrName}",
      "method": "getSecret",
      "httpMethod": "get",
      "tag": "secrets",
      "typeScriptTag": "secrets",
      "description": "Get a single secret",
      "parameters": [
        {
          "name": "idOrName",
          "schema": "string",
          "required": true,
          "description": "The name or the unique identifier to which the secret belongs to."
        },
        {
          "name": "decrypt",
          "schema": "string",
          "required": false,
          "description": "Whether to try to decrypt the value of the secret. Only works if `decryptable` has been set to `true` when the secret was created."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Data representing a secret."
        }
      ]
    },
    {
      "url": "/v3/user/tokens",
      "method": "createAuthToken",
      "httpMethod": "post",
      "tag": "authentication",
      "typeScriptTag": "authentication",
      "description": "Create an Auth Token",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Successful response."
        }
      ]
    },
    {
      "url": "/v3/user/tokens/{tokenId}",
      "method": "deleteAuthToken",
      "httpMethod": "delete",
      "tag": "authentication",
      "typeScriptTag": "authentication",
      "description": "Delete an authentication token",
      "parameters": [
        {
          "name": "tokenId",
          "schema": "string",
          "required": true,
          "description": "The identifier of the token to invalidate. The special value \\\"current\\\" may be supplied, which invalidates the token that the HTTP request was authenticated with."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Authentication token successfully deleted."
        }
      ]
    },
    {
      "url": "/v4/aliases",
      "method": "listAliases",
      "httpMethod": "get",
      "tag": "aliases",
      "typeScriptTag": "aliases",
      "description": "List aliases",
      "parameters": [
        {
          "name": "domain",
          "schema": "undefined",
          "description": "Get only aliases of the given domain name"
        },
        {
          "name": "from",
          "schema": "number",
          "description": "Get only aliases created after the provided timestamp"
        },
        {
          "name": "limit",
          "schema": "number",
          "description": "Maximum number of aliases to list from a request"
        },
        {
          "name": "projectId",
          "schema": "string",
          "description": "Filter aliases from the given `projectId`"
        },
        {
          "name": "since",
          "schema": "number",
          "description": "Get aliases created after this JavaScript timestamp"
        },
        {
          "name": "until",
          "schema": "number",
          "description": "Get aliases created before this JavaScript timestamp"
        },
        {
          "name": "rollbackDeploymentId",
          "schema": "string",
          "description": "Get aliases that would be rolled back for the given deployment"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/aliases/{idOrAlias}",
      "method": "getAlias",
      "httpMethod": "get",
      "tag": "aliases",
      "typeScriptTag": "aliases",
      "description": "Get an Alias",
      "parameters": [
        {
          "name": "from",
          "schema": "number",
          "required": false,
          "description": "Get the alias only if it was created after the provided timestamp"
        },
        {
          "name": "idOrAlias",
          "schema": "string",
          "required": true,
          "description": "The alias or alias ID to be retrieved"
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": false,
          "description": "Get the alias only if it is assigned to the provided project ID"
        },
        {
          "name": "since",
          "schema": "number",
          "required": false,
          "description": "Get the alias only if it was created after this JavaScript timestamp"
        },
        {
          "name": "until",
          "schema": "number",
          "required": false,
          "description": "Get the alias only if it was created before this JavaScript timestamp"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/domains/buy",
      "method": "buyDomain",
      "httpMethod": "post",
      "tag": "domains",
      "typeScriptTag": "domains",
      "description": "Purchase a domain",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "expectedPrice",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "renew",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/domains/price",
      "method": "checkDomainPrice",
      "httpMethod": "get",
      "tag": "domains",
      "typeScriptTag": "domains",
      "description": "Check the price for a domain",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the domain for which the price needs to be checked."
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "In which status of the domain the price needs to be checked."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Successful response which returns the price of the domain and the period."
        }
      ]
    },
    {
      "url": "/v4/domains/status",
      "method": "checkDomainStatus",
      "httpMethod": "get",
      "tag": "domains",
      "typeScriptTag": "domains",
      "description": "Check a Domain Availability",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the domain for which we would like to check the status."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/domains/{domain}/records",
      "method": "getRecords",
      "httpMethod": "get",
      "tag": "dns",
      "typeScriptTag": "dns",
      "description": "List existing DNS records",
      "parameters": [
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Maximum number of records to list from a request."
        },
        {
          "name": "since",
          "schema": "string",
          "required": false,
          "description": "Get records created after this JavaScript timestamp."
        },
        {
          "name": "until",
          "schema": "string",
          "required": false,
          "description": "Get records created before this JavaScript timestamp."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v5/domains",
      "method": "getDomains",
      "httpMethod": "get",
      "tag": "domains",
      "typeScriptTag": "domains",
      "description": "List all the domains",
      "parameters": [
        {
          "name": "limit",
          "schema": "number",
          "description": "Maximum number of domains to list from a request."
        },
        {
          "name": "since",
          "schema": "number",
          "description": "Get domains created after this JavaScript timestamp."
        },
        {
          "name": "until",
          "schema": "number",
          "description": "Get domains created before this JavaScript timestamp."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v5/domains",
      "method": "createOrTransferDomain",
      "httpMethod": "post",
      "tag": "domains",
      "typeScriptTag": "domains",
      "description": "Register or transfer-in a new Domain",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "method",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v5/domains/{domain}",
      "method": "getDomain",
      "httpMethod": "get",
      "tag": "domains",
      "typeScriptTag": "domains",
      "description": "Get Information for a Single Domain",
      "parameters": [
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "The name of the domain."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v5/user/tokens",
      "method": "listAuthTokens",
      "httpMethod": "get",
      "tag": "authentication",
      "typeScriptTag": "authentication",
      "description": "List Auth Tokens",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v5/user/tokens/{tokenId}",
      "method": "getAuthToken",
      "httpMethod": "get",
      "tag": "authentication",
      "typeScriptTag": "authentication",
      "description": "Get Auth Token Metadata",
      "parameters": [
        {
          "name": "tokenId",
          "schema": "string",
          "required": true,
          "description": "The identifier of the token to retrieve. The special value \\\"current\\\" may be supplied, which returns the metadata for the token that the current HTTP request is authenticated with."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Successful response."
        }
      ]
    },
    {
      "url": "/v6/deployments",
      "method": "getDeployments",
      "httpMethod": "get",
      "tag": "deployments",
      "typeScriptTag": "deployments",
      "description": "List deployments",
      "parameters": [
        {
          "name": "app",
          "schema": "string",
          "description": "Name of the deployment."
        },
        {
          "name": "from",
          "schema": "number",
          "description": "Gets the deployment created after this Date timestamp. (default: current time)"
        },
        {
          "name": "limit",
          "schema": "number",
          "description": "Maximum number of deployments to list from a request."
        },
        {
          "name": "projectId",
          "schema": "string",
          "description": "Filter deployments from the given `projectId`."
        },
        {
          "name": "target",
          "schema": "string",
          "description": "Filter deployments based on the environment."
        },
        {
          "name": "to",
          "schema": "number",
          "description": "Gets the deployment created before this Date timestamp. (default: current time)"
        },
        {
          "name": "users",
          "schema": "string",
          "description": "Filter out deployments based on users who have created the deployment."
        },
        {
          "name": "since",
          "schema": "number",
          "description": "Get Deployments created after this JavaScript timestamp."
        },
        {
          "name": "until",
          "schema": "number",
          "description": "Get Deployments created before this JavaScript timestamp."
        },
        {
          "name": "state",
          "schema": "string",
          "description": "Filter deployments based on their state (`BUILDING`, `ERROR`, `INITIALIZING`, `QUEUED`, `READY`, `CANCELED`)"
        },
        {
          "name": "rollbackCandidate",
          "schema": "boolean",
          "description": "Filter deployments based on their rollback candidacy"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v6/deployments/{id}/files",
      "method": "listDeploymentFiles",
      "httpMethod": "get",
      "tag": "deployments",
      "typeScriptTag": "deployments",
      "description": "List Deployment Files",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique deployment identifier"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v6/deployments/{id}/files/{fileId}",
      "method": "getDeploymentFileContents",
      "httpMethod": "get",
      "tag": "deployments",
      "typeScriptTag": "deployments",
      "description": "Get Deployment File Contents",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique deployment identifier"
        },
        {
          "name": "fileId",
          "schema": "string",
          "required": true,
          "description": "The unique file identifier"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": []
    },
    {
      "url": "/v6/domains/{domain}",
      "method": "deleteDomain",
      "httpMethod": "delete",
      "tag": "domains",
      "typeScriptTag": "domains",
      "description": "Remove a domain by name",
      "parameters": [
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "The name of the domain."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v6/domains/{domain}/config",
      "method": "getDomainConfig",
      "httpMethod": "get",
      "tag": "domains",
      "typeScriptTag": "domains",
      "description": "Get a Domain's configuration",
      "parameters": [
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "The name of the domain."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v7/certs",
      "method": "issueCert",
      "httpMethod": "post",
      "tag": "certs",
      "typeScriptTag": "certs",
      "description": "Issue a new cert",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "cns",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v7/certs",
      "method": "uploadCert",
      "httpMethod": "put",
      "tag": "certs",
      "typeScriptTag": "certs",
      "description": "Upload a cert",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "ca",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "cert",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "skipValidation",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v7/certs/{id}",
      "method": "removeCert",
      "httpMethod": "delete",
      "tag": "certs",
      "typeScriptTag": "certs",
      "description": "Remove cert",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The cert id to remove"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v7/certs/{id}",
      "method": "getCertById",
      "httpMethod": "get",
      "tag": "certs",
      "typeScriptTag": "certs",
      "description": "Get cert by id",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The cert id"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v8/artifacts",
      "method": "artifactQuery",
      "httpMethod": "post",
      "tag": "artifacts",
      "typeScriptTag": "artifacts",
      "description": "Query information about an artifact",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "hashes",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/v8/artifacts/events",
      "method": "recordEvents",
      "httpMethod": "post",
      "tag": "artifacts",
      "typeScriptTag": "artifacts",
      "description": "Record an artifacts cache usage event",
      "parameters": [
        {
          "name": "xArtifactClientCi",
          "schema": "string",
          "description": "The continuous integration or delivery environment where this artifact is downloaded."
        },
        {
          "name": "xArtifactClientInteractive",
          "schema": "integer",
          "description": "1 if the client is an interactive shell. Otherwise 0"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": []
    },
    {
      "url": "/v8/artifacts/status",
      "method": "status",
      "httpMethod": "get",
      "tag": "artifacts",
      "typeScriptTag": "artifacts",
      "description": "Get status of Remote Caching for this principal",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": []
    },
    {
      "url": "/v8/artifacts/{hash}",
      "method": "downloadArtifact",
      "httpMethod": "get",
      "tag": "artifacts",
      "typeScriptTag": "artifacts",
      "description": "Download a cache artifact",
      "parameters": [
        {
          "name": "xArtifactClientCi",
          "schema": "string",
          "description": "The continuous integration or delivery environment where this artifact is downloaded."
        },
        {
          "name": "xArtifactClientInteractive",
          "schema": "integer",
          "description": "1 if the client is an interactive shell. Otherwise 0"
        },
        {
          "name": "hash",
          "schema": "string",
          "required": true,
          "description": "The artifact hash"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": []
    },
    {
      "url": "/v8/artifacts/{hash}",
      "method": "artifactExists",
      "httpMethod": "head",
      "tag": "artifacts",
      "typeScriptTag": "artifacts",
      "description": "Check if a cache artifact exists",
      "parameters": [
        {
          "name": "hash",
          "schema": "string",
          "required": true,
          "description": "The artifact hash"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": []
    },
    {
      "url": "/v8/artifacts/{hash}",
      "method": "uploadArtifact",
      "httpMethod": "put",
      "tag": "artifacts",
      "typeScriptTag": "artifacts",
      "description": "Upload a cache artifact",
      "parameters": [
        {
          "name": "contentLength",
          "schema": "number",
          "required": true,
          "description": "The artifact size in bytes"
        },
        {
          "name": "xArtifactDuration",
          "schema": "number",
          "required": false,
          "description": "The time taken to generate the uploaded artifact in milliseconds."
        },
        {
          "name": "xArtifactClientCi",
          "schema": "string",
          "required": false,
          "description": "The continuous integration or delivery environment where this artifact was generated."
        },
        {
          "name": "xArtifactClientInteractive",
          "schema": "integer",
          "required": false,
          "description": "1 if the client is an interactive shell. Otherwise 0"
        },
        {
          "name": "xArtifactTag",
          "schema": "string",
          "required": false,
          "description": "The base64 encoded tag for this artifact. The value is sent back to clients when the artifact is downloaded as the header `x-artifact-tag`"
        },
        {
          "name": "hash",
          "schema": "string",
          "required": true,
          "description": "The artifact hash"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": []
    },
    {
      "url": "/v9/projects",
      "method": "getProjects",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Retrieve a list of projects",
      "parameters": [
        {
          "name": "from",
          "schema": "string",
          "description": "Query only projects updated after the given timestamp"
        },
        {
          "name": "gitForkProtection",
          "schema": "string",
          "description": "Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed"
        },
        {
          "name": "limit",
          "schema": "string",
          "description": "Limit the number of projects returned"
        },
        {
          "name": "search",
          "schema": "string",
          "description": "Search projects by the name field"
        },
        {
          "name": "repo",
          "schema": "string",
          "description": "Filter results by repo. Also used for project count"
        },
        {
          "name": "repoId",
          "schema": "string",
          "description": "Filter results by Repository ID."
        },
        {
          "name": "repoUrl",
          "schema": "string",
          "description": "Filter results by Repository URL."
        },
        {
          "name": "excludeRepos",
          "schema": "string",
          "description": "Filter results by excluding those projects that belong to a repo"
        },
        {
          "name": "edgeConfigId",
          "schema": "string",
          "description": "Filter results by connected Edge Config ID"
        },
        {
          "name": "edgeConfigTokenId",
          "schema": "string",
          "description": "Filter results by connected Edge Config Token ID"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v9/projects",
      "method": "createProject",
      "httpMethod": "post",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Create a new project",
      "parameters": [
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "buildCommand",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "commandForIgnoringBuildStep",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "devCommand",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "environmentVariables",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "framework",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "gitRepository",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "installCommand",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "outputDirectory",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "publicSource",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "rootDirectory",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "serverlessFunctionRegion",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "skipGitConnectDuringLink",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v9/projects/{idOrName}",
      "method": "deleteProject",
      "httpMethod": "delete",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Delete a Project",
      "parameters": [
        {
          "name": "idOrName",
          "schema": "string",
          "required": true,
          "description": "The unique project identifier or the project name"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": []
    },
    {
      "url": "/v9/projects/{idOrName}",
      "method": "getProject",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Find a project by id or name",
      "parameters": [
        {
          "name": "idOrName",
          "schema": "undefined",
          "required": true,
          "description": "The unique project identifier or the project name"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v9/projects/{idOrName}",
      "method": "updateProject",
      "httpMethod": "patch",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Update an existing project",
      "parameters": [
        {
          "name": "idOrName",
          "schema": "string",
          "required": true,
          "description": "The unique project identifier or the project name"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "autoExposeSystemEnvs",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "buildCommand",
          "schema": "string",
          "description": ""
        },
        {
          "name": "commandForIgnoringBuildStep",
          "schema": "string",
          "description": ""
        },
        {
          "name": "devCommand",
          "schema": "string",
          "description": ""
        },
        {
          "name": "directoryListing",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enablePreviewFeedback",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "framework",
          "schema": "string",
          "description": ""
        },
        {
          "name": "gitForkProtection",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "gitLFS",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "installCommand",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "nodeVersion",
          "schema": "string",
          "description": ""
        },
        {
          "name": "outputDirectory",
          "schema": "string",
          "description": ""
        },
        {
          "name": "passwordProtection",
          "schema": "object",
          "description": ""
        },
        {
          "name": "publicSource",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "rootDirectory",
          "schema": "string",
          "description": ""
        },
        {
          "name": "serverlessFunctionRegion",
          "schema": "string",
          "description": ""
        },
        {
          "name": "skipGitConnectDuringLink",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "sourceFilesOutsideRootDirectory",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ssoProtection",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v9/projects/{idOrName}/domains",
      "method": "getProjectDomains",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Retrieve project domains by project by id or name",
      "parameters": [
        {
          "name": "idOrName",
          "schema": "undefined",
          "required": true,
          "description": "The unique project identifier or the project name"
        },
        {
          "name": "production",
          "schema": "undefined",
          "required": false,
          "description": "Filters only production domains when set to `true`."
        },
        {
          "name": "gitBranch",
          "schema": "string",
          "required": false,
          "description": "Filters domains based on specific branch."
        },
        {
          "name": "redirects",
          "schema": "undefined",
          "required": false,
          "description": "Excludes redirect project domains when \\\"false\\\". Includes redirect project domains when \\\"true\\\" (default)."
        },
        {
          "name": "redirect",
          "schema": "string",
          "required": false,
          "description": "Filters domains based on their redirect target."
        },
        {
          "name": "verified",
          "schema": "undefined",
          "required": false,
          "description": "Filters domains based on their verification status."
        },
        {
          "name": "limit",
          "schema": "number",
          "required": false,
          "description": "Maximum number of domains to list from a request (max 100)."
        },
        {
          "name": "since",
          "schema": "number",
          "required": false,
          "description": "Get domains created after this JavaScript timestamp."
        },
        {
          "name": "until",
          "schema": "number",
          "required": false,
          "description": "Get domains created before this JavaScript timestamp."
        },
        {
          "name": "order",
          "schema": "undefined",
          "required": false,
          "description": "Domains sort order by createdAt"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v9/projects/{idOrName}/domains/{domain}",
      "method": "removeProjectDomain",
      "httpMethod": "delete",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Remove a domain from a project",
      "parameters": [
        {
          "name": "idOrName",
          "schema": "string",
          "required": true,
          "description": "The unique project identifier or the project name"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "The project domain name"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v9/projects/{idOrName}/domains/{domain}",
      "method": "getProjectDomain",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Get a project domain",
      "parameters": [
        {
          "name": "idOrName",
          "schema": "string",
          "required": true,
          "description": "The unique project identifier or the project name"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "The project domain name"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v9/projects/{idOrName}/domains/{domain}",
      "method": "updateProjectDomain",
      "httpMethod": "patch",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Update a project domain",
      "parameters": [
        {
          "name": "idOrName",
          "schema": "string",
          "required": true,
          "description": "The unique project identifier or the project name"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "The project domain name"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "gitBranch",
          "schema": "string",
          "description": ""
        },
        {
          "name": "redirect",
          "schema": "string",
          "description": ""
        },
        {
          "name": "redirectStatusCode",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v9/projects/{idOrName}/domains/{domain}/verify",
      "method": "verifyProjectDomain",
      "httpMethod": "post",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Verify project domain",
      "parameters": [
        {
          "name": "idOrName",
          "schema": "string",
          "required": true,
          "description": "The unique project identifier or the project name"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "The domain name you want to verify"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v9/projects/{idOrName}/env",
      "method": "filterProjectEnvs",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Retrieve the environment variables of a project by id or name",
      "parameters": [
        {
          "name": "idOrName",
          "schema": "string",
          "required": true,
          "description": "The unique project identifier or the project name"
        },
        {
          "name": "gitBranch",
          "schema": "string",
          "required": false,
          "description": "If defined, the git branch of the environment variable to filter the results"
        },
        {
          "name": "decrypt",
          "schema": "string",
          "required": false,
          "description": "If true, the environment variable value will be decrypted"
        },
        {
          "name": "source",
          "schema": "string",
          "required": false,
          "description": "The source that is calling the endpoint."
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v9/projects/{idOrName}/env/{id}",
      "method": "removeProjectEnv",
      "httpMethod": "delete",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Remove an environment variable",
      "parameters": [
        {
          "name": "idOrName",
          "schema": "string",
          "required": true,
          "description": "The unique project identifier or the project name"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique environment variable identifier"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v9/projects/{idOrName}/env/{id}",
      "method": "editProjectEnv",
      "httpMethod": "patch",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Edit an environment variable",
      "parameters": [
        {
          "name": "idOrName",
          "schema": "string",
          "required": true,
          "description": "The unique project identifier or the project name"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The unique environment variable identifier"
        },
        {
          "name": "teamId",
          "schema": "string",
          "description": "The Team identifier or slug to perform the request on behalf of."
        },
        {
          "name": "gitBranch",
          "schema": "string",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "target",
          "schema": "array",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.vercel.com",
  "apiDescription": "Vercel combines the best developer experience with an obsessive focus on end-user performance. Our platform enables frontend teams to do their best work.",
  "apiTitle": "Vercel API",
  "endpoints": 85,
  "sdkMethods": 113,
  "schemas": 12,
  "parameters": 466,
  "contactUrl": "https://vercel.com/support",
  "contactEmail": "support@vercel.com",
  "difficultyScore": 235.5,
  "difficulty": "Hard"
}