{
  "providerName": "ideal-postcodes.co.uk",
  "openApiRaw": "https://openapi.ideal-postcodes.dev/openapi.json",
  "securitySchemes": {},
  "homepage": "ideal-postcodes.co.uk",
  "apiVersion": "3.7.0",
  "methods": [
    {
      "url": "/addresses",
      "method": "addresses",
      "httpMethod": "get",
      "tag": "UK",
      "description": "Extract Addresses",
      "parameters": [
        {
          "name": "apiKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "query",
          "schema": "string",
          "description": "Specifies the address you wish to query. Query can be shortened to `q=`"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "page",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "filter",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lon",
          "schema": "number",
          "description": ""
        },
        {
          "name": "lat",
          "schema": "number",
          "description": ""
        },
        {
          "name": "postcodeOutward",
          "schema": "string",
          "description": ""
        },
        {
          "name": "postcode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "postcodeArea",
          "schema": "string",
          "description": ""
        },
        {
          "name": "postcodeSector",
          "schema": "string",
          "description": ""
        },
        {
          "name": "postTown",
          "schema": "string",
          "description": ""
        },
        {
          "name": "uprn",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "description": ""
        },
        {
          "name": "postcodeType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "suOrganisationIndicator",
          "schema": "string",
          "description": ""
        },
        {
          "name": "box",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasPostcodeOutward",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasPostcode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasPostcodeArea",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasPostcodeSector",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasPostTown",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasThoroughfare",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasCountry",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasLonlat",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/autocomplete/addresses",
      "method": "addressAutocomplete",
      "httpMethod": "get",
      "tag": "Address Search",
      "description": "Find Address",
      "parameters": [
        {
          "name": "apiKey",
          "schema": "string",
          "description": ""
        },
        {
          "name": "query",
          "schema": "string",
          "description": "Specifies the address you wish to query. Query can be shortened to `q=`"
        },
        {
          "name": "context",
          "schema": "string",
          "description": ""
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Limits number of address suggestions unless a postcode is detected. In this instance entire list of addreses for that postcode is returned.\n"
        },
        {
          "name": "postcodeOutward",
          "schema": "string",
          "description": ""
        },
        {
          "name": "postcode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "postcodeArea",
          "schema": "string",
          "description": ""
        },
        {
          "name": "postcodeSector",
          "schema": "string",
          "description": ""
        },
        {
          "name": "postTown",
          "schema": "string",
          "description": ""
        },
        {
          "name": "uprn",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "description": ""
        },
        {
          "name": "postcodeType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "suOrganisationIndicator",
          "schema": "string",
          "description": ""
        },
        {
          "name": "box",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasPostcodeOutward",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasPostcode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasPostcodeArea",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasPostcodeSector",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasPostTown",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasThoroughfare",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasCountry",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasLonlat",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasIp",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/autocomplete/addresses/{address}/gbr",
      "method": "resolve",
      "httpMethod": "get",
      "tag": "Address Search",
      "description": "Resolve Address (GBR)",
      "parameters": [
        {
          "name": "address",
          "schema": "string",
          "required": true,
          "description": "ID of address suggestion"
        },
        {
          "name": "apiKey",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/autocomplete/addresses/{address}/usa",
      "method": "resolveUsa",
      "httpMethod": "get",
      "tag": "Address Search",
      "description": "Resolve Address (USA)",
      "parameters": [
        {
          "name": "address",
          "schema": "string",
          "required": true,
          "description": "ID of address suggestion"
        },
        {
          "name": "apiKey",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/cleanse/addresses",
      "method": "addressCleanse",
      "httpMethod": "post",
      "tag": "UK",
      "description": "Cleanse",
      "parameters": [
        {
          "name": "apiKey",
          "schema": "string",
          "description": ""
        },
        {
          "name": "query",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/emails",
      "method": "emailValidation",
      "httpMethod": "get",
      "tag": "Emails",
      "description": "Email Validation",
      "parameters": [
        {
          "name": "apiKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "query",
          "schema": "string",
          "required": true,
          "description": "Specifies the email address to validate"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/keys/{key}",
      "method": "keyAvailability",
      "httpMethod": "get",
      "tag": "Keys",
      "description": "Availability",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/keys/{key}/configs",
      "method": "listConfigs",
      "httpMethod": "get",
      "tag": "Configs",
      "description": "List",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "userToken",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/keys/{key}/configs",
      "method": "createConfig",
      "httpMethod": "post",
      "tag": "Configs",
      "description": "Create",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "userToken",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "payload",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/keys/{key}/configs/{config}",
      "method": "deleteConfig",
      "httpMethod": "delete",
      "tag": "Configs",
      "description": "Delete",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "config",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "userToken",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/keys/{key}/configs/{config}",
      "method": "retrieveConfig",
      "httpMethod": "get",
      "tag": "Configs",
      "description": "Retrieve",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "config",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/keys/{key}/configs/{config}",
      "method": "updateConfig",
      "httpMethod": "post",
      "tag": "Configs",
      "description": "Update",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "config",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "userToken",
          "schema": "string",
          "description": ""
        },
        {
          "name": "payload",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/keys/{key}/details",
      "method": "keyDetails",
      "httpMethod": "get",
      "tag": "Keys",
      "description": "Details",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "userToken",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/keys/{key}/licensees",
      "method": "listLicensees",
      "httpMethod": "get",
      "tag": "Licensees",
      "description": "List",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "startingAfter",
          "schema": "integer",
          "description": "Specify ID of the licensee after which you would like to list results"
        },
        {
          "name": "userToken",
          "schema": "string",
          "description": ""
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Specify the maximum number of results to return per page. Default and maximum is `100`."
        },
        {
          "name": "query",
          "schema": "string",
          "description": "Filter result by licensee name. Query can be shortened to `q=`"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/keys/{key}/licensees",
      "method": "createLicensee",
      "httpMethod": "post",
      "tag": "Licensees",
      "description": "Create",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "userToken",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address",
          "schema": "string",
          "description": ""
        },
        {
          "name": "daily",
          "schema": "object",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "postcode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "whitelist",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/keys/{key}/licensees/{licensee}",
      "method": "deleteLicensee",
      "httpMethod": "delete",
      "tag": "Licensees",
      "description": "Cancel",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "licensee",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "userToken",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/keys/{key}/licensees/{licensee}",
      "method": "retrieveLicensee",
      "httpMethod": "get",
      "tag": "Licensees",
      "description": "Retrieve",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "licensee",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "userToken",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/keys/{key}/licensees/{licensee}",
      "method": "updateLicensee",
      "httpMethod": "put",
      "tag": "Licensees",
      "description": "Update",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "licensee",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "userToken",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address",
          "schema": "string",
          "description": ""
        },
        {
          "name": "daily",
          "schema": "object",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "postcode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "whitelist",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/keys/{key}/lookups",
      "method": "keyLogs",
      "httpMethod": "get",
      "tag": "Keys",
      "description": "Logs (CSV)",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "start",
          "schema": "integer",
          "description": "An start date/time in the form of a UNIX Timestamp in milliseconds, e.g. `1418556452651`. If no start time is provided, the start time will be assigned to a time 21 days prior to the end time."
        },
        {
          "name": "end",
          "schema": "integer",
          "description": "An end date/time in the form of a UNIX Timestamp in milliseconds, e.g. `1418556452651`. If no end time is provided, the current time will be used."
        },
        {
          "name": "licensee",
          "schema": "string",
          "description": "Sublicensed keys only. This will restrict the analysed dataset to a specific licensee."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Success"
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/keys/{key}/usage",
      "method": "keyUsage",
      "httpMethod": "get",
      "tag": "Keys",
      "description": "Usage Stats",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "start",
          "schema": "integer",
          "description": "A start date/time in the form of a UNIX Timestamp in milliseconds, e.g. `1418556452651`. If no start time is provided, the start time will be assigned to a time 21 days prior to the end time."
        },
        {
          "name": "end",
          "schema": "integer",
          "description": "An end date/time in the form of a UNIX Timestamp in milliseconds, e.g. `1418556452651`. If no end time is provided, the current time will be used."
        },
        {
          "name": "tags",
          "schema": "string",
          "description": ""
        },
        {
          "name": "licensee",
          "schema": "string",
          "description": "Sublicensed keys only. This will restrict the analysed dataset to a specific licensee."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/phone_numbers",
      "method": "phoneNumberValidation",
      "httpMethod": "get",
      "tag": "Phone Numbers",
      "description": "Phone Number Validation",
      "parameters": [
        {
          "name": "apiKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "query",
          "schema": "string",
          "required": true,
          "description": "Specifies the phone number to validate. Phone number must include a country code in acceptable format. For instance, UK phone numbers should be suffixed `+44`, `44` or `0044`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/places",
      "method": "findPlace",
      "httpMethod": "get",
      "tag": "Place Search",
      "description": "Find Place",
      "parameters": [
        {
          "name": "apiKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "query",
          "schema": "string",
          "description": "Specifies the place you wish to query. Query can be shortened to `q=`"
        },
        {
          "name": "countryIso",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasCountryIso",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasLonlat",
          "schema": "string",
          "description": ""
        },
        {
          "name": "biasIp",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/places/${place}",
      "method": "resolvePlace",
      "httpMethod": "get",
      "tag": "Place Search",
      "description": "Resolve Place",
      "parameters": [
        {
          "name": "place",
          "schema": "string",
          "required": true,
          "description": "ID of place suggestion"
        },
        {
          "name": "apiKey",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/postcodes/{postcode}",
      "method": "postcodes",
      "httpMethod": "get",
      "tag": "UK",
      "description": "Lookup Postcode",
      "parameters": [
        {
          "name": "postcode",
          "schema": "string",
          "required": true,
          "description": "Postcode to retrieve"
        },
        {
          "name": "apiKey",
          "schema": "string",
          "description": ""
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/udprn/{udprn}",
      "method": "udprn",
      "httpMethod": "get",
      "tag": "UK",
      "description": "Retrieve by UDPRN",
      "parameters": [
        {
          "name": "udprn",
          "schema": "string",
          "required": true,
          "description": "UDPRN to be retrieved"
        },
        {
          "name": "apiKey",
          "schema": "string",
          "description": ""
        },
        {
          "name": "filter",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/umprn/{umprn}",
      "method": "umprn",
      "httpMethod": "get",
      "tag": "UK",
      "description": "Retrieve by UMPRN",
      "parameters": [
        {
          "name": "umprn",
          "schema": "string",
          "required": true,
          "description": "UMPRN to be retrieved"
        },
        {
          "name": "apiKey",
          "schema": "string",
          "description": ""
        },
        {
          "name": "filter",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.ideal-postcodes.co.uk/v1",
  "apiDescription": "# Getting Started\n\n## Overview\n\n### Access\n\nAll API methods are either a `GET`, `POST` or `OPTIONS` request.\n\nThe API communicates over both HTTPS and plain HTTP using IPv4 and IPv6.\n\nWe recommend using HTTPS only although HTTP is available.\n\nWe use appropriate HTTP status codes where possible to indicate the request status.\n\n### Rate Limiting\n\nEach IP address is rate limited at 30 requests per second. Tripping the rate limit will result in a 503 response.\n\nThe autocomplete API also has an additional rate limit.\n\nIf you expect to breach the limit please contact us and we can move you to an endpoint with a higher limit.\n\n### JSONP\n\n[JSONP](http://en.wikipedia.org/wiki/JSONP) requests are supported. Include a `callback=` in your request as a query parameter. Your results return wrapped in a function designated by your request.\n\n## Authentication\n\nMost requests require an **API key** for authentication. Authenticate by passing an `api_key` as part of the query string. For example:\n\n```\napi.ideal-postcodes.co.uk/v1/autocomplete/addresses?api_key=iddqd&q=parkside\n```\n\nAlternatively, authentication can be transmitted via the `Authorization` header using the following scheme:\n\n```\nAuthorization: api_key=\"iddqd\" [other_key=\"foo\"]\n```\n\n## Versioning\n\nThis API is versioned with a simple prefix in the URL. The current version is `/v1/`. We will maintain backwards-compatibility by releasing breaking changes under a new version.\n\nPlease note that the following changes are backwards-compatible:\n\n- Adding new properties to existing API responses\n- Adding new API endpoints\n- Adding new optional request parameters to existing API endpoints\n- Changing the order of properties in existing API responses\n- Changing the autocomplete address suggestion format\n\n## Error Handling\n\nA successful lookup is accompanied with a HTTP status code of 200 and a response code of 2000 (found in the body).\n\nAn error has occurred if the HTTP status code is not 200. Errors can range from a benign 404 (resource not found) to more urgent errors (your API Key ran out of credit, failed authentication, etc).\n\n## Testing\n\nEach new account comes with a free test balance. Contact us if you need more for testing and integration.\n\n### Community Key\n\nOur documentation and demos make heavy use of our community key `iddqd`. This allows for convenient access for trialing the API.\n\nMany restrictions on this key are relaxed to allow developers make test requests. This key has a limit of 15 lookups per IP address per day as well as a daily usage cap. If you hit any limit restrictions, you can continue testing the API by creating a key of your own and using our free test methods.\n\nPlease be kind with the community key. We're trusting everyone to use it responsibly so that other developers may trial the API. Thank you!\n\n## Metadata\n\nRequests that affect your balance may be annotated with arbitrary metadata. This data is stored along with your lookup history and can be queried at a later date via the API or the dashboard. We call the ability to label your requests [tagging](https://docs.ideal-postcodes.co.uk/docs/guides/tags).\n\n# Response Codes\n\nThe API returns two indicators to help you to determine the status of each HTTP request.\n\nThe first is the **HTTP Status**, which is found in the status-line of all HTTP requests. The API will return status codes that adhere to HTTP /1.1 Specifications wherever possible.\n\n`2XX` status codes indicates success while `4XX` and `5XX` indicate client and server errors respectively.\n\nThe second is the **API response code**, which can be found in the `code` property of the response body. This code will provide a more specific reason if a failure has occurred and can point you in the right direction when debugging.\n\nPlease use the glossary of code numbers and HTTP status codes below when debugging your requests.\n\n## 200 Request Success\n\n| HTTP Code | API Code | Description                                  |\n| --------- | -------- | -------------------------------------------- |\n| 200       | 2000     | Success. Request was completed successfully. |\n\n## 400 Bad Request\n\nThe request could not be understood due to some input error.\n\n| HTTP Code | API Code | Description                                                                                                                           |\n| --------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------- |\n| 400       | 4000     | Invalid syntax submitted. Some part of your request was malformed or did not match our specifications.                                |\n| 400       | 4001     | Validation failed on your submitted data. Some of the data you provided did not meet our validation requirements, e.g. string length. |\n| 400       | 4005     | Invalid start date. Please ensure start dates are provided as a UTC Timestamp in milliseconds.                                        |\n| 400       | 4006     | Invalid end date. Please ensure end dates are provided as a UTC Timestamp in milliseconds.                                            |\n| 400       | 4007     | Invalid date range. Check if your start and end dates are in the right order.                                                         |\n| 400       | 4008     | Invalid date range. Check that your date range is 90 days or less.                                                                    |\n| 400       | 4009     | Too many tags. Please specify no more than 3 tags to query.                                                                           |\n\n## 401 Unauthorised\n\nAuthorization credentials are not valid.\n\n| HTTP Code | API Code | Description                                                                                                                                                        |\n| --------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| 401       | 4010     | Invalid Key. The `api_key` you provided is not valid.                                                                                                              |\n| 401       | 4011     | Requesting URL not on whitelist. The cross domain request is not coming from a whitelisted URL. You can update or disable your allowed URLs via your Key settings. |\n| 401       | 4012     | Failed user authentication. Invalid `user_token` presented.                                                                                                        |\n| 401       | 4013     | Licensee Key is required. Sublicensed keys require you need to present licensee credentials via the `licensee` parameter.                                          |\n\n## 402 Request Failed\n\nYour request is well-formed but are not able to complete your request for another reason.\n\n| HTTP Code | API Code | Description                                                                                                                                                                                                                                                        |\n| --------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| 402       | 4020     | Key balance depleted. You're out of lookups on your API Key.                                                                                                                                                                                                       |\n| 402       | 4021     | Limit reached. One of your lookup limits has been breached for today. This could either be your total daily limit on your key or the individual IP limit. You can either wait for for the limit to reset (after a day) or manually disable or increase your limit. |\n\n## 404 Resource Not Found\n\nThe resource you requested does not exist.\n\n| HTTP Code | API Code | Description                                                                                   |\n| --------- | -------- | --------------------------------------------------------------------------------------------- |\n| 404       | 4040     | Postcode not found. The postcode you have submitted does not exist.                           |\n| 404       | 4041     | User not found. Your user could not be identified given the credentials you presented.        |\n| 404       | 4042     | Key not found. Your key could not be identified given the credentials you presented.          |\n| 404       | 4044     | No UDPRN found. No address is associated with the UDPRN queried                               |\n| 404       | 4045     | No licensee found. Your licensee could not be identified given the credentials you presented. |\n| 404       | 4046     | No UMPRN found. No Multiple Residence premise is associated with the UMPRN queried.           |\n\n## 500 Server Error\n\nA error occurred on our server.\n\n| HTTP Code | API Code | Description                                                                                                                                                        |\n| --------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| 500       | 5000     | An error occurred on our end. These errors are logged and queued so we can understand what went wrong. However, if you need speedy resolution please email support |\n| 500       | 5001     | Akin to 5000.                                                                                                                                                      |\n| 500       | 5002     | The server took too long to process on our end, so we aborted the request. You may retry the request.                                                              |\n",
  "apiTitle": "API Reference - Ideal Postcodes",
  "endpoints": 20,
  "sdkMethods": 26,
  "schemas": 194,
  "parameters": 129,
  "contactUrl": "https://ideal-postcodes.co.uk/support",
  "contactEmail": "support@ideal-postcodes.co.uk",
  "difficultyScore": 155.25,
  "difficulty": "Medium"
}