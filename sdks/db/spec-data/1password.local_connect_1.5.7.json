{
  "providerName": "1password.local",
  "openApiRaw": "https://i.1password.com/media/1password-connect/1password-connect-api.yaml",
  "securitySchemes": {
    "ConnectToken": {
      "bearerFormat": "JWT",
      "scheme": "bearer",
      "type": "http"
    }
  },
  "homepage": "1password.local",
  "serviceName": "connect",
  "apiVersion": "1.5.7",
  "methods": [
    {
      "url": "/activity",
      "method": "getApiActivity",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "Retrieve a list of API Requests that have been made.",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "How many API Events should be retrieved in a single request."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "How far into the collection of API Events should the response start"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/health",
      "method": "getServerHealth",
      "httpMethod": "get",
      "tag": "Health",
      "typeScriptTag": "health",
      "description": "Get state of the server and its dependencies.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/heartbeat",
      "method": "getHeartbeat",
      "httpMethod": "get",
      "tag": "Health",
      "typeScriptTag": "health",
      "description": "Ping the server for liveness",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/metrics",
      "method": "getPrometheusMetrics",
      "httpMethod": "get",
      "tag": "Metrics",
      "typeScriptTag": "metrics",
      "description": "Query server for exposed Prometheus metrics",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/vaults",
      "method": "getVaults",
      "httpMethod": "get",
      "tag": "Vaults",
      "typeScriptTag": "vaults",
      "description": "Get all Vaults",
      "parameters": [
        {
          "name": "filter",
          "schema": "string",
          "description": "Filter the Vault collection based on Vault name using SCIM eq filter"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/vaults/{vaultUuid}",
      "method": "getVaultById",
      "httpMethod": "get",
      "tag": "Vaults",
      "typeScriptTag": "vaults",
      "description": "Get Vault details and metadata",
      "parameters": [
        {
          "name": "vaultUuid",
          "schema": "string",
          "required": true,
          "description": "The UUID of the Vault to fetch Items from"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/vaults/{vaultUuid}/items",
      "method": "getVaultItems",
      "httpMethod": "get",
      "tag": "Items",
      "typeScriptTag": "items",
      "description": "Get all items for inside a Vault",
      "parameters": [
        {
          "name": "vaultUuid",
          "schema": "string",
          "required": true,
          "description": "The UUID of the Vault to fetch Items from"
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "Filter the Item collection based on Item name using SCIM eq filter"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/vaults/{vaultUuid}/items",
      "method": "createVaultItem",
      "httpMethod": "post",
      "tag": "Items",
      "typeScriptTag": "items",
      "description": "Create a new Item",
      "parameters": [
        {
          "name": "vaultUuid",
          "schema": "string",
          "required": true,
          "description": "The UUID of the Vault to create an Item in"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/vaults/{vaultUuid}/items/{itemUuid}",
      "method": "deleteVaultItem",
      "httpMethod": "delete",
      "tag": "Items",
      "typeScriptTag": "items",
      "description": "Delete an Item",
      "parameters": [
        {
          "name": "vaultUuid",
          "schema": "string",
          "required": true,
          "description": "The UUID of the Vault the item is in"
        },
        {
          "name": "itemUuid",
          "schema": "string",
          "required": true,
          "description": "The UUID of the Item to update"
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/vaults/{vaultUuid}/items/{itemUuid}",
      "method": "getVaultItemById",
      "httpMethod": "get",
      "tag": "Items",
      "typeScriptTag": "items",
      "description": "Get the details of an Item",
      "parameters": [
        {
          "name": "vaultUuid",
          "schema": "string",
          "required": true,
          "description": "The UUID of the Vault to fetch Item from"
        },
        {
          "name": "itemUuid",
          "schema": "string",
          "required": true,
          "description": "The UUID of the Item to fetch"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/vaults/{vaultUuid}/items/{itemUuid}",
      "method": "patchVaultItem",
      "httpMethod": "patch",
      "tag": "Items",
      "typeScriptTag": "items",
      "description": "Update a subset of Item attributes",
      "parameters": [
        {
          "name": "vaultUuid",
          "schema": "string",
          "required": true,
          "description": "The UUID of the Vault the item is in"
        },
        {
          "name": "itemUuid",
          "schema": "string",
          "required": true,
          "description": "The UUID of the Item to update"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/vaults/{vaultUuid}/items/{itemUuid}",
      "method": "updateVaultItem",
      "httpMethod": "put",
      "tag": "Items",
      "typeScriptTag": "items",
      "description": "Update an Item",
      "parameters": [
        {
          "name": "vaultUuid",
          "schema": "string",
          "required": true,
          "description": "The UUID of the Item's Vault"
        },
        {
          "name": "itemUuid",
          "schema": "string",
          "required": true,
          "description": "The UUID of the Item to update"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/vaults/{vaultUuid}/items/{itemUuid}/files",
      "method": "getItemFiles",
      "httpMethod": "get",
      "tag": "Files",
      "typeScriptTag": "files",
      "description": "Get all the files inside an Item",
      "parameters": [
        {
          "name": "vaultUuid",
          "schema": "string",
          "required": true,
          "description": "The UUID of the Vault to fetch Items from"
        },
        {
          "name": "itemUuid",
          "schema": "string",
          "required": true,
          "description": "The UUID of the Item to fetch files from"
        },
        {
          "name": "inlineFiles",
          "schema": "boolean",
          "description": "Tells server to return the base64-encoded file contents in the response."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "413",
          "description": ""
        }
      ]
    },
    {
      "url": "/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}",
      "method": "getDetailsOfFileById",
      "httpMethod": "get",
      "tag": "Files",
      "typeScriptTag": "files",
      "description": "Get the details of a File",
      "parameters": [
        {
          "name": "vaultUuid",
          "schema": "string",
          "required": true,
          "description": "The UUID of the Vault to fetch Item from"
        },
        {
          "name": "itemUuid",
          "schema": "string",
          "required": true,
          "description": "The UUID of the Item to fetch File from"
        },
        {
          "name": "fileUuid",
          "schema": "string",
          "required": true,
          "description": "The UUID of the File to fetch"
        },
        {
          "name": "inlineFiles",
          "schema": "boolean",
          "description": "Tells server to return the base64-encoded file contents in the response."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "413",
          "description": ""
        }
      ]
    },
    {
      "url": "/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content",
      "method": "downloadFileById",
      "httpMethod": "get",
      "tag": "Files",
      "typeScriptTag": "files",
      "description": "Get the content of a File",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "http://1password.local",
  "apiDescription": "REST API interface for 1Password Connect.",
  "apiTitle": "1Password Connect",
  "endpoints": 11,
  "sdkMethods": 16,
  "schemas": 10,
  "parameters": 22,
  "contactUrl": "https://support.1password.com/",
  "contactEmail": "support@1password.com",
  "difficultyScore": 26.5,
  "difficulty": "Easy"
}