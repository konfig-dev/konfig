{
  "providerName": "meraki.com",
  "openApiRaw": "https://raw.githubusercontent.com/meraki/openapi/master/openapi/spec2.json",
  "securitySchemes": {
    "meraki_api_key": {
      "in": "header",
      "name": "X-Cisco-Meraki-API-Key",
      "type": "apiKey"
    }
  },
  "homepage": "meraki.com",
  "apiVersion": "1.32.0",
  "methods": [
    {
      "url": "/administered/identities/me",
      "method": "getAdministeredIdentitiesMe",
      "httpMethod": "get",
      "tag": "administered",
      "typeScriptTag": "administered",
      "description": "Returns the identity of the current user.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}",
      "method": "getDevice",
      "httpMethod": "get",
      "tag": "devices",
      "typeScriptTag": "devices",
      "description": "Return a single device",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}",
      "method": "updateDevice",
      "httpMethod": "put",
      "tag": "devices",
      "typeScriptTag": "devices",
      "description": "Update the attributes of a device",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "address",
          "schema": "string",
          "description": ""
        },
        {
          "name": "floorPlanId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lat",
          "schema": "number",
          "description": ""
        },
        {
          "name": "lng",
          "schema": "number",
          "description": ""
        },
        {
          "name": "moveMapMarker",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "notes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "switchProfileId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/appliance/dhcp/subnets",
      "method": "getDeviceApplianceDhcpSubnets",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the DHCP subnet information for an appliance",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/appliance/performance",
      "method": "getDeviceAppliancePerformance",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the performance score for a single MX",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/appliance/prefixes/delegated",
      "method": "getDeviceAppliancePrefixesDelegated",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return current delegated IPv6 prefixes on an appliance.",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/appliance/prefixes/delegated/vlanAssignments",
      "method": "getDeviceAppliancePrefixesDelegatedVlanAssignments",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return prefixes assigned to all IPv6 enabled VLANs on an appliance.",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/appliance/uplinks/settings",
      "method": "getDeviceApplianceUplinksSettings",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the uplink settings for an MX appliance",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/appliance/uplinks/settings",
      "method": "updateDeviceApplianceUplinksSettings",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update the uplink settings for an MX appliance",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "interfaces",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/appliance/vmx/authenticationToken",
      "method": "createDeviceApplianceVmxAuthenticationToken",
      "httpMethod": "post",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Generate a new vMX authentication token",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/blinkLeds",
      "method": "blinkDeviceLeds",
      "httpMethod": "post",
      "tag": "devices",
      "typeScriptTag": "devices",
      "description": "Blink the LEDs on a device",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "duration",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "duty",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "period",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/camera/analytics/live",
      "method": "getDeviceCameraAnalyticsLive",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Returns live state from camera of analytics zones",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/camera/analytics/overview",
      "method": "getDeviceCameraAnalyticsOverview",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Returns an overview of aggregate analytics data for a timespan",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 365 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 7 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 1 hour."
        },
        {
          "name": "objectType",
          "schema": "string",
          "description": "[optional] The object type for which analytics will be retrieved. The default object type is person. The available types are [person, vehicle]."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/camera/analytics/recent",
      "method": "getDeviceCameraAnalyticsRecent",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Returns most recent record for analytics zones",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "objectType",
          "schema": "string",
          "description": "[optional] The object type for which analytics will be retrieved. The default object type is person. The available types are [person, vehicle]."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/camera/analytics/zones",
      "method": "getDeviceCameraAnalyticsZones",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Returns all configured analytic zones for this camera",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/camera/analytics/zones/{zoneId}/history",
      "method": "getDeviceCameraAnalyticsZoneHistory",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Return historical records for analytic zones",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "zoneId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 365 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 14 hours after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 14 hours. The default is 1 hour."
        },
        {
          "name": "resolution",
          "schema": "integer",
          "description": "The time resolution in seconds for returned data. The valid resolutions are: 60. The default is 60."
        },
        {
          "name": "objectType",
          "schema": "string",
          "description": "[optional] The object type for which analytics will be retrieved. The default object type is person. The available types are [person, vehicle]."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/camera/customAnalytics",
      "method": "getDeviceCameraCustomAnalytics",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Return custom analytics settings for a camera",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/camera/customAnalytics",
      "method": "updateDeviceCameraCustomAnalytics",
      "httpMethod": "put",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Update custom analytics settings for a camera",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "artifactId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "parameters",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/camera/generateSnapshot",
      "method": "generateDeviceCameraSnapshot",
      "httpMethod": "post",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Generate a snapshot of what the camera sees at the specified time and return a link to that image.",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "fullframe",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "timestamp",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/camera/qualityAndRetention",
      "method": "getDeviceCameraQualityAndRetention",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Returns quality and retention settings for the given camera",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/camera/qualityAndRetention",
      "method": "updateDeviceCameraQualityAndRetention",
      "httpMethod": "put",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Update quality and retention settings for the given camera",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "audioRecordingEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "motionBasedRetentionEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "motionDetectorVersion",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "profileId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "quality",
          "schema": "string",
          "description": ""
        },
        {
          "name": "resolution",
          "schema": "string",
          "description": ""
        },
        {
          "name": "restrictedBandwidthModeEnabled",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/camera/sense",
      "method": "getDeviceCameraSense",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Returns sense settings for a given camera",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/camera/sense",
      "method": "updateDeviceCameraSense",
      "httpMethod": "put",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Update sense settings for the given camera",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "audioDetection",
          "schema": "object",
          "description": ""
        },
        {
          "name": "detectionModelId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "mqttBrokerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "senseEnabled",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/camera/sense/objectDetectionModels",
      "method": "getDeviceCameraSenseObjectDetectionModels",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Returns the MV Sense object detection model list for the given camera",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/camera/video/settings",
      "method": "getDeviceCameraVideoSettings",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Returns video settings for the given camera",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/camera/video/settings",
      "method": "updateDeviceCameraVideoSettings",
      "httpMethod": "put",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Update video settings for the given camera",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "externalRtspEnabled",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/camera/videoLink",
      "method": "getDeviceCameraVideoLink",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Returns video link to the specified camera",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "timestamp",
          "schema": "string",
          "description": "[optional] The video link will start at this time. The timestamp should be a string in ISO8601 format. If no timestamp is specified, we will assume current time."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/camera/wirelessProfiles",
      "method": "getDeviceCameraWirelessProfiles",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Returns wireless profile assigned to the given camera",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/camera/wirelessProfiles",
      "method": "updateDeviceCameraWirelessProfiles",
      "httpMethod": "put",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Assign wireless profiles to the given camera",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ids",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/cellular/sims",
      "method": "getDeviceCellularSims",
      "httpMethod": "get",
      "tag": "devices",
      "typeScriptTag": "devices",
      "description": "Return the SIM and APN configurations for a cellular device.",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/cellular/sims",
      "method": "updateDeviceCellularSims",
      "httpMethod": "put",
      "tag": "devices",
      "typeScriptTag": "devices",
      "description": "Updates the SIM and APN configurations for a cellular device.",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "simFailover",
          "schema": "object",
          "description": ""
        },
        {
          "name": "sims",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/cellularGateway/lan",
      "method": "getDeviceCellularGatewayLan",
      "httpMethod": "get",
      "tag": "cellularGateway",
      "typeScriptTag": "cellularGateway",
      "description": "Show the LAN Settings of a MG",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/cellularGateway/lan",
      "method": "updateDeviceCellularGatewayLan",
      "httpMethod": "put",
      "tag": "cellularGateway",
      "typeScriptTag": "cellularGateway",
      "description": "Update the LAN Settings for a single MG.",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "fixedIpAssignments",
          "schema": "array",
          "description": ""
        },
        {
          "name": "reservedIpRanges",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/cellularGateway/portForwardingRules",
      "method": "getDeviceCellularGatewayPortForwardingRules",
      "httpMethod": "get",
      "tag": "cellularGateway",
      "typeScriptTag": "cellularGateway",
      "description": "Returns the port forwarding rules for a single MG.",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/cellularGateway/portForwardingRules",
      "method": "updateDeviceCellularGatewayPortForwardingRules",
      "httpMethod": "put",
      "tag": "cellularGateway",
      "typeScriptTag": "cellularGateway",
      "description": "Updates the port forwarding rules for a single MG.",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rules",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/clients",
      "method": "getDeviceClients",
      "httpMethod": "get",
      "tag": "devices",
      "typeScriptTag": "devices",
      "description": "List the clients of a device, up to a maximum of a month ago",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/liveTools/ping",
      "method": "createDeviceLiveToolsPing",
      "httpMethod": "post",
      "tag": "devices",
      "typeScriptTag": "devices",
      "description": "Enqueue a job to ping a target host from the device",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "target",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/liveTools/ping/{id}",
      "method": "getDeviceLiveToolsPing",
      "httpMethod": "get",
      "tag": "devices",
      "typeScriptTag": "devices",
      "description": "Return a ping job",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/liveTools/pingDevice",
      "method": "createDeviceLiveToolsPingDevice",
      "httpMethod": "post",
      "tag": "devices",
      "typeScriptTag": "devices",
      "description": "Enqueue a job to check connectivity status to the device",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "count",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/liveTools/pingDevice/{id}",
      "method": "getDeviceLiveToolsPingDevice",
      "httpMethod": "get",
      "tag": "devices",
      "typeScriptTag": "devices",
      "description": "Return a ping device job",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/lldpCdp",
      "method": "getDeviceLldpCdp",
      "httpMethod": "get",
      "tag": "devices",
      "typeScriptTag": "devices",
      "description": "List LLDP and CDP information for a device",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/lossAndLatencyHistory",
      "method": "getDeviceLossAndLatencyHistory",
      "httpMethod": "get",
      "tag": "devices",
      "typeScriptTag": "devices",
      "description": "Get the uplink loss percentage and latency in milliseconds, and goodput in kilobits per second for a wired network device.",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 60 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        },
        {
          "name": "resolution",
          "schema": "integer",
          "description": "The time resolution in seconds for returned data. The valid resolutions are: 60, 600, 3600, 86400. The default is 60."
        },
        {
          "name": "uplink",
          "schema": "string",
          "description": "The WAN uplink used to obtain the requested stats. Valid uplinks are wan1, wan2, cellular. The default is wan1."
        },
        {
          "name": "ip",
          "schema": "string",
          "required": true,
          "description": "The destination IP used to obtain the requested stats. This is required."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/managementInterface",
      "method": "getDeviceManagementInterface",
      "httpMethod": "get",
      "tag": "devices",
      "typeScriptTag": "devices",
      "description": "Return the management interface settings for a device",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/managementInterface",
      "method": "updateDeviceManagementInterface",
      "httpMethod": "put",
      "tag": "devices",
      "typeScriptTag": "devices",
      "description": "Update the management interface settings for a device",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "wan1",
          "schema": "object",
          "description": ""
        },
        {
          "name": "wan2",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/reboot",
      "method": "rebootDevice",
      "httpMethod": "post",
      "tag": "devices",
      "typeScriptTag": "devices",
      "description": "Reboot a device",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/sensor/relationships",
      "method": "getDeviceSensorRelationships",
      "httpMethod": "get",
      "tag": "sensor",
      "typeScriptTag": "sensor",
      "description": "List the sensor roles for a given sensor or camera device.",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/sensor/relationships",
      "method": "updateDeviceSensorRelationships",
      "httpMethod": "put",
      "tag": "sensor",
      "typeScriptTag": "sensor",
      "description": "Assign one or more sensor roles to a given sensor or camera device.",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "livestream",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/switch/ports",
      "method": "getDeviceSwitchPorts",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "List the switch ports for a switch",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/switch/ports/cycle",
      "method": "cycleDeviceSwitchPorts",
      "httpMethod": "post",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Cycle a set of switch ports",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ports",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/switch/ports/statuses",
      "method": "getDeviceSwitchPortsStatuses",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return the status for all the ports of a switch",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/switch/ports/statuses/packets",
      "method": "getDeviceSwitchPortsStatusesPackets",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return the packet counters for all the ports of a switch",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 1 day from today."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 1 day. The default is 1 day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/switch/ports/{portId}",
      "method": "getDeviceSwitchPort",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return a switch port",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "portId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/switch/ports/{portId}",
      "method": "updateDeviceSwitchPort",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update a switch port",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "portId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "accessPolicyNumber",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "accessPolicyType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "adaptivePolicyGroupId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "allowedVlans",
          "schema": "string",
          "description": ""
        },
        {
          "name": "daiTrusted",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "flexibleStackingEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "isolationEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "linkNegotiation",
          "schema": "string",
          "description": ""
        },
        {
          "name": "macAllowList",
          "schema": "array",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "peerSgtCapable",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "poeEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "portScheduleId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "profile",
          "schema": "object",
          "description": ""
        },
        {
          "name": "rstpEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "stickyMacAllowList",
          "schema": "array",
          "description": ""
        },
        {
          "name": "stickyMacAllowListLimit",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "stormControlEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "stpGuard",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "udld",
          "schema": "string",
          "description": ""
        },
        {
          "name": "vlan",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "voiceVlan",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/switch/routing/interfaces",
      "method": "getDeviceSwitchRoutingInterfaces",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "List layer 3 interfaces for a switch",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/switch/routing/interfaces",
      "method": "createDeviceSwitchRoutingInterface",
      "httpMethod": "post",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Create a layer 3 interface for a switch",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "defaultGateway",
          "schema": "string",
          "description": ""
        },
        {
          "name": "interfaceIp",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ipv6",
          "schema": "object",
          "description": ""
        },
        {
          "name": "multicastRouting",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ospfSettings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "ospfV3",
          "schema": "object",
          "description": ""
        },
        {
          "name": "subnet",
          "schema": "string",
          "description": ""
        },
        {
          "name": "vlanId",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/switch/routing/interfaces/{interfaceId}",
      "method": "deleteDeviceSwitchRoutingInterface",
      "httpMethod": "delete",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Delete a layer 3 interface from the switch",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "interfaceId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/devices/{serial}/switch/routing/interfaces/{interfaceId}",
      "method": "getDeviceSwitchRoutingInterface",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return a layer 3 interface for a switch",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "interfaceId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/switch/routing/interfaces/{interfaceId}",
      "method": "updateDeviceSwitchRoutingInterface",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update a layer 3 interface for a switch",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "interfaceId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "defaultGateway",
          "schema": "string",
          "description": ""
        },
        {
          "name": "interfaceIp",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ipv6",
          "schema": "object",
          "description": ""
        },
        {
          "name": "multicastRouting",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ospfSettings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "ospfV3",
          "schema": "object",
          "description": ""
        },
        {
          "name": "subnet",
          "schema": "string",
          "description": ""
        },
        {
          "name": "vlanId",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp",
      "method": "getDeviceSwitchRoutingInterfaceDhcp",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return a layer 3 interface DHCP configuration for a switch",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "interfaceId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp",
      "method": "updateDeviceSwitchRoutingInterfaceDhcp",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update a layer 3 interface DHCP configuration for a switch",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "interfaceId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "bootFileName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "bootNextServer",
          "schema": "string",
          "description": ""
        },
        {
          "name": "bootOptionsEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "dhcpLeaseTime",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dhcpMode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dhcpOptions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "dhcpRelayServerIps",
          "schema": "array",
          "description": ""
        },
        {
          "name": "dnsCustomNameservers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "dnsNameserversOption",
          "schema": "string",
          "description": ""
        },
        {
          "name": "fixedIpAssignments",
          "schema": "array",
          "description": ""
        },
        {
          "name": "reservedIpRanges",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/switch/routing/staticRoutes",
      "method": "getDeviceSwitchRoutingStaticRoutes",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "List layer 3 static routes for a switch",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/switch/routing/staticRoutes",
      "method": "createDeviceSwitchRoutingStaticRoute",
      "httpMethod": "post",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Create a layer 3 static route for a switch",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "advertiseViaOspfEnabled",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "nextHopIp",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "preferOverOspfRoutesEnabled",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "subnet",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}",
      "method": "deleteDeviceSwitchRoutingStaticRoute",
      "httpMethod": "delete",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Delete a layer 3 static route for a switch",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "staticRouteId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}",
      "method": "getDeviceSwitchRoutingStaticRoute",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return a layer 3 static route for a switch",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "staticRouteId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}",
      "method": "updateDeviceSwitchRoutingStaticRoute",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update a layer 3 static route for a switch",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "staticRouteId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "advertiseViaOspfEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "nextHopIp",
          "schema": "string",
          "description": ""
        },
        {
          "name": "preferOverOspfRoutesEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "subnet",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/switch/warmSpare",
      "method": "getDeviceSwitchWarmSpare",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return warm spare configuration for a switch",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/switch/warmSpare",
      "method": "updateDeviceSwitchWarmSpare",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update warm spare configuration for a switch",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "spareSerial",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/wireless/bluetooth/settings",
      "method": "getDeviceWirelessBluetoothSettings",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return the bluetooth settings for a wireless device",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/wireless/bluetooth/settings",
      "method": "updateDeviceWirelessBluetoothSettings",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Update the bluetooth settings for a wireless device",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "major",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "minor",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "uuid",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/wireless/connectionStats",
      "method": "getDeviceWirelessConnectionStats",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Aggregated connectivity info for a given AP on this network",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 180 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 7 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days."
        },
        {
          "name": "band",
          "schema": "string",
          "description": "Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information."
        },
        {
          "name": "ssid",
          "schema": "integer",
          "description": "Filter results by SSID"
        },
        {
          "name": "vlan",
          "schema": "integer",
          "description": "Filter results by VLAN"
        },
        {
          "name": "apTag",
          "schema": "string",
          "description": "Filter results by AP Tag"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/wireless/latencyStats",
      "method": "getDeviceWirelessLatencyStats",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Aggregated latency info for a given AP on this network",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 180 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 7 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days."
        },
        {
          "name": "band",
          "schema": "string",
          "description": "Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information."
        },
        {
          "name": "ssid",
          "schema": "integer",
          "description": "Filter results by SSID"
        },
        {
          "name": "vlan",
          "schema": "integer",
          "description": "Filter results by VLAN"
        },
        {
          "name": "apTag",
          "schema": "string",
          "description": "Filter results by AP Tag"
        },
        {
          "name": "fields",
          "schema": "string",
          "description": "Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/wireless/radio/settings",
      "method": "getDeviceWirelessRadioSettings",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return the radio settings of a device",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/wireless/radio/settings",
      "method": "updateDeviceWirelessRadioSettings",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Update the radio settings of a device",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "fiveGhzSettings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "rfProfileId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "twoFourGhzSettings",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/devices/{serial}/wireless/status",
      "method": "getDeviceWirelessStatus",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return the SSID statuses of an access point",
      "parameters": [
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}",
      "method": "deleteNetwork",
      "httpMethod": "delete",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Delete a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}",
      "method": "getNetwork",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}",
      "method": "updateNetwork",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Update a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enrollmentString",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "notes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "timeZone",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/alerts/history",
      "method": "getNetworkAlertsHistory",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return the alert history for this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/alerts/settings",
      "method": "getNetworkAlertsSettings",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return the alert configuration for this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/alerts/settings",
      "method": "updateNetworkAlertsSettings",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Update the alert configuration for this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "alerts",
          "schema": "array",
          "description": ""
        },
        {
          "name": "defaultDestinations",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/clients/{clientId}/security/events",
      "method": "getNetworkApplianceClientSecurityEvents",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "List the security events for a client",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 791 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 791 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 31 days."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "sortOrder",
          "schema": "string",
          "description": "Sorted order of security events based on event detection time. Order options are 'ascending' or 'descending'. Default is ascending order."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/connectivityMonitoringDestinations",
      "method": "getNetworkApplianceConnectivityMonitoringDestinations",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the connectivity testing destinations for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/connectivityMonitoringDestinations",
      "method": "updateNetworkApplianceConnectivityMonitoringDestinations",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update the connectivity testing destinations for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "destinations",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/contentFiltering",
      "method": "getNetworkApplianceContentFiltering",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the content filtering settings for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/contentFiltering",
      "method": "updateNetworkApplianceContentFiltering",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update the content filtering settings for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "allowedUrlPatterns",
          "schema": "array",
          "description": ""
        },
        {
          "name": "blockedUrlCategories",
          "schema": "array",
          "description": ""
        },
        {
          "name": "blockedUrlPatterns",
          "schema": "array",
          "description": ""
        },
        {
          "name": "urlCategoryListSize",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/contentFiltering/categories",
      "method": "getNetworkApplianceContentFilteringCategories",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "List all available content filtering categories for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/cellularFirewallRules",
      "method": "getNetworkApplianceFirewallCellularFirewallRules",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the cellular firewall rules for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/cellularFirewallRules",
      "method": "updateNetworkApplianceFirewallCellularFirewallRules",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update the cellular firewall rules of an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rules",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/firewalledServices",
      "method": "getNetworkApplianceFirewallFirewalledServices",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "List the appliance services and their accessibility rules",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/firewalledServices/{service}",
      "method": "getNetworkApplianceFirewallFirewalledService",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "service",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/firewalledServices/{service}",
      "method": "updateNetworkApplianceFirewallFirewalledService",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "service",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "access",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "allowedIps",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/inboundCellularFirewallRules",
      "method": "getNetworkApplianceFirewallInboundCellularFirewallRules",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the inbound cellular firewall rules for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/inboundCellularFirewallRules",
      "method": "updateNetworkApplianceFirewallInboundCellularFirewallRules",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update the inbound cellular firewall rules of an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rules",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/inboundFirewallRules",
      "method": "getNetworkApplianceFirewallInboundFirewallRules",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the inbound firewall rules for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/inboundFirewallRules",
      "method": "updateNetworkApplianceFirewallInboundFirewallRules",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update the inbound firewall rules of an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rules",
          "schema": "array",
          "description": ""
        },
        {
          "name": "syslogDefaultRule",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/l3FirewallRules",
      "method": "getNetworkApplianceFirewallL3FirewallRules",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the L3 firewall rules for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/l3FirewallRules",
      "method": "updateNetworkApplianceFirewallL3FirewallRules",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update the L3 firewall rules of an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rules",
          "schema": "array",
          "description": ""
        },
        {
          "name": "syslogDefaultRule",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/l7FirewallRules",
      "method": "getNetworkApplianceFirewallL7FirewallRules",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "List the MX L7 firewall rules for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/l7FirewallRules",
      "method": "updateNetworkApplianceFirewallL7FirewallRules",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update the MX L7 firewall rules for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rules",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/l7FirewallRules/applicationCategories",
      "method": "getNetworkApplianceFirewallL7FirewallRulesApplicationCategories",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the L7 firewall application categories and their associated applications for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/oneToManyNatRules",
      "method": "getNetworkApplianceFirewallOneToManyNatRules",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the 1:Many NAT mapping rules for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/oneToManyNatRules",
      "method": "updateNetworkApplianceFirewallOneToManyNatRules",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Set the 1:Many NAT mapping rules for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rules",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/oneToOneNatRules",
      "method": "getNetworkApplianceFirewallOneToOneNatRules",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the 1:1 NAT mapping rules for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/oneToOneNatRules",
      "method": "updateNetworkApplianceFirewallOneToOneNatRules",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Set the 1:1 NAT mapping rules for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rules",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/portForwardingRules",
      "method": "getNetworkApplianceFirewallPortForwardingRules",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the port forwarding rules for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/portForwardingRules",
      "method": "updateNetworkApplianceFirewallPortForwardingRules",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update the port forwarding rules for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rules",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/settings",
      "method": "getNetworkApplianceFirewallSettings",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the firewall settings for this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/firewall/settings",
      "method": "updateNetworkApplianceFirewallSettings",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update the firewall settings for this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "spoofingProtection",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/ports",
      "method": "getNetworkAppliancePorts",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "List per-port VLAN settings for all ports of a MX.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/ports/{portId}",
      "method": "getNetworkAppliancePort",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return per-port VLAN settings for a single MX port.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "portId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/ports/{portId}",
      "method": "updateNetworkAppliancePort",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update the per-port VLAN settings for a single MX port.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "portId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "accessPolicy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "allowedVlans",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dropUntaggedTraffic",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "vlan",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/prefixes/delegated/statics",
      "method": "getNetworkAppliancePrefixesDelegatedStatics",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "List static delegated prefixes for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/prefixes/delegated/statics",
      "method": "createNetworkAppliancePrefixesDelegatedStatic",
      "httpMethod": "post",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Add a static delegated prefix from a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "origin",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "prefix",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}",
      "method": "deleteNetworkAppliancePrefixesDelegatedStatic",
      "httpMethod": "delete",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Delete a static delegated prefix from a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "staticDelegatedPrefixId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}",
      "method": "getNetworkAppliancePrefixesDelegatedStatic",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return a static delegated prefix from a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "staticDelegatedPrefixId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}",
      "method": "updateNetworkAppliancePrefixesDelegatedStatic",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update a static delegated prefix from a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "staticDelegatedPrefixId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "origin",
          "schema": "object",
          "description": ""
        },
        {
          "name": "prefix",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/security/events",
      "method": "getNetworkApplianceSecurityEvents",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "List the security events for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 365 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 365 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 31 days."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "sortOrder",
          "schema": "string",
          "description": "Sorted order of security events based on event detection time. Order options are 'ascending' or 'descending'. Default is ascending order."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/security/intrusion",
      "method": "getNetworkApplianceSecurityIntrusion",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Returns all supported intrusion settings for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/security/intrusion",
      "method": "updateNetworkApplianceSecurityIntrusion",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Set the supported intrusion settings for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "idsRulesets",
          "schema": "string",
          "description": ""
        },
        {
          "name": "mode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protectedNetworks",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/security/malware",
      "method": "getNetworkApplianceSecurityMalware",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Returns all supported malware settings for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/security/malware",
      "method": "updateNetworkApplianceSecurityMalware",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Set the supported malware settings for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "allowedFiles",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "allowedUrls",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "mode",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/settings",
      "method": "getNetworkApplianceSettings",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the appliance settings for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/settings",
      "method": "updateNetworkApplianceSettings",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update the appliance settings for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientTrackingMethod",
          "schema": "string",
          "description": ""
        },
        {
          "name": "deploymentMode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dynamicDns",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/singleLan",
      "method": "getNetworkApplianceSingleLan",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return single LAN configuration",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/singleLan",
      "method": "updateNetworkApplianceSingleLan",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update single LAN configuration",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "applianceIp",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ipv6",
          "schema": "object",
          "description": ""
        },
        {
          "name": "mandatoryDhcp",
          "schema": "object",
          "description": ""
        },
        {
          "name": "subnet",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/ssids",
      "method": "getNetworkApplianceSsids",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "List the MX SSIDs in a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/ssids/{number}",
      "method": "getNetworkApplianceSsid",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return a single MX SSID",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/ssids/{number}",
      "method": "updateNetworkApplianceSsid",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update the attributes of an MX SSID",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "authMode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "defaultVlanId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "dhcpEnforcedDeauthentication",
          "schema": "object",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "encryptionMode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "psk",
          "schema": "string",
          "description": ""
        },
        {
          "name": "radiusServers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "visible",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "wpaEncryptionMode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/staticRoutes",
      "method": "getNetworkApplianceStaticRoutes",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "List the static routes for an MX or teleworker network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/staticRoutes",
      "method": "createNetworkApplianceStaticRoute",
      "httpMethod": "post",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Add a static route for an MX or teleworker network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "gatewayIp",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "gatewayVlanId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "subnet",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/staticRoutes/{staticRouteId}",
      "method": "deleteNetworkApplianceStaticRoute",
      "httpMethod": "delete",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Delete a static route from an MX or teleworker network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "staticRouteId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/appliance/staticRoutes/{staticRouteId}",
      "method": "getNetworkApplianceStaticRoute",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return a static route for an MX or teleworker network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "staticRouteId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/staticRoutes/{staticRouteId}",
      "method": "updateNetworkApplianceStaticRoute",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update a static route for an MX or teleworker network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "staticRouteId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "fixedIpAssignments",
          "schema": "object",
          "description": ""
        },
        {
          "name": "gatewayIp",
          "schema": "string",
          "description": ""
        },
        {
          "name": "gatewayVlanId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "reservedIpRanges",
          "schema": "array",
          "description": ""
        },
        {
          "name": "subnet",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/trafficShaping",
      "method": "getNetworkApplianceTrafficShaping",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Display the traffic shaping settings for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/trafficShaping",
      "method": "updateNetworkApplianceTrafficShaping",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update the traffic shaping settings for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "globalBandwidthLimits",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses",
      "method": "getNetworkApplianceTrafficShapingCustomPerformanceClasses",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "List all custom performance classes for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses",
      "method": "createNetworkApplianceTrafficShapingCustomPerformanceClass",
      "httpMethod": "post",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Add a custom performance class for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "maxJitter",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "maxLatency",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "maxLossPercentage",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}",
      "method": "deleteNetworkApplianceTrafficShapingCustomPerformanceClass",
      "httpMethod": "delete",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Delete a custom performance class from an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "customPerformanceClassId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}",
      "method": "getNetworkApplianceTrafficShapingCustomPerformanceClass",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return a custom performance class for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "customPerformanceClassId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}",
      "method": "updateNetworkApplianceTrafficShapingCustomPerformanceClass",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update a custom performance class for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "customPerformanceClassId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "maxJitter",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "maxLatency",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "maxLossPercentage",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/trafficShaping/rules",
      "method": "getNetworkApplianceTrafficShapingRules",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Display the traffic shaping settings rules for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/trafficShaping/rules",
      "method": "updateNetworkApplianceTrafficShapingRules",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update the traffic shaping settings rules for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "defaultRulesEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "rules",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/trafficShaping/uplinkBandwidth",
      "method": "getNetworkApplianceTrafficShapingUplinkBandwidth",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Returns the uplink bandwidth limits for your MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/trafficShaping/uplinkBandwidth",
      "method": "updateNetworkApplianceTrafficShapingUplinkBandwidth",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Updates the uplink bandwidth settings for your MX network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "bandwidthLimits",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/trafficShaping/uplinkSelection",
      "method": "getNetworkApplianceTrafficShapingUplinkSelection",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Show uplink selection settings for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/trafficShaping/uplinkSelection",
      "method": "updateNetworkApplianceTrafficShapingUplinkSelection",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update uplink selection settings for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "activeActiveAutoVpnEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "defaultUplink",
          "schema": "string",
          "description": ""
        },
        {
          "name": "failoverAndFailback",
          "schema": "object",
          "description": ""
        },
        {
          "name": "loadBalancingEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "vpnTrafficUplinkPreferences",
          "schema": "array",
          "description": ""
        },
        {
          "name": "wanTrafficUplinkPreferences",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/uplinks/usageHistory",
      "method": "getNetworkApplianceUplinksUsageHistory",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Get the sent and received bytes for each uplink of a network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 365 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 10 minutes."
        },
        {
          "name": "resolution",
          "schema": "integer",
          "description": "The time resolution in seconds for returned data. The valid resolutions are: 60, 300, 600, 1800, 3600, 86400. The default is 60."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/vlans",
      "method": "getNetworkApplianceVlans",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "List the VLANs for an MX network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/vlans",
      "method": "createNetworkApplianceVlan",
      "httpMethod": "post",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Add a VLAN",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "applianceIp",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "cidr",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "groupPolicyId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ipv6",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "mandatoryDhcp",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "mask",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "subnet",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "templateVlanType",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/vlans/settings",
      "method": "getNetworkApplianceVlansSettings",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Returns the enabled status of VLANs for the network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/vlans/settings",
      "method": "updateNetworkApplianceVlansSettings",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Enable/Disable VLANs for the given network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "vlansEnabled",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/vlans/{vlanId}",
      "method": "deleteNetworkApplianceVlan",
      "httpMethod": "delete",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Delete a VLAN from a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "vlanId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/appliance/vlans/{vlanId}",
      "method": "getNetworkApplianceVlan",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return a VLAN",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "vlanId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/vlans/{vlanId}",
      "method": "updateNetworkApplianceVlan",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update a VLAN",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "vlanId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "applianceIp",
          "schema": "string",
          "description": ""
        },
        {
          "name": "cidr",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dhcpBootFilename",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dhcpBootNextServer",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dhcpBootOptionsEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "dhcpHandling",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dhcpLeaseTime",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dhcpOptions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "dhcpRelayServerIps",
          "schema": "array",
          "description": ""
        },
        {
          "name": "dnsNameservers",
          "schema": "string",
          "description": ""
        },
        {
          "name": "fixedIpAssignments",
          "schema": "object",
          "description": ""
        },
        {
          "name": "groupPolicyId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ipv6",
          "schema": "object",
          "description": ""
        },
        {
          "name": "mandatoryDhcp",
          "schema": "object",
          "description": ""
        },
        {
          "name": "mask",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "reservedIpRanges",
          "schema": "array",
          "description": ""
        },
        {
          "name": "subnet",
          "schema": "string",
          "description": ""
        },
        {
          "name": "templateVlanType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "vpnNatSubnet",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/vpn/bgp",
      "method": "getNetworkApplianceVpnBgp",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return a Hub BGP Configuration",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/vpn/bgp",
      "method": "updateNetworkApplianceVpnBgp",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update a Hub BGP Configuration",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "asNumber",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "ibgpHoldTimer",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "neighbors",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/vpn/siteToSiteVpn",
      "method": "getNetworkApplianceVpnSiteToSiteVpn",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the site-to-site VPN settings of a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/vpn/siteToSiteVpn",
      "method": "updateNetworkApplianceVpnSiteToSiteVpn",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update the site-to-site VPN settings of a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "hubs",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "mode",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "subnets",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/warmSpare",
      "method": "getNetworkApplianceWarmSpare",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return MX warm spare settings",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/warmSpare",
      "method": "updateNetworkApplianceWarmSpare",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update MX warm spare settings",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "spareSerial",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "uplinkMode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "virtualIp1",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "virtualIp2",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/appliance/warmSpare/swap",
      "method": "swapNetworkApplianceWarmSpare",
      "httpMethod": "post",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Swap MX primary and warm spare appliances",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/bind",
      "method": "bindNetwork",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Bind a network to a template.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "autoBind",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "configTemplateId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/bluetoothClients",
      "method": "getNetworkBluetoothClients",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "List the Bluetooth clients seen by APs in this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 7 days from today."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 7 days. The default is 1 day."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 5 - 1000. Default is 10."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "includeConnectivityHistory",
          "schema": "boolean",
          "description": "Include the connectivity history for this client"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/bluetoothClients/{bluetoothClientId}",
      "method": "getNetworkBluetoothClient",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return a Bluetooth client",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "bluetoothClientId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "includeConnectivityHistory",
          "schema": "boolean",
          "description": "Include the connectivity history for this client"
        },
        {
          "name": "connectivityHistoryTimespan",
          "schema": "integer",
          "description": "The timespan, in seconds, for the connectivityHistory data. By default 1 day, 86400, will be used."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/camera/qualityRetentionProfiles",
      "method": "getNetworkCameraQualityRetentionProfiles",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "List the quality retention profiles for this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/camera/qualityRetentionProfiles",
      "method": "createNetworkCameraQualityRetentionProfile",
      "httpMethod": "post",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Creates new quality retention profile for this network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "audioRecordingEnabled",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "cloudArchiveEnabled",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "maxRetentionDays",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "motionBasedRetentionEnabled",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "motionDetectorVersion",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "restrictedBandwidthModeEnabled",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "scheduleId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "videoSettings",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}",
      "method": "deleteNetworkCameraQualityRetentionProfile",
      "httpMethod": "delete",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Delete an existing quality retention profile for this network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "qualityRetentionProfileId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}",
      "method": "getNetworkCameraQualityRetentionProfile",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Retrieve a single quality retention profile",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "qualityRetentionProfileId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}",
      "method": "updateNetworkCameraQualityRetentionProfile",
      "httpMethod": "put",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Update an existing quality retention profile for this network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "qualityRetentionProfileId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "audioRecordingEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "cloudArchiveEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "maxRetentionDays",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "motionBasedRetentionEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "motionDetectorVersion",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "restrictedBandwidthModeEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "scheduleId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "videoSettings",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/camera/schedules",
      "method": "getNetworkCameraSchedules",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Returns a list of all camera recording schedules.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/camera/wirelessProfiles",
      "method": "getNetworkCameraWirelessProfiles",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "List the camera wireless profiles for this network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/camera/wirelessProfiles",
      "method": "createNetworkCameraWirelessProfile",
      "httpMethod": "post",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Creates a new camera wireless profile for this network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "identity",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ssid",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}",
      "method": "deleteNetworkCameraWirelessProfile",
      "httpMethod": "delete",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Delete an existing camera wireless profile for this network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "wirelessProfileId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}",
      "method": "getNetworkCameraWirelessProfile",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Retrieve a single camera wireless profile.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "wirelessProfileId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}",
      "method": "updateNetworkCameraWirelessProfile",
      "httpMethod": "put",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Update an existing camera wireless profile in this network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "wirelessProfileId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "identity",
          "schema": "object",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ssid",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/cellularGateway/connectivityMonitoringDestinations",
      "method": "getNetworkCellularGatewayConnectivityMonitoringDestinations",
      "httpMethod": "get",
      "tag": "cellularGateway",
      "typeScriptTag": "cellularGateway",
      "description": "Return the connectivity testing destinations for an MG network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/cellularGateway/connectivityMonitoringDestinations",
      "method": "updateNetworkCellularGatewayConnectivityMonitoringDestinations",
      "httpMethod": "put",
      "tag": "cellularGateway",
      "typeScriptTag": "cellularGateway",
      "description": "Update the connectivity testing destinations for an MG network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "destinations",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/cellularGateway/dhcp",
      "method": "getNetworkCellularGatewayDhcp",
      "httpMethod": "get",
      "tag": "cellularGateway",
      "typeScriptTag": "cellularGateway",
      "description": "List common DHCP settings of MGs",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/cellularGateway/dhcp",
      "method": "updateNetworkCellularGatewayDhcp",
      "httpMethod": "put",
      "tag": "cellularGateway",
      "typeScriptTag": "cellularGateway",
      "description": "Update common DHCP settings of MGs",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "dhcpLeaseTime",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dnsCustomNameservers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "dnsNameservers",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/cellularGateway/subnetPool",
      "method": "getNetworkCellularGatewaySubnetPool",
      "httpMethod": "get",
      "tag": "cellularGateway",
      "typeScriptTag": "cellularGateway",
      "description": "Return the subnet pool and mask configured for MGs in the network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/cellularGateway/subnetPool",
      "method": "updateNetworkCellularGatewaySubnetPool",
      "httpMethod": "put",
      "tag": "cellularGateway",
      "typeScriptTag": "cellularGateway",
      "description": "Update the subnet pool and mask configuration for MGs in the network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "cidr",
          "schema": "string",
          "description": ""
        },
        {
          "name": "mask",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/cellularGateway/uplink",
      "method": "getNetworkCellularGatewayUplink",
      "httpMethod": "get",
      "tag": "cellularGateway",
      "typeScriptTag": "cellularGateway",
      "description": "Returns the uplink settings for your MG network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/cellularGateway/uplink",
      "method": "updateNetworkCellularGatewayUplink",
      "httpMethod": "put",
      "tag": "cellularGateway",
      "typeScriptTag": "cellularGateway",
      "description": "Updates the uplink settings for your MG network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "bandwidthLimits",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/clients",
      "method": "getNetworkClients",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "List the clients that have used this network in the timespan",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "statuses",
          "schema": "array",
          "description": "Filters clients based on status. Can be one of 'Online' or 'Offline'."
        },
        {
          "name": "ip",
          "schema": "string",
          "description": "Filters clients based on a partial or full match for the ip address field."
        },
        {
          "name": "ip6",
          "schema": "string",
          "description": "Filters clients based on a partial or full match for the ip6 address field."
        },
        {
          "name": "ip6Local",
          "schema": "string",
          "description": "Filters clients based on a partial or full match for the ip6Local address field."
        },
        {
          "name": "mac",
          "schema": "string",
          "description": "Filters clients based on a partial or full match for the mac address field."
        },
        {
          "name": "os",
          "schema": "string",
          "description": "Filters clients based on a partial or full match for the os (operating system) field."
        },
        {
          "name": "description",
          "schema": "string",
          "description": "Filters clients based on a partial or full match for the description field."
        },
        {
          "name": "vlan",
          "schema": "string",
          "description": "Filters clients based on the full match for the VLAN field."
        },
        {
          "name": "recentDeviceConnections",
          "schema": "array",
          "description": "Filters clients based on recent connection type. Can be one of 'Wired' or 'Wireless'."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/clients/applicationUsage",
      "method": "getNetworkClientsApplicationUsage",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return the application usage data for clients",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clients",
          "schema": "string",
          "required": true,
          "description": "A list of client keys, MACs or IPs separated by comma."
        },
        {
          "name": "ssidNumber",
          "schema": "integer",
          "description": "An SSID number to include. If not specified, eveusage histories application usagents for all SSIDs will be returned."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/clients/bandwidthUsageHistory",
      "method": "getNetworkClientsBandwidthUsageHistory",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 30 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/clients/overview",
      "method": "getNetworkClientsOverview",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return overview statistics for network clients",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        },
        {
          "name": "resolution",
          "schema": "integer",
          "description": "The time resolution in seconds for returned data. The valid resolutions are: 7200, 86400, 604800, 2592000. The default is 604800."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/clients/provision",
      "method": "provisionNetworkClients",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Provisions a client with a name and policy",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clients",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "devicePolicy",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "groupPolicyId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "policiesBySecurityAppliance",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "policiesBySsid",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/clients/usageHistories",
      "method": "getNetworkClientsUsageHistories",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return the usage histories for clients",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clients",
          "schema": "string",
          "required": true,
          "description": "A list of client keys, MACs or IPs separated by comma."
        },
        {
          "name": "ssidNumber",
          "schema": "integer",
          "description": "An SSID number to include. If not specified, events for all SSIDs will be returned."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/clients/{clientId}",
      "method": "getNetworkClient",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return the client associated with the given identifier",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/clients/{clientId}/policy",
      "method": "getNetworkClientPolicy",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return the policy assigned to a client on the network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/clients/{clientId}/policy",
      "method": "updateNetworkClientPolicy",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Update the policy assigned to a client on the network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "devicePolicy",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "groupPolicyId",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus",
      "method": "getNetworkClientSplashAuthorizationStatus",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return the splash authorization for a client, for each SSID they've associated with through splash",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus",
      "method": "updateNetworkClientSplashAuthorizationStatus",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Update a client's splash authorization",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ssids",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/clients/{clientId}/trafficHistory",
      "method": "getNetworkClientTrafficHistory",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return the client's network traffic data over time",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/clients/{clientId}/usageHistory",
      "method": "getNetworkClientUsageHistory",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return the client's daily usage history",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/devices",
      "method": "getNetworkDevices",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "List the devices in a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/devices/claim",
      "method": "claimNetworkDevices",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "serials",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/devices/claim/vmx",
      "method": "vmxNetworkDevicesClaim",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Claim a vMX into a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "size",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/devices/remove",
      "method": "removeNetworkDevices",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Remove a single device",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/events",
      "method": "getNetworkEvents",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "List the events for the network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "productType",
          "schema": "string",
          "description": "The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway"
        },
        {
          "name": "includedEventTypes",
          "schema": "array",
          "description": "A list of event types. The returned events will be filtered to only include events with these types."
        },
        {
          "name": "excludedEventTypes",
          "schema": "array",
          "description": "A list of event types. The returned events will be filtered to exclude events with these types."
        },
        {
          "name": "deviceMac",
          "schema": "string",
          "description": "The MAC address of the Meraki device which the list of events will be filtered with"
        },
        {
          "name": "deviceSerial",
          "schema": "string",
          "description": "The serial of the Meraki device which the list of events will be filtered with"
        },
        {
          "name": "deviceName",
          "schema": "string",
          "description": "The name of the Meraki device which the list of events will be filtered with"
        },
        {
          "name": "clientIp",
          "schema": "string",
          "description": "The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks."
        },
        {
          "name": "clientMac",
          "schema": "string",
          "description": "The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks."
        },
        {
          "name": "clientName",
          "schema": "string",
          "description": "The name, or partial name, of the client which the list of events will be filtered with"
        },
        {
          "name": "smDeviceMac",
          "schema": "string",
          "description": "The MAC address of the Systems Manager device which the list of events will be filtered with"
        },
        {
          "name": "smDeviceName",
          "schema": "string",
          "description": "The name of the Systems Manager device which the list of events will be filtered with"
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/events/eventTypes",
      "method": "getNetworkEventsEventTypes",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "List the event type to human-readable description",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/firmwareUpgrades",
      "method": "getNetworkFirmwareUpgrades",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Get firmware upgrade information for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/firmwareUpgrades",
      "method": "updateNetworkFirmwareUpgrades",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Update firmware upgrade information for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "products",
          "schema": "object",
          "description": ""
        },
        {
          "name": "timezone",
          "schema": "string",
          "description": ""
        },
        {
          "name": "upgradeWindow",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/firmwareUpgrades/rollbacks",
      "method": "createNetworkFirmwareUpgradesRollback",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Rollback a Firmware Upgrade For A Network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "product",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "reasons",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "time",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "toVersion",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/firmwareUpgrades/staged/events",
      "method": "getNetworkFirmwareUpgradesStagedEvents",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Get the Staged Upgrade Event from a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/firmwareUpgrades/staged/events",
      "method": "createNetworkFirmwareUpgradesStagedEvent",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Create a Staged Upgrade Event for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "products",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "stages",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/firmwareUpgrades/staged/events",
      "method": "updateNetworkFirmwareUpgradesStagedEvents",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Update the Staged Upgrade Event for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "stages",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/firmwareUpgrades/staged/events/defer",
      "method": "deferNetworkFirmwareUpgradesStagedEvents",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Postpone by 1 week all pending staged upgrade stages for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/firmwareUpgrades/staged/events/rollbacks",
      "method": "rollbacksNetworkFirmwareUpgradesStagedEvents",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Rollback a Staged Upgrade Event for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "reasons",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "stages",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/firmwareUpgrades/staged/groups",
      "method": "getNetworkFirmwareUpgradesStagedGroups",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "List of Staged Upgrade Groups in a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/firmwareUpgrades/staged/groups",
      "method": "createNetworkFirmwareUpgradesStagedGroup",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Create a Staged Upgrade Group for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "assignedDevices",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isDefault",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}",
      "method": "deleteNetworkFirmwareUpgradesStagedGroup",
      "httpMethod": "delete",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Delete a Staged Upgrade Group",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}",
      "method": "getNetworkFirmwareUpgradesStagedGroup",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Get a Staged Upgrade Group from a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}",
      "method": "updateNetworkFirmwareUpgradesStagedGroup",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Update a Staged Upgrade Group for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "assignedDevices",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isDefault",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/firmwareUpgrades/staged/stages",
      "method": "getNetworkFirmwareUpgradesStagedStages",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Order of Staged Upgrade Groups in a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/firmwareUpgrades/staged/stages",
      "method": "updateNetworkFirmwareUpgradesStagedStages",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Assign Staged Upgrade Group order in the sequence.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "_json",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/floorPlans",
      "method": "getNetworkFloorPlans",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "List the floor plans that belong to your network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/floorPlans",
      "method": "createNetworkFloorPlan",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Upload a floor plan",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "bottomLeftCorner",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "bottomRightCorner",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "center",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "imageContents",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "topLeftCorner",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "topRightCorner",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/floorPlans/{floorPlanId}",
      "method": "deleteNetworkFloorPlan",
      "httpMethod": "delete",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Destroy a floor plan",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "floorPlanId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/floorPlans/{floorPlanId}",
      "method": "getNetworkFloorPlan",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Find a floor plan by ID",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "floorPlanId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/floorPlans/{floorPlanId}",
      "method": "updateNetworkFloorPlan",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Update a floor plan's geolocation and other meta data",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "floorPlanId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "bottomLeftCorner",
          "schema": "object",
          "description": ""
        },
        {
          "name": "bottomRightCorner",
          "schema": "object",
          "description": ""
        },
        {
          "name": "center",
          "schema": "object",
          "description": ""
        },
        {
          "name": "imageContents",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "topLeftCorner",
          "schema": "object",
          "description": ""
        },
        {
          "name": "topRightCorner",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/groupPolicies",
      "method": "getNetworkGroupPolicies",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "List the group policies in a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/groupPolicies",
      "method": "createNetworkGroupPolicy",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Create a group policy",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "bandwidth",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "bonjourForwarding",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "contentFiltering",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "firewallAndTrafficShaping",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "scheduling",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "splashAuthSettings",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "vlanTagging",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/groupPolicies/{groupPolicyId}",
      "method": "deleteNetworkGroupPolicy",
      "httpMethod": "delete",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Delete a group policy",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "groupPolicyId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/groupPolicies/{groupPolicyId}",
      "method": "getNetworkGroupPolicy",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Display a group policy",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "groupPolicyId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/groupPolicies/{groupPolicyId}",
      "method": "updateNetworkGroupPolicy",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Update a group policy",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "groupPolicyId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "bandwidth",
          "schema": "object",
          "description": ""
        },
        {
          "name": "bonjourForwarding",
          "schema": "object",
          "description": ""
        },
        {
          "name": "contentFiltering",
          "schema": "object",
          "description": ""
        },
        {
          "name": "firewallAndTrafficShaping",
          "schema": "object",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scheduling",
          "schema": "object",
          "description": ""
        },
        {
          "name": "splashAuthSettings",
          "schema": "string",
          "description": ""
        },
        {
          "name": "vlanTagging",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/health/alerts",
      "method": "getNetworkHealthAlerts",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return all global alerts on this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/insight/applications/{applicationId}/healthByTime",
      "method": "getNetworkInsightApplicationHealthByTime",
      "httpMethod": "get",
      "tag": "insight",
      "typeScriptTag": "insight",
      "description": "Get application health by time",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "applicationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 7 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 7 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours."
        },
        {
          "name": "resolution",
          "schema": "integer",
          "description": "The time resolution in seconds for returned data. The valid resolutions are: 60, 300, 3600, 86400. The default is 300."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/merakiAuthUsers",
      "method": "getNetworkMerakiAuthUsers",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/merakiAuthUsers",
      "method": "createNetworkMerakiAuthUser",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "accountType",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "authorizations",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "emailPasswordToUser",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isAdmin",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}",
      "method": "deleteNetworkMerakiAuthUser",
      "httpMethod": "delete",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Deauthorize a user",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "merakiAuthUserId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}",
      "method": "getNetworkMerakiAuthUser",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return the Meraki Auth splash guest, RADIUS, or client VPN user",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "merakiAuthUserId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}",
      "method": "updateNetworkMerakiAuthUser",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "merakiAuthUserId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "authorizations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "emailPasswordToUser",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/mqttBrokers",
      "method": "getNetworkMqttBrokers",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "List the MQTT brokers for this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/mqttBrokers",
      "method": "createNetworkMqttBroker",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Add an MQTT broker",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "authentication",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "host",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "security",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/mqttBrokers/{mqttBrokerId}",
      "method": "deleteNetworkMqttBroker",
      "httpMethod": "delete",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Delete an MQTT broker",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "mqttBrokerId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/mqttBrokers/{mqttBrokerId}",
      "method": "getNetworkMqttBroker",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return an MQTT broker",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "mqttBrokerId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/mqttBrokers/{mqttBrokerId}",
      "method": "updateNetworkMqttBroker",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Update an MQTT broker",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "mqttBrokerId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "authentication",
          "schema": "object",
          "description": ""
        },
        {
          "name": "host",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "port",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "security",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/netflow",
      "method": "getNetworkNetflow",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return the NetFlow traffic reporting settings for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/netflow",
      "method": "updateNetworkNetflow",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Update the NetFlow traffic reporting settings for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "collectorIp",
          "schema": "string",
          "description": ""
        },
        {
          "name": "collectorPort",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "etaDstPort",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "etaEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "reportingEnabled",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/networkHealth/channelUtilization",
      "method": "getNetworkNetworkHealthChannelUtilization",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Get the channel utilization over each radio for all APs in a network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        },
        {
          "name": "resolution",
          "schema": "integer",
          "description": "The time resolution in seconds for returned data. The valid resolutions are: 600. The default is 600."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 100. Default is 10."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/pii/piiKeys",
      "method": "getNetworkPiiPiiKeys",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "List the keys required to access Personally Identifiable Information (PII) for a given identifier",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "description": "The username of a Systems Manager user"
        },
        {
          "name": "email",
          "schema": "string",
          "description": "The email of a network user account or a Systems Manager device"
        },
        {
          "name": "mac",
          "schema": "string",
          "description": "The MAC of a network client device or a Systems Manager device"
        },
        {
          "name": "serial",
          "schema": "string",
          "description": "The serial of a Systems Manager device"
        },
        {
          "name": "imei",
          "schema": "string",
          "description": "The IMEI of a Systems Manager device"
        },
        {
          "name": "bluetoothMac",
          "schema": "string",
          "description": "The MAC of a Bluetooth client"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/pii/requests",
      "method": "getNetworkPiiRequests",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "List the PII requests for this network or organization",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/pii/requests",
      "method": "createNetworkPiiRequest",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Submit a new delete or restrict processing PII request",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "datasets",
          "schema": "array",
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "mac",
          "schema": "string",
          "description": ""
        },
        {
          "name": "smDeviceId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "smUserId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/pii/requests/{requestId}",
      "method": "deleteNetworkPiiRequest",
      "httpMethod": "delete",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Delete a restrict processing PII request",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "requestId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/pii/requests/{requestId}",
      "method": "getNetworkPiiRequest",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return a PII request",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "requestId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/pii/smDevicesForKey",
      "method": "getNetworkPiiSmDevicesForKey",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "description": "The username of a Systems Manager user"
        },
        {
          "name": "email",
          "schema": "string",
          "description": "The email of a network user account or a Systems Manager device"
        },
        {
          "name": "mac",
          "schema": "string",
          "description": "The MAC of a network client device or a Systems Manager device"
        },
        {
          "name": "serial",
          "schema": "string",
          "description": "The serial of a Systems Manager device"
        },
        {
          "name": "imei",
          "schema": "string",
          "description": "The IMEI of a Systems Manager device"
        },
        {
          "name": "bluetoothMac",
          "schema": "string",
          "description": "The MAC of a Bluetooth client"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/pii/smOwnersForKey",
      "method": "getNetworkPiiSmOwnersForKey",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "description": "The username of a Systems Manager user"
        },
        {
          "name": "email",
          "schema": "string",
          "description": "The email of a network user account or a Systems Manager device"
        },
        {
          "name": "mac",
          "schema": "string",
          "description": "The MAC of a network client device or a Systems Manager device"
        },
        {
          "name": "serial",
          "schema": "string",
          "description": "The serial of a Systems Manager device"
        },
        {
          "name": "imei",
          "schema": "string",
          "description": "The IMEI of a Systems Manager device"
        },
        {
          "name": "bluetoothMac",
          "schema": "string",
          "description": "The MAC of a Bluetooth client"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/policies/byClient",
      "method": "getNetworkPoliciesByClient",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Get policies for all clients with policies",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sensor/alerts/current/overview/byMetric",
      "method": "getNetworkSensorAlertsCurrentOverviewByMetric",
      "httpMethod": "get",
      "tag": "sensor",
      "typeScriptTag": "sensor",
      "description": "Return an overview of currently alerting sensors by metric",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sensor/alerts/overview/byMetric",
      "method": "getNetworkSensorAlertsOverviewByMetric",
      "httpMethod": "get",
      "tag": "sensor",
      "typeScriptTag": "sensor",
      "description": "Return an overview of alert occurrences over a timespan, by metric",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 365 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days."
        },
        {
          "name": "interval",
          "schema": "integer",
          "description": "The time interval in seconds for returned data. The valid intervals are: 86400, 604800. The default is 604800."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sensor/alerts/profiles",
      "method": "getNetworkSensorAlertsProfiles",
      "httpMethod": "get",
      "tag": "sensor",
      "typeScriptTag": "sensor",
      "description": "Lists all sensor alert profiles for a network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sensor/alerts/profiles",
      "method": "createNetworkSensorAlertsProfile",
      "httpMethod": "post",
      "tag": "sensor",
      "typeScriptTag": "sensor",
      "description": "Creates a sensor alert profile for a network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "conditions",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "recipients",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "schedule",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "serials",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sensor/alerts/profiles/{id}",
      "method": "deleteNetworkSensorAlertsProfile",
      "httpMethod": "delete",
      "tag": "sensor",
      "typeScriptTag": "sensor",
      "description": "Deletes a sensor alert profile from a network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/sensor/alerts/profiles/{id}",
      "method": "getNetworkSensorAlertsProfile",
      "httpMethod": "get",
      "tag": "sensor",
      "typeScriptTag": "sensor",
      "description": "Show details of a sensor alert profile for a network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sensor/alerts/profiles/{id}",
      "method": "updateNetworkSensorAlertsProfile",
      "httpMethod": "put",
      "tag": "sensor",
      "typeScriptTag": "sensor",
      "description": "Updates a sensor alert profile for a network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "conditions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "recipients",
          "schema": "object",
          "description": ""
        },
        {
          "name": "schedule",
          "schema": "object",
          "description": ""
        },
        {
          "name": "serials",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sensor/relationships",
      "method": "getNetworkSensorRelationships",
      "httpMethod": "get",
      "tag": "sensor",
      "typeScriptTag": "sensor",
      "description": "List the sensor roles for devices in a given network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/settings",
      "method": "getNetworkSettings",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return the settings for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/settings",
      "method": "updateNetworkSettings",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Update the settings for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "localStatusPage",
          "schema": "object",
          "description": ""
        },
        {
          "name": "localStatusPageEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "remoteStatusPageEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "securePort",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/bypassActivationLockAttempts",
      "method": "createNetworkSmBypassActivationLockAttempt",
      "httpMethod": "post",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Bypass activation lock attempt",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ids",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/bypassActivationLockAttempts/{attemptId}",
      "method": "getNetworkSmBypassActivationLockAttempt",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Bypass activation lock attempt status",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "attemptId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices",
      "method": "getNetworkSmDevices",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "List the devices enrolled in an SM network with various specified fields and filters",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "Additional fields that will be displayed for each device.\n    The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,\n    systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,\n    ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,\n    simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,\n    isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,\n    hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, and url."
        },
        {
          "name": "wifiMacs",
          "schema": "array",
          "description": "Filter devices by wifi mac(s)."
        },
        {
          "name": "serials",
          "schema": "array",
          "description": "Filter devices by serial(s)."
        },
        {
          "name": "ids",
          "schema": "array",
          "description": "Filter devices by id(s)."
        },
        {
          "name": "scope",
          "schema": "array",
          "description": "Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/checkin",
      "method": "checkinNetworkSmDevices",
      "httpMethod": "post",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Force check-in a set of devices",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "scope",
          "schema": "array",
          "description": ""
        },
        {
          "name": "serials",
          "schema": "array",
          "description": ""
        },
        {
          "name": "wifiMacs",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/fields",
      "method": "updateNetworkSmDevicesFields",
      "httpMethod": "put",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Modify the fields of a device",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "deviceFields",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "serial",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "wifiMac",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/lock",
      "method": "lockNetworkSmDevices",
      "httpMethod": "post",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Lock a set of devices",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "pin",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "scope",
          "schema": "array",
          "description": ""
        },
        {
          "name": "serials",
          "schema": "array",
          "description": ""
        },
        {
          "name": "wifiMacs",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/modifyTags",
      "method": "modifyNetworkSmDevicesTags",
      "httpMethod": "post",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Add, delete, or update the tags of a set of devices",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "scope",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "serials",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "updateAction",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "wifiMacs",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/move",
      "method": "moveNetworkSmDevices",
      "httpMethod": "post",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Move a set of devices to a new network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "newNetwork",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "scope",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "serials",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "wifiMacs",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/wipe",
      "method": "wipeNetworkSmDevices",
      "httpMethod": "post",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Wipe a device",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "pin",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "serial",
          "schema": "string",
          "description": ""
        },
        {
          "name": "wifiMac",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/{deviceId}/cellularUsageHistory",
      "method": "getNetworkSmDeviceCellularUsageHistory",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Return the client's daily cellular data usage history",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "deviceId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/{deviceId}/certs",
      "method": "getNetworkSmDeviceCerts",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "List the certs on a device",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "deviceId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/{deviceId}/connectivity",
      "method": "getNetworkSmDeviceConnectivity",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Returns historical connectivity data (whether a device is regularly checking in to Dashboard).",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "deviceId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/{deviceId}/desktopLogs",
      "method": "getNetworkSmDeviceDesktopLogs",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Return historical records of various Systems Manager network connection details for desktop devices.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "deviceId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/{deviceId}/deviceCommandLogs",
      "method": "getNetworkSmDeviceDeviceCommandLogs",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Return historical records of commands sent to Systems Manager devices",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "deviceId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/{deviceId}/deviceProfiles",
      "method": "getNetworkSmDeviceDeviceProfiles",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Get the installed profiles associated with a device",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "deviceId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/{deviceId}/networkAdapters",
      "method": "getNetworkSmDeviceNetworkAdapters",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "List the network adapters of a device",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "deviceId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/{deviceId}/performanceHistory",
      "method": "getNetworkSmDevicePerformanceHistory",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Return historical records of various Systems Manager client metrics for desktop devices.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "deviceId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/{deviceId}/refreshDetails",
      "method": "refreshNetworkSmDeviceDetails",
      "httpMethod": "post",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Refresh the details of a device",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "deviceId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/sm/devices/{deviceId}/restrictions",
      "method": "getNetworkSmDeviceRestrictions",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "List the restrictions on a device",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "deviceId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/{deviceId}/securityCenters",
      "method": "getNetworkSmDeviceSecurityCenters",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "List the security centers on a device",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "deviceId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/{deviceId}/softwares",
      "method": "getNetworkSmDeviceSoftwares",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Get a list of softwares associated with a device",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "deviceId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/{deviceId}/unenroll",
      "method": "unenrollNetworkSmDevice",
      "httpMethod": "post",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Unenroll a device",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "deviceId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/devices/{deviceId}/wlanLists",
      "method": "getNetworkSmDeviceWlanLists",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "List the saved SSID names on a device",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "deviceId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/profiles",
      "method": "getNetworkSmProfiles",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "List all profiles in a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/targetGroups",
      "method": "getNetworkSmTargetGroups",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "List the target groups in this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "withDetails",
          "schema": "boolean",
          "description": "Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/targetGroups",
      "method": "createNetworkSmTargetGroup",
      "httpMethod": "post",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Add a target group",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scope",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/targetGroups/{targetGroupId}",
      "method": "deleteNetworkSmTargetGroup",
      "httpMethod": "delete",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Delete a target group from a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "targetGroupId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/sm/targetGroups/{targetGroupId}",
      "method": "getNetworkSmTargetGroup",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Return a target group",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "targetGroupId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "withDetails",
          "schema": "boolean",
          "description": "Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/targetGroups/{targetGroupId}",
      "method": "updateNetworkSmTargetGroup",
      "httpMethod": "put",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Update a target group",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "targetGroupId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scope",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/trustedAccessConfigs",
      "method": "getNetworkSmTrustedAccessConfigs",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "List Trusted Access Configs",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/userAccessDevices",
      "method": "getNetworkSmUserAccessDevices",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "List User Access Devices and its Trusted Access Connections",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/userAccessDevices/{userAccessDeviceId}",
      "method": "deleteNetworkSmUserAccessDevice",
      "httpMethod": "delete",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Delete a User Access Device",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "userAccessDeviceId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/sm/users",
      "method": "getNetworkSmUsers",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "List the owners in an SM network with various specified fields and filters",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ids",
          "schema": "array",
          "description": "Filter users by id(s)."
        },
        {
          "name": "usernames",
          "schema": "array",
          "description": "Filter users by username(s)."
        },
        {
          "name": "emails",
          "schema": "array",
          "description": "Filter users by email(s)."
        },
        {
          "name": "scope",
          "schema": "array",
          "description": "Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/users/{userId}/deviceProfiles",
      "method": "getNetworkSmUserDeviceProfiles",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Get the profiles associated with a user",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/sm/users/{userId}/softwares",
      "method": "getNetworkSmUserSoftwares",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Get a list of softwares associated with a user",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/snmp",
      "method": "getNetworkSnmp",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return the SNMP settings for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/snmp",
      "method": "updateNetworkSnmp",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Update the SNMP settings for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "access",
          "schema": "string",
          "description": ""
        },
        {
          "name": "communityString",
          "schema": "string",
          "description": ""
        },
        {
          "name": "users",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/splashLoginAttempts",
      "method": "getNetworkSplashLoginAttempts",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "List the splash login attempts for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ssidNumber",
          "schema": "integer",
          "description": "Only return the login attempts for the specified SSID"
        },
        {
          "name": "loginIdentifier",
          "schema": "string",
          "description": "The username, email, or phone number used during login"
        },
        {
          "name": "timespan",
          "schema": "integer",
          "description": "The timespan, in seconds, for the login attempts. The period will be from [timespan] seconds ago until now. The maximum timespan is 3 months"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/split",
      "method": "splitNetwork",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Split a combined network into individual networks for each type of device",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/accessControlLists",
      "method": "getNetworkSwitchAccessControlLists",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return the access control lists for a MS network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/accessControlLists",
      "method": "updateNetworkSwitchAccessControlLists",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update the access control lists for a MS network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rules",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/accessPolicies",
      "method": "getNetworkSwitchAccessPolicies",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "List the access policies for a switch network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/accessPolicies",
      "method": "createNetworkSwitchAccessPolicy",
      "httpMethod": "post",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Create an access policy for a switch network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "accessPolicyType",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "dot1x",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "guestPortBouncing",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "guestVlanId",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "hostMode",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "increaseAccessSpeed",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "radius",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "radiusAccountingEnabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "radiusAccountingServers",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "radiusCoaSupportEnabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "radiusGroupAttribute",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "radiusServers",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "radiusTestingEnabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "urlRedirectWalledGardenEnabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "urlRedirectWalledGardenRanges",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "voiceVlanClients",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/accessPolicies/{accessPolicyNumber}",
      "method": "deleteNetworkSwitchAccessPolicy",
      "httpMethod": "delete",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Delete an access policy for a switch network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "accessPolicyNumber",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/switch/accessPolicies/{accessPolicyNumber}",
      "method": "getNetworkSwitchAccessPolicy",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return a specific access policy for a switch network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "accessPolicyNumber",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/accessPolicies/{accessPolicyNumber}",
      "method": "updateNetworkSwitchAccessPolicy",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update an access policy for a switch network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "accessPolicyNumber",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "accessPolicyType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dot1x",
          "schema": "object",
          "description": ""
        },
        {
          "name": "guestPortBouncing",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "guestVlanId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "hostMode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "increaseAccessSpeed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "radius",
          "schema": "object",
          "description": ""
        },
        {
          "name": "radiusAccountingEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "radiusAccountingServers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "radiusCoaSupportEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "radiusGroupAttribute",
          "schema": "string",
          "description": ""
        },
        {
          "name": "radiusServers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "radiusTestingEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "urlRedirectWalledGardenEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "urlRedirectWalledGardenRanges",
          "schema": "array",
          "description": ""
        },
        {
          "name": "voiceVlanClients",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/alternateManagementInterface",
      "method": "getNetworkSwitchAlternateManagementInterface",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return the switch alternate management interface for the network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/alternateManagementInterface",
      "method": "updateNetworkSwitchAlternateManagementInterface",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update the switch alternate management interface for the network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "protocols",
          "schema": "array",
          "description": ""
        },
        {
          "name": "switches",
          "schema": "array",
          "description": ""
        },
        {
          "name": "vlanId",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/dhcp/v4/servers/seen",
      "method": "getNetworkSwitchDhcpV4ServersSeen",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return the network's DHCPv4 servers seen within the selected timeframe (default 1 day)",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/dhcpServerPolicy",
      "method": "getNetworkSwitchDhcpServerPolicy",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return the DHCP server settings",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/dhcpServerPolicy",
      "method": "updateNetworkSwitchDhcpServerPolicy",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update the DHCP server settings",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "alerts",
          "schema": "object",
          "description": ""
        },
        {
          "name": "allowedServers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "arpInspection",
          "schema": "object",
          "description": ""
        },
        {
          "name": "blockedServers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "defaultPolicy",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers",
      "method": "getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return the list of servers trusted by Dynamic ARP Inspection on this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers",
      "method": "createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer",
      "httpMethod": "post",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Add a server to be trusted by Dynamic ARP Inspection on this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ipv4",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "mac",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "vlan",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}",
      "method": "deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer",
      "httpMethod": "delete",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Remove a server from being trusted by Dynamic ARP Inspection on this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "trustedServerId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}",
      "method": "updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update a server that is trusted by Dynamic ARP Inspection on this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "trustedServerId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ipv4",
          "schema": "object",
          "description": ""
        },
        {
          "name": "mac",
          "schema": "string",
          "description": ""
        },
        {
          "name": "vlan",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/warnings/byDevice",
      "method": "getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return the devices that have a Dynamic ARP Inspection warning and their warnings",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/dscpToCosMappings",
      "method": "getNetworkSwitchDscpToCosMappings",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return the DSCP to CoS mappings",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/dscpToCosMappings",
      "method": "updateNetworkSwitchDscpToCosMappings",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update the DSCP to CoS mappings",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "mappings",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/linkAggregations",
      "method": "getNetworkSwitchLinkAggregations",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "List link aggregation groups",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/linkAggregations",
      "method": "createNetworkSwitchLinkAggregation",
      "httpMethod": "post",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Create a link aggregation group",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "switchPorts",
          "schema": "array",
          "description": ""
        },
        {
          "name": "switchProfilePorts",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/linkAggregations/{linkAggregationId}",
      "method": "deleteNetworkSwitchLinkAggregation",
      "httpMethod": "delete",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Split a link aggregation group into separate ports",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "linkAggregationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/switch/linkAggregations/{linkAggregationId}",
      "method": "updateNetworkSwitchLinkAggregation",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update a link aggregation group",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "linkAggregationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "switchPorts",
          "schema": "array",
          "description": ""
        },
        {
          "name": "switchProfilePorts",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/mtu",
      "method": "getNetworkSwitchMtu",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return the MTU configuration",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/mtu",
      "method": "updateNetworkSwitchMtu",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update the MTU configuration",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "defaultMtuSize",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "overrides",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/portSchedules",
      "method": "getNetworkSwitchPortSchedules",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "List switch port schedules",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/portSchedules",
      "method": "createNetworkSwitchPortSchedule",
      "httpMethod": "post",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Add a switch port schedule",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "portSchedule",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/portSchedules/{portScheduleId}",
      "method": "deleteNetworkSwitchPortSchedule",
      "httpMethod": "delete",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Delete a switch port schedule",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "portScheduleId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/switch/portSchedules/{portScheduleId}",
      "method": "updateNetworkSwitchPortSchedule",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update a switch port schedule",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "portScheduleId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "portSchedule",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/qosRules",
      "method": "getNetworkSwitchQosRules",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "List quality of service rules",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/qosRules",
      "method": "createNetworkSwitchQosRule",
      "httpMethod": "post",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Add a quality of service rule",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "dscp",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "dstPort",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "dstPortRange",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "protocol",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "srcPort",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "srcPortRange",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "vlan",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/qosRules/order",
      "method": "getNetworkSwitchQosRulesOrder",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return the quality of service rule IDs by order in which they will be processed by the switch",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/qosRules/order",
      "method": "updateNetworkSwitchQosRulesOrder",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update the order in which the rules should be processed by the switch",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ruleIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/qosRules/{qosRuleId}",
      "method": "deleteNetworkSwitchQosRule",
      "httpMethod": "delete",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Delete a quality of service rule",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "qosRuleId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/switch/qosRules/{qosRuleId}",
      "method": "getNetworkSwitchQosRule",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return a quality of service rule",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "qosRuleId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/qosRules/{qosRuleId}",
      "method": "updateNetworkSwitchQosRule",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update a quality of service rule",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "qosRuleId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "dscp",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "dstPort",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "dstPortRange",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protocol",
          "schema": "string",
          "description": ""
        },
        {
          "name": "srcPort",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "srcPortRange",
          "schema": "string",
          "description": ""
        },
        {
          "name": "vlan",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/routing/multicast",
      "method": "getNetworkSwitchRoutingMulticast",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return multicast settings for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/routing/multicast",
      "method": "updateNetworkSwitchRoutingMulticast",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update multicast settings for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "defaultSettings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "overrides",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/routing/multicast/rendezvousPoints",
      "method": "getNetworkSwitchRoutingMulticastRendezvousPoints",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "List multicast rendezvous points",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/routing/multicast/rendezvousPoints",
      "method": "createNetworkSwitchRoutingMulticastRendezvousPoint",
      "httpMethod": "post",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Create a multicast rendezvous point",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "interfaceIp",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "multicastGroup",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}",
      "method": "deleteNetworkSwitchRoutingMulticastRendezvousPoint",
      "httpMethod": "delete",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Delete a multicast rendezvous point",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rendezvousPointId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}",
      "method": "getNetworkSwitchRoutingMulticastRendezvousPoint",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return a multicast rendezvous point",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rendezvousPointId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}",
      "method": "updateNetworkSwitchRoutingMulticastRendezvousPoint",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update a multicast rendezvous point",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rendezvousPointId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "interfaceIp",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "multicastGroup",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/routing/ospf",
      "method": "getNetworkSwitchRoutingOspf",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return layer 3 OSPF routing configuration",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/routing/ospf",
      "method": "updateNetworkSwitchRoutingOspf",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update layer 3 OSPF routing configuration",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "areas",
          "schema": "array",
          "description": ""
        },
        {
          "name": "deadTimerInSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "helloTimerInSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "md5AuthenticationEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "md5AuthenticationKey",
          "schema": "object",
          "description": ""
        },
        {
          "name": "v3",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/settings",
      "method": "getNetworkSwitchSettings",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Returns the switch network settings",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/settings",
      "method": "updateNetworkSwitchSettings",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update switch network settings",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "powerExceptions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "useCombinedPower",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "vlan",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stacks",
      "method": "getNetworkSwitchStacks",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "List the switch stacks in a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stacks",
      "method": "createNetworkSwitchStack",
      "httpMethod": "post",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Create a stack",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "serials",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stacks/{switchStackId}",
      "method": "deleteNetworkSwitchStack",
      "httpMethod": "delete",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Delete a stack",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "switchStackId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/switch/stacks/{switchStackId}",
      "method": "getNetworkSwitchStack",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Show a switch stack",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "switchStackId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stacks/{switchStackId}/add",
      "method": "addNetworkSwitchStack",
      "httpMethod": "post",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Add a switch to a stack",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "switchStackId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stacks/{switchStackId}/remove",
      "method": "removeNetworkSwitchStack",
      "httpMethod": "post",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Remove a switch from a stack",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "switchStackId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces",
      "method": "getNetworkSwitchStackRoutingInterfaces",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "List layer 3 interfaces for a switch stack",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "switchStackId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces",
      "method": "createNetworkSwitchStackRoutingInterface",
      "httpMethod": "post",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Create a layer 3 interface for a switch stack",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "switchStackId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "defaultGateway",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "interfaceIp",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ipv6",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "multicastRouting",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ospfSettings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "subnet",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "vlanId",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}",
      "method": "deleteNetworkSwitchStackRoutingInterface",
      "httpMethod": "delete",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Delete a layer 3 interface from a switch stack",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "switchStackId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "interfaceId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}",
      "method": "getNetworkSwitchStackRoutingInterface",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return a layer 3 interface from a switch stack",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "switchStackId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "interfaceId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}",
      "method": "updateNetworkSwitchStackRoutingInterface",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update a layer 3 interface for a switch stack",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "switchStackId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "interfaceId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "defaultGateway",
          "schema": "string",
          "description": ""
        },
        {
          "name": "interfaceIp",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ipv6",
          "schema": "object",
          "description": ""
        },
        {
          "name": "multicastRouting",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ospfSettings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "subnet",
          "schema": "string",
          "description": ""
        },
        {
          "name": "vlanId",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp",
      "method": "getNetworkSwitchStackRoutingInterfaceDhcp",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return a layer 3 interface DHCP configuration for a switch stack",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "switchStackId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "interfaceId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp",
      "method": "updateNetworkSwitchStackRoutingInterfaceDhcp",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update a layer 3 interface DHCP configuration for a switch stack",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "switchStackId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "interfaceId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "bootFileName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "bootNextServer",
          "schema": "string",
          "description": ""
        },
        {
          "name": "bootOptionsEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "dhcpLeaseTime",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dhcpMode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dhcpOptions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "dhcpRelayServerIps",
          "schema": "array",
          "description": ""
        },
        {
          "name": "dnsCustomNameservers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "dnsNameserversOption",
          "schema": "string",
          "description": ""
        },
        {
          "name": "fixedIpAssignments",
          "schema": "array",
          "description": ""
        },
        {
          "name": "reservedIpRanges",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes",
      "method": "getNetworkSwitchStackRoutingStaticRoutes",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "List layer 3 static routes for a switch stack",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "switchStackId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes",
      "method": "createNetworkSwitchStackRoutingStaticRoute",
      "httpMethod": "post",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Create a layer 3 static route for a switch stack",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "switchStackId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "advertiseViaOspfEnabled",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "nextHopIp",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "preferOverOspfRoutesEnabled",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "subnet",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}",
      "method": "deleteNetworkSwitchStackRoutingStaticRoute",
      "httpMethod": "delete",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Delete a layer 3 static route for a switch stack",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "switchStackId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "staticRouteId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}",
      "method": "getNetworkSwitchStackRoutingStaticRoute",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return a layer 3 static route for a switch stack",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "switchStackId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "staticRouteId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}",
      "method": "updateNetworkSwitchStackRoutingStaticRoute",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update a layer 3 static route for a switch stack",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "switchStackId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "staticRouteId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "advertiseViaOspfEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "nextHopIp",
          "schema": "string",
          "description": ""
        },
        {
          "name": "preferOverOspfRoutesEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "subnet",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stormControl",
      "method": "getNetworkSwitchStormControl",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return the storm control configuration for a switch network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stormControl",
      "method": "updateNetworkSwitchStormControl",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update the storm control configuration for a switch network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "broadcastThreshold",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "multicastThreshold",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "unknownUnicastThreshold",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stp",
      "method": "getNetworkSwitchStp",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Returns STP settings",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/switch/stp",
      "method": "updateNetworkSwitchStp",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Updates STP settings",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rstpEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "stpBridgePriority",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/syslogServers",
      "method": "getNetworkSyslogServers",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "List the syslog servers for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/syslogServers",
      "method": "updateNetworkSyslogServers",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Update the syslog servers for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "servers",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/topology/linkLayer",
      "method": "getNetworkTopologyLinkLayer",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "List the LLDP and CDP information for all discovered devices and connections in a network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/traffic",
      "method": "getNetworkTraffic",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return the traffic analysis data for this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 30 days from today."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 30 days."
        },
        {
          "name": "deviceType",
          "schema": "string",
          "description": "Filter the data by device type: 'combined', 'wireless', 'switch' or 'appliance'. Defaults to 'combined'. When using 'combined', for each rule the data will come from the device type with the most usage."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/trafficAnalysis",
      "method": "getNetworkTrafficAnalysis",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return the traffic analysis settings for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/trafficAnalysis",
      "method": "updateNetworkTrafficAnalysis",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Update the traffic analysis settings for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "customPieChartItems",
          "schema": "array",
          "description": ""
        },
        {
          "name": "mode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/trafficShaping/applicationCategories",
      "method": "getNetworkTrafficShapingApplicationCategories",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Returns the application categories for traffic shaping rules.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/trafficShaping/dscpTaggingOptions",
      "method": "getNetworkTrafficShapingDscpTaggingOptions",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Returns the available DSCP tagging options for your traffic shaping rules.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/unbind",
      "method": "unbindNetwork",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Unbind a network from a template.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "retainConfigs",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/webhooks/httpServers",
      "method": "getNetworkWebhooksHttpServers",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "List the HTTP servers for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/webhooks/httpServers",
      "method": "createNetworkWebhooksHttpServer",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Add an HTTP server to a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "payloadTemplate",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "sharedSecret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/webhooks/httpServers/{httpServerId}",
      "method": "deleteNetworkWebhooksHttpServer",
      "httpMethod": "delete",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Delete an HTTP server from a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "httpServerId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/webhooks/httpServers/{httpServerId}",
      "method": "getNetworkWebhooksHttpServer",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return an HTTP server for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "httpServerId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/webhooks/httpServers/{httpServerId}",
      "method": "updateNetworkWebhooksHttpServer",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Update an HTTP server",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "httpServerId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "payloadTemplate",
          "schema": "object",
          "description": ""
        },
        {
          "name": "sharedSecret",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/webhooks/payloadTemplates",
      "method": "getNetworkWebhooksPayloadTemplates",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "List the webhook payload templates for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/webhooks/payloadTemplates",
      "method": "createNetworkWebhooksPayloadTemplate",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Create a webhook payload template for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "body",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "bodyFile",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "headers",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "headersFile",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}",
      "method": "deleteNetworkWebhooksPayloadTemplate",
      "httpMethod": "delete",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Destroy a webhook payload template for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "payloadTemplateId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}",
      "method": "getNetworkWebhooksPayloadTemplate",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Get the webhook payload template for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "payloadTemplateId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}",
      "method": "updateNetworkWebhooksPayloadTemplate",
      "httpMethod": "put",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Update a webhook payload template for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "payloadTemplateId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "body",
          "schema": "string",
          "description": ""
        },
        {
          "name": "bodyFile",
          "schema": "string",
          "description": ""
        },
        {
          "name": "headers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "headersFile",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/webhooks/webhookTests",
      "method": "createNetworkWebhooksWebhookTest",
      "httpMethod": "post",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Send a test webhook for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "alertTypeId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "payloadTemplateId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "payloadTemplateName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sharedSecret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/webhooks/webhookTests/{webhookTestId}",
      "method": "getNetworkWebhooksWebhookTest",
      "httpMethod": "get",
      "tag": "networks",
      "typeScriptTag": "networks",
      "description": "Return the status of a webhook test for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "webhookTestId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/airMarshal",
      "method": "getNetworkWirelessAirMarshal",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "List Air Marshal scan results from a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 7 days."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/alternateManagementInterface",
      "method": "getNetworkWirelessAlternateManagementInterface",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return alternate management interface and devices with IP assigned",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/alternateManagementInterface",
      "method": "updateNetworkWirelessAlternateManagementInterface",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Update alternate management interface and device static IP",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "accessPoints",
          "schema": "array",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "protocols",
          "schema": "array",
          "description": ""
        },
        {
          "name": "vlanId",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/billing",
      "method": "getNetworkWirelessBilling",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return the billing settings of this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/billing",
      "method": "updateNetworkWirelessBilling",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Update the billing settings",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "currency",
          "schema": "string",
          "description": ""
        },
        {
          "name": "plans",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/bluetooth/settings",
      "method": "getNetworkWirelessBluetoothSettings",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return the Bluetooth settings for a network. <a href=\"https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\">Bluetooth settings</a> must be enabled on the network.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/bluetooth/settings",
      "method": "updateNetworkWirelessBluetoothSettings",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Update the Bluetooth settings for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "advertisingEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "major",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "majorMinorAssignmentMode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "minor",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "scanningEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "uuid",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/channelUtilizationHistory",
      "method": "getNetworkWirelessChannelUtilizationHistory",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return AP channel utilization over time for a device or network client",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days."
        },
        {
          "name": "resolution",
          "schema": "integer",
          "description": "The time resolution in seconds for returned data. The valid resolutions are: 600, 1200, 3600, 14400, 86400. The default is 86400."
        },
        {
          "name": "autoResolution",
          "schema": "boolean",
          "description": "Automatically select a data resolution based on the given timespan; this overrides the value specified by the 'resolution' parameter. The default setting is false."
        },
        {
          "name": "clientId",
          "schema": "string",
          "description": "Filter results by network client to return per-device, per-band AP channel utilization metrics inner joined by the queried client's connection history."
        },
        {
          "name": "deviceSerial",
          "schema": "string",
          "description": "Filter results by device to return AP channel utilization metrics for the queried device; either :band or :clientId must be jointly specified."
        },
        {
          "name": "apTag",
          "schema": "string",
          "description": "Filter results by AP tag to return AP channel utilization metrics for devices labeled with the given tag; either :clientId or :deviceSerial must be jointly specified."
        },
        {
          "name": "band",
          "schema": "string",
          "description": "Filter results by band (either '2.4', '5' or '6')."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/clientCountHistory",
      "method": "getNetworkWirelessClientCountHistory",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return wireless client counts over time for a network, device, or network client",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days."
        },
        {
          "name": "resolution",
          "schema": "integer",
          "description": "The time resolution in seconds for returned data. The valid resolutions are: 300, 600, 1200, 3600, 14400, 86400. The default is 86400."
        },
        {
          "name": "autoResolution",
          "schema": "boolean",
          "description": "Automatically select a data resolution based on the given timespan; this overrides the value specified by the 'resolution' parameter. The default setting is false."
        },
        {
          "name": "clientId",
          "schema": "string",
          "description": "Filter results by network client to return per-device client counts over time inner joined by the queried client's connection history."
        },
        {
          "name": "deviceSerial",
          "schema": "string",
          "description": "Filter results by device."
        },
        {
          "name": "apTag",
          "schema": "string",
          "description": "Filter results by AP tag."
        },
        {
          "name": "band",
          "schema": "string",
          "description": "Filter results by band (either '2.4', '5' or '6')."
        },
        {
          "name": "ssid",
          "schema": "integer",
          "description": "Filter results by SSID number."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/clients/connectionStats",
      "method": "getNetworkWirelessClientsConnectionStats",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Aggregated connectivity info for this network, grouped by clients",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 180 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 7 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days."
        },
        {
          "name": "band",
          "schema": "string",
          "description": "Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information."
        },
        {
          "name": "ssid",
          "schema": "integer",
          "description": "Filter results by SSID"
        },
        {
          "name": "vlan",
          "schema": "integer",
          "description": "Filter results by VLAN"
        },
        {
          "name": "apTag",
          "schema": "string",
          "description": "Filter results by AP Tag"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/clients/latencyStats",
      "method": "getNetworkWirelessClientsLatencyStats",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Aggregated latency info for this network, grouped by clients",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 180 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 7 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days."
        },
        {
          "name": "band",
          "schema": "string",
          "description": "Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information."
        },
        {
          "name": "ssid",
          "schema": "integer",
          "description": "Filter results by SSID"
        },
        {
          "name": "vlan",
          "schema": "integer",
          "description": "Filter results by VLAN"
        },
        {
          "name": "apTag",
          "schema": "string",
          "description": "Filter results by AP Tag"
        },
        {
          "name": "fields",
          "schema": "string",
          "description": "Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/clients/{clientId}/connectionStats",
      "method": "getNetworkWirelessClientConnectionStats",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Aggregated connectivity info for a given client on this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 180 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 7 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days."
        },
        {
          "name": "band",
          "schema": "string",
          "description": "Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information."
        },
        {
          "name": "ssid",
          "schema": "integer",
          "description": "Filter results by SSID"
        },
        {
          "name": "vlan",
          "schema": "integer",
          "description": "Filter results by VLAN"
        },
        {
          "name": "apTag",
          "schema": "string",
          "description": "Filter results by AP Tag"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/clients/{clientId}/connectivityEvents",
      "method": "getNetworkWirelessClientConnectivityEvents",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "List the wireless connectivity events for a client within a network in the timespan.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        },
        {
          "name": "types",
          "schema": "array",
          "description": "A list of event types to include. If not specified, events of all types will be returned. Valid types are 'assoc', 'disassoc', 'auth', 'deauth', 'dns', 'dhcp', 'roam', 'connection' and/or 'sticky'."
        },
        {
          "name": "includedSeverities",
          "schema": "array",
          "description": "A list of severities to include. If not specified, events of all severities will be returned. Valid severities are 'good', 'info', 'warn' and/or 'bad'."
        },
        {
          "name": "band",
          "schema": "string",
          "description": "Filter results by band (either '2.4', '5', '6')."
        },
        {
          "name": "ssidNumber",
          "schema": "integer",
          "description": "An SSID number to include. If not specified, events for all SSIDs will be returned."
        },
        {
          "name": "deviceSerial",
          "schema": "string",
          "description": "Filter results by an AP's serial number."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/clients/{clientId}/latencyHistory",
      "method": "getNetworkWirelessClientLatencyHistory",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return the latency history for a client",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 791 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 791 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 1 day."
        },
        {
          "name": "resolution",
          "schema": "integer",
          "description": "The time resolution in seconds for returned data. The valid resolutions are: 86400. The default is 86400."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/clients/{clientId}/latencyStats",
      "method": "getNetworkWirelessClientLatencyStats",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Aggregated latency info for a given client on this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 180 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 7 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days."
        },
        {
          "name": "band",
          "schema": "string",
          "description": "Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information."
        },
        {
          "name": "ssid",
          "schema": "integer",
          "description": "Filter results by SSID"
        },
        {
          "name": "vlan",
          "schema": "integer",
          "description": "Filter results by VLAN"
        },
        {
          "name": "apTag",
          "schema": "string",
          "description": "Filter results by AP Tag"
        },
        {
          "name": "fields",
          "schema": "string",
          "description": "Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/connectionStats",
      "method": "getNetworkWirelessConnectionStats",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Aggregated connectivity info for this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 180 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 7 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days."
        },
        {
          "name": "band",
          "schema": "string",
          "description": "Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information."
        },
        {
          "name": "ssid",
          "schema": "integer",
          "description": "Filter results by SSID"
        },
        {
          "name": "vlan",
          "schema": "integer",
          "description": "Filter results by VLAN"
        },
        {
          "name": "apTag",
          "schema": "string",
          "description": "Filter results by AP Tag"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/dataRateHistory",
      "method": "getNetworkWirelessDataRateHistory",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return PHY data rates over time for a network, device, or network client",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days."
        },
        {
          "name": "resolution",
          "schema": "integer",
          "description": "The time resolution in seconds for returned data. The valid resolutions are: 300, 600, 1200, 3600, 14400, 86400. The default is 86400."
        },
        {
          "name": "autoResolution",
          "schema": "boolean",
          "description": "Automatically select a data resolution based on the given timespan; this overrides the value specified by the 'resolution' parameter. The default setting is false."
        },
        {
          "name": "clientId",
          "schema": "string",
          "description": "Filter results by network client."
        },
        {
          "name": "deviceSerial",
          "schema": "string",
          "description": "Filter results by device."
        },
        {
          "name": "apTag",
          "schema": "string",
          "description": "Filter results by AP tag."
        },
        {
          "name": "band",
          "schema": "string",
          "description": "Filter results by band (either '2.4', '5' or '6')."
        },
        {
          "name": "ssid",
          "schema": "integer",
          "description": "Filter results by SSID number."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/devices/connectionStats",
      "method": "getNetworkWirelessDevicesConnectionStats",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Aggregated connectivity info for this network, grouped by node",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 180 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 7 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days."
        },
        {
          "name": "band",
          "schema": "string",
          "description": "Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information."
        },
        {
          "name": "ssid",
          "schema": "integer",
          "description": "Filter results by SSID"
        },
        {
          "name": "vlan",
          "schema": "integer",
          "description": "Filter results by VLAN"
        },
        {
          "name": "apTag",
          "schema": "string",
          "description": "Filter results by AP Tag"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/devices/latencyStats",
      "method": "getNetworkWirelessDevicesLatencyStats",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Aggregated latency info for this network, grouped by node",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 180 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 7 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days."
        },
        {
          "name": "band",
          "schema": "string",
          "description": "Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information."
        },
        {
          "name": "ssid",
          "schema": "integer",
          "description": "Filter results by SSID"
        },
        {
          "name": "vlan",
          "schema": "integer",
          "description": "Filter results by VLAN"
        },
        {
          "name": "apTag",
          "schema": "string",
          "description": "Filter results by AP Tag"
        },
        {
          "name": "fields",
          "schema": "string",
          "description": "Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/failedConnections",
      "method": "getNetworkWirelessFailedConnections",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "List of all failed client connection events on this network in a given time range",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 180 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 7 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days."
        },
        {
          "name": "band",
          "schema": "string",
          "description": "Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information."
        },
        {
          "name": "ssid",
          "schema": "integer",
          "description": "Filter results by SSID"
        },
        {
          "name": "vlan",
          "schema": "integer",
          "description": "Filter results by VLAN"
        },
        {
          "name": "apTag",
          "schema": "string",
          "description": "Filter results by AP Tag"
        },
        {
          "name": "serial",
          "schema": "string",
          "description": "Filter by AP"
        },
        {
          "name": "clientId",
          "schema": "string",
          "description": "Filter by client MAC"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/latencyHistory",
      "method": "getNetworkWirelessLatencyHistory",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return average wireless latency over time for a network, device, or network client",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days."
        },
        {
          "name": "resolution",
          "schema": "integer",
          "description": "The time resolution in seconds for returned data. The valid resolutions are: 300, 600, 1200, 3600, 14400, 86400. The default is 86400."
        },
        {
          "name": "autoResolution",
          "schema": "boolean",
          "description": "Automatically select a data resolution based on the given timespan; this overrides the value specified by the 'resolution' parameter. The default setting is false."
        },
        {
          "name": "clientId",
          "schema": "string",
          "description": "Filter results by network client."
        },
        {
          "name": "deviceSerial",
          "schema": "string",
          "description": "Filter results by device."
        },
        {
          "name": "apTag",
          "schema": "string",
          "description": "Filter results by AP tag."
        },
        {
          "name": "band",
          "schema": "string",
          "description": "Filter results by band (either '2.4', '5' or '6')."
        },
        {
          "name": "ssid",
          "schema": "integer",
          "description": "Filter results by SSID number."
        },
        {
          "name": "accessCategory",
          "schema": "string",
          "description": "Filter by access category."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/latencyStats",
      "method": "getNetworkWirelessLatencyStats",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Aggregated latency info for this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 180 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 7 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days."
        },
        {
          "name": "band",
          "schema": "string",
          "description": "Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information."
        },
        {
          "name": "ssid",
          "schema": "integer",
          "description": "Filter results by SSID"
        },
        {
          "name": "vlan",
          "schema": "integer",
          "description": "Filter results by VLAN"
        },
        {
          "name": "apTag",
          "schema": "string",
          "description": "Filter results by AP Tag"
        },
        {
          "name": "fields",
          "schema": "string",
          "description": "Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/meshStatuses",
      "method": "getNetworkWirelessMeshStatuses",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "List wireless mesh statuses for repeaters",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 500. Default is 50."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/rfProfiles",
      "method": "getNetworkWirelessRfProfiles",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "List the non-basic RF profiles for this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "includeTemplateProfiles",
          "schema": "boolean",
          "description": "If the network is bound to a template, this parameter controls whether or not the non-basic RF profiles defined on the template should be included in the response alongside the non-basic profiles defined on the bound network. Defaults to false."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/rfProfiles",
      "method": "createNetworkWirelessRfProfile",
      "httpMethod": "post",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Creates new RF profile for this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "apBandSettings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "bandSelectionType",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "clientBalancingEnabled",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "fiveGhzSettings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "minBitrateType",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perSsidSettings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "transmission",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "twoFourGhzSettings",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/rfProfiles/{rfProfileId}",
      "method": "deleteNetworkWirelessRfProfile",
      "httpMethod": "delete",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Delete a RF Profile",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rfProfileId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/wireless/rfProfiles/{rfProfileId}",
      "method": "getNetworkWirelessRfProfile",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return a RF profile",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rfProfileId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/rfProfiles/{rfProfileId}",
      "method": "updateNetworkWirelessRfProfile",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Updates specified RF profile for this network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rfProfileId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "apBandSettings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "bandSelectionType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "clientBalancingEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "fiveGhzSettings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "minBitrateType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "perSsidSettings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "transmission",
          "schema": "object",
          "description": ""
        },
        {
          "name": "twoFourGhzSettings",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/settings",
      "method": "getNetworkWirelessSettings",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return the wireless settings for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/settings",
      "method": "updateNetworkWirelessSettings",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Update the wireless settings for a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ipv6BridgeEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ledLightsOn",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "locationAnalyticsEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "meshingEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "upgradeStrategy",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/signalQualityHistory",
      "method": "getNetworkWirelessSignalQualityHistory",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return signal quality (SNR/RSSI) over time for a device or network client",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days."
        },
        {
          "name": "resolution",
          "schema": "integer",
          "description": "The time resolution in seconds for returned data. The valid resolutions are: 300, 600, 1200, 3600, 14400, 86400. The default is 86400."
        },
        {
          "name": "autoResolution",
          "schema": "boolean",
          "description": "Automatically select a data resolution based on the given timespan; this overrides the value specified by the 'resolution' parameter. The default setting is false."
        },
        {
          "name": "clientId",
          "schema": "string",
          "description": "Filter results by network client."
        },
        {
          "name": "deviceSerial",
          "schema": "string",
          "description": "Filter results by device."
        },
        {
          "name": "apTag",
          "schema": "string",
          "description": "Filter results by AP tag; either :clientId or :deviceSerial must be jointly specified."
        },
        {
          "name": "band",
          "schema": "string",
          "description": "Filter results by band (either '2.4', '5' or '6')."
        },
        {
          "name": "ssid",
          "schema": "integer",
          "description": "Filter results by SSID number."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids",
      "method": "getNetworkWirelessSsids",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "List the MR SSIDs in a network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}",
      "method": "getNetworkWirelessSsid",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return a single MR SSID",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}",
      "method": "updateNetworkWirelessSsid",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Update the attributes of an MR SSID",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "activeDirectory",
          "schema": "object",
          "description": ""
        },
        {
          "name": "adultContentFilteringEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "apTagsAndVlanIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "authMode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "availabilityTags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "availableOnAllAps",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "bandSelection",
          "schema": "string",
          "description": ""
        },
        {
          "name": "concentratorNetworkId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "defaultVlanId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "disassociateClientsOnVpnFailover",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "dnsRewrite",
          "schema": "object",
          "description": ""
        },
        {
          "name": "dot11r",
          "schema": "object",
          "description": ""
        },
        {
          "name": "dot11w",
          "schema": "object",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "encryptionMode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enterpriseAdminAccess",
          "schema": "string",
          "description": ""
        },
        {
          "name": "gre",
          "schema": "object",
          "description": ""
        },
        {
          "name": "ipAssignmentMode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lanIsolationEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ldap",
          "schema": "object",
          "description": ""
        },
        {
          "name": "localRadius",
          "schema": "object",
          "description": ""
        },
        {
          "name": "mandatoryDhcpEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "minBitrate",
          "schema": "number",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "oauth",
          "schema": "object",
          "description": ""
        },
        {
          "name": "perClientBandwidthLimitDown",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "perClientBandwidthLimitUp",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "perSsidBandwidthLimitDown",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "perSsidBandwidthLimitUp",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "psk",
          "schema": "string",
          "description": ""
        },
        {
          "name": "radiusAccountingEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "radiusAccountingInterimInterval",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "radiusAccountingServers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "radiusAttributeForGroupPolicies",
          "schema": "string",
          "description": ""
        },
        {
          "name": "radiusAuthenticationNasId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "radiusCalledStationId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "radiusCoaEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "radiusFailoverPolicy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "radiusFallbackEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "radiusGuestVlanEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "radiusGuestVlanId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "radiusLoadBalancingPolicy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "radiusOverride",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "radiusProxyEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "radiusServerAttemptsLimit",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "radiusServerTimeout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "radiusServers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "radiusTestingEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "secondaryConcentratorNetworkId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "speedBurst",
          "schema": "object",
          "description": ""
        },
        {
          "name": "splashGuestSponsorDomains",
          "schema": "array",
          "description": ""
        },
        {
          "name": "splashPage",
          "schema": "string",
          "description": ""
        },
        {
          "name": "useVlanTagging",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "visible",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "vlanId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "walledGardenEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "walledGardenRanges",
          "schema": "array",
          "description": ""
        },
        {
          "name": "wpaEncryptionMode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/bonjourForwarding",
      "method": "getNetworkWirelessSsidBonjourForwarding",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "List the Bonjour forwarding setting and rules for the SSID",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/bonjourForwarding",
      "method": "updateNetworkWirelessSsidBonjourForwarding",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Update the bonjour forwarding setting and rules for the SSID",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "rules",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/deviceTypeGroupPolicies",
      "method": "getNetworkWirelessSsidDeviceTypeGroupPolicies",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "List the device type group policies for the SSID",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/deviceTypeGroupPolicies",
      "method": "updateNetworkWirelessSsidDeviceTypeGroupPolicies",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Update the device type group policies for the SSID",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "deviceTypePolicies",
          "schema": "array",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/eapOverride",
      "method": "getNetworkWirelessSsidEapOverride",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return the EAP overridden parameters for an SSID",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/eapOverride",
      "method": "updateNetworkWirelessSsidEapOverride",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Update the EAP overridden parameters for an SSID.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "eapolKey",
          "schema": "object",
          "description": ""
        },
        {
          "name": "identity",
          "schema": "object",
          "description": ""
        },
        {
          "name": "maxRetries",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "timeout",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules",
      "method": "getNetworkWirelessSsidFirewallL3FirewallRules",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return the L3 firewall rules for an SSID on an MR network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules",
      "method": "updateNetworkWirelessSsidFirewallL3FirewallRules",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Update the L3 firewall rules of an SSID on an MR network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "allowLanAccess",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "rules",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules",
      "method": "getNetworkWirelessSsidFirewallL7FirewallRules",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return the L7 firewall rules for an SSID on an MR network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules",
      "method": "updateNetworkWirelessSsidFirewallL7FirewallRules",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Update the L7 firewall rules of an SSID on an MR network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rules",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/hotspot20",
      "method": "getNetworkWirelessSsidHotspot20",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return the Hotspot 2.0 settings for an SSID",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/hotspot20",
      "method": "updateNetworkWirelessSsidHotspot20",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Update the Hotspot 2.0 settings of an SSID",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "domains",
          "schema": "array",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "mccMncs",
          "schema": "array",
          "description": ""
        },
        {
          "name": "naiRealms",
          "schema": "array",
          "description": ""
        },
        {
          "name": "networkAccessType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "operator",
          "schema": "object",
          "description": ""
        },
        {
          "name": "roamConsortOis",
          "schema": "array",
          "description": ""
        },
        {
          "name": "venue",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/identityPsks",
      "method": "getNetworkWirelessSsidIdentityPsks",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "List all Identity PSKs in a wireless network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/identityPsks",
      "method": "createNetworkWirelessSsidIdentityPsk",
      "httpMethod": "post",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Create an Identity PSK",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "groupPolicyId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "passphrase",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}",
      "method": "deleteNetworkWirelessSsidIdentityPsk",
      "httpMethod": "delete",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Delete an Identity PSK",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "identityPskId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}",
      "method": "getNetworkWirelessSsidIdentityPsk",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return an Identity PSK",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "identityPskId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}",
      "method": "updateNetworkWirelessSsidIdentityPsk",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Update an Identity PSK",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "identityPskId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "groupPolicyId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "passphrase",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/schedules",
      "method": "getNetworkWirelessSsidSchedules",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "List the outage schedule for the SSID",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/schedules",
      "method": "updateNetworkWirelessSsidSchedules",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Update the outage schedule for the SSID",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ranges",
          "schema": "array",
          "description": ""
        },
        {
          "name": "rangesInSeconds",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/splash/settings",
      "method": "getNetworkWirelessSsidSplashSettings",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Display the splash page settings for the given SSID",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/splash/settings",
      "method": "updateNetworkWirelessSsidSplashSettings",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Modify the splash page settings for the given SSID",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "allowSimultaneousLogins",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "billing",
          "schema": "object",
          "description": ""
        },
        {
          "name": "blockAllTrafficBeforeSignOn",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "controllerDisconnectionBehavior",
          "schema": "string",
          "description": ""
        },
        {
          "name": "guestSponsorship",
          "schema": "object",
          "description": ""
        },
        {
          "name": "redirectUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "sentryEnrollment",
          "schema": "object",
          "description": ""
        },
        {
          "name": "splashImage",
          "schema": "object",
          "description": ""
        },
        {
          "name": "splashLogo",
          "schema": "object",
          "description": ""
        },
        {
          "name": "splashPrepaidFront",
          "schema": "object",
          "description": ""
        },
        {
          "name": "splashTimeout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "splashUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "useRedirectUrl",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "useSplashUrl",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "welcomeMessage",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/trafficShaping/rules",
      "method": "getNetworkWirelessSsidTrafficShapingRules",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Display the traffic shaping settings for a SSID on an MR network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/trafficShaping/rules",
      "method": "updateNetworkWirelessSsidTrafficShapingRules",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Update the traffic shaping settings for an SSID on an MR network",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "defaultRulesEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "rules",
          "schema": "array",
          "description": ""
        },
        {
          "name": "trafficShapingEnabled",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/vpn",
      "method": "getNetworkWirelessSsidVpn",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "List the VPN settings for the SSID.",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/ssids/{number}/vpn",
      "method": "updateNetworkWirelessSsidVpn",
      "httpMethod": "put",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Update the VPN settings for the SSID",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "concentrator",
          "schema": "object",
          "description": ""
        },
        {
          "name": "failover",
          "schema": "object",
          "description": ""
        },
        {
          "name": "splitTunnel",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/networks/{networkId}/wireless/usageHistory",
      "method": "getNetworkWirelessUsageHistory",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Return AP usage over time for a device or network client",
      "parameters": [
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days."
        },
        {
          "name": "resolution",
          "schema": "integer",
          "description": "The time resolution in seconds for returned data. The valid resolutions are: 300, 600, 1200, 3600, 14400, 86400. The default is 86400."
        },
        {
          "name": "autoResolution",
          "schema": "boolean",
          "description": "Automatically select a data resolution based on the given timespan; this overrides the value specified by the 'resolution' parameter. The default setting is false."
        },
        {
          "name": "clientId",
          "schema": "string",
          "description": "Filter results by network client to return per-device AP usage over time inner joined by the queried client's connection history."
        },
        {
          "name": "deviceSerial",
          "schema": "string",
          "description": "Filter results by device. Requires :band."
        },
        {
          "name": "apTag",
          "schema": "string",
          "description": "Filter results by AP tag; either :clientId or :deviceSerial must be jointly specified."
        },
        {
          "name": "band",
          "schema": "string",
          "description": "Filter results by band (either '2.4', '5' or '6')."
        },
        {
          "name": "ssid",
          "schema": "integer",
          "description": "Filter results by SSID number."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations",
      "method": "getOrganizations",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List the organizations that the user has privileges on",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations",
      "method": "createOrganization",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Create a new organization",
      "parameters": [
        {
          "name": "management",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}",
      "method": "deleteOrganization",
      "httpMethod": "delete",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Delete an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organizations/{organizationId}",
      "method": "getOrganization",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}",
      "method": "updateOrganization",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Update an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "api",
          "schema": "object",
          "description": ""
        },
        {
          "name": "management",
          "schema": "object",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/actionBatches",
      "method": "getOrganizationActionBatches",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return the list of action batches in the organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "description": "Filter batches by status. Valid types are pending, completed, and failed."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/actionBatches",
      "method": "createOrganizationActionBatch",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Create an action batch",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "actions",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "confirmed",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "synchronous",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/actionBatches/{actionBatchId}",
      "method": "deleteOrganizationActionBatch",
      "httpMethod": "delete",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Delete an action batch",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "actionBatchId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organizations/{organizationId}/actionBatches/{actionBatchId}",
      "method": "getOrganizationActionBatch",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return an action batch",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "actionBatchId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/actionBatches/{actionBatchId}",
      "method": "updateOrganizationActionBatch",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Update an action batch",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "actionBatchId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "confirmed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "synchronous",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/adaptivePolicy/acls",
      "method": "getOrganizationAdaptivePolicyAcls",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List adaptive policy ACLs in a organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/adaptivePolicy/acls",
      "method": "createOrganizationAdaptivePolicyAcl",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Creates new adaptive policy ACL",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ipVersion",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rules",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/adaptivePolicy/acls/{aclId}",
      "method": "deleteOrganizationAdaptivePolicyAcl",
      "httpMethod": "delete",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Deletes the specified adaptive policy ACL",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "aclId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organizations/{organizationId}/adaptivePolicy/acls/{aclId}",
      "method": "getOrganizationAdaptivePolicyAcl",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Returns the adaptive policy ACL information",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "aclId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/adaptivePolicy/acls/{aclId}",
      "method": "updateOrganizationAdaptivePolicyAcl",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Updates an adaptive policy ACL",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "aclId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ipVersion",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "rules",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/adaptivePolicy/groups",
      "method": "getOrganizationAdaptivePolicyGroups",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List adaptive policy groups in a organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/adaptivePolicy/groups",
      "method": "createOrganizationAdaptivePolicyGroup",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Creates a new adaptive policy group",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "policyObjects",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sgt",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/adaptivePolicy/groups/{id}",
      "method": "deleteOrganizationAdaptivePolicyGroup",
      "httpMethod": "delete",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Deletes the specified adaptive policy group and any associated policies and references",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organizations/{organizationId}/adaptivePolicy/groups/{id}",
      "method": "getOrganizationAdaptivePolicyGroup",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Returns an adaptive policy group",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/adaptivePolicy/groups/{id}",
      "method": "updateOrganizationAdaptivePolicyGroup",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Updates an adaptive policy group",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "policyObjects",
          "schema": "array",
          "description": ""
        },
        {
          "name": "sgt",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/adaptivePolicy/overview",
      "method": "getOrganizationAdaptivePolicyOverview",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Returns adaptive policy aggregate statistics for an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/adaptivePolicy/policies",
      "method": "getOrganizationAdaptivePolicyPolicies",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List adaptive policies in an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/adaptivePolicy/policies",
      "method": "createOrganizationAdaptivePolicyPolicy",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Add an Adaptive Policy",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "acls",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "destinationGroup",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "lastEntryRule",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sourceGroup",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/adaptivePolicy/policies/{id}",
      "method": "deleteOrganizationAdaptivePolicyPolicy",
      "httpMethod": "delete",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Delete an Adaptive Policy",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organizations/{organizationId}/adaptivePolicy/policies/{id}",
      "method": "getOrganizationAdaptivePolicyPolicy",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return an adaptive policy",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/adaptivePolicy/policies/{id}",
      "method": "updateOrganizationAdaptivePolicyPolicy",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Update an Adaptive Policy",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "acls",
          "schema": "array",
          "description": ""
        },
        {
          "name": "destinationGroup",
          "schema": "object",
          "description": ""
        },
        {
          "name": "lastEntryRule",
          "schema": "string",
          "description": ""
        },
        {
          "name": "sourceGroup",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/adaptivePolicy/settings",
      "method": "getOrganizationAdaptivePolicySettings",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Returns global adaptive policy settings in an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/adaptivePolicy/settings",
      "method": "updateOrganizationAdaptivePolicySettings",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Update global adaptive policy settings",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enabledNetworks",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/admins",
      "method": "getOrganizationAdmins",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List the dashboard administrators in this organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/admins",
      "method": "createOrganizationAdmin",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Create a new dashboard administrator",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "authenticationMethod",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "networks",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "orgAccess",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/admins/{adminId}",
      "method": "deleteOrganizationAdmin",
      "httpMethod": "delete",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Revoke all access for a dashboard administrator within this organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "adminId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organizations/{organizationId}/admins/{adminId}",
      "method": "updateOrganizationAdmin",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Update an administrator",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "adminId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "networks",
          "schema": "array",
          "description": ""
        },
        {
          "name": "orgAccess",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/alerts/profiles",
      "method": "getOrganizationAlertsProfiles",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List all organization-wide alert configurations",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/alerts/profiles",
      "method": "createOrganizationAlertsProfile",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Create an organization-wide alert configuration",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "alertCondition",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "networkTags",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "recipients",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/alerts/profiles/{alertConfigId}",
      "method": "deleteOrganizationAlertsProfile",
      "httpMethod": "delete",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Removes an organization-wide alert config",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "alertConfigId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organizations/{organizationId}/alerts/profiles/{alertConfigId}",
      "method": "updateOrganizationAlertsProfile",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Update an organization-wide alert config",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "alertConfigId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "alertCondition",
          "schema": "object",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "networkTags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "recipients",
          "schema": "object",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/apiRequests",
      "method": "getOrganizationApiRequests",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List the API requests made by an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "adminId",
          "schema": "string",
          "description": "Filter the results by the ID of the admin who made the API requests"
        },
        {
          "name": "path",
          "schema": "string",
          "description": "Filter the results by the path of the API requests"
        },
        {
          "name": "method",
          "schema": "string",
          "description": "Filter the results by the method of the API requests (must be 'GET', 'PUT', 'POST' or 'DELETE')"
        },
        {
          "name": "responseCode",
          "schema": "integer",
          "description": "Filter the results by the response code of the API requests"
        },
        {
          "name": "sourceIp",
          "schema": "string",
          "description": "Filter the results by the IP address of the originating API request"
        },
        {
          "name": "userAgent",
          "schema": "string",
          "description": "Filter the results by the user agent string of the API request"
        },
        {
          "name": "version",
          "schema": "integer",
          "description": "Filter the results by the API version of the API request"
        },
        {
          "name": "operationIds",
          "schema": "array",
          "description": "Filter the results by one or more operation IDs for the API request"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/apiRequests/overview",
      "method": "getOrganizationApiRequestsOverview",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return an aggregated overview of API requests data",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/apiRequests/overview/responseCodes/byInterval",
      "method": "getOrganizationApiRequestsOverviewResponseCodesByInterval",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Tracks organizations' API requests by response code across a given time period",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days. If interval is provided, the timespan will be autocalculated."
        },
        {
          "name": "interval",
          "schema": "integer",
          "description": "The time interval in seconds for returned data. The valid intervals are: 120, 3600, 14400, 21600. The default is 21600. Interval is calculated if time params are provided."
        },
        {
          "name": "version",
          "schema": "integer",
          "description": "Filter by API version of the endpoint. Allowable values are: [0, 1]"
        },
        {
          "name": "operationIds",
          "schema": "array",
          "description": "Filter by operation ID of the endpoint"
        },
        {
          "name": "sourceIps",
          "schema": "array",
          "description": "Filter by source IP that made the API request"
        },
        {
          "name": "adminIds",
          "schema": "array",
          "description": "Filter by admin ID of user that made the API request"
        },
        {
          "name": "userAgent",
          "schema": "string",
          "description": "Filter by user agent string for API request. This will filter by a complete or partial match."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/appliance/security/events",
      "method": "getOrganizationApplianceSecurityEvents",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "List the security events for an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 365 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 365 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 31 days."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "sortOrder",
          "schema": "string",
          "description": "Sorted order of security events based on event detection time. Order options are 'ascending' or 'descending'. Default is ascending order."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/appliance/security/intrusion",
      "method": "getOrganizationApplianceSecurityIntrusion",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Returns all supported intrusion settings for an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/appliance/security/intrusion",
      "method": "updateOrganizationApplianceSecurityIntrusion",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Sets supported intrusion settings for an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "allowedRules",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/appliance/uplink/statuses",
      "method": "getOrganizationApplianceUplinkStatuses",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "List the uplink status of every Meraki MX and Z series appliances in the organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "networkIds",
          "schema": "array",
          "description": "A list of network IDs. The returned devices will be filtered to only include these networks."
        },
        {
          "name": "serials",
          "schema": "array",
          "description": "A list of serial numbers. The returned devices will be filtered to only include these serials."
        },
        {
          "name": "iccids",
          "schema": "array",
          "description": "A list of ICCIDs. The returned devices will be filtered to only include these ICCIDs."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/appliance/vpn/stats",
      "method": "getOrganizationApplianceVpnStats",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Show VPN history stat for networks in an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 300. Default is 300."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "networkIds",
          "schema": "array",
          "description": "A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]=N_12345678&networkIds[]=L_3456"
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 31 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/appliance/vpn/statuses",
      "method": "getOrganizationApplianceVpnStatuses",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Show VPN status for networks in an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 300. Default is 300."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "networkIds",
          "schema": "array",
          "description": "A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]=N_12345678&networkIds[]=L_3456"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers",
      "method": "getOrganizationApplianceVpnThirdPartyVpnPeers",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the third party VPN peers for an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers",
      "method": "updateOrganizationApplianceVpnThirdPartyVpnPeers",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update the third party VPN peers for an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "peers",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/appliance/vpn/vpnFirewallRules",
      "method": "getOrganizationApplianceVpnVpnFirewallRules",
      "httpMethod": "get",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Return the firewall rules for an organization's site-to-site VPN",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/appliance/vpn/vpnFirewallRules",
      "method": "updateOrganizationApplianceVpnVpnFirewallRules",
      "httpMethod": "put",
      "tag": "appliance",
      "typeScriptTag": "appliance",
      "description": "Update the firewall rules of an organization's site-to-site VPN",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rules",
          "schema": "array",
          "description": ""
        },
        {
          "name": "syslogDefaultRule",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/brandingPolicies",
      "method": "getOrganizationBrandingPolicies",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List the branding policies of an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/brandingPolicies",
      "method": "createOrganizationBrandingPolicy",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Add a new branding policy to an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "adminSettings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "customLogo",
          "schema": "object",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "helpSettings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/brandingPolicies/priorities",
      "method": "getOrganizationBrandingPoliciesPriorities",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return the branding policy IDs of an organization in priority order",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/brandingPolicies/priorities",
      "method": "updateOrganizationBrandingPoliciesPriorities",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Update the priority ordering of an organization's branding policies.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "brandingPolicyIds",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}",
      "method": "deleteOrganizationBrandingPolicy",
      "httpMethod": "delete",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Delete a branding policy",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "brandingPolicyId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}",
      "method": "getOrganizationBrandingPolicy",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return a branding policy",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "brandingPolicyId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}",
      "method": "updateOrganizationBrandingPolicy",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Update a branding policy",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "brandingPolicyId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "adminSettings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "customLogo",
          "schema": "object",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "helpSettings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/camera/customAnalytics/artifacts",
      "method": "getOrganizationCameraCustomAnalyticsArtifacts",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "List Custom Analytics Artifacts",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/camera/customAnalytics/artifacts",
      "method": "createOrganizationCameraCustomAnalyticsArtifact",
      "httpMethod": "post",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Create custom analytics artifact",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/camera/customAnalytics/artifacts/{artifactId}",
      "method": "deleteOrganizationCameraCustomAnalyticsArtifact",
      "httpMethod": "delete",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Delete Custom Analytics Artifact",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "artifactId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organizations/{organizationId}/camera/customAnalytics/artifacts/{artifactId}",
      "method": "getOrganizationCameraCustomAnalyticsArtifact",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Get Custom Analytics Artifact",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "artifactId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/camera/onboarding/statuses",
      "method": "getOrganizationCameraOnboardingStatuses",
      "httpMethod": "get",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Fetch onboarding status of cameras",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "serials",
          "schema": "array",
          "description": "A list of serial numbers. The returned cameras will be filtered to only include these serials."
        },
        {
          "name": "networkIds",
          "schema": "array",
          "description": "A list of network IDs. The returned cameras will be filtered to only include these networks."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/camera/onboarding/statuses",
      "method": "updateOrganizationCameraOnboardingStatuses",
      "httpMethod": "put",
      "tag": "camera",
      "typeScriptTag": "camera",
      "description": "Notify that credential handoff to camera has completed",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "serial",
          "schema": "string",
          "description": ""
        },
        {
          "name": "wirelessCredentialsSent",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/cellularGateway/uplink/statuses",
      "method": "getOrganizationCellularGatewayUplinkStatuses",
      "httpMethod": "get",
      "tag": "cellularGateway",
      "typeScriptTag": "cellularGateway",
      "description": "List the uplink status of every Meraki MG cellular gateway in the organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "networkIds",
          "schema": "array",
          "description": "A list of network IDs. The returned devices will be filtered to only include these networks."
        },
        {
          "name": "serials",
          "schema": "array",
          "description": "A list of serial numbers. The returned devices will be filtered to only include these serials."
        },
        {
          "name": "iccids",
          "schema": "array",
          "description": "A list of ICCIDs. The returned devices will be filtered to only include these ICCIDs."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/claim",
      "method": "claimIntoOrganization",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Claim a list of devices, licenses, and/or orders into an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "licenses",
          "schema": "array",
          "description": ""
        },
        {
          "name": "orders",
          "schema": "array",
          "description": ""
        },
        {
          "name": "serials",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/clients/bandwidthUsageHistory",
      "method": "getOrganizationClientsBandwidthUsageHistory",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/clients/overview",
      "method": "getOrganizationClientsOverview",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return summary information around client data usage (in mb) across the given organization.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/clients/search",
      "method": "getOrganizationClientsSearch",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return the client details in an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "mac",
          "schema": "string",
          "required": true,
          "description": "The MAC address of the client. Required."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 5. Default is 5."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/clone",
      "method": "cloneOrganization",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Create a new organization by cloning the addressed organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/configTemplates",
      "method": "getOrganizationConfigTemplates",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List the configuration templates for this organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/configTemplates",
      "method": "createOrganizationConfigTemplate",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Create a new configuration template",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "copyFromNetworkId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "timeZone",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/configTemplates/{configTemplateId}",
      "method": "deleteOrganizationConfigTemplate",
      "httpMethod": "delete",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Remove a configuration template",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "configTemplateId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organizations/{organizationId}/configTemplates/{configTemplateId}",
      "method": "getOrganizationConfigTemplate",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return a single configuration template",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "configTemplateId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/configTemplates/{configTemplateId}",
      "method": "updateOrganizationConfigTemplate",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Update a configuration template",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "configTemplateId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "timeZone",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles",
      "method": "getOrganizationConfigTemplateSwitchProfiles",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "List the switch profiles for your switch template configuration",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "configTemplateId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports",
      "method": "getOrganizationConfigTemplateSwitchProfilePorts",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return all the ports of a switch profile",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "configTemplateId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "profileId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}",
      "method": "getOrganizationConfigTemplateSwitchProfilePort",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Return a switch profile port",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "configTemplateId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "profileId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "portId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}",
      "method": "updateOrganizationConfigTemplateSwitchProfilePort",
      "httpMethod": "put",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Update a switch profile port",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "configTemplateId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "profileId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "portId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "accessPolicyNumber",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "accessPolicyType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "allowedVlans",
          "schema": "string",
          "description": ""
        },
        {
          "name": "daiTrusted",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "flexibleStackingEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "isolationEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "linkNegotiation",
          "schema": "string",
          "description": ""
        },
        {
          "name": "macAllowList",
          "schema": "array",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "poeEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "portScheduleId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "profile",
          "schema": "object",
          "description": ""
        },
        {
          "name": "rstpEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "stickyMacAllowList",
          "schema": "array",
          "description": ""
        },
        {
          "name": "stickyMacAllowListLimit",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "stormControlEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "stpGuard",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "udld",
          "schema": "string",
          "description": ""
        },
        {
          "name": "vlan",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "voiceVlan",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/configurationChanges",
      "method": "getOrganizationConfigurationChanges",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "View the Change Log for your organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 365 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 365 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 365 days."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 5000. Default is 5000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "networkId",
          "schema": "string",
          "description": "Filters on the given network"
        },
        {
          "name": "adminId",
          "schema": "string",
          "description": "Filters on the given Admin"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/devices",
      "method": "getOrganizationDevices",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List the devices in an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "configurationUpdatedAfter",
          "schema": "string",
          "description": "Filter results by whether or not the device's configuration has been updated after the given timestamp"
        },
        {
          "name": "networkIds",
          "schema": "array",
          "description": "Optional parameter to filter devices by network."
        },
        {
          "name": "productTypes",
          "schema": "array",
          "description": "Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor."
        },
        {
          "name": "tags",
          "schema": "array",
          "description": "Optional parameter to filter devices by tags."
        },
        {
          "name": "tagsFilterType",
          "schema": "string",
          "description": "Optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected."
        },
        {
          "name": "name",
          "schema": "string",
          "description": "Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match."
        },
        {
          "name": "mac",
          "schema": "string",
          "description": "Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match."
        },
        {
          "name": "serial",
          "schema": "string",
          "description": "Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match."
        },
        {
          "name": "model",
          "schema": "string",
          "description": "Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match."
        },
        {
          "name": "macs",
          "schema": "array",
          "description": "Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match."
        },
        {
          "name": "serials",
          "schema": "array",
          "description": "Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match."
        },
        {
          "name": "sensorMetrics",
          "schema": "array",
          "description": "Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices."
        },
        {
          "name": "sensorAlertProfileIds",
          "schema": "array",
          "description": "Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices."
        },
        {
          "name": "models",
          "schema": "array",
          "description": "Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/devices/availabilities",
      "method": "getOrganizationDevicesAvailabilities",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List the availability information for devices in an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "networkIds",
          "schema": "array",
          "description": "Optional parameter to filter device availabilities by network ID. This filter uses multiple exact matches."
        },
        {
          "name": "productTypes",
          "schema": "array",
          "description": "Optional parameter to filter device availabilities by device product types. This filter uses multiple exact matches."
        },
        {
          "name": "serials",
          "schema": "array",
          "description": "Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches."
        },
        {
          "name": "tags",
          "schema": "array",
          "description": "An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches."
        },
        {
          "name": "tagsFilterType",
          "schema": "string",
          "description": "An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/devices/powerModules/statuses/byDevice",
      "method": "getOrganizationDevicesPowerModulesStatusesByDevice",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List the power status information for devices in an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "networkIds",
          "schema": "array",
          "description": "Optional parameter to filter device availabilities by network ID. This filter uses multiple exact matches."
        },
        {
          "name": "productTypes",
          "schema": "array",
          "description": "Optional parameter to filter device availabilities by device product types. This filter uses multiple exact matches."
        },
        {
          "name": "serials",
          "schema": "array",
          "description": "Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches."
        },
        {
          "name": "tags",
          "schema": "array",
          "description": "An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches."
        },
        {
          "name": "tagsFilterType",
          "schema": "string",
          "description": "An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/devices/statuses",
      "method": "getOrganizationDevicesStatuses",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List the status of every Meraki device in the organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "networkIds",
          "schema": "array",
          "description": "Optional parameter to filter devices by network ids."
        },
        {
          "name": "serials",
          "schema": "array",
          "description": "Optional parameter to filter devices by serials."
        },
        {
          "name": "statuses",
          "schema": "array",
          "description": "Optional parameter to filter devices by statuses. Valid statuses are [\"online\", \"alerting\", \"offline\", \"dormant\"]."
        },
        {
          "name": "productTypes",
          "schema": "array",
          "description": "An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor."
        },
        {
          "name": "models",
          "schema": "array",
          "description": "Optional parameter to filter devices by models."
        },
        {
          "name": "tags",
          "schema": "array",
          "description": "An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below)."
        },
        {
          "name": "tagsFilterType",
          "schema": "string",
          "description": "An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/devices/statuses/overview",
      "method": "getOrganizationDevicesStatusesOverview",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return an overview of current device statuses",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "productTypes",
          "schema": "array",
          "description": "An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor."
        },
        {
          "name": "networkIds",
          "schema": "array",
          "description": "An optional parameter to filter device statuses by network."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/devices/uplinks/addresses/byDevice",
      "method": "getOrganizationDevicesUplinksAddressesByDevice",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List the current uplink addresses for devices in an organization.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "networkIds",
          "schema": "array",
          "description": "Optional parameter to filter device uplinks by network ID. This filter uses multiple exact matches."
        },
        {
          "name": "productTypes",
          "schema": "array",
          "description": "Optional parameter to filter device uplinks by device product types. This filter uses multiple exact matches."
        },
        {
          "name": "serials",
          "schema": "array",
          "description": "Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches."
        },
        {
          "name": "tags",
          "schema": "array",
          "description": "An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches."
        },
        {
          "name": "tagsFilterType",
          "schema": "string",
          "description": "An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/devices/uplinksLossAndLatency",
      "method": "getOrganizationDevicesUplinksLossAndLatency",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 60 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 5 minutes after t0. The latest possible time that t1 can be is 2 minutes into the past."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 5 minutes. The default is 5 minutes."
        },
        {
          "name": "uplink",
          "schema": "string",
          "description": "Optional filter for a specific WAN uplink. Valid uplinks are wan1, wan2, cellular. Default will return all uplinks."
        },
        {
          "name": "ip",
          "schema": "string",
          "description": "Optional filter for a specific destination IP. Default will return all destination IPs."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/earlyAccess/features",
      "method": "getOrganizationEarlyAccessFeatures",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List the available early access features for organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/earlyAccess/features/optIns",
      "method": "getOrganizationEarlyAccessFeaturesOptIns",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List the early access feature opt-ins for an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/earlyAccess/features/optIns",
      "method": "createOrganizationEarlyAccessFeaturesOptIn",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Create a new early access feature opt-in for an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "limitScopeToNetworks",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "shortName",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}",
      "method": "deleteOrganizationEarlyAccessFeaturesOptIn",
      "httpMethod": "delete",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Delete an early access feature opt-in",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "optInId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}",
      "method": "getOrganizationEarlyAccessFeaturesOptIn",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Show an early access feature opt-in for an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "optInId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}",
      "method": "updateOrganizationEarlyAccessFeaturesOptIn",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Update an early access feature opt-in for an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "optInId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "limitScopeToNetworks",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/firmware/upgrades",
      "method": "getOrganizationFirmwareUpgrades",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Get firmware upgrade information for an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "status",
          "schema": "array",
          "description": "The status of an upgrade "
        },
        {
          "name": "productType",
          "schema": "array",
          "description": "The product type in a given upgrade ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/firmware/upgrades/byDevice",
      "method": "getOrganizationFirmwareUpgradesByDevice",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Get firmware upgrade status for the filtered devices",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 50. Default is 50."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "networkIds",
          "schema": "array",
          "description": "Optional parameter to filter by network"
        },
        {
          "name": "serials",
          "schema": "array",
          "description": "Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match."
        },
        {
          "name": "macs",
          "schema": "array",
          "description": "Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match."
        },
        {
          "name": "firmwareUpgradeIds",
          "schema": "array",
          "description": "Optional parameter to filter by firmware upgrade ids."
        },
        {
          "name": "firmwareUpgradeBatchIds",
          "schema": "array",
          "description": "Optional parameter to filter by firmware upgrade batch ids."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/insight/applications",
      "method": "getOrganizationInsightApplications",
      "httpMethod": "get",
      "tag": "insight",
      "typeScriptTag": "insight",
      "description": "List all Insight tracked applications",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/insight/monitoredMediaServers",
      "method": "getOrganizationInsightMonitoredMediaServers",
      "httpMethod": "get",
      "tag": "insight",
      "typeScriptTag": "insight",
      "description": "List the monitored media servers for this organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/insight/monitoredMediaServers",
      "method": "createOrganizationInsightMonitoredMediaServer",
      "httpMethod": "post",
      "tag": "insight",
      "typeScriptTag": "insight",
      "description": "Add a media server to be monitored for this organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "address",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "bestEffortMonitoringEnabled",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}",
      "method": "deleteOrganizationInsightMonitoredMediaServer",
      "httpMethod": "delete",
      "tag": "insight",
      "typeScriptTag": "insight",
      "description": "Delete a monitored media server from this organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "monitoredMediaServerId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}",
      "method": "getOrganizationInsightMonitoredMediaServer",
      "httpMethod": "get",
      "tag": "insight",
      "typeScriptTag": "insight",
      "description": "Return a monitored media server for this organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "monitoredMediaServerId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}",
      "method": "updateOrganizationInsightMonitoredMediaServer",
      "httpMethod": "put",
      "tag": "insight",
      "typeScriptTag": "insight",
      "description": "Update a monitored media server for this organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "monitoredMediaServerId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "address",
          "schema": "string",
          "description": ""
        },
        {
          "name": "bestEffortMonitoringEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/inventory/claim",
      "method": "claimIntoOrganizationInventory",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Claim a list of devices, licenses, and/or orders into an organization inventory",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "licenses",
          "schema": "array",
          "description": ""
        },
        {
          "name": "orders",
          "schema": "array",
          "description": ""
        },
        {
          "name": "serials",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/inventory/devices",
      "method": "getOrganizationInventoryDevices",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return the device inventory for an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "usedState",
          "schema": "string",
          "description": "Filter results by used or unused inventory. Accepted values are 'used' or 'unused'."
        },
        {
          "name": "search",
          "schema": "string",
          "description": "Search for devices in inventory based on serial number, mac address, or model."
        },
        {
          "name": "macs",
          "schema": "array",
          "description": "Search for devices in inventory based on mac addresses."
        },
        {
          "name": "networkIds",
          "schema": "array",
          "description": "Search for devices in inventory based on network ids."
        },
        {
          "name": "serials",
          "schema": "array",
          "description": "Search for devices in inventory based on serials."
        },
        {
          "name": "models",
          "schema": "array",
          "description": "Search for devices in inventory based on model."
        },
        {
          "name": "orderNumbers",
          "schema": "array",
          "description": "Search for devices in inventory based on order numbers."
        },
        {
          "name": "tags",
          "schema": "array",
          "description": "Filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below)."
        },
        {
          "name": "tagsFilterType",
          "schema": "string",
          "description": "To use with 'tags' parameter, to filter devices which contain ANY or ALL given tags. Accepted values are 'withAnyTags' or 'withAllTags', default is 'withAnyTags'."
        },
        {
          "name": "productTypes",
          "schema": "array",
          "description": "Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/inventory/devices/{serial}",
      "method": "getOrganizationInventoryDevice",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return a single device from the inventory of an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "serial",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/exportEvents",
      "method": "createOrganizationInventoryOnboardingCloudMonitoringExportEvent",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Imports event logs related to the onboarding app into elastisearch",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "logEvent",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "request",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "targetOS",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "timestamp",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports",
      "method": "getOrganizationInventoryOnboardingCloudMonitoringImports",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Check the status of a committed Import operation",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "importIds",
          "schema": "array",
          "required": true,
          "description": "import ids from an imports"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports",
      "method": "createOrganizationInventoryOnboardingCloudMonitoringImport",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "devices",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/networks",
      "method": "getOrganizationInventoryOnboardingCloudMonitoringNetworks",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Returns list of networks eligible for adding cloud monitored device",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "deviceType",
          "schema": "string",
          "required": true,
          "description": "Device Type switch or wireless controller"
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/prepare",
      "method": "createOrganizationInventoryOnboardingCloudMonitoringPrepare",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Initiates or updates an import session",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "devices",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/inventory/release",
      "method": "releaseFromOrganizationInventory",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Release a list of claimed devices from an organization.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "serials",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/licenses",
      "method": "getOrganizationLicenses",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List the licenses for an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "deviceSerial",
          "schema": "string",
          "description": "Filter the licenses to those assigned to a particular device. Returned in the same order that they are queued to the device."
        },
        {
          "name": "networkId",
          "schema": "string",
          "description": "Filter the licenses to those assigned in a particular network"
        },
        {
          "name": "state",
          "schema": "string",
          "description": "Filter the licenses to those in a particular state. Can be one of 'active', 'expired', 'expiring', 'recentlyQueued', 'unused' or 'unusedActive'"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/licenses/assignSeats",
      "method": "assignOrganizationLicensesSeats",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Assign SM seats to a network",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "licenseId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "networkId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "seatCount",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/licenses/move",
      "method": "moveOrganizationLicenses",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Move licenses to another organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "destOrganizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "licenseIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/licenses/moveSeats",
      "method": "moveOrganizationLicensesSeats",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Move SM seats to another organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "destOrganizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "licenseId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "seatCount",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/licenses/overview",
      "method": "getOrganizationLicensesOverview",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return an overview of the license state for an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/licenses/renewSeats",
      "method": "renewOrganizationLicensesSeats",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Renew SM seats of a license",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "licenseIdToRenew",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "unusedLicenseId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/licenses/{licenseId}",
      "method": "getOrganizationLicense",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Display a license",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "licenseId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/licenses/{licenseId}",
      "method": "updateOrganizationLicense",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Update a license",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "licenseId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "deviceSerial",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/licensing/coterm/licenses",
      "method": "getOrganizationLicensingCotermLicenses",
      "httpMethod": "get",
      "tag": "licensing",
      "typeScriptTag": "licensing",
      "description": "List the licenses in a coterm organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "invalidated",
          "schema": "boolean",
          "description": "Filter for licenses that are invalidated"
        },
        {
          "name": "expired",
          "schema": "boolean",
          "description": "Filter for licenses that are expired"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/licensing/coterm/licenses/move",
      "method": "moveOrganizationLicensingCotermLicenses",
      "httpMethod": "post",
      "tag": "licensing",
      "typeScriptTag": "licensing",
      "description": "Moves a license to a different organization (coterm only)",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "destination",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "licenses",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/loginSecurity",
      "method": "getOrganizationLoginSecurity",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Returns the login security settings for an organization.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/loginSecurity",
      "method": "updateOrganizationLoginSecurity",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Update the login security settings for an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "accountLockoutAttempts",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "apiAuthentication",
          "schema": "object",
          "description": ""
        },
        {
          "name": "enforceAccountLockout",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enforceDifferentPasswords",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enforceIdleTimeout",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enforceLoginIpRanges",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enforcePasswordExpiration",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enforceStrongPasswords",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enforceTwoFactorAuth",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "idleTimeoutMinutes",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "loginIpRanges",
          "schema": "array",
          "description": ""
        },
        {
          "name": "numDifferentPasswords",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "passwordExpirationDays",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/networks",
      "method": "getOrganizationNetworks",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List the networks that the user has privileges on in an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "configTemplateId",
          "schema": "string",
          "description": "An optional parameter that is the ID of a config template. Will return all networks bound to that template."
        },
        {
          "name": "isBoundToConfigTemplate",
          "schema": "boolean",
          "description": "An optional parameter to filter config template bound networks. If configTemplateId is set, this cannot be false."
        },
        {
          "name": "tags",
          "schema": "array",
          "description": "An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below)."
        },
        {
          "name": "tagsFilterType",
          "schema": "string",
          "description": "An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/networks",
      "method": "createOrganizationNetwork",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Create a network",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "copyFromNetworkId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "notes",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "productTypes",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "timeZone",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/networks/combine",
      "method": "combineOrganizationNetworks",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Combine multiple networks into a single network",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enrollmentString",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "networkIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/openapiSpec",
      "method": "getOrganizationOpenapiSpec",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return the OpenAPI 2.0 Specification of the organization's API documentation in JSON",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/policyObjects",
      "method": "getOrganizationPolicyObjects",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Lists Policy Objects belonging to the organization.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 10 - 5000. Default is 5000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/policyObjects",
      "method": "createOrganizationPolicyObject",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Creates a new Policy Object.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "cidr",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "fqdn",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "groupIds",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "ip",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "mask",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/policyObjects/groups",
      "method": "getOrganizationPolicyObjectsGroups",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Lists Policy Object Groups belonging to the organization.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 10 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/policyObjects/groups",
      "method": "createOrganizationPolicyObjectsGroup",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Creates a new Policy Object Group.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "category",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "objectIds",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}",
      "method": "deleteOrganizationPolicyObjectsGroup",
      "httpMethod": "delete",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Deletes a Policy Object Group.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "policyObjectGroupId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}",
      "method": "getOrganizationPolicyObjectsGroup",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Shows details of a Policy Object Group.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "policyObjectGroupId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}",
      "method": "updateOrganizationPolicyObjectsGroup",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Updates a Policy Object Group.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "policyObjectGroupId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "objectIds",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/policyObjects/{policyObjectId}",
      "method": "deleteOrganizationPolicyObject",
      "httpMethod": "delete",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Deletes a Policy Object.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "policyObjectId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organizations/{organizationId}/policyObjects/{policyObjectId}",
      "method": "getOrganizationPolicyObject",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Shows details of a Policy Object.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "policyObjectId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/policyObjects/{policyObjectId}",
      "method": "updateOrganizationPolicyObject",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Updates a Policy Object.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "policyObjectId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "cidr",
          "schema": "string",
          "description": ""
        },
        {
          "name": "fqdn",
          "schema": "string",
          "description": ""
        },
        {
          "name": "groupIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ip",
          "schema": "string",
          "description": ""
        },
        {
          "name": "mask",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/saml",
      "method": "getOrganizationSaml",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Returns the SAML SSO enabled settings for an organization.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/saml",
      "method": "updateOrganizationSaml",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Updates the SAML SSO enabled settings for an organization.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/saml/idps",
      "method": "getOrganizationSamlIdps",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List the SAML IdPs in your organization.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/saml/idps",
      "method": "createOrganizationSamlIdp",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Create a SAML IdP for your organization.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "sloLogoutUrl",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "x509certSha1Fingerprint",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/saml/idps/{idpId}",
      "method": "deleteOrganizationSamlIdp",
      "httpMethod": "delete",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Remove a SAML IdP in your organization.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "idpId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organizations/{organizationId}/saml/idps/{idpId}",
      "method": "getOrganizationSamlIdp",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Get a SAML IdP from your organization.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "idpId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/saml/idps/{idpId}",
      "method": "updateOrganizationSamlIdp",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Update a SAML IdP in your organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "idpId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "sloLogoutUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "x509certSha1Fingerprint",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/samlRoles",
      "method": "getOrganizationSamlRoles",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List the SAML roles for this organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/samlRoles",
      "method": "createOrganizationSamlRole",
      "httpMethod": "post",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Create a SAML role",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "networks",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "orgAccess",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "role",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/samlRoles/{samlRoleId}",
      "method": "deleteOrganizationSamlRole",
      "httpMethod": "delete",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Remove a SAML role",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "samlRoleId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organizations/{organizationId}/samlRoles/{samlRoleId}",
      "method": "getOrganizationSamlRole",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return a SAML role",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "samlRoleId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/samlRoles/{samlRoleId}",
      "method": "updateOrganizationSamlRole",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Update a SAML role",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "samlRoleId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "networks",
          "schema": "array",
          "description": ""
        },
        {
          "name": "orgAccess",
          "schema": "string",
          "description": ""
        },
        {
          "name": "role",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/sensor/readings/history",
      "method": "getOrganizationSensorReadingsHistory",
      "httpMethod": "get",
      "tag": "sensor",
      "typeScriptTag": "sensor",
      "description": "Return all reported readings from sensors in a given timespan, sorted by timestamp",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 365 days and 6 hours from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 7 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours."
        },
        {
          "name": "networkIds",
          "schema": "array",
          "description": "Optional parameter to filter readings by network."
        },
        {
          "name": "serials",
          "schema": "array",
          "description": "Optional parameter to filter readings by sensor."
        },
        {
          "name": "metrics",
          "schema": "array",
          "description": "Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/sensor/readings/latest",
      "method": "getOrganizationSensorReadingsLatest",
      "httpMethod": "get",
      "tag": "sensor",
      "typeScriptTag": "sensor",
      "description": "Return the latest available reading for each metric from each sensor, sorted by sensor serial",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 100. Default is 100."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "networkIds",
          "schema": "array",
          "description": "Optional parameter to filter readings by network."
        },
        {
          "name": "serials",
          "schema": "array",
          "description": "Optional parameter to filter readings by sensor."
        },
        {
          "name": "metrics",
          "schema": "array",
          "description": "Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/sm/apnsCert",
      "method": "getOrganizationSmApnsCert",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Get the organization's APNS certificate",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/sm/vppAccounts",
      "method": "getOrganizationSmVppAccounts",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "List the VPP accounts in the organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/sm/vppAccounts/{vppAccountId}",
      "method": "getOrganizationSmVppAccount",
      "httpMethod": "get",
      "tag": "sm",
      "typeScriptTag": "sm",
      "description": "Get a hash containing the unparsed token of the VPP account with the given ID",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "vppAccountId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/snmp",
      "method": "getOrganizationSnmp",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return the SNMP settings for an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/snmp",
      "method": "updateOrganizationSnmp",
      "httpMethod": "put",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Update the SNMP settings for an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "peerIps",
          "schema": "array",
          "description": ""
        },
        {
          "name": "v2cEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "v3AuthMode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "v3AuthPass",
          "schema": "string",
          "description": ""
        },
        {
          "name": "v3Enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "v3PrivMode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "v3PrivPass",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/summary/top/appliances/byUtilization",
      "method": "getOrganizationSummaryTopAppliancesByUtilization",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return the top 10 appliances sorted by utilization over given time range.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/summary/top/clients/byUsage",
      "method": "getOrganizationSummaryTopClientsByUsage",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return metrics for organization's top 10 clients by data usage (in mb) over given time range.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/summary/top/clients/manufacturers/byUsage",
      "method": "getOrganizationSummaryTopClientsManufacturersByUsage",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return metrics for organization's top clients by data usage (in mb) over given time range, grouped by manufacturer.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/summary/top/devices/byUsage",
      "method": "getOrganizationSummaryTopDevicesByUsage",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return metrics for organization's top 10 devices sorted by data usage over given time range",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/summary/top/devices/models/byUsage",
      "method": "getOrganizationSummaryTopDevicesModelsByUsage",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return metrics for organization's top 10 device models sorted by data usage over given time range",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/summary/top/ssids/byUsage",
      "method": "getOrganizationSummaryTopSsidsByUsage",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return metrics for organization's top 10 ssids by data usage over given time range",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/summary/top/switches/byEnergyUsage",
      "method": "getOrganizationSummaryTopSwitchesByEnergyUsage",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return metrics for organization's top 10 switches by energy usage over given time range",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/switch/devices/clone",
      "method": "cloneOrganizationSwitchDevices",
      "httpMethod": "post",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "Clone port-level and some switch-level configuration settings from a source switch to one or more target switches",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "sourceSerial",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "targetSerials",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/switch/ports/bySwitch",
      "method": "getOrganizationSwitchPortsBySwitch",
      "httpMethod": "get",
      "tag": "switch",
      "typeScriptTag": "switch",
      "description": "List the switchports in an organization by switch",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 50. Default is 50."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "networkIds",
          "schema": "array",
          "description": "Optional parameter to filter switchports by network."
        },
        {
          "name": "portProfileIds",
          "schema": "array",
          "description": "Optional parameter to filter switchports belonging to the specified switchport profiles."
        },
        {
          "name": "name",
          "schema": "string",
          "description": "Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match."
        },
        {
          "name": "mac",
          "schema": "string",
          "description": "Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match."
        },
        {
          "name": "macs",
          "schema": "array",
          "description": "Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match."
        },
        {
          "name": "serial",
          "schema": "string",
          "description": "Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match."
        },
        {
          "name": "serials",
          "schema": "array",
          "description": "Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match."
        },
        {
          "name": "configurationUpdatedAfter",
          "schema": "string",
          "description": "Optional parameter to filter results by switches where the configuration has been updated after the given timestamp."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/uplinks/statuses",
      "method": "getOrganizationUplinksStatuses",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "List the uplink status of every Meraki MX, MG and Z series devices in the organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "networkIds",
          "schema": "array",
          "description": "A list of network IDs. The returned devices will be filtered to only include these networks."
        },
        {
          "name": "serials",
          "schema": "array",
          "description": "A list of serial numbers. The returned devices will be filtered to only include these serials."
        },
        {
          "name": "iccids",
          "schema": "array",
          "description": "A list of ICCIDs. The returned devices will be filtered to only include these ICCIDs."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/users/{userId}",
      "method": "deleteOrganizationUser",
      "httpMethod": "delete",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Delete a user and all of its authentication methods.",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organizations/{organizationId}/webhooks/alertTypes",
      "method": "getOrganizationWebhooksAlertTypes",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return a list of alert types to be used with managing webhook alerts",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "productType",
          "schema": "string",
          "description": "Filter sample alerts to a specific product type"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/webhooks/logs",
      "method": "getOrganizationWebhooksLogs",
      "httpMethod": "get",
      "tag": "organizations",
      "typeScriptTag": "organizations",
      "description": "Return the log of webhook POSTs sent",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "t0",
          "schema": "string",
          "description": "The beginning of the timespan for the data. The maximum lookback period is 90 days from today."
        },
        {
          "name": "t1",
          "schema": "string",
          "description": "The end of the timespan for the data. t1 can be a maximum of 31 days after t0."
        },
        {
          "name": "timespan",
          "schema": "number",
          "description": "The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "url",
          "schema": "string",
          "description": "The URL the webhook was sent to"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{organizationId}/wireless/devices/ethernet/statuses",
      "method": "getOrganizationWirelessDevicesEthernetStatuses",
      "httpMethod": "get",
      "tag": "wireless",
      "typeScriptTag": "wireless",
      "description": "Endpoint to see power status for wireless devices",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "perPage",
          "schema": "integer",
          "description": "The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100."
        },
        {
          "name": "startingAfter",
          "schema": "string",
          "description": "A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "endingBefore",
          "schema": "string",
          "description": "A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."
        },
        {
          "name": "networkIds",
          "schema": "array",
          "description": "A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]=N_12345678&networkIds[]=L_3456"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.meraki.com/api/v1",
  "apiDescription": "The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.\n\n> Date: 05 April, 2023\n>\n> [Recent Updates](https://meraki.io/whats-new/)\n\n---\n\n[API Documentation](https://meraki.io/api)\n\n[Community Support](https://meraki.io/community)\n\n[Meraki Homepage](https://www.meraki.com)\n",
  "apiTitle": "Meraki Dashboard API",
  "endpoints": 388,
  "sdkMethods": 616,
  "schemas": 0,
  "parameters": 2385,
  "contactUrl": "https://meraki.io/community",
  "difficultyScore": 1212.25,
  "difficulty": "Very Hard"
}