{
  "providerName": "gambitcomm.local",
  "openApiRaw": "https://www.gambitcomm.com/docs/mimic.yaml",
  "securitySchemes": {
    "basicAuth": {
      "scheme": "basic",
      "type": "http"
    }
  },
  "homepage": "gambitcomm.local",
  "serviceName": "mimic",
  "apiVersion": "21.00",
  "methods": [
    {
      "url": "/mimic/access/add/{user}/{agents}/{mask}",
      "method": "accessAdd",
      "httpMethod": "post",
      "tag": "Access",
      "description": "Adds/Overwrites the user entry in the access control database.",
      "parameters": [
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "Username of the simulator hosting system"
        },
        {
          "name": "agents",
          "schema": "string",
          "required": true,
          "description": "Agent range in minimal range representation"
        },
        {
          "name": "mask",
          "schema": "string",
          "required": true,
          "description": "Currently not used"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/access/del/{user}",
      "method": "accessDel",
      "httpMethod": "delete",
      "tag": "Access",
      "description": "Clears a users entry from access control database.",
      "parameters": [
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "username of the simulator hosting system"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/access/get/acldb",
      "method": "accessGetAcldb",
      "httpMethod": "get",
      "tag": "Access",
      "description": "Returns the current access control database in use.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/access/get/admindir",
      "method": "accessGetAdmindir",
      "httpMethod": "get",
      "tag": "Access",
      "description": "Returns the current admin directory.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/access/get/adminuser",
      "method": "accessGetAdminuser",
      "httpMethod": "get",
      "tag": "Access",
      "description": "Returns the current administrator.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/access/get/enabled",
      "method": "accessGetEnabled",
      "httpMethod": "get",
      "tag": "Access",
      "description": "Returns the state of access control checking.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/access/list",
      "method": "accessList",
      "httpMethod": "get",
      "tag": "Access",
      "description": "Returns an array of entries.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/access/load/{filename}",
      "method": "accessLoad",
      "httpMethod": "put",
      "tag": "Access",
      "description": "Loads the specified file for access control data.",
      "parameters": [
        {
          "name": "filename",
          "schema": "string",
          "required": true,
          "description": "Filename to load"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/access/save/{filename}",
      "method": "accessSave",
      "httpMethod": "put",
      "tag": "Access",
      "description": "Saves current access control data in specified file.",
      "parameters": [
        {
          "name": "filename",
          "schema": "string",
          "required": true,
          "description": "Filename to save"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/access/set/acldb/{databaseName}",
      "method": "accessSetAcldb",
      "httpMethod": "put",
      "tag": "Access",
      "description": "Allows setting the name of the current access control database.",
      "parameters": [
        {
          "name": "databaseName",
          "schema": "string",
          "required": true,
          "description": "Database name to use"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/access/set/enabled/{enabledOrNot}",
      "method": "accessSetEnabled",
      "httpMethod": "put",
      "tag": "Access",
      "description": "Allows the user to enable/disable the access control check.",
      "parameters": [
        {
          "name": "enabledOrNot",
          "schema": "string",
          "required": true,
          "description": "indicator"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/add/{IP}",
      "method": "new",
      "httpMethod": "post",
      "tag": "Agent",
      "description": "Add an agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the primary IP"
        },
        {
          "name": "ip",
          "schema": "string",
          "required": true,
          "description": "Primary IP"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/from/add/{IP}/{port}",
      "method": "fromAdd",
      "httpMethod": "post",
      "tag": "Agent",
      "description": "Add a source address that the agent will accept messages from.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to add the IP source"
        },
        {
          "name": "ip",
          "schema": "string",
          "required": true,
          "description": "IP of the port, 0.0.0.0 for any"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": "port of the source, 0 for any"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/from/delete/{IP}/{port}",
      "method": "fromDel",
      "httpMethod": "delete",
      "tag": "Agent",
      "description": "delete a source address that the agent will accept messages from.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to delete the IP source"
        },
        {
          "name": "ip",
          "schema": "string",
          "required": true,
          "description": "IP of the source"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": "port of the source"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/from/list",
      "method": "fromList",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "List the source addresses that the agent will accept messages from.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the IP sources"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/changed",
      "method": "getChanged",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "has the agent value space changed?",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the indicator"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/config_changed",
      "method": "getConfigChanged",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "has the lab configuration changed?",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the indicator"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/delay",
      "method": "getDelay",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "one-way transit delay in msec.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the delay time"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/drops",
      "method": "getDrops",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "drop rate (every N-th PDU). 0 means no drops.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the drop rate"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/host",
      "method": "getHost",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "host address of the agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the primary IP"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/inform_timeout",
      "method": "getInformTimeout",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "timeout in seconds for retransmitting INFORM PDUs.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the timeout setting"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/interface",
      "method": "getInterface",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "network interface card for the agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the primary interface"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/mask",
      "method": "getMask",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "subnet mask of the agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the primary interface"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/mibs",
      "method": "getMibs",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "set of MIBs, simulations and scenarios",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the MIB triplets"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/num_starts",
      "method": "getNumberStarts",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "number of starts for the agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the count"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/oiddir",
      "method": "getOiddir",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "MIB directory of the agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the directory path"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/owner",
      "method": "getOwner",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "owner of the agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the owner"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/pdusize",
      "method": "getPdusize",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "maximum PDU size.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the PDU size"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/port",
      "method": "getPort",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "port number",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the primary SNMP port"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/privdir",
      "method": "getPrivdir",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "private directory of the agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the directory path"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/protocol",
      "method": "getProtocols",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "protocols supported by agent",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the protocols arrary"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/read",
      "method": "getReadCommunity",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "read community string",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the SNMP read community string"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/scen",
      "method": "getScen",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "first scenario name",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the first scenario number"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/sim",
      "method": "getSim",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "first simulation name",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the first simulation name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/start",
      "method": "getStarttime",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "relative start time",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the relative start time"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/state",
      "method": "getAgentState",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "current running state of the agent",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the state"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/state_changed",
      "method": "getStateChanged",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "has the agent state changed?",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the indicator"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/statistics",
      "method": "getStatistics",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "current statistics of the agent instance",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/trace",
      "method": "getTrace",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "SNMP PDU tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the indicator"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/validate",
      "method": "getValidate",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "SNMP SET validation policy.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the bitmask integer"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/get/write",
      "method": "getWriteCommunity",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "write community string",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the SNMP write community string"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/halt",
      "method": "halt",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "Halt the current agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the primary IP"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/ipalias/add/{IP}/{port}/{mask}/{interface}",
      "method": "addIpalias",
      "httpMethod": "post",
      "tag": "Agent",
      "description": "Adds a new ipalias for the agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to add the IP alias"
        },
        {
          "name": "ip",
          "schema": "string",
          "required": true,
          "description": "IP address , IPv4 or IPv6"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": "SNMP port , 0 or empty for default"
        },
        {
          "name": "mask",
          "schema": "string",
          "required": true,
          "description": "Netmask, empty for default"
        },
        {
          "name": "interface",
          "schema": "string",
          "required": true,
          "description": "Interface. Empty for default"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/ipalias/delete/{IP}/{port}",
      "method": "delIpalias",
      "httpMethod": "delete",
      "tag": "Agent",
      "description": "Deletes an existing ipalias from the agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to delete the IP alias"
        },
        {
          "name": "ip",
          "schema": "string",
          "required": true,
          "description": "IP address , IPv4 or IPv6"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": "SNMP port , 0 or empty for default"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/ipalias/list",
      "method": "listIpaliases",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "Lists all the additional ipaliases configured for the agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the IP alias list"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/ipalias/start/{IP}/{port}",
      "method": "startIpalias",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "Starts an existing ipalias for the agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to start the IP alias"
        },
        {
          "name": "ip",
          "schema": "string",
          "required": true,
          "description": "IP address , IPv4 or IPv6"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": "SNMP port , 0 or empty for default"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/ipalias/status/{IP}/{port}",
      "method": "statusIpalias",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "Returns the status (0=down, 1=up) of an existing ipalias for the agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show status of the IP alias"
        },
        {
          "name": "ip",
          "schema": "string",
          "required": true,
          "description": "IP address , IPv4 or IPv6"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": "SNMP port , 0 or empty for default"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/ipalias/stop/{IP}/{port}",
      "method": "stopIpalias",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "Stops an existing ipalias for the agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to stop the IP alias"
        },
        {
          "name": "ip",
          "schema": "string",
          "required": true,
          "description": "IP address , IPv4 or IPv6"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": "SNMP port , 0 or empty for default"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/pause",
      "method": "pauseNow",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "Pause the current agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the primary IP"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/coap/get/args",
      "method": "protocolCoapGetArgs",
      "httpMethod": "get",
      "tag": "COAP",
      "description": "Show the agent's COAP argument structure",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the COAP argument structure"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/coap/get/config",
      "method": "protocolCoapGetConfig",
      "httpMethod": "get",
      "tag": "COAP",
      "description": "Show the agent's COAP configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the COAP configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/coap/get/statistics",
      "method": "protocolCoapGetStatistics",
      "httpMethod": "get",
      "tag": "COAP",
      "description": "Show the agent's COAP statistics",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show COAP statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/coap/get/trace",
      "method": "protocolCoapGetTrace",
      "httpMethod": "get",
      "tag": "COAP",
      "description": "Show the agent's COAP traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show whether COAP tracing is enabled"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/coap/set/config/{argument}/{value}",
      "method": "protocolCoapSetConfig",
      "httpMethod": "put",
      "tag": "COAP",
      "description": "Set the agent's COAP configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the COAP configuration"
        },
        {
          "name": "argument",
          "schema": "string",
          "required": true,
          "description": "Parameter to set the COAP configuration"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Value to set the COAP configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/coap/set/trace/{enableOrNot}",
      "method": "protocolCoapSetTrace",
      "httpMethod": "put",
      "tag": "COAP",
      "description": "Set the agent's COAP traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the COAP tracing"
        },
        {
          "name": "enableOrNot",
          "schema": "string",
          "required": true,
          "description": "Value to set the COAP tracing"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/dhcp/get/args",
      "method": "protocolDhcpGetArgs",
      "httpMethod": "get",
      "tag": "DHCP",
      "description": "Show the agent's DHCP argument structure",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the DHCP argument structure"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/dhcp/get/config",
      "method": "protocolDhcpGetConfig",
      "httpMethod": "get",
      "tag": "DHCP",
      "description": "Show the agent's DHCP configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the DHCP configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/dhcp/get/statistics",
      "method": "protocolDhcpGetStatistics",
      "httpMethod": "get",
      "tag": "DHCP",
      "description": "Show the agent's DHCP statistics",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show DHCP statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/dhcp/get/trace",
      "method": "protocolDhcpGetTrace",
      "httpMethod": "get",
      "tag": "DHCP",
      "description": "Show the agent's DHCP traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show whether DHCP tracing is enabled"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/dhcp/params",
      "method": "protocolDhcpParams",
      "httpMethod": "get",
      "tag": "DHCP",
      "description": "Show the parameters configured by the server in its DHCP-OFFER message",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show DHCP DHCP-OFFER message"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/dhcp/set/config/{argument}/{value}",
      "method": "protocolDhcpSetConfig",
      "httpMethod": "put",
      "tag": "DHCP",
      "description": "Set the agent's DHCP configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the DHCP configuration"
        },
        {
          "name": "argument",
          "schema": "string",
          "required": true,
          "description": "Parameter to set the DHCP configuration"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Value to set the DHCP configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/dhcp/set/trace/{enableOrNot}",
      "method": "protocolDhcpSetTrace",
      "httpMethod": "put",
      "tag": "DHCP",
      "description": "Set the agent's DHCP traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the DHCP tracing"
        },
        {
          "name": "enableOrNot",
          "schema": "string",
          "required": true,
          "description": "Value to set the DHCP tracing"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/ipmi/get/args",
      "method": "protocolIpmiGetArgs",
      "httpMethod": "get",
      "tag": "IPMI",
      "description": "Show the agent's IPMI argument structure",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the IPMI argument structure"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/ipmi/get/config",
      "method": "protocolIpmiGetConfig",
      "httpMethod": "get",
      "tag": "IPMI",
      "description": "Show the agent's IPMI configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the IPMI configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/ipmi/get/statistics",
      "method": "protocolIpmiGetStatistics",
      "httpMethod": "get",
      "tag": "IPMI",
      "description": "Show the agent's IPMI statistics",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show IPMI statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/ipmi/get/trace",
      "method": "protocolIpmiGetTrace",
      "httpMethod": "get",
      "tag": "IPMI",
      "description": "Show the agent's IPMI traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show whether IPMI tracing is enabled"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/ipmi/get/{attr}",
      "method": "protocolIpmiGetAttr",
      "httpMethod": "get",
      "tag": "IPMI",
      "description": "Show the outgoing message's attributes",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the IPMI tracing"
        },
        {
          "name": "attr",
          "schema": "string",
          "required": true,
          "description": "Attribute"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/ipmi/set/config/{argument}/{value}",
      "method": "protocolIpmiSetConfig",
      "httpMethod": "put",
      "tag": "IPMI",
      "description": "Set the agent's IPMI configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the IPMI configuration"
        },
        {
          "name": "argument",
          "schema": "string",
          "required": true,
          "description": "Parameter to set the IPMI configuration"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Value to set the IPMI configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/ipmi/set/trace/{enableOrNot}",
      "method": "protocolIpmiSetTrace",
      "httpMethod": "put",
      "tag": "IPMI",
      "description": "Set the agent's IPMI traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the IPMI tracing"
        },
        {
          "name": "enableOrNot",
          "schema": "string",
          "required": true,
          "description": "Value to set the IPMI tracing"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/ipmi/set/{attr}/{value}",
      "method": "protocolIpmiSetAttr",
      "httpMethod": "put",
      "tag": "IPMI",
      "description": "Set the outgoing message's attributes",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the IPMI tracing"
        },
        {
          "name": "attr",
          "schema": "string",
          "required": true,
          "description": "Attribute"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/get/protstate",
      "method": "protocolMqttClientGetProtstate",
      "httpMethod": "get",
      "tag": "MQTT",
      "description": "Show the agent's MQTT TCP connection state",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show MQTT state"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/get/state",
      "method": "protocolMqttClientGetState",
      "httpMethod": "get",
      "tag": "MQTT",
      "description": "Show the agent's MQTT state",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show MQTT state"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/message/card",
      "method": "protocolMqttClientMessageCard",
      "httpMethod": "get",
      "tag": "MQTT",
      "description": "Show the agent's current messages' cardinality",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show MQTT message state"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/message/get/{msgNum}/{attr}",
      "method": "protocolMqttClientMessageGet",
      "httpMethod": "get",
      "tag": "MQTT",
      "description": "Show the agent's message attributes",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show MQTT state"
        },
        {
          "name": "msgNum",
          "schema": "integer",
          "required": true,
          "description": "Message Number"
        },
        {
          "name": "attr",
          "schema": "string",
          "required": true,
          "description": "Attribute"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/message/set/{msgNum}/{attr}/{value}",
      "method": "protocolMqttClientMessageSet",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Set the agent's message attributes",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show MQTT state"
        },
        {
          "name": "msgNum",
          "schema": "integer",
          "required": true,
          "description": "Message Number"
        },
        {
          "name": "attr",
          "schema": "string",
          "required": true,
          "description": "Attribute"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Value"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/resubscribe/{subNum}",
      "method": "protocolMqttClientResubscribe",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Restart receiving messages from a subcription of the agent",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to change MQTT state"
        },
        {
          "name": "subNum",
          "schema": "integer",
          "required": true,
          "description": "Subscription Number"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/runtime/abort",
      "method": "protocolMqttClientRuntimeAbort",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Abort agent's MQTT TCP session without sending DISCONNECT command",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set MQTT behavior"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/runtime/connect",
      "method": "protocolMqttClientRuntimeConnect",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Start agent's MQTT TCP session",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set MQTT behavior"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/runtime/disconnect",
      "method": "protocolMqttClientRuntimeDisconnect",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Disconnect agent's MQTT TCP session by sending DISCONNECT command",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set MQTT behavior"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/broker/{brokerAddr}",
      "method": "protocolMqttClientSetBroker",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Set the agent's MQTT TCP connection target broker",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set MQTT config"
        },
        {
          "name": "brokerAddr",
          "schema": "string",
          "required": true,
          "description": "Broker address"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/cleansession/{cleanOrNot}",
      "method": "protocolMqttClientSetCleansession",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Set the agent's MQTT session",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set MQTT config"
        },
        {
          "name": "cleanOrNot",
          "schema": "integer",
          "required": true,
          "description": "Clean session"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/clientid/{clientID}",
      "method": "protocolMqttClientSetClientid",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Set the agent's MQTT client ID",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set MQTT config"
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": true,
          "description": "Client ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/keepalive/{aliveTime}",
      "method": "protocolMqttClientSetKeepalive",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Set the agent's MQTT TCP keepalive",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set MQTT config"
        },
        {
          "name": "aliveTime",
          "schema": "integer",
          "required": true,
          "description": "period to send keepalive messages"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/on_disconnect/{action}",
      "method": "protocolMqttClientSetOnDisconnect",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Set the agent's MQTT disconnection action",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set MQTT config"
        },
        {
          "name": "action",
          "schema": "string",
          "required": true,
          "description": "Action to take"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/password/{password}",
      "method": "protocolMqttClientSetPassword",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Set the agent's MQTT client password",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set MQTT config"
        },
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": "Password"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/port/{port}",
      "method": "protocolMqttClientSetPort",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Set the agent's MQTT TCP connection target port",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set MQTT config"
        },
        {
          "name": "port",
          "schema": "string",
          "required": true,
          "description": "TCP port"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/username/{username}",
      "method": "protocolMqttClientSetUsername",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Set the agent's MQTT client username",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set MQTT config"
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "User name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willmsg/{msg}",
      "method": "protocolMqttClientSetWillmsg",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Set the agent's MQTT client's will",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set MQTT config"
        },
        {
          "name": "msg",
          "schema": "string",
          "required": true,
          "description": "Will message"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willqos/{qos}",
      "method": "protocolMqttClientSetWillqos",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Set the agent's MQTT will message's QOS field",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set MQTT config"
        },
        {
          "name": "qos",
          "schema": "string",
          "required": true,
          "description": "Quality of service field"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willretain/{retain}",
      "method": "protocolMqttClientSetWillretain",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Set the agent's MQTT retained will",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set MQTT config"
        },
        {
          "name": "retain",
          "schema": "string",
          "required": true,
          "description": "Retaining will"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willtopic/{topic}",
      "method": "protocolMqttClientSetWilltopic",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Set the agent's MQTT client will's topic",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set MQTT config"
        },
        {
          "name": "topic",
          "schema": "string",
          "required": true,
          "description": "topic"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/subscribe/card",
      "method": "protocolMqttClientSubscribeCard",
      "httpMethod": "get",
      "tag": "MQTT",
      "description": "Show the agent's current subscriptions' cardinality",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show MQTT subscription state"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/subscribe/get/{subNum}/{attr}",
      "method": "protocolMqttClientSubscribeGet",
      "httpMethod": "get",
      "tag": "MQTT",
      "description": "Show the agent's subscription attributes",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show MQTT state"
        },
        {
          "name": "subNum",
          "schema": "integer",
          "required": true,
          "description": "Subscribe Number"
        },
        {
          "name": "attr",
          "schema": "string",
          "required": true,
          "description": "Attribute"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/subscribe/set/{subNum}/{attr}/{value}",
      "method": "protocolMqttClientSubscribeSet",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Set the agent's subscribe attributes",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show MQTT state"
        },
        {
          "name": "subNum",
          "schema": "integer",
          "required": true,
          "description": "Subscribe Number"
        },
        {
          "name": "attr",
          "schema": "string",
          "required": true,
          "description": "Attribute"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Value"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/client/unsubscribe/{subNum}",
      "method": "protocolMqttClientUnsubscribe",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Stops receiving messages from a subcription of the agent",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to change MQTT state"
        },
        {
          "name": "subNum",
          "schema": "integer",
          "required": true,
          "description": "Subscription Number"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/get/args",
      "method": "protocolMqttGetArgs",
      "httpMethod": "get",
      "tag": "MQTT",
      "description": "Show the agent's MQTT argument structure",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the MQTT argument structure"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/get/config",
      "method": "protocolMqttGetConfig",
      "httpMethod": "get",
      "tag": "MQTT",
      "description": "Show the agent's MQTT configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the MQTT configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/get/statistics",
      "method": "protocolMqttGetStatistics",
      "httpMethod": "get",
      "tag": "MQTT",
      "description": "Show the agent's MQTT statistics",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show MQTT statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/get/trace",
      "method": "protocolMqttGetTrace",
      "httpMethod": "get",
      "tag": "MQTT",
      "description": "Show the agent's MQTT traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show whether MQTT tracing is enabled"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/set/config/{argument}/{value}",
      "method": "protocolMqttSetConfig",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Set the agent's MQTT configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the MQTT configuration"
        },
        {
          "name": "argument",
          "schema": "string",
          "required": true,
          "description": "Parameter to set the MQTT configuration"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Value to set the MQTT configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/mqtt/set/trace/{enableOrNot}",
      "method": "protocolMqttSetTrace",
      "httpMethod": "put",
      "tag": "MQTT",
      "description": "Set the agent's MQTT traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the MQTT tracing"
        },
        {
          "name": "enableOrNot",
          "schema": "string",
          "required": true,
          "description": "Value to set the MQTT tracing"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/netflow/flow/change/dfs_interval/{interval}",
      "method": "protocolNetflowChangeDfs",
      "httpMethod": "put",
      "tag": "NETFLOW",
      "description": "Change NETFLOW data export interval",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the NETFLOW"
        },
        {
          "name": "interval",
          "schema": "integer",
          "required": true,
          "description": "NETFLOW export interval"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/netflow/flow/change/tfs_interval/{interval}",
      "method": "protocolNetflowChangeTfs",
      "httpMethod": "put",
      "tag": "NETFLOW",
      "description": "Change NETFLOW template export interval",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the NETFLOW"
        },
        {
          "name": "interval",
          "schema": "integer",
          "required": true,
          "description": "NETFLOW export interval"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/netflow/flow/change/{flowset-uid}/{field-num}/{attr}/{value}",
      "method": "protocolNetflowChangeAttr",
      "httpMethod": "put",
      "tag": "NETFLOW",
      "description": "Change NETFLOW export attributes",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the NETFLOW"
        },
        {
          "name": "flowsetUid",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "fieldNum",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "attr",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/netflow/flow/list",
      "method": "protocolNetflowList",
      "httpMethod": "get",
      "tag": "NETFLOW",
      "description": "Show list of NETFLOW exports",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show NETFLOW statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/netflow/get/args",
      "method": "protocolNetflowGetArgs",
      "httpMethod": "get",
      "tag": "NETFLOW",
      "description": "Show the agent's NETFLOW argument structure",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the NETFLOW argument structure"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/netflow/get/config",
      "method": "protocolNetflowGetConfig",
      "httpMethod": "get",
      "tag": "NETFLOW",
      "description": "Show the agent's NETFLOW configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the NETFLOW configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/netflow/get/statistics",
      "method": "protocolNetflowGetStatistics",
      "httpMethod": "get",
      "tag": "NETFLOW",
      "description": "Show the agent's NETFLOW statistics",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show NETFLOW statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/netflow/get/trace",
      "method": "protocolNetflowGetTrace",
      "httpMethod": "get",
      "tag": "NETFLOW",
      "description": "Show the agent's NETFLOW traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show whether NETFLOW tracing is enabled"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/netflow/halt",
      "method": "protocolNetflowHalt",
      "httpMethod": "put",
      "tag": "NETFLOW",
      "description": "Halt NETFLOW traffic",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the NETFLOW"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/netflow/reload",
      "method": "protocolNetflowReload",
      "httpMethod": "put",
      "tag": "NETFLOW",
      "description": "Reload NETFLOW configuration before resuming traffic",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the NETFLOW"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/netflow/resume",
      "method": "protocolNetflowResume",
      "httpMethod": "put",
      "tag": "NETFLOW",
      "description": "Resuming traffic",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the NETFLOW"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/netflow/set/collector/{collectorIP}",
      "method": "protocolNetflowSetCollector",
      "httpMethod": "put",
      "tag": "NETFLOW",
      "description": "Swap NETFLOW collector",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the NETFLOW"
        },
        {
          "name": "collectorIp",
          "schema": "string",
          "required": true,
          "description": "file name to load config"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/netflow/set/config/{argument}/{value}",
      "method": "protocolNetflowSetConfig",
      "httpMethod": "put",
      "tag": "NETFLOW",
      "description": "Set the agent's NETFLOW configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the NETFLOW configuration"
        },
        {
          "name": "argument",
          "schema": "string",
          "required": true,
          "description": "Parameter to set the NETFLOW configuration"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Value to set the NETFLOW configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/netflow/set/filename/{fileName}",
      "method": "protocolNetflowSetFileName",
      "httpMethod": "put",
      "tag": "NETFLOW",
      "description": "Swap NETFLOW configuration file",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the NETFLOW"
        },
        {
          "name": "fileName",
          "schema": "string",
          "required": true,
          "description": "file name to load config"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/netflow/set/trace/{enableOrNot}",
      "method": "protocolNetflowSetTrace",
      "httpMethod": "put",
      "tag": "NETFLOW",
      "description": "Set the agent's NETFLOW traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the NETFLOW tracing"
        },
        {
          "name": "enableOrNot",
          "schema": "string",
          "required": true,
          "description": "Value to set the NETFLOW tracing"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/proxy/get/args",
      "method": "protocolProxyGetArgs",
      "httpMethod": "get",
      "tag": "PROXY",
      "description": "Show the agent's PROXY argument structure",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the PROXY argument structure"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/proxy/get/config",
      "method": "protocolProxyGetConfig",
      "httpMethod": "get",
      "tag": "PROXY",
      "description": "Show the agent's PROXY configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the PROXY configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/proxy/get/statistics",
      "method": "protocolProxyGetStatistics",
      "httpMethod": "get",
      "tag": "PROXY",
      "description": "Show the agent's PROXY statistics",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show PROXY statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/proxy/get/trace",
      "method": "protocolProxyGetTrace",
      "httpMethod": "get",
      "tag": "PROXY",
      "description": "Show the agent's PROXY traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show whether PROXY tracing is enabled"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/proxy/port/add/{port}/{target}/{targetPort}",
      "method": "protocolProxyPortAdd",
      "httpMethod": "post",
      "tag": "PROXY",
      "description": "Add individual proxy target on the agent and the simulator host",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate PROXY target"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "target",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "targetPort",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/proxy/port/isStarted/{port}",
      "method": "protocolProxyPortIsstarted",
      "httpMethod": "get",
      "tag": "PROXY",
      "description": "Check individual target",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate PROXY target"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/proxy/port/list",
      "method": "protocolProxyPortList",
      "httpMethod": "get",
      "tag": "PROXY",
      "description": "List all proxy targets",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate PROXY target"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/proxy/port/remove/{port}",
      "method": "protocolProxyPortRemove",
      "httpMethod": "delete",
      "tag": "PROXY",
      "description": "Remove individual proxy target on the agent and the simulator host",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate PROXY target"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/proxy/port/start/{port}",
      "method": "protocolProxyPortStart",
      "httpMethod": "put",
      "tag": "PROXY",
      "description": "Start additional target",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate PROXY target"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/proxy/port/stop/{port}",
      "method": "protocolProxyPortStop",
      "httpMethod": "put",
      "tag": "PROXY",
      "description": "Stop additional target",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate PROXY target"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/proxy/set/config/{argument}/{value}",
      "method": "protocolProxySetConfig",
      "httpMethod": "put",
      "tag": "PROXY",
      "description": "Set the agent's PROXY configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the PROXY configuration"
        },
        {
          "name": "argument",
          "schema": "string",
          "required": true,
          "description": "Parameter to set the PROXY configuration"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Value to set the PROXY configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/proxy/set/trace/{enableOrNot}",
      "method": "protocolProxySetTrace",
      "httpMethod": "put",
      "tag": "PROXY",
      "description": "Set the agent's PROXY traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the PROXY tracing"
        },
        {
          "name": "enableOrNot",
          "schema": "string",
          "required": true,
          "description": "Value to set the PROXY tracing"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/sflow/get/args",
      "method": "protocolSflowGetArgs",
      "httpMethod": "get",
      "tag": "SFLOW",
      "description": "Show the agent's SFLOW argument structure",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SFLOW argument structure"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/sflow/get/config",
      "method": "protocolSflowGetConfig",
      "httpMethod": "get",
      "tag": "SFLOW",
      "description": "Show the agent's SFLOW configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SFLOW configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/sflow/get/statistics",
      "method": "protocolSflowGetStatistics",
      "httpMethod": "get",
      "tag": "SFLOW",
      "description": "Show the agent's SFLOW statistics",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show SFLOW statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/sflow/get/trace",
      "method": "protocolSflowGetTrace",
      "httpMethod": "get",
      "tag": "SFLOW",
      "description": "Show the agent's SFLOW traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show whether SFLOW tracing is enabled"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/sflow/halt",
      "method": "protocolSflowHalt",
      "httpMethod": "put",
      "tag": "SFLOW",
      "description": "Halt SFLOW traffic",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the SFLOW"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/sflow/reload",
      "method": "protocolSflowReload",
      "httpMethod": "put",
      "tag": "SFLOW",
      "description": "Reload SFLOW configuration before resuming traffic",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the SFLOW"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/sflow/resume",
      "method": "protocolSflowResume",
      "httpMethod": "put",
      "tag": "SFLOW",
      "description": "Resuming traffic",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the SFLOW"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/sflow/set/config/{argument}/{value}",
      "method": "protocolSflowSetConfig",
      "httpMethod": "put",
      "tag": "SFLOW",
      "description": "Set the agent's SFLOW configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the SFLOW configuration"
        },
        {
          "name": "argument",
          "schema": "string",
          "required": true,
          "description": "Parameter to set the SFLOW configuration"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Value to set the SFLOW configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/sflow/set/trace/{enableOrNot}",
      "method": "protocolSflowSetTrace",
      "httpMethod": "put",
      "tag": "SFLOW",
      "description": "Set the agent's SFLOW traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the SFLOW tracing"
        },
        {
          "name": "enableOrNot",
          "schema": "string",
          "required": true,
          "description": "Value to set the SFLOW tracing"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmptcp/get/args",
      "method": "protocolSnmptcpGetArgs",
      "httpMethod": "get",
      "tag": "SNMPTCP",
      "description": "Show the agent's SNMPTCP argument structure",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SNMPTCP argument structure"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmptcp/get/config",
      "method": "protocolSnmptcpGetConfig",
      "httpMethod": "get",
      "tag": "SNMPTCP",
      "description": "Show the agent's SNMPTCP configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SNMPTCP configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmptcp/get/statistics",
      "method": "protocolSnmptcpGetStatistics",
      "httpMethod": "get",
      "tag": "SNMPTCP",
      "description": "Show the agent's SNMPTCP statistics",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show SNMPTCP statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmptcp/get/trace",
      "method": "protocolSnmptcpGetTrace",
      "httpMethod": "get",
      "tag": "SNMPTCP",
      "description": "Show the agent's SNMPTCP traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show whether SNMPTCP tracing is enabled"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/disable/{ipaddress}/{port}",
      "method": "protocolSnmptcpIpaliasDisable",
      "httpMethod": "put",
      "tag": "SNMPTCP",
      "description": "Disable individual IP aliases on the agent and the simulator host",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate SNMPTCP IP alias"
        },
        {
          "name": "ipaddress",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/enable/{ipaddress}/{port}",
      "method": "protocolSnmptcpIpaliasEnable",
      "httpMethod": "put",
      "tag": "SNMPTCP",
      "description": "Enable individual IP aliases on the agent and the simulator host",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate SNMPTCP IP alias"
        },
        {
          "name": "ipaddress",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/isenabled/{ipaddress}/{port}",
      "method": "protocolSnmptcpIpaliasIsenabled",
      "httpMethod": "get",
      "tag": "SNMPTCP",
      "description": "Check individual IP aliases on the agent and the simulator host",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate SNMPTCP IP alias"
        },
        {
          "name": "ipaddress",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/list",
      "method": "protocolSnmptcpIpaliasList",
      "httpMethod": "get",
      "tag": "SNMPTCP",
      "description": "List all IP aliases on the agent and the simulator host",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate SNMPTCP IP alias"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmptcp/set/config/{argument}/{value}",
      "method": "protocolSnmptcpSetConfig",
      "httpMethod": "put",
      "tag": "SNMPTCP",
      "description": "Set the agent's SNMPTCP configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the SNMPTCP configuration"
        },
        {
          "name": "argument",
          "schema": "string",
          "required": true,
          "description": "Parameter to set the SNMPTCP configuration"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Value to set the SNMPTCP configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmptcp/set/trace/{enableOrNot}",
      "method": "protocolSnmptcpSetTrace",
      "httpMethod": "put",
      "tag": "SNMPTCP",
      "description": "Set the agent's SNMPTCP traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the SNMPTCP tracing"
        },
        {
          "name": "enableOrNot",
          "schema": "string",
          "required": true,
          "description": "Value to set the SNMPTCP tracing"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/add/{groupName}/{prefix}/{securityModel}/{securityLevel}/{contextMatch}/{readView}/{writeView}/{notifyView}",
      "method": "protocolSnmpv3AccessAdd",
      "httpMethod": "post",
      "tag": "SNMPv3",
      "description": "Adds a new access entry with the specified parameters.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to add the SNMPv3 access"
        },
        {
          "name": "groupName",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 access name"
        },
        {
          "name": "prefix",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 prefix"
        },
        {
          "name": "securityModel",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 access security model"
        },
        {
          "name": "securityLevel",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 access security level"
        },
        {
          "name": "contextMatch",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 access context match"
        },
        {
          "name": "readView",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 access read view"
        },
        {
          "name": "writeView",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 access write view"
        },
        {
          "name": "notifyView",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 access notify view"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/clear",
      "method": "protocolSnmpv3AccessClear",
      "httpMethod": "delete",
      "tag": "SNMPv3",
      "description": "Clears all access entries.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to add the SNMPv3 access"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/del/{accessName}",
      "method": "protocolSnmpv3AccessDel",
      "httpMethod": "delete",
      "tag": "SNMPv3",
      "description": "Deletes the specified access entry.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to add the SNMPv3 access"
        },
        {
          "name": "accessName",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 access name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/list",
      "method": "protocolSnmpv3AccessList",
      "httpMethod": "get",
      "tag": "SNMPv3",
      "description": "Returns the current acccess entries as an array of strings.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SNMPv3 configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/config",
      "method": "protocolSnmpv3GetConfig",
      "httpMethod": "get",
      "tag": "SNMPv3",
      "description": "Returns the SNMPv3 configuration.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SNMPv3 configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/context_engineid",
      "method": "protocolSnmpv3GetContextEngineid",
      "httpMethod": "get",
      "tag": "SNMPv3",
      "description": "Retrieves the contextEngineID for the agent instance.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SNMPv3 engine"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/engineboots",
      "method": "protocolSnmpv3GetEngineboots",
      "httpMethod": "get",
      "tag": "SNMPv3",
      "description": "Retrieves the number of times the agent has been restarted.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SNMPv3 engine"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/engineid",
      "method": "protocolSnmpv3GetEngineid",
      "httpMethod": "get",
      "tag": "SNMPv3",
      "description": "For started agents, retrieves the current engineID in use by the snmpv3 module.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SNMPv3 configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/enginetime",
      "method": "protocolSnmpv3GetEnginetime",
      "httpMethod": "get",
      "tag": "SNMPv3",
      "description": "Retrieves the time in seconds for which the agent has been running.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SNMPv3 engine"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/add/{groupName}/{securityModel}/{securityName}",
      "method": "protocolSnmpv3GroupAdd",
      "httpMethod": "post",
      "tag": "SNMPv3",
      "description": "Adds a new group entry with the specified parameters.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to add the SNMPv3 group"
        },
        {
          "name": "groupName",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 group name"
        },
        {
          "name": "securityModel",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 group security model"
        },
        {
          "name": "securityName",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 group security name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/clear",
      "method": "protocolSnmpv3GroupClear",
      "httpMethod": "delete",
      "tag": "SNMPv3",
      "description": "Clears all group entries.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to add the SNMPv3 group"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/del/{groupName}",
      "method": "protocolSnmpv3GroupDel",
      "httpMethod": "delete",
      "tag": "SNMPv3",
      "description": "Deletes the specified group entry.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to add the SNMPv3 group"
        },
        {
          "name": "groupName",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 group name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/list",
      "method": "protocolSnmpv3GroupList",
      "httpMethod": "get",
      "tag": "SNMPv3",
      "description": "Returns the current group entries as an array of strings.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SNMPv3 configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/set/config/{parameter}/{value}",
      "method": "protocolSnmpv3SetConfig",
      "httpMethod": "put",
      "tag": "SNMPv3",
      "description": "Changes the SNMPv3 configuration.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SNMPv3 configuration"
        },
        {
          "name": "parameter",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 configuration parameter"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 parameter value"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/add/{userName}/{securityName}/{authProtocol}/{authKey}/{privProtocol}/{privKey}",
      "method": "protocolSnmpv3UserAdd",
      "httpMethod": "post",
      "tag": "SNMPv3",
      "description": "Adds a new user entry with the specified parameters.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to add the SNMPv3 user"
        },
        {
          "name": "userName",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 user name"
        },
        {
          "name": "securityName",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 user security name"
        },
        {
          "name": "authProtocol",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 user authentication protocol"
        },
        {
          "name": "authKey",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 user authentication key"
        },
        {
          "name": "privProtocol",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 user privacy encryption protocol"
        },
        {
          "name": "privKey",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 user privacy encryption key"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/clear",
      "method": "protocolSnmpv3UserClear",
      "httpMethod": "delete",
      "tag": "SNMPv3",
      "description": "Clears all user entries.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to add the SNMPv3 user"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/del/{userName}",
      "method": "protocolSnmpv3UserDel",
      "httpMethod": "delete",
      "tag": "SNMPv3",
      "description": "Deletes the specified user entry.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to add the SNMPv3 user"
        },
        {
          "name": "userName",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 user name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/list",
      "method": "protocolSnmpv3UserList",
      "httpMethod": "get",
      "tag": "SNMPv3",
      "description": "Returns the current user entries as a Tcl list.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SNMPv3 configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/usm/save",
      "method": "protocolSnmpv3UsmSave",
      "httpMethod": "put",
      "tag": "SNMPv3",
      "description": "Saves current user settings in the currently loaded USM config file.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SNMPv3 configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/usm/saveas/{filename}",
      "method": "protocolSnmpv3UsmSaveas",
      "httpMethod": "put",
      "tag": "SNMPv3",
      "description": "Saves current user settings in the specified USM config file.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SNMPv3 configuration"
        },
        {
          "name": "filename",
          "schema": "string",
          "required": true,
          "description": "Filename to save"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/vacm/save",
      "method": "protocolSnmpv3VacmSave",
      "httpMethod": "put",
      "tag": "SNMPv3",
      "description": "Saves current group, access, view settings in the currently loaded VACM config file.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SNMPv3 configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/vacm/saveas/{filename}",
      "method": "protocolSnmpv3VacmSaveas",
      "httpMethod": "put",
      "tag": "SNMPv3",
      "description": "Saves current group, access, view settings in the specified VACM config file.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SNMPv3 configuration"
        },
        {
          "name": "filename",
          "schema": "string",
          "required": true,
          "description": "Filename to save"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/add/{viewName}/{viewType}/{subtree}/{mask}",
      "method": "protocolSnmpv3ViewAdd",
      "httpMethod": "post",
      "tag": "SNMPv3",
      "description": "Adds a new view entry with the specified parameters.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to add the SNMPv3 view"
        },
        {
          "name": "viewName",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 view name"
        },
        {
          "name": "viewType",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 view type"
        },
        {
          "name": "subtree",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 view subtree"
        },
        {
          "name": "mask",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 view mask"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/clear",
      "method": "protocolSnmpv3ViewClear",
      "httpMethod": "delete",
      "tag": "SNMPv3",
      "description": "Clears all view entries.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to add the SNMPv3 view"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/del/{viewName}",
      "method": "protocolSnmpv3ViewDel",
      "httpMethod": "delete",
      "tag": "SNMPv3",
      "description": "Deletes the specified view entry.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to add the SNMPv3 view"
        },
        {
          "name": "viewName",
          "schema": "string",
          "required": true,
          "description": "SNMPv3 view name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/list",
      "method": "protocolSnmpv3ViewList",
      "httpMethod": "get",
      "tag": "SNMPv3",
      "description": "Returns the current view entries as an array of strings.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SNMPv3 configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/ssh/get/args",
      "method": "protocolSshGetArgs",
      "httpMethod": "get",
      "tag": "SSH",
      "description": "Show the agent's SSH argument structure",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SSH argument structure"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/ssh/get/config",
      "method": "protocolSshGetConfig",
      "httpMethod": "get",
      "tag": "SSH",
      "description": "Show the agent's SSH configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SSH configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/ssh/get/statistics",
      "method": "protocolSshGetStatistics",
      "httpMethod": "get",
      "tag": "SSH",
      "description": "Show the agent's SSH statistics",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show SSH statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/ssh/get/trace",
      "method": "protocolSshGetTrace",
      "httpMethod": "get",
      "tag": "SSH",
      "description": "Show the agent's SSH traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show whether SSH tracing is enabled"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/disable/{ipaddress}/{port}",
      "method": "protocolSshIpaliasDisable",
      "httpMethod": "put",
      "tag": "SSH",
      "description": "Disable individual IP aliases on the agent and the simulator host",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate SSH IP alias"
        },
        {
          "name": "ipaddress",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/enable/{ipaddress}/{port}",
      "method": "protocolSshIpaliasEnable",
      "httpMethod": "put",
      "tag": "SSH",
      "description": "Enable individual IP aliases on the agent and the simulator host",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate SSH IP alias"
        },
        {
          "name": "ipaddress",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/isenabled/{ipaddress}/{port}",
      "method": "protocolSshIpaliasIsenabled",
      "httpMethod": "get",
      "tag": "SSH",
      "description": "Check individual IP aliases on the agent and the simulator host",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate SSH IP alias"
        },
        {
          "name": "ipaddress",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/list",
      "method": "protocolSshIpaliasList",
      "httpMethod": "get",
      "tag": "SSH",
      "description": "List all IP aliases on the agent and the simulator host",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate SSH IP alias"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/ssh/set/config/{argument}/{value}",
      "method": "protocolSshSetConfig",
      "httpMethod": "put",
      "tag": "SSH",
      "description": "Set the agent's SSH configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the SSH configuration"
        },
        {
          "name": "argument",
          "schema": "string",
          "required": true,
          "description": "Parameter to set the SSH configuration"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Value to set the SSH configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/ssh/set/trace/{enableOrNot}",
      "method": "protocolSshSetTrace",
      "httpMethod": "put",
      "tag": "SSH",
      "description": "Set the agent's SSH traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the SSH tracing"
        },
        {
          "name": "enableOrNot",
          "schema": "string",
          "required": true,
          "description": "Value to set the SSH tracing"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/syslog/get/args",
      "method": "protocolSyslogGetArgs",
      "httpMethod": "get",
      "tag": "SYSLOG",
      "description": "Show the agent's SYSLOG argument structure",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SYSLOG argument structure"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/syslog/get/config",
      "method": "protocolSyslogGetConfig",
      "httpMethod": "get",
      "tag": "SYSLOG",
      "description": "Show the agent's SYSLOG configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the SYSLOG configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/syslog/get/statistics",
      "method": "protocolSyslogGetStatistics",
      "httpMethod": "get",
      "tag": "SYSLOG",
      "description": "Show the agent's SYSLOG statistics",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show SYSLOG statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/syslog/get/trace",
      "method": "protocolSyslogGetTrace",
      "httpMethod": "get",
      "tag": "SYSLOG",
      "description": "Show the agent's SYSLOG traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show whether SYSLOG tracing is enabled"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/syslog/get/{attr}",
      "method": "protocolSyslogGetAttr",
      "httpMethod": "get",
      "tag": "SYSLOG",
      "description": "Show the outgoing message's attributes",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the SYSLOG tracing"
        },
        {
          "name": "attr",
          "schema": "string",
          "required": true,
          "description": "Attribute"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/syslog/send/{pri}",
      "method": "protocolSyslogSend",
      "httpMethod": "post",
      "tag": "SYSLOG",
      "description": "Set the agent's SYSLOG traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the SYSLOG tracing"
        },
        {
          "name": "pri",
          "schema": "integer",
          "required": true,
          "description": "Message Priority"
        },
        {
          "name": "hostname",
          "schema": "string",
          "description": ""
        },
        {
          "name": "message",
          "schema": "string",
          "description": ""
        },
        {
          "name": "separator",
          "schema": "string",
          "description": ""
        },
        {
          "name": "sequence",
          "schema": "string",
          "description": ""
        },
        {
          "name": "timestamp",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/syslog/set/config/{argument}/{value}",
      "method": "protocolSyslogSetConfig",
      "httpMethod": "put",
      "tag": "SYSLOG",
      "description": "Set the agent's SYSLOG configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the SYSLOG configuration"
        },
        {
          "name": "argument",
          "schema": "string",
          "required": true,
          "description": "Parameter to set the SYSLOG configuration"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Value to set the SYSLOG configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/syslog/set/trace/{enableOrNot}",
      "method": "protocolSyslogSetTrace",
      "httpMethod": "put",
      "tag": "SYSLOG",
      "description": "Set the agent's SYSLOG traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the SYSLOG tracing"
        },
        {
          "name": "enableOrNot",
          "schema": "string",
          "required": true,
          "description": "Value to set the SYSLOG tracing"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/syslog/set/{attr}/{value}",
      "method": "protocolSyslogSetAttr",
      "httpMethod": "put",
      "tag": "SYSLOG",
      "description": "Set the outgoing message's attributes",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the SYSLOG tracing"
        },
        {
          "name": "attr",
          "schema": "string",
          "required": true,
          "description": "Attribute"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/connection/logon/{connectionID}/{user}/{password}",
      "method": "protocolTelnetConnectionLogon",
      "httpMethod": "put",
      "tag": "TELNET",
      "description": "Changes the connection's current logon.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate TELNET connection"
        },
        {
          "name": "connectionId",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/connection/request/{connectionID}/{command}",
      "method": "protocolTelnetConnectionRequest",
      "httpMethod": "put",
      "tag": "TELNET",
      "description": "Executes the command asynchronously .",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate TELNET connection"
        },
        {
          "name": "connectionId",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "command",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/connection/signal/{connectionID}/{signalName}",
      "method": "protocolTelnetConnectionSignal",
      "httpMethod": "put",
      "tag": "TELNET",
      "description": "Triggers the asynchronous signal event with the specified signal name",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate TELNET connection"
        },
        {
          "name": "connectionId",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "signalName",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/get/args",
      "method": "protocolTelnetGetArgs",
      "httpMethod": "get",
      "tag": "TELNET",
      "description": "Show the agent's TELNET argument structure",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the TELNET argument structure"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/get/config",
      "method": "protocolTelnetGetConfig",
      "httpMethod": "get",
      "tag": "TELNET",
      "description": "Show the agent's TELNET configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the TELNET configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/get/statistics",
      "method": "protocolTelnetGetStatistics",
      "httpMethod": "get",
      "tag": "TELNET",
      "description": "Show the agent's TELNET statistics",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show TELNET statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/get/trace",
      "method": "protocolTelnetGetTrace",
      "httpMethod": "get",
      "tag": "TELNET",
      "description": "Show the agent's TELNET traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show whether TELNET tracing is enabled"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/disable/{ipaddress}/{port}",
      "method": "protocolTelnetIpaliasDisable",
      "httpMethod": "put",
      "tag": "TELNET",
      "description": "Disable individual IP aliases on the agent and the simulator host",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate TELNET IP alias"
        },
        {
          "name": "ipaddress",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/enable/{ipaddress}/{port}",
      "method": "protocolTelnetIpaliasEnable",
      "httpMethod": "put",
      "tag": "TELNET",
      "description": "Enable individual IP aliases on the agent and the simulator host",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate TELNET IP alias"
        },
        {
          "name": "ipaddress",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/isenabled/{ipaddress}/{port}",
      "method": "protocolTelnetIpaliasIsenabled",
      "httpMethod": "get",
      "tag": "TELNET",
      "description": "Check individual IP aliases on the agent and the simulator host",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate TELNET IP alias"
        },
        {
          "name": "ipaddress",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/list",
      "method": "protocolTelnetIpaliasList",
      "httpMethod": "get",
      "tag": "TELNET",
      "description": "List all IP aliases on the agent and the simulator host",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to manipulate TELNET IP alias"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/connections",
      "method": "protocolTelnetServerGetConnections",
      "httpMethod": "get",
      "tag": "TELNET",
      "description": "Show the agent's TELNET connections",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show TELNET configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/keymap",
      "method": "protocolTelnetServerGetKeymap",
      "httpMethod": "get",
      "tag": "TELNET",
      "description": "Show the agent's TELNET keymap file name",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show TELNET statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/rulesdb",
      "method": "protocolTelnetServerGetRulesdb",
      "httpMethod": "get",
      "tag": "TELNET",
      "description": "Show the agent's TELNET rules db file name",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show TELNET statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/state",
      "method": "protocolTelnetServerGetState",
      "httpMethod": "get",
      "tag": "TELNET",
      "description": "Show the agent's TELNET server state",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show TELNET statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/userdb",
      "method": "protocolTelnetServerGetUserdb",
      "httpMethod": "get",
      "tag": "TELNET",
      "description": "Show the agent's TELNET user db file name",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show TELNET statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/users",
      "method": "protocolTelnetServerGetUsers",
      "httpMethod": "get",
      "tag": "TELNET",
      "description": "Show the agent's TELNET users",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show TELNET configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/set/config/{argument}/{value}",
      "method": "protocolTelnetSetConfig",
      "httpMethod": "put",
      "tag": "TELNET",
      "description": "Set the agent's TELNET configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the TELNET configuration"
        },
        {
          "name": "argument",
          "schema": "string",
          "required": true,
          "description": "Parameter to set the TELNET configuration"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Value to set the TELNET configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/telnet/set/trace/{enableOrNot}",
      "method": "protocolTelnetSetTrace",
      "httpMethod": "put",
      "tag": "TELNET",
      "description": "Set the agent's TELNET traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the TELNET tracing"
        },
        {
          "name": "enableOrNot",
          "schema": "string",
          "required": true,
          "description": "Value to set the TELNET tracing"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tftp/get/args",
      "method": "protocolTftpGetArgs",
      "httpMethod": "get",
      "tag": "TFTP",
      "description": "Show the agent's TFTP argument structure",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the TFTP argument structure"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tftp/get/config",
      "method": "protocolTftpGetConfig",
      "httpMethod": "get",
      "tag": "TFTP",
      "description": "Show the agent's TFTP configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the TFTP configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tftp/get/statistics",
      "method": "protocolTftpGetStatistics",
      "httpMethod": "get",
      "tag": "TFTP",
      "description": "Show the agent's TFTP statistics",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show TFTP statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tftp/get/trace",
      "method": "protocolTftpGetTrace",
      "httpMethod": "get",
      "tag": "TFTP",
      "description": "Show the agent's TFTP traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show whether TFTP tracing is enabled"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tftp/session/read/server/{srcfile}",
      "method": "protocolTftpSessionRead",
      "httpMethod": "post",
      "tag": "TFTP",
      "description": "Create a read session to download srcfile from server",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show TFTP statistics"
        },
        {
          "name": "srcfile",
          "schema": "string",
          "required": true,
          "description": "File name to retrieve from server"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tftp/session/write/server/{srcfile}",
      "method": "protocolTftpSessionWrite",
      "httpMethod": "post",
      "tag": "TFTP",
      "description": "Create a read session to upload srcfile to server",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show TFTP statistics"
        },
        {
          "name": "srcfile",
          "schema": "string",
          "required": true,
          "description": "File name to upload to server"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tftp/set/config/{argument}/{value}",
      "method": "protocolTftpSetConfig",
      "httpMethod": "put",
      "tag": "TFTP",
      "description": "Set the agent's TFTP configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the TFTP configuration"
        },
        {
          "name": "argument",
          "schema": "string",
          "required": true,
          "description": "Parameter to set the TFTP configuration"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Value to set the TFTP configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tftp/set/trace/{enableOrNot}",
      "method": "protocolTftpSetTrace",
      "httpMethod": "put",
      "tag": "TFTP",
      "description": "Set the agent's TFTP traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the TFTP tracing"
        },
        {
          "name": "enableOrNot",
          "schema": "string",
          "required": true,
          "description": "Value to set the TFTP tracing"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/get/{parameter}",
      "method": "protocolTftpSessionGetParameter",
      "httpMethod": "get",
      "tag": "TFTP",
      "description": "Show a parameter of a TFTP sesssion",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show TFTP parameter"
        },
        {
          "name": "sessionId",
          "schema": "string",
          "required": true,
          "description": "SessionID"
        },
        {
          "name": "parameter",
          "schema": "string",
          "required": true,
          "description": "Parameter to show"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/set/{parameter}/{value}",
      "method": "protocolTftpSessionSetParameter",
      "httpMethod": "put",
      "tag": "TFTP",
      "description": "Set a parameter of a TFTP sesssion",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set TFTP parameter"
        },
        {
          "name": "sessionId",
          "schema": "string",
          "required": true,
          "description": "SessionID"
        },
        {
          "name": "parameter",
          "schema": "string",
          "required": true,
          "description": "Parameter to set"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Value to set"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/start",
      "method": "protocolTftpSessionStart",
      "httpMethod": "put",
      "tag": "TFTP",
      "description": "Start a TFTP sesssion",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to start TFTP transaction"
        },
        {
          "name": "sessionId",
          "schema": "string",
          "required": true,
          "description": "SessionID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/status",
      "method": "protocolTftpSessionStatus",
      "httpMethod": "get",
      "tag": "TFTP",
      "description": "Check a TFTP sesssion's status",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show TFTP transaction"
        },
        {
          "name": "sessionId",
          "schema": "string",
          "required": true,
          "description": "SessionID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/stop",
      "method": "protocolTftpSessionStop",
      "httpMethod": "put",
      "tag": "TFTP",
      "description": "Stop a TFTP sesssion",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to stop TFTP transaction"
        },
        {
          "name": "sessionId",
          "schema": "string",
          "required": true,
          "description": "SessionID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tod/get/args",
      "method": "protocolTodGetArgs",
      "httpMethod": "get",
      "tag": "TOD",
      "description": "Show the agent's TOD argument structure",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the TOD argument structure"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tod/get/config",
      "method": "protocolTodGetConfig",
      "httpMethod": "get",
      "tag": "TOD",
      "description": "Show the agent's TOD configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the TOD configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tod/get/statistics",
      "method": "protocolTodGetStatistics",
      "httpMethod": "get",
      "tag": "TOD",
      "description": "Show the agent's TOD statistics",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show TOD statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tod/get/trace",
      "method": "protocolTodGetTrace",
      "httpMethod": "get",
      "tag": "TOD",
      "description": "Show the agent's TOD traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show whether TOD tracing is enabled"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tod/gettime/server/{serverAddr}/port/{portNum}/script/{scriptName}/timeout/{timeSec}/retries/{numRetries}",
      "method": "protocolTodGettime",
      "httpMethod": "get",
      "tag": "TOD",
      "description": "Retrieve TOD time",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show TOD return"
        },
        {
          "name": "serverAddr",
          "schema": "string",
          "required": true,
          "description": "serverAddr"
        },
        {
          "name": "portNum",
          "schema": "integer",
          "required": true,
          "description": "portNum"
        },
        {
          "name": "scriptName",
          "schema": "string",
          "required": true,
          "description": "scriptName"
        },
        {
          "name": "timeSec",
          "schema": "integer",
          "required": true,
          "description": "timeSec"
        },
        {
          "name": "numRetries",
          "schema": "integer",
          "required": true,
          "description": "numRetries"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tod/set/config/{argument}/{value}",
      "method": "protocolTodSetConfig",
      "httpMethod": "put",
      "tag": "TOD",
      "description": "Set the agent's TOD configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the TOD configuration"
        },
        {
          "name": "argument",
          "schema": "string",
          "required": true,
          "description": "Parameter to set the TOD configuration"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Value to set the TOD configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/tod/set/trace/{enableOrNot}",
      "method": "protocolTodSetTrace",
      "httpMethod": "put",
      "tag": "TOD",
      "description": "Set the agent's TOD traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the TOD tracing"
        },
        {
          "name": "enableOrNot",
          "schema": "string",
          "required": true,
          "description": "Value to set the TOD tracing"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/web/get/args",
      "method": "protocolWebGetArgs",
      "httpMethod": "get",
      "tag": "WEB",
      "description": "Show the agent's WEB argument structure",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the WEB argument structure"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/web/get/config",
      "method": "protocolWebGetConfig",
      "httpMethod": "get",
      "tag": "WEB",
      "description": "Show the agent's WEB configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the WEB configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/web/get/statistics",
      "method": "protocolWebGetStatistics",
      "httpMethod": "get",
      "tag": "WEB",
      "description": "Show the agent's WEB statistics",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show WEB statistics"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/web/get/trace",
      "method": "protocolWebGetTrace",
      "httpMethod": "get",
      "tag": "WEB",
      "description": "Show the agent's WEB traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show whether WEB tracing is enabled"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/web/port/add/{port}",
      "method": "protocolWebPortAdd",
      "httpMethod": "post",
      "tag": "WEB",
      "description": "Add the agent's WEB port",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to add WEB port"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": "TCP port"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/web/port/exists/{port}",
      "method": "protocolWebPortExists",
      "httpMethod": "get",
      "tag": "WEB",
      "description": "Show the agent's WEB port",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show WEB configuration"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": "TCP port"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/web/port/remove/{port}",
      "method": "protocolWebPortRemove",
      "httpMethod": "delete",
      "tag": "WEB",
      "description": "Remove the agent's WEB port",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to remove WEB port"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": "TCP port"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/web/port/set/{port}/{protocol}/{version}",
      "method": "protocolWebPortSet",
      "httpMethod": "put",
      "tag": "WEB",
      "description": "Set the agent's WEB port attribute",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set WEB port"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": "TCP port"
        },
        {
          "name": "protocol",
          "schema": "string",
          "required": true,
          "description": "Encryption or related protocol"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Encryption or related protocol version"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/web/port/start/{port}",
      "method": "protocolWebPortStart",
      "httpMethod": "put",
      "tag": "WEB",
      "description": "Start the agent's WEB port",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to start WEB port"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": "TCP port"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/web/port/stop/{port}",
      "method": "protocolWebPortStop",
      "httpMethod": "put",
      "tag": "WEB",
      "description": "Stop the agent's WEB port",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to stop WEB port"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": "TCP port"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/web/set/config/{argument}/{value}",
      "method": "protocolWebSetConfig",
      "httpMethod": "put",
      "tag": "WEB",
      "description": "Set the agent's WEB configuration",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the WEB configuration"
        },
        {
          "name": "argument",
          "schema": "string",
          "required": true,
          "description": "Parameter to set the WEB configuration"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Value to set the WEB configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/msg/web/set/trace/{enableOrNot}",
      "method": "protocolWebSetTrace",
      "httpMethod": "put",
      "tag": "WEB",
      "description": "Set the agent's WEB traffic tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the WEB tracing"
        },
        {
          "name": "enableOrNot",
          "schema": "string",
          "required": true,
          "description": "Value to set the WEB tracing"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/protocol/{prot}/get/config",
      "method": "protocolGetConfig",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "Returns the protocol's configuration.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the protocol configuration"
        },
        {
          "name": "prot",
          "schema": "string",
          "required": true,
          "description": "Protocol to show configuration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/reload",
      "method": "reload",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "Reload the current agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the primary IP"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/remove",
      "method": "agentRemove",
      "httpMethod": "delete",
      "tag": "Agent",
      "description": "Remove the current agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the primary IP"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/resume",
      "method": "resume",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "Resume the current agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the primary IP"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/save",
      "method": "save",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "Save agent MIB values.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to save"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/set/delay/{delay}",
      "method": "setDelay",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "one-way transit delay in msec",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the delay time"
        },
        {
          "name": "delay",
          "schema": "integer",
          "required": true,
          "description": "Delay time of the agent"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/set/drops/{drops}",
      "method": "setDrops",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "drop rate (every N-th PDU)",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the drop rate"
        },
        {
          "name": "drops",
          "schema": "integer",
          "required": true,
          "description": "Drop rate of the agent"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/set/host/{host}",
      "method": "setHost",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "host address of the agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the primary IP"
        },
        {
          "name": "host",
          "schema": "string",
          "required": true,
          "description": "Primary IP of the agent"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/set/inform_timeout/{inform_timeout}",
      "method": "setInformTimeout",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "timeout in seconds for retransmitting INFORM PDUs",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the timeout setting"
        },
        {
          "name": "informTimeout",
          "schema": "integer",
          "required": true,
          "description": "Tmeout setting"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/set/interface/{interface}",
      "method": "setInterface",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "network interface card for the agent",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the primary interface"
        },
        {
          "name": "interface",
          "schema": "string",
          "required": true,
          "description": "Primary interface of the agent"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/set/mask/{mask}",
      "method": "setMask",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "subnet mask of the agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the primary IP address mask"
        },
        {
          "name": "mask",
          "schema": "string",
          "required": true,
          "description": "Mask to set for the agent primary IP address"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/set/mibs",
      "method": "setMibs",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "set of MIBs, simulations and scenarios",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the MIB triplets"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/set/oiddir/{oiddir}",
      "method": "setOiddir",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "MIB directory of the agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the directory path"
        },
        {
          "name": "oiddir",
          "schema": "string",
          "required": true,
          "description": "Directory path for the agent"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/set/owner/{owner}",
      "method": "setOwner",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "owner of the agent",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the owner"
        },
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Owner of the agent"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/set/pdusize/{pdusize}",
      "method": "setPdusize",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "maximum PDU size",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the PDU size"
        },
        {
          "name": "pdusize",
          "schema": "integer",
          "required": true,
          "description": "PDU size setting for the agent"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/set/port/{port}",
      "method": "setPort",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "port number",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the primary SNMP port"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": "Primary SNMP port of the agent"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/set/privdir/{privdir}",
      "method": "setPrivdir",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "private directory of the agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the directory path"
        },
        {
          "name": "privdir",
          "schema": "string",
          "required": true,
          "description": "Directory path for the agent"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/set/protocol",
      "method": "setProtocols",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "protocols supported by agent as a comma-separated list",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the protocols arrary"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/set/read/{read}",
      "method": "setReadCommunity",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "read community string",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the SNMP read community string"
        },
        {
          "name": "read",
          "schema": "string",
          "required": true,
          "description": "SNMP read community string"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/set/start/{start}",
      "method": "setStarttime",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "relative start time",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the relative start time"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": true,
          "description": "Relative start time of the agent"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/set/trace/{trace}",
      "method": "setTrace",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "SNMP PDU tracing",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set trace setting"
        },
        {
          "name": "trace",
          "schema": "integer",
          "required": true,
          "description": "Trace setting for the agent"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/set/validate/{validate}",
      "method": "setValidate",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "SNMP SET validation policy",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the bitmask integer"
        },
        {
          "name": "validate",
          "schema": "integer",
          "required": true,
          "description": "Bitmask integer to set"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/set/write/{write}",
      "method": "setWriteCommunity",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "write community string",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to set the SNMP write community string"
        },
        {
          "name": "write",
          "schema": "string",
          "required": true,
          "description": "SNMP write community string"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/start",
      "method": "start",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "Start the current agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the primary IP"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/stop",
      "method": "stop",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "Show the agent's primary IP address",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the primary IP"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/store/copy/{otherAgent}",
      "method": "agentStoreCopy",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "This command copies the variable store from the other agent to this agent.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "otherAgent",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/store/exists/{var}",
      "method": "agentStoreExists",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "This command can be used as a predicate to ascertain the existence of a given variable.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "var",
          "schema": "string",
          "required": true,
          "description": "Variable name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/store/get/{var}",
      "method": "agentStoreGet",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "Fetches the value associated with a variable.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "var",
          "schema": "string",
          "required": true,
          "description": "Variable name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/store/list",
      "method": "agentStoreList",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "This command will return the list of variables in the said scope.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/store/lreplace/{var}/{index}",
      "method": "agentStoreLreplace",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "These commands treat the variable as a list, and allow to replace an entry in the list at the specified index with the specified value. The variable has to already exist.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "var",
          "schema": "string",
          "required": true,
          "description": "Variable name"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "Index"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/store/persists/{var}",
      "method": "agentStorePersists",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "This command can be used as a predicate to ascertain the persistence of a given variable.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "var",
          "schema": "string",
          "required": true,
          "description": "Variable name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/store/set/{var}/{persist}",
      "method": "agentStoreSet",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "These commands allow the creation of a new variable, or changing an existing value.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "var",
          "schema": "string",
          "required": true,
          "description": "Variable name"
        },
        {
          "name": "persist",
          "schema": "integer",
          "required": true,
          "description": "Persistent setting"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/store/unset/{var}",
      "method": "agentStoreUnset",
      "httpMethod": "put",
      "tag": "Agent",
      "description": "Deletes a variable which is currently defined.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "var",
          "schema": "string",
          "required": true,
          "description": "Variable name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/timer/script/add/{script}/{interval}/{arg}",
      "method": "addTimerScript",
      "httpMethod": "post",
      "tag": "Agent",
      "description": "Add a new timer script to be executed at specified interval (in msec) with the specified argument.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the timer script list"
        },
        {
          "name": "script",
          "schema": "string",
          "required": true,
          "description": "Script name"
        },
        {
          "name": "interval",
          "schema": "integer",
          "required": true,
          "description": "Interval in msec"
        },
        {
          "name": "arg",
          "schema": "string",
          "required": true,
          "description": "Arguments to the script"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/timer/script/delete/{script}/{interval}/{arg}",
      "method": "delTimerScript",
      "httpMethod": "delete",
      "tag": "Agent",
      "description": "Remove a timer script from the execution list.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the timer script list"
        },
        {
          "name": "script",
          "schema": "string",
          "required": true,
          "description": "Script name"
        },
        {
          "name": "interval",
          "schema": "integer",
          "required": true,
          "description": "Interval in msec"
        },
        {
          "name": "arg",
          "schema": "string",
          "required": true,
          "description": "Arguments to the script"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/timer/script/list",
      "method": "listTimerScripts",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "List the timer scripts currently running along with the their intervals.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to return the timer script list"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/trap/config/add/{IP}/{port}",
      "method": "trapConfigAdd",
      "httpMethod": "post",
      "tag": "Agent",
      "description": "Add a trap destination to the set of destinations.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to add the destination"
        },
        {
          "name": "ip",
          "schema": "string",
          "required": true,
          "description": "IP of the destination"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": "port of the destination"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/trap/config/delete/{IP}/{port}",
      "method": "trapConfigDel",
      "httpMethod": "delete",
      "tag": "Agent",
      "description": "Remove a trap destination from the set of destinations.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to delete the destination"
        },
        {
          "name": "ip",
          "schema": "string",
          "required": true,
          "description": "IP of the destination"
        },
        {
          "name": "port",
          "schema": "integer",
          "required": true,
          "description": "port of the destination"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/trap/config/list",
      "method": "trapConfigList",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "List the set of trap destinations for this agent instance.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the IP alias list"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/trap/list",
      "method": "trapList",
      "httpMethod": "get",
      "tag": "Agent",
      "description": "List the outstanding asynchronous traps for this agent instance.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to list the traps"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "array of OID or Object strings"
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/add/{object}/{instance}",
      "method": "add",
      "httpMethod": "post",
      "tag": "Valuespace",
      "description": "Add an entry to a table.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "object",
          "schema": "string",
          "required": true,
          "description": "Object (column) of the table in the agent's value space"
        },
        {
          "name": "instance",
          "schema": "string",
          "required": true,
          "description": "Object (column) of the table in the agent's value space"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/eval/{object}/{instance}",
      "method": "evalValue",
      "httpMethod": "get",
      "tag": "Valuespace",
      "description": "Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "object",
          "schema": "string",
          "required": true,
          "description": "Single instance object or object (column) of the table in the agent's value space."
        },
        {
          "name": "instance",
          "schema": "string",
          "required": true,
          "description": "Row of the table in the agent's value space. 0 for single instance objects"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/get/{object}/{instance}/{variable}",
      "method": "getValue",
      "httpMethod": "get",
      "tag": "Valuespace",
      "description": "Get a variable in the Value Space.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "object",
          "schema": "string",
          "required": true,
          "description": "Object (column) of the table in the agent's value space"
        },
        {
          "name": "instance",
          "schema": "string",
          "required": true,
          "description": "Object (column) of the table in the agent's value space"
        },
        {
          "name": "variable",
          "schema": "string",
          "required": true,
          "description": "Object (column) of the table in the agent's value space"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/info/{object}",
      "method": "getInfo",
      "httpMethod": "get",
      "tag": "Valuespace",
      "description": "Return the syntactical information for the specified object, such as type, size, range, enumerations, and ACCESS.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the information of the object"
        },
        {
          "name": "object",
          "schema": "string",
          "required": true,
          "description": "Object"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/instances/{object}",
      "method": "getInstances",
      "httpMethod": "get",
      "tag": "Valuespace",
      "description": "Display the MIB object instances for the specified object.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "object",
          "schema": "string",
          "required": true,
          "description": "Object (column) of the table in the agent's value space"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/list/{OID}",
      "method": "getObjects",
      "httpMethod": "get",
      "tag": "Valuespace",
      "description": "Display the MIB objects below the current position",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the OID branches"
        },
        {
          "name": "oid",
          "schema": "string",
          "required": true,
          "description": "Current OID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/meval/{objInsArray}",
      "method": "mevalValue",
      "httpMethod": "get",
      "tag": "Valuespace",
      "description": "Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "objInsArray",
          "schema": "array",
          "required": true,
          "description": "Multiple objects or object (column) of the table in the agent's value space."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/mget/{objInsVarArray}",
      "method": "mgetValue",
      "httpMethod": "get",
      "tag": "Valuespace",
      "description": "Get multiple variables in the Value Space.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "objInsVarArray",
          "schema": "array",
          "required": true,
          "description": "Multiple objects or object (column) of the table in the agent's value space."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/mib/{object}",
      "method": "getMib",
      "httpMethod": "get",
      "tag": "Valuespace",
      "description": "Return the MIB that defines the specified object.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the MIB"
        },
        {
          "name": "object",
          "schema": "string",
          "required": true,
          "description": "Object"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/mset",
      "method": "msetValue",
      "httpMethod": "put",
      "tag": "Valuespace",
      "description": "Set multiple variables in the Value Space.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/munset",
      "method": "munsetValue",
      "httpMethod": "put",
      "tag": "Valuespace",
      "description": "Unset multiple variables in the Value Space",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/name/{OID}",
      "method": "getName",
      "httpMethod": "get",
      "tag": "Valuespace",
      "description": "Return the symbolic name of the specified object identifier.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the object"
        },
        {
          "name": "oid",
          "schema": "string",
          "required": true,
          "description": "OID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/oid/{object}",
      "method": "getOid",
      "httpMethod": "get",
      "tag": "Valuespace",
      "description": "Return the numeric OID of the specified object.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent to show the OID"
        },
        {
          "name": "object",
          "schema": "string",
          "required": true,
          "description": "Object"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/remove/{object}/{instance}",
      "method": "remove",
      "httpMethod": "delete",
      "tag": "Valuespace",
      "description": "Remove an entry from a table.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "object",
          "schema": "string",
          "required": true,
          "description": "Object (column) of the table in the agent's value space"
        },
        {
          "name": "instance",
          "schema": "string",
          "required": true,
          "description": "Object (column) of the table in the agent's value space"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/set/{object}/{instance}/{variable}",
      "method": "setValue",
      "httpMethod": "put",
      "tag": "Valuespace",
      "description": "Set a variable in the Value Space.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "object",
          "schema": "string",
          "required": true,
          "description": "Single instance object or object (column) of the table in the agent's value space."
        },
        {
          "name": "instance",
          "schema": "string",
          "required": true,
          "description": "Row of the table in the agent's value space. 0 for single instance objects"
        },
        {
          "name": "variable",
          "schema": "string",
          "required": true,
          "description": "Variable"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/split/{OID}",
      "method": "splitOid",
      "httpMethod": "get",
      "tag": "Valuespace",
      "description": "Split the numerical OID into the object OID and instance OID.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "oid",
          "schema": "string",
          "required": true,
          "description": "OID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/state/get/{object}",
      "method": "getState",
      "httpMethod": "get",
      "tag": "Valuespace",
      "description": "Get the state of a MIB object object.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "object",
          "schema": "string",
          "required": true,
          "description": "Object"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/state/set/{object}/{state}",
      "method": "setState",
      "httpMethod": "put",
      "tag": "Valuespace",
      "description": "Set the state of a MIB object object",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "object",
          "schema": "string",
          "required": true,
          "description": "Object"
        },
        {
          "name": "state",
          "schema": "integer",
          "required": true,
          "description": "State"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/unset/{object}/{instance}/{variable}",
      "method": "unsetValue",
      "httpMethod": "put",
      "tag": "Valuespace",
      "description": "Unset a variable in the Value Space in order to free its memory.",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "object",
          "schema": "string",
          "required": true,
          "description": "Single instance object or object (column) of the table in the agent's value space."
        },
        {
          "name": "instance",
          "schema": "string",
          "required": true,
          "description": "Row of the table in the agent's value space. 0 for single instance objects"
        },
        {
          "name": "variable",
          "schema": "string",
          "required": true,
          "description": "Variable"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/agent/{agentNum}/value/variables/{object}/{instance}",
      "method": "getVariables",
      "httpMethod": "get",
      "tag": "Valuespace",
      "description": "Display the variables for the specified instance instance for the specified MIB object object",
      "parameters": [
        {
          "name": "agentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent of the value space"
        },
        {
          "name": "object",
          "schema": "string",
          "required": true,
          "description": "Single instance object or object (column) of the table in the agent's value space."
        },
        {
          "name": "instance",
          "schema": "string",
          "required": true,
          "description": "Row of the table in the agent's value space. 0 for single instance objects"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/clear/{firstAgentNum}/{lastAgentNum}",
      "method": "cfgNew",
      "httpMethod": "put",
      "tag": "Daemon",
      "description": "Clear the lab configuration.",
      "parameters": [
        {
          "name": "firstAgentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent number to start clearing"
        },
        {
          "name": "lastAgentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent number to end the clearing"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/get/active_data_list",
      "method": "getActiveDataList",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "The list of {agentnum {statistics}} for agents that are currently active and whose statistics have changed since the last invocation of this command.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/get/active_list",
      "method": "getActiveList",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "The list of {agentnum} that are currently active (running or paused).",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/get/cfgfile",
      "method": "getCfgfile",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "The currently loaded lab configuration file for the particular user.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/get/cfgfile_changed",
      "method": "getCfgFileChanged",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "This predicate indicates if the currently loaded agent configuration file has changed.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/get/changed_config_list",
      "method": "getChangedConfigList",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "The list of {agentnum} for which a configurable parameter changed.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/get/changed_state_list",
      "method": "getChangedStateList",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "The list of {agentnum state} for which the state changed.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/get/clients",
      "method": "getClients",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "The number of clients currently connected to the daemon.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/get/configured_list",
      "method": "getConfiguredList",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "The list of {agentnum} that are currently configured.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/get/interfaces",
      "method": "getInterfaces",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "The set of network interfaces that can be used for simulations.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/get/last",
      "method": "getLast",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "The last configured agent instance.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/get/log",
      "method": "getLog",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "The current log file for the Simulator.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/get/max",
      "method": "getMax",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "The maximum number of agent instances.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/get/netaddr",
      "method": "getNetaddr",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "The network address of the host where the MIMIC simulator is running.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/get/netdev",
      "method": "getNetdev",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "The default network device to be used for agent addresses.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/get/product",
      "method": "getProduct",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "The product number that is licensed.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/get/protocols",
      "method": "getDaemonProtocols",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "The set of protocols supported by the Simulator.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/get/return",
      "method": "getReturn",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "The return mode.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/get/version",
      "method": "getVersion",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "The version of the MIMIC command interface.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/load/{cfgFile}/{firstAgentNum}/{lastAgentNum}/{startAgentNum}",
      "method": "cfgLoad",
      "httpMethod": "put",
      "tag": "Daemon",
      "description": "Load the lab configuration file file.",
      "parameters": [
        {
          "name": "cfgFile",
          "schema": "string",
          "required": true,
          "description": "MIMIC agent configuration file to load"
        },
        {
          "name": "firstAgentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent number in cfgFile to start the loading"
        },
        {
          "name": "lastAgentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent number in cfgFile to end the loading"
        },
        {
          "name": "startAgentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent number in current configuration to start placing the new agents"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/mget/{infoArray}",
      "method": "mgetInfo",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "Get multiple sets of information about MIMIC, where infoArray is one of the parameters defined in the mimic get command.",
      "parameters": [
        {
          "name": "infoArray",
          "schema": "array",
          "required": true,
          "description": "Multiple strings of info."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/protocol/msg/coap/get/stats_hdr",
      "method": "protocolCoapGetStatsHdr",
      "httpMethod": "get",
      "tag": "COAP",
      "description": "Show the COAP statistics headers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/protocol/msg/dhcp/get/stats_hdr",
      "method": "protocolDhcpGetStatsHdr",
      "httpMethod": "get",
      "tag": "DHCP",
      "description": "Show the DHCP statistics headers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/protocol/msg/ipmi/get/stats_hdr",
      "method": "protocolIpmiGetStatsHdr",
      "httpMethod": "get",
      "tag": "IPMI",
      "description": "Show the IPMI statistics headers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/protocol/msg/mqtt/get/stats_hdr",
      "method": "protocolMqttGetStatsHdr",
      "httpMethod": "get",
      "tag": "MQTT",
      "description": "Show the MQTT statistics headers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/protocol/msg/netflow/get/stats_hdr",
      "method": "protocolNetflowGetStatsHdr",
      "httpMethod": "get",
      "tag": "NETFLOW",
      "description": "Show the NETFLOW statistics headers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/protocol/msg/proxy/get/stats_hdr",
      "method": "protocolProxyGetStatsHdr",
      "httpMethod": "get",
      "tag": "PROXY",
      "description": "Show the PROXY statistics headers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/protocol/msg/sflow/get/stats_hdr",
      "method": "protocolSflowGetStatsHdr",
      "httpMethod": "get",
      "tag": "SFLOW",
      "description": "Show the SFLOW statistics headers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/protocol/msg/snmptcp/get/stats_hdr",
      "method": "protocolSnmptcpGetStatsHdr",
      "httpMethod": "get",
      "tag": "SNMPTCP",
      "description": "Show the SNMPTCP statistics headers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/protocol/msg/ssh/get/stats_hdr",
      "method": "protocolSshGetStatsHdr",
      "httpMethod": "get",
      "tag": "SSH",
      "description": "Show the SSH statistics headers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/protocol/msg/syslog/get/stats_hdr",
      "method": "protocolSyslogGetStatsHdr",
      "httpMethod": "get",
      "tag": "SYSLOG",
      "description": "Show the SYSLOG statistics headers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/protocol/msg/telnet/get/stats_hdr",
      "method": "protocolTelnetGetStatsHdr",
      "httpMethod": "get",
      "tag": "TELNET",
      "description": "Show the TELNET statistics headers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/protocol/msg/tftp/get/stats_hdr",
      "method": "protocolTftpGetStatsHdr",
      "httpMethod": "get",
      "tag": "TFTP",
      "description": "Show the TFTP statistics headers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/protocol/msg/tod/get/stats_hdr",
      "method": "protocolTodGetStatsHdr",
      "httpMethod": "get",
      "tag": "TOD",
      "description": "Show the TOD statistics headers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/protocol/msg/web/get/stats_hdr",
      "method": "protocolWebGetStatsHdr",
      "httpMethod": "get",
      "tag": "WEB",
      "description": "Show the WEB statistics headers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/save",
      "method": "cfgSave",
      "httpMethod": "put",
      "tag": "Daemon",
      "description": "Save the lab configuration.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/saveas/{cfgFile}/{firstAgentNum}/{lastAgentNum}",
      "method": "cfgSaveas",
      "httpMethod": "put",
      "tag": "Daemon",
      "description": "Save the lab configuration in file.",
      "parameters": [
        {
          "name": "cfgFile",
          "schema": "string",
          "required": true,
          "description": "MIMIC agent configuration file to save"
        },
        {
          "name": "firstAgentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent number in cfgFile to start the loading"
        },
        {
          "name": "lastAgentNum",
          "schema": "integer",
          "required": true,
          "description": "Agent number in cfgFile to end the loading"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/set/log",
      "method": "setLog",
      "httpMethod": "put",
      "tag": "Daemon",
      "description": "The current log file for the Simulator.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/set/netdev",
      "method": "setNetdev",
      "httpMethod": "put",
      "tag": "Daemon",
      "description": "The network address of the host where the MIMIC simulator is running.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/set/persistent",
      "method": "storeSave",
      "httpMethod": "put",
      "tag": "Daemon",
      "description": "This operation flushes all global objects which need to be made persistent to disk.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/start",
      "method": "startAllAgents",
      "httpMethod": "put",
      "tag": "Daemon",
      "description": "Start MIMIC.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/stop",
      "method": "stopAllAgents",
      "httpMethod": "put",
      "tag": "Daemon",
      "description": "Stop MIMIC.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/store/exists/{var}",
      "method": "storeExists",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "This command can be used as a predicate to ascertain the existence of a given variable.",
      "parameters": [
        {
          "name": "var",
          "schema": "string",
          "required": true,
          "description": "Variable name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/store/get/{var}",
      "method": "storeGet",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "Fetches the value associated with a variable.",
      "parameters": [
        {
          "name": "var",
          "schema": "string",
          "required": true,
          "description": "Variable name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/store/list",
      "method": "storeList",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "This command will return the list of variables in the said scope.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/store/lreplace/{var}/{index}",
      "method": "storeLreplace",
      "httpMethod": "put",
      "tag": "Daemon",
      "description": "These commands treat the variable as a list, and allow to replace an entry in the list at the specified index with the specified value. The variable has to already exist.",
      "parameters": [
        {
          "name": "var",
          "schema": "string",
          "required": true,
          "description": "Variable name"
        },
        {
          "name": "index",
          "schema": "integer",
          "required": true,
          "description": "Index"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/store/persists/{var}",
      "method": "storePersists",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "This command can be used as a predicate to ascertain the persistence of a given variable.",
      "parameters": [
        {
          "name": "var",
          "schema": "string",
          "required": true,
          "description": "Variable name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/store/set/{var}/{persist}",
      "method": "storeSet",
      "httpMethod": "put",
      "tag": "Daemon",
      "description": "Set the variable store for the global storage",
      "parameters": [
        {
          "name": "var",
          "schema": "string",
          "required": true,
          "description": "Variable name"
        },
        {
          "name": "persist",
          "schema": "integer",
          "required": true,
          "description": "Persistent setting"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/store/unset/{var}",
      "method": "storeUnset",
      "httpMethod": "put",
      "tag": "Daemon",
      "description": "Deletes a variable which is currently defined.",
      "parameters": [
        {
          "name": "var",
          "schema": "string",
          "required": true,
          "description": "Variable name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/terminate",
      "method": "terminate",
      "httpMethod": "put",
      "tag": "Daemon",
      "description": "Terminate the MIMIC daemon.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/timer/script/add/{script}/{interval}/{arg}",
      "method": "addDaemonTimerScript",
      "httpMethod": "post",
      "tag": "Daemon",
      "description": "Add a new timer script to be executed at specified interval (in msec) with the specified argument.",
      "parameters": [
        {
          "name": "script",
          "schema": "string",
          "required": true,
          "description": "Script name"
        },
        {
          "name": "interval",
          "schema": "integer",
          "required": true,
          "description": "Interval in msec"
        },
        {
          "name": "arg",
          "schema": "string",
          "required": true,
          "description": "Arguments to the script"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/timer/script/delete/{script}/{interval}/{arg}",
      "method": "delDaemonTimerScript",
      "httpMethod": "delete",
      "tag": "Daemon",
      "description": "Remove a timer script from the execution list.",
      "parameters": [
        {
          "name": "script",
          "schema": "string",
          "required": true,
          "description": "Script name"
        },
        {
          "name": "interval",
          "schema": "integer",
          "required": true,
          "description": "Interval in msec"
        },
        {
          "name": "arg",
          "schema": "string",
          "required": true,
          "description": "Arguments to the script"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/mimic/timer/script/list",
      "method": "listDaemonTimerScripts",
      "httpMethod": "get",
      "tag": "Daemon",
      "description": "List the timer scripts currently running along with the their intervals.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "http://gambitcomm.local",
  "apiDescription": "This is the API for MIMIC client to connect to MIMIC daemon.",
  "apiTitle": "MIMIC REST API",
  "endpoints": 356,
  "sdkMethods": 356,
  "schemas": 24,
  "parameters": 576,
  "contactEmail": "support@gambitcomm.com",
  "difficultyScore": 512,
  "difficulty": "Hard"
}