{
  "providerName": "microcks.local",
  "openApiRaw": "https://raw.githubusercontent.com/microcks/microcks/master/api/microcks-openapi-v1.7.yaml",
  "securitySchemes": {
    "jwt-bearer": {
      "description": "JWT Bearer acquired using OAuth 2 Authentication flow or Direct Access Grant",
      "flows": {
        "clientCredentials": {
          "refreshUrl": "https://keycloak.example.com/realms/microcks/protocol/openid-connect/token",
          "scopes": {
            "admin": "Administrator of the Microcks instance",
            "manager": "Services & APIs content manager",
            "user": "Simple authenticated user"
          },
          "tokenUrl": "https://keycloak.example.com/realms/microcks/protocol/openid-connect/token"
        }
      },
      "type": "oauth2"
    }
  },
  "homepage": "microcks.local",
  "apiVersion": "1.7.0",
  "methods": [
    {
      "url": "/artifact/upload",
      "method": "uploadArtifact",
      "httpMethod": "post",
      "tag": "job",
      "description": "Upload an artifact",
      "parameters": [
        {
          "name": "mainArtifact",
          "schema": "boolean",
          "required": true,
          "description": "Flag telling if this should be considered as primary or secondary artifact. Default to 'true'"
        },
        {
          "name": "file",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/export",
      "method": "exportSnapshot",
      "httpMethod": "get",
      "tag": "mock",
      "description": "Export a snapshot",
      "parameters": [
        {
          "name": "serviceIds",
          "schema": "array",
          "required": true,
          "description": "List of service identifiers to export"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/features/config",
      "method": "getFeaturesConfiguration",
      "httpMethod": "get",
      "tag": "config",
      "description": "Get features configuration",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/import",
      "method": "importSnapshot",
      "httpMethod": "post",
      "tag": "mock",
      "description": "Import a snapshot",
      "parameters": [
        {
          "name": "file",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/jobs",
      "method": "getImportJobs",
      "httpMethod": "get",
      "tag": "job",
      "description": "Get ImportJobs",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "Page of ImportJobs to retrieve (starts at and defaults to 0)"
        },
        {
          "name": "size",
          "schema": "integer",
          "description": "Size of a page. Maximum number of ImportJobs to include in a response (defaults to 20)"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "Name like criterion for query"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/jobs",
      "method": "createImportJob",
      "httpMethod": "post",
      "tag": "job",
      "description": "Create ImportJob",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "etag",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "frequency",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "lastImportDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "lastImportError",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "mainArtifact",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "metadata",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "repositoryDisableSSLValidation",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "repositoryUrl",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "secretRef",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "serviceRefs",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "An ImportJob allow defining a repository artifact to poll for discovering Services and APIs mocks and tests"
        }
      ]
    },
    {
      "url": "/jobs/count",
      "method": "getImportJobCounter",
      "httpMethod": "get",
      "tag": "job",
      "description": "Get the ImportJobs counter",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A simple Counter type."
        }
      ]
    },
    {
      "url": "/jobs/{id}",
      "method": "deleteImportJob",
      "httpMethod": "delete",
      "tag": "job",
      "description": "Delete ImportJob",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/jobs/{id}",
      "method": "/jobs/{id}Get",
      "httpMethod": "get",
      "tag": "job",
      "description": "Get ImportJob",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An ImportJob allow defining a repository artifact to poll for discovering Services and APIs mocks and tests"
        }
      ]
    },
    {
      "url": "/jobs/{id}",
      "method": "/jobs/{id}Post",
      "httpMethod": "post",
      "tag": "job",
      "description": "Update ImportJob",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "etag",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "frequency",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "lastImportDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "lastImportError",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "mainArtifact",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "metadata",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "repositoryDisableSSLValidation",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "repositoryUrl",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "secretRef",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "serviceRefs",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An ImportJob allow defining a repository artifact to poll for discovering Services and APIs mocks and tests"
        }
      ]
    },
    {
      "url": "/jobs/{id}/activate",
      "method": "activateImportJob",
      "httpMethod": "put",
      "tag": "job",
      "description": "Activate an ImportJob",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An ImportJob allow defining a repository artifact to poll for discovering Services and APIs mocks and tests"
        }
      ]
    },
    {
      "url": "/jobs/{id}/start",
      "method": "startImportJob",
      "httpMethod": "put",
      "tag": "job",
      "description": "Start an ImportJob",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An ImportJob allow defining a repository artifact to poll for discovering Services and APIs mocks and tests"
        }
      ]
    },
    {
      "url": "/jobs/{id}/stop",
      "method": "stopImportJob",
      "httpMethod": "put",
      "tag": "job",
      "description": "Stop an ImportJob",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An ImportJob allow defining a repository artifact to poll for discovering Services and APIs mocks and tests"
        }
      ]
    },
    {
      "url": "/keycloak/config",
      "method": "getKeycloakConfig",
      "httpMethod": "get",
      "tag": "config",
      "description": "Get authentification configuration",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Representation of Keycloak / SSO configuration used by Microcks server"
        }
      ]
    },
    {
      "url": "/metrics/conformance/aggregate",
      "method": "getConformanceMetricsAggregation",
      "httpMethod": "get",
      "tag": "metrics",
      "description": "Get aggregation of conformance metrics",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/metrics/conformance/service/{serviceId}",
      "method": "getServiceTestConformanceMetric",
      "httpMethod": "get",
      "tag": "metrics",
      "description": "Get conformance metrics for a Service",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Represents the test conformance metrics (current score, history and evolution trend) of a Service"
        }
      ]
    },
    {
      "url": "/metrics/invocations/global",
      "method": "getAggregatedInvocationsStats",
      "httpMethod": "get",
      "tag": "metrics",
      "description": "Get aggregated invocation statistics for a day",
      "parameters": [
        {
          "name": "day",
          "schema": "string",
          "description": "The day to get statistics for (formatted with yyyyMMdd pattern). Default to today if not provided."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The daily statistic of a service mock invocations"
        }
      ]
    },
    {
      "url": "/metrics/invocations/global/latest",
      "method": "getLatestAggregatedInvocationsStats",
      "httpMethod": "get",
      "tag": "metrics",
      "description": "Get aggregated invocations statistics for latest days",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "Number of days to get back in time. Default is 20."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A generic map of counter"
        }
      ]
    },
    {
      "url": "/metrics/invocations/top",
      "method": "getTopIvnocationsStatsByDay",
      "httpMethod": "get",
      "tag": "metrics",
      "description": "Get top invocation statistics for a day",
      "parameters": [
        {
          "name": "day",
          "schema": "string",
          "description": "The day to get statistics for (formatted with yyyyMMdd pattern). Default to today if not provided."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "The number of top invoked mocks to return"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/metrics/invocations/{serviceName}/{serviceVersion}",
      "method": "getInvocationStatsByService",
      "httpMethod": "get",
      "tag": "metrics",
      "description": "Get invocation statistics for Service",
      "parameters": [
        {
          "name": "day",
          "schema": "string",
          "description": "The day to get statistics for (formatted with yyyyMMdd pattern). Default to today if not provided."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The daily statistic of a service mock invocations"
        }
      ]
    },
    {
      "url": "/metrics/tests/latest",
      "method": "getLatestTestResults",
      "httpMethod": "get",
      "tag": "metrics",
      "description": "Get latest tests results",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "Number of days to consider for test results to return. Default is 7 (one week)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/resources/service/{serviceId}",
      "method": "getResourcesByService",
      "httpMethod": "get",
      "description": "Get Resources by Service",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/resources/{name}",
      "method": "getResource",
      "httpMethod": "get",
      "description": "Get Resource",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Resource represents a Service or API artifacts such as specification, contract"
        }
      ]
    },
    {
      "url": "/secrets",
      "method": "getSecrets",
      "httpMethod": "get",
      "tag": "config",
      "description": "Get Secrets",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page of Secrets to retrieve (starts at and defaults to 0)"
        },
        {
          "name": "size",
          "schema": "integer",
          "required": false,
          "description": "Size of a page. Maximum number of Secrets to include in a response (defaults to 20)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/secrets",
      "method": "createSecret",
      "httpMethod": "post",
      "tag": "config",
      "description": "Create a new Secret",
      "parameters": [
        {
          "name": "caCertPem",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tokenHeader",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "A Secret allows grouping informations on how to access a restricted resource such as a repsoitory URL. Secrets are typically used by ImpoortJobs."
        }
      ]
    },
    {
      "url": "/secrets/count",
      "method": "getSecretsCounter",
      "httpMethod": "get",
      "tag": "config",
      "description": "Get the Secrets counter",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A simple Counter type."
        }
      ]
    },
    {
      "url": "/secrets/{id}",
      "method": "deleteSecret",
      "httpMethod": "delete",
      "tag": "config",
      "description": "Delete Secret",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/secrets/{id}",
      "method": "getSecret",
      "httpMethod": "get",
      "tag": "config",
      "description": "Get Secret",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Secret allows grouping informations on how to access a restricted resource such as a repsoitory URL. Secrets are typically used by ImpoortJobs."
        }
      ]
    },
    {
      "url": "/secrets/{id}",
      "method": "updateSecret",
      "httpMethod": "put",
      "tag": "config",
      "description": "Update Secret",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/services",
      "method": "getServices",
      "httpMethod": "get",
      "tag": "mock",
      "description": "Get Services and APIs",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "description": "Page of Services to retrieve (starts at and defaults to 0)"
        },
        {
          "name": "size",
          "schema": "integer",
          "description": "Size of a page. Maximum number of Services to include in a response (defaults to 20)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Represents a Service or API definition as registred into Microcks repository"
        }
      ]
    },
    {
      "url": "/services/count",
      "method": "getServicesCounter",
      "httpMethod": "get",
      "tag": "mock",
      "description": "Get the Services counter",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A simple Counter type."
        }
      ]
    },
    {
      "url": "/services/labels",
      "method": "getServicesLabels",
      "httpMethod": "get",
      "tag": "mock",
      "description": "Get the already used labels for Services",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A map which keys are already used labels keys and values are already used values for this key"
        }
      ]
    },
    {
      "url": "/services/search",
      "method": "searchServices",
      "httpMethod": "get",
      "tag": "mock",
      "description": "Search for Services and APIs",
      "parameters": [
        {
          "name": "queryMap",
          "schema": "object",
          "required": true,
          "description": "Map of criterion. Key can be simply 'name' with value as the searched string. You can also search by label using keys like 'labels.x' where 'x' is the label and value the label value"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/services/{id}",
      "method": "deleteService",
      "httpMethod": "delete",
      "tag": "mock",
      "description": "Delete Service",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/services/{id}",
      "method": "getService",
      "httpMethod": "get",
      "tag": "mock",
      "description": "Get Service",
      "parameters": [
        {
          "name": "messages",
          "schema": "boolean",
          "description": "Whether to include details on services messages into result. Default is false"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/services/{id}/metadata",
      "method": "updateServiceMetadata",
      "httpMethod": "put",
      "tag": "mock",
      "description": "Update Service Metadata",
      "parameters": [
        {
          "name": "annotations",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdOn",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "labels",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdate",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/services/{id}/operation",
      "method": "overrideServiceOperation",
      "httpMethod": "put",
      "tag": "mock",
      "description": "Override Service Operation",
      "parameters": [
        {
          "name": "operationName",
          "schema": "string",
          "required": true,
          "description": "Name of operation to update"
        },
        {
          "name": "defaultDelay",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "dispatcher",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dispatcherRules",
          "schema": "string",
          "description": ""
        },
        {
          "name": "parameterConstraints",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/tests",
      "method": "createTest",
      "httpMethod": "post",
      "tag": "test",
      "description": "Create a new Test",
      "parameters": [
        {
          "name": "filteredOperations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "operationHeaders",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "runnerType",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "secretName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "serviceId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "testEndpoint",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "timeout",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Represents the result of a Service or API test run by Microcks. Tests are related to a service and made of multiple test cases corresponding to each operations / actions composing service. Tests are run against a specific endpoint named testedEndpoint. It holds global markers telling if test still ran, is a success, how many times is has taken and so on ..."
        }
      ]
    },
    {
      "url": "/tests/service/{serviceId}",
      "method": "getTestResultsByService",
      "httpMethod": "get",
      "tag": "test",
      "description": "Get TestResults by Service",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/tests/service/{serviceId}/count",
      "method": "getTestResultsByServiceCounter",
      "httpMethod": "get",
      "tag": "test",
      "description": "Get the TestResults for Service counter",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A simple Counter type."
        }
      ]
    },
    {
      "url": "/tests/{id}",
      "method": "getTestResult",
      "httpMethod": "get",
      "tag": "test",
      "description": "Get TestResult",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Represents the result of a Service or API test run by Microcks. Tests are related to a service and made of multiple test cases corresponding to each operations / actions composing service. Tests are run against a specific endpoint named testedEndpoint. It holds global markers telling if test still ran, is a success, how many times is has taken and so on ..."
        }
      ]
    },
    {
      "url": "/tests/{id}/events/{testCaseId}",
      "method": "getEventsByTestCase",
      "httpMethod": "get",
      "tag": "test",
      "description": "Get events for TestCase",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/tests/{id}/messages/{testCaseId}",
      "method": "getMessagesByTestCase",
      "httpMethod": "get",
      "tag": "test",
      "description": "Get messages for TestCase",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/tests/{id}/testCaseResult",
      "method": "reportTestCaseResult",
      "httpMethod": "post",
      "tag": "test",
      "description": "Report and create a new TestCaseResult",
      "parameters": [
        {
          "name": "operationName",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Companion objects for TestResult. Each TestCaseResult correspond to a particuliar service operation / action reference by the operationName field. TestCaseResults owns a collection of TestStepResults (one for every request associated to service operation / action)."
        }
      ]
    }
  ],
  "apiBaseUrl": "http://microcks.local",
  "apiDescription": "API offered by Microcks, the Kubernetes native tools for API and microservices mocking and testing (microcks.io)",
  "apiTitle": "Microcks API v1.7",
  "endpoints": 37,
  "sdkMethods": 79,
  "schemas": 44,
  "parameters": 72,
  "contactUrl": "https://github.com/microcks",
  "contactEmail": "laurent@microcks.io",
  "difficultyScore": 119,
  "difficulty": "Medium"
}