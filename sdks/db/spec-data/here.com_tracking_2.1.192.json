{
  "providerName": "here.com",
  "openApiRaw": "https://developer.here.com/documentation/tracking/swagger/swagger.json",
  "securitySchemes": {
    "Bearer": {
      "bearerFormat": "JWT",
      "description": "A token obtained from a separate endpoint using client credentials and an OAuth 1.0a HMAC-SHA256 signed request.\n\nUsers are authenticated using an OAuth 1.0 bearer token obtained using the `/users/v2/login` endpoint.\n\nDevices are authenticated using an OAuth 1.0 bearer token obtained using the `/v2/token` endpoint.\n\nMake a request using the bearer token for authentication\n---\n\nMake a request with an `Authorization` header containing the obtained bearer token.\n\nExample:\n\n```\n    Authorization: Bearer h1.yxPIksZ0ViLq77f1Nh-9cg.NVgGBZVlCU8G7kjV_...\n```\n\n> **Note:** For the available authentication options, see the [Identity & Access Management Guide](https://developer.here.com/documentation/identity-access-management/dev_guide/index.html).\n",
      "scheme": "bearer",
      "type": "http"
    },
    "signedRequest": {
      "description": "HERE Tracking requires that you sign your requests for tokens. The signature method uses the OAuth 1.0 standard. For more information on this standard, see the [OAuth Core 1.0](https://oauth.net/core/1.0/) specification.\n\n> **Note:** You must create a new signature for each token request to HERE Tracking. Signatures can only be used once.\n\nCreate the Signature Base String\n---\n\nThe first step in creating a signature is to create the signature base string. This string contains the parameters to use when generating the signature.\n\n*1. To begin, make sure you have the information listed in the following table.*\n\n| Parameter                | Description                              |\n| ------------------------ | -----------------------------------------|\n| oauth\\_consumer\\_key     | The device ID for which you want to generate a token. |\n| oauth\\_signature\\_method | Always use \"HMAC-SHA256\".                 |\n| oauth\\_timestamp         | The number of seconds since the Unix epoch at the point the request is generated. This must be within 10 seconds of the timestamp returned by the `/v2/timestamp` endpoint. |\n| oauth\\_nonce             | A unique string for this signature. The string cannot have been used in a previous signature. Each token generation request to HERE Tracking must have a unique signature, and the value in this parameter is what is used to ensure the signature is unique. |\n| oauth\\_version           | Always use \"1.0\".                         |\n\n*2. Combine these values into a single string by following these steps:*\n\n   1. URL encode every key and value.\n   2. Sort the list of key-value pairs alphabetically by key.\n   3. Concatenate each key/value pair, separating each with an ampersand character (\"&\").\n\nThe result is a parameter string that looks like this (line breaks are added for legibility):\n\n   ```\n   oauth_consumer_key=47164fb0-b7b3-49e8-891b-650270b82cf2\n   &oauth_nonce=LIIpk4\n   &oauth_signature_method=HMAC-SHA256\n   &oauth_timestamp=1513634609\n   &oauth_version=1.0\n   ```\n\n*3. Combine the HTTP method, base URL, and parameter string into a single string called the \"base string\". This will be the string from which the signature is generated. The base string is in this format:*\n\n   ```\n   POST&https://tracking.api.here.com/v2/token&<URL encoded parameter string>\n   ```\n\n   The base string consists of:\n\n   1. The HTTP method in caps (POST) followed by an ampersand (\"&\")\n   2. The URL of the HERE Tracking token endpoint followed by an ampersand (\"&\")\n   3. The URL-encoded parameter string.\n\n   For example (line breaks are added for legibility):\n\n   ```\n   POST\n    &https%3A%2F%2Ftracking.api.here.com%2Fv2%2Ftoken\n    &oauth_consumer_key%3D47164fb0-b7b3-49e8-891b-650270b82cf2%26\n    oauth_nonce%3DLIIpk4%26oauth_signature_method%3DHMAC-SHA256%26\n    oauth_timestamp%3D1513634609%26oauth_version%3D1.0\n   ```\n\n   > **Note:** The URL-encoded base string should contain exactly two ampersands (\"&\").\n\nCreate the signature\n---\n\nThe signing key used to sign the base string is the `deviceSecret` followed by an ampersand (\"&\").\n\nCreate the signature by passing the signature base string and the signing key to the `HMAC-SHA256` hashing algorithm and converting the result to a `base64` string. Then, use the signature to request a token.\n\nRequest the token\n---\n\nMake a `POST` request to this endpoint with an `Authorization` header constructed from the above parameters and the generated signature.\n\nExample:\n\n```\n    Authorization: OAuth oauth_consumer_key=\"47164fb0-b7b3-49e8-891b-650270b82cf2\",\n        oauth_signature_method=\"HMAC-SHA256\",\n        oauth_timestamp=\"1513634609\",\n        oauth_nonce=\"LIIpk4\",\n        oauth_version=\"1.0\",\n        oauth_signature=\"pQ9EJX14L736B%2Br7uZl4yQlO6Xw%3D\"\n```\n",
      "scheme": "oauth",
      "type": "http"
    }
  },
  "categories": [
    "location"
  ],
  "homepage": "here.com",
  "serviceName": "tracking",
  "apiVersion": "2.1.192",
  "methods": [
    {
      "url": "/aliases/v2",
      "method": "/aliases/v2Get",
      "httpMethod": "get",
      "tag": "Aliases",
      "typeScriptTag": "aliases",
      "description": "Gets all aliases",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        },
        {
          "name": "after",
          "schema": "number",
          "required": false,
          "description": "Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n"
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/aliases/v2/health",
      "method": "/aliases/v2/healthGet",
      "httpMethod": "get",
      "tag": "Aliases",
      "typeScriptTag": "aliases",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/aliases/v2/trackingId",
      "method": "/aliases/v2/trackingIdGet",
      "httpMethod": "get",
      "tag": "Aliases",
      "typeScriptTag": "aliases",
      "description": "Gets the tracking ID associated with an alias",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/aliases/v2/version",
      "method": "/aliases/v2/versionGet",
      "httpMethod": "get",
      "tag": "Aliases",
      "typeScriptTag": "aliases",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/aliases/v2/{trackingId}",
      "method": "/aliases/v2/{trackingId}Delete",
      "httpMethod": "delete",
      "tag": "Aliases",
      "typeScriptTag": "aliases",
      "description": "Deletes all aliases of a device",
      "parameters": [
        {
          "name": "xConfirm",
          "schema": "string",
          "required": true,
          "description": "A safety measure that prevents one from accidentally deleting data.\n\nTo confirm that all entries should be deleted, set the value to `true`.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/aliases/v2/{trackingId}",
      "method": "/aliases/v2/{trackingId}Get",
      "httpMethod": "get",
      "tag": "Aliases",
      "typeScriptTag": "aliases",
      "description": "Gets all aliases of a device",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "An alias type"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/aliases/v2/{trackingId}/batch",
      "method": "/aliases/v2/{trackingId}/batchPut",
      "httpMethod": "put",
      "tag": "Aliases",
      "typeScriptTag": "aliases",
      "description": "Creates multiple aliases for a device",
      "parameters": [
        {
          "name": "aliases",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/aliases/v2/{trackingId}/{type}",
      "method": "/aliases/v2/{trackingId}/{type}Delete",
      "httpMethod": "delete",
      "tag": "Aliases",
      "typeScriptTag": "aliases",
      "description": "Deletes all aliases of a specified type for a device",
      "parameters": [
        {
          "name": "xConfirm",
          "schema": "string",
          "required": true,
          "description": "A safety measure that prevents one from accidentally deleting data.\n\nTo confirm that all entries should be deleted, set the value to `true`.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/aliases/v2/{trackingId}/{type}",
      "method": "/aliases/v2/{trackingId}/{type}Get",
      "httpMethod": "get",
      "tag": "Aliases",
      "typeScriptTag": "aliases",
      "description": "Gets all aliases of a specified type for a device",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/aliases/v2/{trackingId}/{type}/{externalId}",
      "method": "/aliases/v2/{trackingId}/{type}/{externalId}Delete",
      "httpMethod": "delete",
      "tag": "Aliases",
      "typeScriptTag": "aliases",
      "description": "Deletes an alias",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/aliases/v2/{trackingId}/{type}/{externalId}",
      "method": "/aliases/v2/{trackingId}/{type}/{externalId}Put",
      "httpMethod": "put",
      "tag": "Aliases",
      "typeScriptTag": "aliases",
      "description": "Creates an alias",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/associations/v3/devices/batchUpdate",
      "method": "/associations/v3/devices/batchUpdatePut",
      "httpMethod": "put",
      "tag": "Associations",
      "typeScriptTag": "associations",
      "description": "Updates rules associations for devices",
      "parameters": [
        {
          "name": "newRules",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "oldRules",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "trackingIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/associations/v3/devices/{trackingId}/batchCreate",
      "method": "/associations/v3/devices/{trackingId}/batchCreatePost",
      "httpMethod": "post",
      "tag": "Associations",
      "typeScriptTag": "associations",
      "description": "Associates rules with a device",
      "parameters": [
        {
          "name": "geofenceIds",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "ruleIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/associations/v3/devices/{trackingId}/batchDelete",
      "method": "/associations/v3/devices/{trackingId}/batchDeletePost",
      "httpMethod": "post",
      "tag": "Associations",
      "typeScriptTag": "associations",
      "description": "Disassociates rules from a device",
      "parameters": [
        {
          "name": "geofenceIds",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "ruleIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/associations/v3/geofences/{geofenceId}",
      "method": "/associations/v3/geofences/{geofenceId}Get",
      "httpMethod": "get",
      "tag": "Associations",
      "typeScriptTag": "associations",
      "description": "Gets all devices associated with a geofence",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Response body contains an array of device objects, count indicating the number of returned devices,\nand pageToken if available. If no devices are found, an object with empty data array is returned.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/associations/v3/health",
      "method": "/associations/v3/healthGet",
      "httpMethod": "get",
      "tag": "Associations",
      "typeScriptTag": "associations",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/associations/v3/rules/{ruleId}",
      "method": "/associations/v3/rules/{ruleId}Get",
      "httpMethod": "get",
      "tag": "Associations",
      "typeScriptTag": "associations",
      "description": "Gets all devices associated with a rule",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Response body contains an array of device objects, count indicating the number of returned devices,\nand pageToken if available. If no devices are found, an object with empty data array is returned.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/associations/v3/sensors/{sensorRuleId}",
      "method": "/associations/v3/sensors/{sensorRuleId}Get",
      "httpMethod": "get",
      "tag": "Associations",
      "typeScriptTag": "associations",
      "description": "Gets all devices associated with a sensor rule",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Response body contains an array of device objects, count indicating the number of returned devices,\nand pageToken if available. If no devices are found, an object with empty data array is returned.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/associations/v3/version",
      "method": "/associations/v3/versionGet",
      "httpMethod": "get",
      "tag": "Associations",
      "typeScriptTag": "associations",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/associations/v3/{trackingId}/geofences",
      "method": "/associations/v3/{trackingId}/geofencesGet",
      "httpMethod": "get",
      "tag": "Associations",
      "typeScriptTag": "associations",
      "description": "Gets geofences associated with a device",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        },
        {
          "name": "type",
          "schema": "array",
          "required": false,
          "description": "Type of a geofence"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Response body contains an array of geofence objects. `count` indicates the number of returned geofences, and `pageToken` indicates the next available page in the matching result set. If no geofences are found, an object with empty data array is returned."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/associations/v3/{trackingId}/geofences/{geofenceId}",
      "method": "/associations/v3/{trackingId}/geofences/{geofenceId}Delete",
      "httpMethod": "delete",
      "tag": "Associations",
      "typeScriptTag": "associations",
      "description": "Disassociates a device and a geofence",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/associations/v3/{trackingId}/geofences/{geofenceId}",
      "method": "/associations/v3/{trackingId}/geofences/{geofenceId}Put",
      "httpMethod": "put",
      "tag": "Associations",
      "typeScriptTag": "associations",
      "description": "Associates a device to a geofence",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/associations/v3/{trackingId}/rules",
      "method": "/associations/v3/{trackingId}/rulesGet",
      "httpMethod": "get",
      "tag": "Associations",
      "typeScriptTag": "associations",
      "description": "Gets rules associated with a device",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Response body contains an array of rule objects, count indicating the number of returned rules,\nand pageToken if available. If no rules are found, an object with empty data array is returned.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/associations/v3/{trackingId}/rules/{ruleId}",
      "method": "/associations/v3/{trackingId}/rules/{ruleId}Delete",
      "httpMethod": "delete",
      "tag": "Associations",
      "typeScriptTag": "associations",
      "description": "Disassociates a device and a rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/associations/v3/{trackingId}/rules/{ruleId}",
      "method": "/associations/v3/{trackingId}/rules/{ruleId}Put",
      "httpMethod": "put",
      "tag": "Associations",
      "typeScriptTag": "associations",
      "description": "Associates a device to a rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/associations/v3/{trackingId}/sensors",
      "method": "/associations/v3/{trackingId}/sensorsGet",
      "httpMethod": "get",
      "tag": "Associations",
      "typeScriptTag": "associations",
      "description": "Gets sensor rules associated with a device",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Response body contains an array of sensor rule objects, `count` indicates the number of returned sensor rules,\nand `pageToken` is the next page token if available.\n\nIf no sensor rules are found, an object with an empty data array is returned.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/associations/v3/{trackingId}/sensors/{sensorRuleId}",
      "method": "/associations/v3/{trackingId}/sensors/{sensorRuleId}Delete",
      "httpMethod": "delete",
      "tag": "Associations",
      "typeScriptTag": "associations",
      "description": "Disassociates a device and a sensor rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/associations/v3/{trackingId}/sensors/{sensorRuleId}",
      "method": "/associations/v3/{trackingId}/sensors/{sensorRuleId}Put",
      "httpMethod": "put",
      "tag": "Associations",
      "typeScriptTag": "associations",
      "description": "Associates a device with a sensor rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/bulkjobs/v4/deviceUploads",
      "method": "/bulkjobs/v4/deviceUploadsGet",
      "httpMethod": "get",
      "tag": "Bulk jobs",
      "typeScriptTag": "bulkJobs",
      "description": "Gets the bulk upload job IDs for a project",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page"
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "status",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/bulkjobs/v4/deviceUploads",
      "method": "/bulkjobs/v4/deviceUploadsPost",
      "httpMethod": "post",
      "tag": "Bulk jobs",
      "typeScriptTag": "bulkJobs",
      "description": "Starts bulk upload",
      "parameters": [
        {
          "name": "fileName",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "412",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/bulkjobs/v4/deviceUploads/{jobId}",
      "method": "/bulkjobs/v4/deviceUploads/{jobId}Patch",
      "httpMethod": "patch",
      "tag": "Bulk jobs",
      "typeScriptTag": "bulkJobs",
      "description": "Updates bulk upload job status",
      "parameters": [
        {
          "name": "action",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "412",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/bulkjobs/v4/deviceUploads/{jobId}/results",
      "method": "/bulkjobs/v4/deviceUploads/{jobId}/resultsGet",
      "httpMethod": "get",
      "tag": "Bulk jobs",
      "typeScriptTag": "bulkJobs",
      "description": "Gets bulk upload results",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/bulkjobs/v4/deviceUploads/{jobId}/status",
      "method": "/bulkjobs/v4/deviceUploads/{jobId}/statusGet",
      "httpMethod": "get",
      "tag": "Bulk jobs",
      "typeScriptTag": "bulkJobs",
      "description": "Gets bulk upload status",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/bulkjobs/v4/health",
      "method": "/bulkjobs/v4/healthGet",
      "httpMethod": "get",
      "tag": "Bulk jobs",
      "typeScriptTag": "bulkJobs",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/bulkjobs/v4/version",
      "method": "/bulkjobs/v4/versionGet",
      "httpMethod": "get",
      "tag": "Bulk jobs",
      "typeScriptTag": "bulkJobs",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/c2c/v4/callback",
      "method": "/c2C/v4/callbackPost",
      "httpMethod": "post",
      "tag": "C2C",
      "typeScriptTag": "c2C",
      "description": "Receives external device update reports",
      "parameters": [
        {
          "name": "apiKey",
          "schema": "string",
          "required": true,
          "description": "API Key"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "501",
          "description": ""
        }
      ]
    },
    {
      "url": "/c2c/v4/connectors",
      "method": "/c2C/v4/connectorsGet",
      "httpMethod": "get",
      "tag": "C2C",
      "typeScriptTag": "c2C",
      "description": "Gets a list of connectors",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/c2c/v4/connectors",
      "method": "/c2C/v4/connectorsPost",
      "httpMethod": "post",
      "tag": "C2C",
      "typeScriptTag": "c2C",
      "description": "Creates a connector",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "driverId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "externalCloudInfo",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "refreshIntervalS",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Identifier of the connector."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/c2c/v4/connectors/ext-devices/{externalDeviceId}",
      "method": "/c2C/v4/connectors/extDevices/{externalDeviceId}Get",
      "httpMethod": "get",
      "tag": "C2C",
      "typeScriptTag": "c2C",
      "description": "Gets connector identifiers for an external device",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "externalDeviceId",
          "schema": "string",
          "required": true,
          "description": "Identifier of the external device"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/c2c/v4/connectors/{connectorId}",
      "method": "/c2C/v4/connectors/{connectorId}Delete",
      "httpMethod": "delete",
      "tag": "C2C",
      "typeScriptTag": "c2C",
      "description": "Deletes a connector",
      "parameters": [
        {
          "name": "connectorId",
          "schema": "string",
          "required": true,
          "description": "Identifier of the connector"
        },
        {
          "name": "deleteDevices",
          "schema": "boolean",
          "description": "Unclaim and unprovision devices"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "412",
          "description": ""
        }
      ]
    },
    {
      "url": "/c2c/v4/connectors/{connectorId}",
      "method": "/c2C/v4/connectors/{connectorId}Get",
      "httpMethod": "get",
      "tag": "C2C",
      "typeScriptTag": "c2C",
      "description": "Gets a connector info",
      "parameters": [
        {
          "name": "connectorId",
          "schema": "string",
          "required": true,
          "description": "Identifier of the connector"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/c2c/v4/connectors/{connectorId}",
      "method": "/c2C/v4/connectors/{connectorId}Put",
      "httpMethod": "put",
      "tag": "C2C",
      "typeScriptTag": "c2C",
      "description": "Updates a connector info",
      "parameters": [
        {
          "name": "connectorId",
          "schema": "string",
          "required": true,
          "description": "Identifier of the connector"
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "driverId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "externalCloudInfo",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "refreshIntervalS",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Identifier of the connector."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/c2c/v4/connectors/{connectorId}/ext-devices",
      "method": "/c2C/v4/connectors/{connectorId}/extDevicesGet",
      "httpMethod": "get",
      "tag": "C2C",
      "typeScriptTag": "c2C",
      "description": "Gets all external devices under a connector",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page"
        },
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "connectorId",
          "schema": "string",
          "required": true,
          "description": "Identifier of the connector"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/c2c/v4/connectors/{connectorId}/ext-devices",
      "method": "/c2C/v4/connectors/{connectorId}/extDevicesPost",
      "httpMethod": "post",
      "tag": "C2C",
      "typeScriptTag": "c2C",
      "description": "Adds external devices to a connector",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "connectorId",
          "schema": "string",
          "required": true,
          "description": "Identifier of the connector"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/c2c/v4/connectors/{connectorId}/ext-devices-batch",
      "method": "/c2C/v4/connectors/{connectorId}/extDevicesBatchDelete",
      "httpMethod": "delete",
      "tag": "C2C",
      "typeScriptTag": "c2C",
      "description": "Removes a batch of external devices from a connector",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "connectorId",
          "schema": "string",
          "required": true,
          "description": "Identifier of the connector"
        },
        {
          "name": "externalDeviceIds",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/c2c/v4/connectors/{connectorId}/ext-devices/{externalDeviceId}",
      "method": "/c2C/v4/connectors/{connectorId}/extDevices/{externalDeviceId}Delete",
      "httpMethod": "delete",
      "tag": "C2C",
      "typeScriptTag": "c2C",
      "description": "Removes an external device from a connector",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "connectorId",
          "schema": "string",
          "required": true,
          "description": "Identifier of the connector"
        },
        {
          "name": "externalDeviceId",
          "schema": "string",
          "required": true,
          "description": "Identifier of the external device"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/c2c/v4/drivers",
      "method": "/c2C/v4/driversGet",
      "httpMethod": "get",
      "tag": "C2C",
      "typeScriptTag": "c2C",
      "description": "Gets a list of drivers",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/c2c/v4/drivers/{driverId}/verify",
      "method": "/c2C/v4/drivers/{driverId}/verifyPost",
      "httpMethod": "post",
      "tag": "C2C",
      "typeScriptTag": "c2C",
      "description": "Validate and verify external cloud credentials for driver",
      "parameters": [
        {
          "name": "driverId",
          "schema": "string",
          "required": true,
          "description": "Driver ID"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "501",
          "description": ""
        }
      ]
    },
    {
      "url": "/c2c/v4/health",
      "method": "/c2C/v4/healthGet",
      "httpMethod": "get",
      "tag": "C2C",
      "typeScriptTag": "c2C",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/c2c/v4/version",
      "method": "/c2C/v4/versionGet",
      "httpMethod": "get",
      "tag": "C2C",
      "typeScriptTag": "c2C",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/device-associations/v2/health",
      "method": "/deviceAssociations/v2/healthGet",
      "httpMethod": "get",
      "tag": "Device Associations",
      "typeScriptTag": "deviceAssociations",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/device-associations/v2/version",
      "method": "/deviceAssociations/v2/versionGet",
      "httpMethod": "get",
      "tag": "Device Associations",
      "typeScriptTag": "deviceAssociations",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/device-associations/v2/{trackingId}/geofences",
      "method": "/deviceAssociations/v2/{trackingId}/geofencesGet",
      "httpMethod": "get",
      "tag": "Device Associations",
      "typeScriptTag": "deviceAssociations",
      "description": "Gets geofences associated with a device",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "trackingId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        },
        {
          "name": "appId",
          "schema": "string",
          "required": false,
          "description": "Application identifier. Used together with an external ID to identify a virtual device."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Response body contains an array of geofence objects. `count` indicates the number of returned geofences, and `pageToken` indicates the next available page in the matching result set. If no geofences are found, an object with empty data array is returned."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/events/v3",
      "method": "/events/v3Get",
      "httpMethod": "get",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Gets event history",
      "parameters": [
        {
          "name": "before",
          "schema": "number",
          "required": false,
          "description": "Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 1 to the current time.\n"
        },
        {
          "name": "after",
          "schema": "number",
          "required": false,
          "description": "Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n"
        },
        {
          "name": "eventSource",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "eventType",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "ruleId",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "initialState",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        },
        {
          "name": "appId",
          "schema": "string",
          "required": false,
          "description": "Application identifier. Used together with an external ID to identify a virtual device."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/events/v3/health",
      "method": "/events/v3/healthGet",
      "httpMethod": "get",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/events/v3/statuses",
      "method": "/events/v3/statusesGet",
      "httpMethod": "get",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Gets the event statuses",
      "parameters": [
        {
          "name": "eventSource",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "eventType",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "trackingId",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "ruleId",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "geofenceId",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "shipments",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "before",
          "schema": "number",
          "required": false,
          "description": "Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 1 to the current time.\n"
        },
        {
          "name": "after",
          "schema": "number",
          "required": false,
          "description": "Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n"
        },
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        },
        {
          "name": "appId",
          "schema": "string",
          "required": false,
          "description": "Application identifier. Used together with an external ID to identify a virtual device."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/events/v3/statuses/deviceCounts",
      "method": "/events/v3/statuses/deviceCountsGet",
      "httpMethod": "get",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Gets the number of devices and shipments in each event state",
      "parameters": [
        {
          "name": "groupBy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "eventSource",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "trackingId",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "ruleId",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "geofenceId",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "shipments",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        },
        {
          "name": "appId",
          "schema": "string",
          "required": false,
          "description": "Application identifier. Used together with an external ID to identify a virtual device."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/events/v3/version",
      "method": "/events/v3/versionGet",
      "httpMethod": "get",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/events/v3/{trackingId}",
      "method": "/events/v3/{trackingId}Get",
      "httpMethod": "get",
      "tag": "Events",
      "typeScriptTag": "events",
      "description": "Gets event history for a device or a shipment",
      "parameters": [
        {
          "name": "trackingId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "before",
          "schema": "number",
          "required": false,
          "description": "Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 1 to the current time.\n"
        },
        {
          "name": "after",
          "schema": "number",
          "required": false,
          "description": "Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n"
        },
        {
          "name": "eventSource",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "eventType",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "ruleId",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "initialState",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        },
        {
          "name": "appId",
          "schema": "string",
          "required": false,
          "description": "Application identifier. Used together with an external ID to identify a virtual device."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/geofence-associations/v2/health",
      "method": "/geofenceAssociations/v2/healthGet",
      "httpMethod": "get",
      "tag": "Geofence Associations",
      "typeScriptTag": "geofenceAssociations",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/geofence-associations/v2/version",
      "method": "/geofenceAssociations/v2/versionGet",
      "httpMethod": "get",
      "tag": "Geofence Associations",
      "typeScriptTag": "geofenceAssociations",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/geofence-associations/v2/{geofenceId}/devices",
      "method": "/geofenceAssociations/v2/{geofenceId}/devicesGet",
      "httpMethod": "get",
      "tag": "Geofence Associations",
      "typeScriptTag": "geofenceAssociations",
      "description": "Gets all devices associated with a geofence",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "geofenceId",
          "schema": "string",
          "required": true,
          "description": "Geofence ID"
        },
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Response body contains an array of device objects, `count` indicates the number of returned devices,\nand `pageToken` is the next page token if available. \nIf no devices are found, an object with an empty data array is returned.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/geofence-associations/v2/{geofenceId}/{trackingId}",
      "method": "/geofenceAssociations/v2/{geofenceId}/{trackingId}Delete",
      "httpMethod": "delete",
      "tag": "Geofence Associations",
      "typeScriptTag": "geofenceAssociations",
      "description": "Disassociates a device and a geofence",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/geofence-associations/v2/{geofenceId}/{trackingId}",
      "method": "/geofenceAssociations/v2/{geofenceId}/{trackingId}Put",
      "httpMethod": "put",
      "tag": "Geofence Associations",
      "typeScriptTag": "geofenceAssociations",
      "description": "Associates a device with a geofence",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/geofences/v2",
      "method": "/geofences/v2Delete",
      "httpMethod": "delete",
      "tag": "Geofences",
      "typeScriptTag": "geofences",
      "description": "Deletes all geofences",
      "parameters": [
        {
          "name": "xConfirm",
          "schema": "string",
          "required": true,
          "description": "A safety measure that prevents one from accidentally deleting data.\n\nTo confirm that all entries should be deleted, set the value to `true`.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/geofences/v2",
      "method": "/geofences/v2Get",
      "httpMethod": "get",
      "tag": "Geofences",
      "typeScriptTag": "geofences",
      "description": "Gets all geofences",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        },
        {
          "name": "floor",
          "schema": "undefined",
          "description": "The floor of the indoor geofence"
        },
        {
          "name": "type",
          "schema": "array",
          "required": false,
          "description": "Type of a geofence"
        },
        {
          "name": "bbox",
          "schema": "array",
          "description": "Limit search to geofences intersecting the given bounding box."
        },
        {
          "name": "fields",
          "schema": "array",
          "required": false,
          "description": "Field names to filter a result object.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Response body contains an array of geofence objects. `count` indicates the number of returned geofences, and `pageToken` indicates the next available page in the matching result set. If no geofences are found, an object with empty data array is returned."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/geofences/v2",
      "method": "/geofences/v2Post",
      "httpMethod": "post",
      "tag": "Geofences",
      "typeScriptTag": "geofences",
      "description": "Creates a geofence",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/geofences/v2/health",
      "method": "/geofences/v2/healthGet",
      "httpMethod": "get",
      "tag": "Geofences",
      "typeScriptTag": "geofences",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/geofences/v2/trainingTest",
      "method": "/geofences/v2/trainingTestPost",
      "httpMethod": "post",
      "tag": "Geofences",
      "typeScriptTag": "geofences",
      "description": "Checks if a POI geofence training is possible with the given parameters",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/geofences/v2/version",
      "method": "/geofences/v2/versionGet",
      "httpMethod": "get",
      "tag": "Geofences",
      "typeScriptTag": "geofences",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/geofences/v2/{geofenceId}",
      "method": "/geofences/v2/{geofenceId}Delete",
      "httpMethod": "delete",
      "tag": "Geofences",
      "typeScriptTag": "geofences",
      "description": "Deletes a geofence",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/geofences/v2/{geofenceId}",
      "method": "/geofences/v2/{geofenceId}Get",
      "httpMethod": "get",
      "tag": "Geofences",
      "typeScriptTag": "geofences",
      "description": "Gets a single geofence",
      "parameters": [
        {
          "name": "fields",
          "schema": "array",
          "required": false,
          "description": "Field names to filter a result object.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Response body contains a single geofence object"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/geofences/v2/{geofenceId}",
      "method": "/geofences/v2/{geofenceId}Put",
      "httpMethod": "put",
      "tag": "Geofences",
      "typeScriptTag": "geofences",
      "description": "Updates a single geofence",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Response body contains a single geofence object"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/geofences/v2/{geofenceId}/poiTraining",
      "method": "/geofences/v2/{geofenceId}/poiTrainingPost",
      "httpMethod": "post",
      "tag": "Geofences",
      "typeScriptTag": "geofences",
      "description": "Trains a POI geofence",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/labels/v4/health",
      "method": "/labels/v4/healthGet",
      "httpMethod": "get",
      "tag": "Labels",
      "typeScriptTag": "labels",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/labels/v4/version",
      "method": "/labels/v4/versionGet",
      "httpMethod": "get",
      "tag": "Labels",
      "typeScriptTag": "labels",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/labels/v4/{resourceType}",
      "method": "/labels/v4/{resourceType}Get",
      "httpMethod": "get",
      "tag": "Labels",
      "typeScriptTag": "labels",
      "description": "Gets all labels of a resource type",
      "parameters": [
        {
          "name": "labels",
          "schema": "object",
          "required": false,
          "description": "A filter containing label key-value pairs."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page"
        },
        {
          "name": "fields",
          "schema": "array",
          "required": false,
          "description": "Field names to filter a result object.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/labels/v4/{resourceType}/keys",
      "method": "/labels/v4/{resourceType}/keysGet",
      "httpMethod": "get",
      "tag": "Labels",
      "typeScriptTag": "labels",
      "description": "Gets all label keys of a resource type",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/labels/v4/{resourceType}/keys/{key}/values",
      "method": "/labels/v4/{resourceType}/keys/{key}/valuesGet",
      "httpMethod": "get",
      "tag": "Labels",
      "typeScriptTag": "labels",
      "description": "Gets all values of a label",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/labels/v4/{resourceType}/{resourceId}",
      "method": "/labels/v4/{resourceType}/{resourceId}Delete",
      "httpMethod": "delete",
      "tag": "Labels",
      "typeScriptTag": "labels",
      "description": "Deletes all labels of a resource",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/labels/v4/{resourceType}/{resourceId}",
      "method": "/labels/v4/{resourceType}/{resourceId}Get",
      "httpMethod": "get",
      "tag": "Labels",
      "typeScriptTag": "labels",
      "description": "Gets all labels of a resource",
      "parameters": [
        {
          "name": "fields",
          "schema": "array",
          "required": false,
          "description": "Field names to filter a result object.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/labels/v4/{resourceType}/{resourceId}/batch",
      "method": "/labels/v4/{resourceType}/{resourceId}/batchPut",
      "httpMethod": "put",
      "tag": "Labels",
      "typeScriptTag": "labels",
      "description": "Creates a set of labels for a resource",
      "parameters": [
        {
          "name": "labels",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/labels/v4/{resourceType}/{resourceId}/{key}",
      "method": "/labels/v4/{resourceType}/{resourceId}/{key}Delete",
      "httpMethod": "delete",
      "tag": "Labels",
      "typeScriptTag": "labels",
      "description": "Deletes all labels of a resource by a label key",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/labels/v4/{resourceType}/{resourceId}/{key}/{value}",
      "method": "/labels/v4/{resourceType}/{resourceId}/{key}/{value}Delete",
      "httpMethod": "delete",
      "tag": "Labels",
      "typeScriptTag": "labels",
      "description": "Deletes a label of a resource",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/labels/v4/{resourceType}/{resourceId}/{key}/{value}",
      "method": "/labels/v4/{resourceType}/{resourceId}/{key}/{value}Put",
      "httpMethod": "put",
      "tag": "Labels",
      "typeScriptTag": "labels",
      "description": "Creates a label for a resource",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/largedata/v4",
      "method": "/largedata/v4Post",
      "httpMethod": "post",
      "tag": "Largedata",
      "typeScriptTag": "largedata",
      "description": "Creates a new data upload",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Response to data upload creation request"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/largedata/v4/devices/{trackingId}/metadata",
      "method": "/largedata/v4/devices/{trackingId}/metadataGet",
      "httpMethod": "get",
      "tag": "Largedata",
      "typeScriptTag": "largedata",
      "description": "Gets metadata listing for all large data for a device",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/largedata/v4/health",
      "method": "/largedata/v4/healthGet",
      "httpMethod": "get",
      "tag": "Largedata",
      "typeScriptTag": "largedata",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/largedata/v4/version",
      "method": "/largedata/v4/versionGet",
      "httpMethod": "get",
      "tag": "Largedata",
      "typeScriptTag": "largedata",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/largedata/v4/{dataId}",
      "method": "/largedata/v4/{dataId}Delete",
      "httpMethod": "delete",
      "tag": "Largedata",
      "typeScriptTag": "largedata",
      "description": "Deletes large data",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/largedata/v4/{dataId}",
      "method": "/largedata/v4/{dataId}Post",
      "httpMethod": "post",
      "tag": "Largedata",
      "typeScriptTag": "largedata",
      "description": "Completes data upload",
      "parameters": [
        {
          "name": "abort",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/largedata/v4/{dataId}/data",
      "method": "/largedata/v4/{dataId}/dataGet",
      "httpMethod": "get",
      "tag": "Largedata",
      "typeScriptTag": "largedata",
      "description": "Gets large data object",
      "parameters": [
        {
          "name": "offset",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "count",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/largedata/v4/{dataId}/metadata",
      "method": "/largedata/v4/{dataId}/metadataGet",
      "httpMethod": "get",
      "tag": "Largedata",
      "typeScriptTag": "largedata",
      "description": "Gets metadata for a large data object",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Metadata for a large data object"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/largedata/v4/{dataId}/parts",
      "method": "/largedata/v4/{dataId}/partsGet",
      "httpMethod": "get",
      "tag": "Largedata",
      "typeScriptTag": "largedata",
      "description": "Gets parts information listing for a large data object",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/largedata/v4/{dataId}/parts/{partNumber}",
      "method": "/largedata/v4/{dataId}/parts/{partNumber}Put",
      "httpMethod": "put",
      "tag": "Largedata",
      "typeScriptTag": "largedata",
      "description": "Uploads a part of a large data",
      "parameters": [
        {
          "name": "md5",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/locations/v4",
      "method": "/locations/v4Delete",
      "httpMethod": "delete",
      "tag": "Locations",
      "typeScriptTag": "locations",
      "description": "Deletes all locations",
      "parameters": [
        {
          "name": "xConfirm",
          "schema": "string",
          "required": true,
          "description": "A safety measure that prevents one from accidentally deleting data.\n\nTo confirm that all entries should be deleted, set the value to `true`.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/locations/v4",
      "method": "/locations/v4Get",
      "httpMethod": "get",
      "tag": "Locations",
      "typeScriptTag": "locations",
      "description": "Gets all locations",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page"
        },
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "geofenceId",
          "schema": "string",
          "required": false,
          "description": "Filter the results by `geofenceId`"
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "Filter locations by name. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n"
        },
        {
          "name": "street",
          "schema": "string",
          "required": false,
          "description": "Filter locations by street address. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n"
        },
        {
          "name": "city",
          "schema": "string",
          "required": false,
          "description": "Filter locations by city. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n"
        },
        {
          "name": "postalCode",
          "schema": "string",
          "required": false,
          "description": "Filter locations by postal code. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n"
        },
        {
          "name": "state",
          "schema": "string",
          "required": false,
          "description": "Filter locations by state. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n"
        },
        {
          "name": "country",
          "schema": "string",
          "required": false,
          "description": "Filter locations by country. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n"
        },
        {
          "name": "locationId",
          "schema": "string",
          "required": false,
          "description": "Filter locations by locationId wildcard.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n"
        },
        {
          "name": "sort",
          "schema": "undefined",
          "required": false,
          "description": "A paramater to specify field to sort by and order.\nThe following format can be used:\n'name:asc' sort by name in ascending order,\n'steet:desc' sort by street in descending order.\nAllowed fields to sort by:\nlocationId, name, street, city, postalCode, state, country.\n"
        },
        {
          "name": "externalLocationId",
          "schema": "string",
          "description": "Filter locations by external location id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/locations/v4",
      "method": "/locations/v4Post",
      "httpMethod": "post",
      "tag": "Locations",
      "typeScriptTag": "locations",
      "description": "Creates a location",
      "parameters": [
        {
          "name": "address",
          "schema": "object",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "externalLocationId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "geofenceId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "location",
          "schema": "object",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/locations/v4/health",
      "method": "/locations/v4/healthGet",
      "httpMethod": "get",
      "tag": "Locations",
      "typeScriptTag": "locations",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/locations/v4/version",
      "method": "/locations/v4/versionGet",
      "httpMethod": "get",
      "tag": "Locations",
      "typeScriptTag": "locations",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/locations/v4/{locationId}",
      "method": "/locations/v4/{locationId}Delete",
      "httpMethod": "delete",
      "tag": "Locations",
      "typeScriptTag": "locations",
      "description": "Deletes a location",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/locations/v4/{locationId}",
      "method": "/locations/v4/{locationId}Get",
      "httpMethod": "get",
      "tag": "Locations",
      "typeScriptTag": "locations",
      "description": "Gets a location details",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Location object body."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/locations/v4/{locationId}",
      "method": "/locations/v4/{locationId}Put",
      "httpMethod": "put",
      "tag": "Locations",
      "typeScriptTag": "locations",
      "description": "Updates a location details",
      "parameters": [
        {
          "name": "address",
          "schema": "object",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "externalLocationId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "geofenceId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "location",
          "schema": "object",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Location object body."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/metadata/v2/devices/batch",
      "method": "/metadata/v2/devices/batchPost",
      "httpMethod": "post",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Gets a batch of metadata of multiple devices or shipments",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/metadata/v2/devices/{trackingId}",
      "method": "/metadata/v2/devices/{trackingId}Delete",
      "httpMethod": "delete",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Deletes all metadata of a device or a shipment",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/metadata/v2/devices/{trackingId}",
      "method": "/metadata/v2/devices/{trackingId}Get",
      "httpMethod": "get",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Gets metadata of a device or a shipment",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/metadata/v2/devices/{trackingId}",
      "method": "/metadata/v2/devices/{trackingId}Put",
      "httpMethod": "put",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Creates or updates metadata of a device or a shipment",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/metadata/v2/geofences/batch",
      "method": "/metadata/v2/geofences/batchPost",
      "httpMethod": "post",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Gets a batch of metadata of multiple geofences",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/metadata/v2/geofences/{geofenceId}",
      "method": "/metadata/v2/geofences/{geofenceId}Delete",
      "httpMethod": "delete",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Deletes all metadata of a geofence",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/metadata/v2/geofences/{geofenceId}",
      "method": "/metadata/v2/geofences/{geofenceId}Get",
      "httpMethod": "get",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Gets metadata of a geofence",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/metadata/v2/geofences/{geofenceId}",
      "method": "/metadata/v2/geofences/{geofenceId}Put",
      "httpMethod": "put",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Creates or updates metadata of a geofence",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/metadata/v2/health",
      "method": "/metadata/v2/healthGet",
      "httpMethod": "get",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/metadata/v2/sensorRules/batch",
      "method": "/metadata/v2/sensorRules/batchPost",
      "httpMethod": "post",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Gets a batch of metadata for multiple sensor rules",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/metadata/v2/sensorRules/{sensorRuleId}",
      "method": "/metadata/v2/sensorRules/{sensorRuleId}Delete",
      "httpMethod": "delete",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Deletes all metadata of a sensor rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/metadata/v2/sensorRules/{sensorRuleId}",
      "method": "/metadata/v2/sensorRules/{sensorRuleId}Get",
      "httpMethod": "get",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Gets metadata of a sensor rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/metadata/v2/sensorRules/{sensorRuleId}",
      "method": "/metadata/v2/sensorRules/{sensorRuleId}Put",
      "httpMethod": "put",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Creates or updates metadata of a sensor rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/metadata/v2/version",
      "method": "/metadata/v2/versionGet",
      "httpMethod": "get",
      "tag": "Metadata",
      "typeScriptTag": "metadata",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/notifications/v3/health",
      "method": "/notifications/v3/healthGet",
      "httpMethod": "get",
      "tag": "Notifications",
      "typeScriptTag": "notifications",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/notifications/v3/registration/{channelId}",
      "method": "/notifications/v3/registration/{channelId}Delete",
      "httpMethod": "delete",
      "tag": "Notifications",
      "typeScriptTag": "notifications",
      "description": "Unregisters from notifications",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/notifications/v3/registration/{channelId}",
      "method": "/notifications/v3/registration/{channelId}Get",
      "httpMethod": "get",
      "tag": "Notifications",
      "typeScriptTag": "notifications",
      "description": "Gets a single notification channel information",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/notifications/v3/registration/{channelId}",
      "method": "/notifications/v3/registration/{channelId}Put",
      "httpMethod": "put",
      "tag": "Notifications",
      "typeScriptTag": "notifications",
      "description": "Updates a notification channel",
      "parameters": [
        {
          "name": "channelType",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "eventSource",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "eventType",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "initialState",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "ruleId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/notifications/v3/registrations",
      "method": "/notifications/v3/registrationsDelete",
      "httpMethod": "delete",
      "tag": "Notifications",
      "typeScriptTag": "notifications",
      "description": "Unregisters from all notifications",
      "parameters": [
        {
          "name": "xConfirm",
          "schema": "string",
          "required": true,
          "description": "A safety measure that prevents one from accidentally deleting data.\n\nTo confirm that all entries should be deleted, set the value to `true`.\n"
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/notifications/v3/registrations",
      "method": "/notifications/v3/registrationsGet",
      "httpMethod": "get",
      "tag": "Notifications",
      "typeScriptTag": "notifications",
      "description": "Gets all registered notification channels",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "channelType",
          "schema": "array",
          "required": false,
          "description": "Filter result by channelType.\n\nExample: `channelType[]=webhook`, `channelType[]=browserPull,email`\n"
        },
        {
          "name": "userId",
          "schema": "string",
          "required": false,
          "description": "User ID. Can be used by the project admin to filter email and browser pull notification channels by subscriber.\n"
        },
        {
          "name": "emailBounce",
          "schema": "boolean",
          "required": false,
          "description": "Filters by `emailBounce` property. When set to `true`, returns the email channels which are not active anymore\ndue to email bounce. When set to `false`, returns all the channels which are active (and not only email channels).\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Response body contains an array of notification registration objects, count indicating the number of registrations,\nand pageToken if available. If no registrations are found, an object with empty data array is returned.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/notifications/v3/registrations",
      "method": "/notifications/v3/registrationsPost",
      "httpMethod": "post",
      "tag": "Notifications",
      "typeScriptTag": "notifications",
      "description": "Registers for notifications",
      "parameters": [
        {
          "name": "projectId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "required": false,
          "description": "User Id.\n"
        },
        {
          "name": "channelType",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "eventSource",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "eventType",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "initialState",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "ruleId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/notifications/v3/version",
      "method": "/notifications/v3/versionGet",
      "httpMethod": "get",
      "tag": "Notifications",
      "typeScriptTag": "notifications",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/registry/v2/devices/{deviceOrExternalId}",
      "method": "/registry/v2/devices/{deviceOrExternalId}Delete",
      "httpMethod": "delete",
      "tag": "Registry",
      "typeScriptTag": "registry",
      "description": "Deactivates a device.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/registry/v2/devices/{deviceOrExternalId}",
      "method": "/registry/v2/devices/{deviceOrExternalId}Get",
      "httpMethod": "get",
      "tag": "Registry",
      "typeScriptTag": "registry",
      "description": "Gets the trackingId for a device",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/registry/v2/devices/{deviceOrExternalId}",
      "method": "/registry/v2/devices/{deviceOrExternalId}Put",
      "httpMethod": "put",
      "tag": "Registry",
      "typeScriptTag": "registry",
      "description": "Claims a device",
      "parameters": [
        {
          "name": "projectId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ownerAppId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/registry/v2/health",
      "method": "/registry/v2/healthGet",
      "httpMethod": "get",
      "tag": "Registry",
      "typeScriptTag": "registry",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/registry/v2/licenses",
      "method": "/registry/v2/licensesGet",
      "httpMethod": "get",
      "tag": "Registry",
      "typeScriptTag": "registry",
      "description": "Gets a list user projects along with the license information",
      "parameters": [
        {
          "name": "startIndex",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "endIndex",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "projectIds",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "projectTypes",
          "schema": "undefined",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/registry/v2/version",
      "method": "/registry/v2/versionGet",
      "httpMethod": "get",
      "tag": "Registry",
      "typeScriptTag": "registry",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/registry/v2/{appId}/devices",
      "method": "/registry/v2/{appId}/devicesGet",
      "httpMethod": "get",
      "tag": "Registry",
      "typeScriptTag": "registry",
      "description": "Lists all the devices provisioned by a user",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Project appId of the user's project"
        },
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        },
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/registry/v2/{appId}/devices",
      "method": "/registry/v2/{appId}/devicesPost",
      "httpMethod": "post",
      "tag": "Registry",
      "typeScriptTag": "registry",
      "description": "Creates licenses for multiple devices",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Project appId of the user's project"
        },
        {
          "name": "autoclaim",
          "schema": "boolean",
          "required": false,
          "description": "If set to `true`, the licenses are created and devices are immediately claimed by the same user. Supported only with `deviceId` array in body, and not with the `count` parameter."
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/registry/v2/{appId}/licenseCount",
      "method": "/registry/v2/{appId}/licenseCountGet",
      "httpMethod": "get",
      "tag": "Registry",
      "typeScriptTag": "registry",
      "description": "Gets a number of device licenses provisioned by a user",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Project appId of the user's project"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/registry/v2/{appId}/one-device",
      "method": "/registry/v2/{appId}/oneDevicePost",
      "httpMethod": "post",
      "tag": "Registry",
      "typeScriptTag": "registry",
      "description": "Creates a license for a single physical device",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Project appId of the user's project"
        },
        {
          "name": "autoclaim",
          "schema": "boolean",
          "required": false,
          "description": "If set to `true`, the device license is created and the device is immediately claimed by the same user."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "A JSON object containing the newly created device credentials"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/registry/v2/{jobId}/results",
      "method": "/registry/v2/{jobId}/resultsGet",
      "httpMethod": "get",
      "tag": "Registry",
      "typeScriptTag": "registry",
      "description": "Gets the multiple device license request job results",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "jobId",
          "schema": "string",
          "required": true,
          "description": "An asynchronous job ID. UUID v.4.0."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/registry/v2/{jobId}/status",
      "method": "/registry/v2/{jobId}/statusGet",
      "httpMethod": "get",
      "tag": "Registry",
      "typeScriptTag": "registry",
      "description": "Gets the multiple device license request job status",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "jobId",
          "schema": "string",
          "required": true,
          "description": "An asynchronous job ID. UUID v.4.0."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/registry/v2/{trackingId}",
      "method": "/registry/v2/{trackingId}Delete",
      "httpMethod": "delete",
      "tag": "Registry",
      "typeScriptTag": "registry",
      "description": "Unclaims a device",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/registry/v2/{trackingId}",
      "method": "/registry/v2/{trackingId}Get",
      "httpMethod": "get",
      "tag": "Registry",
      "typeScriptTag": "registry",
      "description": "Gets the deviceId",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/registry/v4/resources/{resourceType}/find",
      "method": "/registry/v4/resources/{resourceType}/findPost",
      "httpMethod": "post",
      "tag": "Registry",
      "typeScriptTag": "registry",
      "description": "Gets all resources of a resource type",
      "parameters": [
        {
          "name": "filters",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/v4",
      "method": "/reports/v4Post",
      "httpMethod": "post",
      "tag": "Reports",
      "typeScriptTag": "reports",
      "description": "Starts report creation",
      "parameters": [
        {
          "name": "end",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ruleId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "start",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/v4/health",
      "method": "/reports/v4/healthGet",
      "httpMethod": "get",
      "tag": "Reports",
      "typeScriptTag": "reports",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/reports/v4/version",
      "method": "/reports/v4/versionGet",
      "httpMethod": "get",
      "tag": "Reports",
      "typeScriptTag": "reports",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/reports/v4/{reportId}",
      "method": "/reports/v4/{reportId}Get",
      "httpMethod": "get",
      "tag": "Reports",
      "typeScriptTag": "reports",
      "description": "Gets reports",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page"
        },
        {
          "name": "measure",
          "schema": "string",
          "required": false,
          "description": "Defines the report metric to be calculated. \nThe metrics are always calculated over a time period, either over each interval specified \nby the `interval` parameter (for example, over a week) or over the whole time period of the report.\n\n* `duration`: duration of the event\n  * _\"The asset dwelled for 45 hours during week 2. It was in detention for 4 hours.\"_\n* `occurrence`: total number of the event occurrences\n  * _\"During week 3, the asset was in detention 2 times. During the past month it had 7 individual dwelling periods.\"_\n* `day`: the number of days the event lasted\n  * _\"The asset was utilized for 3 days during week 4.\"_\n* `asset`: the number of assets that generated the event\n  * _\"On Monday 5 assets were in detention. On Tuesday 16 assets were in detention.\"_\n"
        },
        {
          "name": "interval",
          "schema": "string",
          "required": false,
          "description": "Defines an interval, which can be a day, a week or a month, that will be used to group \nthe report results.\n\nWhen the `interval` parameter is provided, the response will be an array of `timestamp`-`value` \npairs where the `timestamp` defines the beginning of the interval and the `value` is the specified \nreport metric's value calculated over the interval time.\n"
        },
        {
          "name": "trackingId",
          "schema": "string",
          "required": false,
          "description": "Tracking ID.\nProvide a tracking ID to get a report on a specific asset.\n\n> Note that in the report context an asset is a device.\n\nFor example, to get a report on how many times the specified asset was in detention during each week,\ncreate a request specifying the following:\n* `reportId`: ID of a report created for a detention rule\n* `trackingId`: tracking ID\n* `measure`: 'occurrence'\n* `interval`: 'week'\n"
        },
        {
          "name": "geofenceId",
          "schema": "string",
          "required": false,
          "description": "ID of the geofence.\n\nOne can provide a geofence ID in case one wants to get reports on a specific geofence.\nThis parameter can only be used with reports created for a dwelling rule type.\n\nFor example, to get a report on assets' average dwelling time in the specified geofence \nduring each week, create a request specifying the following:\n* `reportId`: ID of a report created for a dwelling rule\n* `measure`: 'duration'\n* `groupBy`: 'asset'\n* `interval`: 'week'\n* `method`: 'average'\n* `geofenceId`: geofence ID\n"
        },
        {
          "name": "groupBy",
          "schema": "string",
          "required": false,
          "description": "Defines whether the report metrics, such as cumulative or average, \nare calculated per asset or per geofence.\n\nThe parameter can have a value 'geofence' only with reports created for a dwelling rule.\n\nTo get a report on how many times on average assets were in detention during each time interval,\ncreate a request specifying the following:\n* `reportId`: ID of a report created for a detention rule\n* `groupBy`: 'asset'\n* `method`: 'average'\n* `measure`: 'occurrence'\n\nTo get a report on how long all assets dwelled inside each geofence during the report period,\ncreate a request specifying the following:\n* `reportId`: ID of a report created for a dwelling rule\n* `groupBy`: 'geofence'\n* `measure`: 'duration'\n\nTo get a report on how long each asset dwelled (inside any geofence) during the report period, \ncreate a request specifying the following:\n* `reportId`: ID of a report created for a dwelling rule\n* `groupBy`: 'asset'\n* `measure`: 'duration'\n"
        },
        {
          "name": "method",
          "schema": "string",
          "required": false,
          "description": "Defines the calculation method. \nThe parameter `method` can only be provided along with `interval`.\n\nThe parameter value can be `percentage` only when `measure` is 'asset'.\n\nFor example, to get a report on percentage of all assets that were in use during each week,\ncreate a request specifying the following:\n* `reportId`: ID of a report created for a utilization rule\n* `interval`: 'week'\n* `method`: 'percentage'\n* `measure`: 'asset'\n\nWhen `method` is set to 'cumulative' or 'average' and `measure` is set to 'duration' or 'occurrence',\nthe `groupBy` parameter needs to be provided also. \nFor example, to get a report on how long all assets dwelled in total in the specified geofence during\neach week, create a request specifying the following:\n* `reportId`: ID of a report created for a dwelling rule\n* `geofenceId`: ID of a geofence\n* `interval`: 'week'\n* `method`: 'cumulative'\n* `measure`: 'duration'\n* `groupBy`: 'asset'\n\nWhen `method` is set to 'cumulative' or 'average' and `measure` is set to 'day',\nthe `groupBy` parameter is automatically set to 'asset'. \nFor example, to get a report on how many days on average assets were in use during each month, \ncreate a request specifying the following:\n* `reportId`: ID of a report created for a utilization rule\n* `interval`: 'month'\n* `method`: 'average'\n* `measure`: 'day'\n* `groupBy`: 'asset'\n"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Defines how the items are sorted.\n* If `interval` is provided, the default is `sort`=`timestamp:asc`\n* If `interval` is not provided, the default is `sort`=`value:desc`\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rules/v4",
      "method": "/rules/v4Delete",
      "httpMethod": "delete",
      "tag": "Rules",
      "typeScriptTag": "rules",
      "description": "Deletes all rules",
      "parameters": [
        {
          "name": "xConfirm",
          "schema": "string",
          "required": true,
          "description": "A safety measure that prevents one from accidentally deleting data.\n\nTo confirm that all entries should be deleted, set the value to `true`.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/rules/v4",
      "method": "/rules/v4Get",
      "httpMethod": "get",
      "tag": "Rules",
      "typeScriptTag": "rules",
      "description": "Gets all rules",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/rules/v4",
      "method": "/rules/v4Post",
      "httpMethod": "post",
      "tag": "Rules",
      "typeScriptTag": "rules",
      "description": "Creates a rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/rules/v4/health",
      "method": "/rules/v4/healthGet",
      "httpMethod": "get",
      "tag": "Rules",
      "typeScriptTag": "rules",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rules/v4/version",
      "method": "/rules/v4/versionGet",
      "httpMethod": "get",
      "tag": "Rules",
      "typeScriptTag": "rules",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/rules/v4/{ruleId}",
      "method": "/rules/v4/{ruleId}Delete",
      "httpMethod": "delete",
      "tag": "Rules",
      "typeScriptTag": "rules",
      "description": "Deletes a rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/rules/v4/{ruleId}",
      "method": "/rules/v4/{ruleId}Get",
      "httpMethod": "get",
      "tag": "Rules",
      "typeScriptTag": "rules",
      "description": "Gets a single rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rules/v4/{ruleId}",
      "method": "/rules/v4/{ruleId}Put",
      "httpMethod": "put",
      "tag": "Rules",
      "typeScriptTag": "rules",
      "description": "Updates a single rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/sensors/v3",
      "method": "/sensors/v3Delete",
      "httpMethod": "delete",
      "tag": "Sensors",
      "typeScriptTag": "sensors",
      "description": "Deletes all sensor rules",
      "parameters": [
        {
          "name": "xConfirm",
          "schema": "string",
          "required": true,
          "description": "A safety measure that prevents one from accidentally deleting data.\n\nTo confirm that all entries should be deleted, set the value to `true`.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/sensors/v3",
      "method": "/sensors/v3Get",
      "httpMethod": "get",
      "tag": "Sensors",
      "typeScriptTag": "sensors",
      "description": "Gets all sensor rules",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Response body contains an array of sensor rule objects, `count` indicates the number of returned sensor rules,\nand `pageToken` is the next page token if available.\n\nIf no sensor rules are found, an object with an empty data array is returned.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/sensors/v3",
      "method": "/sensors/v3Post",
      "httpMethod": "post",
      "tag": "Sensors",
      "typeScriptTag": "sensors",
      "description": "Creates a sensor rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/sensors/v3/health",
      "method": "/sensors/v3/healthGet",
      "httpMethod": "get",
      "tag": "Sensors",
      "typeScriptTag": "sensors",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/sensors/v3/version",
      "method": "/sensors/v3/versionGet",
      "httpMethod": "get",
      "tag": "Sensors",
      "typeScriptTag": "sensors",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/sensors/v3/{sensorRuleId}",
      "method": "/sensors/v3/{sensorRuleId}Delete",
      "httpMethod": "delete",
      "tag": "Sensors",
      "typeScriptTag": "sensors",
      "description": "Deletes a sensor rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/sensors/v3/{sensorRuleId}",
      "method": "/sensors/v3/{sensorRuleId}Get",
      "httpMethod": "get",
      "tag": "Sensors",
      "typeScriptTag": "sensors",
      "description": "Gets a single sensor rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Response body contains a single sensor rule object"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/sensors/v3/{sensorRuleId}",
      "method": "/sensors/v3/{sensorRuleId}Put",
      "httpMethod": "put",
      "tag": "Sensors",
      "typeScriptTag": "sensors",
      "description": "Updates a single sensor rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shadows/v2/batch",
      "method": "/shadows/v2/batchPost",
      "httpMethod": "post",
      "tag": "Shadows",
      "typeScriptTag": "shadows",
      "description": "Gets a batch of device shadows",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "after",
          "schema": "number",
          "required": false,
          "description": "Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n"
        },
        {
          "name": "appId",
          "schema": "string",
          "required": false,
          "description": "Application identifier. Used together with an external ID to identify a virtual device."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/shadows/v2/health",
      "method": "/shadows/v2/healthGet",
      "httpMethod": "get",
      "tag": "Shadows",
      "typeScriptTag": "shadows",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/shadows/v2/version",
      "method": "/shadows/v2/versionGet",
      "httpMethod": "get",
      "tag": "Shadows",
      "typeScriptTag": "shadows",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/shadows/v2/{trackingId}",
      "method": "/shadows/v2/{trackingId}Delete",
      "httpMethod": "delete",
      "tag": "Shadows",
      "typeScriptTag": "shadows",
      "description": "Clears a device shadow",
      "parameters": [
        {
          "name": "trackingId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "desired",
          "schema": "boolean",
          "required": false,
          "description": "If `true`, all the values of the `desired` shadow will be cleared"
        },
        {
          "name": "reported",
          "schema": "boolean",
          "required": false,
          "description": "If `true`, all the values of the `reported` shadow will be cleared"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shadows/v2/{trackingId}",
      "method": "/shadows/v2/{trackingId}Get",
      "httpMethod": "get",
      "tag": "Shadows",
      "typeScriptTag": "shadows",
      "description": "Gets a device shadow",
      "parameters": [
        {
          "name": "trackingId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The data that Shadows persists for each device.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shadows/v2/{trackingId}",
      "method": "/shadows/v2/{trackingId}Put",
      "httpMethod": "put",
      "tag": "Shadows",
      "typeScriptTag": "shadows",
      "description": "Updates a device shadow",
      "parameters": [
        {
          "name": "contentLength",
          "schema": "number",
          "required": true,
          "description": "The size of the shadow in bytes. The size is validated against the\nmaximum limit of 1000 bytes.\n"
        },
        {
          "name": "trackingId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "desired",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The data that Shadows persists for each device.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "413",
          "description": ""
        }
      ]
    },
    {
      "url": "/shadows/v2/{trackingId}/{state}",
      "method": "/shadows/v2/{trackingId}/{state}Get",
      "httpMethod": "get",
      "tag": "Shadows",
      "typeScriptTag": "shadows",
      "description": "Gets reported or desired state object of a device",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shadows/v2/{trackingId}/{state}/{selector}",
      "method": "/shadows/v2/{trackingId}/{state}/{selector}Get",
      "httpMethod": "get",
      "tag": "Shadows",
      "typeScriptTag": "shadows",
      "description": "Gets a value of a shadow property",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/shadows/v4",
      "method": "/shadows/v4Get",
      "httpMethod": "get",
      "tag": "Shadows",
      "typeScriptTag": "shadows",
      "description": "Gets all shadows",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page"
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "If provided returns the shadows for which `reported.timestamp` is greater than given `after` parameter."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Defines how the items are sorted.\nThe default sort is `sort=trackingId:asc`\n"
        },
        {
          "name": "bbox",
          "schema": "array",
          "description": "Limit search to shadows, whose position intersects the given bounding box.\nThe `bbox` array consist of latitude and longitude of Northwest and Southeast corners.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipment-reports/v4",
      "method": "/shipmentReports/v4Post",
      "httpMethod": "post",
      "tag": "Shipment Reports",
      "typeScriptTag": "shipmentReports",
      "description": "Starts shipment report generation",
      "parameters": [
        {
          "name": "endedAfter",
          "schema": "string",
          "description": ""
        },
        {
          "name": "endedBefore",
          "schema": "string",
          "description": ""
        },
        {
          "name": "shipmentPlanIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "startedAfter",
          "schema": "string",
          "description": ""
        },
        {
          "name": "startedBefore",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipment-reports/v4/health",
      "method": "/shipmentReports/v4/healthGet",
      "httpMethod": "get",
      "tag": "Shipment Reports",
      "typeScriptTag": "shipmentReports",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipment-reports/v4/version",
      "method": "/shipmentReports/v4/versionGet",
      "httpMethod": "get",
      "tag": "Shipment Reports",
      "typeScriptTag": "shipmentReports",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/shipment-reports/v4/{shipmentReportId}/status",
      "method": "/shipmentReports/v4/{shipmentReportId}/statusGet",
      "httpMethod": "get",
      "tag": "Shipment Reports",
      "typeScriptTag": "shipmentReports",
      "description": "Gets status of generation of the shipment report",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipment-reports/v4/{shipmentReportId}/summary",
      "method": "/shipmentReports/v4/{shipmentReportId}/summaryGet",
      "httpMethod": "get",
      "tag": "Shipment Reports",
      "typeScriptTag": "shipmentReports",
      "description": "Gets summary of the shipment report",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipment-reports/v4/{shipmentReportId}/{metric}",
      "method": "/shipmentReports/v4/{shipmentReportId}/{metric}Get",
      "httpMethod": "get",
      "tag": "Shipment Reports",
      "typeScriptTag": "shipmentReports",
      "description": "Gets metrics of the shipment report",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipments/v4",
      "method": "/shipments/v4Delete",
      "httpMethod": "delete",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Deletes all shipments",
      "parameters": [
        {
          "name": "xConfirm",
          "schema": "string",
          "required": true,
          "description": "A safety measure that prevents one from accidentally deleting data.\n\nTo confirm that all entries should be deleted, set the value to `true`.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipments/v4",
      "method": "/shipments/v4Get",
      "httpMethod": "get",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Gets all shipments",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page"
        },
        {
          "name": "status",
          "schema": "string",
          "required": false,
          "description": "Filter the results by shipment status"
        },
        {
          "name": "startedBefore",
          "schema": "string",
          "required": false,
          "description": "Return only shipments that started before the specified timestamp"
        },
        {
          "name": "startedAfter",
          "schema": "string",
          "required": false,
          "description": "Return only shipments that started after the specified timestamp"
        },
        {
          "name": "endedBefore",
          "schema": "string",
          "required": false,
          "description": "Return only shipments that ended before the specified timestamp"
        },
        {
          "name": "endedAfter",
          "schema": "string",
          "required": false,
          "description": "Return only shipments that ended after the specified timestamp"
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "Filter shipments by name. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n"
        },
        {
          "name": "shipmentPlanId",
          "schema": "string",
          "required": false,
          "description": "Return only shipments that have been instantiated from the specified `shipmentPlanId`"
        },
        {
          "name": "shipmentId",
          "schema": "string",
          "required": false,
          "description": "Filter shipments by `shipmentId`\nMatching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n"
        },
        {
          "name": "isSubShipment",
          "schema": "boolean",
          "required": false,
          "description": "Returns only shipments marked as subShipments"
        },
        {
          "name": "createdBefore",
          "schema": "string",
          "required": false,
          "description": "Return only shipments that have been created before specified timestamp"
        },
        {
          "name": "createdAfter",
          "schema": "string",
          "required": false,
          "description": "Return only shipments that have been created after specified timestamp"
        },
        {
          "name": "sort",
          "schema": "undefined",
          "required": false,
          "description": "A paramater to specify field to sort by and order.\nThe following format can be used:\n'name:asc' sort by name in ascending order,\n'shipmentId:desc' sort by shipmentId in descending order.\nAllowed fields to sort by:\nshipmentId, name, status, startedAt, createdAt, endedAt, providedEtd,\nprovidedEta, calculatedEtd.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipments/v4",
      "method": "/shipments/v4Post",
      "httpMethod": "post",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Creates a shipment",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipments/v4/health",
      "method": "/shipments/v4/healthGet",
      "httpMethod": "get",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipments/v4/plans",
      "method": "/shipments/v4/plansDelete",
      "httpMethod": "delete",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Deletes all shipment plans",
      "parameters": [
        {
          "name": "xConfirm",
          "schema": "string",
          "required": true,
          "description": "A safety measure that prevents one from accidentally deleting data.\n\nTo confirm that all entries should be deleted, set the value to `true`.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipments/v4/plans",
      "method": "/shipments/v4/plansGet",
      "httpMethod": "get",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Lists all shipment plans",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page"
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "Filter shipments by name. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n"
        },
        {
          "name": "shipmentPlanId",
          "schema": "string",
          "required": false,
          "description": "Return only shipment plans that have been instantiated from the specified `shipmentPlanId`\nMatching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n"
        },
        {
          "name": "locationId",
          "schema": "string",
          "required": false,
          "description": "Return only shipments that have been instantiated from the specified `locationId`\n"
        },
        {
          "name": "createdBefore",
          "schema": "string",
          "required": false,
          "description": "Return only shipments that have been created before specified timestamp"
        },
        {
          "name": "createdAfter",
          "schema": "string",
          "required": false,
          "description": "Return only shipments that have been created after specified timestamp"
        },
        {
          "name": "isSubShipment",
          "schema": "boolean",
          "required": false,
          "description": "Returns only shipments marked as subShipments"
        },
        {
          "name": "sort",
          "schema": "undefined",
          "required": false,
          "description": "A paramater to specify field to sort by and order.\nAllowed fields to sort by: shipmentPlanId, name, createdAt\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipments/v4/plans",
      "method": "/shipments/v4/plansPost",
      "httpMethod": "post",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Creates a shipment plan",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipments/v4/plans/{shipmentPlanId}",
      "method": "/shipments/v4/plans/{shipmentPlanId}Delete",
      "httpMethod": "delete",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Deletes a shipment plan",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipments/v4/plans/{shipmentPlanId}",
      "method": "/shipments/v4/plans/{shipmentPlanId}Get",
      "httpMethod": "get",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Gets a shipment plan details",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipments/v4/plans/{shipmentPlanId}",
      "method": "/shipments/v4/plans/{shipmentPlanId}Patch",
      "httpMethod": "patch",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Updates a shipment plan details",
      "parameters": [
        {
          "name": "autoStart",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ruleIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "subShipment",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipments/v4/plans/{shipmentPlanId}/{segmentPlanId}",
      "method": "/shipments/v4/plans/{shipmentPlanId}/{segmentPlanId}Get",
      "httpMethod": "get",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Gets a segment plan details",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Segment plan details"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipments/v4/plans/{shipmentPlanId}/{segmentPlanId}",
      "method": "/shipments/v4/plans/{shipmentPlanId}/{segmentPlanId}Patch",
      "httpMethod": "patch",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Updates a segment plan details",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "durationS",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "trackingId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "transportMode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipments/v4/version",
      "method": "/shipments/v4/versionGet",
      "httpMethod": "get",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/shipments/v4/{shipmentId}",
      "method": "/shipments/v4/{shipmentId}Delete",
      "httpMethod": "delete",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Deletes a shipment",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipments/v4/{shipmentId}",
      "method": "/shipments/v4/{shipmentId}Get",
      "httpMethod": "get",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Gets a shipment details",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Shipment details"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipments/v4/{shipmentId}",
      "method": "/shipments/v4/{shipmentId}Patch",
      "httpMethod": "patch",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Updates a shipment details",
      "parameters": [
        {
          "name": "autoStart",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "providedEta",
          "schema": "string",
          "description": ""
        },
        {
          "name": "providedEtd",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ruleIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "segments",
          "schema": "array",
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "description": ""
        },
        {
          "name": "subShipment",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipments/v4/{shipmentId}/{segmentId}",
      "method": "/shipments/v4/{shipmentId}/{segmentId}Get",
      "httpMethod": "get",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Gets a segment details",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Segment details"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipments/v4/{shipmentId}/{segmentId}",
      "method": "/shipments/v4/{shipmentId}/{segmentId}Patch",
      "httpMethod": "patch",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Updates a segment details",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "providedEta",
          "schema": "string",
          "description": ""
        },
        {
          "name": "providedEtd",
          "schema": "string",
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "description": ""
        },
        {
          "name": "trackingId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "transportMode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipments/v4/{trackingId}/segments",
      "method": "/shipments/v4/{trackingId}/segmentsGet",
      "httpMethod": "get",
      "tag": "Shipments",
      "typeScriptTag": "shipments",
      "description": "Gets segments assigned to a device",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page"
        },
        {
          "name": "status",
          "schema": "string",
          "required": false,
          "description": "Filter the results by segment status"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/traces/v2/health",
      "method": "/traces/v2/healthGet",
      "httpMethod": "get",
      "tag": "Traces",
      "typeScriptTag": "traces",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/traces/v2/version",
      "method": "/traces/v2/versionGet",
      "httpMethod": "get",
      "tag": "Traces",
      "typeScriptTag": "traces",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/traces/v2/{trackingId}",
      "method": "/traces/v2/{trackingId}Delete",
      "httpMethod": "delete",
      "tag": "Traces",
      "typeScriptTag": "traces",
      "description": "Deletes all the device traces and events",
      "parameters": [
        {
          "name": "trackingId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/traces/v2/{trackingId}",
      "method": "/traces/v2/{trackingId}Get",
      "httpMethod": "get",
      "tag": "Traces",
      "typeScriptTag": "traces",
      "description": "Gets traces within a specified time range",
      "parameters": [
        {
          "name": "trackingId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "before",
          "schema": "number",
          "required": false,
          "description": "Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 1 to the current time.\n"
        },
        {
          "name": "after",
          "schema": "number",
          "required": false,
          "description": "Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n"
        },
        {
          "name": "outliers",
          "schema": "boolean",
          "required": false,
          "description": "Flag specifying if only outliers (`true`) or only nonoutliers (`false`)\nare to be returned. If the parameter is not present both nonoutlier\nand outlier traces are returned.\n"
        },
        {
          "name": "mode",
          "schema": "string",
          "required": false,
          "description": "Tracker mode.\n"
        },
        {
          "name": "smooth",
          "schema": "boolean",
          "required": false,
          "description": "Flag telling if smoothed traces (true) or non-smoothed (false)\ntraces should get returned. By default the traces are not smoothed.\n\nThe smoothing will have an effect on to the stationary trace points only.\n"
        },
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of records per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The response body contains an array of traces, `count` is the number of\nreturned items and `pageToken` is the next page token if available.\n\nIf no traces are found, an object with an empty data array is returned.\n\nTraces are sorted in descending order based on their timestamps.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/transitions/v2/devices/{trackingId}",
      "method": "/transitions/v2/devices/{trackingId}Get",
      "httpMethod": "get",
      "tag": "Transitions",
      "typeScriptTag": "transitions",
      "description": "Gets transitions for a device",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "trackingId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "appId",
          "schema": "string",
          "required": false,
          "description": "Application identifier. Used together with an external ID to identify a virtual device."
        },
        {
          "name": "before",
          "schema": "number",
          "required": false,
          "description": "Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 1 to the current time.\n"
        },
        {
          "name": "after",
          "schema": "number",
          "required": false,
          "description": "Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n"
        },
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The response body contains an array of transitions, `count` is the number of\nreturned items and `pageToken` is the next page token if available.\n\nIf no transitions are found, an object with an empty data array is\nreturned.\n\nTransitions are sorted in descending order based on their timestamps.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/transitions/v2/health",
      "method": "/transitions/v2/healthGet",
      "httpMethod": "get",
      "tag": "Transitions",
      "typeScriptTag": "transitions",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/transitions/v2/version",
      "method": "/transitions/v2/versionGet",
      "httpMethod": "get",
      "tag": "Transitions",
      "typeScriptTag": "transitions",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/users/v2/devices",
      "method": "/users/v2/devicesGet",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Gets all devices claimed by a project",
      "parameters": [
        {
          "name": "projectId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "pageToken",
          "schema": "string",
          "required": false,
          "description": "A token from the previously returned response to retrieve the specified page."
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/v2/health",
      "method": "/users/v2/healthGet",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/v2/login",
      "method": "/users/v2/loginPost",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Gets a user access token",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "realm",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/v2/refresh",
      "method": "/users/v2/refreshPost",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Gets a renewed user access token",
      "parameters": [
        {
          "name": "accessToken",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "refreshToken",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/v2/tokenExchange",
      "method": "/users/v2/tokenExchangePost",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Gets a project-scoped user access token",
      "parameters": [
        {
          "name": "accessToken",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "scope",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/v2/version",
      "method": "/users/v2/versionGet",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/v2/",
      "method": "/v2/Post",
      "httpMethod": "post",
      "tag": "Ingestion",
      "typeScriptTag": "ingestion",
      "description": "Ingests data and receives a shadow",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "authorization",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "async",
          "schema": "boolean",
          "required": false,
          "description": "If set to `true`, ingests the device data and responds immediately with an empty response body."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The desired shadow of the device.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "413",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/health",
      "method": "/v2/healthGet",
      "httpMethod": "get",
      "tag": "Ingestion",
      "typeScriptTag": "ingestion",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/timestamp",
      "method": "/v2/timestampGet",
      "httpMethod": "get",
      "tag": "Ingestion",
      "typeScriptTag": "ingestion",
      "description": "Gets the current timestamp",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/token",
      "method": "/v2/tokenPost",
      "httpMethod": "post",
      "tag": "Ingestion",
      "typeScriptTag": "ingestion",
      "description": "Requests a token for a registered device",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "authorization",
          "schema": "string",
          "required": true,
          "description": "Signed OAuth 1.0 header"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "412",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/version",
      "method": "/v2/versionGet",
      "httpMethod": "get",
      "tag": "Ingestion",
      "typeScriptTag": "ingestion",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    },
    {
      "url": "/v3/",
      "method": "/v3/Post",
      "httpMethod": "post",
      "tag": "Ingestion",
      "typeScriptTag": "ingestion",
      "description": "Ingests data for a device and receives a shadow",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "authorization",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "async",
          "schema": "boolean",
          "required": false,
          "description": "If set to `true`, ingests the device data and responds immediately with an empty response body."
        },
        {
          "name": "appId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "data",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The desired shadow of the device.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "413",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/v3/batch",
      "method": "/v3/batchPost",
      "httpMethod": "post",
      "tag": "Ingestion",
      "typeScriptTag": "ingestion",
      "description": "Ingests data for multiple devices",
      "parameters": [
        {
          "name": "xRequestId",
          "schema": "string",
          "required": false,
          "description": "ID used for correlating requests within HERE Tracking. Used for logging and error reporting.\n\nMust be a valid UUIDv4.\n"
        },
        {
          "name": "authorization",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "appId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "data",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "413",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        }
      ]
    },
    {
      "url": "/v3/health",
      "method": "/v3/healthGet",
      "httpMethod": "get",
      "tag": "Ingestion",
      "typeScriptTag": "ingestion",
      "description": "Gets service health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v3/version",
      "method": "/v3/versionGet",
      "httpMethod": "get",
      "tag": "Ingestion",
      "typeScriptTag": "ingestion",
      "description": "Gets service version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK\nService returns its current version number\nschema:\n    type: object\n    properties:\n        \"service-name\":\n            type: string\n            description: Version of service\n    example:\n        servicename: \"1.0.0\"\n"
        }
      ]
    }
  ],
  "apiBaseUrl": "https://tracking.api.here.com/",
  "apiDescription": "HERE Tracking is a cloud product designed to address location tracking problems for a wide range of Location IoT industry verticals.\n\nHERE Tracking also includes end-user mobile and web applications that can be used to demonstrate the product.",
  "apiTitle": "HERE Tracking",
  "endpoints": 159,
  "sdkMethods": 303,
  "schemas": 279,
  "parameters": 357,
  "difficultyScore": 531.75,
  "difficulty": "Hard"
}