{
  "providerName": "apicurio.local",
  "openApiRaw": "https://raw.githubusercontent.com/Apicurio/apicurio-registry/master/app/src/main/resources-unfiltered/META-INF/resources/api-specifications/registry/v2/openapi.json",
  "homepage": "apicurio.local",
  "serviceName": "registry",
  "apiVersion": "2.4.x",
  "methods": [
    {
      "url": "/admin/artifactTypes",
      "method": "listArtifactTypes",
      "httpMethod": "get",
      "tag": "Artifact Type",
      "description": "List artifact types",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/config/properties",
      "method": "listConfigProperties",
      "httpMethod": "get",
      "tag": "Admin",
      "description": "List all configuration properties",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/config/properties/{propertyName}",
      "method": "resetConfigProperty",
      "httpMethod": "delete",
      "tag": "Admin",
      "description": "Reset a configuration property",
      "parameters": [],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/config/properties/{propertyName}",
      "method": "getConfigProperty",
      "httpMethod": "get",
      "tag": "Admin",
      "description": "Get configuration property value",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/config/properties/{propertyName}",
      "method": "updateConfigProperty",
      "httpMethod": "put",
      "tag": "Admin",
      "description": "Update a configuration property",
      "parameters": [
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/export",
      "method": "exportData",
      "httpMethod": "get",
      "tag": "Admin",
      "description": "Export registry data",
      "parameters": [
        {
          "name": "forBrowser",
          "schema": "boolean",
          "description": "Indicates if the operation is done for a browser.  If true, the response will be a JSON payload with a property called `href`.  This `href` will be a single-use, naked download link suitable for use by a web browser to download the content."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Models a download \"link\".  Useful for browser use-cases."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/import",
      "method": "importData",
      "httpMethod": "post",
      "tag": "Admin",
      "description": "Import registry data",
      "parameters": [
        {
          "name": "X-Registry-Preserve-GlobalId",
          "schema": "boolean",
          "description": "If this header is set to false, global ids of imported data will be ignored and replaced by next id in global id sequence. This allows to import any data even thought the global ids would cause a conflict."
        },
        {
          "name": "X-Registry-Preserve-ContentId",
          "schema": "boolean",
          "required": false,
          "description": "If this header is set to false, content ids of imported data will be ignored and replaced by next id in content id sequence. The mapping between content and artifacts will be preserved. This allows to import any data even thought the content ids would cause a conflict."
        }
      ],
      "responses": [
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/loggers",
      "method": "listLogConfigurations",
      "httpMethod": "get",
      "tag": "Admin",
      "description": "List logging configurations",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/loggers/{logger}",
      "method": "removeLogConfiguration",
      "httpMethod": "delete",
      "tag": "Admin",
      "description": "Removes logger configuration",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/loggers/{logger}",
      "method": "getLogConfiguration",
      "httpMethod": "get",
      "tag": "Admin",
      "description": "Get a single logger configuration",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/loggers/{logger}",
      "method": "setLogConfiguration",
      "httpMethod": "put",
      "tag": "Admin",
      "description": "Set a logger's configuration",
      "parameters": [
        {
          "name": "level",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/roleMappings",
      "method": "listRoleMappings",
      "httpMethod": "get",
      "tag": "Admin",
      "description": "List all role mappings",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/roleMappings",
      "method": "createRoleMapping",
      "httpMethod": "post",
      "tag": "Admin",
      "description": "Create a new role mapping",
      "parameters": [
        {
          "name": "principalId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "principalName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "role",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/roleMappings/{principalId}",
      "method": "deleteRoleMapping",
      "httpMethod": "delete",
      "tag": "Admin",
      "description": "Delete a role mapping",
      "parameters": [],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/roleMappings/{principalId}",
      "method": "getRoleMapping",
      "httpMethod": "get",
      "tag": "Admin",
      "description": "Return a single role mapping",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The mapping between a user/principal and their role."
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/roleMappings/{principalId}",
      "method": "updateRoleMapping",
      "httpMethod": "put",
      "tag": "Admin",
      "description": "Update a role mapping",
      "parameters": [
        {
          "name": "role",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/rules",
      "method": "deleteAllGlobalRules",
      "httpMethod": "delete",
      "tag": "Global rules",
      "description": "Delete all global rules",
      "parameters": [],
      "responses": [
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/rules",
      "method": "listGlobalRules",
      "httpMethod": "get",
      "tag": "Global rules",
      "description": "List global rules",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/rules",
      "method": "createGlobalRule",
      "httpMethod": "post",
      "tag": "Global rules",
      "description": "Create global rule",
      "parameters": [
        {
          "name": "config",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "409",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/rules/{rule}",
      "method": "deleteGlobalRule",
      "httpMethod": "delete",
      "tag": "Global rules",
      "description": "Delete global rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/rules/{rule}",
      "method": "getGlobalRuleConfig",
      "httpMethod": "get",
      "tag": "Global rules",
      "description": "Get global rule configuration",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/admin/rules/{rule}",
      "method": "updateGlobalRuleConfig",
      "httpMethod": "put",
      "tag": "Global rules",
      "description": "Update global rule configuration",
      "parameters": [
        {
          "name": "config",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups",
      "method": "listGroups",
      "httpMethod": "get",
      "tag": "Groups",
      "description": "List groups",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The number of groups to return.  Defaults to 20."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The number of groups to skip before starting the result set.  Defaults to 0."
        },
        {
          "name": "order",
          "schema": "string",
          "description": "Sort order, ascending (`asc`) or descending (`desc`)."
        },
        {
          "name": "orderby",
          "schema": "string",
          "description": "The field to sort by.  Can be one of:\n\n* `name`\n* `createdOn`\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Describes the response received when searching for groups."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups",
      "method": "createGroup",
      "httpMethod": "post",
      "tag": "Groups",
      "description": "Create a new group",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "properties",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}",
      "method": "deleteGroupById",
      "httpMethod": "delete",
      "tag": "Groups",
      "description": "Delete a group by the specified ID.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}",
      "method": "getGroupById",
      "httpMethod": "get",
      "tag": "Groups",
      "description": "Get a group by the specified ID.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts",
      "method": "deleteArtifactsInGroup",
      "httpMethod": "delete",
      "tag": "Artifacts",
      "description": "Delete artifacts in group",
      "parameters": [],
      "responses": [
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts",
      "method": "listArtifactsInGroup",
      "httpMethod": "get",
      "tag": "Artifacts",
      "description": "List artifacts in group",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The number of artifacts to return.  Defaults to 20."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The number of artifacts to skip before starting the result set.  Defaults to 0."
        },
        {
          "name": "order",
          "schema": "string",
          "description": "Sort order, ascending (`asc`) or descending (`desc`)."
        },
        {
          "name": "orderby",
          "schema": "string",
          "description": "The field to sort by.  Can be one of:\n\n* `name`\n* `createdOn`\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Describes the response received when searching for artifacts."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts",
      "method": "createArtifact",
      "httpMethod": "post",
      "tag": "Artifacts",
      "description": "Create artifact",
      "parameters": [
        {
          "name": "X-Registry-ArtifactType",
          "schema": "string",
          "description": "Specifies the type of the artifact being added. Possible values include:\n\n* Avro (`AVRO`)\n* Protobuf (`PROTOBUF`)\n* JSON Schema (`JSON`)\n* Kafka Connect (`KCONNECT`)\n* OpenAPI (`OPENAPI`)\n* AsyncAPI (`ASYNCAPI`)\n* GraphQL (`GRAPHQL`)\n* Web Services Description Language (`WSDL`)\n* XML Schema (`XSD`)"
        },
        {
          "name": "X-Registry-ArtifactId",
          "schema": "string",
          "description": "A client-provided, globally unique identifier for the new artifact."
        },
        {
          "name": "X-Registry-Version",
          "schema": "string",
          "description": "Specifies the version number of this initial version of the artifact content.  This would typically\nbe a simple integer or a SemVer value.  If not provided, the server will assign a version number\nautomatically (starting with version `1`)."
        },
        {
          "name": "ifExists",
          "schema": "string",
          "description": "Set this option to instruct the server on what to do if the artifact already exists."
        },
        {
          "name": "canonical",
          "schema": "boolean",
          "description": "Used only when the `ifExists` query parameter is set to `RETURN_OR_UPDATE`, this parameter can be set to `true` to indicate that the server should \"canonicalize\" the content when searching for a matching version.  The canonicalization algorithm is unique to each artifact type, but typically involves removing extra whitespace and formatting the content in a consistent manner."
        },
        {
          "name": "X-Registry-Description",
          "schema": "string",
          "required": false,
          "description": "Specifies the description of artifact being added. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content."
        },
        {
          "name": "X-Registry-Description-Encoded",
          "schema": "string",
          "description": "Specifies the description of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content."
        },
        {
          "name": "X-Registry-Name",
          "schema": "string",
          "description": "Specifies the name of artifact being added. Name must be ASCII-only string. If this is not provided, the server will extract the name from the artifact content."
        },
        {
          "name": "X-Registry-Name-Encoded",
          "schema": "string",
          "description": "Specifies the name of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content."
        },
        {
          "name": "X-Registry-Content-Hash",
          "schema": "string",
          "description": "Specifies the (optional) hash of the artifact to be verified."
        },
        {
          "name": "X-Registry-Hash-Algorithm",
          "schema": "string",
          "description": "The algorithm to use when checking the content validity. (available: SHA256, MD5; default: SHA256)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "409",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}",
      "method": "deleteArtifact",
      "httpMethod": "delete",
      "tag": "Artifacts",
      "description": "Delete artifact",
      "parameters": [],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}",
      "method": "getLatestArtifact",
      "httpMethod": "get",
      "tag": "Artifacts",
      "description": "Get latest artifact",
      "parameters": [
        {
          "name": "dereference",
          "schema": "boolean",
          "required": false,
          "description": "Allows the user to specify if the content should be dereferenced when being returned"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}",
      "method": "updateArtifact",
      "httpMethod": "put",
      "tag": "Artifacts",
      "description": "Update artifact",
      "parameters": [
        {
          "name": "X-Registry-Version",
          "schema": "string",
          "description": "Specifies the version number of this new version of the artifact content.  This would typically\nbe a simple integer or a SemVer value.  If not provided, the server will assign a version number\nautomatically."
        },
        {
          "name": "X-Registry-Name",
          "schema": "string",
          "description": "Specifies the artifact name of this new version of the artifact content. Name must be ASCII-only string. If this is not\nprovided, the server will extract the name from the artifact content."
        },
        {
          "name": "X-Registry-Name-Encoded",
          "schema": "string",
          "description": "Specifies the artifact name of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content."
        },
        {
          "name": "X-Registry-Description",
          "schema": "string",
          "description": "Specifies the artifact description of this new version of the artifact content. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content."
        },
        {
          "name": "X-Registry-Description-Encoded",
          "schema": "string",
          "description": "Specifies the artifact description of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "409",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/meta",
      "method": "getArtifactMetaData",
      "httpMethod": "get",
      "tag": "Metadata",
      "description": "Get artifact metadata",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/meta",
      "method": "getArtifactVersionMetaDataByContent",
      "httpMethod": "post",
      "tag": "Metadata",
      "description": "Get artifact version metadata by content",
      "parameters": [
        {
          "name": "canonical",
          "schema": "boolean",
          "description": "Parameter that can be set to `true` to indicate that the server should \"canonicalize\" the content when searching for a matching version.  Canonicalization is unique to each artifact type, but typically involves removing any extra whitespace and formatting the content in a consistent manner."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/meta",
      "method": "updateArtifactMetaData",
      "httpMethod": "put",
      "tag": "Metadata",
      "description": "Update artifact metadata",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "labels",
          "schema": "array",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "properties",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/owner",
      "method": "getArtifactOwner",
      "httpMethod": "get",
      "tag": "Metadata",
      "description": "Get artifact owner",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Describes the ownership of an artifact."
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/owner",
      "method": "updateArtifactOwner",
      "httpMethod": "put",
      "tag": "Metadata",
      "description": "Update artifact owner",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/rules",
      "method": "deleteArtifactRules",
      "httpMethod": "delete",
      "tag": "Artifact rules",
      "description": "Delete artifact rules",
      "parameters": [],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/rules",
      "method": "listArtifactRules",
      "httpMethod": "get",
      "tag": "Artifact rules",
      "description": "List artifact rules",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/rules",
      "method": "createArtifactRule",
      "httpMethod": "post",
      "tag": "Artifact rules",
      "description": "Create artifact rule",
      "parameters": [
        {
          "name": "config",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/rules/{rule}",
      "method": "deleteArtifactRule",
      "httpMethod": "delete",
      "tag": "Artifact rules",
      "description": "Delete artifact rule",
      "parameters": [],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/rules/{rule}",
      "method": "getArtifactRuleConfig",
      "httpMethod": "get",
      "tag": "Artifact rules",
      "description": "Get artifact rule configuration",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/rules/{rule}",
      "method": "updateArtifactRuleConfig",
      "httpMethod": "put",
      "tag": "Artifact rules",
      "description": "Update artifact rule configuration",
      "parameters": [
        {
          "name": "config",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/state",
      "method": "updateArtifactState",
      "httpMethod": "put",
      "tag": "Artifacts",
      "description": "Update artifact state",
      "parameters": [
        {
          "name": "state",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/test",
      "method": "testUpdateArtifact",
      "httpMethod": "put",
      "tag": "Artifact rules",
      "description": "Test update artifact",
      "parameters": [],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "409",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/versions",
      "method": "listArtifactVersions",
      "httpMethod": "get",
      "tag": "Versions",
      "description": "List artifact versions",
      "parameters": [
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of versions to skip before starting to collect the result set.  Defaults to 0."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of versions to return.  Defaults to 20."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Describes the response received when searching for artifacts."
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/versions",
      "method": "createArtifactVersion",
      "httpMethod": "post",
      "tag": "Versions",
      "description": "Create artifact version",
      "parameters": [
        {
          "name": "X-Registry-Version",
          "schema": "string",
          "description": "Specifies the version number of this new version of the artifact content.  This would typically\nbe a simple integer or a SemVer value.  It must be unique within the artifact.  If this is not\nprovided, the server will generate a new, unique version number for this new updated content."
        },
        {
          "name": "X-Registry-Name",
          "schema": "string",
          "description": "Specifies the artifact name of this new version of the artifact content. Name must be ASCII-only string. If this is not\nprovided, the server will extract the name from the artifact content."
        },
        {
          "name": "X-Registry-Description",
          "schema": "string",
          "description": "Specifies the artifact description of this new version of the artifact content. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content."
        },
        {
          "name": "X-Registry-Description-Encoded",
          "schema": "string",
          "description": "Specifies the artifact description of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content."
        },
        {
          "name": "X-Registry-Name-Encoded",
          "schema": "string",
          "description": "Specifies the artifact name of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "409",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/versions/{version}",
      "method": "deleteArtifactVersion",
      "httpMethod": "delete",
      "tag": "Versions",
      "description": "Delete artifact version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "405",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/versions/{version}",
      "method": "getArtifactVersion",
      "httpMethod": "get",
      "tag": "Versions",
      "description": "Get artifact version",
      "parameters": [
        {
          "name": "dereference",
          "schema": "boolean",
          "description": "Allows the user to specify if the content should be dereferenced when being returned"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/versions/{version}/meta",
      "method": "deleteArtifactVersionMetaData",
      "httpMethod": "delete",
      "tag": "Metadata",
      "description": "Delete artifact version metadata",
      "parameters": [],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/versions/{version}/meta",
      "method": "getArtifactVersionMetaData",
      "httpMethod": "get",
      "tag": "Metadata",
      "description": "Get artifact version metadata",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/versions/{version}/meta",
      "method": "updateArtifactVersionMetaData",
      "httpMethod": "put",
      "tag": "Metadata",
      "description": "Update artifact version metadata",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "labels",
          "schema": "array",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "properties",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/versions/{version}/references",
      "method": "getArtifactVersionReferences",
      "httpMethod": "get",
      "tag": "Versions",
      "description": "Get artifact version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/groups/{groupId}/artifacts/{artifactId}/versions/{version}/state",
      "method": "updateArtifactVersionState",
      "httpMethod": "put",
      "tag": "Versions",
      "description": "Update artifact version state",
      "parameters": [
        {
          "name": "state",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/ids/contentHashes/{contentHash}/",
      "method": "getContentByHash",
      "httpMethod": "get",
      "tag": "Artifacts",
      "description": "Get artifact content by SHA-256 hash",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/ids/contentHashes/{contentHash}/references",
      "method": "referencesByContentHash",
      "httpMethod": "get",
      "tag": "Artifacts",
      "description": "List artifact references by hash",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ids/contentIds/{contentId}/",
      "method": "getContentById",
      "httpMethod": "get",
      "tag": "Artifacts",
      "description": "Get artifact content by ID",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/ids/contentIds/{contentId}/references",
      "method": "referencesByContentId",
      "httpMethod": "get",
      "tag": "Artifacts",
      "description": "List artifact references by content ID",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ids/globalIds/{globalId}",
      "method": "getContentByGlobalId",
      "httpMethod": "get",
      "tag": "Artifacts",
      "description": "Get artifact by global ID",
      "parameters": [
        {
          "name": "dereference",
          "schema": "boolean",
          "description": "Allows the user to specify if the content should be dereferenced when being returned"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/ids/globalIds/{globalId}/references",
      "method": "referencesByGlobalId",
      "httpMethod": "get",
      "tag": "Artifacts",
      "description": "List artifact references by global ID",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/search/artifacts",
      "method": "searchArtifacts",
      "httpMethod": "get",
      "tag": "Search",
      "description": "Search for artifacts",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": "Filter by artifact name."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of artifacts to skip before starting to collect the result set.  Defaults to 0."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of artifacts to return.  Defaults to 20."
        },
        {
          "name": "order",
          "schema": "string",
          "description": "Sort order, ascending (`asc`) or descending (`desc`)."
        },
        {
          "name": "orderby",
          "schema": "string",
          "description": "The field to sort by.  Can be one of:\n\n* `name`\n* `createdOn`\n"
        },
        {
          "name": "labels",
          "schema": "array",
          "description": "Filter by label.  Include one or more label to only return artifacts containing all of the\nspecified labels."
        },
        {
          "name": "properties",
          "schema": "array",
          "description": "Filter by one or more name/value property.  Separate each name/value pair using a colon.  For\nexample `properties=foo:bar` will return only artifacts with a custom property named `foo`\nand value `bar`."
        },
        {
          "name": "description",
          "schema": "string",
          "description": "Filter by description."
        },
        {
          "name": "group",
          "schema": "string",
          "description": "Filter by artifact group."
        },
        {
          "name": "globalId",
          "schema": "integer",
          "description": "Filter by globalId."
        },
        {
          "name": "contentId",
          "schema": "integer",
          "required": false,
          "description": "Filter by contentId."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Describes the response received when searching for artifacts."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/search/artifacts",
      "method": "searchArtifactsByContent",
      "httpMethod": "post",
      "tag": "Search",
      "description": "Search for artifacts by content",
      "parameters": [
        {
          "name": "canonical",
          "schema": "boolean",
          "description": "Parameter that can be set to `true` to indicate that the server should \"canonicalize\" the content when searching for matching artifacts.  Canonicalization is unique to each artifact type, but typically involves removing any extra whitespace and formatting the content in a consistent manner.  Must be used along with the `artifactType` query parameter."
        },
        {
          "name": "artifactType",
          "schema": "string",
          "description": "Indicates the type of artifact represented by the content being used for the search.  This is only needed when using the `canonical` query parameter, so that the server knows how to canonicalize the content prior to searching for matching artifacts."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of artifacts to skip before starting to collect the result set.  Defaults to 0."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of artifacts to return.  Defaults to 20."
        },
        {
          "name": "order",
          "schema": "string",
          "description": "Sort order, ascending (`asc`) or descending (`desc`)."
        },
        {
          "name": "orderby",
          "schema": "string",
          "description": "The field to sort by.  Can be one of:\n\n* `name`\n* `createdOn`\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Describes the response received when searching for artifacts."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/system/info",
      "method": "getSystemInfo",
      "httpMethod": "get",
      "tag": "System",
      "description": "Get system information",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/system/limits",
      "method": "getResourceLimits",
      "httpMethod": "get",
      "tag": "System",
      "description": "Get resource limits information",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of limitations on used resources, that are applied on the current instance of Registry.\nKeys represent the resource type and are suffixed by the corresponding unit.\nValues are integers. Only non-negative values are allowed, with the exception of -1, which means that the limit is not applied."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    },
    {
      "url": "/users/me",
      "method": "getCurrentUserInfo",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Get current user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about a single user."
        },
        {
          "statusCode": "500",
          "description": "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody."
        }
      ]
    }
  ],
  "apiBaseUrl": "http://apicurio.local",
  "apiDescription": "Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.\n\nThe Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata. \n\nThe supported artifact types include:\n- Apache Avro schema\n- AsyncAPI specification\n- Google protocol buffers\n- GraphQL schema\n- JSON Schema\n- Kafka Connect schema\n- OpenAPI specification\n- Web Services Description Language\n- XML Schema Definition\n\n\n**Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`.\n",
  "apiTitle": "Apicurio Registry API [v2]",
  "endpoints": 37,
  "sdkMethods": 139,
  "schemas": 47,
  "parameters": 83,
  "contactUrl": "https://github.com/apicurio/apicurio-registry",
  "contactEmail": "apicurio@lists.jboss.org",
  "difficultyScore": 183.25,
  "difficulty": "Hard"
}