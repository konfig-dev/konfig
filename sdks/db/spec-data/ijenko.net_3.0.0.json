{
  "providerName": "ijenko.net",
  "openApiRaw": "http://developers.ijenko.com/swagger.json",
  "securitySchemes": {
    "Token_in_Access-Token_header": {
      "description": "Token in Access-Token header",
      "in": "header",
      "name": "Access-Token",
      "type": "apiKey"
    },
    "Token_in_query": {
      "description": "Token in query",
      "in": "query",
      "name": "token",
      "type": "apiKey"
    }
  },
  "homepage": "ijenko.net",
  "apiVersion": "3.0.0",
  "methods": [
    {
      "url": "/account/change-password",
      "method": "accountChangePassword",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Change the password",
      "parameters": [
        {
          "name": "newPassword",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "oldPassword",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/account/places",
      "method": "accountPlaces",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "List Places of the Account",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        }
      ]
    },
    {
      "url": "/account/places",
      "method": "accountNewPlace",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Create a Place",
      "parameters": [
        {
          "name": "country",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "metadata",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "timeZone",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "zipCode",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "A resource has been created. The `resource` property gives its reference."
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/account/tokens",
      "method": "accountTokens",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "List active Tokens of the Account",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/account/tokens/{tokenId}",
      "method": "accountRevokeToken",
      "httpMethod": "delete",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Revoke a Token",
      "parameters": [],
      "responses": [
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/account/users",
      "method": "accountUsers",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "List Users of the Account",
      "parameters": [
        {
          "name": "embedMetadata",
          "schema": "array",
          "required": false,
          "description": "Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored.\n**Note:** This only applies to the top level resources.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/users",
      "method": "accountNewUser",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "New User",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "locale",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "metadata",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "phoneNumber",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "A resource has been created. The `resource` property gives its reference."
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/account/users/{userId}",
      "method": "accountDeleteUser",
      "httpMethod": "delete",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Delete a User",
      "parameters": [],
      "responses": [
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/account/users/{userId}",
      "method": "accountGetUser",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Information about a User",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/account/users/{userId}",
      "method": "accountPatchUser",
      "httpMethod": "patch",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Modify a User",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "locale",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "phoneNumber",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/account/users/{userId}/metadata",
      "method": "userGetMetadata",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "List metadata",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value."
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/account/users/{userId}/metadata",
      "method": "userPatchMetadata",
      "httpMethod": "patch",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Modify metadata",
      "parameters": [
        {
          "name": "add",
          "schema": "object",
          "description": ""
        },
        {
          "name": "remove",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value."
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/auth/login",
      "method": "authAccountLogin",
      "httpMethod": "post",
      "tag": "Authentication",
      "typeScriptTag": "authentication",
      "description": "Get a token using login+password",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "login",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ttl",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": "Any error."
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/auth/refresh",
      "method": "authRefreshToken",
      "httpMethod": "post",
      "tag": "Authentication",
      "typeScriptTag": "authentication",
      "description": "Refresh a token",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "refreshToken",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": "Any error."
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/auth/reset-password",
      "method": "authResetPassword",
      "httpMethod": "post",
      "tag": "Authentication",
      "typeScriptTag": "authentication",
      "description": "Ask for a new password",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "login",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/auth/revoke",
      "method": "authRevokeToken",
      "httpMethod": "post",
      "tag": "Authentication",
      "typeScriptTag": "authentication",
      "description": "Revoke a token",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": "Any error."
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/devices/{deviceId}",
      "method": "devicesGet",
      "httpMethod": "get",
      "tag": "Device",
      "typeScriptTag": "device",
      "description": "Information about a Device",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/devices/{deviceId}",
      "method": "devicesPatch",
      "httpMethod": "patch",
      "tag": "Device",
      "typeScriptTag": "device",
      "description": "Update a Device",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/devices/{deviceId}/functionalities",
      "method": "deviceAddFunctionality",
      "httpMethod": "post",
      "tag": "Device",
      "typeScriptTag": "device",
      "description": "Add dynamically a functionality",
      "parameters": [
        {
          "name": "deviceId",
          "schema": "string",
          "required": true,
          "description": "Unique identifier of a *Device*."
        },
        {
          "name": "class",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "endpoint",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "metadata",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "A resource has been created. The `resource` property gives its reference."
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/devices/{deviceId}/metadata",
      "method": "deviceGetMetadata",
      "httpMethod": "get",
      "tag": "Device",
      "typeScriptTag": "device",
      "description": "List metadata",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value."
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/devices/{deviceId}/metadata",
      "method": "devicePatchMetadata",
      "httpMethod": "patch",
      "tag": "Device",
      "typeScriptTag": "device",
      "description": "Modify metadata",
      "parameters": [
        {
          "name": "add",
          "schema": "object",
          "description": ""
        },
        {
          "name": "remove",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value."
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/devices/{deviceId}/run/{action}",
      "method": "deviceRun",
      "httpMethod": "post",
      "tag": "Action",
      "typeScriptTag": "action",
      "description": "Run actions",
      "parameters": [
        {
          "name": "deviceId",
          "schema": "string",
          "required": true,
          "description": "Unique identifier of a *Device*."
        },
        {
          "name": "action",
          "schema": "string",
          "required": true,
          "description": "Identifier of an *Action* inside a *Functionality*."
        },
        {
          "name": "functionalities",
          "schema": "string",
          "required": true,
          "description": "Functionality selector: Functionality tags or functionality class (optionally, '@' followed by a endpoint in decimal) or '*' for all. Multiple values are separated by '|' and are interpreted as « OR ».\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "450",
          "description": "The gateway of the Place is not reachable."
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/devices/{deviceId}/tags",
      "method": "deviceGetTags",
      "httpMethod": "get",
      "tag": "Device",
      "typeScriptTag": "device",
      "description": "List tags",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/devices/{deviceId}/tags",
      "method": "devicePatchTags",
      "httpMethod": "patch",
      "tag": "Device",
      "typeScriptTag": "device",
      "description": "Modify tags",
      "parameters": [
        {
          "name": "add",
          "schema": "array",
          "description": ""
        },
        {
          "name": "remove",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/functionalities/{functionalityId}",
      "method": "functionalitiesGet",
      "httpMethod": "get",
      "tag": "Functionality",
      "typeScriptTag": "functionality",
      "description": "Information about a Functionality",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/functionalities/{functionalityId}",
      "method": "functionalityPatch",
      "httpMethod": "patch",
      "tag": "Functionality",
      "typeScriptTag": "functionality",
      "description": "Modify a Functionality",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/functionalities/{functionalityId}/attributes",
      "method": "functionalityValues",
      "httpMethod": "get",
      "tag": "Functionality",
      "typeScriptTag": "functionality",
      "description": "Get history of multiple attributes",
      "parameters": [
        {
          "name": "names",
          "schema": "array",
          "required": false,
          "description": "One or multiple *Attribute* names separated by commas"
        },
        {
          "name": "from",
          "schema": "string",
          "required": false,
          "description": "Beginning of the time interval."
        },
        {
          "name": "to",
          "schema": "string",
          "required": false,
          "description": "End of the interval. Default: now.\n"
        },
        {
          "name": "surround",
          "schema": "boolean",
          "required": false,
          "description": "If true, return also one value before from and one value after to"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Keys are attribute ids"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/functionalities/{functionalityId}/attributes/{attributeName}",
      "method": "functionalityValue",
      "httpMethod": "get",
      "tag": "Functionality",
      "typeScriptTag": "functionality",
      "description": "Get an Attribute value",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/functionalities/{functionalityId}/attributes/{attributeName}",
      "method": "functionalitySet",
      "httpMethod": "put",
      "tag": "Functionality",
      "typeScriptTag": "functionality",
      "description": "Modify an Attribute value",
      "parameters": [],
      "responses": [
        {
          "statusCode": "405",
          "description": "An error related to access to an sub-entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/functionalities/{functionalityId}/metadata",
      "method": "functionalityGetMetadata",
      "httpMethod": "get",
      "tag": "Functionality",
      "typeScriptTag": "functionality",
      "description": "List metadata",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value."
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/functionalities/{functionalityId}/metadata",
      "method": "functionalityPatchMetadata",
      "httpMethod": "patch",
      "tag": "Functionality",
      "typeScriptTag": "functionality",
      "description": "Modify metadata",
      "parameters": [
        {
          "name": "add",
          "schema": "object",
          "description": ""
        },
        {
          "name": "remove",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value."
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/functionalities/{functionalityId}/run/{action}",
      "method": "functionalityRun",
      "httpMethod": "post",
      "tag": "Action",
      "typeScriptTag": "action",
      "description": "Run an action",
      "parameters": [
        {
          "name": "functionalityId",
          "schema": "string",
          "required": true,
          "description": "Unique identifier of a *Functionality*."
        },
        {
          "name": "action",
          "schema": "string",
          "required": true,
          "description": "Identifier of an *Action* inside a *Functionality*."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "450",
          "description": "The gateway of the Place is not reachable."
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/functionalities/{functionalityId}/tags",
      "method": "functionalityGetTags",
      "httpMethod": "get",
      "tag": "Functionality",
      "typeScriptTag": "functionality",
      "description": "List tags",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/functionalities/{functionalityId}/tags",
      "method": "functionalityPatchTags",
      "httpMethod": "patch",
      "tag": "Functionality",
      "typeScriptTag": "functionality",
      "description": "Modify tags",
      "parameters": [
        {
          "name": "add",
          "schema": "array",
          "description": ""
        },
        {
          "name": "remove",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/me",
      "method": "meGet",
      "httpMethod": "get",
      "tag": "Entry points",
      "typeScriptTag": "entryPoints",
      "description": "Information about the User",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me",
      "method": "mePatch",
      "httpMethod": "patch",
      "tag": "Entry points",
      "typeScriptTag": "entryPoints",
      "description": "Update User information",
      "parameters": [
        {
          "name": "locale",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/notifications/{notificationId}",
      "method": "notificationDelete",
      "httpMethod": "delete",
      "tag": "Notification",
      "typeScriptTag": "notification",
      "description": "Delete a Notification",
      "parameters": [],
      "responses": [
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/notifications/{notificationId}",
      "method": "notificationsGet",
      "httpMethod": "get",
      "tag": "Notification",
      "typeScriptTag": "notification",
      "description": "Information about a Notification",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/notifications/{notificationId}",
      "method": "notificationPatch",
      "httpMethod": "patch",
      "tag": "Notification",
      "typeScriptTag": "notification",
      "description": "Modify a Notification",
      "parameters": [
        {
          "name": "data",
          "schema": "object",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "routing",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/notifications/{notificationId}/metadata",
      "method": "notificationGetMetadata",
      "httpMethod": "get",
      "tag": "Notification",
      "typeScriptTag": "notification",
      "description": "List metadata",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value."
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/notifications/{notificationId}/metadata",
      "method": "notificationPatchMetadata",
      "httpMethod": "patch",
      "tag": "Notification",
      "typeScriptTag": "notification",
      "description": "Modify metadata of a Notification",
      "parameters": [
        {
          "name": "add",
          "schema": "object",
          "description": ""
        },
        {
          "name": "remove",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value."
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/places",
      "method": "mePlaces",
      "httpMethod": "get",
      "tag": "Entry points",
      "typeScriptTag": "entryPoints",
      "description": "List accessible Places",
      "parameters": [
        {
          "name": "embedMetadata",
          "schema": "array",
          "required": false,
          "description": "Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored.\n**Note:** This only applies to the top level resources.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/places/{placeId}",
      "method": "placesGet",
      "httpMethod": "get",
      "tag": "Place",
      "typeScriptTag": "place",
      "description": "Information about a Place",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        }
      ]
    },
    {
      "url": "/places/{placeId}",
      "method": "placePatch",
      "httpMethod": "patch",
      "tag": "Place",
      "typeScriptTag": "place",
      "description": "Update a Place",
      "parameters": [
        {
          "name": "country",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "timeZone",
          "schema": "string",
          "description": ""
        },
        {
          "name": "zipCode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/places/{placeId}/buses",
      "method": "placeBuses",
      "httpMethod": "get",
      "tag": "Place",
      "typeScriptTag": "place",
      "description": "List Buses",
      "parameters": [
        {
          "name": "withPairing",
          "schema": "boolean",
          "required": false,
          "description": "Filter out buses that have no pairing window"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an sub-entity (400, 403, 404, 410)"
        }
      ]
    },
    {
      "url": "/places/{placeId}/buses/{busId}/pairing",
      "method": "placePairing",
      "httpMethod": "get",
      "tag": "Place",
      "typeScriptTag": "place",
      "description": "State of the pairing window",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an sub-entity (400, 403, 404, 410)"
        }
      ]
    },
    {
      "url": "/places/{placeId}/buses/{busId}/pairing",
      "method": "placeOpenPairing",
      "httpMethod": "put",
      "tag": "Place",
      "typeScriptTag": "place",
      "description": "Open/Close the pairing window",
      "parameters": [
        {
          "name": "duration",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an sub-entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/places/{placeId}/devices",
      "method": "placeDevices",
      "httpMethod": "get",
      "tag": "Device",
      "typeScriptTag": "device",
      "description": "List of Devices",
      "parameters": [
        {
          "name": "devices",
          "schema": "string",
          "required": false,
          "description": "Devices selector. Device tags or device classes or device ids or '*' for any. Multiple values are separated by '|' and interpreted as « OR »."
        },
        {
          "name": "embedMetadata",
          "schema": "array",
          "required": false,
          "description": "Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored.\n**Note:** This only applies to the top level resources.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/places/{placeId}/electricity/autonomy",
      "method": "placeElectricityAutonomy",
      "httpMethod": "get",
      "tag": "Electricity",
      "typeScriptTag": "electricity",
      "description": "Get autonomy rate of the place",
      "parameters": [
        {
          "name": "when",
          "schema": "string",
          "required": true,
          "description": "A time part of the time span."
        },
        {
          "name": "span",
          "schema": "string",
          "required": true,
          "description": "Timespan: H (hour), D (day), Wmo (week starting on Monday), Wsu (week starting on Sunday), M (month), Y (year)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/places/{placeId}/electricity/flows",
      "method": "placeElectricityGetFlows",
      "httpMethod": "get",
      "tag": "Electricity",
      "typeScriptTag": "electricity",
      "description": "Get electricity virtual flows",
      "parameters": [
        {
          "name": "flows",
          "schema": "array",
          "required": true,
          "description": "Names of the flows requested"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/places/{placeId}/electricity/flows/setup",
      "method": "placeElectricityGetFlowsSetup",
      "httpMethod": "get",
      "tag": "Electricity",
      "typeScriptTag": "electricity",
      "description": "Get electricity flows setup",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/places/{placeId}/electricity/self-consumption",
      "method": "placeElectricitySelfConsumption",
      "httpMethod": "get",
      "tag": "Electricity",
      "typeScriptTag": "electricity",
      "description": "Get self-consumption rate of the place",
      "parameters": [
        {
          "name": "when",
          "schema": "string",
          "required": true,
          "description": "A time part of the time span."
        },
        {
          "name": "span",
          "schema": "string",
          "required": true,
          "description": "Timespan: H (hour), D (day), Wmo (week starting on Monday), Wsu (week starting on Sunday), M (month), Y (year)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/places/{placeId}/functionalities",
      "method": "placeFunctionalities",
      "httpMethod": "get",
      "tag": "Functionality",
      "typeScriptTag": "functionality",
      "description": "List Functionalities",
      "parameters": [
        {
          "name": "embedMetadata",
          "schema": "array",
          "required": false,
          "description": "Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored.\n**Note:** This only applies to the top level resources.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/places/{placeId}/metadata",
      "method": "placeGetMetadata",
      "httpMethod": "get",
      "tag": "Place",
      "typeScriptTag": "place",
      "description": "List metadata",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value."
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/places/{placeId}/metadata",
      "method": "placePatchMetadata",
      "httpMethod": "patch",
      "tag": "Place",
      "typeScriptTag": "place",
      "description": "Modify metadata",
      "parameters": [
        {
          "name": "add",
          "schema": "object",
          "description": ""
        },
        {
          "name": "remove",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value."
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/places/{placeId}/notifications",
      "method": "placeNotifications",
      "httpMethod": "get",
      "tag": "Notification",
      "typeScriptTag": "notification",
      "description": "List Notifications",
      "parameters": [
        {
          "name": "embedMetadata",
          "schema": "array",
          "required": false,
          "description": "Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored.\n**Note:** This only applies to the top level resources.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/places/{placeId}/notifications",
      "method": "placeNewNotification",
      "httpMethod": "post",
      "tag": "Notification",
      "typeScriptTag": "notification",
      "description": "Create a Notification",
      "parameters": [
        {
          "name": "data",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "metadata",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "routing",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "A resource has been created. The `resource` property gives its reference."
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/places/{placeId}/programs",
      "method": "placePrograms",
      "httpMethod": "get",
      "tag": "Program",
      "typeScriptTag": "program",
      "description": "List Programs",
      "parameters": [
        {
          "name": "embedMetadata",
          "schema": "array",
          "required": false,
          "description": "Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored.\n**Note:** This only applies to the top level resources.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/places/{placeId}/programs",
      "method": "placeNewProgram",
      "httpMethod": "post",
      "tag": "Program",
      "typeScriptTag": "program",
      "description": "Create a Program",
      "parameters": [
        {
          "name": "code",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "metadata",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "A resource has been created. The `resource` property gives its reference."
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/places/{placeId}/run/{action}",
      "method": "placeRun",
      "httpMethod": "post",
      "tag": "Action",
      "typeScriptTag": "action",
      "description": "Run actions",
      "parameters": [
        {
          "name": "placeId",
          "schema": "string",
          "required": true,
          "description": "Unique identifier of a *Place*."
        },
        {
          "name": "action",
          "schema": "string",
          "required": true,
          "description": "Identifier of an *Action* inside a *Functionality*."
        },
        {
          "name": "devices",
          "schema": "string",
          "required": true,
          "description": "Devices selector. Device tags or device classes or device ids or '*' for any. Multiple values are separated by '|' and interpreted as « OR »."
        },
        {
          "name": "functionalities",
          "schema": "string",
          "required": true,
          "description": "Functionality selector: Functionality tags or functionality class (optionally, '@' followed by a endpoint in decimal) or '*' for all. Multiple values are separated by '|' and are interpreted as « OR ».\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "450",
          "description": "The gateway of the Place is not reachable."
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/programs/{programId}",
      "method": "programDelete",
      "httpMethod": "delete",
      "tag": "Program",
      "typeScriptTag": "program",
      "description": "Delete a Program",
      "parameters": [],
      "responses": [
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/programs/{programId}",
      "method": "programsGet",
      "httpMethod": "get",
      "tag": "Program",
      "typeScriptTag": "program",
      "description": "Information about a Program",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/programs/{programId}",
      "method": "programPatch",
      "httpMethod": "patch",
      "tag": "Program",
      "typeScriptTag": "program",
      "description": "Modify a Program",
      "parameters": [
        {
          "name": "code",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/programs/{programId}/log",
      "method": "programLog",
      "httpMethod": "get",
      "tag": "Program",
      "typeScriptTag": "program",
      "description": "History of executions of a Program",
      "parameters": [
        {
          "name": "from",
          "schema": "string",
          "required": true,
          "description": "Beginning of the time interval."
        },
        {
          "name": "to",
          "schema": "string",
          "required": false,
          "description": "End of the interval. Default: now.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/programs/{programId}/metadata",
      "method": "programGetMetadata",
      "httpMethod": "get",
      "tag": "Program",
      "typeScriptTag": "program",
      "description": "List metadata",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value."
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/programs/{programId}/metadata",
      "method": "programPatchMetadata",
      "httpMethod": "patch",
      "tag": "Program",
      "typeScriptTag": "program",
      "description": "Modify metadata of a Program",
      "parameters": [
        {
          "name": "add",
          "schema": "object",
          "description": ""
        },
        {
          "name": "remove",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value."
        },
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    },
    {
      "url": "/programs/{programId}/run",
      "method": "programRun",
      "httpMethod": "post",
      "tag": "Program",
      "typeScriptTag": "program",
      "description": "Run the Program",
      "parameters": [],
      "responses": [
        {
          "statusCode": "403",
          "description": "An error related to access to an entity (400, 403, 404, 410)"
        },
        {
          "statusCode": "default",
          "description": "Any error."
        }
      ]
    }
  ],
  "apiBaseUrl": "https://ioe2api.ijenko.net",
  "apiTitle": "IoE² IoT API - to create end-user applications",
  "endpoints": 43,
  "sdkMethods": 99,
  "schemas": 103,
  "parameters": 98,
  "contactUrl": "http://developers.ijenko.com/",
  "contactEmail": "contact@ijenko.com",
  "difficultyScore": 175,
  "difficulty": "Hard"
}