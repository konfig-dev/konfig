{
  "securitySchemes": {
    "JWTBearer": {
      "type": "http",
      "scheme": "bearer"
    }
  },
  "apiBaseUrl": "https://api.talentapi.com",
  "apiVersion": "2024-04-02",
  "apiDescription": "<p>API Support: <a href=\"support@radix.ai\">support@radix.ai</a>  | Website: <a href=\"https://www.radix.ai\">https://www.radix.ai</a></p>\n<p>Job and profile matching using Artificial Intelligence.</p>\n<h1>What is it?</h1>\n<p>Talent API is a system that allows retrieving jobs recommendations for a profile or profiles recommendations for a job.<br>\nThere are three types of entities involved:</p>\n<ul>\n<li>The <code>job</code>: a JSON document describing a job offer.</li>\n<li>The <code>profile</code>: a JSON document describing a user profile.</li>\n<li>The <code>match</code>: a JSON document describing a link between a job and a profile. Getting started Here is a description of a<br>\n  basic use of the API using curl. In the examples, words between brackets need to be replaced by the appropriate value.</li>\n</ul>\n<h4>Credentials</h4>\n<p>You need a <code>client_id</code> and a <code>client_secret</code> in order to have access to the API. If you don't have credentials, please<br>\ncontact us at <a href=\"hello@radix.ai\">hello@radix.ai</a>. These credentials will also come with the scope you are allowed to use.</p>\n<p>Using these, you can authenticate at the /auth endpoint and receive an access_token. This access_token will be needed<br>\nfor the next requests.</p>\n<p>The request should look like</p>\n<pre><code>curl -X POST \\\n  https://[server-url]/auth \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n           &quot;client_id&quot;: &quot;[client_id]&quot;, \\\n           &quot;client_secret&quot;: &quot;[client_secret]&quot;, \\\n           &quot;scope&quot;:&quot;tapi/ALL&quot;\n      }'\n</code></pre>\n<p>The response will be</p>\n<pre><code>{\n  &quot;access_token&quot;:&quot;eyJjIs7iOiJ[...]vQZUUhw2fsg&quot;,\n  &quot;expires_in&quot;:3600,\n  &quot;token_type&quot;:&quot;Bearer&quot;\n}\n</code></pre>\n<h4>Sending data</h4>\n<p>Before being able to request recommendations, you need to provide data. The minimum is a profile and a job.</p>\n<h4>Send a job</h4>\n<p>Here is a sample request of how to send us a job.</p>\n<p>The example uses the smallest set of fields necessary for the query to work, but you should fill as many of them as<br>\npossible.</p>\n<p>The field client_data can be used to send fields that are specific to your corporation that cannot be mapped to the API<br>\nspecification. Please note that using client specific fields is discouraged if your fields are non-critical or can be<br>\ntranslated into predefined fields.</p>\n<pre><code>curl -X POST \\\n  http://[server-url]/jobs \\\n  -H 'Authorization: Bearer eyJjIs7iOiJ[...]vQZUUhw2fsg' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n          &quot;external_id&quot; : &quot;12345&quot;,\n          &quot;title&quot;: &quot;A job title&quot;,\n          &quot;addresses&quot;: [&quot;The job address&quot;],\n          &quot;publication_datetime&quot; : &quot;2020-02-12 00:02:00&quot;,\n          &quot;expiration_datetime&quot; :  &quot;2020-02-12 00:02:00&quot;,\n          &quot;may_be_recommended&quot; : true,\n          &quot;may_receive_recommendations&quot; : true\n}'\n</code></pre>\n<p>You will receive the following response, confirming that we received the job and processed it correctly:</p>\n<pre><code>{\n    &quot;message&quot;: &quot;Job successfully received. Recommendations will be available once the job has been processed.&quot;\n}\n</code></pre>\n<h4>Send a profile</h4>\n<p>In the same fashion, to send us a profile</p>\n<pre><code>curl -X POST \\\n  http://[server-url]/profiles \\\n  -H 'Authorization: Bearer eyJjIs7iOiJ[...]vQZUUhw2fsg' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n          &quot;external_id&quot; : &quot;6789&quot;,\n          &quot;addresses&quot;: [&quot;The addresses where the candidate lives.&quot;],\n          &quot;publication_datetime&quot; : &quot;2008-02-12 00:02:00&quot;,\n          &quot;expiration_datetime&quot; :  &quot;2008-02-12 00:02:00&quot;,\n          &quot;may_be_recommended&quot; : true,\n          &quot;may_receive_recommendations&quot; : true\n}'\n</code></pre>\n<p>And the response will be</p>\n<pre><code>{\n  &quot;message&quot;: &quot;Profile successfully received. Recommendations will be available once the profile has been processed.&quot;,\n}\n</code></pre>\n<h4>Get a recommendation</h4>\n<p>Now that there is a job and a profile in the system, you can ask for a recommendation. For example, in order to get the<br>\nbest jobs for the profile you just uploaded, you can do the following request</p>\n<pre><code>curl -X GET \\\n  http://[server-url]/profile/123456789/jobs \\\n  -H 'Authorization: Bearer eyJjIs7iOiJ[...]vQZUUhw2fsg' \\\n  -H 'Content-Type: application/json' \\\n</code></pre>\n<p>The response will contain a list of the best jobs for that profile, in the following form</p>\n<pre><code>[\n    {\n      &quot;resource_id&quot;: 12345\n      &quot;score&quot;: 0.87\n      &quot;resource&quot;: {\n        &quot;external_id&quot; : &quot;12345&quot;,\n        &quot;title&quot;: &quot;A job title&quot;,\n        &quot;addresses&quot;: [&quot;The job address&quot;],\n        &quot;publication_datetime&quot; : &quot;2020-02-12 00:02:00&quot;,\n        &quot;expiration_datetime&quot; :  &quot;2020-02-12 00:02:00&quot;,\n        &quot;may_be_recommended&quot; : true,\n        &quot;may_receive_recommendations&quot; : true\n      },\n      &quot;match_explanation&quot;: {\n      }\n    },\n    ...\n]\n</code></pre>\n<p>These recommendations are based on the data that you included when uploading jobs and profiles to Talent API. To receive<br>\nhigh quality recommendations, make sure to fill as many fields as possible when uploading entities.</p>\n<h4>Send a match indicator</h4>\n<p>If you want the recommendation to improve based on your user behaviour, you need to send us <code>match indicators</code>. A match<br>\nindicator represents a link between a profile and a job. As an example, if the user with profile_id <code>6789</code> had a look at<br>\nthe job page with id <code>12345</code>, you can send us the following match:</p>\n<pre><code>curl -X POST \\\n  https://[server-url]/matches \\\n  -H 'Authorization: Bearer eyJraWQiOi[...]Mou8GdpvnA'\n  -H 'Content-Type: application/json' \n  -d '{\n         'profile_id':'6789',\n         'job_id':'12345',\n         'match_actor':'CANDIDATE',\n         'match_datetime':'2020-03-14T21:37:38.414Z',\n         'match_type':'PAGEVIEW'\n      }'\n</code></pre>\n<p>That way, we are aware of user interactions inside of your data.</p>\n<h4>View your data status</h4>\n<p>To have a look at what you currently sent us, call the <code>status</code> endpoint:</p>\n<pre><code>curl -X GET \\\n  https://[server-url]/status \\\n  -H 'Authorization: Bearer eyJraWQiOi[...]Mou8GdpvnA'\n  -H 'Content-Type: application/json' \n</code></pre>",
  "apiTitle": "Talent API Â· API Reference",
  "endpoints": 23,
  "sdkMethods": 25,
  "schemas": 70,
  "parameters": 106,
  "originalCustomRequest": {
    "type": "GET",
    "url": "https://api.talentapi.com/openapi.json",
    "apiBaseUrl": "https://api.talentapi.com"
  },
  "customRequestSpecFilename": "radix.ai.yaml",
  "difficultyScore": 86.5,
  "difficulty": "Easy"
}