{
  "providerName": "setlist.fm",
  "openApiRaw": "https://api.setlist.fm/docs/1.0/ui/swagger.json",
  "securitySchemes": {},
  "categories": [
    "media"
  ],
  "homepage": "setlist.fm",
  "apiVersion": "1.0",
  "methods": [
    {
      "url": "/1.0/artist/{mbid}",
      "method": "resource10ArtistMbidGetArtistGet",
      "httpMethod": "get",
      "tag": "/1.0/artist/{mbid}",
      "typeScriptTag": "/10/artist/{mbid}",
      "description": ".",
      "parameters": [
        {
          "name": "mbid",
          "schema": "string",
          "required": true,
          "description": "a Musicbrainz MBID, e.g. 0bfba3d3-6a04-4779-bb0a-df07df5b0558"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This class represents an artist. An artist is a musician or a group of musicians. Each artist has a definite\n<a href=\"http://wiki.musicbrainz.org/MBID\">Musicbrainz Identifier</a> (MBID) with which the artist can be uniquely\nidentified."
        }
      ]
    },
    {
      "url": "/1.0/artist/{mbid}/setlists",
      "method": "resource10ArtistMbidSetlistsGetArtistSetlistsGet",
      "httpMethod": "get",
      "tag": "/1.0/artist/{mbid}/setlists",
      "typeScriptTag": "/10/artist/{mbid}/setlists",
      "description": ".",
      "parameters": [
        {
          "name": "mbid",
          "schema": "string",
          "required": true,
          "description": "the Musicbrainz MBID of the artist"
        },
        {
          "name": "p",
          "schema": "integer",
          "description": "the number of the result page"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Result consisting of a list of setlists."
        }
      ]
    },
    {
      "url": "/1.0/city/{geoId}",
      "method": "resource10CityGeoIdGetCityGet",
      "httpMethod": "get",
      "tag": "/1.0/city/{geoId}",
      "typeScriptTag": "/10/city/{geoId}",
      "description": "Get a city by its unique geoId.",
      "parameters": [
        {
          "name": "geoId",
          "schema": "string",
          "required": true,
          "description": "the city's geoId"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This class represents a city where Venues are located. Most of the original city data was taken from\n<a href=\"http://geonames.org/\">Geonames.org</a>."
        }
      ]
    },
    {
      "url": "/1.0/search/artists",
      "method": "resource10SearchArtistsGetArtistsGet",
      "httpMethod": "get",
      "tag": "/1.0/search/artists",
      "typeScriptTag": "/10/search/artists",
      "description": "Search for artists.",
      "parameters": [
        {
          "name": "artistMbid",
          "schema": "string",
          "description": "the artist's Musicbrainz Identifier (mbid)"
        },
        {
          "name": "artistName",
          "schema": "string",
          "description": "the artist's name"
        },
        {
          "name": "artistTmid",
          "schema": "integer",
          "description": "the artist's Ticketmaster Identifier (tmid)"
        },
        {
          "name": "p",
          "schema": "integer",
          "description": "the number of the result page you'd like to have"
        },
        {
          "name": "sort",
          "schema": "string",
          "description": "the sort of the result, either sortName (default) or relevance"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Result consisting of a list of artists."
        }
      ]
    },
    {
      "url": "/1.0/search/cities",
      "method": "resource10SearchCitiesGetCitiesGet",
      "httpMethod": "get",
      "tag": "/1.0/search/cities",
      "typeScriptTag": "/10/search/cities",
      "description": "Search for a city.",
      "parameters": [
        {
          "name": "country",
          "schema": "string",
          "description": "the city's country"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "name of the city"
        },
        {
          "name": "p",
          "schema": "integer",
          "description": "the number of the result page you'd like to have"
        },
        {
          "name": "state",
          "schema": "string",
          "description": "state the city lies in"
        },
        {
          "name": "stateCode",
          "schema": "string",
          "description": "state code the city lies in"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Result consisting of a list of cities."
        }
      ]
    },
    {
      "url": "/1.0/search/countries",
      "method": "resource10SearchCountriesGetCountriesGet",
      "httpMethod": "get",
      "tag": "/1.0/search/countries",
      "typeScriptTag": "/10/search/countries",
      "description": "Get a complete list of all supported countries.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Result consisting of a list of countries."
        }
      ]
    },
    {
      "url": "/1.0/search/setlists",
      "method": "resource10SearchSetlistsGetSetlistsGet",
      "httpMethod": "get",
      "tag": "/1.0/search/setlists",
      "typeScriptTag": "/10/search/setlists",
      "description": "Search for setlists.",
      "parameters": [
        {
          "name": "artistMbid",
          "schema": "string",
          "description": "the artist's Musicbrainz Identifier (mbid)"
        },
        {
          "name": "artistName",
          "schema": "string",
          "description": "the artist's name"
        },
        {
          "name": "artistTmid",
          "schema": "integer",
          "description": "the artist's Ticketmaster Identifier (tmid)"
        },
        {
          "name": "cityId",
          "schema": "string",
          "description": "the city's geoId"
        },
        {
          "name": "cityName",
          "schema": "string",
          "description": "the name of the city"
        },
        {
          "name": "countryCode",
          "schema": "string",
          "description": "the country code"
        },
        {
          "name": "date",
          "schema": "string",
          "description": "the date of the event (format dd-MM-yyyy)"
        },
        {
          "name": "lastFm",
          "schema": "integer",
          "description": "the event's Last.fm Event ID (deprecated)"
        },
        {
          "name": "lastUpdated",
          "schema": "string",
          "description": "the date and time (UTC) when this setlist was last updated (format yyyyMMddHHmmss) - either edited or\nreverted. search will return setlists that were updated on or after this date"
        },
        {
          "name": "p",
          "schema": "integer",
          "description": "the number of the result page"
        },
        {
          "name": "state",
          "schema": "string",
          "description": "the state"
        },
        {
          "name": "stateCode",
          "schema": "string",
          "description": "the state code"
        },
        {
          "name": "tourName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "venueId",
          "schema": "string",
          "description": "the venue id"
        },
        {
          "name": "venueName",
          "schema": "string",
          "description": "the name of the venue"
        },
        {
          "name": "year",
          "schema": "string",
          "description": "the year of the event"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Result consisting of a list of setlists."
        }
      ]
    },
    {
      "url": "/1.0/search/venues",
      "method": "resource10SearchVenuesGetVenuesGet",
      "httpMethod": "get",
      "tag": "/1.0/search/venues",
      "typeScriptTag": "/10/search/venues",
      "description": "Search for venues.",
      "parameters": [
        {
          "name": "cityId",
          "schema": "string",
          "description": "the city's geoId"
        },
        {
          "name": "cityName",
          "schema": "string",
          "description": "name of the city where the venue is located"
        },
        {
          "name": "country",
          "schema": "string",
          "description": "the city's country"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "name of the venue"
        },
        {
          "name": "p",
          "schema": "integer",
          "description": "the number of the result page you'd like to have"
        },
        {
          "name": "state",
          "schema": "string",
          "description": "the city's state"
        },
        {
          "name": "stateCode",
          "schema": "string",
          "description": "the city's state code"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Result consisting of a list of venues."
        }
      ]
    },
    {
      "url": "/1.0/setlist/version/{versionId}",
      "method": "resource10SetlistVersionVersionIdGetSetlistVersionGet",
      "httpMethod": "get",
      "tag": "/1.0/setlist/version/{versionId}",
      "typeScriptTag": "/10/setlist/version/{versionId}",
      "description": ".",
      "parameters": [
        {
          "name": "versionId",
          "schema": "string",
          "required": true,
          "description": "the version id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Setlists, that's what it's all about. So if you're trying to use this API without knowing what a setlist is then\nyou're kinda wrong on this page ;-).\n\nA setlist can be distinguished from other setlists by its unique id. But as\n<a href=\"https://www.setlist.fm/\">setlist.fm</a> works the wiki way, there can be different versions of one setlist\n(each time a user updates a setlist a new version gets created). These different versions have a unique id on its\nown. So setlists can have the same id although they differ as far as the content is concerned - thus the best way to\ncheck if two setlists are the same is to compare their versionIds."
        }
      ]
    },
    {
      "url": "/1.0/setlist/{setlistId}",
      "method": "resource10SetlistSetlistIdGetSetlistGet",
      "httpMethod": "get",
      "tag": "/1.0/setlist/{setlistId}",
      "typeScriptTag": "/10/setlist/{setlistId}",
      "description": ".",
      "parameters": [
        {
          "name": "setlistId",
          "schema": "string",
          "required": true,
          "description": "the setlist id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Setlists, that's what it's all about. So if you're trying to use this API without knowing what a setlist is then\nyou're kinda wrong on this page ;-).\n\nA setlist can be distinguished from other setlists by its unique id. But as\n<a href=\"https://www.setlist.fm/\">setlist.fm</a> works the wiki way, there can be different versions of one setlist\n(each time a user updates a setlist a new version gets created). These different versions have a unique id on its\nown. So setlists can have the same id although they differ as far as the content is concerned - thus the best way to\ncheck if two setlists are the same is to compare their versionIds."
        }
      ]
    },
    {
      "url": "/1.0/user/{userId}",
      "method": "resource10UserUserIdGetUserGet",
      "httpMethod": "get",
      "tag": "/1.0/user/{userId}",
      "typeScriptTag": "/10/user/{userId}",
      "description": "Get a user by userId.",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "the user's userId"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This class represents a user."
        }
      ]
    },
    {
      "url": "/1.0/user/{userId}/attended",
      "method": "resource10UserUserIdAttendedGetUserAttendedSetlistsGet",
      "httpMethod": "get",
      "tag": "/1.0/user/{userId}/attended",
      "typeScriptTag": "/10/user/{userId}/attended",
      "description": ".",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "the user's userId"
        },
        {
          "name": "p",
          "schema": "integer",
          "description": "the number of the result page"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Result consisting of a list of setlists."
        }
      ]
    },
    {
      "url": "/1.0/user/{userId}/edited",
      "method": "resource10UserUserIdEditedGetUserEditedSetlistsGet",
      "httpMethod": "get",
      "tag": "/1.0/user/{userId}/edited",
      "typeScriptTag": "/10/user/{userId}/edited",
      "description": ".",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "the user's userId"
        },
        {
          "name": "p",
          "schema": "integer",
          "description": "the number of the result page"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Result consisting of a list of setlists."
        }
      ]
    },
    {
      "url": "/1.0/venue/{venueId}",
      "method": "resource10VenueVenueIdGetVenueGet",
      "httpMethod": "get",
      "tag": "/1.0/venue/{venueId}",
      "typeScriptTag": "/10/venue/{venueId}",
      "description": "Get a venue by its unique id.",
      "parameters": [
        {
          "name": "venueId",
          "schema": "string",
          "required": true,
          "description": "the venue's id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Venues are places where concerts take place. They usually consist of a venue name and a city - but there are also\nsome venues that do not have a city attached yet. In such a case, the city simply isn't set and the city and country\nmay (but do not have to) be in the name."
        }
      ]
    },
    {
      "url": "/1.0/venue/{venueId}/setlists",
      "method": "resource10VenueVenueIdSetlistsGetVenueSetlistsGet",
      "httpMethod": "get",
      "tag": "/1.0/venue/{venueId}/setlists",
      "typeScriptTag": "/10/venue/{venueId}/setlists",
      "description": ".",
      "parameters": [
        {
          "name": "venueId",
          "schema": "string",
          "required": true,
          "description": "the id of the venue"
        },
        {
          "name": "p",
          "schema": "integer",
          "description": "the number of the result page"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Result consisting of a list of setlists."
        }
      ]
    }
  ],
  "apiBaseUrl": "/rest",
  "apiDescription": "<p>\nThe setlist.fm API has been designed to give you easy access to setlist data in order to build fancy websites and\nother applications. Before starting to use the API, be sure to ...\n<ol>\n<li>... understand how setlist.fm works (the <a href=\"https://www.setlist.fm/faq\">FAQ</a> and the\n<a href=\"https://www.setlist.fm/guidelines\">Guidelines</a> are a good starting point),</li>\n<li>... read this documentation carefully and</li>\n<li>... <a href=\"https://www.setlist.fm/settings/api\">apply for an API key</a> (link for logged in users only) - if\nyou're no registered user yet, then <a href=\"https://www.setlist.fm/signup\">register first</a> (it's free).</li>\n</ol>\n</p>\n<p>\nIf this documentation isn't enough or if you've got other things you'd like to tell us about the API, visit the\n<a href=\"https://www.setlist.fm/forum/setlistfm/setlistfm-api\">API Forum</a>.\n</p>\n<p>\nNote that the setlist.fm API is, according to the <a href=\"https://www.setlist.fm/help/api-terms\">API terms of\nservice</a>, only free for non-commercial projects. If you're interested in using the API for commercial purposes,\n<a href=\"https://www.setlist.fm/contact\">contact us</a>.\n</p>\n\n<h2>About this Service</h2>\n<p>\nThis service provides methods to get both setlists and components of setlists such as artists, cities, countries or\nvenues.\n</p>\n\n<h2>Supported Content Types</h2>\n<p>\nThe REST service currently supports XML (default) and JSON content.\n</p>\n<p>\nTo receive a JSON response, set the <code>Accept</code>\n<a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\">header</a> to <em>application/json</em>.\n</p>\n\n<h2>Internationalization</h2>\n<p>\n<small>(Please note that this is an experimental feature and does not work for all cities!)</small>\n</p>\n<p>\nMost of the featured methods honor the <code>Accept-Language</code>\n<a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\">header</a>. This header is used for\nlocalizing cities and countries. The default language is English (en), but you can provide any of the languages\nSpanish (es), French (fr), German (de), Portuguese (pt), Turkish (tr), Italian (it) or Polish (pl).\n</p>\n<p>\nE.g. if you search a setlist for a concert that took place in Vienna and you pass &quot;de&quot; as header, you'll\nget <em>&quot;Wien, &Ouml;sterreich&quot;</em> instead of <em>&quot;Vienna, Austria&quot;</em>.<br/>\nThis also works if you use a different language than the country's native language.\n</p>\n<p>\nE.g. for a concert in New York, you'll get <em>&quot;Nueva York, Estados Unidos&quot;</em> instead of <em>&quot;New\nYork, United States&quot;</em> if you pass &quot;es&quot; as language.\n</p>\n\n<h2>API Keys</h2>\n\nAPI keys (<a href=\"https://www.setlist.fm/settings/api\">application form</a>) must be included in the request with\nthe <code>x-api-key</code> header.\n\n<h2>Version History</h2>\n<table class=\"table table-bordered table-versions\">\n<thead>\n<tr>\n<th>Version</th>\n<th>Docs</th>\n<th>End of Service</th>\n</tr>\n</thead> <tbody>\n<tr>\n<td><strong>1.0</strong></td>\n<td><a href=\"/docs/1.0\">Docs</a></td>\n<td>-</li>\n</tr>\n<tr>\n<td><strong>0.1</strong></td>\n<td></td>\n<td>December 31, 2017</li>\n</tr>\n</tbody>\n</table>",
  "apiTitle": "setlist.fm API",
  "endpoints": 15,
  "sdkMethods": 15,
  "schemas": 33,
  "parameters": 47,
  "difficultyScore": 43.25,
  "difficulty": "Easy"
}