{
  "providerName": "vtex.local",
  "openApiRaw": "https://raw.githubusercontent.com/vtex/openapi-schemas/master/VTEX - Intelligent Search API.json",
  "securitySchemes": {},
  "homepage": "vtex.local",
  "serviceName": "Intelligent-Search-API",
  "apiVersion": "0.1.12",
  "methods": [
    {
      "url": "/autocomplete_suggestions",
      "method": "/autocompleteSuggestionsGet",
      "httpMethod": "get",
      "tag": "Autocomplete",
      "description": "Get list of suggested terms and attributes similar to the search term",
      "parameters": [
        {
          "name": "query",
          "schema": "string",
          "description": "Search term. It can contain any character."
        },
        {
          "name": "locale",
          "schema": "string",
          "description": "Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "5XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/banners/{facets}",
      "method": "/banners/{facets}Get",
      "httpMethod": "get",
      "tag": "Product List Page",
      "description": "Get list of banners registered for query",
      "parameters": [
        {
          "name": "query",
          "schema": "string",
          "description": "Search term. It can contain any character."
        },
        {
          "name": "facets",
          "schema": "string",
          "required": true,
          "description": "# Format\n\nThe `facets` parameter follows the format : `/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}`.\n\nThe order in which the terms appear is not relevant to the search.\n\nYou can also repeat the same `facetKey` several times for different values. For example: `category-1/shoes/color/blue/color/red/color/yellow`\n\n# General filters\n\nThe `facets` parameter also allows the following general filters.\n\n| `facetKey`      | Description                                                                                      | Example                                                                  |\n| --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ |\n| `price`         | Filter the search by a price range. The facet value follows the format `${minPrice}:${maxPrice}` | `/color/blue/price/100:500?query=shirt`                                  |\n| `category-${n}` | Filter the search by category, where `n` represents the category tree level (1 = department, 2 = category, 3 = subcategory, and so on) | `category-1/clothing/category-2/shirts`                                  |\n| `region-id`     | Filter the search by a region id (aka regionalization). The value is the region id               | `/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query=shirt`. |\n"
        },
        {
          "name": "locale",
          "schema": "string",
          "description": "Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/correction_search",
      "method": "/correctionSearchGet",
      "httpMethod": "get",
      "tag": "Product List Page",
      "description": "Get attempt of correction of a misspelled term",
      "parameters": [
        {
          "name": "query",
          "schema": "string",
          "description": "Search term. It can contain any character."
        },
        {
          "name": "locale",
          "schema": "string",
          "description": "Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/facets/{facets}",
      "method": "/facets/{facets}Get",
      "httpMethod": "get",
      "tag": "Product List Page",
      "description": "Get list of the possible facets for a given query",
      "parameters": [
        {
          "name": "facets",
          "schema": "string",
          "required": true,
          "description": "# Format\n\nThe `facets` parameter follows the format : `/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}`.\n\nThe order in which the terms appear is not relevant to the search.\n\nYou can also repeat the same `facetKey` several times for different values. For example: `category-1/shoes/color/blue/color/red/color/yellow`\n\n# General filters\n\nThe `facets` parameter also allows the following general filters.\n\n| `facetKey`      | Description                                                                                      | Example                                                                  |\n| --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ |\n| `price`         | Filter the search by a price range. The facet value follows the format `${minPrice}:${maxPrice}` | `/color/blue/price/100:500?query=shirt`                                  |\n| `category-${n}` | Filter the search by category, where `n` represents the category tree level (1 = department, 2 = category, 3 = subcategory, and so on) | `category-1/clothing/category-2/shirts`                                  |\n| `region-id`     | Filter the search by a region id (aka regionalization). The value is the region id               | `/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query=shirt`. |\n"
        },
        {
          "name": "query",
          "schema": "string",
          "description": "Search term. It can contain any character."
        },
        {
          "name": "locale",
          "schema": "string",
          "description": "Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language."
        },
        {
          "name": "hideUnavailableItems",
          "schema": "boolean",
          "description": "Whether the result should hide unavailable items (`true`), or not (`false`)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product_search/{facets}",
      "method": "/productSearch/{facets}Get",
      "httpMethod": "get",
      "tag": "Product List Page",
      "description": "Get list of products for a query",
      "parameters": [
        {
          "name": "facets",
          "schema": "string",
          "required": true,
          "description": "# Format\n\nThe `facets` parameter follows the format : `/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}`.\n\nThe order in which the terms appear is not relevant to the search.\n\nYou can also repeat the same `facetKey` several times for different values. For example: `category-1/shoes/color/blue/color/red/color/yellow`\n\n# General filters\n\nThe `facets` parameter also allows the following general filters.\n\n| `facetKey`      | Description                                                                                      | Example                                                                  |\n| --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ |\n| `price`         | Filter the search by a price range. The facet value follows the format `${minPrice}:${maxPrice}` | `/color/blue/price/100:500?query=shirt`                                  |\n| `category-${n}` | Filter the search by category, where `n` represents the category tree level (1 = department, 2 = category, 3 = subcategory, and so on) | `category-1/clothing/category-2/shirts`                                  |\n| `region-id`     | Filter the search by a region id (aka regionalization). The value is the region id               | `/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query=shirt`. |\n"
        },
        {
          "name": "query",
          "schema": "string",
          "description": "Search term. It can contain any character."
        },
        {
          "name": "simulationBehavior",
          "schema": "string",
          "description": "Defines the simulation behavior.\n\n * `default` - Calls the simulation for every single seller.\n * `skip` - Never calls the simulation.\n * `only1P` - Only calls the simulation for first party sellers."
        },
        {
          "name": "count",
          "schema": "number",
          "description": "Number of products per page."
        },
        {
          "name": "page",
          "schema": "number",
          "description": "Current search page."
        },
        {
          "name": "sort",
          "schema": "string",
          "description": "Defines the sort type. If null, the products will be sorted by relevance."
        },
        {
          "name": "locale",
          "schema": "string",
          "description": "Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language."
        },
        {
          "name": "hideUnavailableItems",
          "schema": "boolean",
          "description": "Whether the result should hide unavailable items (`true`), or not (`false`)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/search_suggestions",
      "method": "/searchSuggestionsGet",
      "httpMethod": "get",
      "tag": "Product List Page",
      "description": "Get list of suggested terms similar to the search term",
      "parameters": [
        {
          "name": "query",
          "schema": "string",
          "description": "Search term. It can contain any character."
        },
        {
          "name": "locale",
          "schema": "string",
          "description": "Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "5XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/top_searches",
      "method": "/topSearchesGet",
      "httpMethod": "get",
      "tag": "Autocomplete",
      "description": "Get list of the 10 most searched terms",
      "parameters": [
        {
          "name": "locale",
          "schema": "string",
          "description": "Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "5XX",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://vtex.local",
  "apiDescription": ">ℹ️ Onboarding guide\r\n>\r\n> Check the new [Search onboarding guide](https://developers.vtex.com/docs/guides/search-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.\r\n\r\nThis API is from the [VTEX Intelligent Search](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/3qgT47zY08biLP3d5os3DG) solution, an alternative to the platform’s native search, as it assists the customer in their purchase journey, and it presents results since the first interaction with the search bar.\r\n\r\n## Index\r\n- [Get list of the 10 most searched terms](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/top_searches)\r\n- [Get list of suggested terms and attributes similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/autocomplete_suggestions)\r\n- [Get attempt of correction of a misspelled term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/correction_search)\r\n- [Get list of banners registered for query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/banners/-facets-)\r\n- [Get list of suggested terms similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/search_suggestions)\r\n- [Get list of products for a query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/product_search/-facets-)\r\n- [Get list of the possible facets for a given query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/facets/-facets-)",
  "apiTitle": "Intelligent Search API",
  "endpoints": 7,
  "sdkMethods": 7,
  "schemas": 8,
  "parameters": 22,
  "difficultyScore": 16.5,
  "difficulty": "Easy"
}