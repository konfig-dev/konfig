{
  "providerName": "tvmaze.com",
  "openApiRaw": "http://static.tvmaze.com/apidoc/v1.yaml",
  "securitySchemes": {
    "usertoken": {
      "scheme": "basic",
      "type": "http"
    }
  },
  "categories": [
    "media"
  ],
  "homepage": "tvmaze.com",
  "apiVersion": "1.0",
  "methods": [
    {
      "url": "/auth/poll",
      "method": "/auth/pollPost",
      "httpMethod": "post",
      "tag": "auth",
      "typeScriptTag": "auth",
      "description": "Poll whether an authentication request was confirmed",
      "parameters": [
        {
          "name": "token",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/auth/start",
      "method": "/auth/startPost",
      "httpMethod": "post",
      "tag": "auth",
      "typeScriptTag": "auth",
      "description": "Start an authentication request",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "email_confirmation",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/auth/validate",
      "method": "/auth/validateGet",
      "httpMethod": "get",
      "tag": "auth",
      "typeScriptTag": "auth",
      "description": "Validate your authentication credentials",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/scrobble/episodes",
      "method": "/scrobble/episodesPost",
      "httpMethod": "post",
      "tag": "scrobbling",
      "typeScriptTag": "scrobbling",
      "description": "Mark episodes as acquired or watched based on their IDs",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of responses to your bulk input, ordered the same as your input"
        },
        {
          "statusCode": "207",
          "description": "A list of responses to your bulk input, ordered the same as your input"
        },
        {
          "statusCode": "422",
          "description": "A list of responses to your bulk input, ordered the same as your input"
        }
      ]
    },
    {
      "url": "/scrobble/episodes/{episode_id}",
      "method": "/scrobble/episodes/{episodeId}Put",
      "httpMethod": "put",
      "tag": "scrobbling",
      "typeScriptTag": "scrobbling",
      "description": "Mark an episode as acquired or watched based on its ID",
      "parameters": [
        {
          "name": "_embedded",
          "schema": "object",
          "description": ""
        },
        {
          "name": "episode_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "marked_at",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "type",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/scrobble/shows",
      "method": "/scrobble/showsPost",
      "httpMethod": "post",
      "tag": "scrobbling",
      "typeScriptTag": "scrobbling",
      "description": "Mark episodes within a show as acquired or watched based on their attributes",
      "parameters": [
        {
          "name": "tvmazeId",
          "schema": "integer",
          "description": "The show's TVmaze ID"
        },
        {
          "name": "thetvdbId",
          "schema": "integer",
          "description": "The show's TheTVDB ID"
        },
        {
          "name": "imdbId",
          "schema": "integer",
          "description": "The show's IMDB ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of responses to your bulk input, ordered the same as your input"
        },
        {
          "statusCode": "207",
          "description": "A list of responses to your bulk input, ordered the same as your input"
        },
        {
          "statusCode": "422",
          "description": "A list of responses to your bulk input, ordered the same as your input"
        }
      ]
    },
    {
      "url": "/scrobble/shows/{show_id}",
      "method": "/scrobble/shows/{showId}Get",
      "httpMethod": "get",
      "tag": "scrobbling",
      "typeScriptTag": "scrobbling",
      "description": "List watched and acquired episodes for a show",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/episodes",
      "method": "/user/episodesGet",
      "httpMethod": "get",
      "tag": "marked episodes",
      "typeScriptTag": "markedEpisodes",
      "description": "List the marked episodes",
      "parameters": [
        {
          "name": "showId",
          "schema": "integer",
          "required": false,
          "description": "Only return episodes from this specific show"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/episodes/{episode_id}",
      "method": "/user/episodes/{episodeId}Delete",
      "httpMethod": "delete",
      "tag": "marked episodes",
      "typeScriptTag": "markedEpisodes",
      "description": "Unmark an episode",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/user/episodes/{episode_id}",
      "method": "/user/episodes/{episodeId}Get",
      "httpMethod": "get",
      "tag": "marked episodes",
      "typeScriptTag": "markedEpisodes",
      "description": "Check if an episode is marked",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/episodes/{episode_id}",
      "method": "/user/episodes/{episodeId}Put",
      "httpMethod": "put",
      "tag": "marked episodes",
      "typeScriptTag": "markedEpisodes",
      "description": "Mark an episode",
      "parameters": [
        {
          "name": "_embedded",
          "schema": "object",
          "description": ""
        },
        {
          "name": "episode_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "marked_at",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "type",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/follows/networks",
      "method": "/user/follows/networksGet",
      "httpMethod": "get",
      "tag": "followed networks",
      "typeScriptTag": "followedNetworks",
      "description": "List the followed networks",
      "parameters": [
        {
          "name": "embed",
          "schema": "string",
          "required": false,
          "description": "Embed full network info"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/follows/networks/{network_id}",
      "method": "/user/follows/networks/{networkId}Delete",
      "httpMethod": "delete",
      "tag": "followed networks",
      "typeScriptTag": "followedNetworks",
      "description": "Unfollow a network",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/user/follows/networks/{network_id}",
      "method": "/user/follows/networks/{networkId}Get",
      "httpMethod": "get",
      "tag": "followed networks",
      "typeScriptTag": "followedNetworks",
      "description": "Check if a network is followed",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/follows/networks/{network_id}",
      "method": "/user/follows/networks/{networkId}Put",
      "httpMethod": "put",
      "tag": "followed networks",
      "typeScriptTag": "followedNetworks",
      "description": "Follow a network",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/follows/people",
      "method": "/user/follows/peopleGet",
      "httpMethod": "get",
      "tag": "followed people",
      "typeScriptTag": "followedPeople",
      "description": "List the followed people",
      "parameters": [
        {
          "name": "embed",
          "schema": "string",
          "required": false,
          "description": "Embed full person info"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/follows/people/{person_id}",
      "method": "/user/follows/people/{personId}Delete",
      "httpMethod": "delete",
      "tag": "followed people",
      "typeScriptTag": "followedPeople",
      "description": "Unfollow a person",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/user/follows/people/{person_id}",
      "method": "/user/follows/people/{personId}Get",
      "httpMethod": "get",
      "tag": "followed people",
      "typeScriptTag": "followedPeople",
      "description": "Check if a person is followed",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/follows/people/{person_id}",
      "method": "/user/follows/people/{personId}Put",
      "httpMethod": "put",
      "tag": "followed people",
      "typeScriptTag": "followedPeople",
      "description": "Follow a person",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/follows/shows",
      "method": "/user/follows/showsGet",
      "httpMethod": "get",
      "tag": "followed shows",
      "typeScriptTag": "followedShows",
      "description": "List the followed shows",
      "parameters": [
        {
          "name": "embed",
          "schema": "string",
          "required": false,
          "description": "Embed full show info"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/follows/shows/{show_id}",
      "method": "/user/follows/shows/{showId}Delete",
      "httpMethod": "delete",
      "tag": "followed shows",
      "typeScriptTag": "followedShows",
      "description": "Unfollow a show",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/user/follows/shows/{show_id}",
      "method": "/user/follows/shows/{showId}Get",
      "httpMethod": "get",
      "tag": "followed shows",
      "typeScriptTag": "followedShows",
      "description": "Check if a show is followed",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/follows/shows/{show_id}",
      "method": "/user/follows/shows/{showId}Put",
      "httpMethod": "put",
      "tag": "followed shows",
      "typeScriptTag": "followedShows",
      "description": "Follow a show",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/follows/webchannels",
      "method": "/user/follows/webchannelsGet",
      "httpMethod": "get",
      "tag": "followed webchannels",
      "typeScriptTag": "followedWebchannels",
      "description": "List the followed webchannels",
      "parameters": [
        {
          "name": "embed",
          "schema": "string",
          "required": false,
          "description": "Embed full webchannel info"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/follows/webchannels/{webchannel_id}",
      "method": "/user/follows/webchannels/{webchannelId}Delete",
      "httpMethod": "delete",
      "tag": "followed webchannels",
      "typeScriptTag": "followedWebchannels",
      "description": "Unfollow a webchannel",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/user/follows/webchannels/{webchannel_id}",
      "method": "/user/follows/webchannels/{webchannelId}Get",
      "httpMethod": "get",
      "tag": "followed webchannels",
      "typeScriptTag": "followedWebchannels",
      "description": "Check if a webchannel is followed",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/follows/webchannels/{webchannel_id}",
      "method": "/user/follows/webchannels/{webchannelId}Put",
      "httpMethod": "put",
      "tag": "followed webchannels",
      "typeScriptTag": "followedWebchannels",
      "description": "Follow a webchannel",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/tags",
      "method": "/user/tagsGet",
      "httpMethod": "get",
      "tag": "tagged shows",
      "typeScriptTag": "taggedShows",
      "description": "List all tags",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/tags",
      "method": "/user/tagsPost",
      "httpMethod": "post",
      "tag": "tagged shows",
      "typeScriptTag": "taggedShows",
      "description": "Create a new tag",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/tags/{tag_id}",
      "method": "/user/tags/{tagId}Delete",
      "httpMethod": "delete",
      "tag": "tagged shows",
      "typeScriptTag": "taggedShows",
      "description": "Delete a specific tag",
      "parameters": [
        {
          "name": "tagId",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/user/tags/{tag_id}",
      "method": "/user/tags/{tagId}Patch",
      "httpMethod": "patch",
      "tag": "tagged shows",
      "typeScriptTag": "taggedShows",
      "description": "Update a specific tag",
      "parameters": [
        {
          "name": "tagId",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/tags/{tag_id}/shows",
      "method": "/user/tags/{tagId}/showsGet",
      "httpMethod": "get",
      "tag": "tagged shows",
      "typeScriptTag": "taggedShows",
      "description": "List all shows under this tag",
      "parameters": [
        {
          "name": "tagId",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "embed",
          "schema": "string",
          "required": false,
          "description": "Embed full show info"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/tags/{tag_id}/shows/{show_id}",
      "method": "/user/tags/{tagId}/shows/{showId}Delete",
      "httpMethod": "delete",
      "tag": "tagged shows",
      "typeScriptTag": "taggedShows",
      "description": "Untag a show",
      "parameters": [
        {
          "name": "tagId",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "showId",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/user/tags/{tag_id}/shows/{show_id}",
      "method": "/user/tags/{tagId}/shows/{showId}Put",
      "httpMethod": "put",
      "tag": "tagged shows",
      "typeScriptTag": "taggedShows",
      "description": "Tag a show",
      "parameters": [
        {
          "name": "tagId",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "showId",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/votes/episodes",
      "method": "/user/votes/episodesGet",
      "httpMethod": "get",
      "tag": "voted episodes",
      "typeScriptTag": "votedEpisodes",
      "description": "List the episodes voted for",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/votes/episodes/{episode_id}",
      "method": "/user/votes/episodes/{episodeId}Delete",
      "httpMethod": "delete",
      "tag": "voted episodes",
      "typeScriptTag": "votedEpisodes",
      "description": "Remove an episode vote",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/user/votes/episodes/{episode_id}",
      "method": "/user/votes/episodes/{episodeId}Get",
      "httpMethod": "get",
      "tag": "voted episodes",
      "typeScriptTag": "votedEpisodes",
      "description": "Check if an episode is voted for",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/votes/episodes/{episode_id}",
      "method": "/user/votes/episodes/{episodeId}Put",
      "httpMethod": "put",
      "tag": "voted episodes",
      "typeScriptTag": "votedEpisodes",
      "description": "Vote for an episode",
      "parameters": [
        {
          "name": "episode_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "vote",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "voted_at",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/votes/shows",
      "method": "/user/votes/showsGet",
      "httpMethod": "get",
      "tag": "voted shows",
      "typeScriptTag": "votedShows",
      "description": "List the shows voted for",
      "parameters": [
        {
          "name": "embed",
          "schema": "string",
          "required": false,
          "description": "Embed full show info"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/votes/shows/{show_id}",
      "method": "/user/votes/shows/{showId}Delete",
      "httpMethod": "delete",
      "tag": "voted shows",
      "typeScriptTag": "votedShows",
      "description": "Remove a show vote",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/user/votes/shows/{show_id}",
      "method": "/user/votes/shows/{showId}Get",
      "httpMethod": "get",
      "tag": "voted shows",
      "typeScriptTag": "votedShows",
      "description": "Check if a show is voted for",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/votes/shows/{show_id}",
      "method": "/user/votes/shows/{showId}Put",
      "httpMethod": "put",
      "tag": "voted shows",
      "typeScriptTag": "votedShows",
      "description": "Vote for a show",
      "parameters": [
        {
          "name": "show_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "vote",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "voted_at",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.tvmaze.com/v1",
  "apiDescription": "Access to the user API is only possible for users with a [premium](http://www.tvmaze.com/premium) account. A user can only access their own user data.\n\nAuthentication uses HTTP Basic. Use the TVmaze username as authentication username, and the TVmaze API key as authentication password. Your API key can be found on your [dashboard](http://www.tvmaze.com/dashboard). To try out these API calls from this page, click the \"Authorize\" button on top and input your credentials.\n",
  "apiTitle": "TVmaze user API",
  "endpoints": 25,
  "sdkMethods": 51,
  "schemas": 16,
  "parameters": 38,
  "contactUrl": "http://www.tvmaze.com",
  "difficultyScore": 68.5,
  "difficulty": "Easy"
}