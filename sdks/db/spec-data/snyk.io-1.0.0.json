{
  "providerName": "snyk.io",
  "openApiRaw": "https://snyk.docs.apiary.io/api-description-document",
  "homepage": "snyk.io",
  "apiVersion": "1.0.0",
  "methods": [
    {
      "url": "/group/{groupId}/audit",
      "method": "getGroupLevelAuditLogs",
      "httpMethod": "post",
      "tag": "Audit logs",
      "description": "Get group level audit logs",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "The group ID. The `API_KEY` must have access to this group."
        },
        {
          "name": "from",
          "schema": "string",
          "required": false,
          "description": "The date you wish to fetch results from, in the format YYYY-MM-DD. Default is 3 months ago. Please note that logs are only available for past 3 months."
        },
        {
          "name": "to",
          "schema": "string",
          "required": false,
          "description": "The date you wish to fetch results until, in the format YYYY-MM-DD. Default is today. Please note that logs are only available for past 3 months."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page of results to request. Audit logs are returned in page sizes of 100"
        },
        {
          "name": "sortOrder",
          "schema": "string",
          "required": false,
          "description": "The sort order of the returned audit logs by date. Values: `ASC`, `DESC`. Default: `DESC`."
        },
        {
          "name": "filters",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/group/{groupId}/members",
      "method": "listAllMembersInAGroup",
      "httpMethod": "get",
      "tag": "Groups",
      "description": "List all members in a group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "The group ID. The `API_KEY` must have access admin to this group."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/group/{groupId}/org/{orgId}/members",
      "method": "addAMemberToAnOrganizationWithinAGroup",
      "httpMethod": "post",
      "tag": "Groups",
      "description": "Add a member to an organization within a group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "The group ID. The `API_KEY` must have access admin to this group."
        },
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID we want to add the member to. The `API_KEY` must have access to this organization."
        },
        {
          "name": "role",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/group/{groupId}/orgs",
      "method": "listAllOrganizationsInAGroup",
      "httpMethod": "get",
      "tag": "Groups",
      "description": "List all organizations in a group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "The group ID. The `API_KEY` must have READ access to this group and LIST organizations access in this group."
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of results to return (maximum is 100)."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "For pagination - offset (from which to start returning results)."
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "Only organizations that have a name that **starts with** this value (case insensitive) will be returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/group/{groupId}/roles",
      "method": "listAllRolesInAGroup",
      "httpMethod": "get",
      "tag": "Groups",
      "description": "List all roles in a group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "The group ID. The `API_KEY` must have READ access to this group."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/group/{groupId}/settings",
      "method": "viewGroupSettings",
      "httpMethod": "get",
      "tag": "Groups",
      "description": "View group settings",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "The group ID. The `API_KEY` must have admin access to this group."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/group/{groupId}/settings",
      "method": "updateGroupSettings",
      "httpMethod": "put",
      "tag": "Groups",
      "description": "Update group settings",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/group/{groupId}/tags",
      "method": "listAllTagsInAGroup",
      "httpMethod": "get",
      "tag": "Groups",
      "description": "List all tags in a group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "The group ID. The `API_KEY` must have access admin to this group."
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of results to return (the default is 1000)."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The offset from which to start returning results from."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/group/{groupId}/tags/delete",
      "method": "deleteTagFromGroup",
      "httpMethod": "post",
      "tag": "Groups",
      "description": "Delete tag from group",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "The group ID. The `API_KEY` must have access admin to this group."
        },
        {
          "name": "force",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/monitor/dep-graph",
      "method": "monitorDepGraph",
      "httpMethod": "post",
      "tag": "Monitor",
      "description": "Monitor Dep Graph",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": false,
          "description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
        },
        {
          "name": "depGraph",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "meta",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org",
      "method": "createANewOrganization",
      "httpMethod": "post",
      "tag": "Organizations",
      "description": "Create a new organization",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "sourceOrgId",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}",
      "method": "removeOrganization",
      "httpMethod": "delete",
      "tag": "Organizations",
      "description": "Remove organization",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have permission to delete the provided organization. Currently this operation is only supported for organizations without any projects."
        }
      ],
      "responses": []
    },
    {
      "url": "/org/{orgId}/audit",
      "method": "getOrganizationLevelAuditLogs",
      "httpMethod": "post",
      "tag": "Audit logs",
      "description": "Get organization level audit logs",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have access to this organization."
        },
        {
          "name": "from",
          "schema": "string",
          "required": false,
          "description": "The date you wish to fetch results from, in the format YYYY-MM-DD. Default is 3 months ago. Please note that logs are only available for past 3 months."
        },
        {
          "name": "to",
          "schema": "string",
          "required": false,
          "description": "The date you wish to fetch results until, in the format YYYY-MM-DD. Default is today. Please note that logs are only available for past 3 months."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page of results to request. Audit logs are returned in page sizes of 100."
        },
        {
          "name": "sortOrder",
          "schema": "string",
          "required": false,
          "description": "The sort order of the returned audit logs by date. Values: `ASC`, `DESC`. Default: `DESC`."
        },
        {
          "name": "filters",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/dependencies",
      "method": "listAllDependencies",
      "httpMethod": "post",
      "tag": "Dependencies",
      "description": "List all dependencies",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID to list projects for. The `API_KEY` must have access to this organization."
        },
        {
          "name": "sortBy",
          "schema": "string",
          "required": false,
          "description": "The field to sort results by."
        },
        {
          "name": "order",
          "schema": "string",
          "required": false,
          "description": "The direction to sort results by."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page of results to fetch."
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of results to fetch per page (maximum is 1000)."
        },
        {
          "name": "filters",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/entitlement/{entitlementKey}",
      "method": "getAnOrganization'sEntitlementValue",
      "httpMethod": "get",
      "tag": "Entitlements",
      "description": "Get an organization's entitlement value",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID to query the entitlement for. The `API_KEY` must have access to this organization."
        },
        {
          "name": "entitlementKey",
          "schema": "string",
          "required": true,
          "description": "The entitlement to query."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/entitlements",
      "method": "listAllEntitlements",
      "httpMethod": "get",
      "tag": "Entitlements",
      "description": "List all entitlements",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID to list entitlements for. The `API_KEY` must have access to this organization."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/integrations",
      "method": "list",
      "httpMethod": "get",
      "tag": "Integrations",
      "description": "List",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization public ID. The `API_KEY` must have admin access to this organization."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/integrations",
      "method": "addNewIntegration",
      "httpMethod": "post",
      "tag": "Integrations",
      "description": "Add new integration",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have admin access to this organization."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/integrations/{integrationId}",
      "method": "updateExistingIntegration",
      "httpMethod": "put",
      "tag": "Integrations",
      "description": "Update existing integration",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have admin access to this organization."
        },
        {
          "name": "integrationId",
          "schema": "string",
          "required": true,
          "description": "The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/integrations/{integrationId}/authentication",
      "method": "deleteCredentials",
      "httpMethod": "delete",
      "tag": "Integrations",
      "description": "Delete credentials",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have access to this organization."
        },
        {
          "name": "integrationId",
          "schema": "string",
          "required": true,
          "description": "The integration ID."
        }
      ],
      "responses": []
    },
    {
      "url": "/org/{orgId}/integrations/{integrationId}/authentication/provision-token",
      "method": "provisionNewBrokerToken",
      "httpMethod": "post",
      "tag": "Integrations",
      "description": "Provision new broker token",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The `API_KEY` must have access to this organization."
        },
        {
          "name": "integrationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/integrations/{integrationId}/authentication/switch-token",
      "method": "switchBetweenBrokerTokens",
      "httpMethod": "post",
      "tag": "Integrations",
      "description": "Switch between broker tokens",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The `API_KEY` must have access to this organization."
        },
        {
          "name": "integrationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/org/{orgId}/integrations/{integrationId}/clone",
      "method": "cloneAnIntegration (withSettingsAndCredentials)",
      "httpMethod": "post",
      "tag": "Integrations",
      "description": "Clone an integration (with settings and credentials)",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "Source organization public ID to clone integration settings from. The `API_KEY` must have access to this organization."
        },
        {
          "name": "integrationId",
          "schema": "string",
          "required": true,
          "description": "Source integration public ID to clone."
        },
        {
          "name": "destinationOrgPublicId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/integrations/{integrationId}/import",
      "method": "importTargets",
      "httpMethod": "post",
      "tag": "Import Projects",
      "description": "Import targets",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have admin access to this organization."
        },
        {
          "name": "integrationId",
          "schema": "string",
          "required": true,
          "description": "The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured."
        }
      ],
      "responses": []
    },
    {
      "url": "/org/{orgId}/integrations/{integrationId}/import/{jobId}",
      "method": "getImportJobDetails",
      "httpMethod": "get",
      "tag": "Import Projects",
      "description": "Get import job details",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have admin access to this organization."
        },
        {
          "name": "integrationId",
          "schema": "string",
          "required": true,
          "description": "The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured."
        },
        {
          "name": "jobId",
          "schema": "string",
          "required": true,
          "description": "The ID of the job. This can be found in the Location response header from the corresponding POST request that triggered the import job."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/integrations/{integrationId}/settings",
      "method": "retrieve",
      "httpMethod": "get",
      "tag": "Integrations",
      "description": "Retrieve",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have admin access to this organization."
        },
        {
          "name": "integrationId",
          "schema": "string",
          "required": true,
          "description": "The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/integrations/{integrationId}/settings",
      "method": "update",
      "httpMethod": "put",
      "tag": "Integrations",
      "description": "Update",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have admin access to this organization."
        },
        {
          "name": "integrationId",
          "schema": "string",
          "required": true,
          "description": "The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured."
        },
        {
          "name": "autoDepUpgradeEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "autoDepUpgradeIgnoredDependencies",
          "schema": "array",
          "description": ""
        },
        {
          "name": "autoDepUpgradeLimit",
          "schema": "number",
          "description": ""
        },
        {
          "name": "autoDepUpgradeMinAge",
          "schema": "number",
          "description": ""
        },
        {
          "name": "autoRemediationPrs",
          "schema": "object",
          "description": ""
        },
        {
          "name": "dockerfileSCMEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "manualRemediationPrs",
          "schema": "object",
          "description": ""
        },
        {
          "name": "pullRequestAssignment",
          "schema": "object",
          "description": ""
        },
        {
          "name": "pullRequestFailOnAnyVulns",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "pullRequestFailOnlyForHighSeverity",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "pullRequestTestEnabled",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/integrations/{type}",
      "method": "getExistingIntegrationByType",
      "httpMethod": "get",
      "tag": "Integrations",
      "description": "Get existing integration by type",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The `API_KEY` must have admin access to this organization."
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "Integration type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/invite",
      "method": "inviteUsers",
      "httpMethod": "post",
      "tag": "Organizations",
      "description": "Invite users",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have admin access to this organization."
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "isAdmin",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/org/{orgId}/licenses",
      "method": "listAllLicenses",
      "httpMethod": "post",
      "tag": "Licenses",
      "description": "List all licenses",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID to list projects for. The `API_KEY` must have access to this organization."
        },
        {
          "name": "sortBy",
          "schema": "string",
          "required": false,
          "description": "The field to sort results by."
        },
        {
          "name": "order",
          "schema": "string",
          "required": false,
          "description": "The direction to sort results by."
        },
        {
          "name": "filters",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/members",
      "method": "listMembers",
      "httpMethod": "get",
      "tag": "Organizations",
      "description": "List Members",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID."
        },
        {
          "name": "includeGroupAdmins",
          "schema": "boolean",
          "required": false,
          "description": "Include group administrators who also have access to this organization."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/members/update/{userId}",
      "method": "updateAMember'sRoleInTheOrganization",
      "httpMethod": "put",
      "tag": "Organizations",
      "description": "Update a member's role in the organization",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have admin access to this organization."
        },
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "The user ID."
        },
        {
          "name": "rolePublicId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/org/{orgId}/members/{userId}",
      "method": "removeAMemberFromTheOrganization",
      "httpMethod": "delete",
      "tag": "Organizations",
      "description": "Remove a member from the organization",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must admin have access to this organization."
        },
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "The user ID we want to remove."
        }
      ],
      "responses": []
    },
    {
      "url": "/org/{orgId}/members/{userId}",
      "method": "updateAMemberInTheOrganization",
      "httpMethod": "put",
      "tag": "Organizations",
      "description": "Update a member in the organization",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have admin access to this organization."
        },
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "The user ID."
        },
        {
          "name": "role",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/org/{orgId}/notification-settings",
      "method": "/org/{orgId}/notificationSettingsGet",
      "httpMethod": "get",
      "tag": "Organizations",
      "description": "Get organization notification settings",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have access to this organization."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/notification-settings",
      "method": "setNotificationSettings",
      "httpMethod": "put",
      "tag": "Organizations",
      "description": "Set notification settings",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "new-issues-remediations",
          "schema": "object",
          "description": ""
        },
        {
          "name": "project-imported",
          "schema": "object",
          "description": ""
        },
        {
          "name": "test-limit",
          "schema": "object",
          "description": ""
        },
        {
          "name": "weekly-report",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}",
      "method": "deleteAProject",
      "httpMethod": "delete",
      "tag": "Projects",
      "description": "Delete a project",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/org/{orgId}/project/{projectId}",
      "method": "retrieveASingleProject",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Retrieve a single project",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID the project belongs to. The `API_KEY` must have access to this organization."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "The project ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}",
      "method": "updateAProject",
      "httpMethod": "put",
      "tag": "Projects",
      "description": "Update a project",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "branch",
          "schema": "string",
          "description": ""
        },
        {
          "name": "owner",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}/activate",
      "method": "activate",
      "httpMethod": "post",
      "tag": "Projects",
      "description": "Activate",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID the project belongs to. The `API_KEY` must have access to this organization."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "The project ID."
        }
      ],
      "responses": []
    },
    {
      "url": "/org/{orgId}/project/{projectId}/aggregated-issues",
      "method": "listAllAggregatedIssues",
      "httpMethod": "post",
      "tag": "Projects",
      "description": "List all Aggregated issues",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have access to this organization."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "The project ID to return issues for."
        },
        {
          "name": "filters",
          "schema": "object",
          "description": ""
        },
        {
          "name": "includeDescription",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "includeIntroducedThrough",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}/attributes",
      "method": "applyingAttributes",
      "httpMethod": "post",
      "tag": "Projects",
      "description": "Applying attributes",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have access to this organization."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "The project ID to remove a tag from"
        },
        {
          "name": "criticality",
          "schema": "array",
          "description": ""
        },
        {
          "name": "environment",
          "schema": "array",
          "description": ""
        },
        {
          "name": "lifecycle",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}/deactivate",
      "method": "deactivate",
      "httpMethod": "post",
      "tag": "Projects",
      "description": "Deactivate",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID the project belongs to. The `API_KEY` must have access to this organization."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "The project ID."
        }
      ],
      "responses": []
    },
    {
      "url": "/org/{orgId}/project/{projectId}/dep-graph",
      "method": "getProjectDependencyGraph",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Get Project dependency graph",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have access to this organization."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "The project ID to return issues for."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}/history",
      "method": "listAllProjectSnapshots",
      "httpMethod": "post",
      "tag": "Projects",
      "description": "List all project snapshots",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have access to this organization."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "The project ID to return snapshots for."
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of results to return (the default is 10, the maximum is 100)."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The offset from which to start returning results from."
        },
        {
          "name": "filters",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}/history/{snapshotId}/aggregated-issues",
      "method": "listAllProjectSnapshotAggregatedIssues",
      "httpMethod": "post",
      "tag": "Projects",
      "description": "List all project snapshot aggregated issues",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have access to this organization."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "The project ID."
        },
        {
          "name": "snapshotId",
          "schema": "string",
          "required": true,
          "description": "The snapshot ID. If set to latest, the most recent snapshot will be used."
        },
        {
          "name": "filters",
          "schema": "object",
          "description": ""
        },
        {
          "name": "includeDescription",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "includeIntroducedThrough",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}/history/{snapshotId}/issue/{issueId}/paths",
      "method": "listAllProjectSnapshotIssuePaths",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "List all project snapshot issue paths",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have access to this organization."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "The project ID for which to return issue paths."
        },
        {
          "name": "snapshotId",
          "schema": "string",
          "required": true,
          "description": "The project snapshot ID for which to return issue paths. If set to `latest`, the most recent snapshot will be used. Use the \"List all project snapshots\" endpoint to find suitable values for this."
        },
        {
          "name": "issueId",
          "schema": "string",
          "required": true,
          "description": "The issue ID for which to return issue paths."
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of results to return per page (1 - 1000, inclusive)."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page of results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}/ignore/{issueId}",
      "method": "deleteIgnores",
      "httpMethod": "delete",
      "tag": "Projects",
      "description": "Delete ignores",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "issueId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/org/{orgId}/project/{projectId}/ignore/{issueId}",
      "method": "retrieveIgnore",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Retrieve ignore",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID to modify ignores for. The `API_KEY` must have access to this organization."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "The project ID to modify ignores for."
        },
        {
          "name": "issueId",
          "schema": "string",
          "required": true,
          "description": "The issue ID to modify ignores for. Can be a vulnerability or a license Issue."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}/ignore/{issueId}",
      "method": "addIgnore",
      "httpMethod": "post",
      "tag": "Projects",
      "description": "Add ignore",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "issueId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "disregardIfFixable",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "expires",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ignorePath",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "reason",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "reasonType",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}/ignore/{issueId}",
      "method": "replaceIgnores",
      "httpMethod": "put",
      "tag": "Projects",
      "description": "Replace ignores",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "issueId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}/ignores",
      "method": "listAllIgnores",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "List all ignores",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID to list ignores for. The `API_KEY` must have access to this organization."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "The project ID to list ignores for."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}/issue/{issueId}/jira-issue",
      "method": "createJiraIssue",
      "httpMethod": "post",
      "tag": "Projects",
      "description": "Create jira issue",
      "parameters": [
        {
          "name": "issueId",
          "schema": "string",
          "required": true,
          "description": "The issue ID to create Jira issue for."
        },
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "fields",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}/issue/{issueId}/paths",
      "method": "listAllProjectIssuePaths",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "List all project issue paths",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have access to this organization."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "The project ID for which to return issue paths."
        },
        {
          "name": "issueId",
          "schema": "string",
          "required": true,
          "description": "The issue ID for which to return issue paths."
        },
        {
          "name": "snapshotId",
          "schema": "string",
          "required": false,
          "description": "The project snapshot ID for which to return issue paths. If set to `latest`, the most recent snapshot will be used. Use the \"List all project snapshots\" endpoint to find suitable values for this."
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of results to return per page (1 - 1000, inclusive)."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page of results to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}/jira-issues",
      "method": "listAllJiraIssues",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "List all jira issues",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID to list Jira issues for. The `API_KEY` must have access to this organization."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "The project ID to list Jira issues for."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}/move",
      "method": "moveProjectToADifferentOrganization",
      "httpMethod": "put",
      "tag": "Projects",
      "description": "Move project to a different organization",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID to which the project belongs. The API_KEY must have group admin permissions. If the project is moved to a new group, a personal level API key is needed."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "The project ID."
        },
        {
          "name": "targetOrgId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}/settings",
      "method": "deleteProjectSettings",
      "httpMethod": "delete",
      "tag": "Projects",
      "description": "Delete project settings",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/org/{orgId}/project/{projectId}/settings",
      "method": "listProjectSettings",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "List project settings",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID to which the project belongs. The API_KEY must have access to this organization."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "The project ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}/settings",
      "method": "updateProjectSettings",
      "httpMethod": "put",
      "tag": "Projects",
      "description": "Update project settings",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "autoDepUpgradeEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "autoDepUpgradeIgnoredDependencies",
          "schema": "array",
          "description": ""
        },
        {
          "name": "autoDepUpgradeLimit",
          "schema": "number",
          "description": ""
        },
        {
          "name": "autoDepUpgradeMinAge",
          "schema": "number",
          "description": ""
        },
        {
          "name": "autoRemediationPrs",
          "schema": "object",
          "description": ""
        },
        {
          "name": "pullRequestAssignment",
          "schema": "object",
          "description": ""
        },
        {
          "name": "pullRequestFailOnAnyVulns",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "pullRequestFailOnlyForHighSeverity",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "pullRequestTestEnabled",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}/tags",
      "method": "addATagToAProject",
      "httpMethod": "post",
      "tag": "Projects",
      "description": "Add a tag to a project",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have access to this organization."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "The project ID to apply the tag to"
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/project/{projectId}/tags/remove",
      "method": "removeATagFromAProject",
      "httpMethod": "post",
      "tag": "Projects",
      "description": "Remove a tag from a project",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have access to this organization."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "The project ID to remove a tag from"
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/projects",
      "method": "listAllProjects",
      "httpMethod": "post",
      "tag": "Projects",
      "description": "List all projects",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID to list projects for. The `API_KEY` must have access to this organization."
        },
        {
          "name": "filters",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/provision",
      "method": "deletePendingUserProvision",
      "httpMethod": "delete",
      "tag": "Organizations",
      "description": "Delete pending user provision",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/provision",
      "method": "listPendingUserProvisions",
      "httpMethod": "get",
      "tag": "Organizations",
      "description": "List pending user provisions",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/provision",
      "method": "provisionAUserToTheOrganization",
      "httpMethod": "post",
      "tag": "Organizations",
      "description": "Provision a user to the organization",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must not exceed the permissions being granted to the provisioned user."
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "role",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "rolePublicId",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/settings",
      "method": "viewOrganizationSettings",
      "httpMethod": "get",
      "tag": "Organizations",
      "description": "View organization settings",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have access to this organization."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/settings",
      "method": "updateOrganizationSettings",
      "httpMethod": "put",
      "tag": "Organizations",
      "description": "Update organization settings",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have admin access to this organization."
        },
        {
          "name": "requestAccess",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/org/{orgId}/webhooks",
      "method": "listWebhooks",
      "httpMethod": "get",
      "tag": "Webhooks",
      "description": "List webhooks",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID to list projects for. The `API_KEY` must have access to this organization."
        }
      ],
      "responses": []
    },
    {
      "url": "/org/{orgId}/webhooks",
      "method": "createAWebhook",
      "httpMethod": "post",
      "tag": "Webhooks",
      "description": "Create a webhook",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID to list projects for. The `API_KEY` must have access to this organization."
        },
        {
          "name": "secret",
          "schema": "string",
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/org/{orgId}/webhooks/{webhookId}",
      "method": "deleteAWebhook",
      "httpMethod": "delete",
      "tag": "Webhooks",
      "description": "Delete a webhook",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "webhookId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/org/{orgId}/webhooks/{webhookId}",
      "method": "retrieveAWebhook",
      "httpMethod": "get",
      "tag": "Webhooks",
      "description": "Retrieve a webhook",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID the project belongs to. The `API_KEY` must have access to this organization."
        },
        {
          "name": "webhookId",
          "schema": "string",
          "required": true,
          "description": "The webhook ID."
        }
      ],
      "responses": []
    },
    {
      "url": "/org/{orgId}/webhooks/{webhookId}/ping",
      "method": "pingAWebhook",
      "httpMethod": "post",
      "tag": "Webhooks",
      "description": "Ping a webhook",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID the project belongs to. The `API_KEY` must have access to this organization."
        },
        {
          "name": "webhookId",
          "schema": "string",
          "required": true,
          "description": "The webhook ID."
        }
      ],
      "responses": []
    },
    {
      "url": "/orgs",
      "method": "listAllTheOrganizationsAUserBelongsTo",
      "httpMethod": "get",
      "tag": "Organizations",
      "description": "List all the organizations a user belongs to",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/reporting/counts/issues",
      "method": "getIssueCounts",
      "httpMethod": "post",
      "tag": "Reporting API",
      "description": "Get issue counts",
      "parameters": [
        {
          "name": "from",
          "schema": "string",
          "required": true,
          "description": "The date you wish to fetch results from, in the format `YYYY-MM-DD`"
        },
        {
          "name": "to",
          "schema": "string",
          "required": true,
          "description": "The date you wish to fetch results until, in the format `YYYY-MM-DD`"
        },
        {
          "name": "groupBy",
          "schema": "string",
          "required": false,
          "description": "The field to group results by"
        },
        {
          "name": "filters",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/reporting/counts/issues/latest",
      "method": "getLatestIssueCounts",
      "httpMethod": "post",
      "tag": "Reporting API",
      "description": "Get latest issue counts",
      "parameters": [
        {
          "name": "groupBy",
          "schema": "string",
          "required": false,
          "description": "The field to group results by"
        },
        {
          "name": "filters",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/reporting/counts/projects",
      "method": "getProjectCounts",
      "httpMethod": "post",
      "tag": "Reporting API",
      "description": "Get project counts",
      "parameters": [
        {
          "name": "from",
          "schema": "string",
          "required": true,
          "description": "The date you wish to fetch results from, in the format `YYYY-MM-DD`"
        },
        {
          "name": "to",
          "schema": "string",
          "required": true,
          "description": "The date you wish to fetch results until, in the format `YYYY-MM-DD`"
        },
        {
          "name": "filters",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/reporting/counts/projects/latest",
      "method": "getLatestProjectCounts",
      "httpMethod": "post",
      "tag": "Reporting API",
      "description": "Get latest project counts",
      "parameters": [
        {
          "name": "filters",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/reporting/counts/tests",
      "method": "getTestCounts",
      "httpMethod": "post",
      "tag": "Reporting API",
      "description": "Get test counts",
      "parameters": [
        {
          "name": "from",
          "schema": "string",
          "required": true,
          "description": "The date you wish to count tests from, in the format `YYYY-MM-DD`"
        },
        {
          "name": "to",
          "schema": "string",
          "required": true,
          "description": "The date you wish to count tests until, in the format `YYYY-MM-DD`"
        },
        {
          "name": "groupBy",
          "schema": "string",
          "required": false,
          "description": "The field to group results by"
        },
        {
          "name": "filters",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/reporting/issues/",
      "method": "getListOfIssues",
      "httpMethod": "post",
      "tag": "Reporting API",
      "description": "Get list of issues",
      "parameters": [
        {
          "name": "from",
          "schema": "string",
          "required": true,
          "description": "The date you wish to fetch results from, in the format `YYYY-MM-DD`"
        },
        {
          "name": "to",
          "schema": "string",
          "required": true,
          "description": "The date you wish to fetch results until, in the format `YYYY-MM-DD`"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page of results to request"
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of results to return per page (Maximum: 1000)"
        },
        {
          "name": "sortBy",
          "schema": "string",
          "required": false,
          "description": "The key to sort results by"
        },
        {
          "name": "order",
          "schema": "string",
          "required": false,
          "description": "The direction to sort results."
        },
        {
          "name": "groupBy",
          "schema": "string",
          "required": false,
          "description": "Set to issue to group the same issue in multiple projects"
        },
        {
          "name": "filters",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/reporting/issues/latest",
      "method": "getListOfLatestIssues",
      "httpMethod": "post",
      "tag": "Reporting API",
      "description": "Get list of latest issues",
      "parameters": [
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page of results to request"
        },
        {
          "name": "perPage",
          "schema": "number",
          "required": false,
          "description": "The number of results to return per page (Maximum: 1000)"
        },
        {
          "name": "sortBy",
          "schema": "string",
          "required": false,
          "description": "The key to sort results by"
        },
        {
          "name": "order",
          "schema": "string",
          "required": false,
          "description": "The direction to sort results."
        },
        {
          "name": "groupBy",
          "schema": "string",
          "required": false,
          "description": "Set to issue to group the same issue in multiple projects"
        },
        {
          "name": "filters",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/test/composer",
      "method": "testComposerJson &ComposerLockFile",
      "httpMethod": "post",
      "tag": "Test",
      "description": "Test composer.json & composer.lock file",
      "parameters": [
        {
          "name": "encoding",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "files",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/test/dep-graph",
      "method": "testDepGraph",
      "httpMethod": "post",
      "tag": "Test",
      "description": "Test Dep Graph",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": false,
          "description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
        },
        {
          "name": "depGraph",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/test/golangdep",
      "method": "testGopkgToml &GopkgLockFile",
      "httpMethod": "post",
      "tag": "Test",
      "description": "Test Gopkg.toml & Gopkg.lock File",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": false,
          "description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
        },
        {
          "name": "encoding",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "files",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/test/govendor",
      "method": "testVendorJsonFile",
      "httpMethod": "post",
      "tag": "Test",
      "description": "Test vendor.json File",
      "parameters": [
        {
          "name": "encoding",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "files",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/test/gradle",
      "method": "testGradleFile",
      "httpMethod": "post",
      "tag": "Test",
      "description": "Test gradle file",
      "parameters": [
        {
          "name": "encoding",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "files",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/test/gradle/{group}/{name}/{version}",
      "method": "testForIssuesInAPublicPackageByGroup,NameAndVersion",
      "httpMethod": "get",
      "tag": "Test",
      "description": "Test for issues in a public package by group, name and version",
      "parameters": [
        {
          "name": "group",
          "schema": "string",
          "required": true,
          "description": "The package's group ID."
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The package's artifact ID."
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "The package version to test."
        },
        {
          "name": "org",
          "schema": "string",
          "required": false,
          "description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
        },
        {
          "name": "repository",
          "schema": "string",
          "required": false,
          "description": "The repository hosting this package. The default value is Maven Central. More than one value is supported, in order."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/test/maven",
      "method": "testMavenFile",
      "httpMethod": "post",
      "tag": "Test",
      "description": "Test maven file",
      "parameters": [
        {
          "name": "org",
          "schema": "string",
          "required": false,
          "description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
        },
        {
          "name": "repository",
          "schema": "string",
          "required": false,
          "description": "The Maven repository hosting this package. The default value is Maven Central. More than one value is supported, in order."
        },
        {
          "name": "encoding",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "files",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/test/maven/{groupId}/{artifactId}/{version}",
      "method": "testForIssuesInAPublicPackageByGroupId,ArtifactIdAndVersion",
      "httpMethod": "get",
      "tag": "Test",
      "description": "Test for issues in a public package by group id, artifact id and version",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "The package's group ID."
        },
        {
          "name": "artifactId",
          "schema": "string",
          "required": true,
          "description": "The package's artifact ID."
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "The package version to test."
        },
        {
          "name": "org",
          "schema": "string",
          "required": false,
          "description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
        },
        {
          "name": "repository",
          "schema": "string",
          "required": false,
          "description": "The Maven repository hosting this package. The default value is Maven Central. More than one value is supported, in order."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/test/npm",
      "method": "testPackageJson &PackageLockJsonFile",
      "httpMethod": "post",
      "tag": "Test",
      "description": "Test package.json & package-lock.json File",
      "parameters": [
        {
          "name": "encoding",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "files",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/test/npm/{packageName}/{version}",
      "method": "testForIssuesInAPublicPackageByNameAndVersion",
      "httpMethod": "get",
      "tag": "Test",
      "description": "Test for issues in a public package by name and version",
      "parameters": [
        {
          "name": "packageName",
          "schema": "string",
          "required": true,
          "description": "The package name. For scoped packages, **must** be url-encoded, so to test \"@angular/core\" version 4.3.2, one should `GET /test/npm/%40angular%2Fcore/4.3.2`."
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "The Package version to test."
        },
        {
          "name": "org",
          "schema": "string",
          "required": false,
          "description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/test/pip",
      "method": "testRequirementsTxtFile",
      "httpMethod": "post",
      "tag": "Test",
      "description": "Test requirements.txt file",
      "parameters": [
        {
          "name": "encoding",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "files",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/test/pip/{packageName}/{version}",
      "method": "/test/pip/{packageName}/{version}Get",
      "httpMethod": "get",
      "tag": "Test",
      "description": "Test for issues in a public package by name and version",
      "parameters": [
        {
          "name": "packageName",
          "schema": "string",
          "required": true,
          "description": "The package name."
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "The Package version to test."
        },
        {
          "name": "org",
          "schema": "string",
          "required": false,
          "description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/test/rubygems",
      "method": "testGemfileLockFile",
      "httpMethod": "post",
      "tag": "Test",
      "description": "Test gemfile.lock file",
      "parameters": [
        {
          "name": "encoding",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "files",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/test/rubygems/{gemName}/{version}",
      "method": "testForIssuesInAPublicGemByNameAndVersion",
      "httpMethod": "get",
      "tag": "Test",
      "description": "Test for issues in a public gem by name and version",
      "parameters": [
        {
          "name": "gemName",
          "schema": "string",
          "required": true,
          "description": "The gem name."
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "The gem version to test."
        },
        {
          "name": "org",
          "schema": "string",
          "required": false,
          "description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/test/sbt",
      "method": "testSbtFile",
      "httpMethod": "post",
      "tag": "Test",
      "description": "Test sbt file",
      "parameters": [
        {
          "name": "encoding",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "files",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/test/sbt/{groupId}/{artifactId}/{version}",
      "method": "/test/sbt/{groupId}/{artifactId}/{version}Get",
      "httpMethod": "get",
      "tag": "Test",
      "description": "Test for issues in a public package by group id, artifact id and version",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "The package's group ID."
        },
        {
          "name": "artifactId",
          "schema": "string",
          "required": true,
          "description": "The package's artifact ID."
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "The package version to test."
        },
        {
          "name": "org",
          "schema": "string",
          "required": false,
          "description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
        },
        {
          "name": "repository",
          "schema": "string",
          "required": false,
          "description": "The repository hosting this package. The default value is Maven Central. More than one value is supported, in order."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/test/yarn",
      "method": "testPackageJson &YarnLockFile",
      "httpMethod": "post",
      "tag": "Test",
      "description": "Test package.json & yarn.lock File",
      "parameters": [
        {
          "name": "encoding",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "files",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/me",
      "method": "getMyDetails",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Get My Details",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/me/notification-settings/org/{orgId}",
      "method": "getOrganizationNotificationSettings",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Get organization notification settings",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have access to this organization."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/me/notification-settings/org/{orgId}",
      "method": "modifyOrganizationNotificationSettings",
      "httpMethod": "put",
      "tag": "Users",
      "description": "Modify organization notification settings",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "new-issues-remediations",
          "schema": "object",
          "description": ""
        },
        {
          "name": "project-imported",
          "schema": "object",
          "description": ""
        },
        {
          "name": "test-limit",
          "schema": "object",
          "description": ""
        },
        {
          "name": "weekly-report",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/me/notification-settings/org/{orgId}/project/{projectId}",
      "method": "getProjectNotificationSettings",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Get project notification settings",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "The organization ID. The `API_KEY` must have access to this organization."
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "The project ID to return notification settings for."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/user/me/notification-settings/org/{orgId}/project/{projectId}",
      "method": "modifyProjectNotificationSettings",
      "httpMethod": "put",
      "tag": "Users",
      "description": "Modify project notification settings",
      "parameters": [
        {
          "name": "orgId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "new-issues-remediations",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/user/{userId}",
      "method": "getUserDetails",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Get User Details",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "The users ID. The `API_KEY` must have admin access to at least one group or organization where the requested user is a member and must have the `api` entitlement on their preferred organization."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.snyk.io/v1",
  "apiDescription": "The Snyk API is available to customers on [Business and Enterprise plans](https://snyk.io/plans) and allows you to programatically integrate with Snyk.\n\n## REST API\n\nWe are in the process of building a new, improved API (`https://api.snyk.io/rest`) built using the OpenAPI and JSON API standards. We welcome you to try it out as we shape and release endpoints until it, ultimately, becomes a full replacement for our current API.\n\nLooking for our REST API docs? Please head over to [https://apidocs.snyk.io](https://apidocs.snyk.io)\n\n## API vs CLI vs Snyk integration\n\nThe API detailed below has the ability to test a package for issues, as they are defined by Snyk. It is important to note that for many package managers, using this API will be less accurate than running the [Snyk CLI](https://snyk.io/docs/using-snyk) as part of your build pipe, or just using it locally on your package. The reason for this is that more than one package version fit the requirements given in manifest files. Running the CLI locally tests the actual deployed code, and has an accurate snapshot of the dependency versions in use, while the API can only infer it, with inferior accuracy. It should be noted that the Snyk CLI has the ability to output machine-readable JSON output (with the `--json` flag to `snyk test`).\n\nA third option, is to allow Snyk access to your development flow via the existing [Snyk integrations](https://snyk.io/docs/). The advantage to this approach is having Snyk monitor every new pull request, and suggest fixes by opening new pull requests. This can be achieved either by integrating Snyk directly to your source code management (SCM) tool, or via a broker to allow greater security and auditability.\n\nIf those are not viable options, this API is your best choice.\n\n## API url\n\nThe base URL for all API endpoints is https://api.snyk.io/v1/\n\n## Authorization\n\nTo use this API, you must get your token from Snyk. It can be seen on https://snyk.io/account/ after you register with Snyk and login.\n\nThe token should be supplied in an `Authorization` header with the token, preceded by `token`:\n\n```http\nAuthorization: token API_KEY\n```\n\nOtherwise, a 401 \"Unauthorized\" response will be returned.\n\n```http\nHTTP/1.1 401 Unauthorized\n\n        {\n            \"code\": 401,\n            \"error\": \"Not authorised\",\n            \"message\": \"Not authorised\"\n        }\n```\n\n## Overview and entities\n\nThe API is a REST API. It has the following entities:\n\n### Test result\n\nThe test result is the object returned from the API giving the results of testing a package for issues. It has the following fields:\n\n| Property        | Type    | Description                                           | Example                                                         |\n|----------------:|---------|-------------------------------------------------------|-----------------------------------------------------------------|\n| ok              | boolean | Does this package have one or more issues?             | false                                                           |\n| issues          | object  | The issues found. See below for details.              | See below                                                       |\n| dependencyCount | number  | The number of dependencies the package has.           | 9                                                               |\n| org             | object  | The organization this test was carried out for.       | {\"name\": \"anOrg\", \"id\": \"5d7013d9-2a57-4c89-993c-0304d960193c\"} |\n| licensesPolicy  | object  | The organization's licenses policy used for this test | See in the examples                                             |\n| packageManager  | string  | The package manager for this package                  | \"maven\"                                                         |\n|                 |         |                                                       |                                                                 |\n\n### Issue\n\nAn issue is either a vulnerability or a license issue, according to the organization's policy. It has the following fields:\n\n| Property       | Type          | Description                                                                                                                | Example                                |\n|---------------:|---------------|----------------------------------------------------------------------------------------------------------------------------|----------------------------------------|\n| id             | string        | The issue ID                                                                                                               | \"SNYK-JS-BACKBONE-10054\"               |\n| url            | string        | A link to the issue details on snyk.io                                                                                     | \"https://snyk.io/vuln/SNYK-JS-BACKBONE-10054 |\n| title          | string        | The issue title                                                                                                            | \"Cross Site Scripting\"                 |\n| type           | string        | The issue type: \"license\" or \"vulnerability\".                                                                              | \"license\"                              |\n| paths          | array         | The paths to the dependencies which have an issue, and their corresponding upgrade path (if an upgrade is available). [More information about from and upgrade paths](#introduction/overview-and-entities/from-and-upgrade-paths) | [<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\"from\": [\"a@1.0.0\", \"b@4.8.1\"],<br>&nbsp;&nbsp;&nbsp;&nbsp;\"upgrade\": [false, \"b@4.8.2\"]<br>&nbsp;&nbsp;}<br>] |\n| package        | string        | The package identifier according to its package manager                                                                    | \"backbone\", \"org.apache.flex.blazeds:blazeds\"|\n| version        | string        | The package version this issue is applicable to.                                                                           | \"0.4.0\"                                |\n| severity       | string        | The Snyk defined severity level: \"critical\", \"high\", \"medium\" or \"low\".                                                    | \"high\"                                 |\n| language       | string        | The package's programming language                                                                                         | \"js\"                                   |\n| packageManager | string        | The package manager                                                                                                        | \"npm\"                                  |\n| semver         | array[string] OR map[string]array[string] | One or more [semver](https://semver.org) ranges this issue is applicable to. The format varies according to package manager. | [\"<0.5.0, >=0.4.0\", \"<0.3.8, >=0.3.6\"] OR { \"vulnerable\": [\"[2.0.0, 3.0.0)\"], \"unaffected\": [\"[1, 2)\", \"[3, )\"] } |\n\n### Vulnerability\n\nA vulnerability in a package. In addition to all the fields present in an issue, a vulnerability also has these fields:\n\nProperty        | Type    | Description                                                                                                                                                                                                                      | Example                                        |\n----------------:|---------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------|\n publicationTime | Date    | The vulnerability publication time                                                                                                                                                                                               | \"2016-02-11T07:16:18.857Z\"                     |\n disclosureTime  | Date    | The time this vulnerability was originally disclosed to the package maintainers                                                                                                                                                   | \"2016-02-11T07:16:18.857Z\"                     |\n isUpgradable    | boolean | Is this vulnerability fixable by upgrading a dependency?                                                                                                                                                                         | true                                           |\n description     | string  | The detailed description of the vulnerability, why and how it is exploitable. Provided in markdown format. | \"## Overview\\n[`org.apache.logging.log4j:log4j-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22log4j-core%22)\\nIn Apache Log4j 2.x before 2.8.2, when using the TCP socket server or UDP socket server to receive serialized log events from another application, a specially crafted binary payload can be sent that, when deserialized, can execute arbitrary code.\\n\\n# Details\\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\\n\\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution. \\n\\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\\n\\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\\n\\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\\n- Apache Blog\\n\\n\\n## References\\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5645)\\n- [jira issue](https://issues.apache.org/jira/browse/LOG4J2-1863)\\n\" |\n isPatchable     | boolean | Is this vulnerability fixable by using a Snyk supplied patch?                                                                                                                                                                    | true                                           |\n isPinnable      | boolean | Is this vulnerability fixable by pinning a transitive dependency                                                                                                                                                                 | true                                           |\n identifiers     | object  | Additional vulnerability identifiers                                                                                                                                                                                             | {\"CWE\": [], \"CVE\": [\"CVE-2016-2402]}           |\n credit          | string  | The reporter of the vulnerability                                                                                                                                                                                                | \"Snyk Security Team\"                           |\n CVSSv3          | string  | Common Vulnerability Scoring System (CVSS) provides a way to capture the principal characteristics of a vulnerability, and produce a numerical score reflecting its severity, as well as a textual representation of that score. | \"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N\" |\n cvssScore       | number  | CVSS Score                                                                                                                                                                                                                       | 5.3                                            |\n patches         | array   | Patches to fix this issue, by snyk                                                                                                                                                                                               | see \"Patch\" below.                             |\n upgradePath     | object  | The path to upgrade this issue, if applicable                                                                                                                                                                                    | see below                                      |\n isPatched       | boolean | Is this vulnerability patched?                                                                                                                                                                                                   | false                                          |\n exploitMaturity | string  | The snyk exploit maturity level\n\n#### Patch\n\nA patch is an object like this one:\n\n```json\n{\n  \"urls\": [\n    \"https://snyk-patches.s3.amazonaws.com/npm/backbone/20110701/backbone_20110701_0_0_0cdc525961d3fa98e810ffae6bcc8e3838e36d93.patch\"\n  ],\n  \"version\": \"<0.5.0 >=0.3.3\",\n  \"modificationTime\": \"2015-11-06T02:09:36.180Z\",\n  \"comments\": [\n    \"https://github.com/jashkenas/backbone/commit/0cdc525961d3fa98e810ffae6bcc8e3838e36d93.patch\"\n  ],\n  \"id\": \"patch:npm:backbone:20110701:0\"\n}\n```\n\n### From and upgrade paths\n\nBoth from and upgrade paths are arrays, where each item within the array is a package `name@version`.\n\nTake the following `from` path:\n\n```\n[\n  \"my-project@1.0.0\",\n  \"actionpack@4.2.5\",\n  \"rack@1.6.4\"\n]\n```\n\nAssuming this was returned as a result of a test, then we know:\n\n- The package that was tested was `my-project@1.0.0`\n\n- The dependency with an issue was included in the tested package via the direct dependency `actionpack@4.2.5`\n\n- The dependency with an issue was [rack@1.6.4](https://snyk.io/vuln/rubygems:rack@1.6.4)\n\nTake the following `upgrade` path:\n\n```\n[\n  false,\n  \"actionpack@5.0.0\",\n  \"rack@2.0.1\"\n]\n```\n\nAssuming this was returned as a result of a test, then we know:\n\n- The package that was tested is not upgradable (`false`)\n\n- The direct dependency `actionpack` should be upgraded to at least version `5.0.0` in order to fix the issue\n\n- Upgrading `actionpack` to version `5.0.0` will cause `rack` to be installed at version `2.0.1`\n\nIf the `upgrade` path comes back as an empty array (`[]`) then this means that there is no upgrade path available which would fix the issue.\n\n### License issue\n\nA license issue has no additional fields other than the ones in \"Issue\".\n\n### Snyk organization\n\nThe organization in Snyk this request is applicable to. The organization determines the access rights, licenses policy and is the unit of billing for private projects.\n\nA Snyk organization has these fields:\n\nProperty    | Type   | Description                   | Example                                |\n-----------:| ------ | ----------------------------- | -------------------------------------- |\nname        | string | The organization display name | \"deelmaker\"                            |\nid          | string | The ID of the organization    | \"3ab0f8d3-b17d-4953-ab6d-e1cbfe1df385\" |\n\n## Errors\n\nThis is a beta release of this API. Therefore, despite our efforts, errors might occur. In the unlikely event of such an error, it will have the following structure as JSON in the body:\n\nProperty    | Type   | Description                   | Example                                |\n-----------:| ------ | ----------------------------- | -------------------------------------- |\nmessage     | string | Error message with reference  | Error calling Snyk api (reference: 39db46b1-ad57-47e6-a87d-e34f6968030b) |\nerrorRef    | V4 uuid | An error ref to contact Snyk with | 39db46b1-ad57-47e6-a87d-e34f6968030b |\n\nThe error reference will also be supplied in the `x-error-reference` header in the server reply.\n\nExample response:\n\n```http\nHTTP/1.1 500 Internal Server Error\nx-error-reference: a45ec9c1-065b-4f7b-baf8-dbd1552ffc9f\nContent-Type: application/json; charset=utf-8\nContent-Length: 1848\nVary: Accept-Encoding\nDate: Sun, 10 Sep 2017 06:48:40 GMT\n```\n\n## Rate Limiting\n\nTo ensure resilience against increasing request rates, we are starting to introduce rate-limiting.\nWe are monitoring the rate-limiting system to ensure minimal impact on users while ensuring system stability.\nThe limit is up to 2000 requests per minute, per user, subject to change. As such, we recommend calls to the API are throttled regardless of the current limit.\nAll requests above the limit will get a response with status code `429` - `Too many requests` until requests stop for the duration of the rate-limiting interval (currently a minute).\n\n## Consuming Webhooks\n\nWebhooks are delivered with a `Content-Type` of `application/json`, with the event payload as JSON in the request body. We also send the following headers:\n\n- `X-Snyk-Event` - the name of the event\n\n- `X-Snyk-Transport-ID` - a GUID to identify this delivery\n\n- `X-Snyk-Timestamp` - an ISO 8601 timestamp for when the event occurred, for example: `2020-09-25T15:27:53Z`\n\n- `X-Hub-Signature` - the HMAC hex digest of the request body, used to secure your webhooks and ensure the request did indeed come from Snyk\n\n- `User-Agent` - identifies the origin of the request, for example: `Snyk-Webhooks/XXX`\n\n---\n\nAfter your server is configured to receive payloads, it listens for any payload sent to the endpoint you configured. For security reasons, you should limit requests to those coming from Snyk.\n\n### Validating payloads\n\nAll transports sent to your webhooks have a `X-Hub-Signature` header, which contains the hash signature for the transport. The signature is a HMAC hexdigest of the request body, generated using sha256 and your `secret` as the HMAC key.\n\nYou could use a function in Node.JS such as the following to validate these signatures on incoming requests from Snyk:\n\n```javascript\nimport * as crypto from 'crypto';\n\nfunction verifySignature(request, secret) {\n  const hmac = crypto.createHmac('sha256', secret);\n  const buffer = JSON.stringify(request.body);\n  hmac.update(buffer, 'utf8');\n\n  const signature = `sha256=${hmac.digest('hex')}`;\n\n  return signature === request.headers['x-hub-signature'];\n}\n```\n\n### Payload versioning\n\nPayloads may evolve over time, and so are versioned. Payload versions are supplied as a suffix to the `X-Snyk-Event` header. For example, `project_snapshot/v0` indicates that the payload is `v0` of the `project_snapshot` event.\n\nVersion numbers only increment when a breaking change is made; for example, removing a field that used to exist, or changing the name of a field. Version numbers do not increment when making an additive change, such as adding a new field that never existed before.\n\n**Note:** During the BETA phase, the structure of webhook payloads may change at any time, so we  recommend you check the payload version.\n\n### Event types\n\nWhile consuming a webhook event, `X-Snyk-Event` header must be checked, as an end-point may receive multiple event types.\n\n#### ping\n\nThe ping event happens after a new webhook is created, and can also be manually triggered using the ping webhook API. This is useful to test that your webhook receives data from Snyk correctly.\n\nThe `ping` event makes the following request:\n\n```jsx\nPOST /webhook-handler/snyk123 HTTP/1.1\nHost: my.app.com\nX-Snyk-Event: ping/v0\nX-Snyk-Transport-ID: 998fe884-18a0-45db-8ae0-e379eea3bc0a\nX-Snyk-Timestamp: 2020-09-25T15:27:53Z\nX-Hub-Signature: sha256=7d38cdd689735b008b3c702edd92eea23791c5f6\nUser-Agent: Snyk-Webhooks/044aadd\nContent-Type: application/json\n{\n  \"webhookId\": \"d3cf26b3-2d77-497b-bce2-23b33cc15362\"\n}\n```\n\n#### project_snapshot\n\nThis event is triggered every time an existing project is tested and a new snapshot is created. It is triggered on every test of a project, whether or not there are new issues. This event is not triggered when a new project is created or imported. Currently supported targets/scan types are Open Source and container.\n\n```jsx\nPOST /webhook-handler/snyk123 HTTP/1.1\nHost: my.app.com\nX-Snyk-Event: project_snapshot/v0\nX-Snyk-Transport-ID: 998fe884-18a0-45db-8ae0-e379eea3bc0a\nX-Snyk-Timestamp: 2020-09-25T15:27:53Z\nX-Hub-Signature: sha256=7d38cdd689735b008b3c702edd92eea23791c5f6\nUser-Agent: Snyk-Webhooks/044aadd\nContent-Type: application/json\n{\n  \"project\": { ... }, // project object matching API responses\n  \"org\": { ... }, // organization object matching API responses\n  \"group\": { ... }, // group object matching API responses\n  \"newIssues\": [], // array of issues object matching API responses\n  \"removedIssues\": [], // array of issues object matching API responses\n}\n```\n\n####  Detailed example of a payload\n\n##### project\n\nsee: [https://snyk.docs.apiary.io/#reference/projects](https://snyk.docs.apiary.io/#reference/projects)\n\n```tsx\n\"project\": {\n  \"name\": \"snyk/goof\",\n  \"id\": \"af137b96-6966-46c1-826b-2e79ac49bbd9\",\n  \"created\": \"2018-10-29T09:50:54.014Z\",\n  \"origin\": \"github\",\n  \"type\": \"maven\",\n  \"readOnly\": false,\n  \"testFrequency\": \"daily\",\n  \"totalDependencies\": 42,\n  \"issueCountsBySeverity\": {\n    \"low\": 13,\n    \"medium\": 8,\n    \"high\": 4,\n    \"critical\": 5\n  },\n  \"imageId\": \"sha256:caf27325b298a6730837023a8a342699c8b7b388b8d878966b064a1320043019\",\n  \"imageTag\": \"latest\",\n  \"imageBaseImage\": \"alpine:3\",\n  \"imagePlatform\": \"linux/arm64\",\n  \"imageCluster\": \"Production\",\n  \"hostname\": null,\n  \"remoteRepoUrl\": \"https://github.com/snyk/goof.git\",\n  \"lastTestedDate\": \"2019-02-05T08:54:07.704Z\",\n  \"browseUrl\": \"https://app.snyk.io/org/4a18d42f-0706-4ad0-b127-24078731fbed/project/af137b96-6966-46c1-826b-2e79ac49bbd9\",\n  \"importingUser\": {\n    \"id\": \"e713cf94-bb02-4ea0-89d9-613cce0caed2\",\n    \"name\": \"example-user@snyk.io\",\n    \"username\": \"exampleUser\",\n    \"email\": \"example-user@snyk.io\"\n  },\n  \"isMonitored\": false,\n  \"branch\": null,\n  \"targetReference\": null,\n  \"tags\": [\n    {\n      \"key\": \"example-tag-key\",\n      \"value\": \"example-tag-value\"\n    }\n  ],\n  \"attributes\": {\n    \"criticality\": [\n      \"high\"\n    ],\n    \"environment\": [\n      \"backend\"\n    ],\n    \"lifecycle\": [\n      \"development\"\n    ]\n  },\n  \"remediation\": {\n    \"upgrade\": {},\n    \"patch\": {},\n    \"pin\": {}\n  }\n}\n```\n\n##### org\n\nsee: [https://snyk.docs.apiary.io/#reference/organizations](https://snyk.docs.apiary.io/#reference/organizations)\n\n```tsx\n\"org\": {\n  \"name\": \"My Org\",\n  \"id\": \"a04d9cbd-ae6e-44af-b573-0556b0ad4bd2\",\n  \"slug\": \"my-org\",\n  \"url\": \"https://api.snyk.io/org/my-org\",\n  \"created\": \"2020-11-18T10:39:00.983Z\"\n}\n```\n\n##### group\n\nsee: [https://snyk.docs.apiary.io/#reference/groups](https://snyk.docs.apiary.io/#reference/groups)\n\n```tsx\n\"group\": {\n  \"name\": \"ACME Inc.\",\n   \"id\": \"a060a49f-636e-480f-9e14-38e773b2a97f\"\n}\n```\n\n##### issue\n\nsee: https://snyk.docs.apiary.io/#reference/users/user-organization-notification-settings/list-all-aggregated-issues\n\n```tsx\n{\n  \"id\": \"npm:ms:20170412\",\n  \"issueType\": \"vuln\",\n  \"pkgName\": \"ms\",\n  \"pkgVersions\": [\n    \"1.0.0\"\n  ],\n  \"issueData\": {\n    \"id\": \"npm:ms:20170412\",\n    \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n    \"severity\": \"low\",\n    \"url\": \"https://snyk.io/vuln/npm:ms:20170412\",\n    \"description\": \"Lorem ipsum\",\n    \"identifiers\": {\n      \"CVE\": [],\n      \"CWE\": [\n        \"CWE-400\"\n      ],\n      \"ALTERNATIVE\": [\n        \"SNYK-JS-MS-10509\"\n      ]\n    },\n    \"credit\": [\n      \"Snyk Security Research Team\"\n    ],\n    \"exploitMaturity\": \"no-known-exploit\",\n    \"semver\": {\n      \"vulnerable\": [\n        \">=0.7.1 <2.0.0\"\n      ]\n    },\n    \"publicationTime\": \"2017-05-15T06:02:45Z\",\n    \"disclosureTime\": \"2017-04-11T21:00:00Z\",\n    \"CVSSv3\": \"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L\",\n    \"cvssScore\": 3.7,\n    \"language\": \"js\",\n    \"patches\": [\n      {\n        \"id\": \"patch:npm:ms:20170412:2\",\n        \"urls\": [\n          \"https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch\"\n        ],\n        \"version\": \"=0.7.1\",\n        \"comments\": [],\n        \"modificationTime\": \"2019-12-03T11:40:45.866206Z\"\n      }\n    ],\n    \"nearestFixedInVersion\": \"2.0.0\"\n  },\n  \"isPatched\": false,\n  \"isIgnored\": false,\n  \"fixInfo\": {\n    \"isUpgradable\": false,\n    \"isPinnable\": false,\n    \"isPatchable\": true,\n    \"nearestFixedInVersion\": \"2.0.0\"\n  },\n  \"priority\": {\n    \"score\": 399,\n    \"factors\": [\n      {\n        \"name\": \"isFixable\",\n        \"description\": \"Has a fix available\"\n      },\n      {\n        \"name\": \"cvssScore\",\n        \"description\": \"CVSS 3.7\"\n      }\n    ]\n  }\n}\n```",
  "apiTitle": "Snyk API",
  "endpoints": 84,
  "sdkMethods": 103,
  "schemas": 177,
  "parameters": 313,
  "difficultyScore": 269.75,
  "difficulty": "Hard"
}